(ns bitclojn.core)

(defmacro § [& _])
(defmacro ß [& _])

(defmacro def-
    ([s] `(def ~(vary-meta s assoc :private true)))
    ([s i] `(def ~(vary-meta s assoc :private true) ~i)))

(defmacro any
    ([f x y] `(~f ~x ~y))
    ([f x y & z] `(let [f# ~f x# ~x _# (any f# x# ~y)] (if _# _# (any f# x# ~@z)))))
(defn- =?
    ([x y] (if (sequential? x) (if (seq x) (or (=? (first x) y) (recur (rest x) y)) false) (if (sequential? y) (recur y x) (= x y))))
    ([x y & z] (=? x (cons y z))))

(defmacro when' [y & w]
    (let [[_ & w] (if (= '=> (first w)) (rest w) (cons nil w))]
        `(if ~y (do ~@w) ~_)))
(defmacro let-when [x y & w]
    (let [[_ & w] (if (= '=> (first w)) (rest w) (cons nil w))]
        `(let [~@x] (if ~y (do ~@w) ~_))))

(letfn [(l' [x y z w]
    (let [x (cond (vector? x) x (symbol? x) [x x] :else [`_# x]) z (cond (vector? z) `((recur ~@z)) (some? z) `((recur ~z))) [_ & w] (if (= '=> (first w)) (rest w) (cons nil w))]
        `(loop [~@x] (if ~y (do ~@w ~@z) ~_))))]
            (defmacro loop-when [x y & w] (l' x y nil w))
            (defmacro loop-when-recur [x y z & w] (l' x y z w)))
(defmacro recur-if [y z & w]
    (let [z (cond (vector? z) `(recur ~@z) (some? z) `(recur ~z)) _ (if (= '=> (first w)) (second w))]
        `(if ~y ~z ~_)))

(def- & bit-and)
(def- | bit-or)
(def- << bit-shift-left)
(def- >> bit-shift-right)
(def- >>> unsigned-bit-shift-right)

(defn -main [& args]
    )

#_(ns org.bitcoinj.core
    (:import [com.google.common.base Charsets Joiner MoreObjects Objects Strings]
             [com.google.common.collect ImmutableMap Lists Ordering]
             [com.google.common.hash HashCode Hasher Hashing]
             [com.google.common.io BaseEncoding]
             [com.google.common.math LongMath]
             [com.google.common.net InetAddresses]
             [com.google.common.primitives Ints Longs UnsignedBytes UnsignedLongs]
             [com.google.common.util.concurrent FutureCallback Futures ListenableFuture SettableFuture Uninterruptibles]
             [java.io ByteArrayOutputStream FileInputStream File IOException InputStream OutputStream UnsupportedEncodingException]
             [java.lang.ref WeakReference]
             [java.math BigDecimal BigInteger]
             [java.net ConnectException InetAddress InetSocketAddress URL UnknownHostException]
             [java.nio BufferUnderflowException ByteBuffer ByteOrder]
             [java.nio.channels NotYetConnectedException]
             [java.nio.charset Charset]
             [java.security MessageDigest NoSuchAlgorithmException SecureRandom SignatureException]
             [java.text DateFormat SimpleDateFormat]
             [java.util ArrayList Arrays Collections Comparator Date HashMap HashSet LinkedList ListIterator List Locale Map Set TreeMap]
             [java.util.concurrent ArrayBlockingQueue BlockingQueue CopyOnWriteArrayList CopyOnWriteArraySet Executor TimeUnit]
             [java.util.concurrent.atomic AtomicInteger]
             [java.util.concurrent.locks Lock ReentrantLock]
             [org.slf4j LoggerFactory Logger]
             [org.spongycastle.asn1 *]
             [org.spongycastle.asn1.x9 X9ECParameters X9IntegerConverter]
             [org.spongycastle.crypto AsymmetricCipherKeyPair]
             [org.spongycastle.crypto.digests RIPEMD160Digest SHA256Digest]
             [org.spongycastle.crypto.ec CustomNamedCurves]
             [org.spongycastle.crypto.generators ECKeyPairGenerator]
             [org.spongycastle.crypto.params KeyParameter]
             [org.spongycastle.crypto.signers ECDSASigner HMacDSAKCalculator]
             [org.spongycastle.math.ec ECAlgorithms ECPoint FixedPointCombMultiplier FixedPointUtil]
             [org.spongycastle.math.ec.custom.sec SecP256K1Curve]
             [org.spongycastle.util.encoders Base64]
    )
)

;;;
 ; An AbstractBlockChain holds a series of {@link Block} objects, links them together, and knows how to verify that
 ; the chain follows the rules of the {@link NetworkParameters} for this chain.
 ;
 ; It can be connected to a {@link Wallet}, and also {@link TransactionReceivedInBlockListener}s that can receive
 ; transactions and notifications of re-organizations.
 ;
 ; An AbstractBlockChain implementation must be connected to a {@link BlockStore} implementation.  The chain object
 ; by itself doesn't store any data, that's delegated to the store.  Which store you use is a decision best made by
 ; reading the getting started guide, but briefly, fully validating block chains need fully validating stores.
 ; In the lightweight SPV mode, a {@link SPVBlockStore} is the right choice.
 ;
 ; This class implements an abstract class which makes it simple to create a BlockChain that does/doesn't do
 ; full verification.  It verifies headers and is implements most of what is required to implement SPV mode, but
 ; also provides callback hooks which can be used to do full verification.
 ;
 ; There are two subclasses of AbstractBlockChain that are useful: {@link BlockChain}, which is the simplest
 ; class and implements <i>simplified payment verification</i>.  This is a lightweight and efficient mode that
 ; does not verify the contents of blocks, just their headers.  A {@link FullPrunedBlockChain} paired with a
 ; {@link H2FullPrunedBlockStore} implements full verification, which is equivalent to Bitcoin Core.
 ;
 ; To learn more about the alternative security models, please consult the articles on the website.
 ;
 ; <b>Theory</b>
 ;
 ; The 'chain' is actually a tree although in normal operation it operates mostly as a list of {@link Block}s.
 ; When multiple new head blocks are found simultaneously, there are multiple stories of the economy competing to become
 ; the one true consensus.  This can happen naturally when two miners solve a block within a few seconds of each other,
 ; or it can happen when the chain is under attack.
 ;
 ; A reference to the head block of the best known chain is stored.  If you can reach the genesis block by repeatedly
 ; walking through the prevBlock pointers, then we say this is a full chain.  If you cannot reach the genesis block
 ; we say it is an orphan chain.  Orphan chains can occur when blocks are solved and received during the initial block
 ; chain download, or if we connect to a peer that doesn't send us blocks in order.
 ;
 ; A reorganize occurs when the blocks that make up the best known chain changes.  Note that simply adding a
 ; new block to the top of the best chain isn't as reorganize, but that a reorganize is always triggered by adding
 ; a new block that connects to some other (non best head) block.  By "best" we mean the chain representing the largest
 ; amount of work done.
 ;
 ; Every so often the block chain passes a difficulty transition point.  At that time, all the blocks in the last
 ; 2016 blocks are examined and a new difficulty target is calculated from them.
 ;;
#_public
#_abstract
(§ class AbstractBlockChain
    #_private
    #_static
    (def- #_"Logger" AbstractBlockChain'log (LoggerFactory/getLogger AbstractBlockChain))

    #_protected
    (§ field #_"ReentrantLock" :lock (Threading'lock "blockchain"))

    ;;; Keeps a map of block hashes to StoredBlocks. ;;
    #_private
    (§ field- #_"BlockStore" :block-store)

    ;;;
     ; Tracks the top of the best known chain.
     ;
     ; Following this one down to the genesis block produces the story of the economy from the creation of Bitcoin
     ; until the present day.  The chain head can change if a new set of blocks is received that results in a chain of
     ; greater work than the one obtained by following this one down.  In that case a reorganize is triggered,
     ; potentially invalidating transactions in our wallet.
     ;;
    #_protected
    (§ field #_"StoredBlock" :chain-head)

    ;; TODO: Scrap this and use a proper read/write for all of the block chain objects.
    ;; The chainHead field is read/written synchronized with this object rather than BlockChain.  However writing is
    ;; also guaranteed to happen whilst BlockChain is synchronized (see setChainHead).  The goal of this is to let
    ;; clients quickly access the chain head even whilst the block chain is downloading and thus the BlockChain is
    ;; locked most of the time.
    #_private
    (§ field- #_"Object" :chain-head-lock (Object.))

    #_protected
    (§ field #_"NetworkParameters" :params)
    #_private
    (§ field- #_"CopyOnWriteArrayList<ListenerRegistration<NewBestBlockListener>>" :new-best-block-listeners)
    #_private
    (§ field- #_"CopyOnWriteArrayList<ListenerRegistration<ReorganizeListener>>" :reorganize-listeners)
    #_private
    (§ field- #_"CopyOnWriteArrayList<ListenerRegistration<TransactionReceivedInBlockListener>>" :transaction-received-listeners)

    ;; Holds a block header and, optionally, a list of tx hashes or block's transactions.
    (§ class OrphanBlock
        (§ field #_"Block" :block)
        (§ field #_"List<Sha256Hash>" :filtered-tx-hashes)
        (§ field #_"Map<Sha256Hash, Transaction>" :filtered-txn)

        (§ constructor OrphanBlock [#_"Block" block, #_nilable #_"List<Sha256Hash>" __filteredTxHashes, #_nilable #_"Map<Sha256Hash, Transaction>" __filteredTxn]
            (let [#_"boolean" filtered (and (some? __filteredTxHashes) (some? __filteredTxn))]
                (assert-argument (or (and (nil? (:transactions block)) filtered) (and (some? (:transactions block)) (not filtered))))
                (§ assoc this :block block)
                (§ assoc this :filtered-tx-hashes __filteredTxHashes)
                (§ assoc this :filtered-txn __filteredTxn)
                this
            )
        )
    )
    ;; Holds blocks that we have received but can't plug into the chain yet, e.g. because they were created whilst we
    ;; were downloading the block chain.
    #_private
    (§ field- #_"LinkedHashMap<Sha256Hash, OrphanBlock>" :orphan-blocks (LinkedHashMap. #_"<>"))

    ;;; False positive estimation uses a double exponential moving average. ;;
    #_public
    #_static
    (def #_"double" AbstractBlockChain'FP_ESTIMATOR_ALPHA 0.0001)
    ;;; False positive estimation uses a double exponential moving average. ;;
    #_public
    #_static
    (def #_"double" AbstractBlockChain'FP_ESTIMATOR_BETA 0.01)

    #_private
    (§ field- #_"double" :false-positive-rate)
    #_private
    (§ field- #_"double" :false-positive-trend)
    #_private
    (§ field- #_"double" :previous-false-positive-rate)

    #_private
    (§ field- #_"VersionTally" :version-tally)

    ;;; See {@link #AbstractBlockChain(Context, List, BlockStore)} ;;
    #_public
    #_throws #_[ "BlockStoreException" ]
    (§ constructor AbstractBlockChain [#_"NetworkParameters" params, #_"List<? extends Wallet>" __transactionReceivedListeners, #_"BlockStore" __blockStore]
        (§ this (Context'getOrCreate params), __transactionReceivedListeners, __blockStore)
        this
    )

    ;;;
     ; Constructs a BlockChain connected to the given list of listeners (e.g. wallets) and a store.
     ;;
    #_public
    #_throws #_[ "BlockStoreException" ]
    (§ constructor AbstractBlockChain [#_"Context" context, #_"List<? extends Wallet>" wallets, #_"BlockStore" __blockStore]
        (§ assoc this :block-store __blockStore)
        (§ assoc this :chain-head (.. __blockStore (getChainHead)))
        (.. AbstractBlockChain'log (info "chain head is at height {}:\n{}", (.. (:chain-head this) (getHeight)), (.. (:chain-head this) (getHeader))))
        (§ assoc this :params (.. context (getParams)))

        (§ assoc this :new-best-block-listeners (CopyOnWriteArrayList. #_"<>"))
        (§ assoc this :reorganize-listeners (CopyOnWriteArrayList. #_"<>"))
        (§ assoc this :transaction-received-listeners (CopyOnWriteArrayList. #_"<>"))
        (doseq [#_"NewBestBlockListener" l wallets]
            (.. this (addNewBestBlockListener Threading'SAME_THREAD, l))
        )
        (doseq [#_"ReorganizeListener" l wallets]
            (.. this (addReorganizeListener Threading'SAME_THREAD, l))
        )
        (doseq [#_"TransactionReceivedInBlockListener" l wallets]
            (.. this (addTransactionReceivedListener Threading'SAME_THREAD, l))
        )

        (§ assoc this :version-tally (VersionTally. (.. context (getParams))))
        (.. (:version-tally this) (initialize __blockStore, (:chain-head this)))
        this
    )

    ;;;
     ; Add a wallet to the BlockChain.  Note that the wallet will be unaffected by any blocks received while it
     ; was not part of this BlockChain.  This method is useful if the wallet has just been created, and its keys
     ; have never been in use, or if the wallet has been loaded along with the BlockChain.  Note that adding
     ; multiple wallets is not well tested!
     ;;
    #_public
    (§ method #_"void" addWallet [#_"Wallet" wallet]
        (.. this (addNewBestBlockListener Threading'SAME_THREAD, wallet))
        (.. this (addReorganizeListener Threading'SAME_THREAD, wallet))
        (.. this (addTransactionReceivedListener Threading'SAME_THREAD, wallet))

        (let [#_"int" __walletHeight (.. wallet (getLastBlockSeenHeight))
              #_"int" __chainHeight (.. this (getBestChainHeight))]
            (when (not= __walletHeight __chainHeight)
                (.. AbstractBlockChain'log (warn "Wallet/chain height mismatch: {} vs {}", __walletHeight, __chainHeight))
                (.. AbstractBlockChain'log (warn "Hashes: {} vs {}", (.. wallet (getLastBlockSeenHash)), (.. this (getChainHead) (getHeader) (getHash))))

                ;; This special case happens when the VM crashes because of a transaction received.  It causes the updated
                ;; block store to persist, but not the wallet.  In order to fix the issue, we roll back the block store to
                ;; the wallet height to make it look like as if the block has never been received.
                (when (< 0 __walletHeight __chainHeight)
                    (try
                        (.. this (rollbackBlockStore __walletHeight))
                        (.. AbstractBlockChain'log (info "Rolled back block store to height {}.", __walletHeight))
                        (catch BlockStoreException _
                            (.. AbstractBlockChain'log (warn "Rollback of block store failed, continuing with mismatched heights. This can happen due to a replay."))
                        )
                    )
                )
            )
        )
        nil
    )

    ;;; Removes a wallet from the chain. ;;
    #_public
    (§ method #_"void" removeWallet [#_"Wallet" wallet]
        (.. this (removeNewBestBlockListener wallet))
        (.. this (removeReorganizeListener wallet))
        (.. this (removeTransactionReceivedListener wallet))
        nil
    )

    ;;; Replaced with more specific listener methods: use them instead. ;;
    #_deprecated
    #_suppress #_[ "deprecation" ]
    #_public
    (§ method #_"void" addListener [#_"BlockChainListener" listener]
        (.. this (addListener listener, Threading'USER_THREAD))
        nil
    )

    ;;; Replaced with more specific listener methods: use them instead. ;;
    #_deprecated
    #_public
    (§ method #_"void" addListener [#_"BlockChainListener" listener, #_"Executor" executor]
        (.. this (addReorganizeListener executor, listener))
        (.. this (addNewBestBlockListener executor, listener))
        (.. this (addTransactionReceivedListener executor, listener))
        nil
    )

    #_deprecated
    #_public
    (§ method #_"void" removeListener [#_"BlockChainListener" listener]
        (.. this (removeReorganizeListener listener))
        (.. this (removeNewBestBlockListener listener))
        (.. this (removeTransactionReceivedListener listener))
        nil
    )

    ;;;
     ; Adds a {@link NewBestBlockListener} listener to the chain.
     ;;
    #_public
    (§ method #_"void" addNewBestBlockListener [#_"NewBestBlockListener" listener]
        (.. this (addNewBestBlockListener Threading'USER_THREAD, listener))
        nil
    )

    ;;;
     ; Adds a {@link NewBestBlockListener} listener to the chain.
     ;;
    #_public
    (§ method #_"void" addNewBestBlockListener [#_"Executor" executor, #_"NewBestBlockListener" listener]
        (.. (:new-best-block-listeners this) (add (ListenerRegistration. #_"<>" listener, executor)))
        nil
    )

    ;;;
     ; Adds a generic {@link ReorganizeListener} listener to the chain.
     ;;
    #_public
    (§ method #_"void" addReorganizeListener [#_"ReorganizeListener" listener]
        (.. this (addReorganizeListener Threading'USER_THREAD, listener))
        nil
    )

    ;;;
     ; Adds a generic {@link ReorganizeListener} listener to the chain.
     ;;
    #_public
    (§ method #_"void" addReorganizeListener [#_"Executor" executor, #_"ReorganizeListener" listener]
        (.. (:reorganize-listeners this) (add (ListenerRegistration. #_"<>" listener, executor)))
        nil
    )

    ;;;
     ; Adds a generic {@link TransactionReceivedInBlockListener} listener to the chain.
     ;;
    #_public
    (§ method #_"void" addTransactionReceivedListener [#_"TransactionReceivedInBlockListener" listener]
        (.. this (addTransactionReceivedListener Threading'USER_THREAD, listener))
        nil
    )

    ;;;
     ; Adds a generic {@link TransactionReceivedInBlockListener} listener to the chain.
     ;;
    #_public
    (§ method #_"void" addTransactionReceivedListener [#_"Executor" executor, #_"TransactionReceivedInBlockListener" listener]
        (.. (:transaction-received-listeners this) (add (ListenerRegistration. #_"<>" listener, executor)))
        nil
    )

    ;;;
     ; Removes the given {@link NewBestBlockListener} from the chain.
     ;;
    #_public
    (§ method #_"void" removeNewBestBlockListener [#_"NewBestBlockListener" listener]
        (ListenerRegistration'removeFromList listener, (:new-best-block-listeners this))
        nil
    )

    ;;;
     ; Removes the given {@link ReorganizeListener} from the chain.
     ;;
    #_public
    (§ method #_"void" removeReorganizeListener [#_"ReorganizeListener" listener]
        (ListenerRegistration'removeFromList listener, (:reorganize-listeners this))
        nil
    )

    ;;;
     ; Removes the given {@link TransactionReceivedInBlockListener} from the chain.
     ;;
    #_public
    (§ method #_"void" removeTransactionReceivedListener [#_"TransactionReceivedInBlockListener" listener]
        (ListenerRegistration'removeFromList listener, (:transaction-received-listeners this))
        nil
    )

    ;;;
     ; Returns the {@link BlockStore} the chain was constructed with.  You can use this to iterate over the chain.
     ;;
    #_public
    (§ method #_"BlockStore" getBlockStore []
        (:block-store this)
    )

    ;;;
     ; Adds/updates the given {@link Block} with the block store.
     ; This version is used when the transactions have not been verified.
     ;
     ; @param storedPrev The {@link StoredBlock} which immediately precedes block.
     ; @param block The {@link Block} to add/update.
     ; @return the newly created {@link StoredBlock}
     ;;
    #_protected
    #_abstract
    #_throws #_[ "BlockStoreException", "VerificationException" ]
    (§ method #_"StoredBlock" addToBlockStore [#_"StoredBlock" __storedPrev, #_"Block" block])

    ;;;
     ; Adds/updates the given {@link StoredBlock} with the block store.
     ; This version is used when the transactions have already been verified to properly spend txOutputChanges.
     ;
     ; @param storedPrev The {@link StoredBlock} which immediately precedes block.
     ; @param header The {@link StoredBlock} to add/update.
     ; @param txOutputChanges The total sum of all changes made by this block to the set of open transaction outputs
     ;                        (from a call to connectTransactions), if in fully verifying mode (null otherwise).
     ; @return the newly created {@link StoredBlock}
     ;;
    #_protected
    #_abstract
    #_throws #_[ "BlockStoreException", "VerificationException" ]
    (§ method #_"StoredBlock" addToBlockStore [#_"StoredBlock" __storedPrev, #_"Block" header, #_nilable #_"TransactionOutputChanges" __txOutputChanges])

    ;;;
     ; Rollback the block store to a given height.  This is currently only supported by {@link BlockChain} instances.
     ;
     ; @throws BlockStoreException if the operation fails or is unsupported.
     ;;
    #_protected
    #_abstract
    #_throws #_[ "BlockStoreException" ]
    (§ method #_"void" rollbackBlockStore [#_"int" height])

    ;;;
     ; Called before setting chain head in memory.
     ; Should write the new head to block store and then commit any database transactions
     ; that were started by disconnectTransactions/connectTransactions.
     ;;
    #_protected
    #_abstract
    #_throws #_[ "BlockStoreException" ]
    (§ method #_"void" doSetChainHead [#_"StoredBlock" __chainHead])

    ;;;
     ; Called if we (possibly) previously called disconnectTransaction/connectTransactions,
     ; but will not be calling preSetChainHead as a block failed verification.
     ; Can be used to abort database transactions that were started by
     ; disconnectTransactions/connectTransactions.
     ;;
    #_protected
    #_abstract
    #_throws #_[ "BlockStoreException" ]
    (§ method #_"void" notSettingChainHead [])

    ;;;
     ; For a standard BlockChain, this should return blockStore.get(hash),
     ; for a FullPrunedBlockChain blockStore.getOnceUndoableStoredBlock(hash)
     ;;
    #_protected
    #_abstract
    #_throws #_[ "BlockStoreException" ]
    (§ method #_"StoredBlock" getStoredBlockInCurrentScope [#_"Sha256Hash" hash])

    ;;;
     ; Processes a received block and tries to add it to the chain.  If there's something wrong with the block an
     ; exception is thrown.  If the block is OK but cannot be connected to the chain at this time, returns false.
     ; If the block can be connected to the chain, returns true.
     ; Accessing block's transactions in another thread while this method runs may result in undefined behavior.
     ;;
    #_public
    #_throws #_[ "VerificationException", "PrunedException" ]
    (§ method #_"boolean" add [#_"Block" block]
        (try
            (.. this (add block, true, nil, nil))
            (catch BlockStoreException e
                ;; TODO: Figure out a better way to propagate this exception to the user.
                (throw (RuntimeException. e))
            )
            (catch VerificationException e
                (try
                    (.. this (notSettingChainHead))
                    (catch BlockStoreException e1
                        (throw (RuntimeException. e1))
                    )
                )
                (throw (VerificationException. (str "Could not verify block:\n" block), e))
            )
        )
    )

    ;;;
     ; Processes a received block and tries to add it to the chain.  If there's something wrong with the block an
     ; exception is thrown.  If the block is OK but cannot be connected to the chain at this time, returns false.
     ; If the block can be connected to the chain, returns true.
     ;;
    #_public
    #_throws #_[ "VerificationException", "PrunedException" ]
    (§ method #_"boolean" add [#_"FilteredBlock" block]
        (try
            ;; The block has a list of hashes of transactions that matched the Bloom filter, and a list of associated
            ;; Transaction objects.  There may be fewer Transaction objects than hashes, this is expected.  It can happen
            ;; in the case where we were already around to witness the initial broadcast, so we downloaded the
            ;; transaction and sent it to the wallet before this point (the wallet may have thrown it away if it was
            ;; a false positive, as expected in any Bloom filtering scheme).  The filteredTxn list here will usually
            ;; only be full of data when we are catching up to the head of the chain and thus haven't witnessed any
            ;; of the transactions.
            (.. this (add (.. block (getBlockHeader)), true, (.. block (getTransactionHashes)), (.. block (getAssociatedTransactions))))
            (catch BlockStoreException e
                ;; TODO: Figure out a better way to propagate this exception to the user.
                (throw (RuntimeException. e))
            )
            (catch VerificationException e
                (try
                    (.. this (notSettingChainHead))
                    (catch BlockStoreException e1
                        (throw (RuntimeException. e1))
                    )
                )
                (throw (VerificationException. (str "Could not verify block " (.. block (getHash)) "\n" block), e))
            )
        )
    )

    ;;;
     ; Whether or not we are maintaining a set of unspent outputs and are verifying all transactions.
     ; Also indicates that all calls to add() should provide a block containing transactions
     ;;
    #_protected
    #_abstract
    (§ method #_"boolean" shouldVerifyTransactions [])

    ;;;
     ; Connect each transaction in block.transactions, verifying them as we go and removing spent outputs
     ; If an error is encountered in a transaction, no changes should be made to the underlying BlockStore
     ; and a VerificationException should be thrown.
     ; Only called if shouldVerifyTransactions().
     ;
     ; @throws VerificationException if an attempt was made to spend an already-spent output, or if a transaction incorrectly solved an output script.
     ; @throws BlockStoreException if the block store had an underlying error.
     ; @return The full set of all changes made to the set of open transaction outputs.
     ;;
    #_protected
    #_abstract
    #_throws #_[ "VerificationException", "BlockStoreException" ]
    (§ method #_"TransactionOutputChanges" connectTransactions [#_"int" height, #_"Block" block])

    ;;;
     ; Load newBlock from BlockStore and connect its transactions, returning changes to the set of unspent transactions.
     ; If an error is encountered in a transaction, no changes should be made to the underlying BlockStore.
     ; Only called if shouldVerifyTransactions().
     ;
     ; @throws PrunedException if newBlock does not exist as a {@link StoredUndoableBlock} in the block store.
     ; @throws VerificationException if an attempt was made to spend an already-spent output, or if a transaction incorrectly solved an output script.
     ; @throws BlockStoreException if the block store had an underlying error or newBlock does not exist in the block store at all.
     ; @return The full set of all changes made to the set of open transaction outputs.
     ;;
    #_protected
    #_abstract
    #_throws #_[ "VerificationException", "BlockStoreException", "PrunedException" ]
    (§ method #_"TransactionOutputChanges" connectTransactions [#_"StoredBlock" __newBlock])

    ;; filteredTxHashList contains all transactions, filteredTxn just a subset
    #_private
    #_throws #_[ "BlockStoreException", "VerificationException", "PrunedException" ]
    (§ method- #_"boolean" add [#_"Block" block, #_"boolean" __tryConnecting, #_nilable #_"List<Sha256Hash>" __filteredTxHashList, #_nilable #_"Map<Sha256Hash, Transaction>" __filteredTxn]
        ;; TODO: Use read/write locks to ensure that during chain download properties are still low latency.
        (.. (:lock this) (lock))
        (try
            (cond
                ;; Quick check for duplicates to avoid an expensive check further down (in findSplit).
                ;; This can happen a lot when connecting orphan transactions due to the dumb brute force algorithm we use.
                (.. block (equals (.. this (getChainHead) (getHeader))))
                    true
                (and __tryConnecting (.. (:orphan-blocks this) (containsKey (.. block (getHash)))))
                    false
                ;; If we want to verify transactions (i.e. we are running with full blocks), verify that block has transactions.
                (and (.. this (shouldVerifyTransactions)) (nil? (:transactions block)))
                    (throw (VerificationException. "Got a block header while running in full-block mode"))
                ;; Check for already-seen block, but only for full pruned mode, where the DB is
                ;; more likely able to handle these queries quickly.
                (and (.. this (shouldVerifyTransactions)) (some? (.. (:block-store this) (get (.. block (getHash))))))
                    true
                :else
                ;; Prove the block is internally valid: hash is lower than target, etc.  This only checks the block contents
                ;; if there is a tx sending or receiving coins using an address in one of our wallets.  And those transactions
                ;; are only lightly verified: presence in a valid connecting block is taken as proof of validity.  See the
                ;; article here for more details: https://bitcoinj.github.io/security-model
                (let [#_"StoredBlock" prior
                        (try
                            (.. block (verifyHeader))
                            (let [prior (.. this (getStoredBlockInCurrentScope (.. block (getPrevBlockHash))))
                                  #_"int" height (if (some? prior) (inc (.. prior (getHeight))) Block'BLOCK_HEIGHT_UNKNOWN)
                                  #_"EnumSet<BlockVerifyFlag>" flags (.. (:params this) (getBlockVerificationFlags block, (:version-tally this), height))]
                                (when (.. this (shouldVerifyTransactions))
                                    (.. block (verifyTransactions height, flags))
                                )
                                prior
                            )
                            (catch VerificationException e
                                (.. AbstractBlockChain'log (error "Failed to verify block: ", e))
                                (.. AbstractBlockChain'log (error (.. block (getHashAsString))))
                                (throw e)
                            )
                        )]

                    ;; Try linking it to a place in the currently known blocks.

                    (if (some? prior)
                        (do
                            (assert-state (.. (:lock this) (isHeldByCurrentThread)))
                            ;; It connects to somewhere on the chain.  Not necessarily the top of the best known chain.
                            (.. (:params this) (checkDifficultyTransitions prior, block, (:block-store this)))
                            (.. this (connectBlock block, prior, (.. this (shouldVerifyTransactions)), __filteredTxHashList, __filteredTxn))
                            (when __tryConnecting
                                (.. this (tryConnectingOrphans))
                            )
                            true
                        )
                        (do
                            (assert-state __tryConnecting, "bug in tryConnectingOrphans")
                            ;; We can't find the previous block.  Probably we are still in the process of downloading the chain and
                            ;; a block was solved whilst we were doing it.  We put it to one side and try to connect it later when
                            ;; we have more blocks.
                            (.. AbstractBlockChain'log (warn "Block does not connect: {} prev {}", (.. block (getHashAsString)), (.. block (getPrevBlockHash))))
                            (.. (:orphan-blocks this) (put (.. block (getHash)), (OrphanBlock. block, __filteredTxHashList, __filteredTxn)))
                            false
                        )
                    )
                )
            )
            (finally
                (.. (:lock this) (unlock))
            )
        )
    )

    ;;;
     ; Returns the hashes of the currently stored orphan blocks and then deletes them from this objects storage.
     ; Used by Peer when a filter exhaustion event has occurred and thus any orphan blocks that have been downloaded
     ; might be inaccurate/incomplete.
     ;;
    #_public
    (§ method #_"Set<Sha256Hash>" drainOrphanBlocks []
        (.. (:lock this) (lock))
        (try
            (let [#_"Set<Sha256Hash>" hashes (HashSet. #_"<>" (.. (:orphan-blocks this) (keySet)))]
                (.. (:orphan-blocks this) (clear))
                hashes
            )
            (finally
                (.. (:lock this) (unlock))
            )
        )
    )

    ;; expensiveChecks enables checks that require looking at blocks further back in the chain
    ;; than the previous one when connecting (e.g. median timestamp check)
    ;; It could be exposed, but for now we just set it to shouldVerifyTransactions()
    #_private
    #_throws #_[ "BlockStoreException", "VerificationException", "PrunedException" ]
    (§ method- #_"void" connectBlock [#_"Block" block, #_"StoredBlock" __storedPrev, #_"boolean" __expensiveChecks, #_nilable #_"List<Sha256Hash>" __filteredTxHashList, #_nilable #_"Map<Sha256Hash, Transaction>" __filteredTxn]
        (assert-state (.. (:lock this) (isHeldByCurrentThread)))
        (let [#_"boolean" filtered (and (some? __filteredTxHashList) (some? __filteredTxn))]
            ;; Check that we aren't connecting a block that fails a checkpoint check.
            (when (not (.. (:params this) (passesCheckpoint (inc (.. __storedPrev (getHeight))), (.. block (getHash)))))
                (throw (VerificationException. (str "Block failed checkpoint lockin at " (inc (.. __storedPrev (getHeight))))))
            )
            (when (.. this (shouldVerifyTransactions))
                (ensure some? (:transactions block))
                (doseq [#_"Transaction" tx (:transactions block)]
                    (when (not (.. tx (isFinal (inc (.. __storedPrev (getHeight))), (.. block (getTimeSeconds)))))
                        (throw (VerificationException. "Block contains non-final transaction"))
                    )
                )
            )

            (let [#_"StoredBlock" head (.. this (getChainHead))]
                (cond (.. __storedPrev (equals head))
                    (do
                        (when (and filtered (< 0 (.. __filteredTxn (size))))
                            (.. AbstractBlockChain'log (debug "Block {} connects to top of best chain with {} transaction(s) of which we were sent {}", (.. block (getHashAsString)), (.. __filteredTxHashList (size)), (.. __filteredTxn (size))))
                            (doseq [#_"Sha256Hash" hash __filteredTxHashList]
                                (.. AbstractBlockChain'log (debug "  matched tx {}", hash))
                            )
                        )
                        (when (and __expensiveChecks (<= (.. block (getTimeSeconds)) (AbstractBlockChain'getMedianTimestampOfRecentBlocks head, (:block-store this))))
                            (throw (VerificationException. "Block's timestamp is too early"))
                        )

                        ;; BIP 66 & 65: Enforce block version 3/4 once they are a supermajority of blocks.
                        ;; NOTE: This requires 1,000 blocks since the last checkpoint (on main net, less on test) in order to be applied.
                        ;; It is also limited to stopping addition of new v2/3 blocks to the tip of the chain.
                        (when (any = (.. block (getVersion)) Block'BLOCK_VERSION_BIP34 Block'BLOCK_VERSION_BIP66)
                            (let [#_"Integer" count (.. (:version-tally this) (getCountAtOrAbove (inc (.. block (getVersion)))))]
                                (when (and (some? count) (<= (-> this :params :majority-reject-block-outdated) count))
                                    (throw (BlockVersionOutOfDate. (str "Block version #" (.. block (getVersion)) " is outdated.")))
                                )
                            )
                        )

                        ;; This block connects to the best known block, it is a normal continuation of the system.
                        (let [#_"TransactionOutputChanges" __txOutChanges (when (.. this (shouldVerifyTransactions)) (.. this (connectTransactions (inc (.. __storedPrev (getHeight))), block)))
                              #_"StoredBlock" __newStoredBlock (.. this (addToBlockStore __storedPrev, (if (some? (:transactions block)) (.. block (cloneAsHeader)) block), __txOutChanges))]
                            (.. (:version-tally this) (add (.. block (getVersion))))
                            (.. this (setChainHead __newStoredBlock))
                            (.. AbstractBlockChain'log (debug "Chain is now {} blocks high, running listeners", (.. __newStoredBlock (getHeight))))
                            (.. this (informListenersForNewBlock block, :NewBlockType'BEST_CHAIN, __filteredTxHashList, __filteredTxn, __newStoredBlock))
                        )
                    )
                    :else
                    (do
                        ;; This block connects to somewhere other than the top of the best known chain.  We treat these differently.
                        ;;
                        ;; Note that we send the transactions to the wallet FIRST, even if we're about to re-organize this block
                        ;; to become the new best chain head.  This simplifies handling of the re-org in the Wallet class.
                        (let [#_"StoredBlock" __newBlock (.. __storedPrev (build block))
                              #_"boolean" __haveNewBestChain (.. __newBlock (moreWorkThan head))]
                            (cond __haveNewBestChain
                                (do
                                    (.. AbstractBlockChain'log (info "Block is causing a re-organize"))
                                )
                                :else
                                (do
                                    (let [#_"StoredBlock" __splitPoint (AbstractBlockChain'findSplit __newBlock, head, (:block-store this))]
                                        (when (and (some? __splitPoint) (.. __splitPoint (equals __newBlock)))
                                            ;; newStoredBlock is a part of the same chain, there's no fork.  This happens when we receive a block
                                            ;; that we already saw and linked into the chain previously, which isn't the chain head.
                                            ;; Re-processing it is confusing for the wallet so just skip.
                                            (.. AbstractBlockChain'log (warn "Saw duplicated block in main chain at height {}: {}", (.. __newBlock (getHeight)), (.. __newBlock (getHeader) (getHash))))
                                            (§ return nil)
                                        )

                                        (cond (nil? __splitPoint)
                                            (do
                                                ;; This should absolutely never happen.
                                                ;; (lets not write the full block to disk to keep any bugs which allow this to happen from writing unreasonable amounts of data to disk)
                                                (throw (VerificationException. "Block forks the chain but splitPoint is nil"))
                                            )
                                            :else
                                            (do
                                                ;; We aren't actually spending any transactions (yet) because we are on a fork.
                                                (.. this (addToBlockStore __storedPrev, block))
                                                (let [#_"int" __splitPointHeight (.. __splitPoint (getHeight))
                                                      #_"String" __splitPointHash (.. __splitPoint (getHeader) (getHashAsString))]
                                                    (.. AbstractBlockChain'log (info "Block forks the chain at height {}/block {}, but it did not cause a reorganize:\n{}", __splitPointHeight, __splitPointHash, (.. __newBlock (getHeader) (getHashAsString))))
                                                )
                                            )
                                        )
                                    )
                                )
                            )

                            ;; We may not have any transactions if we received only a header, which can happen during fast catchup.
                            ;; If we do, send them to the wallet but state that they are on a side chain so it knows not to try and
                            ;; spend them until they become activated.
                            (when (or (some? (:transactions block)) filtered)
                                (.. this (informListenersForNewBlock block, :NewBlockType'SIDE_CHAIN, __filteredTxHashList, __filteredTxn, __newBlock))
                            )

                            (when __haveNewBestChain
                                (.. this (handleNewBestChain __storedPrev, __newBlock, block, __expensiveChecks))
                            )
                        )
                    )
                )
            )
        )
        nil
    )

    #_private
    #_throws #_[ "VerificationException" ]
    (§ method- #_"void" informListenersForNewBlock [#_"Block" block, #_"NewBlockType" __newBlockType, #_nilable #_"List<Sha256Hash>" __filteredTxHashList, #_nilable #_"Map<Sha256Hash, Transaction>" __filteredTxn, #_"StoredBlock" __newStoredBlock]
        ;; Notify the listeners of the new block, so the depth and workDone of stored transactions can be updated
        ;; (in the case of the listener being a wallet).  Wallets need to know how deep each transaction is, so
        ;; coinbases aren't used before maturity.
        (let [#_"boolean" first true
              #_"Set<Sha256Hash>" __falsePositives (Sets/newHashSet)]
            (when (some? __filteredTxHashList)
                (.. __falsePositives (addAll __filteredTxHashList))
            )

            (doseq [#_"ListenerRegistration<TransactionReceivedInBlockListener>" registration (:transaction-received-listeners this)]
                (cond (= (:executor registration) Threading'SAME_THREAD)
                    (do
                        (AbstractBlockChain'informListenerForNewTransactions block, __newBlockType, __filteredTxHashList, __filteredTxn, __newStoredBlock, first, (:listener registration), __falsePositives)
                    )
                    :else
                    (do
                        ;; Listener wants to be run on some other thread, so marshal it across here.
                        (let [#_"boolean" __notFirst (not first)]
                            (.. (:executor registration) (execute (Runnable.)
                            (§ anon
                                #_override
                                #_public
                                (§ method #_"void" run []
                                    (try
                                        ;; We can't do false-positive handling when executing on another thread.
                                        (let [#_"Set<Sha256Hash>" __ignoredFalsePositives (Sets/newHashSet)]
                                            (AbstractBlockChain'informListenerForNewTransactions block, __newBlockType, __filteredTxHashList, __filteredTxn, __newStoredBlock, __notFirst, (:listener registration), __ignoredFalsePositives)
                                        )
                                        (catch VerificationException e
                                            (.. AbstractBlockChain'log (error "Block chain listener threw exception: ", e))
                                            ;; Don't attempt to relay this back to the original peer thread if this was an async listener invocation.
                                            ;; TODO: Make exception reporting a global feature and use it here.
                                        )
                                    )
                                    nil
                                )
                            )))
                        )
                    )
                )
                (§ ass first false)
            )

            (doseq [#_"ListenerRegistration<NewBestBlockListener>" registration (:new-best-block-listeners this)]
                (cond (= (:executor registration) Threading'SAME_THREAD)
                    (do
                        (when (= __newBlockType :NewBlockType'BEST_CHAIN)
                            (.. (:listener registration) (notifyNewBestBlock __newStoredBlock))
                        )
                    )
                    :else
                    (do
                        ;; Listener wants to be run on some other thread, so marshal it across here.
                        (.. (:executor registration) (execute (Runnable.)
                        (§ anon
                            #_override
                            #_public
                            (§ method #_"void" run []
                                (try
                                    (when (= __newBlockType :NewBlockType'BEST_CHAIN)
                                        (.. (:listener registration) (notifyNewBestBlock __newStoredBlock))
                                    )
                                    (catch VerificationException e
                                        (.. AbstractBlockChain'log (error "Block chain listener threw exception: ", e))
                                        ;; Don't attempt to relay this back to the original peer thread if this was an async listener invocation.
                                        ;; TODO: Make exception reporting a global feature and use it here.
                                    )
                                )
                                nil
                            )
                        )))
                    )
                )
                (§ ass first false)
            )

            (.. this (trackFalsePositives (.. __falsePositives (size))))
        )
        nil
    )

    #_private
    #_static
    #_throws #_[ "VerificationException" ]
    (§ defn- #_"void" AbstractBlockChain'informListenerForNewTransactions [#_"Block" block, #_"NewBlockType" __newBlockType, #_nilable #_"List<Sha256Hash>" __filteredTxHashList, #_nilable #_"Map<Sha256Hash, Transaction>" __filteredTxn, #_"StoredBlock" __newStoredBlock, #_"boolean" first, #_"TransactionReceivedInBlockListener" listener, #_"Set<Sha256Hash>" __falsePositives]
        (cond (some? (:transactions block))
            (do
                ;; If this is not the first wallet, ask for the transactions to be duplicated before being given
                ;; to the wallet when relevant.  This ensures that if we have two connected wallets and a tx that
                ;; is relevant to both of them, they don't end up accidentally sharing the same object (which can
                ;; result in temporary in-memory corruption during re-orgs).  See bug 257.  We only duplicate in
                ;; the case of multiple wallets to avoid an unnecessary efficiency hit in the common case.
                (AbstractBlockChain'sendTransactionsToListener __newStoredBlock, __newBlockType, listener, 0, (:transactions block), (not first), __falsePositives)
            )
            (some? __filteredTxHashList)
            (do
                (ensure some? __filteredTxn)
                ;; We must send transactions to listeners in the order they appeared in the block - thus we iterate over the
                ;; set of hashes and call sendTransactionsToListener with individual txn when they have not already been
                ;; seen in loose broadcasts - otherwise notifyTransactionIsInBlock on the hash.
                (let [#_"int" __relativityOffset 0]
                    (doseq [#_"Sha256Hash" hash __filteredTxHashList]
                        (let [#_"Transaction" tx (.. __filteredTxn (get hash))]
                            (cond (some? tx)
                                (do
                                    (AbstractBlockChain'sendTransactionsToListener __newStoredBlock, __newBlockType, listener, __relativityOffset, (Collections/singletonList tx), (not first), __falsePositives)
                                )
                                (.. listener (notifyTransactionIsInBlock hash, __newStoredBlock, __newBlockType, __relativityOffset))
                                (do
                                    (.. __falsePositives (remove hash))
                                )
                            )
                            (§ ass __relativityOffset (inc __relativityOffset))
                        )
                    )
                )
            )
        )
        nil
    )

    ;;;
     ; Gets the median timestamp of the last 11 blocks.
     ;;
    #_private
    #_static
    #_throws #_[ "BlockStoreException" ]
    (§ defn- #_"long" AbstractBlockChain'getMedianTimestampOfRecentBlocks [#_"StoredBlock" __storedBlock, #_"BlockStore" store]
        (let [#_"long[]" timestamps (long-array 11)
              #_"int" unused 9]
            (aset timestamps 10 (.. __storedBlock (getHeader) (getTimeSeconds)))
            (loop-when-recur [] (and (<= 0 unused) (some? (§ ass __storedBlock (.. __storedBlock (getPrev store))))) [(§ ass unused (dec unused))]
                (aset timestamps unused (.. __storedBlock (getHeader) (getTimeSeconds)))
            )

            (Arrays/sort timestamps, (inc unused), 11)
            (aget timestamps (+ unused (quot (- 11 unused) 2)))
        )
    )

    ;;;
     ; Disconnect each transaction in the block (after reading it from the block store).
     ; Only called if shouldVerifyTransactions().
     ;
     ; @throws PrunedException if block does not exist as a {@link StoredUndoableBlock} in the block store.
     ; @throws BlockStoreException if the block store had an underlying error or block does not exist in the block store at all.
     ;;
    #_protected
    #_abstract
    #_throws #_[ "PrunedException", "BlockStoreException" ]
    (§ method #_"void" disconnectTransactions [#_"StoredBlock" block])

    ;;;
     ; Called as part of connecting a block when the new block results in a different chain having higher total work.
     ;
     ; if (shouldVerifyTransactions)
     ;     either newChainHead needs to be in the block store as a FullStoredBlock, or (block != null && block.transactions != null)
     ;;
    #_private
    #_throws #_[ "BlockStoreException", "VerificationException", "PrunedException" ]
    (§ method- #_"void" handleNewBestChain [#_"StoredBlock" __storedPrev, #_"StoredBlock" __newChainHead, #_"Block" block, #_"boolean" __expensiveChecks]
        (assert-state (.. (:lock this) (isHeldByCurrentThread)))

        ;; This chain has overtaken the one we currently believe is best.  Reorganize is required.
        ;;
        ;; Firstly, calculate the block at which the chain diverged.  We only need to examine the
        ;; chain from beyond this block to find differences.

        (let [#_"StoredBlock" head (.. this (getChainHead))
              #_"StoredBlock" __splitPoint (AbstractBlockChain'findSplit __newChainHead, head, (:block-store this))]
            (.. AbstractBlockChain'log (info "Re-organize after split at height {}", (.. __splitPoint (getHeight))))
            (.. AbstractBlockChain'log (info "Old chain head: {}", (.. head (getHeader) (getHashAsString))))
            (.. AbstractBlockChain'log (info "New chain head: {}", (.. __newChainHead (getHeader) (getHashAsString))))
            (.. AbstractBlockChain'log (info "Split at block: {}", (.. __splitPoint (getHeader) (getHashAsString))))

            ;; Then build a list of all blocks in the old part of the chain and the new part.
            (let [#_"LinkedList<StoredBlock>" __oldBlocks (AbstractBlockChain'getPartialChain head, __splitPoint, (:block-store this))
                  #_"LinkedList<StoredBlock>" __newBlocks (AbstractBlockChain'getPartialChain __newChainHead, __splitPoint, (:block-store this))]

                ;; Disconnect each transaction in the previous main chain that is no longer in the new main chain.
                (let [#_"StoredBlock" __storedNewHead __splitPoint]
                    (cond (.. this (shouldVerifyTransactions))
                        (do
                            (doseq [#_"StoredBlock" __oldBlock __oldBlocks]
                                (try
                                    (.. this (disconnectTransactions __oldBlock))
                                    (catch PrunedException e
                                        ;; We threw away the data we need to re-org this deep!  We need to go back to a peer with full
                                        ;; block contents and ask them for the relevant data then rebuild the indexs.  Or we could just
                                        ;; give up and ask the human operator to help get us unstuck (e.g. rescan from the genesis block).
                                        ;; TODO: retry adding this block when we get a block with hash e.getHash()
                                        (throw e)
                                    )
                                )
                            )

                            ;; Walk in ascending chronological order.
                            (loop-when-recur [#_"Iterator<StoredBlock>" it (.. __newBlocks (descendingIterator))] (.. it (hasNext)) []
                                (let [#_"StoredBlock" cursor (.. it (next)) #_"Block" __cursorBlock (.. cursor (getHeader))]
                                    (when (and __expensiveChecks (<= (.. __cursorBlock (getTimeSeconds)) (AbstractBlockChain'getMedianTimestampOfRecentBlocks (.. cursor (getPrev (:block-store this))), (:block-store this))))
                                        (throw (VerificationException. "Block's timestamp is too early during reorg"))
                                    )
                                    (let [#_"TransactionOutputChanges" __txOutChanges
                                            (if (and (= cursor __newChainHead) (some? block))
                                                (.. this (connectTransactions (.. __newChainHead (getHeight)), block))
                                                (.. this (connectTransactions cursor))
                                            )]
                                        (§ ass __storedNewHead (.. this (addToBlockStore __storedNewHead, (.. __cursorBlock (cloneAsHeader)), __txOutChanges)))
                                    )
                                )
                            )
                        )
                        :else
                        (do
                            ;; (Finally) write block to block store.
                            (§ ass __storedNewHead (.. this (addToBlockStore __storedPrev, (.. __newChainHead (getHeader)))))
                        )
                    )

                    ;; Now inform the listeners.  This is necessary so the set of currently active transactions (that we can spend)
                    ;; can be updated to take into account the re-organize.  We might also have received new coins we didn't have
                    ;; before and our previous spends might have been undone.
                    (doseq [#_"ListenerRegistration<ReorganizeListener>" registration (:reorganize-listeners this)]
                        (cond (= (:executor registration) Threading'SAME_THREAD)
                            (do
                                ;; Short circuit the executor so we can propagate any exceptions.
                                ;; TODO: Do we really need to do this or should it be irrelevant?
                                (.. (:listener registration) (reorganize __splitPoint, __oldBlocks, __newBlocks))
                            )
                            :else
                            (do
                                (.. (:executor registration) (execute (Runnable.)
                                (§ anon
                                    #_override
                                    #_public
                                    (§ method #_"void" run []
                                        (try
                                            (.. (:listener registration) (reorganize __splitPoint, __oldBlocks, __newBlocks))
                                            (catch VerificationException e
                                                (.. AbstractBlockChain'log (error "Block chain listener threw exception during reorg", e))
                                            )
                                        )
                                        nil
                                    )
                                )))
                            )
                        )
                    )

                    ;; Update the pointer to the best known block.
                    (.. this (setChainHead __storedNewHead))
                )
            )
        )
        nil
    )

    ;;;
     ; Returns the set of contiguous blocks between 'higher' and 'lower'.  Higher is included, lower is not.
     ;;
    #_private
    #_static
    #_throws #_[ "BlockStoreException" ]
    (§ defn- #_"LinkedList<StoredBlock>" AbstractBlockChain'getPartialChain [#_"StoredBlock" higher, #_"StoredBlock" lower, #_"BlockStore" store]
        (assert-argument (< (.. lower (getHeight)) (.. higher (getHeight))), "higher and lower are reversed")
        (let [#_"LinkedList<StoredBlock>" results (LinkedList. #_"<>")
              #_"StoredBlock" cursor higher]
            (loop []
                (.. results (add cursor))
                (§ ass cursor (ensure some? (.. cursor (getPrev store)), "Ran off the end of the chain"))
                (when (.. cursor (equals lower))
                    (§ break )
                )
            )
            results
        )
    )

    ;;;
     ; Locates the point in the chain at which newStoredBlock and chainHead diverge.  Returns null if no split point was
     ; found (i.e. they are not part of the same chain).  Returns newChainHead or chainHead if they don't actually diverge
     ; but are part of the same chain.
     ;;
    #_private
    #_static
    #_throws #_[ "BlockStoreException" ]
    (§ defn- #_"StoredBlock" AbstractBlockChain'findSplit [#_"StoredBlock" __newChainHead, #_"StoredBlock" __oldChainHead, #_"BlockStore" store]
        ;; Loop until we find the block both chains have in common.  Example:
        ;;
        ;;    A -> B -> C -> D
        ;;         \--> E -> F -> G
        ;;
        ;; findSplit will return block B.  oldChainHead = D and newChainHead = G.
        (let [#_"StoredBlock" __currentChainCursor __oldChainHead #_"StoredBlock" __newChainCursor __newChainHead]
            (loop-when-recur [] (not (.. __currentChainCursor (equals __newChainCursor))) []
                (cond (< (.. __newChainCursor (getHeight)) (.. __currentChainCursor (getHeight)))
                    (do
                        (§ ass __currentChainCursor (.. __currentChainCursor (getPrev store)))
                        (ensure some? __currentChainCursor, "Attempt to follow an orphan chain")
                    )
                    :else
                    (do
                        (§ ass __newChainCursor (.. __newChainCursor (getPrev store)))
                        (ensure some? __newChainCursor, "Attempt to follow an orphan chain")
                    )
                )
            )
            __currentChainCursor
        )
    )

    ;;;
     ; @return the height of the best known chain, convenience for <tt>getChainHead().getHeight()</tt>
     ;;
    #_public
    (§ method #_"int" getBestChainHeight []
        (.. this (getChainHead) (getHeight))
    )

    #_public
    #_static
    #_enum
    (def NewBlockType'values
    #{
        :NewBlockType'BEST_CHAIN
        :NewBlockType'SIDE_CHAIN
    })

    #_private
    #_static
    #_throws #_[ "VerificationException" ]
    (§ defn- #_"void" AbstractBlockChain'sendTransactionsToListener [#_"StoredBlock" block, #_"NewBlockType" __blockType, #_"TransactionReceivedInBlockListener" listener, #_"int" __relativityOffset, #_"List<Transaction>" transactions, #_"boolean" clone?, #_"Set<Sha256Hash>" __falsePositives]
        (doseq [#_"Transaction" tx transactions]
            (try
                (.. __falsePositives (remove (.. tx (getHash))))
                (when clone?
                    (§ ass tx (.. (-> tx :params :default-serializer) (makeTransaction (.. tx (bitcoinSerialize)))))
                )
                (.. listener (receiveFromBlock tx, block, __blockType, __relativityOffset))
                (§ ass __relativityOffset (inc __relativityOffset))
                (catch ScriptException e
                    ;; We don't want scripts we don't understand to break the block chain so just note that this tx was
                    ;; not scanned here and continue.
                    (.. AbstractBlockChain'log (warn (str "Failed to parse a script: " e)))
                )
                (catch ProtocolException e
                    ;; Failed to duplicate tx, should never happen.
                    (throw (RuntimeException. e))
                )
            )
        )
        nil
    )

    #_protected
    #_throws #_[ "BlockStoreException" ]
    (§ method #_"void" setChainHead [#_"StoredBlock" __chainHead]
        (.. this (doSetChainHead __chainHead))
        (§ sync (:chain-head-lock this)
            (§ assoc this :chain-head __chainHead)
        )
        nil
    )

    ;;;
     ; For each block in orphanBlocks, see if we can now fit it on top of the chain and if so, do so.
     ;;
    #_private
    #_throws #_[ "VerificationException", "BlockStoreException", "PrunedException" ]
    (§ method- #_"void" tryConnectingOrphans []
        (assert-state (.. (:lock this) (isHeldByCurrentThread)))

        ;; For each block in our orphan list, try and fit it onto the head of the chain.  If we succeed remove it
        ;; from the list and keep going.  If we changed the head of the list at the end of the round try again until
        ;; we can't fit anything else on the top.
        ;;
        ;; This algorithm is kind of crappy, we should do a topo-sort then just connect them in order, but for small
        ;; numbers of orphan blocks it does OK.

        (loop []
            (let [#_"int" n 0]
                (loop-when-recur [#_"Iterator<OrphanBlock>" it (.. (:orphan-blocks this) (values) (iterator))] (.. it (hasNext)) []
                    (let [#_"OrphanBlock" orphan (.. it (next))]
                        (if (nil? (.. this (getStoredBlockInCurrentScope (.. (:block orphan) (getPrevBlockHash)))))
                            (do
                                ;; This is still an unconnected/orphan block.
                                (.. AbstractBlockChain'log (debug "Orphan block {} is not connectable right now", (.. (:block orphan) (getHash))))
                            )
                            (do
                                ;; Otherwise we can connect it now.
                                ;; False here ensures we don't recurse infinitely downwards when connecting huge chains.
                                (.. AbstractBlockChain'log (info "Connected orphan {}", (.. (:block orphan) (getHash))))
                                (.. this (add (:block orphan), false, (:filtered-tx-hashes orphan), (:filtered-txn orphan)))
                                (.. it (remove))
                                (§ ass n (inc n))
                            )
                        )
                    )
                )
                (when (< 0 n)
                    (.. AbstractBlockChain'log (info "Connected {} orphan blocks.", n))
                    (recur)
                )
            )
        )
        nil
    )

    ;;;
     ; Returns the block at the head of the current best chain.  This is the block which represents the greatest
     ; amount of cumulative work done.
     ;;
    #_public
    (§ method #_"StoredBlock" getChainHead []
        (§ sync (:chain-head-lock this)
            (:chain-head this)
        )
    )

    ;;;
     ; An orphan block is one that does not connect to the chain anywhere (i.e. we can't find its parent, therefore
     ; it's an orphan).  Typically this occurs when we are downloading the chain and didn't reach the head yet, and/or
     ; if a block is solved whilst we are downloading.  It's possible that we see a small amount of orphan blocks which
     ; chain together, this method tries walking backwards through the known orphan blocks to find the bottom-most.
     ;
     ; @return from or one of from's parents, or null if "from" does not identify an orphan block
     ;;
    #_nilable
    #_public
    (§ method #_"Block" getOrphanRoot [#_"Sha256Hash" from]
        (.. (:lock this) (lock))
        (try
            (let [#_"OrphanBlock" cursor (.. (:orphan-blocks this) (get from))]
                (when (some? cursor)
                    (loop [cursor cursor]
                        (let [#_"Block" block (:block cursor) cursor (.. (:orphan-blocks this) (get (.. block (getPrevBlockHash))))]
                            (recur-if (some? cursor) cursor => block)
                        )
                    )
                )
            )
            (finally
                (.. (:lock this) (unlock))
            )
        )
    )

    ;;; Returns true if the given block is currently in the orphan blocks list. ;;
    #_public
    (§ method #_"boolean" isOrphan [#_"Sha256Hash" block]
        (.. (:lock this) (lock))
        (try
            (.. (:orphan-blocks this) (containsKey block))
            (finally
                (.. (:lock this) (unlock))
            )
        )
    )

    ;;;
     ; Returns an estimate of when the given block will be reached, assuming a perfect 10 minute average for each
     ; block.  This is useful for turning transaction lock times into human readable times.  Note that a height in
     ; the past will still be estimated, even though the time of solving is actually known (we won't scan backwards
     ; through the chain to obtain the right answer).
     ;;
    #_public
    (§ method #_"Date" estimateBlockTime [#_"int" height]
        (§ sync (:chain-head-lock this)
            (let [#_"long" offset (- height (.. (:chain-head this) (getHeight)))
                  #_"long" __headTime (.. (:chain-head this) (getHeader) (getTimeSeconds))
                  #_"long" estimated (+ (* __headTime 1000) (* 1000 60 10 offset))]
                (Date. estimated)
            )
        )
    )

    ;;;
     ; Returns a future that completes when the block chain has reached the given height.  Yields the
     ; {@link StoredBlock} of the block that reaches that height first.  The future completes on a peer thread.
     ;;
    #_public
    (§ method #_"ListenableFuture<StoredBlock>" getHeightFuture [#_"int" height]
        (let [#_"SettableFuture<StoredBlock>" result (SettableFuture/create)]
            (.. this (addNewBestBlockListener Threading'SAME_THREAD, (NewBestBlockListener.)
            (§ anon
                #_override
                #_public
                #_throws #_[ "VerificationException" ]
                (§ method #_"void" notifyNewBestBlock [#_"StoredBlock" block]
                    (when (<= height (.. block (getHeight)))
                        (.. this (removeNewBestBlockListener this))
                        (.. result (set block))
                    )
                    nil
                )
            )))
            result
        )
    )

    ;;;
     ; The false positive rate is the average over all blockchain transactions of:
     ;
     ; - 1.0 if the transaction was false-positive (was irrelevant to all listeners)
     ; - 0.0 if the transaction was relevant or filtered out
     ;;
    #_public
    (§ method #_"double" getFalsePositiveRate []
        (:false-positive-rate this)
    )

    ;;
     ; We completed handling of a filtered block.  Update false-positive estimate based
     ; on the total number of transactions in the original block.
     ;
     ; count includes filtered transactions, transactions that were passed in and were relevant
     ; and transactions that were false positives (i.e. includes all transactions in the block).
     ;;
    #_protected
    (§ method #_"void" trackFilteredTransactions [#_"int" count]
        ;; Track non-false-positives in batch.  Each non-false-positive counts as 0.0 towards the estimate.
        ;;
        ;; This is slightly off because we are applying false positive tracking before non-FP tracking,
        ;; which counts FP as if they came at the beginning of the block.  Assuming uniform FP
        ;; spread in a block, this will somewhat underestimate the FP rate (5% for 1000 tx block).
        (let [#_"double" __alphaDecay (Math/pow (- 1 AbstractBlockChain'FP_ESTIMATOR_ALPHA), count)]

            ;; new_rate = alpha_decay * new_rate
            (§ assoc this :false-positive-rate (* __alphaDecay (:false-positive-rate this)))

            (let [#_"double" __betaDecay (Math/pow (- 1 AbstractBlockChain'FP_ESTIMATOR_BETA), count)]

                ;; trend = beta * (new_rate - old_rate) + beta_decay * trend
                (§ assoc this :false-positive-trend (+ (* AbstractBlockChain'FP_ESTIMATOR_BETA count (- (:false-positive-rate this) (:previous-false-positive-rate this))) (* __betaDecay (:false-positive-trend this))))

                ;; new_rate += alpha_decay * trend
                (§ assoc this :false-positive-rate (+ (:false-positive-rate this) (* __alphaDecay (:false-positive-trend this))))

                ;; stash new_rate in old_rate
                (§ assoc this :previous-false-positive-rate (:false-positive-rate this))
            )
        )
        nil
    )

    ;;; Irrelevant transactions were received.  Update false-positive estimate. ;;
    (§ method #_"void" trackFalsePositives [#_"int" count]
        ;; Track false positives in batch by adding alpha to the false positive estimate once per count.
        ;; Each false positive counts as 1.0 towards the estimate.
        (§ update this :false-positive-rate + (* AbstractBlockChain'FP_ESTIMATOR_ALPHA count))
        (when (< 0 count)
            (.. AbstractBlockChain'log (debug "{} false positives, current rate = {} trend = {}", count, (:false-positive-rate this), (:false-positive-trend this)))
        )
        nil
    )

    ;;; Resets estimates of false positives.  Used when the filter is sent to the peer. ;;
    #_public
    (§ method #_"void" resetFalsePositiveEstimate []
        (§ assoc this :false-positive-rate 0)
        (§ assoc this :false-positive-trend 0)
        (§ assoc this :previous-false-positive-rate 0)
        nil
    )

    #_protected
    (§ method #_"VersionTally" getVersionTally []
        (:version-tally this)
    )
)

;;;
 ; A Bitcoin address looks like 1MsScoe2fTJoq4ZPdQgqyhgWeoNamYPevy and is derived from an elliptic curve public key
 ; plus a set of network parameters.  Not to be confused with a {@link PeerAddress} or {@link AddressMessage}
 ; which are about network (TCP) addresses.
 ;
 ; A standard address is built by taking the RIPE-MD160 hash of the public key bytes, with a version prefix and a
 ; checksum suffix, then encoding it textually as base58.  The version prefix is used to both denote the network for
 ; which the address is valid (see {@link NetworkParameters}, and also to indicate how the bytes inside the address
 ; should be interpreted.  Whilst almost all addresses today are hashes of public keys, another (currently unsupported
 ; type) can contain a hash of a script instead.
 ;;
#_public
(§ class Address (§ extends VersionedChecksummedBytes)
    ;;;
     ; An address is a RIPEMD160 hash of a public key, therefore is always 160 bits or 20 bytes.
     ;;
    #_public
    #_static
    (def #_"int" Address'LENGTH 20)

    #_private
    #_transient
    (§ field- #_"NetworkParameters" :params)

    ;;;
     ; Construct an address from parameters, the address version, and the hash160 form.
     ;;
    #_public
    #_throws #_[ "WrongNetworkException" ]
    (§ constructor Address [#_"NetworkParameters" params, #_"int" version, #_"byte[]" hash160]
        (§ super version, hash160)

        (ensure some? params)
        (assert-argument (= (alength hash160) 20), "Addresses are 160-bit hashes, so you must provide 20 bytes")
        (when (not (Address'isAcceptableVersion params, version))
            (throw (WrongNetworkException. version, (:acceptable-address-codes params)))
        )
        (§ assoc this :params params)
        this
    )

    ;;; Returns an Address that represents the given P2SH script hash. ;;
    #_public
    #_static
    (§ defn #_"Address" Address'fromP2SHHash [#_"NetworkParameters" params, #_"byte[]" hash160]
        (try
            (Address. params, (:p2sh-header params), hash160)
            (catch WrongNetworkException e
                (throw (RuntimeException. e)) ;; Cannot happen.
            )
        )
    )

    ;;; Returns an Address that represents the script hash extracted from the given scriptPubKey. ;;
    #_public
    #_static
    (§ defn #_"Address" Address'fromP2SHScript [#_"NetworkParameters" params, #_"Script" __scriptPubKey]
        (assert-argument (.. __scriptPubKey (isPayToScriptHash)), "Not a P2SH script")
        (Address'fromP2SHHash params, (.. __scriptPubKey (getPubKeyHash)))
    )

    ;;;
     ; Construct an address from its Base58 representation.
     ;
     ; @param params The expected NetworkParameters or null if you don't want validation.
     ; @param base58 The textual form of the address, such as "17kzeh4N8g49GFvdDzSf8PjaPfyoD1MndL".
     ; @throws AddressFormatException if the given base58 doesn't parse or the checksum is invalid.
     ; @throws WrongNetworkException if the given address is valid but for a different chain (e.g. testnet vs. mainnet).
     ;;
    #_public
    #_static
    #_throws #_[ "AddressFormatException" ]
    (§ defn #_"Address" Address'fromBase58 [#_nilable #_"NetworkParameters" params, #_"String" base58]
        (Address. params, base58)
    )

    ;;;
     ; Construct an address from parameters and the hash160 form.
     ;;
    #_public
    (§ constructor Address [#_"NetworkParameters" params, #_"byte[]" hash160]
        (§ super (:address-header params), hash160)

        (assert-argument (= (alength hash160) 20), "Addresses are 160-bit hashes, so you must provide 20 bytes")
        (§ assoc this :params params)
        this
    )

    ;;; @deprecated Use {@link #fromBase58(NetworkParameters, String)} ;;
    #_deprecated
    #_public
    #_throws #_[ "AddressFormatException" ]
    (§ constructor Address [#_nilable #_"NetworkParameters" params, #_"String" address]
        (§ super address)

        (cond (some? params)
            (do
                (when (not (Address'isAcceptableVersion params, (:version this)))
                    (throw (WrongNetworkException. (:version this), (:acceptable-address-codes params)))
                )
                (§ assoc this :params params)
            )
            :else
            (do
                (let [#_"NetworkParameters" __paramsFound nil]
                    (doseq [#_"NetworkParameters" p (Networks'get)]
                        (when (Address'isAcceptableVersion p, (:version this))
                            (§ ass __paramsFound p)
                            (§ break )
                        )
                    )
                    (when (nil? __paramsFound)
                        (throw (AddressFormatException. (str "No network found for " address)))
                    )

                    (§ assoc this :params __paramsFound)
                )
            )
        )
        this
    )

    ;;; The (big endian) 20 byte hash that is the core of a Bitcoin address. ;;
    #_public
    (§ method #_"byte[]" getHash160 []
        (:bytes this)
    )

    ;;;
     ; Returns true if this address is a Pay-To-Script-Hash (P2SH) address.
     ; See also https://github.com/bitcoin/bips/blob/master/bip-0013.mediawiki: Address Format for pay-to-script-hash
     ;;
    #_public
    (§ method #_"boolean" isP2SHAddress []
        (let [#_"NetworkParameters" parameters (.. this (getParameters))]
            (and (some? parameters) (= (:version this) (:p2sh-header parameters)))
        )
    )

    ;;;
     ; Examines the version byte of the address and attempts to find a matching NetworkParameters.  If you aren't sure
     ; which network the address is intended for (e.g. it was provided by a user), you can use this to decide if it is
     ; compatible with the current wallet.  You should be able to handle a null response from this method.  Note that
     ; the parameters returned is not necessarily the same as the one the Address was created with.
     ;
     ; @return a NetworkParameters representing the network the address is intended for
     ;;
    #_public
    (§ method #_"NetworkParameters" getParameters []
        (:params this)
    )

    ;;;
     ; Given an address, examines the version byte and attempts to find a matching NetworkParameters.  If you aren't sure
     ; which network the address is intended for (e.g. it was provided by a user), you can use this to decide if it is
     ; compatible with the current wallet.
     ;
     ; @return a NetworkParameters of the address
     ; @throws AddressFormatException if the string wasn't of a known version
     ;;
    #_public
    #_static
    #_throws #_[ "AddressFormatException" ]
    (§ defn #_"NetworkParameters" Address'getParametersFromAddress [#_"String" address]
        (try
            (.. (Address'fromBase58 nil, address) (getParameters))
            (catch WrongNetworkException e
                (throw (RuntimeException. e)) ;; Cannot happen.
            )
        )
    )

    ;;;
     ; Check if a given address version is valid given the NetworkParameters.
     ;;
    #_private
    #_static
    (§ defn- #_"boolean" Address'isAcceptableVersion [#_"NetworkParameters" params, #_"int" version]
        (some? (some #(= % version) (:acceptable-address-codes params)))
    )
)

#_public
(§ class AddressFormatException (§ extends IllegalArgumentException)
    #_public
    (§ constructor AddressFormatException []
        (§ super )
        this
    )

    #_public
    (§ constructor AddressFormatException [#_"String" message]
        (§ super message)
        this
    )
)

;;;
 ; Represents an "addr" message on the P2P network, which contains broadcast IP addresses of other peers.  This is
 ; one of the ways peers can find each other without using the DNS or IRC discovery mechanisms.  However storing and
 ; using addr messages is not presently implemented.
 ;
 ; Instances of this class are not safe for use by multiple threads.
 ;;
#_public
(§ class AddressMessage (§ extends Message)
    #_private
    #_static
    (def- #_"long" AddressMessage'MAX_ADDRESSES 1024)

    #_private
    (§ field- #_"List<PeerAddress>" :addresses)

    ;;;
     ; Contruct a new 'addr' message.
     ;
     ; @param params NetworkParameters object.
     ; @param offset The location of the first payload byte within the array.
     ; @param parseRetain Whether to retain the backing byte array for quick reserialization.
     ;                    If true and the backing byte array is invalidated due to modification of a field, then
     ;                    the cached bytes may be repopulated and retained if the message is serialized again in the future.
     ; @param length The length of message if known.  Usually this is provided when deserializing of the wire
     ;               as the length will be provided as part of the header.  Set to Message.UNKNOWN_LENGTH, if not known.
     ; @throws ProtocolException
     ;;
    #_throws #_[ "ProtocolException" ]
    (§ constructor AddressMessage [#_"NetworkParameters" params, #_"byte[]" payload, #_"int" offset, #_"BitcoinSerializer" __setSerializer, #_"int" length]
        (§ super params, payload, offset, __setSerializer, length)
        this
    )

    ;;;
     ; Contruct a new 'addr' message.
     ;
     ; @param params NetworkParameters object.
     ; @param serializer The serializer to use for this block.
     ; @param length The length of message if known.  Usually this is provided when deserializing of the wire
     ;               as the length will be provided as part of the header.  Set to Message.UNKNOWN_LENGTH, if not known.
     ; @throws ProtocolException
     ;;
    #_throws #_[ "ProtocolException" ]
    (§ constructor AddressMessage [#_"NetworkParameters" params, #_"byte[]" payload, #_"BitcoinSerializer" serializer, #_"int" length]
        (§ super params, payload, 0, serializer, length)
        this
    )

    #_throws #_[ "ProtocolException" ]
    (§ constructor AddressMessage [#_"NetworkParameters" params, #_"byte[]" payload, #_"int" offset]
        (§ super params, payload, offset, (:default-serializer params), Message'UNKNOWN_LENGTH)
        this
    )

    #_throws #_[ "ProtocolException" ]
    (§ constructor AddressMessage [#_"NetworkParameters" params, #_"byte[]" payload]
        (§ super params, payload, 0, (:default-serializer params), Message'UNKNOWN_LENGTH)
        this
    )

    #_override
    #_protected
    #_throws #_[ "ProtocolException" ]
    (§ method #_"void" parse []
        (let [#_"long" __numAddresses (.. this (readVarInt))]
            ;; Guard against ultra large messages that will crash us.
            (when (< AddressMessage'MAX_ADDRESSES __numAddresses)
                (throw (ProtocolException. "Address message too large."))
            )
            (§ assoc this :addresses (ArrayList. #_"<>" (int __numAddresses)))
            (loop-when-recur [#_"int" i 0] (< i __numAddresses) [(inc i)]
                (let [#_"PeerAddress" addr (PeerAddress. (:params this), (:payload this), (:cursor this), (:protocol-version this), this, (:serializer this))]
                    (.. (:addresses this) (add addr))
                    (§ update this :cursor + (.. addr (getMessageSize)))
                )
            )
            (§ assoc this :length (.. (VarInt. (.. (:addresses this) (size))) (getSizeInBytes)))
            ;; The 4 byte difference is the uint32 timestamp that was introduced in version 31402.
            (§ assoc this :length (+ (:length this) (* (.. (:addresses this) (size)) (if (< 31402 (:protocol-version this)) PeerAddress'MESSAGE_SIZE (- PeerAddress'MESSAGE_SIZE 4)))))
        )
        nil
    )

    #_override
    #_protected
    (§ method #_"void" bitcoinSerializeToStream [#_"ByteArrayOutputStream" baos]
        (when (some? (:addresses this))
            (.. baos (write (.. (VarInt. (.. (:addresses this) (size))) (encode))))
            (doseq [#_"PeerAddress" addr (:addresses this)]
                (.. addr (bitcoinSerialize baos))
            )
        )
        nil
    )

    ;;;
     ; @return An unmodifiableList view of the backing List of addresses.  Addresses contained within the list may be safely modified.
     ;;
    #_public
    (§ method #_"List<PeerAddress>" getAddresses []
        (Collections/unmodifiableList (:addresses this))
    )

    #_public
    (§ method #_"void" addAddress [#_"PeerAddress" address]
        (.. this (unCache))
        (.. address (setParent this))
        (.. (:addresses this) (add address))
        (if (= (:length this) Message'UNKNOWN_LENGTH)
            (.. this (getMessageSize))
            (§ update this :length + (.. address (getMessageSize)))
        )
        nil
    )

    #_public
    (§ method #_"void" removeAddress [#_"int" index]
        (.. this (unCache))
        (let [#_"PeerAddress" address (.. (:addresses this) (remove index))]
            (.. address (setParent nil))
            (if (= (:length this) Message'UNKNOWN_LENGTH)
                (.. this (getMessageSize))
                (§ update this :length - (.. address (getMessageSize)))
            )
        )
        nil
    )

    #_override
    #_public
    (§ method #_"String" toString []
        (str "addr: " (.. Utils'SPACE_JOINER (join (:addresses this))))
    )
)

;;;
 ; Alerts are signed messages that are broadcast on the peer-to-peer network if they match a hard-coded signing key.
 ; The private keys are held by a small group of core Bitcoin developers, and alerts may be broadcast in the event of
 ; an available upgrade or a serious network problem.  Alerts have an expiration time, data that specifies what
 ; set of software versions it matches and the ability to cancel them by broadcasting another type of alert.
 ;
 ; The right course of action on receiving an alert is usually to either ensure a human will see it (display on screen,
 ; log, email), or if you decide to use alerts for notifications that are specific to your app in some way, to parse it.
 ; For example, you could treat it as an upgrade notification specific to your app.  Satoshi designed alerts to ensure
 ; that software upgrades could be distributed independently of a hard-coded website, in order to allow everything to
 ; be purely peer-to-peer.  You don't have to use this of course, and indeed it often makes more sense not to.
 ;
 ; Before doing anything with an alert, you should check {@link AlertMessage#isSignatureValid()}.
 ;
 ; Instances of this class are not safe for use by multiple threads.
 ;;
#_public
(§ class AlertMessage (§ extends Message)
    #_private
    (§ field- #_"byte[]" :content)
    #_private
    (§ field- #_"byte[]" :signature)

    ;; See the getters for documentation of what each field means.
    #_private
    (§ field- #_"long" :version 1)
    #_private
    (§ field- #_"Date" :relay-until)
    #_private
    (§ field- #_"Date" :expiration)
    #_private
    (§ field- #_"long" :id)
    #_private
    (§ field- #_"long" :cancel)
    #_private
    (§ field- #_"long" :min-ver)
    #_private
    (§ field- #_"long" :max-ver)
    #_private
    (§ field- #_"long" :priority)
    #_private
    (§ field- #_"String" :comment)
    #_private
    (§ field- #_"String" :status-bar)
    #_private
    (§ field- #_"String" :reserved)

    ;; Chosen arbitrarily to avoid memory blowups.
    #_private
    #_static
    (def- #_"long" AlertMessage'MAX_SET_SIZE 100)

    #_public
    #_throws #_[ "ProtocolException" ]
    (§ constructor AlertMessage [#_"NetworkParameters" params, #_"byte[]" payload]
        (§ super params, payload, 0)
        this
    )

    #_override
    #_public
    (§ method #_"String" toString []
        (str "ALERT: " (.. this (getStatusBar)))
    )

    #_override
    #_protected
    #_throws #_[ "ProtocolException" ]
    (§ method #_"void" parse []
        ;; Alerts are formatted in two levels.  The top level contains two byte arrays: a signature, and a serialized
        ;; data structure containing the actual alert data.
        (let [#_"int" __startPos (:cursor this)]
            (§ assoc this :content (.. this (readByteArray)))
            (§ assoc this :signature (.. this (readByteArray)))
            ;; Now we need to parse out the contents of the embedded structure.  Rewind back to the start of the message.
            (§ assoc this :cursor __startPos)
            (.. this (readVarInt)) ;; Skip the length field on the content array.
            ;; We're inside the embedded structure.
            (§ assoc this :version (.. this (readUint32)))
            ;; Read the timestamps.  Bitcoin uses seconds since the epoch.
            (§ assoc this :relay-until (Date. (* (.. this (readUint64) (longValue)) 1000)))
            (§ assoc this :expiration (Date. (* (.. this (readUint64) (longValue)) 1000)))
            (§ assoc this :id (.. this (readUint32)))
            (§ assoc this :cancel (.. this (readUint32)))
            ;; Sets are serialized as <len><item><item><item>....
            (let [#_"long" __cancelSetSize (.. this (readVarInt))]
                (when (or (< __cancelSetSize 0) (< AlertMessage'MAX_SET_SIZE __cancelSetSize))
                    (throw (ProtocolException. (str "Bad cancel set size: " __cancelSetSize)))
                )
                ;; Using a hashset here is very inefficient given that this will normally be only one item.  But Java doesn't
                ;; make it easy to do better.  What we really want is just an array-backed set.
                (let [#_"Set<Long>" __cancelSet (HashSet. #_"<>" (int __cancelSetSize))]
                    (loop-when-recur [#_"long" i 0] (< i __cancelSetSize) [(inc i)]
                        (.. __cancelSet (add (.. this (readUint32))))
                    )
                    (§ assoc this :min-ver (.. this (readUint32)))
                    (§ assoc this :max-ver (.. this (readUint32)))
                    ;; Read the subver matching set.
                    (let [#_"long" __subverSetSize (.. this (readVarInt))]
                        (when (or (< __subverSetSize 0) (< AlertMessage'MAX_SET_SIZE __subverSetSize))
                            (throw (ProtocolException. (str "Bad subver set size: " __subverSetSize)))
                        )
                        (let [#_"Set<String>" __matchingSubVers (HashSet. #_"<>" (int __subverSetSize))]
                            (loop-when-recur [#_"long" i 0] (< i __subverSetSize) [(inc i)]
                                (.. __matchingSubVers (add (.. this (readStr))))
                            )
                            (§ assoc this :priority (.. this (readUint32)))
                            (§ assoc this :comment (.. this (readStr)))
                            (§ assoc this :status-bar (.. this (readStr)))
                            (§ assoc this :reserved (.. this (readStr)))

                            (§ assoc this :length (- (:cursor this) (:offset this)))
                        )
                    )
                )
            )
        )
        nil
    )

    ;;;
     ; Returns true if the digital signature attached to the message verifies.  Don't do anything with the alert if it
     ; doesn't verify, because that would allow arbitrary attackers to spam your users.
     ;;
    #_public
    (§ method #_"boolean" isSignatureValid []
        (ECKey'verify (Sha256Hash'hashTwice (:content this)), (:signature this), (-> this :params :alert-signing-key))
    )

    ;;;
     ; The time at which the alert should stop being broadcast across the network.  Note that you can still receive
     ; the alert after this time from other nodes if the alert still applies to them or to you.
     ;;
    #_public
    (§ method #_"Date" getRelayUntil []
        (:relay-until this)
    )

    #_public
    (§ method #_"void" setRelayUntil [#_"Date" __relayUntil]
        (§ assoc this :relay-until __relayUntil)
        nil
    )

    ;;;
     ; The time at which the alert ceases to be relevant.  It should not be presented to the user or app administrator
     ; after this time.
     ;;
    #_public
    (§ method #_"Date" getExpiration []
        (:expiration this)
    )

    #_public
    (§ method #_"void" setExpiration [#_"Date" expiration]
        (§ assoc this :expiration expiration)
        nil
    )

    ;;;
     ; The numeric identifier of this alert.  Each alert should have a unique ID, but the signer can choose any number.
     ; If an alert is broadcast with a cancel field higher than this ID, this alert is considered cancelled.
     ;
     ; @return uint32
     ;;
    #_public
    (§ method #_"long" getId []
        (:id this)
    )

    #_public
    (§ method #_"void" setId [#_"long" id]
        (§ assoc this :id id)
        nil
    )

    ;;;
     ; A marker that results in any alerts with an ID lower than this value to be considered cancelled.
     ;
     ; @return uint32
     ;;
    #_public
    (§ method #_"long" getCancel []
        (:cancel this)
    )

    #_public
    (§ method #_"void" setCancel [#_"long" cancel]
        (§ assoc this :cancel cancel)
        nil
    )

    ;;;
     ; The inclusive lower bound on software versions that are considered for the purposes of this alert.  Bitcoin Core
     ; compares this against a protocol version field, but as long as the subVer field is used to restrict it your
     ; alerts could use any version numbers.
     ;
     ; @return uint32
     ;;
    #_public
    (§ method #_"long" getMinVer []
        (:min-ver this)
    )

    #_public
    (§ method #_"void" setMinVer [#_"long" __minVer]
        (§ assoc this :min-ver __minVer)
        nil
    )

    ;;;
     ; The inclusive upper bound on software versions considered for the purposes of this alert.  Bitcoin Core
     ; compares this against a protocol version field, but as long as the subVer field is used to restrict it your
     ; alerts could use any version numbers.
     ;;
    #_public
    (§ method #_"long" getMaxVer []
        (:max-ver this)
    )

    #_public
    (§ method #_"void" setMaxVer [#_"long" __maxVer]
        (§ assoc this :max-ver __maxVer)
        nil
    )

    ;;;
     ; Provides an integer ordering amongst simultaneously active alerts.
     ;
     ; @return uint32
     ;;
    #_public
    (§ method #_"long" getPriority []
        (:priority this)
    )

    #_public
    (§ method #_"void" setPriority [#_"long" priority]
        (§ assoc this :priority priority)
        nil
    )

    ;;;
     ; This field is unused.  It is presumably intended for the author of the alert to provide a justification for it
     ; visible to protocol developers but not users.
     ;;
    #_public
    (§ method #_"String" getComment []
        (:comment this)
    )

    #_public
    (§ method #_"void" setComment [#_"String" comment]
        (§ assoc this :comment comment)
        nil
    )

    ;;;
     ; A string that is intended to display in the status bar of Bitcoin Core's GUI client.  It contains the user-visible
     ; message.  English only.
     ;;
    #_public
    (§ method #_"String" getStatusBar []
        (:status-bar this)
    )

    #_public
    (§ method #_"void" setStatusBar [#_"String" __statusBar]
        (§ assoc this :status-bar __statusBar)
        nil
    )

    ;;;
     ; This field is never used.
     ;;
    #_public
    (§ method #_"String" getReserved []
        (:reserved this)
    )

    #_public
    (§ method #_"void" setReserved [#_"String" reserved]
        (§ assoc this :reserved reserved)
        nil
    )

    #_public
    (§ method #_"long" getVersion []
        (:version this)
    )
)

;;;
 ; Base58 is a way to encode Bitcoin addresses (or arbitrary data) as alphanumeric strings.
 ;
 ; Note that this is not the same base58 as used by Flickr, which you may find referenced around the Internet.
 ;
 ; You may want to consider working with {@link VersionedChecksummedBytes} instead, which
 ; adds support for testing the prefix and suffix bytes commonly found in addresses.
 ;
 ; Satoshi explains: why base-58 instead of standard base-64 encoding?
 ; <ul>
 ; <li>Don't want 0OIl characters that look the same in some fonts and
 ;     could be used to create visually identical looking account numbers.</li>
 ; <li>A string with non-alphanumeric characters is not as easily accepted as an account number.</li>
 ; <li>E-mail usually won't line-break if there's no punctuation to break at.</li>
 ; <li>Doubleclicking selects the whole number as one word if it's all alphanumeric.</li>
 ; </ul>
 ;
 ; However, note that the encoding/decoding runs in O(n&sup2;) time, so it is not useful for large data.
 ;
 ; The basic idea of the encoding is to treat the data bytes as a large number represented using
 ; base-256 digits, convert the number to be represented using base-58 digits, preserve the exact
 ; number of leading zeros (which are otherwise lost during the mathematical operations on the
 ; numbers), and finally represent the resulting base-58 digits as alphanumeric ASCII characters.
 ;;
#_public
(§ class Base58
    #_public
    #_static
    (def #_"char[]" Base58'ALPHABET (.. "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz" (toCharArray)))
    #_private
    #_static
    (def- #_"char" Base58'ENCODED_ZERO (aget Base58'ALPHABET 0))
    #_private
    #_static
    (def- #_"int[]" Base58'INDEXES (let [a (int-array 128)] (Arrays/fill a, -1) (loop-when-recur [i 0] (< i (alength Base58'ALPHABET)) [(inc i)] (aset a (aget Base58'ALPHABET i) i)) a))

    ;;;
     ; Encodes the given bytes as a base58 string (no checksum is appended).
     ;
     ; @param input the bytes to encode
     ; @return the base58-encoded string
     ;;
    #_public
    #_static
    (§ defn #_"String" Base58'encode [#_"byte[]" input]
        (let-when [m (alength input)] (pos? m) => ""
            ;; Count leading zeros.
            (let [zeros (loop-when-recur [i 0] (and (< i m) (zero? (aget input i))) [(inc i)] => i)
                  input (Arrays/copyOf input, m) ;; since divmod modifies it in-place
                  encoded (char-array (* m 2)) m' (alength encoded) ;; upper bound
                  ;; Convert base-256 digits to base-58 digits (plus conversion to ASCII characters).
                  n (loop-when [n m' i zeros] (< i m) => n
                        (let [n (dec n)]
                            (aset encoded n (aget Base58'ALPHABET (Base58'divmod input, i, 256, 58)))
                            (recur n (if (zero? (aget input i)) (inc i) i))
                        )
                    )
                  ;; Preserve exactly as many leading encoded zeros in output as there were leading zeros in input.
                  n (loop-when-recur n (and (< n m') (= (aget encoded n) Base58'ENCODED_ZERO)) (inc n) => n)
                  n (loop-when [n n i zeros] (< 0 i) => n
                        (let [n (dec n)]
                            (aset encoded n Base58'ENCODED_ZERO)
                            (recur n (dec i))
                        )
                    )]
                ;; Return encoded string (including encoded leading zeros).
                (String. encoded, n, (- m' n))
            )
        )
    )

    ;;;
     ; Decodes the given base58 string into the original data bytes.
     ;
     ; @param input the base58-encoded string to decode
     ; @return the decoded data bytes
     ; @throws AddressFormatException if the given string is not a valid base58 string
     ;;
    #_public
    #_static
    #_throws #_[ "AddressFormatException" ]
    (§ defn #_"byte[]" Base58'decode [#_"String" input]
        (let-when [m (.. input (length))] (pos? m) => (byte-array 0)
            ;; Convert the base58-encoded ASCII chars to a base58 byte sequence (base58 digits).
            (let [input58 (byte-array m)]
                (dotimes [i m]
                    (let [c (.. input (charAt i)) digit (if (< c 128) (aget Base58'INDEXES c) -1)]
                        (if (< digit 0)
                            (throw (AddressFormatException. (str "Illegal character " c " at position " i)))
                            (aset input58 i (byte digit))
                        )
                    )
                )
                ;; Count leading zeros.
                (let [zeros (loop-when-recur [i 0] (and (< i m) (zero? (aget input58 i))) [(inc i)] => i)
                      decoded (byte-array m)
                      ;; Convert base-58 digits to base-256 digits.
                      n (loop-when [n m i zeros] (< i m) => n
                            (let [n (dec n)]
                                (aset decoded n (Base58'divmod input58, i, 58, 256))
                                (recur n (if (zero? (aget input58 i)) (inc i) i))
                            )
                        )
                      ;; Ignore extra leading zeroes that were added during the calculation.
                      n (loop-when-recur n (and (< n m) (zero? (aget decoded n))) (inc n) => n)]
                    ;; Return decoded data (including original number of leading zeros).
                    (Arrays/copyOfRange decoded, (- n zeros), m)
                )
            )
        )
    )

    #_public
    #_static
    #_throws #_[ "AddressFormatException" ]
    (§ defn #_"BigInteger" Base58'decodeToBigInteger [#_"String" input]
        (BigInteger. 1, (Base58'decode input))
    )

    ;;;
     ; Decodes the given base58 string into the original data bytes, using the checksum in the
     ; last 4 bytes of the decoded data to verify that the rest are correct.  The checksum is
     ; removed from the returned data.
     ;
     ; @param input the base58-encoded string to decode (which should include the checksum)
     ; @throws AddressFormatException if the input is not base 58 or the checksum does not validate
     ;;
    #_public
    #_static
    #_throws #_[ "AddressFormatException" ]
    (§ defn #_"byte[]" Base58'decodeChecked [#_"String" input]
        (let [#_"byte[]" decoded (Base58'decode input)]
            (when (< (alength decoded) 4)
                (throw (AddressFormatException. "Input too short"))
            )
            (let [#_"byte[]" data (Arrays/copyOfRange decoded, 0, (- (alength decoded) 4))
                  #_"byte[]" checksum (Arrays/copyOfRange decoded, (- (alength decoded) 4), (alength decoded))
                  #_"byte[]" __actualChecksum (Arrays/copyOfRange (Sha256Hash'hashTwice data), 0, 4)]
                (when (not (Arrays/equals checksum, __actualChecksum))
                    (throw (AddressFormatException. "Checksum does not validate"))
                )
                data
            )
        )
    )

    ;;;
     ; Divides a number, represented as an array of bytes each containing a single digit
     ; in the specified base, by the given divisor.  The given number is modified in-place
     ; to contain the quotient, and the return value is the remainder.
     ;
     ; @param number the number to divide
     ; @param firstDigit the index within the array of the first non-zero digit
     ;        (this is used for optimization by skipping the leading zeros)
     ; @param base the base in which the number's digits are represented (up to 256)
     ; @param divisor the number to divide by (up to 256)
     ; @return the remainder of the division operation
     ;;
    #_private
    #_static
    (§ defn- #_"byte" Base58'divmod [#_"byte[]" number, #_"int" __firstDigit, #_"int" base, #_"int" divisor]
        ;; This is just long division which accounts for the base of the input digits.
        (let [#_"int" remainder 0]
            (loop-when-recur [#_"int" i __firstDigit] (< i (alength number)) [(inc i)]
                (let [#_"int" digit (& (int (aget number i)) 0xff)
                      #_"int" temp (+ (* remainder base) digit)]
                    (aset number i (byte (quot temp divisor)))
                    (§ ass remainder (rem temp divisor))
                )
            )
            (byte remainder)
        )
    )
)

;;;
 ; Serialize and de-serialize messages to the Bitcoin network format as defined in
 ; <a href="https://en.bitcoin.it/wiki/Protocol_specification">the protocol specification</a>.
 ;;
#_public
(§ class BitcoinSerializer
    #_private
    #_static
    (def- #_"Logger" BitcoinSerializer'log (LoggerFactory/getLogger BitcoinSerializer))

    #_private
    #_static
    (def- #_"int" BitcoinSerializer'COMMAND_LEN 12)

    #_private
    #_static
    (def- #_"Map<Class<? extends Message>, String>" BitcoinSerializer'nameOf
    {
        VersionMessage    "version"
        InventoryMessage  "inv"
        Block             "block"
        GetDataMessage    "getdata"
        Transaction       "tx"
        AddressMessage    "addr"
        Ping              "ping"
        Pong              "pong"
        VersionAck        "verack"
        GetBlocksMessage  "getblocks"
        GetHeadersMessage "getheaders"
        GetAddrMessage    "getaddr"
        HeadersMessage    "headers"
        BloomFilter       "filterload"
        FilteredBlock     "merkleblock"
        NotFoundMessage   "notfound"
        MemoryPoolMessage "mempool"
        RejectMessage     "reject"
    })

    #_private
    (§ field- #_"NetworkParameters" :params)

    ;;;
     ; Whether the serializer will produce cached mode Messages.
     ;;
    #_private
    (§ field- #_"boolean" :parse-retain)

    ;;;
     ; Constructs a BitcoinSerializer with the given behavior.
     ;
     ; @param params           networkParams used to create Messages instances and termining packetMagic
     ; @param parseRetain      retain the backing byte array of a message for fast reserialization
     ;;
    #_public
    (§ constructor BitcoinSerializer [#_"NetworkParameters" params, #_"boolean" retain?]
        (§ assoc this :params params)
        (§ assoc this :parse-retain retain?)
        this
    )

    ;;;
     ; Writes message to the output stream.
     ;;
    #_public
    (§ method #_"void" serialize [#_"String" name, #_"byte[]" message, #_"ByteArrayOutputStream" baos]
        (let [#_"byte[]" header (byte-array (+ 4 BitcoinSerializer'COMMAND_LEN 4 4))] ;; checksum
            (Utils'uint32ToByteArrayBE (-> this :params :packet-magic), header, 0)

            ;; The header array is initialized to zero by Java so we don't have to worry
            ;; about NULL terminating the string here.
            (loop-when-recur [#_"int" i 0] (and (< i (.. name (length))) (< i BitcoinSerializer'COMMAND_LEN)) [(inc i)]
                (aset header (+ 4 i) (byte (& (.. name (codePointAt i)) 0xff)))
            )

            (Utils'uint32ToByteArrayLE (alength message), header, (+ 4 BitcoinSerializer'COMMAND_LEN))

            (let [#_"byte[]" hash (Sha256Hash'hashTwice message)]
                (System/arraycopy hash, 0, header, (+ 4 BitcoinSerializer'COMMAND_LEN 4), 4)
                (.. baos (write header))
                (.. baos (write message))
            )
        )
        nil
    )

    ;;;
     ; Writes message to the output stream.
     ;;
    #_public
    (§ method #_"void" serialize [#_"Message" message, #_"ByteArrayOutputStream" baos]
        (let [#_"String" name (BitcoinSerializer'nameOf (.. message (getClass)))]
            (if (some? name)
                (.. this (serialize name, (.. message (bitcoinSerialize)), baos))
                (throw (Error. (str "BitcoinSerializer doesn't currently know how to serialize " (.. message (getClass)))))
            )
        )
        nil
    )

    ;;;
     ; Reads a message from the given ByteBuffer and returns it.
     ;;
    #_public
    #_throws #_[ "ProtocolException", "IOException" ]
    (§ method #_"Message" deserialize [#_"ByteBuffer" in]
        ;; A Bitcoin protocol message has the following format:
        ;;
        ;;   - 4 byte magic number: 0xfabfb5da for the testnet or
        ;;                          0xf9beb4d9 for production
        ;;   - 12 byte command in ASCII
        ;;   - 4 byte payload size
        ;;   - 4 byte checksum
        ;;   - Payload data
        ;;
        ;; The checksum is the first 4 bytes of a SHA256 hash of the message payload. It isn't
        ;; present for all messages, notably, the first one on a connection.
        ;;
        ;; Bitcoin Core ignores garbage before the magic header bytes. We have to do the same because
        ;; sometimes it sends us stuff that isn't part of any message.
        (.. this (seekPastMagicBytes in))
        (let [#_"BitcoinPacketHeader" header (BitcoinPacketHeader. in)]
            ;; Now try to read the whole message.
            (.. this (deserializePayload header, in))
        )
    )

    ;;;
     ; Deserializes only the header in case packet meta data is needed before decoding
     ; the payload.  This method assumes you have already called seekPastMagicBytes().
     ;;
    #_public
    #_throws #_[ "ProtocolException", "IOException" ]
    (§ method #_"BitcoinPacketHeader" deserializeHeader [#_"ByteBuffer" in]
        (BitcoinPacketHeader. in)
    )

    ;;;
     ; Deserialize payload only.  You must provide a header, typically obtained by calling
     ; {@link BitcoinSerializer#deserializeHeader}.
     ;;
    #_public
    #_throws #_[ "ProtocolException", "BufferUnderflowException" ]
    (§ method #_"Message" deserializePayload [#_"BitcoinPacketHeader" header, #_"ByteBuffer" in]
        (let [#_"byte[]" payload (byte-array (:size header)) _ (.. in (get payload, 0, (:size header)))
              #_"byte[]" hash (Sha256Hash'hashTwice payload)]
            ;; Verify the checksum.
            (when (or (not= (aget (:checksum header) 0) (aget hash 0)) (not= (aget (:checksum header) 1) (aget hash 1)) (not= (aget (:checksum header) 2) (aget hash 2)) (not= (aget (:checksum header) 3) (aget hash 3)))
                (throw (ProtocolException. (str "Checksum failed to verify, actual " (.. Utils'HEX (encode hash)) " vs " (.. Utils'HEX (encode (:checksum header))))))
            )

            (try
                (.. this (makeMessage (:command header), (:size header), payload, hash, (:checksum header)))
                (catch Exception e
                    (throw (ProtocolException. (str "Error deserializing message " (.. Utils'HEX (encode payload)) "\n"), e))
                )
            )
        )
    )

    #_private
    #_throws #_[ "ProtocolException" ]
    (§ method- #_"Message" makeMessage [#_"String" command, #_"int" length, #_"byte[]" payload, #_"byte[]" hash, #_"byte[]" checksum]
        ;; We use an if ladder rather than reflection because reflection is very slow on Android.
        (case command
            "version"     (VersionMessage. (:params this), payload)
            "inv"         (.. this (makeInventoryMessage payload, length))
            "block"       (.. this (makeBlock payload, length))
            "merkleblock" (.. this (makeFilteredBlock payload))
            "getdata"     (GetDataMessage. (:params this), payload, this, length)
            "getblocks"   (GetBlocksMessage. (:params this), payload)
            "getheaders"  (GetHeadersMessage. (:params this), payload)
            "tx"          (.. this (makeTransaction payload, 0, length, hash))
            "addr"        (.. this (makeAddressMessage payload, length))
            "ping"        (Ping. (:params this), payload)
            "pong"        (Pong. (:params this), payload)
            "verack"      (VersionAck. (:params this), payload)
            "headers"     (HeadersMessage. (:params this), payload)
            "alert"       (.. this (makeAlertMessage payload))
            "filterload"  (.. this (makeBloomFilter payload))
            "notfound"    (NotFoundMessage. (:params this), payload)
            "mempool"     (MemoryPoolMessage.)
            "reject"      (RejectMessage. (:params this), payload)
                      (do
                          (.. BitcoinSerializer'log (warn "No support for deserializing message with name {}", command))
                          (UnknownMessage. (:params this), command, payload)
                      )
        )
    )

    ;;;
     ; Get the network parameters for this serializer.
     ;;
    #_public
    (§ method #_"NetworkParameters" getParameters []
        (:params this)
    )

    ;;;
     ; Make an address message from the payload.
     ;;
    #_override
    #_public
    #_throws #_[ "ProtocolException" ]
    (§ method #_"AddressMessage" makeAddressMessage [#_"byte[]" payload, #_"int" length]
        (AddressMessage. (:params this), payload, this, length)
    )

    ;;;
     ; Make an alert message from the payload.
     ;;
    #_override
    #_public
    #_throws #_[ "ProtocolException" ]
    (§ method #_"Message" makeAlertMessage [#_"byte[]" payload]
        (AlertMessage. (:params this), payload)
    )

    ;;;
     ; Make a block from the payload, using an offset of zero and the payload length as block length.
     ;;
    #_public
    #_throws #_[ "ProtocolException" ]
    (§ method #_"Block" makeBlock [#_"byte[]" payload]
        (.. this (makeBlock payload, 0, (alength payload)))
    )

    ;;;
     ; Make a block from the payload, using an offset of zero and the provided length as block length.
     ;;
    #_public
    #_throws #_[ "ProtocolException" ]
    (§ method #_"Block" makeBlock [#_"byte[]" payload, #_"int" length]
        (.. this (makeBlock payload, 0, length))
    )

    ;;;
     ; Make a block from the payload.
     ;;
    #_public
    #_throws #_[ "ProtocolException" ]
    (§ method #_"Block" makeBlock [#_"byte[]" payload, #_"int" offset, #_"int" length]
        (Block. (:params this), payload, offset, this, length)
    )

    ;;;
     ; Make a filter message from the payload.
     ;;
    #_public
    #_throws #_[ "ProtocolException" ]
    (§ method #_"Message" makeBloomFilter [#_"byte[]" payload]
        (BloomFilter. (:params this), payload)
    )

    ;;;
     ; Make a filtered block from the payload.
     ;;
    #_public
    #_throws #_[ "ProtocolException" ]
    (§ method #_"FilteredBlock" makeFilteredBlock [#_"byte[]" payload]
        (FilteredBlock. (:params this), payload)
    )

    ;;;
     ; Make an inventory message from the payload.
     ;;
    #_override
    #_public
    #_throws #_[ "ProtocolException" ]
    (§ method #_"InventoryMessage" makeInventoryMessage [#_"byte[]" payload, #_"int" length]
        (InventoryMessage. (:params this), payload, this, length)
    )

    ;;;
     ; Make a transaction from the payload.
     ;;
    #_public
    #_throws #_[ "ProtocolException" ]
    (§ method #_"Transaction" makeTransaction [#_"byte[]" payload]
        (.. this (makeTransaction payload, 0))
    )

    ;;;
     ; Make a transaction from the payload.
     ;;
    #_public
    #_throws #_[ "ProtocolException" ]
    (§ method #_"Transaction" makeTransaction [#_"byte[]" payload, #_"int" offset]
        (.. this (makeTransaction payload, offset, (alength payload), nil))
    )

    ;;;
     ; Make a transaction from the payload.
     ;;
    #_public
    #_throws #_[ "ProtocolException" ]
    (§ method #_"Transaction" makeTransaction [#_"byte[]" payload, #_"int" offset, #_"int" length, #_"byte[]" hash]
        (let [#_"Transaction" tx (Transaction. (:params this), payload, offset, nil, this, length)]
            (when (some? hash)
                (.. tx (setHash (Sha256Hash'wrapReversed hash)))
            )
            tx
        )
    )

    #_public
    #_throws #_[ "BufferUnderflowException" ]
    (§ method #_"void" seekPastMagicBytes [#_"ByteBuffer" in]
        ;; We're looking for a run of bytes that is the same as the packet magic but we want to ignore
        ;; incomplete patterns, so we keep track of where we're up to with 'i.
        (let [#_"long" magic (-> this :params :packet-magic)]
            (loop [i 3]
                (if (= (.. in (get)) (byte (& 0xff (>>> magic (<< i 3)))))
                    (recur-if (< 0 i) (dec i)) ;; Else we found the magic sequence.
                    (recur 3)
                )
            )
        )
        nil
    )

    #_public
    #_static
    (§ class BitcoinPacketHeader
        ;;; The largest number of bytes that a header can represent. ;;
        #_public
        #_static
        (def #_"int" BitcoinPacketHeader'HEADER_LENGTH (+ BitcoinSerializer'COMMAND_LEN 4 4))

        #_public
        (§ field #_"byte[]" :header)
        #_public
        (§ field #_"String" :command)
        #_public
        (§ field #_"int" :size)
        #_public
        (§ field #_"byte[]" :checksum)

        #_public
        #_throws #_[ "ProtocolException", "BufferUnderflowException" ]
        (§ constructor BitcoinPacketHeader [#_"ByteBuffer" in]
            (let [#_"int" n BitcoinPacketHeader'HEADER_LENGTH #_"byte[]" bytes (byte-array n) _ (.. in (get bytes, 0, n))]
                (§ assoc this :header bytes)

                ;; The command is a NULL terminated string, unless the command fills all twelve bytes
                ;; in which case the termination is implicit.
                (let [n BitcoinSerializer'COMMAND_LEN
                      #_"int" i (loop-when-recur [i 0] (and (not= (aget (:header this) i) 0) (< i n)) [(inc i)] => i)
                      bytes (byte-array i) _ (System/arraycopy (:header this), 0, bytes, 0, i)]

                    (§ assoc this :command (Utils'toString bytes, "US-ASCII"))
                    (§ assoc this :size (int (Utils'readUint32 (:header this), n)))

                    (when (not (<= 0 (:size this) Message'MAX_SIZE))
                        (throw (ProtocolException. (str "Message size too large: " (:size this))))
                    )

                    ;; Old clients don't send the checksum.
                    ;; Note that the size read above includes the checksum bytes.
                    (let [bytes (byte-array 4) _ (System/arraycopy (:header this), (+ n 4), bytes, 0, 4)]
                        (§ assoc this :checksum bytes)
                        this
                    )
                )
            )
        )
    )
)

;;;
 ; A block is a group of transactions, and is one of the fundamental data structures of the Bitcoin system.
 ; It records a set of {@link Transaction}s together with some data that links it into a place in the global block chain,
 ; and proves that a difficult calculation was done over its contents.
 ; See <a href="http://www.bitcoin.org/bitcoin.pdf">the Bitcoin technical paper</a> for more detail on blocks.
 ;
 ; To get a block, you can either build one from the raw bytes you can get from another implementation, or request one
 ; specifically using {@link Peer#getBlock(Sha256Hash)}, or grab one from a downloaded {@link BlockChain}.
 ;
 ; Instances of this class are not safe for use by multiple threads.
 ;;
#_public
(§ class Block (§ extends Message)
    ;;;
     ; Flags used to control which elements of block validation are done on received blocks.
     ;;
    #_public
    #_static
    #_enum
    (def BlockVerifyFlag'values
    #{
        ;;; Check that block height is in coinbase transaction (BIP 34). ;;
        :BlockVerifyFlag'HEIGHT_IN_COINBASE
    })

    #_private
    #_static
    (def- #_"Logger" Block'log (LoggerFactory/getLogger Block))

    ;;; How many bytes are required to represent a block header WITHOUT the trailing 00 length byte. ;;
    #_public
    #_static
    (def #_"int" Block'HEADER_SIZE 80)

    #_static
    (def #_"long" Block'ALLOWED_TIME_DRIFT (* 2 60 60)) ;; Same value as Bitcoin Core.

    ;;;
     ; A constant shared by the entire network: how large in bytes a block is allowed to be.  One day we may have to
     ; upgrade everyone to change this, so Bitcoin can continue to grow.  For now it exists as an anti-DoS measure to
     ; avoid somebody creating a titanically huge but valid block and forcing everyone to download/store it forever.
     ;;
    #_public
    #_static
    (def #_"int" Block'MAX_BLOCK_SIZE (* 1 1000 1000))
    ;;;
     ; A "sigop" is a signature verification operation.  Because they're expensive, we also impose a separate limit on
     ; the number in a block to prevent somebody mining a huge block that has way more sigops than normal, so is very
     ; expensive/slow to verify.
     ;;
    #_public
    #_static
    (def #_"int" Block'MAX_BLOCK_SIGOPS (quot Block'MAX_BLOCK_SIZE 50))

    ;;; A value for difficultyTarget (nBits) that allows half of all possible hash solutions. ;;
    #_public
    #_static
    (def #_"long" Block'EASIEST_DIFFICULTY_TARGET 0x207fffff)

    ;;; Value to use if the block height is unknown. ;;
    #_public
    #_static
    (def #_"int" Block'BLOCK_HEIGHT_UNKNOWN -1)
    ;;; Height of the first block. ;;
    #_public
    #_static
    (def #_"int" Block'BLOCK_HEIGHT_GENESIS 0)

    #_public
    #_static
    (def #_"long" Block'BLOCK_VERSION_GENESIS 1)
    ;;; Block version introduced in BIP 34: Height in coinbase. ;;
    #_public
    #_static
    (def #_"long" Block'BLOCK_VERSION_BIP34 2)
    ;;; Block version introduced in BIP 66: Strict DER signatures. ;;
    #_public
    #_static
    (def #_"long" Block'BLOCK_VERSION_BIP66 3)
    ;;; Block version introduced in BIP 65: OP_CHECKLOCKTIMEVERIFY ;;
    #_public
    #_static
    (def #_"long" Block'BLOCK_VERSION_BIP65 4)

    ;; Fields defined as part of the protocol format.
    #_private
    (§ field- #_"long" :version)
    #_private
    (§ field- #_"Sha256Hash" :prev-block-hash)
    #_private
    (§ field- #_"Sha256Hash" :merkle-root)
    #_private
    (§ field- #_"long" :time)
    #_private
    (§ field- #_"long" :difficulty-target) ;; "nBits"
    #_private
    (§ field- #_"long" :nonce)

    ;; TODO: Get rid of all the direct accesses to this field.  It's a long-since unnecessary holdover from the Dalvik days.
    ;;; If null, it means this object holds only the headers. ;;
    #_nilable
    (§ field #_"List<Transaction>" :transactions)

    ;;; Stores the hash of the block.  If null, getHash() will recalculate it. ;;
    #_private
    (§ field- #_"Sha256Hash" :hash)

    #_protected
    (§ field #_"boolean" :header-bytes-valid)
    #_protected
    (§ field #_"boolean" :transaction-bytes-valid)

    ;; Blocks can be encoded in a way that will use more bytes than is optimal (due to VarInts having multiple encodings).
    ;; MAX_BLOCK_SIZE must be compared to the optimal encoding, not the actual encoding, so when parsing, we keep track
    ;; of the size of the ideal encoding in addition to the actual message size (which Message needs).
    #_protected
    (§ field #_"int" :optimal-encoding-message-size)

    ;;; Special case constructor, used for the genesis node, cloneAsHeader and unit tests. ;;
    (§ constructor Block [#_"NetworkParameters" params, #_"long" __setVersion]
        (§ super params)

        ;; Set up a few basic things.  We are not complete after this though.
        (§ assoc this :version __setVersion)
        (§ assoc this :difficulty-target 0x1d07fff8)
        (§ assoc this :time (quot (System/currentTimeMillis) 1000))
        (§ assoc this :prev-block-hash Sha256Hash'ZERO_HASH)

        (§ assoc this :length Block'HEADER_SIZE)
        this
    )

    ;;;
     ; Constructs a block object from the Bitcoin wire format.
     ;
     ; @deprecated Use {@link BitcoinSerializer#makeBlock(byte[])} instead.
     ;;
    #_deprecated
    #_public
    #_throws #_[ "ProtocolException" ]
    (§ constructor Block [#_"NetworkParameters" params, #_"byte[]" payload]
        (§ super params, payload, 0, (:default-serializer params), (alength payload))
        this
    )

    ;;;
     ; Construct a block object from the Bitcoin wire format.
     ;
     ; @param params NetworkParameters object.
     ; @param payloadBytes The payload to extract the block from.
     ; @param serializer The serializer to use for this message.
     ; @param length The length of message if known.  Usually this is provided when deserializing of the wire
     ;               as the length will be provided as part of the header.  Set to Message.UNKNOWN_LENGTH, if not known.
     ; @throws ProtocolException
     ;;
    #_public
    #_throws #_[ "ProtocolException" ]
    (§ constructor Block [#_"NetworkParameters" params, #_"byte[]" payload, #_"BitcoinSerializer" serializer, #_"int" length]
        (§ super params, payload, 0, serializer, length)
        this
    )

    ;;;
     ; Construct a block object from the Bitcoin wire format.
     ;
     ; @param params NetworkParameters object.
     ; @param payloadBytes The payload to extract the block from.
     ; @param offset The location of the first payload byte within the array.
     ; @param serializer The serializer to use for this message.
     ; @param length The length of message if known.  Usually this is provided when deserializing of the wire
     ;               as the length will be provided as part of the header.  Set to Message.UNKNOWN_LENGTH, if not known.
     ; @throws ProtocolException
     ;;
    #_public
    #_throws #_[ "ProtocolException" ]
    (§ constructor Block [#_"NetworkParameters" params, #_"byte[]" payload, #_"int" offset, #_"BitcoinSerializer" serializer, #_"int" length]
        (§ super params, payload, offset, serializer, length)
        this
    )

    ;;;
     ; Construct a block object from the Bitcoin wire format.  Used in the case of a block
     ; contained within another message (i.e. for AuxPoW header).
     ;
     ; @param params NetworkParameters object.
     ; @param payloadBytes Bitcoin protocol formatted byte array containing message content.
     ; @param offset The location of the first payload byte within the array.
     ; @param parent The message element which contains this block, maybe null for no parent.
     ; @param serializer The serializer to use for this block.
     ; @param length The length of message if known.  Usually this is provided when deserializing of the wire
     ;               as the length will be provided as part of the header.  Set to Message.UNKNOWN_LENGTH, if not known.
     ; @throws ProtocolException
     ;;
    #_public
    #_throws #_[ "ProtocolException" ]
    (§ constructor Block [#_"NetworkParameters" params, #_"byte[]" payload, #_"int" offset, #_nilable #_"Message" parent, #_"BitcoinSerializer" serializer, #_"int" length]
        ;; TODO: Keep the parent.
        (§ super params, payload, offset, serializer, length)
        this
    )

    ;;;
     ; Construct a block initialized with all the given fields.
     ;
     ; @param params Which network the block is for.
     ; @param version This should usually be set to 1 or 2, depending on if the height is in the coinbase input.
     ; @param prevBlockHash Reference to previous block in the chain or {@link Sha256Hash#ZERO_HASH} if genesis.
     ; @param merkleRoot The root of the merkle tree formed by the transactions.
     ; @param time UNIX time when the block was mined.
     ; @param difficultyTarget Number which this block hashes lower than.
     ; @param nonce Arbitrary number to make the block hash lower than the target.
     ; @param transactions List of transactions including the coinbase.
     ;;
    #_public
    (§ constructor Block [#_"NetworkParameters" params, #_"long" version, #_"Sha256Hash" __prevBlockHash, #_"Sha256Hash" __merkleRoot, #_"long" time, #_"long" __difficultyTarget, #_"long" nonce, #_"List<Transaction>" transactions]
        (§ super params)

        (§ assoc this :version version)
        (§ assoc this :prev-block-hash __prevBlockHash)
        (§ assoc this :merkle-root __merkleRoot)
        (§ assoc this :time time)
        (§ assoc this :difficulty-target __difficultyTarget)
        (§ assoc this :nonce nonce)
        (§ assoc this :transactions (LinkedList. #_"<>"))
        (.. (:transactions this) (addAll transactions))
        this
    )

    ;;;
     ; A utility method that calculates how much new Bitcoin would be created by the block at the given height.
     ; The inflation of Bitcoin is predictable and drops roughly every 4 years (210,000 blocks).  At the dawn of
     ; the system it was 50 coins per block, in late 2012 it went to 25 coins per block, and so on.  The size of
     ; a coinbase transaction is inflation plus fees.
     ;
     ; The half-life is controlled by {@link NetworkParameters#getSubsidyDecreaseBlockCount()}.
     ;;
    #_public
    (§ method #_"Coin" getBlockInflation [#_"int" height]
        (.. Coin'FIFTY_COINS (shiftRight (quot height (-> this :params :subsidy-decrease-block-count))))
    )

    ;;;
     ; Parse transactions from the block.
     ;
     ; @param transactionsOffset Offset of the transactions within the block.
     ; Useful for non-Bitcoin chains where the block header may not be a fixed size.
     ;;
    #_protected
    #_throws #_[ "ProtocolException" ]
    (§ method #_"void" parseTransactions [#_"int" offset]
        (§ assoc this :cursor offset)
        (§ assoc this :optimal-encoding-message-size Block'HEADER_SIZE)
        (if (= (alength (:payload this)) (:cursor this))
            ;; This message is just a header, it has no transactions.
            (§ assoc this :transaction-bytes-valid false)
            (let [#_"int" n (int (.. this (readVarInt)))]
                (§ update this :optimal-encoding-message-size + (VarInt'sizeOf n))
                (§ assoc this :transactions (ArrayList. #_"<>" n))
                (loop-when-recur [#_"int" i 0] (< i n) [(inc i)]
                    (let [#_"Transaction" tx (Transaction. (:params this), (:payload this), (:cursor this), this, (:serializer this), Message'UNKNOWN_LENGTH)]
                        ;; Label the transaction as coming from the P2P network, so code that cares where we first saw it knows.
                        (.. tx (getConfidence) (setSource :ConfidenceSource'NETWORK))
                        (.. (:transactions this) (add tx))
                        (§ update this :cursor + (.. tx (getMessageSize)))
                        (§ update this :optimal-encoding-message-size + (.. tx (getOptimalEncodingMessageSize)))
                    )
                )
                (§ assoc this :transaction-bytes-valid (-> this :serializer :parse-retain))
            )
        )
        nil
    )

    #_override
    #_protected
    #_throws #_[ "ProtocolException" ]
    (§ method #_"void" parse []
        ;; header
        (§ assoc this :cursor (:offset this))
        (§ assoc this :version (.. this (readUint32)))
        (§ assoc this :prev-block-hash (.. this (readHash)))
        (§ assoc this :merkle-root (.. this (readHash)))
        (§ assoc this :time (.. this (readUint32)))
        (§ assoc this :difficulty-target (.. this (readUint32)))
        (§ assoc this :nonce (.. this (readUint32)))
        (§ assoc this :hash (Sha256Hash'wrapReversed (Sha256Hash'hashTwice (:payload this), (:offset this), (- (:cursor this) (:offset this)))))
        (§ assoc this :header-bytes-valid (-> this :serializer :parse-retain))

        ;; transactions
        (.. this (parseTransactions (+ (:offset this) Block'HEADER_SIZE)))
        (§ assoc this :length (- (:cursor this) (:offset this)))
        nil
    )

    #_public
    (§ method #_"int" getOptimalEncodingMessageSize []
        (when (zero? (:optimal-encoding-message-size this))
            (§ assoc this :optimal-encoding-message-size (alength (.. this (bitcoinSerialize))))
        )
        (:optimal-encoding-message-size this)
    )

    #_private
    (§ method- #_"void" writeHeader [#_"ByteArrayOutputStream" baos]
        (cond (and (:header-bytes-valid this) (some? (:payload this)) (<= (+ (:offset this) Block'HEADER_SIZE) (alength (:payload this))))
            (do
                ;; try for cached write first
                (.. baos (write (:payload this), (:offset this), Block'HEADER_SIZE))
            )
            :else
            (do
                ;; fall back to manual write
                (Utils'uint32ToByteStreamLE (:version this), baos)
                (.. baos (write (.. (:prev-block-hash this) (getReversedBytes))))
                (.. baos (write (.. this (getMerkleRoot) (getReversedBytes))))
                (Utils'uint32ToByteStreamLE (:time this), baos)
                (Utils'uint32ToByteStreamLE (:difficulty-target this), baos)
                (Utils'uint32ToByteStreamLE (:nonce this), baos)
            )
        )
        nil
    )

    #_private
    (§ method- #_"void" writeTransactions [#_"ByteArrayOutputStream" baos]
        (when (some? (:transactions this))
            (cond (and (:transaction-bytes-valid this) (some? (:payload this)) (<= (+ (:offset this) (:length this)) (alength (:payload this))))
                (do
                    (.. baos (write (:payload this), (+ (:offset this) Block'HEADER_SIZE), (- (:length this) Block'HEADER_SIZE)))
                )
                :else
                (do
                    (.. baos (write (.. (VarInt. (.. (:transactions this) (size))) (encode))))
                    (doseq [#_"Transaction" tx (:transactions this)]
                        (.. tx (bitcoinSerialize baos))
                    )
                )
            )
        )
        nil
    )

    ;;;
     ; Special handling to check if we have a valid byte array for both header and transactions.
     ;;
    #_override
    #_public
    (§ method #_"byte[]" bitcoinSerialize []
        (cond (and (:header-bytes-valid this) (:transaction-bytes-valid this))
            ;; We have completely cached byte array.
            (do
                (ensure some? (:payload this), ":payload should never be nil if :header-bytes-valid and :transaction-bytes-valid")
                (if (= (:length this) (alength (:payload this)))
                    (:payload this)
                    ;; byte array is offset, so copy out the correct range
                    (let [#_"byte[]" buf (byte-array (:length this)) _ (System/arraycopy (:payload this), (:offset this), buf, 0, (:length this))]
                        buf
                    )
                )
            )
            :else
            ;; At least one of the two cacheable components is invalid, so fall back to stream write since we can't be sure of the length.
            (let [#_"ByteArrayOutputStream" baos (ByteArrayOutputStream. (if (= (:length this) Message'UNKNOWN_LENGTH) (+ Block'HEADER_SIZE (.. this (guessTransactionsLength))) (:length this)))]
                (.. this (writeHeader baos))
                (.. this (writeTransactions baos))
                (.. baos (toByteArray))
            )
        )
    )

    #_override
    #_protected
    (§ method #_"void" bitcoinSerializeToStream [#_"ByteArrayOutputStream" baos]
        (.. this (writeHeader baos))
        ;; We may only have enough data to write the header.
        (.. this (writeTransactions baos))
        nil
    )

    ;;;
     ; Provides a reasonable guess at the byte length of the transactions part of the block.
     ; The returned value will be accurate in 99% of cases and in those cases where not will probably slightly oversize.
     ;
     ; This is used to preallocate the underlying byte array for a ByteArrayOutputStream.  If the size is under the
     ; real value the only penalty is resizing of the underlying byte array.
     ;;
    #_private
    (§ method- #_"int" guessTransactionsLength []
        (cond
            (:transaction-bytes-valid this) (- (alength (:payload this)) Block'HEADER_SIZE)
            (nil? (:transactions this))     0
            :else
                (let [#_"int" len (VarInt'sizeOf (.. (:transactions this) (size)))]
                    (doseq [#_"Transaction" tx (:transactions this)]
                        ;; 255 is just a guess at an average tx length
                        (§ ass len (+ len (if (= (:length tx) Message'UNKNOWN_LENGTH) 255 (:length tx))))
                    )
                    len
                )
        )
    )

    #_override
    #_protected
    (§ method #_"void" unCache []
        ;; Since we have alternate uncache methods to use internally, this will only ever be called by a child
        ;; transaction, so we only need to invalidate that part of the cache.
        (.. this (unCacheTransactions))
        nil
    )

    #_private
    (§ method- #_"void" unCacheHeader []
        (§ assoc this :header-bytes-valid false)
        (when (not (:transaction-bytes-valid this))
            (§ assoc this :payload nil)
        )
        (§ assoc this :hash nil)
        nil
    )

    #_private
    (§ method- #_"void" unCacheTransactions []
        (§ assoc this :transaction-bytes-valid false)
        (when (not (:header-bytes-valid this))
            (§ assoc this :payload nil)
        )
        ;; Current implementation has to uncache headers as well as any change to a tx will alter the merkle root.
        ;; In future, we can go more granular and cache merkle root separately so rest of the header does not need to be rewritten.
        (.. this (unCacheHeader))
        ;; Clear merkleRoot last as it may end up being parsed during unCacheHeader().
        (§ assoc this :merkle-root nil)
        nil
    )

    ;;;
     ; Calculates the block hash by serializing the block and hashing the resulting bytes.
     ;;
    #_private
    (§ method- #_"Sha256Hash" calculateHash []
        (let [#_"ByteArrayOutputStream" baos (ByteArrayOutputStream. Block'HEADER_SIZE)]
            (.. this (writeHeader baos))
            (Sha256Hash'wrapReversed (Sha256Hash'hashTwice (.. baos (toByteArray))))
        )
    )

    ;;;
     ; Returns the hash of the block (which for a valid, solved block should be below the target) in the form seen on
     ; the block explorer.  If you call this on block 1 in the mainnet chain,
     ; you will get "00000000839a8e6886ab5951d76f411475428afc90947ee320161bbf18eb6048".
     ;;
    #_public
    (§ method #_"String" getHashAsString []
        (.. this (getHash) (toString))
    )

    ;;;
     ; Returns the hash of the block (which for a valid, solved block should be
     ; below the target).  Big endian.
     ;;
    #_override
    #_public
    (§ method #_"Sha256Hash" getHash []
        (when (nil? (:hash this))
            (§ assoc this :hash (.. this (calculateHash)))
        )
        (:hash this)
    )

    ;;;
     ; The number that is one greater than the largest representable SHA-256 hash.
     ;;
    #_private
    #_static
    (def- #_"BigInteger" Block'LARGEST_HASH (.. BigInteger/ONE (shiftLeft 256)))

    ;;;
     ; Returns the work represented by this block.
     ;
     ; Work is defined as the number of tries needed to solve a block in the
     ; average case.  Consider a difficulty target that covers 5% of all possible
     ; hash values.  Then the work of the block will be 20.  As the target gets
     ; lower, the amount of work goes up.
     ;;
    #_public
    #_throws #_[ "VerificationException" ]
    (§ method #_"BigInteger" getWork []
        (let [#_"BigInteger" target (.. this (getDifficultyTargetAsInteger))]
            (.. Block'LARGEST_HASH (divide (.. target (add BigInteger/ONE))))
        )
    )

    ;;; Returns a copy of the block, but without any transactions. ;;
    #_public
    (§ method #_"Block" cloneAsHeader []
        (let [#_"Block" block (Block. (:params this), Block'BLOCK_VERSION_GENESIS)]
            (.. this (copyBitcoinHeaderTo block))
            block
        )
    )

    ;;; Copy the block without transactions into the provided empty block. ;;
    #_protected
    (§ method #_"void" copyBitcoinHeaderTo [#_"Block" block]
        (§ assoc block :nonce (:nonce this))
        (§ assoc block :prev-block-hash (:prev-block-hash this))
        (§ assoc block :merkle-root (.. this (getMerkleRoot)))
        (§ assoc block :version (:version this))
        (§ assoc block :time (:time this))
        (§ assoc block :difficulty-target (:difficulty-target this))
        (§ assoc block :transactions nil)
        (§ assoc block :hash (.. this (getHash)))
        nil
    )

    ;;;
     ; Returns a multi-line string containing a description of the contents of the block.
     ; Use for debugging purposes only.
     ;;
    #_override
    #_public
    (§ method #_"String" toString []
        (let [#_"StringBuilder" sb (StringBuilder.)]
            (.. sb (append " block: \n"))
            (.. sb (append "   hash: ") (append (.. this (getHashAsString))) (append "\n"))
            (.. sb (append "   version: ") (append (:version this)))
            (let [#_"String" bips (.. (Joiner/on ", ") (skipNulls) (join (when (.. this (isBIP34)) "BIP34"), (when (.. this (isBIP66)) "BIP66"), (when (.. this (isBIP65)) "BIP65")))]
                (when (not (.. bips (isEmpty)))
                    (.. sb (append " (") (append bips) (append ")"))
                )
                (.. sb (append "\n"))
                (.. sb (append "   previous block: ") (append (.. this (getPrevBlockHash))) (append "\n"))
                (.. sb (append "   merkle root: ") (append (.. this (getMerkleRoot))) (append "\n"))
                (.. sb (append "   time: ") (append (:time this)) (append " (") (append (Utils'dateTimeFormat (* (:time this) 1000))) (append ")\n"))
                (.. sb (append "   difficulty target (nBits): ") (append (:difficulty-target this)) (append "\n"))
                (.. sb (append "   nonce: ") (append (:nonce this)) (append "\n"))
                (when (and (some? (:transactions this)) (< 0 (.. (:transactions this) (size))))
                    (.. sb (append "   with ") (append (.. (:transactions this) (size))) (append " transaction(s):\n"))
                    (doseq [#_"Transaction" tx (:transactions this)]
                        (.. sb (append tx))
                    )
                )
                (.. sb (toString))
            )
        )
    )

    ;;;
     ; Finds a value of nonce that makes the blocks hash lower than the difficulty target.
     ; This is called mining, but solve() is far too slow to do real mining with.
     ;
     ; This can loop forever if a solution cannot be found solely by incrementing nonce.
     ; It doesn't change extraNonce.
     ;;
    #_public
    (§ method #_"void" solve []
        (loop []
            (try
                ;; Is our proof of work valid yet?
                (when (.. this (checkProofOfWork false))
                    (§ return nil)
                )
                ;; No, so increment the nonce and try again.
                (.. this (setNonce (inc (.. this (getNonce)))))
                (catch VerificationException e
                    (throw (RuntimeException. e)) ;; Cannot happen.
                )
            )
        )
        nil
    )

    ;;;
     ; Returns the difficulty target as a 256 bit value that can be compared to a SHA-256 hash.  Inside a block the
     ; target is represented using a compact form.  If this form decodes to a value that is out of bounds, an exception
     ; is thrown.
     ;;
    #_public
    #_throws #_[ "VerificationException" ]
    (§ method #_"BigInteger" getDifficultyTargetAsInteger []
        (let [#_"BigInteger" target (Utils'decodeCompactBits (:difficulty-target this))]
            (when (or (<= (.. target (signum)) 0) (< 0 (.. target (compareTo (-> this :params :max-target)))))
                (throw (VerificationException. (str "Difficulty target is bad: " target)))
            )
            target
        )
    )

    ;;; Returns true if the hash of the block is OK (lower than difficulty target). ;;
    #_protected
    #_throws #_[ "VerificationException" ]
    (§ method #_"boolean" checkProofOfWork [#_"boolean" throw?]
        ;; This part is key - it is what proves the block was as difficult to make as it claims
        ;; to be.  Note however that in the context of this function, the block can claim to be
        ;; as difficult as it wants to be .... if somebody was able to take control of our network
        ;; connection and fork us onto a different chain, they could send us valid blocks with
        ;; ridiculously easy difficulty and this function would accept them.
        ;;
        ;; To prevent this attack from being possible, elsewhere we check that the difficultyTarget
        ;; field is of the right value.  This requires us to have the preceeding blocks.
        (let [#_"BigInteger" target (.. this (getDifficultyTargetAsInteger)) #_"BigInteger" h (.. this (getHash) (toBigInteger))]
            (if (< 0 (.. h (compareTo target)))
                ;; Proof of work check failed!
                (if throw?
                    (throw (VerificationException. (str "Hash is higher than target: " (.. this (getHashAsString)) " vs " (.. target (toString 16)))))
                    false
                )
                true
            )
        )
    )

    #_private
    #_throws #_[ "VerificationException" ]
    (§ method- #_"void" checkTimestamp []
        (let [#_"long" drift (+ (Utils'currentTimeSeconds) Block'ALLOWED_TIME_DRIFT)]
            (when (< drift (:time this))
                (throw (VerificationException. (String/format Locale/US, "Block too far in future: %s (%d) vs allowed %s (%d)", (Utils'dateTimeFormat (* (:time this) 1000)), (:time this), (Utils'dateTimeFormat (* drift 1000)), drift)))
            )
        )
        nil
    )

    #_private
    #_throws #_[ "VerificationException" ]
    (§ method- #_"void" checkSigOps []
        ;; Check there aren't too many signature verifications in the block.  This is an anti-DoS measure,
        ;; see the comments for MAX_BLOCK_SIGOPS.
        (let [#_"int" __sigOps 0]
            (doseq [#_"Transaction" tx (:transactions this)]
                (§ ass __sigOps (+ __sigOps (.. tx (getSigOpCount))))
            )

            (when (< Block'MAX_BLOCK_SIGOPS __sigOps)
                (throw (VerificationException. "Block had too many Signature Operations"))
            )
        )
        nil
    )

    #_private
    #_throws #_[ "VerificationException" ]
    (§ method- #_"void" checkMerkleRoot []
        (let [#_"Sha256Hash" __calculatedRoot (.. this (calculateMerkleRoot))]
            (when (not (.. __calculatedRoot (equals (:merkle-root this))))
                (.. Block'log (error "Merkle tree did not verify"))
                (throw (VerificationException. (str "Merkle hashes do not match: " __calculatedRoot " vs " (:merkle-root this))))
            )
        )
        nil
    )

    #_private
    (§ method- #_"Sha256Hash" calculateMerkleRoot []
        (let [#_"List<byte[]>" tree (.. this (buildMerkleTree))]
            (Sha256Hash'wrap (.. tree (get (dec (.. tree (size))))))
        )
    )

    #_private
    (§ method- #_"List<byte[]>" buildMerkleTree []
        ;; The Merkle root is based on a tree of hashes calculated from the transactions:
        ;;
        ;;     root
        ;;     /  \
        ;;   A      B
        ;;  / \    / \
        ;; t1 t2  t3 t4
        ;;
        ;; The tree is represented as a list: (t1 t2 t3 t4 A B root), where each entry is a hash.
        ;;
        ;; The hashing algorithm is double SHA-256.  The leaves are a hash of the serialized contents of the transaction.
        ;; The interior nodes are hashes of the concenation of the two child hashes.
        ;;
        ;; This structure allows the creation of proof that a transaction was included into a block without having to
        ;; provide the full block contents.  Instead, you can provide only a Merkle branch.  For example to prove tx2 was
        ;; in a block you can just provide tx2, the hash(tx1) and B.  Now the other party has everything they need to
        ;; derive the root, which can be checked against the block header.  These proofs aren't used right now but
        ;; will be helpful later when we want to download partial block contents.
        ;;
        ;; Note that if the number of transactions is not even, the last tx is repeated to make it so (see tx3 above).
        ;; A tree with 5 transactions would look like this:
        ;;
        ;;          root
        ;;        /      \
        ;;      1          5
        ;;    /   \       / \
        ;;   2     3     4   4
        ;;  / \   / \   / \
        ;; t1 t2 t3 t4 t5 t5
        (let [#_"ArrayList<byte[]>" tree (ArrayList. #_"<>")]
            ;; Start by adding all the hashes of the transactions as leaves of the tree.
            (doseq [#_"Transaction" t (:transactions this)]
                (.. tree (add (.. t (getHash) (getBytes))))
            )

            ;; Offset in the list where the currently processed level starts.
            (let [#_"int" __levelOffset 0]
                ;; Step through each level, stopping when we reach the root (levelSize == 1).
                (loop-when-recur [#_"int" __levelSize (.. (:transactions this) (size))] (< 1 __levelSize) [(quot (inc __levelSize) 2)]
                    ;; For each pair of nodes on that level:
                    (loop-when-recur [#_"int" left 0] (< left __levelSize) [(+ left 2)]
                        ;; The right hand node can be the same as the left hand, in the case where we don't have enough transactions.
                        (let [#_"int" right (min (inc left), (dec __levelSize))
                              #_"byte[]" __leftBytes (Utils'reverseBytes (.. tree (get (+ __levelOffset left))))
                              #_"byte[]" __rightBytes (Utils'reverseBytes (.. tree (get (+ __levelOffset right))))]
                            (.. tree (add (Utils'reverseBytes (Sha256Hash'hashTwice __leftBytes, 0, 32, __rightBytes, 0, 32))))
                        )
                    )
                    ;; Move to the next level.
                    (§ ass __levelOffset (+ __levelOffset __levelSize))
                )
                tree
            )
        )
    )

    ;;;
     ; Verify the transactions on a block.
     ;
     ; @param height Block height, if known, or -1 otherwise.
     ;               If provided, used to validate the coinbase input script of v2 and above blocks.
     ; @throws VerificationException if there was an error verifying the block.
     ;;
    #_private
    #_throws #_[ "VerificationException" ]
    (§ method- #_"void" checkTransactions [#_"int" height, #_"EnumSet<BlockVerifyFlag>" flags]
        ;; The first transaction in a block must always be a coinbase transaction.
        (when (not (.. (:transactions this) (get 0) (isCoinBase)))
            (throw (VerificationException. "First tx is not coinbase"))
        )

        (when (and (.. flags (contains :BlockVerifyFlag'HEIGHT_IN_COINBASE)) (<= Block'BLOCK_HEIGHT_GENESIS height))
            (.. (:transactions this) (get 0) (checkCoinBaseHeight height))
        )

        ;; The rest must not be.
        (loop-when-recur [#_"int" i 1] (< i (.. (:transactions this) (size))) [(inc i)]
            (when (.. (:transactions this) (get i) (isCoinBase))
                (throw (VerificationException. (str "TX " i " is coinbase when it should not be.")))
            )
        )
        nil
    )

    ;;;
     ; Checks the block data to ensure it follows the rules laid out in the network parameters.  Specifically,
     ; throws an exception if the proof of work is invalid, or if the timestamp is too far from what it should be.
     ; This is <b>not</b> everything that is required for a block to be valid, only what is checkable independent
     ; of the chain and without a transaction index.
     ;
     ; @throws VerificationException
     ;;
    #_public
    #_throws #_[ "VerificationException" ]
    (§ method #_"void" verifyHeader []
        ;; Prove that this block is OK.  It might seem that we can just ignore most of these checks given that the
        ;; network is also verifying the blocks, but we cannot as it'd open us to a variety of obscure attacks.
        ;;
        ;; Firstly we need to ensure this block does in fact represent real work done.  If the difficulty is high
        ;; enough, it's probably been done by the network.
        (.. this (checkProofOfWork true))
        (.. this (checkTimestamp))
        nil
    )

    ;;;
     ; Checks the block contents.
     ;
     ; @param height Block height, if known, or -1 otherwise.
     ;               If valid, used to validate the coinbase input script of v2 and above blocks.
     ; @param flags Flags to indicate which tests should be applied (i.e. whether to test for height in the coinbase transaction).
     ; @throws VerificationException if there was an error verifying the block.
     ;;
    #_public
    #_throws #_[ "VerificationException" ]
    (§ method #_"void" verifyTransactions [#_"int" height, #_"EnumSet<BlockVerifyFlag>" flags]
        ;; Now we need to check that the body of the block actually matches the headers.  The network won't generate
        ;; an invalid block, but if we didn't validate this then an untrusted man-in-the-middle could obtain the next
        ;; valid block from the network and simply replace the transactions in it with their own fictional
        ;; transactions that reference spent or non-existant inputs.
        (when (.. (:transactions this) (isEmpty))
            (throw (VerificationException. "Block had no transactions"))
        )
        (when (< Block'MAX_BLOCK_SIZE (.. this (getOptimalEncodingMessageSize)))
            (throw (VerificationException. "Block larger than MAX_BLOCK_SIZE"))
        )
        (.. this (checkTransactions height, flags))
        (.. this (checkMerkleRoot))
        (.. this (checkSigOps))
        (doseq [#_"Transaction" transaction (:transactions this)]
            (.. transaction (verify))
        )
        nil
    )

    ;;;
     ; Verifies both the header and that the transactions hash to the merkle root.
     ;
     ; @param height Block height, if known, or -1 otherwise.
     ; @param flags Flags to indicate which tests should be applied (i.e. whether to test for height in the coinbase transaction).
     ; @throws VerificationException if there was an error verifying the block.
     ;;
    #_public
    #_throws #_[ "VerificationException" ]
    (§ method #_"void" verify [#_"int" height, #_"EnumSet<BlockVerifyFlag>" flags]
        (.. this (verifyHeader))
        (.. this (verifyTransactions height, flags))
        nil
    )

    #_override
    #_public
    (§ method #_"boolean" equals [#_"Object" o]
        (cond
            (= this o) true
            (or (nil? o) (not= (getClass) (.. o (getClass)))) false
            :else (.. this (getHash) (equals (.. (cast Block o) (getHash))))
        )
    )

    #_override
    #_public
    (§ method #_"int" hashCode []
        (.. this (getHash) (hashCode))
    )

    ;;;
     ; Returns the merkle root in big endian form, calculating it from transactions if necessary.
     ;;
    #_public
    (§ method #_"Sha256Hash" getMerkleRoot []
        (when (nil? (:merkle-root this))
            ;; TODO: Check if this is really necessary.
            (.. this (unCacheHeader))
            (§ assoc this :merkle-root (.. this (calculateMerkleRoot)))
        )
        (:merkle-root this)
    )

    ;;; Exists only for unit testing. ;;
    (§ method #_"void" setMerkleRoot [#_"Sha256Hash" value]
        (.. this (unCacheHeader))
        (§ assoc this :merkle-root value)
        (§ assoc this :hash nil)
        nil
    )

    ;;; Adds a transaction to this block.  The nonce and merkle root are invalid after this. ;;
    #_public
    (§ method #_"void" addTransaction [#_"Transaction" t]
        (.. this (addTransaction t, true))
        nil
    )

    ;;; Adds a transaction to this block, with or without checking the sanity of doing so. ;;
    (§ method #_"void" addTransaction [#_"Transaction" t, #_"boolean" __runSanityChecks]
        (.. this (unCacheTransactions))
        (when (nil? (:transactions this))
            (§ assoc this :transactions (ArrayList. #_"<>"))
        )
        (.. t (setParent this))
        (when (and __runSanityChecks (= (.. (:transactions this) (size)) 0) (not (.. t (isCoinBase))))
            (throw (RuntimeException. (str "Attempted to add a non-coinbase transaction as the first transaction: " t)))
        )
        (when (and __runSanityChecks (< 0 (.. (:transactions this) (size))) (.. t (isCoinBase)))
            (throw (RuntimeException. (str "Attempted to add a coinbase transaction when there already is one: " t)))
        )
        (.. (:transactions this) (add t))
        (.. this (adjustLength (.. (:transactions this) (size)), (:length t)))
        ;; Force a recalculation next time the values are needed.
        (§ assoc this :merkle-root nil)
        (§ assoc this :hash nil)
        nil
    )

    ;;;
     ; Returns the version of the block data structure as defined by the Bitcoin protocol.
     ;;
    #_public
    (§ method #_"long" getVersion []
        (:version this)
    )

    ;;;
     ; Returns the hash of the previous block in the chain, as defined by the block header.
     ;;
    #_public
    (§ method #_"Sha256Hash" getPrevBlockHash []
        (:prev-block-hash this)
    )

    (§ method #_"void" setPrevBlockHash [#_"Sha256Hash" __prevBlockHash]
        (.. this (unCacheHeader))
        (§ assoc this :prev-block-hash __prevBlockHash)
        (§ assoc this :hash nil)
        nil
    )

    ;;;
     ; Returns the time at which the block was solved and broadcast, according to the clock of the solving node.
     ; This is measured in seconds since the UNIX epoch (midnight Jan 1st 1970).
     ;;
    #_public
    (§ method #_"long" getTimeSeconds []
        (:time this)
    )

    ;;;
     ; Returns the time at which the block was solved and broadcast, according to the clock of the solving node.
     ;;
    #_public
    (§ method #_"Date" getTime []
        (Date. (* (.. this (getTimeSeconds)) 1000))
    )

    #_public
    (§ method #_"void" setTime [#_"long" time]
        (.. this (unCacheHeader))
        (§ assoc this :time time)
        (§ assoc this :hash nil)
        nil
    )

    ;;;
     ; Returns the difficulty of the proof of work that this block should meet encoded <b>in compact form</b>.
     ; The {@link BlockChain} verifies that this is not too easy by looking at the length of the chain when the block is added.
     ; To find the actual value the hash should be compared against, use {@link Block#getDifficultyTargetAsInteger()}.
     ; Note that this is <b>not</b> the same as the difficulty value reported by the Bitcoin "getdifficulty" RPC that you may see on various block explorers.
     ; That number is the result of applying a formula to the underlying difficulty to normalize the minimum to 1.
     ; Calculating the difficulty that way is currently unsupported.
     ;;
    #_public
    (§ method #_"long" getDifficultyTarget []
        (:difficulty-target this)
    )

    ;;; Sets the difficulty target in compact form. ;;
    #_public
    (§ method #_"void" setDifficultyTarget [#_"long" __compactForm]
        (.. this (unCacheHeader))
        (§ assoc this :difficulty-target __compactForm)
        (§ assoc this :hash nil)
        nil
    )

    ;;;
     ; Returns the nonce, an arbitrary value that exists only to make the hash of the block header fall below the difficulty target.
     ;;
    #_public
    (§ method #_"long" getNonce []
        (:nonce this)
    )

    ;;;
     ; Sets the nonce and clears any cached data.
     ;;
    #_public
    (§ method #_"void" setNonce [#_"long" nonce]
        (.. this (unCacheHeader))
        (§ assoc this :nonce nonce)
        (§ assoc this :hash nil)
        nil
    )

    ;;; Returns an immutable list of transactions held in this block, or null if this object represents just a header. ;;
    #_nilable
    #_public
    (§ method #_"List<Transaction>" getTransactions []
        (when (some? (:transactions this)) (ImmutableList/copyOf (:transactions this)))
    )

    ;;;
     ; Return whether this block contains any transactions.
     ;
     ; @return true if the block contains transactions, false otherwise (is purely a header).
     ;;
    #_public
    (§ method #_"boolean" hasTransactions []
        (not (.. (:transactions this) (isEmpty)))
    )

    ;;;
     ; Returns whether this block conforms to
     ; <a href="https://github.com/bitcoin/bips/blob/master/bip-0034.mediawiki">BIP34: Height in Coinbase</a>.
     ;;
    #_public
    (§ method #_"boolean" isBIP34 []
        (<= Block'BLOCK_VERSION_BIP34 (:version this))
    )

    ;;;
     ; Returns whether this block conforms to
     ; <a href="https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki">BIP66: Strict DER signatures</a>.
     ;;
    #_public
    (§ method #_"boolean" isBIP66 []
        (<= Block'BLOCK_VERSION_BIP66 (:version this))
    )

    ;;;
     ; Returns whether this block conforms to
     ; <a href="https://github.com/bitcoin/bips/blob/master/bip-0065.mediawiki">BIP65: OP_CHECKLOCKTIMEVERIFY</a>.
     ;;
    #_public
    (§ method #_"boolean" isBIP65 []
        (<= Block'BLOCK_VERSION_BIP65 (:version this))
    )
)

;; TODO: Rename this class to SPVBlockChain at some point.

;;;
 ; A BlockChain implements the <i>simplified payment verification</i> mode of the Bitcoin protocol.  It is the right
 ; choice to use for programs that have limited resources as it won't verify transactions signatures or attempt to store
 ; all of the block chain.  Really, this class should be called SPVBlockChain but for backwards compatibility it is not.
 ;;
#_public
(§ class BlockChain (§ extends AbstractBlockChain)
    ;;; Keeps a map of block hashes to StoredBlocks. ;;
    #_protected
    (§ field #_"BlockStore" :block-store)

    ;;;
     ; Constructs a BlockChain connected to the given wallet and store.  To obtain a {@link Wallet} you can construct
     ; one from scratch, or you can deserialize a saved wallet from disk using {@link Wallet#loadFromFile(java.io.File)}.
     ;
     ; For the store, you should use {@link SPVBlockStore} or you could also try a
     ; {@link MemoryBlockStore} if you want to hold all headers in RAM and don't care about
     ; disk serialization (this is rare).
     ;;
    #_public
    #_throws #_[ "BlockStoreException" ]
    (§ constructor BlockChain [#_"Context" context, #_"Wallet" wallet, #_"BlockStore" __blockStore]
        (§ this context, (ArrayList. #_"<Wallet>"), __blockStore)
        (.. this (addWallet wallet))
        this
    )

    ;;; See {@link #BlockChain(Context, Wallet, BlockStore)}}. ;;
    #_public
    #_throws #_[ "BlockStoreException" ]
    (§ constructor BlockChain [#_"NetworkParameters" params, #_"Wallet" wallet, #_"BlockStore" __blockStore]
        (§ this (Context'getOrCreate params), wallet, __blockStore)
        this
    )

    ;;;
     ; Constructs a BlockChain that has no wallet at all.  This is helpful when you don't actually care about sending
     ; and receiving coins but rather, just want to explore the network data structures.
     ;;
    #_public
    #_throws #_[ "BlockStoreException" ]
    (§ constructor BlockChain [#_"Context" context, #_"BlockStore" __blockStore]
        (§ this context, (ArrayList. #_"<Wallet>"), __blockStore)
        this
    )

    ;;; See {@link #BlockChain(Context, BlockStore)}. ;;
    #_public
    #_throws #_[ "BlockStoreException" ]
    (§ constructor BlockChain [#_"NetworkParameters" params, #_"BlockStore" __blockStore]
        (§ this params, (ArrayList. #_"<Wallet>"), __blockStore)
        this
    )

    ;;;
     ; Constructs a BlockChain connected to the given list of listeners and a store.
     ;;
    #_public
    #_throws #_[ "BlockStoreException" ]
    (§ constructor BlockChain [#_"Context" params, #_"List<? extends Wallet>" wallets, #_"BlockStore" __blockStore]
        (§ super params, wallets, __blockStore)
        (§ assoc this :block-store __blockStore)
        this
    )

    ;;; See {@link #BlockChain(Context, List, BlockStore)}. ;;
    #_public
    #_throws #_[ "BlockStoreException" ]
    (§ constructor BlockChain [#_"NetworkParameters" params, #_"List<? extends Wallet>" wallets, #_"BlockStore" __blockStore]
        (§ this (Context'getOrCreate params), wallets, __blockStore)
        this
    )

    #_override
    #_protected
    #_throws #_[ "BlockStoreException", "VerificationException" ]
    (§ method #_"StoredBlock" addToBlockStore [#_"StoredBlock" __storedPrev, #_"Block" __blockHeader, #_"TransactionOutputChanges" __txOutChanges]
        (let [#_"StoredBlock" __newBlock (.. __storedPrev (build __blockHeader))]
            (.. (:block-store this) (put __newBlock))
            __newBlock
        )
    )

    #_override
    #_protected
    #_throws #_[ "BlockStoreException", "VerificationException" ]
    (§ method #_"StoredBlock" addToBlockStore [#_"StoredBlock" __storedPrev, #_"Block" __blockHeader]
        (let [#_"StoredBlock" __newBlock (.. __storedPrev (build __blockHeader))]
            (.. (:block-store this) (put __newBlock))
            __newBlock
        )
    )

    #_override
    #_protected
    #_throws #_[ "BlockStoreException" ]
    (§ method #_"void" rollbackBlockStore [#_"int" height]
        (.. (:lock this) (lock))
        (try
            (let [#_"int" best (.. this (getBestChainHeight))]
                (assert-argument (<= 0 height best), "Bad height: %s", height)
                (when (not= height best)
                    ;; Look for the block we want to be the new chain head.
                    (let [#_"StoredBlock" head (.. (:block-store this) (getChainHead))]
                        (loop-when-recur [] (< height (.. head (getHeight))) []
                            (§ ass head (.. head (getPrev (:block-store this))))
                            (when (nil? head)
                                (throw (BlockStoreException. "Unreachable height"))
                            )
                        )

                        ;; Modify store directly.
                        (.. (:block-store this) (put head))
                        (.. this (setChainHead head))
                    )
                )
            )
            (finally
                (.. (:lock this) (unlock))
            )
        )
        nil
    )

    #_override
    #_protected
    (§ method #_"boolean" shouldVerifyTransactions []
        false
    )

    #_override
    #_protected
    (§ method #_"TransactionOutputChanges" connectTransactions [#_"int" height, #_"Block" block]
        ;; Don't have to do anything as this is only called if shouldVerifyTransactions().
        (throw (UnsupportedOperationException.))
    )

    #_override
    #_protected
    (§ method #_"TransactionOutputChanges" connectTransactions [#_"StoredBlock" __newBlock]
        ;; Don't have to do anything as this is only called if shouldVerifyTransactions().
        (throw (UnsupportedOperationException.))
    )

    #_override
    #_protected
    (§ method #_"void" disconnectTransactions [#_"StoredBlock" block]
        ;; Don't have to do anything as this is only called if shouldVerifyTransactions().
        (throw (UnsupportedOperationException.))
    )

    #_override
    #_protected
    #_throws #_[ "BlockStoreException" ]
    (§ method #_"void" doSetChainHead [#_"StoredBlock" __chainHead]
        (.. (:block-store this) (setChainHead __chainHead))
        nil
    )

    #_override
    #_protected
    #_throws #_[ "BlockStoreException" ]
    (§ method #_"void" notSettingChainHead []
        ;; We don't use DB transactions here, so we don't need to do anything.
        nil
    )

    #_override
    #_protected
    #_throws #_[ "BlockStoreException" ]
    (§ method #_"StoredBlock" getStoredBlockInCurrentScope [#_"Sha256Hash" hash]
        (.. (:block-store this) (get hash))
    )

    #_override
    #_public
    #_throws #_[ "VerificationException", "PrunedException" ]
    (§ method #_"boolean" add [#_"FilteredBlock" block]
        (let [#_"boolean" success (.. super (add block))]
            (when success
                (.. this (trackFilteredTransactions (.. block (getTransactionCount))))
            )
            success
        )
    )
)

;;;
 ; A Bloom filter is a probabilistic data structure which can be sent to another client so that it can avoid
 ; sending us transactions that aren't relevant to our set of keys.  This allows for significantly more efficient
 ; use of available network bandwidth and CPU time.
 ;
 ; Because a Bloom filter is probabilistic, it has a configurable false positive rate.  So the filter will sometimes
 ; match transactions that weren't inserted into it, but it will never fail to match transactions that were.  This is
 ; a useful privacy feature - if you have spare bandwidth the false positive rate can be increased so the remote peer
 ; gets a noisy picture of what transactions are relevant to your wallet.
 ;
 ; Instances of this class are not safe for use by multiple threads.
 ;;
#_public
(§ class BloomFilter (§ extends Message)
    ;;;
     ; The BLOOM_UPDATE_* constants control when the bloom filter is auto-updated by the peer using
     ; it as a filter, either never, for all outputs or only for pay-2-pubkey outputs (default).
     ;;
    #_public
    #_static
    #_enum
    (def BloomUpdate'values
    #{
        :BloomUpdate'UPDATE_NONE          ;; 0
        :BloomUpdate'UPDATE_ALL           ;; 1
        ;;; Only adds outpoints to the filter if the output is a pay-to-pubkey/pay-to-multisig script. ;;
        :BloomUpdate'UPDATE_P2PUBKEY_ONLY ;; 2
    })

    #_private
    (§ field- #_"byte[]" :data)
    #_private
    (§ field- #_"long" :hash-funcs)
    #_private
    (§ field- #_"long" :n-tweak)
    #_private
    (§ field- #_"byte" :n-flags)

    ;; Same value as of Bitcoin Core.
    ;; A filter of 20,000 items and a false positive rate of 0.1% or one of 10,000 items and 0.0001% is just under 36,000 bytes.
    #_private
    #_static
    (def- #_"long" BloomFilter'MAX_FILTER_SIZE 36000)
    ;; There is little reason to ever have more hash functions than 50 given a limit of 36,000 bytes.
    #_private
    #_static
    (def- #_"int" BloomFilter'MAX_HASH_FUNCS 50)

    ;;;
     ; Construct a BloomFilter by deserializing payloadBytes.
     ;;
    #_public
    #_throws #_[ "ProtocolException" ]
    (§ constructor BloomFilter [#_"NetworkParameters" params, #_"byte[]" payload]
        (§ super params, payload, 0)
        this
    )

    ;;;
     ; Constructs a filter with the given parameters which is updated on pay2pubkey outputs only.
     ;;
    #_public
    (§ constructor BloomFilter [#_"int" elements, #_"double" __falsePositiveRate, #_"long" __randomNonce]
        (§ this elements, __falsePositiveRate, __randomNonce, :BloomUpdate'UPDATE_P2PUBKEY_ONLY)
        this
    )

    ;;;
     ; Constructs a new Bloom Filter which will provide approximately the given false positive rate when the given
     ; number of elements have been inserted.  If the filter would otherwise be larger than the maximum allowed size,
     ; it will be automatically downsized to the maximum size.
     ;
     ; To check the theoretical false positive rate of a given filter, use {@link BloomFilter#getFalsePositiveRate(int)}.
     ;
     ; The anonymity of which coins are yours to any peer which you send a BloomFilter to is controlled by the
     ; false positive rate.  For reference, as of block 187,000, the total number of addresses used in the chain was
     ; roughly 4.5 million.  Thus, if you use a false positive rate of 0.001 (0.1%), there will be, on average, 4,500
     ; distinct public keys/addresses which will be thought to be yours by nodes which have your bloom filter, but
     ; which are not actually yours.  Keep in mind that a remote node can do a pretty good job estimating the order of
     ; magnitude of the false positive rate of a given filter you provide it when considering the anonymity of a given
     ; filter.
     ;
     ; In order for filtered block download to function efficiently, the number of matched transactions in any given
     ; block should be less than (with some headroom) the maximum size of the MemoryPool used by the Peer
     ; doing the downloading (default is {@link TxConfidenceTable#MAX_SIZE}).
     ; See the comment in processBlock(FilteredBlock) for more information on this restriction.
     ;
     ; randomNonce is a tweak for the hash function used to prevent some theoretical DoS attacks.
     ; It should be a random value, however secureness of the random value is of no great consequence.
     ;
     ; updateFlag is used to control filter behaviour on the server (remote node) side when it encounters a hit.
     ; See {@link BloomFilter.BloomUpdate} for a brief description of each mode.  The purpose of this flag
     ; is to reduce network round-tripping and avoid over-dirtying the filter for the most common
     ; wallet configurations.
     ;;
    #_public
    (§ constructor BloomFilter [#_"int" elements, #_"double" __falsePositiveRate, #_"long" __randomNonce, #_"BloomUpdate" __updateFlag]
        ;; The following formulas were stolen from Wikipedia's page on Bloom Filters (with the addition of min(..., MAX_...)).
        ;; Size required for a given number of elements and false-positive rate.
        (let [n (int (* (quot -1 (pow (log 2), 2)) elements (log __falsePositiveRate)))
              n (max 1, (quot (min n, (* (int BloomFilter'MAX_FILTER_SIZE) 8)) 8))]
            (§ assoc this :data (byte-array n))
            ;; Optimal number of hash functions for a given filter size and element count.
            (§ assoc this :hash-funcs (int (* (/ (* (alength (:data this)) 8) (double elements)) (log 2))))
            (§ assoc this :hash-funcs (max 1, (min (:hash-funcs this), BloomFilter'MAX_HASH_FUNCS)))
            (§ assoc this :n-tweak __randomNonce)
            (§ assoc this :n-flags (byte (& 0xff (.. __updateFlag (ordinal)))))
            this
        )
    )

    ;;;
     ; Returns the theoretical false positive rate of this filter if were to contain the given number of elements.
     ;;
    #_public
    (§ method #_"double" getFalsePositiveRate [#_"int" elements]
        (pow (- 1 (pow E, (/ (* -1.0 (:hash-funcs this) elements) (* (alength (:data this)) 8)))), (:hash-funcs this))
    )

    #_override
    #_public
    (§ method #_"String" toString []
        (str "Bloom Filter of size " (alength (:data this)) " with " (:hash-funcs this) " hash functions.")
    )

    #_override
    #_protected
    #_throws #_[ "ProtocolException" ]
    (§ method #_"void" parse []
        (§ assoc this :data (.. this (readByteArray)))
        (when (< BloomFilter'MAX_FILTER_SIZE (alength (:data this)))
            (throw (ProtocolException. "Bloom filter out of size range."))
        )
        (§ assoc this :hash-funcs (.. this (readUint32)))
        (when (< BloomFilter'MAX_HASH_FUNCS (:hash-funcs this))
            (throw (ProtocolException. "Bloom filter hash function count out of range"))
        )
        (§ assoc this :n-tweak (.. this (readUint32)))
        (§ assoc this :n-flags (aget (.. this (readBytes 1)) 0))
        (§ assoc this :length (- (:cursor this) (:offset this)))
        nil
    )

    ;;;
     ; Serializes this message to the provided stream.  If you just want the raw bytes use bitcoinSerialize().
     ;;
    #_override
    #_protected
    (§ method #_"void" bitcoinSerializeToStream [#_"ByteArrayOutputStream" baos]
        (.. baos (write (.. (VarInt. (alength (:data this))) (encode))))
        (.. baos (write (:data this)))
        (Utils'uint32ToByteStreamLE (:hash-funcs this), baos)
        (Utils'uint32ToByteStreamLE (:n-tweak this), baos)
        (.. baos (write (:n-flags this)))
        nil
    )

    #_private
    #_static
    (§ defn- #_"int" BloomFilter'rotateLeft32 [#_"int" x, #_"int" r]
        (| (<< x r) (>>> x (- 32 r)))
    )

    ;;;
     ; Applies the MurmurHash3 (x86_32) algorithm to the given data.
     ; See <a href="https://github.com/aappleby/smhasher/blob/master/src/MurmurHash3.cpp">this C++ code</a> for the original.
     ;;
    #_public
    #_static
    (§ defn #_"int" BloomFilter'murmurHash3 [#_"byte[]" data, #_"long" __nTweak, #_"int" __hashNum, #_"byte[]" object]
        (let [#_"int" h1 (int (+ (* __hashNum 0xfba4c795) __nTweak)) #_"int" c1 0xcc9e2d51 #_"int" c2 0x1b873593]

            (let [#_"int" __numBlocks (* (quot (alength object) 4) 4)]

                ;; body
                (loop-when-recur [#_"int" i 0] (< i __numBlocks) [(+ i 4)]
                    (let [#_"int" k1 (| (& 0xff (aget object i)) (<< (& 0xff (aget object (inc i))) 8) (<< (& 0xff (aget object (+ i 2))) 16) (<< (& 0xff (aget object (+ i 3))) 24))]

                        (§ ass k1 (* k1 c1))
                        (§ ass k1 (BloomFilter'rotateLeft32 k1, 15))
                        (§ ass k1 (* k1 c2))

                        (§ ass h1 (bit-xor h1 k1))
                        (§ ass h1 (BloomFilter'rotateLeft32 h1, 13))
                        (§ ass h1 (+ (* h1 5) 0xe6546b64))
                    )
                )

                (let [#_"int" k1 0 #_"int" n (& (alength object) 3)]
                    (when (< 2 n)
                        (§ ass k1 (bit-xor k1 (<< (& 0xff (aget object (+ __numBlocks 2))) 16)))
                    )
                    (when (< 1 n)
                        (§ ass k1 (bit-xor k1 (<< (& 0xff (aget object (inc __numBlocks))) 8)))
                    )
                    (when (< 0 n)
                        (§ ass k1 (bit-xor k1 (& 0xff (aget object __numBlocks))))
                        (§ ass k1 (* k1 c1))
                        (§ ass k1 (BloomFilter'rotateLeft32 k1, 15))
                        (§ ass k1 (* k1 c2))
                        (§ ass h1 (bit-xor h1 k1))
                    )

                    ;; finalization
                    (§ ass h1 (bit-xor h1 (alength object)))
                    (§ ass h1 (bit-xor h1 (>>> h1 16)))
                    (§ ass h1 (* h1 0x85ebca6b))
                    (§ ass h1 (bit-xor h1 (>>> h1 13)))
                    (§ ass h1 (* h1 0xc2b2ae35))
                    (§ ass h1 (bit-xor h1 (>>> h1 16)))

                    (int (rem (& h1 0xffffffff) (* (alength data) 8)))
                )
            )
        )
    )

    ;;;
     ; Returns true if the given object matches the filter either because it was inserted, or because we have a false-positive.
     ;;
    #_public
    #_synchronized
    (§ method #_"boolean" contains [#_"byte[]" object]
        (loop-when [#_"int" i 0] (< i (:hash-funcs this)) => true
            (recur-if (Utils'checkBitLE (:data this), (BloomFilter'murmurHash3 (:data this), (:n-tweak this), i, object)) [(inc i)] => false)
        )
    )

    ;;; Insert the given arbitrary data into the filter. ;;
    #_public
    #_synchronized
    (§ method #_"void" insert [#_"byte[]" object]
        (loop-when-recur [#_"int" i 0] (< i (:hash-funcs this)) [(inc i)]
            (Utils'setBitLE (:data this), (BloomFilter'murmurHash3 (:data this), (:n-tweak this), i, object))
        )
        nil
    )

    ;;; Inserts the given key and equivalent hashed form (for the address). ;;
    #_public
    #_synchronized
    (§ method #_"void" insert [#_"ECKey" key]
        (.. this (insert (.. key (getPubKey))))
        (.. this (insert (.. key (getPubKeyHash))))
        nil
    )

    ;;;
     ; Sets this filter to match all objects.  A Bloom filter which matches everything may seem pointless, however,
     ; it is useful in order to reduce steady state bandwidth usage when you want full blocks.  Instead of receiving
     ; all transaction data twice, you will receive the vast majority of all transactions just once, at broadcast time.
     ; Solved blocks will then be send just as Merkle trees of tx hashes, meaning a constant 32 bytes of data for each
     ; transaction instead of 100-300 bytes as per usual.
     ;;
    #_public
    #_synchronized
    (§ method #_"void" setMatchAll []
        (§ assoc this :data (byte-array [ (byte 0xff) ]))
        nil
    )

    ;;;
     ; Copies filter into this.  Filter must have the same size, hash function count and nTweak or
     ; an IllegalArgumentException will be thrown.
     ;;
    #_public
    #_synchronized
    (§ method #_"void" merge [#_"BloomFilter" filter]
        (cond (and (not (.. this (matchesAll))) (not (.. filter (matchesAll))))
            (do
                (assert-argument (and (= (alength (:data filter)) (alength (:data this))) (= (:hash-funcs filter) (:hash-funcs this)) (= (:n-tweak filter) (:n-tweak this))))

                (loop-when-recur [#_"int" i 0] (< i (alength (:data this))) [(inc i)]
                    (aset (:data this) i (| (aget (:data this) i) (aget (:data filter) i)))
                )
            )
            :else
            (do
                (§ assoc this :data (byte-array [ (byte 0xff) ]))
            )
        )
        nil
    )

    ;;;
     ; Returns true if this filter will match anything.  See {@link BloomFilter#setMatchAll()} for
     ; when this can be a useful thing to do.
     ;;
    #_public
    #_synchronized
    (§ method #_"boolean" matchesAll []
        (every? #(= % (byte 0xff)) (:data this))
    )

    ;;;
     ; The update flag controls how application of the filter to a block modifies the filter.  See
     ; the enum javadocs for information on what occurs and when.
     ;;
    #_public
    #_synchronized
    (§ method #_"BloomUpdate" getUpdateFlag []
        (case (:n-flags this)
            0 :BloomUpdate'UPDATE_NONE
            1 :BloomUpdate'UPDATE_ALL
            2 :BloomUpdate'UPDATE_P2PUBKEY_ONLY
            (throw (IllegalStateException. "Unknown flag combination"))
        )
    )

    ;;;
     ; Creates a new FilteredBlock from the given Block, using this filter to select transactions.  Matches
     ; can cause the filter to be updated with the matched element, this ensures that when a filter is applied
     ; to a block, spends of matched transactions are also matched.  However it means this filter can be mutated
     ; by the operation.  The returned filtered block already has the matched transactions associated with it.
     ;;
    #_public
    #_synchronized
    (§ method #_"FilteredBlock" applyAndUpdate [#_"Block" block]
        (let [#_"List<Transaction>" txns (.. block (getTransactions))
              #_"List<Sha256Hash>" __txHashes (ArrayList. #_"<>" (.. txns (size)))
              #_"List<Transaction>" matched (Lists/newArrayList)
              #_"byte[]" bits (byte-array (int (Math/ceil (/ (.. txns (size)) 8.0))))]
            (loop-when-recur [#_"int" i 0] (< i (.. txns (size))) [(inc i)]
                (let [#_"Transaction" tx (.. txns (get i))]
                    (.. __txHashes (add (.. tx (getHash))))
                    (when (.. this (applyAndUpdate tx))
                        (Utils'setBitLE bits, i)
                        (.. matched (add tx))
                    )
                )
            )
            (let [#_"PartialMerkleTree" pmt (PartialMerkleTree'buildFromLeaves (.. block (getParams)), bits, __txHashes)
                  #_"FilteredBlock" __filteredBlock (FilteredBlock. (.. block (getParams)), (.. block (cloneAsHeader)), pmt)]
                (doseq [#_"Transaction" transaction matched]
                    (.. __filteredBlock (provideTransaction transaction))
                )
                __filteredBlock
            )
        )
    )

    #_public
    #_synchronized
    (§ method #_"boolean" applyAndUpdate [#_"Transaction" tx]
        (or (.. this (contains (.. tx (getHash) (getBytes))))
            (let [#_"boolean" found false #_"BloomUpdate" flag (.. this (getUpdateFlag))]
                (doseq [#_"TransactionOutput" output (.. tx (getOutputs))]
                    (let [#_"Script" script (.. output (getScriptPubKey))]
                        (doseq [#_"ScriptChunk" chunk (.. script (getChunks))]
                            (when (and (.. chunk (isPushData)) (.. this (contains (:data chunk))))
                                (let [#_"boolean" __isSendingToPubKeys (or (.. script (isSentToRawPubKey)) (.. script (isSentToMultiSig)))]
                                    (when (or (= flag :BloomUpdate'UPDATE_ALL) (and (= flag :BloomUpdate'UPDATE_P2PUBKEY_ONLY) __isSendingToPubKeys))
                                        (.. this (insert (.. output (getOutPointFor) (unsafeBitcoinSerialize))))
                                    )
                                    (§ ass found true)
                                )
                            )
                        )
                    )
                )
                (or found
                    (do
                        (doseq [#_"TransactionInput" input (.. tx (getInputs))]
                            (when (.. this (contains (.. (:outpoint input) (unsafeBitcoinSerialize))))
                                (§ return true)
                            )

                            (doseq [#_"ScriptChunk" chunk (.. input (getScriptSig) (getChunks))]
                                (when (and (.. chunk (isPushData)) (.. this (contains (:data chunk))))
                                    (§ return true)
                                )
                            )
                        )
                        false
                    )
                )
            )
        )
    )

    #_override
    #_public
    #_synchronized
    (§ method #_"boolean" equals [#_"Object" o]
        (cond
            (= this o) true
            (or (nil? o) (not= (getClass) (.. o (getClass)))) false
            :else (let [#_"BloomFilter" other (cast BloomFilter o)]
                (and (= (:hash-funcs this) (:hash-funcs other)) (= (:n-tweak this) (:n-tweak other)) (Arrays/equals (:data this), (:data other)))
            )
        )
    )

    #_override
    #_public
    #_synchronized
    (§ method #_"int" hashCode []
        (Objects/hashCode (:hash-funcs this), (:n-tweak this), (Arrays/hashCode (:data this)))
    )
)

;;;
 ; Vends hard-coded {@link StoredBlock}s for blocks throughout the chain.  Checkpoints serve two purposes:
 ; <ol>
 ;    <li>They act as a safety mechanism against huge re-orgs that could rewrite large chunks of history, thus
 ;    constraining the block chain to be a consensus mechanism only for recent parts of the timeline.</li>
 ;    <li>They allow synchronization to the head of the chain for new wallets/users much faster than syncing all
 ;    headers from the genesis block.</li>
 ; </ol>
 ;
 ; Checkpoints are used by the SPV {@link BlockChain} to initialize fresh {@link SPVBlockStore}s.
 ; They are not used by fully validating mode, which instead has a different concept of checkpoints that are used
 ; to hard-code the validity of blocks that violate BIP30 (duplicate coinbase transactions).
 ; Those "checkpoints" can be found in NetworkParameters.
 ;
 ; The file format consists of the string "CHECKPOINTS 1", followed by a uint32 containing the number of signatures
 ; to read.  The value may not be larger than 256 (so it could have been a byte but isn't for historical reasons).
 ; If the number of signatures is larger than zero, each 65 byte ECDSA secp256k1 signature then follows.  The signatures
 ; sign the hash of all bytes that follow the last signature.
 ;
 ; After the signatures come an int32 containing the number of checkpoints in the file.  Then each checkpoint follows
 ; one after the other.  A checkpoint is 12 bytes for the total work done field, 4 bytes for the height, 80 bytes
 ; for the block header and then 1 zero byte at the end (i.e. number of transactions in the block: always zero).
 ;;
#_public
(§ class CheckpointManager
    #_private
    #_static
    (def- #_"Logger" CheckpointManager'log (LoggerFactory/getLogger CheckpointManager))

    #_private
    #_static
    (def- #_"int" CheckpointManager'MAX_SIGNATURES 256)

    ;; Map of block header time to data.
    #_protected
    (§ field #_"TreeMap<Long, StoredBlock>" :checkpoints (TreeMap. #_"<>"))

    #_protected
    (§ field #_"NetworkParameters" :params)
    #_protected
    (§ field #_"Sha256Hash" :data-hash)

    #_public
    #_static
    (def #_"BaseEncoding" CheckpointManager'BASE64 (.. (BaseEncoding/base64) (omitPadding)))

    ;;; Loads the default checkpoints bundled with bitcoinj. ;;
    #_public
    #_throws #_[ "IOException" ]
    (§ constructor CheckpointManager [#_"Context" context]
        (§ this (.. context (getParams)), nil)
        this
    )

    ;;; Loads the checkpoints from the given stream. ;;
    #_public
    #_throws #_[ "IOException" ]
    (§ constructor CheckpointManager [#_"NetworkParameters" params, #_nilable #_"String[]" checkpoints]
        (§ assoc this :params (ensure some? params))
        (let [checkpoints (or checkpoints (:textual-checkpoints params))]
            (ensure some? checkpoints)
            (§ assoc this :data-hash (.. this (readTextual checkpoints)))
            this
        )
    )

    #_private
    #_throws #_[ "IOException" ]
    (§ method- #_"Sha256Hash" readTextual [#_"String[]" checkpoints]
        (let [#_"Hasher" hasher (.. (Hashing/sha256) (newHasher)) #_"int" n (alength checkpoints)]
            (assert-state (< 0 n))
            (.. hasher (putBytes (.. (ByteBuffer/allocate 4) (order ByteOrder/BIG_ENDIAN) (putInt n) (array))))
            (let [#_"ByteBuffer" buffer (ByteBuffer/allocate StoredBlock'COMPACT_SERIALIZED_SIZE)]
                (loop-when-recur [#_"int" i 0] (< i n) [(inc i)]
                    (let [#_"byte[]" bytes (.. CheckpointManager'BASE64 (decode (aget checkpoints i)))]
                        (.. hasher (putBytes bytes))
                        (.. buffer (position 0))
                        (.. buffer (put bytes))
                        (.. buffer (position 0))
                        (let [#_"StoredBlock" block (StoredBlock'deserializeCompact (:params this), buffer)]
                            (.. (:checkpoints this) (put (.. block (getHeader) (getTimeSeconds)), block))
                        )
                    )
                )
                (let [#_"HashCode" hash (.. hasher (hash))]
                    (.. CheckpointManager'log (info "Read {} checkpoints, hash is {}", (.. (:checkpoints this) (size)), hash))
                    (Sha256Hash'wrap (.. hash (asBytes)))
                )
            )
        )
    )

    ;;;
     ; Returns a {@link StoredBlock} representing the last checkpoint before the given time, for example, normally
     ; you would want to know the checkpoint before the earliest wallet birthday.
     ;;
    #_public
    (§ method #_"StoredBlock" getCheckpointBefore [#_"long" time]
        (try
            (assert-argument (< (.. (-> this :params :genesis-block) (getTimeSeconds)) time))
            ;; This is thread safe because the map never changes after creation.
            (let [#_"Map.Entry<Long, StoredBlock>" entry (.. (:checkpoints this) (floorEntry time))]
                (if (some? entry)
                    (.. entry (getValue))
                    (let [#_"Block" genesis (.. (-> this :params :genesis-block) (cloneAsHeader))]
                        (StoredBlock. genesis, (.. genesis (getWork)), 0)
                    )
                )
            )
            (catch VerificationException e
                (throw (RuntimeException. e)) ;; Cannot happen.
            )
        )
    )

    ;;; Returns the number of checkpoints that were loaded. ;;
    #_public
    (§ method #_"int" numCheckpoints []
        (.. (:checkpoints this) (size))
    )

    ;;; Returns a hash of the concatenated checkpoint data. ;;
    #_public
    (§ method #_"Sha256Hash" getDataHash []
        (:data-hash this)
    )

    ;;;
     ; Convenience method that creates a CheckpointManager, loads the given data, gets the checkpoint for the given
     ; time, then inserts it into the store and sets that to be the chain head.  Useful when you have just created
     ; a new store from scratch and want to use configure it all in one go.
     ;
     ; Note that time is adjusted backwards by a week to account for possible clock drift in the block headers.
     ;;
    #_public
    #_static
    #_throws #_[ "IOException", "BlockStoreException" ]
    (§ defn #_"void" CheckpointManager'checkpoint [#_"NetworkParameters" params, #_"String[]" checkpoints, #_"BlockStore" store, #_"long" time]
        (ensure some? params)
        (ensure some? store)
        (assert-argument (not (instance? FullPrunedBlockStore store)), "You cannot use checkpointing with a full store.")

        (let [time (- time (* 86400 7))]
            (assert-argument (< 0 time))

            (.. CheckpointManager'log (info "Attempting to initialize a new block store with a checkpoint for time {} ({})", time, (Utils'dateTimeFormat (* time 1000))))

            (let [#_"StoredBlock" checkpoint (.. (CheckpointManager. params, checkpoints) (getCheckpointBefore time))]
                (.. store (put checkpoint))
                (.. store (setChainHead checkpoint))
            )
        )
        nil
    )
)

;;;
 ; Represents a Message type that can be contained within another Message.  ChildMessages that have a cached
 ; backing byte array need to invalidate their parent's caches as well as their own if they are modified.
 ;
 ; Instances of this class are not safe for use by multiple threads.
 ;;
#_public
#_abstract
(§ class ChildMessage (§ extends Message)
    #_nilable
    #_protected
    (§ field #_"Message" :parent)

    #_public
    (§ constructor ChildMessage [#_"NetworkParameters" params]
        (§ super params)
        this
    )

    #_public
    #_throws #_[ "ProtocolException" ]
    (§ constructor ChildMessage [#_"NetworkParameters" params, #_"byte[]" payload, #_"int" offset, #_"int" __protocolVersion]
        (§ super params, payload, offset, __protocolVersion)
        this
    )

    #_public
    #_throws #_[ "ProtocolException" ]
    (§ constructor ChildMessage [#_"NetworkParameters" params, #_"byte[]" payload, #_"int" offset, #_"int" __protocolVersion, #_"Message" parent, #_"BitcoinSerializer" __setSerializer, #_"int" length]
        (§ super params, payload, offset, __protocolVersion, __setSerializer, length)
        (§ assoc this :parent parent)
        this
    )

    #_public
    #_throws #_[ "ProtocolException" ]
    (§ constructor ChildMessage [#_"NetworkParameters" params, #_"byte[]" payload, #_"int" offset]
        (§ super params, payload, offset)
        this
    )

    #_public
    #_throws #_[ "ProtocolException" ]
    (§ constructor ChildMessage [#_"NetworkParameters" params, #_"byte[]" payload, #_"int" offset, #_nilable #_"Message" parent, #_"BitcoinSerializer" __setSerializer, #_"int" length]
        (§ super params, payload, offset, __setSerializer, length)
        (§ assoc this :parent parent)
        this
    )

    #_public
    (§ method #_"void" setParent [#_nilable #_"Message" parent]
        (when (and (some? (:parent this)) (not= (:parent this) parent) (some? parent))
            ;; After old parent is unlinked it won't be able to receive notice if this ChildMessage changes internally.
            ;; To be safe we invalidate the parent cache to ensure it rebuilds manually on serialization.
            (.. (:parent this) (unCache))
        )
        (§ assoc this :parent parent)
        nil
    )

    #_override
    #_protected
    (§ method #_"void" unCache []
        (.. super (unCache))
        (when (some? (:parent this))
            (.. (:parent this) (unCache))
        )
        nil
    )

    #_protected
    (§ method #_"void" adjustLength [#_"int" adjustment]
        (.. this (adjustLength 0, adjustment))
        nil
    )

    #_override
    #_protected
    (§ method #_"void" adjustLength [#_"int" __newArraySize, #_"int" adjustment]
        (.. super (adjustLength __newArraySize, adjustment))
        (when (some? (:parent this))
            (.. (:parent this) (adjustLength __newArraySize, adjustment))
        )
        nil
    )
)

;;;
 ; Represents a monetary Bitcoin value.  This class is immutable.
 ;;
#_public
(§ class Coin (§ implements Monetary, Comparable #_"<Coin>")
    ;;;
     ; Number of decimals for one Bitcoin.  This constant is useful for quick adapting to other coins because a lot of
     ; constants derive from it.
     ;;
    #_public
    #_static
    (def #_"int" Coin'SMALLEST_UNIT_EXPONENT 8)

    ;;;
     ; The number of satoshis equal to one bitcoin.
     ;;
    #_private
    #_static
    (def- #_"long" Coin'COIN_VALUE (LongMath/pow 10, Coin'SMALLEST_UNIT_EXPONENT))

    ;;;
     ; Zero Bitcoins.
     ;;
    #_public
    #_static
    (def #_"Coin" Coin'ZERO (Coin'valueOf 0))

    ;;;
     ; One Bitcoin.
     ;;
    #_public
    #_static
    (def #_"Coin" Coin'COIN (Coin'valueOf Coin'COIN_VALUE))

    ;;;
     ; 0.01 Bitcoins.  This unit is not really used much.
     ;;
    #_public
    #_static
    (def #_"Coin" Coin'CENT (.. Coin'COIN (divide 100)))

    ;;;
     ; 0.001 Bitcoins, also known as 1 mBTC.
     ;;
    #_public
    #_static
    (def #_"Coin" Coin'MILLICOIN (.. Coin'COIN (divide 1000)))

    ;;;
     ; 0.000001 Bitcoins, also known as 1 µBTC or 1 uBTC.
     ;;
    #_public
    #_static
    (def #_"Coin" Coin'MICROCOIN (.. Coin'MILLICOIN (divide 1000)))

    ;;;
     ; A satoshi is the smallest unit that can be transferred.  100 million of them fit into a Bitcoin.
     ;;
    #_public
    #_static
    (def #_"Coin" Coin'SATOSHI (Coin'valueOf 1))

    #_public
    #_static
    (def #_"Coin" Coin'FIFTY_COINS (.. Coin'COIN (multiply 50)))

    ;;;
     ; Represents a monetary value of minus one satoshi.
     ;;
    #_public
    #_static
    (def #_"Coin" Coin'NEGATIVE_SATOSHI (Coin'valueOf -1))

    ;;;
     ; The number of satoshis of this monetary value.
     ;;
    #_public
    (§ field #_"long" :value)

    #_private
    (§ constructor- Coin [#_"long" satoshis]
        (§ assoc this :value satoshis)
        this
    )

    #_public
    #_static
    (§ defn #_"Coin" Coin'valueOf [#_"long" satoshis]
        (Coin. satoshis)
    )

    #_override
    #_public
    (§ method #_"int" smallestUnitExponent []
        Coin'SMALLEST_UNIT_EXPONENT
    )

    ;;;
     ; Returns the number of satoshis of this monetary value.
     ;;
    #_override
    #_public
    (§ method #_"long" getValue []
        (:value this)
    )

    ;;;
     ; Convert an amount expressed in the way humans are used to into satoshis.
     ;;
    #_public
    #_static
    (§ defn #_"Coin" Coin'valueOf [#_"int" coins, #_"int" cents]
        (assert-argument (and (<= 0 coins) (<= 0 cents) (< cents 100)))

        (.. Coin'COIN (multiply coins) (add (.. Coin'CENT (multiply cents))))
    )

    ;;;
     ; Parses an amount expressed in the way humans are used to.
     ;
     ; This takes string in a format understood by {@link BigDecimal#BigDecimal(String)},
     ; for example "0", "1", "0.10", "1.23E3", "1234.5E-5".
     ;
     ; @throws IllegalArgumentException if you try to specify fractional satoshis, or a value out of range.
     ;;
    #_public
    #_static
    (§ defn #_"Coin" Coin'parseCoin [#_"String" s]
        (try
            (let [#_"long" satoshis (.. (BigDecimal. s) (movePointRight Coin'SMALLEST_UNIT_EXPONENT) (longValueExact))]
                (Coin'valueOf satoshis)
            )
            (catch ArithmeticException e
                (throw (IllegalArgumentException. e)) ;; Repackage exception to honor method contract.
            )
        )
    )

    ;;;
     ; Parses an amount expressed in the way humans are used to.  The amount is cut to satoshi precision.
     ;
     ; This takes string in a format understood by {@link BigDecimal#BigDecimal(String)},
     ; for example "0", "1", "0.10", "1.23E3", "1234.5E-5".
     ;
     ; @throws IllegalArgumentException if you try to specify a value out of range.
     ;;
    #_public
    #_static
    (§ defn #_"Coin" Coin'parseCoinInexact [#_"String" s]
        (try
            (let [#_"long" satoshis (.. (BigDecimal. s) (movePointRight Coin'SMALLEST_UNIT_EXPONENT) (longValue))]
                (Coin'valueOf satoshis)
            )
            (catch ArithmeticException e
                (throw (IllegalArgumentException. e)) ;; Repackage exception to honor method contract.
            )
        )
    )

    #_public
    (§ method #_"Coin" add [#_"Coin" value]
        (Coin. (LongMath/checkedAdd (:value this), (:value value)))
    )

    ;;; Alias for add. ;;
    #_public
    (§ method #_"Coin" plus [#_"Coin" value]
        (.. this (add value))
    )

    #_public
    (§ method #_"Coin" subtract [#_"Coin" value]
        (Coin. (LongMath/checkedSubtract (:value this), (:value value)))
    )

    ;;; Alias for subtract. ;;
    #_public
    (§ method #_"Coin" minus [#_"Coin" value]
        (.. this (subtract value))
    )

    #_public
    (§ method #_"Coin" multiply [#_"long" factor]
        (Coin. (LongMath/checkedMultiply (:value this), factor))
    )

    ;;; Alias for multiply. ;;
    #_public
    (§ method #_"Coin" times [#_"long" factor]
        (.. this (multiply factor))
    )

    ;;; Alias for multiply. ;;
    #_public
    (§ method #_"Coin" times [#_"int" factor]
        (.. this (multiply factor))
    )

    #_public
    (§ method #_"Coin" divide [#_"long" divisor]
        (Coin. (quot (:value this) divisor))
    )

    ;;; Alias for divide. ;;
    #_public
    (§ method #_"Coin" div [#_"long" divisor]
        (.. this (divide divisor))
    )

    ;;; Alias for divide. ;;
    #_public
    (§ method #_"Coin" div [#_"int" divisor]
        (.. this (divide divisor))
    )

    #_public
    (§ method #_"Coin[]" divideAndRemainder [#_"long" divisor]
        (into-array Coin [ (Coin. (quot (:value this) divisor)), (Coin. (rem (:value this) divisor)) ])
    )

    #_public
    (§ method #_"long" divide [#_"Coin" divisor]
        (quot (:value this) (:value divisor))
    )

    ;;;
     ; Returns true if and only if this instance represents a monetary value greater than zero,
     ; otherwise false.
     ;;
    #_public
    (§ method #_"boolean" isPositive []
        (= (.. this (signum)) 1)
    )

    ;;;
     ; Returns true if and only if this instance represents a monetary value less than zero,
     ; otherwise false.
     ;;
    #_public
    (§ method #_"boolean" isNegative []
        (= (.. this (signum)) -1)
    )

    ;;;
     ; Returns true if and only if this instance represents zero monetary value,
     ; otherwise false.
     ;;
    #_public
    (§ method #_"boolean" isZero []
        (= (.. this (signum)) 0)
    )

    ;;;
     ; Returns true if the monetary value represented by this instance is greater than that
     ; of the given other Coin, otherwise false.
     ;;
    #_public
    (§ method #_"boolean" isGreaterThan [#_"Coin" other]
        (< 0 (.. this (compareTo other)))
    )

    ;;;
     ; Returns true if the monetary value represented by this instance is less than that
     ; of the given other Coin, otherwise false.
     ;;
    #_public
    (§ method #_"boolean" isLessThan [#_"Coin" other]
        (< (.. this (compareTo other)) 0)
    )

    #_public
    (§ method #_"Coin" shiftLeft [#_"int" n]
        (Coin. (<< (:value this) n))
    )

    #_public
    (§ method #_"Coin" shiftRight [#_"int" n]
        (Coin. (>> (:value this) n))
    )

    #_override
    #_public
    (§ method #_"int" signum []
        (cond (= (:value this) 0) 0 (< (:value this) 0) -1 :else 1)
    )

    #_public
    (§ method #_"Coin" negate []
        (Coin. (- (:value this)))
    )

    ;;;
     ; Returns the number of satoshis of this monetary value.  It's deprecated in favour of accessing {@link #value} directly.
     ;;
    #_public
    (§ method #_"long" longValue []
        (:value this)
    )

    #_private
    #_static
    (def- #_"MonetaryFormat" Coin'FRIENDLY_FORMAT (.. MonetaryFormat'BTC (minDecimals 2) (repeatOptionalDecimals 1, 6) (postfixCode)))

    ;;;
     ; Returns the value as a 0.12 type string.  More digits after the decimal place will be used
     ; if necessary, but two will always be present.
     ;;
    #_public
    (§ method #_"String" toFriendlyString []
        (.. Coin'FRIENDLY_FORMAT (format this) (toString))
    )

    #_private
    #_static
    (def- #_"MonetaryFormat" Coin'PLAIN_FORMAT (.. MonetaryFormat'BTC (minDecimals 0) (repeatOptionalDecimals 1, 8) (noCode)))

    ;;;
     ; Returns the value as a plain string denominated in BTC.
     ; The result is unformatted with no trailing zeroes.
     ; For instance, a value of 150000 satoshis gives an output string of "0.0015" BTC.
     ;;
    #_public
    (§ method #_"String" toPlainString []
        (.. Coin'PLAIN_FORMAT (format this) (toString))
    )

    #_override
    #_public
    (§ method #_"String" toString []
        (Long/toString (:value this))
    )

    #_override
    #_public
    (§ method #_"boolean" equals [#_"Object" o]
        (cond
            (= this o) true
            (or (nil? o) (not= (getClass) (.. o (getClass)))) false
            :else (= (:value this) (:value (cast Coin o)))
        )
    )

    #_override
    #_public
    (§ method #_"int" hashCode []
        (int (:value this))
    )

    #_override
    #_public
    (§ method #_"int" compareTo [#_"Coin" other]
        (Longs/compare (:value this), (:value other))
    )
)

;; TODO: Finish adding Context c'tors to all the different objects so we can start deprecating the versions that take NetworkParameters.
;; TODO: Add a working directory notion to Context and make various subsystems that want to use files default to that directory (e.g. Orchid, block stores, wallet, etc).
;; TODO: Auto-register the block chain object here, and then use it in the (newly deprecated) TransactionConfidence.getDepthInBlocks() method:
;;       the new version should take an AbstractBlockChain specifically.
;;       Also use the block chain object reference from the context in PeerGroup and remove the other constructors, as it's easy to forget to wire things up.
;; TODO: Move Threading.USER_THREAD to here and leave behind just a source code stub.  Allow different instantiations of the library to use different user threads.
;; TODO: Keep a URI to where library internal data files can be found, to abstract over the lack of JAR files on Android.
;; TODO: Stash anything else that resembles global library configuration in here and use it to clean up the rest of the API without breaking people.
;; TODO: Move the TorClient into Context, so different parts of the library can read data over Tor without having to request it directly. (or maybe a general socket factory??)

;;;
 ; The Context object holds various objects and pieces of configuration that are scoped to a specific instantiation of
 ; bitcoinj for a specific network.  You can get an instance of this class through calling {@link #get()}.
 ;
 ; Context is new in 0.13 and the library is currently in a transitional period: you should create a Context that
 ; wraps your chosen network parameters before using the rest of the library.  However if you don't, things will still
 ; work as a Context will be created for you and stashed in thread local storage.  The context is then propagated between
 ; library created threads as needed.  This automagical propagation and creation is a temporary mechanism: one day it
 ; will be removed to avoid confusing edge cases that could occur if the developer does not fully understand it e.g.
 ; in the case where multiple instances of the library are in use simultaneously.
 ;;
#_public
(§ class Context
    #_private
    #_static
    (def- #_"Logger" Context'log (LoggerFactory/getLogger Context))

    #_public
    #_static
    (def #_"int" Context'DEFAULT_EVENT_HORIZON 100)

    #_private
    (§ field- #_"TxConfidenceTable" :confidence-table)
    #_private
    (§ field- #_"NetworkParameters" :params)
    #_private
    (§ field- #_"int" :event-horizon)
    #_private
    (§ field- #_"boolean" :ensure-min-required-fee)
    #_private
    (§ field- #_"Coin" :fee-per-kb)

    ;;;
     ; Creates a new context object.  For now, this will be done for you by the framework.  Eventually you will be
     ; expected to do this yourself in the same manner as fetching a NetworkParameters object (at the start of your app).
     ;
     ; @param params The network parameters that will be associated with this context.
     ;;
    #_public
    (§ constructor Context [#_"NetworkParameters" params]
        (§ this params, Context'DEFAULT_EVENT_HORIZON, Transaction'DEFAULT_TX_FEE, true)
        this
    )

    ;;;
     ; Creates a new custom context object.  This is mainly meant for unit tests for now.
     ;
     ; @param params The network parameters that will be associated with this context.
     ; @param eventHorizon Number of blocks after which the library will delete data and be unable to always process reorgs (see {@link #getEventHorizon()}).
     ; @param feePerKb The default fee per 1000 bytes of transaction data to pay when completing transactions.  For details, see {@link SendRequest#feePerKb}.
     ; @param ensureMinRequiredFee Whether to ensure the minimum required fee by default when completing transactions.  For details, see {@link SendRequest#ensureMinRequiredFee}.
     ;;
    #_public
    (§ constructor Context [#_"NetworkParameters" params, #_"int" __eventHorizon, #_"Coin" __feePerKb, #_"boolean" __ensureMinRequiredFee]
        (.. Context'log (info "Creating bitcoinj {} context.", VersionMessage'BITCOINJ_VERSION))
        (§ assoc this :confidence-table (TxConfidenceTable.))
        (§ assoc this :params params)
        (§ assoc this :event-horizon __eventHorizon)
        (§ assoc this :ensure-min-required-fee __ensureMinRequiredFee)
        (§ assoc this :fee-per-kb __feePerKb)
        (§ ass Context'LAST_CONSTRUCTED this)
        (.. Context'SLOT (set this))
        this
    )

    #_private
    #_static
    #_volatile
    (def- #_"Context" Context'LAST_CONSTRUCTED)
    #_private
    #_static
    (def- #_"boolean" Context'IS_STRICT_MODE)
    #_private
    #_static
    (def- #_"ThreadLocal<Context>" Context'SLOT (ThreadLocal. #_"<>"))

    ;;;
     ; Returns the current context that is associated with the <b>calling thread</b>.  BitcoinJ is an API that has thread
     ; affinity: much like OpenGL it expects each thread that accesses it to have been configured with a global Context
     ; object.  This method returns that.  Note that to help you develop, this method will <i>also</i> propagate whichever
     ; context was created last onto the current thread, if it's missing.  However it will print an error when doing so
     ; because propagation of contexts is meant to be done manually: this is so two libraries or subsystems that
     ; independently use bitcoinj (or possibly alt coin forks of it) can operate correctly.
     ;
     ; @throws IllegalStateException if no context exists at all or if we are in strict mode and there is no context.
     ;;
    #_public
    #_static
    (§ defn #_"Context" Context'get []
        (or (.. Context'SLOT (get))
            (do
                (when Context'IS_STRICT_MODE
                    (.. Context'log (error "Thread is missing a bitcoinj context."))
                    (.. Context'log (error "You should use Context.propagate() or a ContextPropagatingThreadFactory."))
                    (throw (IllegalStateException. "missing context"))
                )
                (when (nil? Context'LAST_CONSTRUCTED)
                    (throw (IllegalStateException. "You must construct a Context object before using bitcoinj!"))
                )
                (.. Context'SLOT (set Context'LAST_CONSTRUCTED))
                (.. Context'log (error "Performing thread fixup: you are accessing bitcoinj via a thread that has not had any context set on it."))
                (.. Context'log (error "This error has been corrected for, but doing this makes your app less robust."))
                (.. Context'log (error "You should use Context.propagate() or a ContextPropagatingThreadFactory."))
                (.. Context'log (error "Please refer to the user guide for more information about this."))
                (.. Context'log (error "Thread name is {}.", (.. (Thread/currentThread) (getName))))
                ;; TODO: Actually write the user guide section about this.
                Context'LAST_CONSTRUCTED
            )
        )
    )

    ;;;
     ; Require that new threads use {@link #propagate(Context)} or {@link ContextPropagatingThreadFactory},
     ; rather than using a heuristic for the desired context.
     ;;
    #_public
    #_static
    (§ defn #_"void" Context'enableStrictMode []
        (§ ass Context'IS_STRICT_MODE true)
        nil
    )

    ;; A temporary internal shim designed to help us migrate internally in a way that doesn't wreck source compatibility.
    #_public
    #_static
    (§ defn #_"Context" Context'getOrCreate [#_"NetworkParameters" params]
        (let [#_"Context" context]
            (try
                (§ ass context (Context'get))
                (catch IllegalStateException e
                    (.. Context'log (warn "Implicitly creating context. This is a migration step and this message will eventually go away."))
                    (§ return (Context. params))
                )
            )
            (when-not (= (.. context (getParams)) params)
                (throw (IllegalStateException. (str "Context does not match implicit network params: " (.. context (getParams)) " vs " params)))
            )
            context
        )
    )

    ;;;
     ; Sets the given context as the current thread context.  You should use this if you create your own threads that
     ; want to create core BitcoinJ objects.  Generally, if a class can accept a Context in its constructor and might
     ; be used (even indirectly) by a thread, you will want to call this first.  Your task may be simplified by using
     ; a {@link ContextPropagatingThreadFactory}.
     ;;
    #_public
    #_static
    (§ defn #_"void" Context'propagate [#_"Context" context]
        (.. Context'SLOT (set (ensure some? context)))
        nil
    )

    ;;;
     ; Returns the {@link TxConfidenceTable} created by this context.  The pool tracks advertised and downloaded
     ; transactions so their confidence can be measured as a proportion of how many peers announced it.
     ; With an un-tampered with internet connection, the more peers announce a transaction the more confidence
     ; you can have that it's really valid.
     ;;
    #_public
    (§ method #_"TxConfidenceTable" getConfidenceTable []
        (:confidence-table this)
    )

    ;;;
     ; Returns the {@link NetworkParameters} specified when this context was (auto) created.  The network parameters
     ; defines various hard coded constants for a specific instance of a Bitcoin network, such as main net, testnet, etc.
     ;;
    #_public
    (§ method #_"NetworkParameters" getParams []
        (:params this)
    )

    ;;;
     ; The event horizon is the number of blocks after which various bits of the library consider a transaction to be
     ; so confirmed that it's safe to delete data.  Re-orgs larger than the event horizon will not be correctly
     ; processed, so the default value is high (100).
     ;;
    #_public
    (§ method #_"int" getEventHorizon []
        (:event-horizon this)
    )

    ;;;
     ; The default fee per 1000 bytes of transaction data to pay when completing transactions.
     ; For details, see {@link SendRequest#feePerKb}.
     ;;
    #_public
    (§ method #_"Coin" getFeePerKb []
        (:fee-per-kb this)
    )

    ;;;
     ; Whether to ensure the minimum required fee by default when completing transactions.
     ; For details, see {@link SendRequest#ensureMinRequiredFee}.
     ;;
    #_public
    (§ method #_"boolean" isEnsureMinRequiredFee []
        (:ensure-min-required-fee this)
    )
)

;;;
 ; Represents an elliptic curve public and (optionally) private key, usable for digital signatures but not encryption.
 ; Creating a new ECKey with the empty constructor will generate a new random keypair.  Other static methods can be used
 ; when you already have the public or private parts.  If you create a key with only the public part, you can check
 ; signatures but not create them.
 ;
 ; ECKey also provides access to Bitcoin Core compatible text message signing, as accessible via the UI or JSON-RPC.
 ; This is slightly different to signing raw bytes - if you want to sign your own data and it won't be exposed as
 ; text to people, you don't want to use this.  If in doubt, ask on the mailing list.
 ;
 ; The ECDSA algorithm supports <i>key recovery</i> in which a signature plus a couple of discriminator bits can
 ; be reversed to find the public key used to calculate it.  This can be convenient when you have a message and a
 ; signature and want to find out who signed it, rather than requiring the user to provide the expected identity.
 ;
 ; This class supports a variety of serialization forms.  The methods that accept/return byte arrays serialize
 ; private keys as raw byte arrays and public keys using the SEC standard byte encoding for public keys.  Signatures
 ; are encoded using ASN.1/DER inside the Bitcoin protocol.
 ;
 ; A key can be <i>compressed</i> or <i>uncompressed</i>.  This refers to whether the public key is represented
 ; when encoded into bytes as an (x, y) coordinate on the elliptic curve, or whether it's represented as just an X
 ; co-ordinate and an extra byte that carries a sign bit.  With the latter form the Y coordinate can be calculated
 ; dynamically, however, <b>because the binary serialization is different the address of a key changes if its
 ; compression status is changed</b>.  If you deviate from the defaults it's important to understand this: money sent
 ; to a compressed version of the key will have a different address to the same key in uncompressed form.  Whether
 ; a public key is compressed or not is recorded in the SEC binary serialisation format, and preserved in a flag in
 ; this class so round-tripping preserves state.  Unless you're working with old software or doing unusual things, you
 ; can usually ignore the compressed/uncompressed distinction.
 ;;
#_public
(§ class ECKey (§ implements EncryptableItem)
    #_private
    #_static
    (def- #_"Logger" ECKey'log (LoggerFactory/getLogger ECKey))

    ;;; Sorts oldest keys first, newest last. ;;
    #_public
    #_static
    (def #_"Comparator<ECKey>" ECKey'AGE_COMPARATOR (Comparator. #_"<ECKey>"
        (§ anon
            #_override
            #_public
            (§ method #_"int" compare [#_"ECKey" k1, #_"ECKey" k2]
                (let [t1 (:creation-time-seconds k1) t2 (:creation-time-seconds k2)]
                    (cond (= t1 t2) 0 (< t1 t2) -1 :else 1)
                )
            )
        )))

    ;;; Compares pub key bytes using {@link com.google.common.primitives.UnsignedBytes#lexicographicalComparator()}. ;;
    #_public
    #_static
    (def #_"Comparator<ECKey>" ECKey'PUBKEY_COMPARATOR (Comparator. #_"<ECKey>"
        (§ anon
            #_private
            (§ field- #_"Comparator<byte[]>" :comparator (UnsignedBytes/lexicographicalComparator))

            #_override
            #_public
            (§ method #_"int" compare [#_"ECKey" k1, #_"ECKey" k2]
                (.. (:comparator this) (compare (.. k1 (getPubKey)), (.. k2 (getPubKey))))
            )
        )))

    ;; The parameters of the secp256k1 curve that Bitcoin uses.
    #_private
    #_static
    (def- #_"X9ECParameters" ECKey'CURVE_PARAMS (CustomNamedCurves/getByName "secp256k1"))

    #_static
    (§ block
        ;; Tell Bouncy Castle to precompute data that's needed during secp256k1 calculations.  Increasing the width
        ;; number makes calculations faster, but at a cost of extra memory usage and with decreasing returns.  12 was
        ;; picked after consulting with the BC team.
        (FixedPointUtil/precompute (.. ECKey'CURVE_PARAMS (getG)), 12)
    )

    ;;; The parameters of the secp256k1 curve that Bitcoin uses. ;;
    #_public
    #_static
    (def #_"ECDomainParameters" ECKey'CURVE (ECDomainParameters. (.. ECKey'CURVE_PARAMS (getCurve)), (.. ECKey'CURVE_PARAMS (getG)), (.. ECKey'CURVE_PARAMS (getN)), (.. ECKey'CURVE_PARAMS (getH))))

    ;;;
     ; Equal to CURVE.getN().shiftRight(1), used for canonicalising the S value of a signature.
     ; If you aren't sure what this is about, you can ignore it.
     ;;
    #_public
    #_static
    (def #_"BigInteger" ECKey'HALF_CURVE_ORDER (.. ECKey'CURVE_PARAMS (getN) (shiftRight 1)))

    #_private
    #_static
    (def- #_"SecureRandom" ECKey'SECURE_RANDOM (SecureRandom.))

    ;; The two parts of the key.  If "priv" is set, "pub" can always be calculated.  If "pub" is set but not "priv", we
    ;; can only verify signatures not make them.
    #_protected
    (§ field #_"BigInteger" :priv) ;; A field element.
    #_protected
    (§ field #_"LazyECPoint" :pub)

    ;; Creation time of the key in seconds since the epoch, or zero if the key was deserialized from a version that did
    ;; not have this field.
    #_protected
    (§ field #_"long" :creation-time-seconds)

    #_private
    (§ field- #_"byte[]" :pub-key-hash)

    ;;;
     ; Generates an entirely new keypair.  Point compression is used so the resulting public key will be 33 bytes
     ; (32 for the co-ordinate and 1 byte to represent the y bit).
     ;;
    #_public
    (§ constructor ECKey []
        (§ this ECKey'SECURE_RANDOM)
        this
    )

    ;;;
     ; Generates an entirely new keypair with the given {@link SecureRandom} object.  Point compression is used so
     ; the resulting public key will be 33 bytes (32 for the co-ordinate and 1 byte to represent the y bit).
     ;;
    #_public
    (§ constructor ECKey [#_"SecureRandom" __secureRandom]
        (let [#_"ECKeyPairGenerator" generator (ECKeyPairGenerator.)
              #_"ECKeyGenerationParameters" __keygenParams (ECKeyGenerationParameters. ECKey'CURVE, __secureRandom)]
            (.. generator (init __keygenParams))
            (let [#_"AsymmetricCipherKeyPair" keypair (.. generator (generateKeyPair))
                  #_"ECPrivateKeyParameters" __privParams (cast ECPrivateKeyParameters (.. keypair (getPrivate)))
                  #_"ECPublicKeyParameters" __pubParams (cast ECPublicKeyParameters (.. keypair (getPublic)))]
                (§ assoc this :priv (.. __privParams (getD)))
                (§ assoc this :pub (LazyECPoint. (.. ECKey'CURVE (getCurve)), (.. __pubParams (getQ) (getEncoded true))))
                (§ assoc this :creation-time-seconds (Utils'currentTimeSeconds))
                this
            )
        )
    )

    #_protected
    (§ constructor ECKey [#_nilable #_"BigInteger" priv, #_"ECPoint" pub]
        (§ this priv, (LazyECPoint. (ensure some? pub)))
        this
    )

    #_protected
    (§ constructor ECKey [#_nilable #_"BigInteger" priv, #_"LazyECPoint" pub]
        (when (some? priv)
            (assert-argument (<= (.. priv (bitLength)) (<< 32 3)), "private key exceeds 32 bytes: {} bits", (.. priv (bitLength)))
            ;; Try and catch buggy callers or bad key imports, etc.  Zero and one are special because these are often
            ;; used as sentinel values and because scripting languages have a habit of auto-casting true and false to
            ;; 1 and 0 or vice-versa.  Type confusion bugs could therefore result in private keys with these values.
            (assert-argument (not (.. priv (equals BigInteger/ZERO))))
            (assert-argument (not (.. priv (equals BigInteger/ONE))))
        )
        (§ assoc this :priv priv)
        (§ assoc this :pub (ensure some? pub))
        this
    )

    ;;;
     ; Utility for compressing an elliptic curve point.  Returns the same point if it's already compressed.
     ; See the ECKey class docs for a discussion of point compression.
     ;;
    #_public
    #_static
    (§ defn #_"ECPoint" ECKey'compressPoint [#_"ECPoint" point]
        (ECKey'getPointWithCompression point, true)
    )

    #_public
    #_static
    (§ defn #_"LazyECPoint" ECKey'compressPoint [#_"LazyECPoint" point]
        (if (.. point (isCompressed)) point (LazyECPoint. (ECKey'compressPoint (.. point (get)))))
    )

    ;;;
     ; Utility for decompressing an elliptic curve point.  Returns the same point if it's already compressed.
     ; See the ECKey class docs for a discussion of point compression.
     ;;
    #_public
    #_static
    (§ defn #_"ECPoint" ECKey'decompressPoint [#_"ECPoint" point]
        (ECKey'getPointWithCompression point, false)
    )

    #_public
    #_static
    (§ defn #_"LazyECPoint" ECKey'decompressPoint [#_"LazyECPoint" point]
        (if (not (.. point (isCompressed))) point (LazyECPoint. (ECKey'decompressPoint (.. point (get)))))
    )

    #_private
    #_static
    (§ defn- #_"ECPoint" ECKey'getPointWithCompression [#_"ECPoint" point, #_"boolean" compressed]
        (if (= (.. point (isCompressed)) compressed)
            point
            (let [point (.. point (normalize))
                  #_"BigInteger" x (.. point (getAffineXCoord) (toBigInteger))
                  #_"BigInteger" y (.. point (getAffineYCoord) (toBigInteger))]
                (.. ECKey'CURVE (getCurve) (createPoint x, y, compressed))
            )
        )
    )

    ;;;
     ; Creates an ECKey given the private key only.  The public key is calculated from it (this is slow).  The resulting
     ; public key is compressed.
     ;;
    #_public
    #_static
    (§ defn #_"ECKey" ECKey'fromPrivate [#_"BigInteger" __privKey]
        (ECKey'fromPrivate __privKey, true)
    )

    ;;;
     ; Creates an ECKey given the private key only.  The public key is calculated from it (this is slow), either
     ; compressed or not.
     ;;
    #_public
    #_static
    (§ defn #_"ECKey" ECKey'fromPrivate [#_"BigInteger" __privKey, #_"boolean" compressed]
        (let [#_"ECPoint" point (ECKey'publicPointFromPrivate __privKey)]
            (ECKey. __privKey, (ECKey'getPointWithCompression point, compressed))
        )
    )

    ;;;
     ; Creates an ECKey given the private key only.  The public key is calculated from it (this is slow).  The resulting
     ; public key is compressed.
     ;;
    #_public
    #_static
    (§ defn #_"ECKey" ECKey'fromPrivate [#_"byte[]" __privKeyBytes]
        (ECKey'fromPrivate (BigInteger. 1, __privKeyBytes))
    )

    ;;;
     ; Creates an ECKey given the private key only.  The public key is calculated from it (this is slow), either
     ; compressed or not.
     ;;
    #_public
    #_static
    (§ defn #_"ECKey" ECKey'fromPrivate [#_"byte[]" __privKeyBytes, #_"boolean" compressed]
        (ECKey'fromPrivate (BigInteger. 1, __privKeyBytes), compressed)
    )

    ;;;
     ; Creates an ECKey that simply trusts the caller to ensure that point is really the result of multiplying the
     ; generator point by the private key.  This is used to speed things up when you know you have the right values
     ; already.  The compression state of pub will be preserved.
     ;;
    #_public
    #_static
    (§ defn #_"ECKey" ECKey'fromPrivateAndPrecalculatedPublic [#_"BigInteger" priv, #_"ECPoint" pub]
        (ECKey. priv, pub)
    )

    ;;;
     ; Creates an ECKey that simply trusts the caller to ensure that point is really the result of multiplying the
     ; generator point by the private key.  This is used to speed things up when you know you have the right values
     ; already.  The compression state of the point will be preserved.
     ;;
    #_public
    #_static
    (§ defn #_"ECKey" ECKey'fromPrivateAndPrecalculatedPublic [#_"byte[]" priv, #_"byte[]" pub]
        (ensure some? priv)
        (ensure some? pub)
        (ECKey. (BigInteger. 1, priv), (.. ECKey'CURVE (getCurve) (decodePoint pub)))
    )

    ;;;
     ; Creates an ECKey that cannot be used for signing, only verifying signatures, from the given point.
     ; The compression state of pub will be preserved.
     ;;
    #_public
    #_static
    (§ defn #_"ECKey" ECKey'fromPublicOnly [#_"ECPoint" pub]
        (ECKey. nil, pub)
    )

    ;;;
     ; Creates an ECKey that cannot be used for signing, only verifying signatures, from the given encoded point.
     ; The compression state of pub will be preserved.
     ;;
    #_public
    #_static
    (§ defn #_"ECKey" ECKey'fromPublicOnly [#_"byte[]" pub]
        (ECKey. nil, (.. ECKey'CURVE (getCurve) (decodePoint pub)))
    )

    ;;;
     ; Returns a copy of this key, but with the public point represented in uncompressed form.  Normally you would
     ; never need this: it's for specialised scenarios or when backwards compatibility in encoded form is necessary.
     ;;
    #_public
    (§ method #_"ECKey" decompress []
        (if (.. (:pub this) (isCompressed)) (ECKey. (:priv this), (ECKey'decompressPoint (.. (:pub this) (get)))) this)
    )

    ;;;
     ; Creates an ECKey given only the private key bytes.  This is the same as using the BigInteger constructor, but
     ; is more convenient if you are importing a key from elsewhere.  The public key will be automatically derived
     ; from the private key.
     ;;
    #_deprecated
    #_public
    (§ constructor ECKey [#_nilable #_"byte[]" __privKeyBytes, #_nilable #_"byte[]" __pubKey]
        (§ this (when (some? __privKeyBytes) (BigInteger. 1, __privKeyBytes)), __pubKey)
        this
    )

    ;;;
     ; Creates an ECKey given either the private key only, the public key only, or both.  If only the private key
     ; is supplied, the public key will be calculated from it (this is slow).  If both are supplied, it's assumed
     ; the public key already correctly matches the private key.  If only the public key is supplied, this ECKey
     ; cannot be used for signing.
     ;
     ; @param compressed If set to true and pubKey is null, the derived public key will be in compressed form.
     ;;
    #_deprecated
    #_public
    (§ constructor ECKey [#_nilable #_"BigInteger" __privKey, #_nilable #_"byte[]" __pubKey, #_"boolean" compressed]
        (when (and (nil? __privKey) (nil? __pubKey))
            (throw (IllegalArgumentException. "ECKey requires at least private or public key"))
        )
        (§ assoc this :priv __privKey)
        (cond (nil? __pubKey)
            (do
                ;; Derive public from private.
                (let [#_"ECPoint" point (ECKey'publicPointFromPrivate __privKey) point (ECKey'getPointWithCompression point, compressed)]
                    (§ assoc this :pub (LazyECPoint. point))
                )
            )
            :else
            (do
                ;; We expect the pubkey to be in regular encoded form, just as a BigInteger.
                ;; Therefore the first byte is a special marker byte.
                ;; TODO: This is probably not a useful API and may be confusing.
                (§ assoc this :pub (LazyECPoint. (.. ECKey'CURVE (getCurve)), __pubKey))
            )
        )
        this
    )

    ;;;
     ; Creates an ECKey given either the private key only, the public key only, or both.  If only the private key
     ; is supplied, the public key will be calculated from it (this is slow).  If both are supplied, it's assumed
     ; the public key already correctly matches the public key.  If only the public key is supplied, this ECKey cannot
     ; be used for signing.
     ;;
    #_deprecated
    #_private
    (§ constructor- ECKey [#_nilable #_"BigInteger" __privKey, #_nilable #_"byte[]" __pubKey]
        (§ this __privKey, __pubKey, false)
        this
    )

    ;;;
     ; Returns true if this key doesn't have unencrypted access to private key bytes.  This may be because
     ; it was never given any private key bytes to begin with (a watching key), or because the key is encrypted.
     ; You can use {@link #isEncrypted()} to tell the cases apart.
     ;;
    #_public
    (§ method #_"boolean" isPubKeyOnly []
        (nil? (:priv this))
    )

    ;;;
     ; Returns true if this key has unencrypted access to private key bytes.
     ; Does the opposite of {@link #isPubKeyOnly()}.
     ;;
    #_public
    (§ method #_"boolean" hasPrivKey []
        (some? (:priv this))
    )

    ;;; Returns true if this key is watch only, meaning it has a public key but no private key. ;;
    #_public
    (§ method #_"boolean" isWatching []
        (.. this (isPubKeyOnly))
    )

    ;;;
     ; Returns public key bytes from the given private key.  To convert a byte array into a BigInteger, use <tt>new BigInteger(1, bytes)</tt>.
     ;;
    #_public
    #_static
    (§ defn #_"byte[]" ECKey'publicKeyFromPrivate [#_"BigInteger" __privKey, #_"boolean" compressed]
        (.. (ECKey'publicPointFromPrivate __privKey) (getEncoded compressed))
    )

    ;;;
     ; Returns public key point from the given private key.  To convert a byte array into a BigInteger, use <tt>new BigInteger(1, bytes)</tt>.
     ;;
    #_public
    #_static
    (§ defn #_"ECPoint" ECKey'publicPointFromPrivate [#_"BigInteger" __privKey]
        ;;
         ; TODO: FixedPointCombMultiplier currently doesn't support scalars longer than the group order,
         ; but that could change in future versions.
         ;;
        (when (< (.. ECKey'CURVE (getN) (bitLength)) (.. __privKey (bitLength)))
            (§ ass __privKey (.. __privKey (mod (.. ECKey'CURVE (getN)))))
        )

        (.. (FixedPointCombMultiplier.) (multiply (.. ECKey'CURVE (getG)), __privKey))
    )

    ;;; Gets the hash160 form of the public key (as seen in addresses). ;;
    #_public
    (§ method #_"byte[]" getPubKeyHash []
        (when (nil? (:pub-key-hash this))
            (§ assoc this :pub-key-hash (Utils'sha256hash160 (.. (:pub this) (getEncoded))))
        )

        (:pub-key-hash this)
    )

    ;;;
     ; Gets the raw public key value.  This appears in transaction scriptSigs.  Note that this is <b>not</b> the same
     ; as the pubKeyHash/address.
     ;;
    #_public
    (§ method #_"byte[]" getPubKey []
        (.. (:pub this) (getEncoded))
    )

    ;;; Gets the public key in the form of an elliptic curve point object from Bouncy Castle. ;;
    #_public
    (§ method #_"ECPoint" getPubKeyPoint []
        (.. (:pub this) (get))
    )

    ;;;
     ; Gets the private key in the form of an integer field element.  The public key is derived by performing EC
     ; point addition this number of times (i.e. point multiplying).
     ;
     ; @throws IllegalStateException if the private key bytes are not available.
     ;;
    #_public
    (§ method #_"BigInteger" getPrivKey []
        (when (nil? (:priv this))
            (throw (MissingPrivateKeyException.))
        )

        (:priv this)
    )

    ;;;
     ; Returns whether this key is using the compressed form or not.  Compressed pubkeys are only 33 bytes, not 64.
     ;;
    #_public
    (§ method #_"boolean" isCompressed []
        (.. (:pub this) (isCompressed))
    )

    ;;;
     ; Returns the address that corresponds to the public part of this ECKey.  Note that an address is derived from
     ; the RIPEMD-160 hash of the public key and is not the public key itself (which is too large to be convenient).
     ;;
    #_public
    (§ method #_"Address" toAddress [#_"NetworkParameters" params]
        (Address. params, (.. this (getPubKeyHash)))
    )

    ;;;
     ; Groups the two components that make up a signature, and provides a way to encode to DER form, which is
     ; how ECDSA signatures are represented when embedded in other data structures in the Bitcoin protocol.
     ; The raw components can be useful for doing further EC maths on them.
     ;;
    #_public
    #_static
    (§ class ECDSASignature
        ;;; The two components of the signature. ;;
        #_public
        (§ field #_"BigInteger" :r)
        #_public
        (§ field #_"BigInteger" :s)

        ;;;
         ; Constructs a signature with the given components.  Does NOT automatically canonicalise the signature.
         ;;
        #_public
        (§ constructor ECDSASignature [#_"BigInteger" r, #_"BigInteger" s]
            (§ assoc this :r r)
            (§ assoc this :s s)
            this
        )

        ;;;
         ; Returns true if the S component is "low", that means it is below {@link ECKey#HALF_CURVE_ORDER}.  See
         ; <a href="https://github.com/bitcoin/bips/blob/master/bip-0062.mediawiki#Low_S_values_in_signatures">BIP62</a>.
         ;;
        #_public
        (§ method #_"boolean" isCanonical []
            (<= (.. (:s this) (compareTo ECKey'HALF_CURVE_ORDER)) 0)
        )

        ;;;
         ; Will automatically adjust the S component to be less than or equal to half the curve order, if necessary.
         ; This is required because for every signature (r, s) the signature (r, -s (mod N)) is a valid signature of
         ; the same message.  However, we dislike the ability to modify the bits of a Bitcoin transaction after it's
         ; been signed, as that violates various assumed invariants.  Thus in future only one of those forms will be
         ; considered legal and the other will be banned.
         ;;
        #_public
        (§ method #_"ECDSASignature" toCanonicalised []
            ;; The order of the curve is the number of valid points that exist on that curve.  If S is in the upper
            ;; half of the number of valid points, then bring it back to the lower half.  Otherwise, imagine that
            ;;    N = 10
            ;;    s = 8, so (-8 % 10 == 2) thus both (r, 8) and (r, 2) are valid solutions.
            ;;    10 - 8 == 2, giving us always the latter solution, which is canonical.
            (if (.. this (isCanonical)) this (ECDSASignature. (:r this), (.. ECKey'CURVE (getN) (subtract (:s this)))))
        )

        ;;;
         ; DER is an international standard for serializing data structures which is widely used in cryptography.
         ; It's somewhat like protocol buffers but less convenient.  This method returns a standard DER encoding
         ; of the signature, as recognized by OpenSSL and other libraries.
         ;;
        #_public
        (§ method #_"byte[]" encodeToDER []
            (.. this (derByteStream) (toByteArray))
        )

        #_public
        #_static
        #_throws #_[ "IllegalArgumentException" ]
        (§ defn #_"ECDSASignature" ECDSASignature'decodeFromDER [#_"byte[]" bytes]
            (let [#_"ASN1InputStream" decoder nil]
                (try
                    (§ ass decoder (ASN1InputStream. bytes))
                    (let [#_"DLSequence" seq (cast DLSequence (.. decoder (readObject)))]
                        (when (nil? seq)
                            (throw (IllegalArgumentException. "Reached past end of ASN.1 stream."))
                        )

                        (let [#_"ASN1Integer" r
                              #_"ASN1Integer" s]
                            (try
                                (§ ass r (cast ASN1Integer (.. seq (getObjectAt 0))))
                                (§ ass s (cast ASN1Integer (.. seq (getObjectAt 1))))
                                (catch ClassCastException e
                                    (throw (IllegalArgumentException. e))
                                )
                            )
                            ;; OpenSSL deviates from the DER spec by interpreting these values as unsigned, though they should not be.
                            ;; Thus, we always use the positive versions.  See http://r6.ca/blog/20111119T211504Z.html
                            (ECDSASignature. (.. r (getPositiveValue)), (.. s (getPositiveValue)))
                        )
                    )
                    (catch IOException e
                        (throw (IllegalArgumentException. e))
                    )
                    (finally
                        (when (some? decoder)
                            (try
                                (.. decoder (close))
                                (catch IOException _
                                )
                            )
                        )
                    )
                )
            )
        )

        #_protected
        (§ method #_"ByteArrayOutputStream" derByteStream []
            ;; Usually 70-72 bytes.
            (let [#_"ByteArrayOutputStream" baos (ByteArrayOutputStream. 72) #_"DERSequenceGenerator" seq (DERSequenceGenerator. baos)]
                (.. seq (addObject (ASN1Integer. (:r this))))
                (.. seq (addObject (ASN1Integer. (:s this))))
                (.. seq (close))
                baos
            )
        )

        #_override
        #_public
        (§ method #_"boolean" equals [#_"Object" o]
            (cond
                (= this o) true
                (or (nil? o) (not= (getClass) (.. o (getClass)))) false
                :else (let [#_"ECDSASignature" other (cast ECDSASignature o)]
                    (and (.. (:r this) (equals (:r other))) (.. (:s this) (equals (:s other))))
                )
            )
        )

        #_override
        #_public
        (§ method #_"int" hashCode []
            (Objects/hashCode (:r this), (:s this))
        )
    )

    ;;;
     ; Signs the given hash and returns the R and S components as BigIntegers.  In the Bitcoin protocol
     ; usually encoded using DER format, so you want {@link ECKey.ECDSASignature#encodeToDER()} instead.
     ; However sometimes the independent components can be useful, for instance, if you're going to do
     ; further EC maths on them.
     ;
     ; @throws ECKey.MissingPrivateKeyException if this key doesn't have a private part.
     ;;
    #_public
    (§ method #_"ECDSASignature" sign [#_"Sha256Hash" input]
        (if (some? (:priv this))
            (.. this (doSign input, (:priv this)))
            (throw (MissingPrivateKeyException.))
        )
    )

    #_protected
    (§ method #_"ECDSASignature" doSign [#_"Sha256Hash" input, #_"BigInteger" __privateKeyForSigning]
        (ensure some? __privateKeyForSigning)

        (let [#_"ECDSASigner" signer (ECDSASigner. (HMacDSAKCalculator. (SHA256Digest.)))
              #_"ECPrivateKeyParameters" __privKey (ECPrivateKeyParameters. __privateKeyForSigning, ECKey'CURVE)]
            (.. signer (init true, __privKey))
            (let [#_"BigInteger[]" components (.. signer (generateSignature (.. input (getBytes))))]
                (.. (ECDSASignature. (aget components 0), (aget components 1)) (toCanonicalised))
            )
        )
    )

    ;;;
     ; Verifies the given ECDSA signature against the message bytes using the public key bytes.
     ;
     ; When using native ECDSA verification, data must be 32 bytes, and no element may be
     ; larger than 520 bytes.
     ;
     ; @param data      Hash of the data to verify.
     ; @param signature ASN.1 encoded signature.
     ; @param pub       The public key bytes to use.
     ;;
    #_public
    #_static
    (§ defn #_"boolean" ECKey'verify [#_"byte[]" data, #_"ECDSASignature" signature, #_"byte[]" pub]
        (let [#_"ECDSASigner" signer (ECDSASigner.)
              #_"ECPublicKeyParameters" params (ECPublicKeyParameters. (.. ECKey'CURVE (getCurve) (decodePoint pub)), ECKey'CURVE)]
            (.. signer (init false, params))
            (try
                (.. signer (verifySignature data, (:r signature), (:s signature)))
                (catch NullPointerException e
                    ;; Bouncy Castle contains a bug that can cause NPEs given specially crafted signatures.  Those signatures
                    ;; are inherently invalid/attack sigs so we just fail them here rather than crash the thread.
                    (.. ECKey'log (error "Caught NPE inside bouncy castle", e))
                    false
                )
            )
        )
    )

    ;;;
     ; Verifies the given ASN.1 encoded ECDSA signature against a hash using the public key.
     ;
     ; @param data      Hash of the data to verify.
     ; @param signature ASN.1 encoded signature.
     ; @param pub       The public key bytes to use.
     ;;
    #_public
    #_static
    (§ defn #_"boolean" ECKey'verify [#_"byte[]" data, #_"byte[]" signature, #_"byte[]" pub]
        (ECKey'verify data, (ECDSASignature'decodeFromDER signature), pub)
    )

    ;;;
     ; Verifies the given ASN.1 encoded ECDSA signature against a hash using the public key.
     ;
     ; @param hash      Hash of the data to verify.
     ; @param signature ASN.1 encoded signature.
     ;;
    #_public
    (§ method #_"boolean" verify [#_"byte[]" hash, #_"byte[]" signature]
        (ECKey'verify hash, signature, (.. this (getPubKey)))
    )

    ;;;
     ; Verifies the given R/S pair (signature) against a hash using the public key.
     ;;
    #_public
    (§ method #_"boolean" verify [#_"Sha256Hash" __sigHash, #_"ECDSASignature" signature]
        (ECKey'verify (.. __sigHash (getBytes)), signature, (.. this (getPubKey)))
    )

    ;;;
     ; Verifies the given ASN.1 encoded ECDSA signature against a hash using the public key, and throws an exception
     ; if the signature doesn't match.
     ;
     ; @throws java.security.SignatureException if the signature does not match.
     ;;
    #_public
    #_throws #_[ "SignatureException" ]
    (§ method #_"void" verifyOrThrow [#_"byte[]" hash, #_"byte[]" signature]
        (when (not (ECKey'verify hash, signature))
            (throw (SignatureException.))
        )
        nil
    )

    ;;;
     ; Verifies the given R/S pair (signature) against a hash using the public key, and throws an exception
     ; if the signature doesn't match.
     ;
     ; @throws java.security.SignatureException if the signature does not match.
     ;;
    #_public
    #_throws #_[ "SignatureException" ]
    (§ method #_"void" verifyOrThrow [#_"Sha256Hash" __sigHash, #_"ECDSASignature" signature]
        (when (not (ECKey'verify (.. __sigHash (getBytes)), signature, (.. this (getPubKey))))
            (throw (SignatureException.))
        )
        nil
    )

    ;;;
     ; Returns true if the given pubkey is canonical, i.e. the correct length taking into account compression.
     ;;
    #_public
    #_static
    (§ defn #_"boolean" ECKey'isPubKeyCanonical [#_"byte[]" pubkey]
        (cond
            (< (alength pubkey) 33)       false
            (= (aget pubkey 0) 0x04)          (= (alength pubkey) 65) ;; Uncompressed pubkey.
            (any = (aget pubkey 0) 0x02 0x03) (= (alength pubkey) 33) ;; Compressed pubkey.
            :else                                false
        )
    )

    ;;;
     ; Signs a text message using the standard Bitcoin messaging signing format and returns the signature as a base64
     ; encoded string.
     ;
     ; @throws IllegalStateException if this ECKey does not have the private part.
     ;;
    #_public
    (§ method #_"String" signMessage [#_"String" message]
        (let [#_"byte[]" data (Utils'formatMessageForSigning message)
              #_"Sha256Hash" hash (Sha256Hash'twiceOf data)
              #_"ECDSASignature" sig (.. this (sign hash))]
            ;; Now we have to work backwards to figure out the recId needed to recover the signature.
            (let [#_"int" __recId -1]
                (loop-when-recur [#_"int" i 0] (< i 4) [(inc i)]
                    (let [#_"ECKey" k (ECKey'recoverFromSignature i, sig, hash, (.. this (isCompressed)))]
                        (when (and (some? k) (.. (:pub k) (equals (:pub this))))
                            (§ ass __recId i)
                            (§ break )
                        )
                    )
                )
                (when (= __recId -1)
                    (throw (RuntimeException. "Could not construct a recoverable key. This should never happen."))
                )
                (let [#_"int" __headerByte (+ __recId 27 (if (.. this (isCompressed)) 4 0))
                      #_"byte[]" __sigData (byte-array 65)] ;; 1 header + 32 bytes for R + 32 bytes for S
                    (aset __sigData 0 (byte __headerByte))
                    (System/arraycopy (Utils'bigIntegerToBytes (:r sig), 32), 0, __sigData, 1, 32)
                    (System/arraycopy (Utils'bigIntegerToBytes (:s sig), 32), 0, __sigData, 33, 32)
                    (String. (Base64/encode __sigData), (Charset/forName "UTF-8"))
                )
            )
        )
    )

    ;;;
     ; Given an arbitrary piece of text and a Bitcoin-format message signature encoded in base64, returns an ECKey
     ; containing the public key that was used to sign it.  This can then be compared to the expected public key to
     ; determine if the signature was correct.  These sorts of signatures are compatible with the Bitcoin-Qt/bitcoind
     ; format generated by signmessage/verifymessage RPCs and GUI menu options.  They are intended for humans to verify
     ; their communications with each other, hence the base64 format and the fact that the input is text.
     ;
     ; @param message Some piece of human readable text.
     ; @param signatureBase64 The Bitcoin-format message signature in base64.
     ; @throws SignatureException if the public key could not be recovered or if there was a signature format error.
     ;;
    #_public
    #_static
    #_throws #_[ "SignatureException" ]
    (§ defn #_"ECKey" ECKey'signedMessageToKey [#_"String" message, #_"String" __signatureBase64]
        (let [#_"byte[]" __signatureEncoded]
            (try
                (§ ass __signatureEncoded (Base64/decode __signatureBase64))
                (catch RuntimeException e
                    ;; This is what you get back from Bouncy Castle if base64 doesn't decode :( ;; )
                    (throw (SignatureException. "Could not decode base64", e))
                )
            )
            ;; Parse the signature bytes into r/s and the selector value.
            (when (< (alength __signatureEncoded) 65)
                (throw (SignatureException. (str "Signature truncated, expected 65 bytes and got " (alength __signatureEncoded))))
            )

            (let [#_"int" header (& 0xff (aget __signatureEncoded 0))]
                ;; The header byte: 0x1B = first key with even y, 0x1C = first key with odd y,
                ;;                  0x1D = second key with even y, 0x1E = second key with odd y.
                (when (not (<= 27 header 34))
                    (throw (SignatureException. (str "Header byte out of range: " header)))
                )
                (let [#_"BigInteger" r (BigInteger. 1, (Arrays/copyOfRange __signatureEncoded, 1, 33))
                      #_"BigInteger" s (BigInteger. 1, (Arrays/copyOfRange __signatureEncoded, 33, 65))
                      #_"ECDSASignature" sig (ECDSASignature. r, s)
                      #_"byte[]" __messageBytes (Utils'formatMessageForSigning message)]
                    ;; Note that the C++ code doesn't actually seem to specify any character encoding.
                    ;; Presumably it's whatever JSON-SPIRIT hands back.  Assume UTF-8 for now.
                    (let [#_"Sha256Hash" __messageHash (Sha256Hash'twiceOf __messageBytes)
                          #_"boolean" compressed false]
                        (when (<= 31 header)
                            (§ ass compressed true)
                            (§ ass header (- header 4))
                        )
                        (let [#_"int" __recId (- header 27)
                              #_"ECKey" key (ECKey'recoverFromSignature __recId, sig, __messageHash, compressed)]
                            (when (nil? key)
                                (throw (SignatureException. "Could not recover public key from signature"))
                            )
                            key
                        )
                    )
                )
            )
        )
    )

    ;;;
     ; Convenience wrapper around {@link ECKey#signedMessageToKey(String, String)}.
     ; If the key derived from the signature is not the same as this one, throws a SignatureException.
     ;;
    #_public
    #_throws #_[ "SignatureException" ]
    (§ method #_"void" verifyMessage [#_"String" message, #_"String" __signatureBase64]
        (let [#_"ECKey" key (ECKey'signedMessageToKey message, __signatureBase64)]
            (when (not (.. (:pub key) (equals (:pub this))))
                (throw (SignatureException. "Signature did not match for message"))
            )
        )
        nil
    )

    ;;;
     ; Given the components of a signature and a selector value, recover and return the public key
     ; that generated the signature according to the algorithm in SEC1v2 section 4.1.6.
     ;
     ; The recId is an index from 0 to 3 which indicates which of the 4 possible keys is the correct one.  Because
     ; the key recovery operation yields multiple potential keys, the correct key must either be stored alongside the
     ; signature, or you must be willing to try each recId in turn until you find one that outputs the key you are
     ; expecting.
     ;
     ; If this method returns null it means recovery was not possible and recId should be iterated.
     ;
     ; Given the above two points, a correct usage of this method is inside a for loop from 0 to 3, and if the
     ; output is null OR a key that is not the one you expect, you try again with the next recId.
     ;
     ; @param recId Which possible key to recover.
     ; @param sig The R and S components of the signature, wrapped.
     ; @param message Hash of the data that was signed.
     ; @param compressed Whether or not the original pubkey was compressed.
     ; @return An ECKey containing only the public part, or null if recovery wasn't possible.
     ;;
    #_nilable
    #_public
    #_static
    (§ defn #_"ECKey" ECKey'recoverFromSignature [#_"int" __recId, #_"ECDSASignature" sig, #_"Sha256Hash" message, #_"boolean" compressed]
        (assert-argument (<= 0 __recId), "recId must be positive")
        (assert-argument (<= 0 (.. (:r sig) (signum))), "r must be positive")
        (assert-argument (<= 0 (.. (:s sig) (signum))), "s must be positive")
        (ensure some? message)

        ;; 1.0 For j from 0 to h   (h == recId here and the loop is outside this function)
        ;;   1.1 Let x = r + jn
        (let [#_"BigInteger" n (.. ECKey'CURVE (getN))] ;; Curve order.
            (let [#_"BigInteger" i (BigInteger/valueOf (quot (long __recId) 2))
                  #_"BigInteger" x (.. (:r sig) (add (.. i (multiply n))))]
                ;;   1.2. Convert the integer x to an octet string X of length mlen using the conversion routine
                ;;        specified in Section 2.3.7, where mlen = ⌈(log2 p)/8⌉ or mlen = ⌈m/8⌉.
                ;;   1.3. Convert the octet string (16 set binary digits)||X to an elliptic curve point R using the
                ;;        conversion routine specified in Section 2.3.4. If this conversion routine outputs “invalid”,
                ;;        then do another iteration of Step 1.
                ;;
                ;; More concisely, what these points mean is to use X as a compressed public key.
                (let [#_"BigInteger" prime SecP256K1Curve/q]
                    ;; Cannot have point co-ordinates larger than this as everything takes place modulo Q.
                    (when (<= 0 (.. x (compareTo prime)))
                        (§ return nil)
                    )

                    ;; Compressed keys require you to know an extra bit of data about the y-coord as there are two possibilities.
                    ;; So it's encoded in the recId.
                    (let [#_"ECPoint" __R (ECKey'decompressKey x, (= (& __recId 1) 1))]
                        ;;   1.4. If nR != point at infinity, then do another iteration of Step 1 (callers responsibility).
                        (when (not (.. __R (multiply n) (isInfinity)))
                            (§ return nil)
                        )

                        ;;   1.5. Compute e from M using Steps 2 and 3 of ECDSA signature verification.
                        (let [#_"BigInteger" e (.. message (toBigInteger))]
                            ;;   1.6. For k from 1 to 2 do the following.   (loop is outside this function via iterating recId)
                            ;;   1.6.1. Compute a candidate public key as:
                            ;;               Q = mi(r) * (sR - eG)
                            ;;
                            ;; Where mi(x) is the modular multiplicative inverse. We transform this into the following:
                            ;;               Q = (mi(r) * s ** R) + (mi(r) * -e ** G)
                            ;; Where -e is the modular additive inverse of e, that is z such that z + e = 0 (mod n). In the above equation
                            ;; ** is point multiplication and + is point addition (the EC group operator).
                            ;;
                            ;; We can find the additive inverse by subtracting e from zero then taking the mod. For example the additive
                            ;; inverse of 3 modulo 11 is 8 because 3 + 8 mod 11 = 0, and -3 mod 11 = 8.
                            (let [#_"BigInteger" __eInv (.. BigInteger/ZERO (subtract e) (mod n))
                                  #_"BigInteger" __rInv (.. (:r sig) (modInverse n))
                                  #_"BigInteger" __srInv (.. __rInv (multiply (:s sig)) (mod n))
                                  #_"BigInteger" __eInvrInv (.. __rInv (multiply __eInv) (mod n))
                                  #_"ECPoint" q (ECAlgorithms/sumOfTwoMultiplies (.. ECKey'CURVE (getG)), __eInvrInv, __R, __srInv)]
                                (ECKey'fromPublicOnly (.. q (getEncoded compressed)))
                            )
                        )
                    )
                )
            )
        )
    )

    ;;; Decompress a compressed public key (x co-ord and low-bit of y-coord). ;;
    #_private
    #_static
    (§ defn- #_"ECPoint" ECKey'decompressKey [#_"BigInteger" __xBN, #_"boolean" __yBit]
        (let [#_"X9IntegerConverter" x9 (X9IntegerConverter.)
              #_"byte[]" __compEnc (.. x9 (integerToBytes __xBN, (+ 1 (.. x9 (getByteLength (.. ECKey'CURVE (getCurve)))))))]
            (aset __compEnc 0 (byte (if __yBit 0x03 0x02)))
            (.. ECKey'CURVE (getCurve) (decodePoint __compEnc))
        )
    )

    ;;;
     ; Returns a 32 byte array containing the private key.
     ;
     ; @throws ECKey.MissingPrivateKeyException if the private key bytes are missing/encrypted.
     ;;
    #_public
    (§ method #_"byte[]" getPrivKeyBytes []
        (Utils'bigIntegerToBytes (.. this (getPrivKey)), 32)
    )

    ;;;
     ; Returns the creation time of this key or zero if the key was deserialized from a version that did not store
     ; that data.
     ;;
    #_override
    #_public
    (§ method #_"long" getCreationTimeSeconds []
        (:creation-time-seconds this)
    )

    ;;;
     ; Sets the creation time of this key.  Zero is a convention to mean "unavailable".  This method can be useful when
     ; you have a raw key you are importing from somewhere else.
     ;;
    #_public
    (§ method #_"void" setCreationTimeSeconds [#_"long" secs]
        (when (< secs 0)
            (throw (IllegalArgumentException. (str "Cannot set creation time to negative value: " secs)))
        )
        (§ assoc this :creation-time-seconds secs)
        nil
    )

    ;;;
     ; A wrapper for {@link #getPrivKeyBytes()} that returns null if the private key bytes are missing or would have
     ; to be derived (for the HD key case).
     ;;
    #_override
    #_nilable
    #_public
    (§ method #_"byte[]" getSecretBytes []
        (when (.. this (hasPrivKey)) (.. this (getPrivKeyBytes)))
    )

    #_public
    #_static
    (§ class MissingPrivateKeyException (§ extends RuntimeException)
    )

    #_override
    #_public
    (§ method #_"boolean" equals [#_"Object" o]
        (cond
            (= this o) true
            (or (nil? o) (not (instance? ECKey o))) false
            :else (let [#_"ECKey" other (cast ECKey o)]
                (and (Objects/equal (:priv this), (:priv other)) (Objects/equal (:pub this), (:pub other)) (Objects/equal (:creation-time-seconds this), (:creation-time-seconds other)))
            )
        )
    )

    #_override
    #_public
    (§ method #_"int" hashCode []
        (.. (:pub this) (hashCode))
    )

    #_override
    #_public
    (§ method #_"String" toString []
        (.. this (toString false, nil))
    )

    ;;;
     ; Produce a string rendering of the ECKey INCLUDING the private key.
     ; Unless you absolutely need the private key it is better for security reasons to just use {@link #toString()}.
     ;;
    #_public
    (§ method #_"String" toStringWithPrivate [#_"NetworkParameters" params]
        (.. this (toString true, params))
    )

    #_public
    (§ method #_"String" getPrivateKeyAsHex []
        (.. Utils'HEX (encode (.. this (getPrivKeyBytes))))
    )

    #_public
    (§ method #_"String" getPublicKeyAsHex []
        (.. Utils'HEX (encode (.. (:pub this) (getEncoded))))
    )

    #_private
    (§ method- #_"String" toString [#_"boolean" __includePrivate, #_"NetworkParameters" params]
        (let [#_"MoreObjects.ToStringHelper" helper (.. (MoreObjects/toStringHelper this) (omitNullValues))]
            (.. helper (add "pub HEX", (.. this (getPublicKeyAsHex))))
            (when __includePrivate
                (try
                    (.. helper (add "priv HEX", (.. this (getPrivateKeyAsHex))))
                    (catch IllegalStateException _
                        ;; TODO: Make hasPrivKey() work for deterministic keys and fix this.
                    )
                    (catch Exception e
                        (let [#_"String" message (.. e (getMessage))]
                            (.. helper (add "priv EXCEPTION", (str (.. e (getClass) (getName)) (if (some? message) (str ": " message) ""))))
                        )
                    )
                )
            )
            (when (< 0 (:creation-time-seconds this))
                (.. helper (add "creationTimeSeconds", (:creation-time-seconds this)))
            )
            (.. helper (add "isPubKeyOnly", (.. this (isPubKeyOnly))))
            (.. helper (toString))
        )
    )

    #_public
    (§ method #_"void" formatKeyWithAddress [#_"boolean" __includePrivateKeys, #_"StringBuilder" sb, #_"NetworkParameters" params]
        (let [#_"Address" address (.. this (toAddress params))]
            (.. sb (append "  addr:"))
            (.. sb (append (.. address (toString))))
            (.. sb (append "  hash160:"))
            (.. sb (append (.. Utils'HEX (encode (.. this (getPubKeyHash))))))
            (when (< 0 (:creation-time-seconds this))
                (.. sb (append "  creationTimeSeconds:") (append (:creation-time-seconds this)))
            )
            (.. sb (append "\n"))
            (when __includePrivateKeys
                (.. sb (append "  "))
                (.. sb (append (.. this (toStringWithPrivate params))))
                (.. sb (append "\n"))
            )
        )
        nil
    )
)

;;;
 ; Parent class for header only messages that don't have a payload.
 ; Currently this includes getaddr, verack and special bitcoinj class UnknownMessage.
 ;
 ; Instances of this class are not safe for use by multiple threads.
 ;;
#_public
#_abstract
(§ class EmptyMessage (§ extends Message)
    #_public
    (§ constructor EmptyMessage []
        (§ assoc this :length 0)
        this
    )

    #_public
    (§ constructor EmptyMessage [#_"NetworkParameters" params]
        (§ super params)
        (§ assoc this :length 0)
        this
    )

    #_public
    #_throws #_[ "ProtocolException" ]
    (§ constructor EmptyMessage [#_"NetworkParameters" params, #_"byte[]" payload, #_"int" offset]
        (§ super params, payload, offset)
        (§ assoc this :length 0)
        this
    )

    #_override
    #_protected
    (§ method #_"void" bitcoinSerializeToStream [#_"ByteArrayOutputStream" baos]
        nil
    )

    #_override
    #_protected
    #_throws #_[ "ProtocolException" ]
    (§ method #_"void" parse []
        nil
    )

    #_override
    #_public
    (§ method #_"byte[]" bitcoinSerialize []
        (byte-array 0)
    )
)

;;;
 ; A FilteredBlock is used to relay a block with its transactions filtered using a {@link BloomFilter}.  It consists
 ; of the block header and a {@link PartialMerkleTree} which contains the transactions which matched the filter.
 ;
 ; Instances of this class are not safe for use by multiple threads.
 ;;
#_public
(§ class FilteredBlock (§ extends Message)
    #_private
    (§ field- #_"Block" :header)

    #_private
    (§ field- #_"PartialMerkleTree" :merkle-tree)
    #_private
    (§ field- #_"List<Sha256Hash>" :cached-transaction-hashes)

    ;; A set of transactions whose hashes are a subset of getTransactionHashes().
    ;; These were relayed as a part of the filteredblock getdata, i.e. likely weren't previously received as loose transactions.
    #_private
    (§ field- #_"Map<Sha256Hash, Transaction>" :associated-transactions (HashMap. #_"<>"))

    #_public
    #_throws #_[ "ProtocolException" ]
    (§ constructor FilteredBlock [#_"NetworkParameters" params, #_"byte[]" payload]
        (§ super params, payload, 0)
        this
    )

    #_public
    (§ constructor FilteredBlock [#_"NetworkParameters" params, #_"Block" header, #_"PartialMerkleTree" pmt]
        (§ super params)
        (§ assoc this :header header)
        (§ assoc this :merkle-tree pmt)
        this
    )

    #_override
    #_public
    (§ method #_"void" bitcoinSerializeToStream [#_"ByteArrayOutputStream" baos]
        (if (nil? (-> this :header :transactions))
            (.. (:header this) (bitcoinSerializeToStream baos))
            (.. (:header this) (cloneAsHeader) (bitcoinSerializeToStream baos))
        )
        (.. (:merkle-tree this) (bitcoinSerializeToStream baos))
        nil
    )

    #_override
    #_protected
    #_throws #_[ "ProtocolException" ]
    (§ method #_"void" parse []
        (let [#_"byte[]" __headerBytes (byte-array Block'HEADER_SIZE)]
            (System/arraycopy (:payload this), 0, __headerBytes, 0, Block'HEADER_SIZE)
            (§ assoc this :header (.. (-> this :params :default-serializer) (makeBlock __headerBytes)))
            (§ assoc this :merkle-tree (PartialMerkleTree. (:params this), (:payload this), Block'HEADER_SIZE))
            (§ assoc this :length (+ Block'HEADER_SIZE (.. (:merkle-tree this) (getMessageSize))))
        )
        nil
    )

    ;;;
     ; Gets a list of leaf hashes which are contained in the partial merkle tree in this filtered block.
     ;
     ; @throws ProtocolException if the partial merkle block is invalid or the merkle root of the partial merkle block doesnt match the block header.
     ;;
    #_public
    #_throws #_[ "VerificationException" ]
    (§ method #_"List<Sha256Hash>" getTransactionHashes []
        (if (some? (:cached-transaction-hashes this))
            (Collections/unmodifiableList (:cached-transaction-hashes this))
            (let [#_"List<Sha256Hash>" __hashesMatched (LinkedList. #_"<>")]
                (if (.. (:header this) (getMerkleRoot) (equals (.. (:merkle-tree this) (getTxnHashAndMerkleRoot __hashesMatched))))
                    (do
                        (§ assoc this :cached-transaction-hashes __hashesMatched)
                        (Collections/unmodifiableList (:cached-transaction-hashes this))
                    )
                    (throw (VerificationException. "Merkle root of block header does not match merkle root of partial merkle tree."))
                )
            )
        )
    )

    ;;;
     ; Gets a copy of the block header.
     ;;
    #_public
    (§ method #_"Block" getBlockHeader []
        (.. (:header this) (cloneAsHeader))
    )

    ;;; Gets the hash of the block represented in this FilteredBlock. ;;
    #_override
    #_public
    (§ method #_"Sha256Hash" getHash []
        (.. (:header this) (getHash))
    )

    ;;;
     ; Provide this FilteredBlock with a transaction which is in its Merkle tree.
     ;
     ; @return false if the tx is not relevant to this FilteredBlock.
     ;;
    #_public
    #_throws #_[ "VerificationException" ]
    (§ method #_"boolean" provideTransaction [#_"Transaction" tx]
        (let [#_"Sha256Hash" hash (.. tx (getHash))]
            (when' (.. this (getTransactionHashes) (contains hash)) => false
                (.. (:associated-transactions this) (put hash, tx))
                true
            )
        )
    )

    ;;; Returns the {@link PartialMerkleTree} object that provides the mathematical proof of transaction inclusion in the block. ;;
    #_public
    (§ method #_"PartialMerkleTree" getPartialMerkleTree []
        (:merkle-tree this)
    )

    ;;; Gets the set of transactions which were provided using provideTransaction() which match in getTransactionHashes(). ;;
    #_public
    (§ method #_"Map<Sha256Hash, Transaction>" getAssociatedTransactions []
        (Collections/unmodifiableMap (:associated-transactions this))
    )

    ;;; Number of transactions in this block, before it was filtered. ;;
    #_public
    (§ method #_"int" getTransactionCount []
        (.. (:merkle-tree this) (getTransactionCount))
    )

    #_override
    #_public
    (§ method #_"boolean" equals [#_"Object" o]
        (cond
            (= this o) true
            (or (nil? o) (not= (getClass) (.. o (getClass)))) false
            :else (let [#_"FilteredBlock" other (cast FilteredBlock o)]
                (and (.. (:associated-transactions this) (equals (:associated-transactions other))) (.. (:header this) (equals (:header other))) (.. (:merkle-tree this) (equals (:merkle-tree other))))
            )
        )
    )

    #_override
    #_public
    (§ method #_"int" hashCode []
        (Objects/hashCode (:associated-transactions this), (:header this), (:merkle-tree this))
    )

    #_override
    #_public
    (§ method #_"String" toString []
        (str "FilteredBlock{merkleTree=" (:merkle-tree this) ", header=" (:header this) "}")
    )
)

;;;
 ; A FullPrunedBlockChain works in conjunction with a {@link FullPrunedBlockStore} to verify all the rules of the
 ; Bitcoin system, with the downside being a large cost in system resources.  Fully verifying means all unspent
 ; transaction outputs are stored.  Once a transaction output is spent and that spend is buried deep enough, the data
 ; related to it is deleted to ensure disk space usage doesn't grow forever.  For this reason a pruning node cannot
 ; serve the full block chain to other clients, but it nevertheless provides the same security guarantees as Bitcoin
 ; Core does.
 ;;
#_public
(§ class FullPrunedBlockChain (§ extends AbstractBlockChain)
    #_private
    #_static
    (def- #_"Logger" FullPrunedBlockChain'log (LoggerFactory/getLogger FullPrunedBlockChain))

    ;;;
     ; Keeps a map of block hashes to StoredBlocks.
     ;;
    #_protected
    (§ field #_"FullPrunedBlockStore" :block-store)

    ;; Whether or not to execute scriptPubKeys before accepting a transaction (i.e. check signatures).
    #_private
    (§ field- #_"boolean" :run-scripts true)

    ;;;
     ; Constructs a block chain connected to the given wallet and store.  To obtain a {@link Wallet} you can construct
     ; one from scratch, or you can deserialize a saved wallet from disk using {@link Wallet#loadFromFile(java.io.File)}.
     ;;
    #_public
    #_throws #_[ "BlockStoreException" ]
    (§ constructor FullPrunedBlockChain [#_"Context" context, #_"Wallet" wallet, #_"FullPrunedBlockStore" __blockStore]
        (§ this context, (ArrayList. #_"<Wallet>"), __blockStore)
        (.. this (addWallet wallet))
        this
    )

    ;;;
     ; Constructs a block chain connected to the given wallet and store.  To obtain a {@link Wallet} you can construct
     ; one from scratch, or you can deserialize a saved wallet from disk using {@link Wallet#loadFromFile(java.io.File)}.
     ;;
    #_public
    #_throws #_[ "BlockStoreException" ]
    (§ constructor FullPrunedBlockChain [#_"NetworkParameters" params, #_"Wallet" wallet, #_"FullPrunedBlockStore" __blockStore]
        (§ this (Context'getOrCreate params), wallet, __blockStore)
        this
    )

    ;;;
     ; Constructs a block chain connected to the given store.
     ;;
    #_public
    #_throws #_[ "BlockStoreException" ]
    (§ constructor FullPrunedBlockChain [#_"Context" context, #_"FullPrunedBlockStore" __blockStore]
        (§ this context, (ArrayList. #_"<Wallet>"), __blockStore)
        this
    )

    ;;;
     ; See {@link #FullPrunedBlockChain(Context, Wallet, FullPrunedBlockStore)}.
     ;;
    #_public
    #_throws #_[ "BlockStoreException" ]
    (§ constructor FullPrunedBlockChain [#_"NetworkParameters" params, #_"FullPrunedBlockStore" __blockStore]
        (§ this (Context'getOrCreate params), __blockStore)
        this
    )

    ;;;
     ; Constructs a block chain connected to the given list of wallets and a store.
     ;;
    #_public
    #_throws #_[ "BlockStoreException" ]
    (§ constructor FullPrunedBlockChain [#_"Context" context, #_"List<Wallet>" listeners, #_"FullPrunedBlockStore" __blockStore]
        (§ super context, listeners, __blockStore)
        (§ assoc this :block-store __blockStore)
        ;; Ignore upgrading for now.
        (§ assoc this :chain-head (.. __blockStore (getVerifiedChainHead)))
        this
    )

    ;;;
     ; See {@link #FullPrunedBlockChain(Context, List, FullPrunedBlockStore)}.
     ;;
    #_public
    #_throws #_[ "BlockStoreException" ]
    (§ constructor FullPrunedBlockChain [#_"NetworkParameters" params, #_"List<Wallet>" listeners, #_"FullPrunedBlockStore" __blockStore]
        (§ this (Context'getOrCreate params), listeners, __blockStore)
        this
    )

    #_override
    #_protected
    #_throws #_[ "BlockStoreException", "VerificationException" ]
    (§ method #_"StoredBlock" addToBlockStore [#_"StoredBlock" __storedPrev, #_"Block" header, #_"TransactionOutputChanges" __txOutChanges]
        (let [#_"StoredBlock" __newBlock (.. __storedPrev (build header))]
            (.. (:block-store this) (put __newBlock, (StoredUndoableBlock. (.. __newBlock (getHeader) (getHash)), __txOutChanges)))
            __newBlock
        )
    )

    #_override
    #_protected
    #_throws #_[ "BlockStoreException", "VerificationException" ]
    (§ method #_"StoredBlock" addToBlockStore [#_"StoredBlock" __storedPrev, #_"Block" block]
        (let [#_"StoredBlock" __newBlock (.. __storedPrev (build block))]
            (.. (:block-store this) (put __newBlock, (StoredUndoableBlock. (.. __newBlock (getHeader) (getHash)), (:transactions block))))
            __newBlock
        )
    )

    #_override
    #_protected
    #_throws #_[ "BlockStoreException" ]
    (§ method #_"void" rollbackBlockStore [#_"int" height]
        (throw (BlockStoreException. "Unsupported"))
    )

    #_override
    #_protected
    (§ method #_"boolean" shouldVerifyTransactions []
        true
    )

    ;;;
     ; Whether or not to run scripts whilst accepting blocks (i.e. checking signatures, for most transactions).
     ; If you're accepting data from an untrusted node, such as one found via the P2P network, this should be set
     ; to true (which is the default).  If you're downloading a chain from a node you control, script execution
     ; is redundant because you know the connected node won't relay bad data to you.  In that case it's safe to set
     ; this to false and obtain a significant speedup.
     ;;
    #_public
    (§ method #_"void" setRunScripts [#_"boolean" value]
        (§ assoc this :run-scripts value)
        nil
    )

    ;; TODO: Remove lots of duplicated code in the two connectTransactions.

    ;; TODO: Execute in order of largest transaction (by input count) first.
    (§ field #_"ExecutorService" :script-verification-executor (Executors/newFixedThreadPool (.. (Runtime/getRuntime) (availableProcessors)), (ContextPropagatingThreadFactory. "Script verification")))

    ;;;
     ; A job submitted to the executor which verifies signatures.
     ;;
    #_private
    #_static
    (§ class- FullPrunedVerifier (§ implements Callable #_"<VerificationException>")
        (§ field #_"Transaction" :tx)
        (§ field #_"List<Script>" :prev-out-scripts)
        (§ field #_"Set<ScriptVerifyFlag>" :verify-flags)

        #_public
        (§ constructor FullPrunedVerifier [#_"Transaction" tx, #_"List<Script>" __prevOutScripts, #_"Set<ScriptVerifyFlag>" __verifyFlags]
            (§ assoc this :tx tx)
            (§ assoc this :prev-out-scripts __prevOutScripts)
            (§ assoc this :verify-flags __verifyFlags)
            this
        )

        #_nilable
        #_override
        #_public
        #_throws #_[ "Exception" ]
        (§ method #_"VerificationException" call []
            (try
                (let [#_"ListIterator<Script>" __prevOutIt (.. (:prev-out-scripts this) (listIterator))]
                    (loop-when-recur [#_"int" index 0] (< index (.. (:tx this) (getInputs) (size))) [(inc index)]
                        (.. (:tx this) (getInputs) (get index) (getScriptSig) (correctlySpends (:tx this), index, (.. __prevOutIt (next)), (:verify-flags this)))
                    )
                    nil
                )
                (catch VerificationException e
                    e
                )
            )
        )
    )

    ;;;
     ; Get the {@link Script} from the script bytes or return Script of empty byte array.
     ;;
    #_private
    (§ method- #_"Script" getScript [#_"byte[]" bytes]
        (try
            (Script. bytes)
            (catch Exception _
                (Script. (byte-array 0))
            )
        )
    )

    ;;;
     ; Get the address from the {@link Script} if it exists, otherwise return empty string "".
     ;
     ; @param script The script.
     ; @return The address.
     ;;
    #_private
    (§ method- #_"String" getScriptAddress [#_nilable #_"Script" script]
        (let [#_"String" address ""]
            (try
                (when (some? script)
                    (§ ass address (.. script (getToAddress (:params this), true) (toString)))
                )
                (catch Exception _
                )
            )
            address
        )
    )

    #_override
    #_protected
    #_throws #_[ "VerificationException", "BlockStoreException" ]
    (§ method #_"TransactionOutputChanges" connectTransactions [#_"int" height, #_"Block" block]
        (assert-state (.. (:lock this) (isHeldByCurrentThread)))

        (when (nil? (:transactions block))
            (throw (RuntimeException. "connectTransactions called with Block that didn't have transactions!"))
        )
        (when (not (.. (:params this) (passesCheckpoint height, (.. block (getHash)))))
            (throw (VerificationException. (str "Block failed checkpoint lockin at " height)))
        )

        (.. (:block-store this) (beginDatabaseBatchWrite))

        (let [#_"LinkedList<UTXO>" __txOutsSpent (LinkedList. #_"<>")
              #_"LinkedList<UTXO>" __txOutsCreated (LinkedList. #_"<>")
              #_"long" __sigOps 0]

            (when (.. (:script-verification-executor this) (isShutdown))
                (§ assoc this :script-verification-executor (Executors/newFixedThreadPool (.. (Runtime/getRuntime) (availableProcessors))))
            )

            (let [#_"List<Future<VerificationException>>" __listScriptVerificationResults (ArrayList. #_"<>" (.. (:transactions block) (size)))]
                (try
                    (when (not (.. (:params this) (isCheckpoint height)))
                        ;; BIP30 violator blocks are ones that contain a duplicated transaction.  They are all in the checkpoints list
                        ;; and we therefore only check non-checkpoints for duplicated transactions here.  See the BIP30 document
                        ;; for more details on this: https://github.com/bitcoin/bips/blob/master/bip-0030.mediawiki
                        (doseq [#_"Transaction" tx (:transactions block)]
                            (let [#_"Set<ScriptVerifyFlag>" __verifyFlags (.. (:params this) (getTransactionVerificationFlags block, tx, (.. this (getVersionTally)), height))
                                  #_"Sha256Hash" hash (.. tx (getHash))]
                                ;; If we already have unspent outputs for this hash, we saw the tx already.
                                ;; Either the block is being added twice (bug) or the block is a BIP30 violator.
                                (when (.. (:block-store this) (hasUnspentOutputs hash, (.. tx (getOutputs) (size))))
                                    (throw (VerificationException. "Block failed BIP30 test!"))
                                )
                                ;; We already check non-BIP16 sigops in Block.verifyTransactions(true).
                                (when (.. __verifyFlags (contains :ScriptVerifyFlag'P2SH))
                                    (§ ass __sigOps (+ __sigOps (.. tx (getSigOpCount))))
                                )
                            )
                        )
                    )
                    (let [#_"Coin" __totalFees Coin'ZERO
                          #_"Coin" __coinbaseValue nil]
                        (doseq [#_"Transaction" tx (:transactions block)]
                            (let [#_"boolean" __isCoinBase (.. tx (isCoinBase))
                                  #_"Coin" __valueIn Coin'ZERO
                                  #_"Coin" __valueOut Coin'ZERO
                                  #_"List<Script>" __prevOutScripts (LinkedList. #_"<>")
                                  #_"Set<ScriptVerifyFlag>" __verifyFlags (.. (:params this) (getTransactionVerificationFlags block, tx, (.. this (getVersionTally)), height))]
                                (when (not __isCoinBase)
                                    ;; For each input of the transaction remove the corresponding output from the set of unspent outputs.
                                    (loop-when-recur [#_"int" index 0] (< index (.. tx (getInputs) (size))) [(inc index)]
                                        (let [#_"TransactionInput" in (.. tx (getInputs) (get index))
                                              #_"UTXO" __prevOut (.. (:block-store this) (getTransactionOutput (.. (:outpoint in) (getHash)), (.. (:outpoint in) (getIndex))))]
                                            (when (nil? __prevOut)
                                                (throw (VerificationException. "Attempted to spend a non-existent or already spent output!"))
                                            )
                                            ;; Coinbases can't be spent until they mature, to avoid re-orgs destroying entire transaction chains.
                                            ;; The assumption is there will ~never be re-orgs deeper than the spendable coinbase chain depth.
                                            (when (.. __prevOut (isCoinbase))
                                                (when (< (- height (.. __prevOut (getHeight))) (-> this :params :spendable-coinbase-depth))
                                                    (throw (VerificationException. (str "Tried to spend coinbase at depth " (- height (.. __prevOut (getHeight))))))
                                                )
                                            )
                                            ;; TODO: Check we're not spending the genesis transaction here. Bitcoin Core won't allow it.
                                            (§ ass __valueIn (.. __valueIn (add (.. __prevOut (getValue)))))
                                            (when (.. __verifyFlags (contains :ScriptVerifyFlag'P2SH))
                                                (when (.. __prevOut (getScript) (isPayToScriptHash))
                                                    (§ ass __sigOps (+ __sigOps (Script'getP2SHSigOpCount (.. in (getScriptBytes)))))
                                                )
                                                (when (< Block'MAX_BLOCK_SIGOPS __sigOps)
                                                    (throw (VerificationException. "Too many P2SH SigOps in block"))
                                                )
                                            )

                                            (.. __prevOutScripts (add (.. __prevOut (getScript))))
                                            (.. (:block-store this) (removeUnspentTransactionOutput __prevOut))
                                            (.. __txOutsSpent (add __prevOut))
                                        )
                                    )
                                )
                                (let [#_"Sha256Hash" hash (.. tx (getHash))]
                                    (doseq [#_"TransactionOutput" out (.. tx (getOutputs))]
                                        (§ ass __valueOut (.. __valueOut (add (.. out (getValue)))))
                                        ;; For each output, add it to the set of unspent outputs so it can be consumed in future.
                                        (let [#_"Script" script (.. this (getScript (.. out (getScriptBytes))))
                                              #_"UTXO" __newOut (UTXO. hash, (.. out (getIndex)), (.. out (getValue)), height, __isCoinBase, script, (.. this (getScriptAddress script)))]
                                            (.. (:block-store this) (addUnspentTransactionOutput __newOut))
                                            (.. __txOutsCreated (add __newOut))
                                        )
                                    )
                                    ;; All values were already checked for being non-negative (as it is verified in Transaction.verify()),
                                    ;; but we check again here just for defence in depth.  Transactions with zero output value are OK.
                                    (when (or (< (.. __valueOut (signum)) 0) (< 0 (.. __valueOut (compareTo (.. (:params this) (getMaxMoney))))))
                                        (throw (VerificationException. "Transaction output value out of range"))
                                    )

                                    (cond __isCoinBase
                                        (do
                                            (§ ass __coinbaseValue __valueOut)
                                        )
                                        :else
                                        (do
                                            (when (or (< (.. __valueIn (compareTo __valueOut)) 0) (< 0 (.. __valueIn (compareTo (.. (:params this) (getMaxMoney))))))
                                                (throw (VerificationException. "Transaction input value out of range"))
                                            )
                                            (§ ass __totalFees (.. __totalFees (add (.. __valueIn (subtract __valueOut)))))
                                        )
                                    )

                                    (when (and (not __isCoinBase) (:run-scripts this))
                                        ;; Because correctlySpends modifies transactions, this must come after we are done with tx.
                                        (let [#_"FutureTask<VerificationException>" future (FutureTask. #_"<>" (FullPrunedVerifier. tx, __prevOutScripts, __verifyFlags))]
                                            (.. (:script-verification-executor this) (execute future))
                                            (.. __listScriptVerificationResults (add future))
                                        )
                                    )
                                )
                            )
                        )
                        (when (or (< 0 (.. __totalFees (compareTo (.. (:params this) (getMaxMoney))))) (< (.. block (getBlockInflation height) (add __totalFees) (compareTo __coinbaseValue)) 0))
                            (throw (VerificationException. "Transaction fees out of range"))
                        )

                        (doseq [#_"Future<VerificationException>" future __listScriptVerificationResults]
                            (let [#_"VerificationException" e]
                                (try
                                    (§ ass e (.. future (get)))
                                    (catch InterruptedException ie
                                        (throw (RuntimeException. ie)) ;; Shouldn't happen.
                                    )
                                    (catch ExecutionException ee
                                        (.. FullPrunedBlockChain'log (error (str "Script.correctlySpends threw a non-normal exception: " (.. ee (getCause)))))
                                        (throw (VerificationException. "Bug in Script.correctlySpends, likely script malformed in some new and interesting way.", ee))
                                    )
                                )
                                (when (some? e)
                                    (throw e)
                                )
                            )
                        )
                    )
                    (catch VerificationException e
                        (.. (:script-verification-executor this) (shutdownNow))
                        (.. (:block-store this) (abortDatabaseBatchWrite))
                        (throw e)
                    )
                    (catch BlockStoreException e
                        (.. (:script-verification-executor this) (shutdownNow))
                        (.. (:block-store this) (abortDatabaseBatchWrite))
                        (throw e)
                    )
                )

                (TransactionOutputChanges. __txOutsCreated, __txOutsSpent)
            )
        )
    )

    #_override
    ;;;
     ; Used during reorgs to connect a block previously on a fork.
     ;;
    #_protected
    #_synchronized
    #_throws #_[ "VerificationException", "BlockStoreException", "PrunedException" ]
    (§ method #_"TransactionOutputChanges" connectTransactions [#_"StoredBlock" __newBlock]
        (assert-state (.. (:lock this) (isHeldByCurrentThread)))
        (when (not (.. (:params this) (passesCheckpoint (.. __newBlock (getHeight)), (.. __newBlock (getHeader) (getHash)))))
            (throw (VerificationException. (str "Block failed checkpoint lockin at " (.. __newBlock (getHeight)))))
        )

        (.. (:block-store this) (beginDatabaseBatchWrite))
        (let [#_"StoredUndoableBlock" block (.. (:block-store this) (getUndoBlock (.. __newBlock (getHeader) (getHash))))]
            (when (nil? block)
                ;; We're trying to re-org too deep and the data needed has been deleted.
                (.. (:block-store this) (abortDatabaseBatchWrite))
                (throw (PrunedException. (.. __newBlock (getHeader) (getHash))))
            )

            (let [#_"TransactionOutputChanges" __txOutChanges]
                (try
                    (let [#_"List<Transaction>" transactions (.. block (getTransactions))]
                        (cond (some? transactions)
                            (do
                                (let [#_"LinkedList<UTXO>" __txOutsSpent (LinkedList. #_"<>")
                                      #_"LinkedList<UTXO>" __txOutsCreated (LinkedList. #_"<>")
                                      #_"long" __sigOps 0]

                                    (when (not (.. (:params this) (isCheckpoint (.. __newBlock (getHeight)))))
                                        (doseq [#_"Transaction" tx transactions]
                                            (let [#_"Sha256Hash" hash (.. tx (getHash))]
                                                (when (.. (:block-store this) (hasUnspentOutputs hash, (.. tx (getOutputs) (size))))
                                                    (throw (VerificationException. "Block failed BIP30 test!"))
                                                )
                                            )
                                        )
                                    )

                                    (let [#_"Coin" __totalFees Coin'ZERO
                                          #_"Coin" __coinbaseValue nil]

                                        (when (.. (:script-verification-executor this) (isShutdown))
                                            (§ assoc this :script-verification-executor (Executors/newFixedThreadPool (.. (Runtime/getRuntime) (availableProcessors))))
                                        )

                                        (let [#_"List<Future<VerificationException>>" __listScriptVerificationResults (ArrayList. #_"<>" (.. transactions (size)))]
                                            (doseq [#_"Transaction" tx (:transactions this)]
                                                (let [#_"Set<ScriptVerifyFlag>" __verifyFlags (.. (:params this) (getTransactionVerificationFlags (.. __newBlock (getHeader)), tx, (.. this (getVersionTally)), Integer/SIZE))
                                                      #_"boolean" __isCoinBase (.. tx (isCoinBase))
                                                      #_"Coin" __valueIn Coin'ZERO
                                                      #_"Coin" __valueOut Coin'ZERO
                                                      #_"List<Script>" __prevOutScripts (LinkedList. #_"<>")]

                                                    (when (not __isCoinBase)
                                                        (loop-when-recur [#_"int" index 0] (< index (.. tx (getInputs) (size))) [(inc index)]
                                                            (let [#_"TransactionInput" in (.. tx (getInputs) (get index))
                                                                  #_"UTXO" __prevOut (.. (:block-store this) (getTransactionOutput (.. (:outpoint in) (getHash)), (.. (:outpoint in) (getIndex))))]
                                                                (when (nil? __prevOut)
                                                                    (throw (VerificationException. "Attempted spend of a non-existent or already spent output!"))
                                                                )
                                                                (when (and (.. __prevOut (isCoinbase)) (< (- (.. __newBlock (getHeight)) (.. __prevOut (getHeight))) (-> this :params :spendable-coinbase-depth)))
                                                                    (throw (VerificationException. (str "Tried to spend coinbase at depth " (- (.. __newBlock (getHeight)) (.. __prevOut (getHeight))))))
                                                                )
                                                                (§ ass __valueIn (.. __valueIn (add (.. __prevOut (getValue)))))
                                                                (when (.. __verifyFlags (contains :ScriptVerifyFlag'P2SH))
                                                                    (when (.. __prevOut (getScript) (isPayToScriptHash))
                                                                        (§ ass __sigOps (+ __sigOps (Script'getP2SHSigOpCount (.. in (getScriptBytes)))))
                                                                    )
                                                                    (when (< Block'MAX_BLOCK_SIGOPS __sigOps)
                                                                        (throw (VerificationException. "Too many P2SH SigOps in block"))
                                                                    )
                                                                )

                                                                ;; TODO: Enforce DER signature format.

                                                                (.. __prevOutScripts (add (.. __prevOut (getScript))))

                                                                (.. (:block-store this) (removeUnspentTransactionOutput __prevOut))
                                                                (.. __txOutsSpent (add __prevOut))
                                                            )
                                                        )
                                                    )
                                                    (let [#_"Sha256Hash" hash (.. tx (getHash))]
                                                        (doseq [#_"TransactionOutput" out (.. tx (getOutputs))]
                                                            (§ ass __valueOut (.. __valueOut (add (.. out (getValue)))))
                                                            (let [#_"Script" script (.. this (getScript (.. out (getScriptBytes))))
                                                                  #_"UTXO" __newOut (UTXO. hash, (.. out (getIndex)), (.. out (getValue)), (.. __newBlock (getHeight)), __isCoinBase, script, (.. this (getScriptAddress script)))]
                                                                (.. (:block-store this) (addUnspentTransactionOutput __newOut))
                                                                (.. __txOutsCreated (add __newOut))
                                                            )
                                                        )
                                                        ;; All values were already checked for being non-negative (as it is verified in Transaction.verify())
                                                        ;; but we check again here just for defence in depth.  Transactions with zero output value are OK.
                                                        (when (or (< (.. __valueOut (signum)) 0) (< 0 (.. __valueOut (compareTo (.. (:params this) (getMaxMoney))))))
                                                            (throw (VerificationException. "Transaction output value out of range"))
                                                        )

                                                        (cond __isCoinBase
                                                            (do
                                                                (§ ass __coinbaseValue __valueOut)
                                                            )
                                                            :else
                                                            (do
                                                                (when (or (< (.. __valueIn (compareTo __valueOut)) 0) (< 0 (.. __valueIn (compareTo (.. (:params this) (getMaxMoney))))))
                                                                    (throw (VerificationException. "Transaction input value out of range"))
                                                                )
                                                                (§ ass __totalFees (.. __totalFees (add (.. __valueIn (subtract __valueOut)))))
                                                            )
                                                        )

                                                        (when (not __isCoinBase)
                                                            ;; Because correctlySpends modifies transactions, this must come after we are done with tx.
                                                            (let [#_"FutureTask<VerificationException>" future (FutureTask. #_"<>" (FullPrunedVerifier. tx, (:prev-out-scripts this), __verifyFlags))]
                                                                (.. (:script-verification-executor this) (execute future))
                                                                (.. __listScriptVerificationResults (add future))
                                                            )
                                                        )
                                                    )
                                                )
                                            )
                                            (when (or (< 0 (.. __totalFees (compareTo (.. (:params this) (getMaxMoney))))) (< (.. __newBlock (getHeader) (getBlockInflation (.. __newBlock (getHeight))) (add __totalFees) (compareTo __coinbaseValue)) 0))
                                                (throw (VerificationException. "Transaction fees out of range"))
                                            )

                                            (§ ass __txOutChanges (TransactionOutputChanges. __txOutsCreated, __txOutsSpent))
                                            (doseq [#_"Future<VerificationException>" future __listScriptVerificationResults]
                                                (let [#_"VerificationException" e]
                                                    (try
                                                        (§ ass e (.. future (get)))
                                                        (catch InterruptedException ie
                                                            (throw (RuntimeException. ie)) ;; Shouldn't happen.
                                                        )
                                                        (catch ExecutionException ee
                                                            (.. FullPrunedBlockChain'log (error (str "Script.correctlySpends threw a non-normal exception: " (.. ee (getCause)))))
                                                            (throw (VerificationException. "Bug in Script.correctlySpends, likely script malformed in some new and interesting way.", ee))
                                                        )
                                                    )
                                                    (when (some? e)
                                                        (throw e)
                                                    )
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                            :else
                            (do
                                (§ ass __txOutChanges (.. block (getTxOutChanges)))
                                (when (not (.. (:params this) (isCheckpoint (.. __newBlock (getHeight)))))
                                    (doseq [#_"UTXO" out (-> this :tx-out-changes :tx-outs-created)]
                                        (let [#_"Sha256Hash" hash (.. out (getHash))]
                                            (when (some? (.. (:block-store this) (getTransactionOutput hash, (.. out (getIndex)))))
                                                (throw (VerificationException. "Block failed BIP30 test!"))
                                            )
                                        )
                                    )
                                )
                                (doseq [#_"UTXO" out (-> this :tx-out-changes :tx-outs-created)]
                                    (.. (:block-store this) (addUnspentTransactionOutput out))
                                )
                                (doseq [#_"UTXO" out (-> this :tx-out-changes :tx-outs-spent)]
                                    (.. (:block-store this) (removeUnspentTransactionOutput out))
                                )
                            )
                        )
                    )
                    (catch VerificationException e
                        (.. (:script-verification-executor this) (shutdownNow))
                        (.. (:block-store this) (abortDatabaseBatchWrite))
                        (throw e)
                    )
                    (catch BlockStoreException e
                        (.. (:script-verification-executor this) (shutdownNow))
                        (.. (:block-store this) (abortDatabaseBatchWrite))
                        (throw e)
                    )
                )
                (:tx-out-changes this)
            )
        )
    )

    ;;;
     ; This is broken for blocks that do not pass BIP30, so all BIP30-failing blocks which are allowed to fail BIP30
     ; must be checkpointed.
     ;;
    #_override
    #_protected
    #_throws #_[ "PrunedException", "BlockStoreException" ]
    (§ method #_"void" disconnectTransactions [#_"StoredBlock" __oldBlock]
        (assert-state (.. (:lock this) (isHeldByCurrentThread)))
        (.. (:block-store this) (beginDatabaseBatchWrite))
        (try
            (let [#_"StoredUndoableBlock" __undoBlock (.. (:block-store this) (getUndoBlock (.. __oldBlock (getHeader) (getHash))))]
                (when (nil? __undoBlock)
                    (throw (PrunedException. (.. __oldBlock (getHeader) (getHash))))
                )

                (let [#_"TransactionOutputChanges" __txOutChanges (.. __undoBlock (getTxOutChanges))]
                    (doseq [#_"UTXO" out (:tx-outs-spent __txOutChanges)]
                        (.. (:block-store this) (addUnspentTransactionOutput out))
                    )
                    (doseq [#_"UTXO" out (:tx-outs-created __txOutChanges)]
                        (.. (:block-store this) (removeUnspentTransactionOutput out))
                    )
                )
            )
            (catch PrunedException e
                (.. (:block-store this) (abortDatabaseBatchWrite))
                (throw e)
            )
            (catch BlockStoreException e
                (.. (:block-store this) (abortDatabaseBatchWrite))
                (throw e)
            )
        )
        nil
    )

    #_override
    #_protected
    #_throws #_[ "BlockStoreException" ]
    (§ method #_"void" doSetChainHead [#_"StoredBlock" __chainHead]
        (assert-state (.. (:lock this) (isHeldByCurrentThread)))
        (.. (:block-store this) (setVerifiedChainHead __chainHead))
        (.. (:block-store this) (commitDatabaseBatchWrite))
        nil
    )

    #_override
    #_protected
    #_throws #_[ "BlockStoreException" ]
    (§ method #_"void" notSettingChainHead []
        (.. (:block-store this) (abortDatabaseBatchWrite))
        nil
    )

    #_override
    #_protected
    #_throws #_[ "BlockStoreException" ]
    (§ method #_"StoredBlock" getStoredBlockInCurrentScope [#_"Sha256Hash" hash]
        (assert-state (.. (:lock this) (isHeldByCurrentThread)))
        (.. (:block-store this) (getOnceUndoableStoredBlock hash))
    )
)

;;;
 ; Represents the "getaddr" P2P protocol message, which requests network {@link AddressMessage}s from a peer.
 ; Not to be confused with {@link Address} which is sort of like an account number.
 ;
 ; Instances of this class are not safe for use by multiple threads.
 ;;
#_public
(§ class GetAddrMessage (§ extends EmptyMessage)
    #_public
    (§ constructor GetAddrMessage [#_"NetworkParameters" params]
        (§ super params)
        this
    )
)

;;;
 ; Represents the "getblocks" P2P network message, which requests the hashes of the parts of the block chain we're missing.
 ; Those blocks can then be downloaded with a {@link GetDataMessage}.
 ;
 ; Instances of this class are not safe for use by multiple threads.
 ;;
#_public
(§ class GetBlocksMessage (§ extends Message)
    #_protected
    (§ field #_"long" :version)
    #_protected
    (§ field #_"List<Sha256Hash>" :locator)
    #_protected
    (§ field #_"Sha256Hash" :stop-hash)

    #_public
    (§ constructor GetBlocksMessage [#_"NetworkParameters" params, #_"List<Sha256Hash>" locator, #_"Sha256Hash" __stopHash]
        (§ super params)

        (§ assoc this :version (:protocol-version this))
        (§ assoc this :locator locator)
        (§ assoc this :stop-hash __stopHash)
        this
    )

    #_public
    #_throws #_[ "ProtocolException" ]
    (§ constructor GetBlocksMessage [#_"NetworkParameters" params, #_"byte[]" payload]
        (§ super params, payload, 0)
        this
    )

    #_override
    #_protected
    #_throws #_[ "ProtocolException" ]
    (§ method #_"void" parse []
        (§ assoc this :cursor (:offset this))
        (§ assoc this :version (.. this (readUint32)))
        (let [#_"int" __startCount (int (.. this (readVarInt)))]
            (when (< 500 __startCount)
                (throw (ProtocolException. (str "Number of locators cannot be > 500, received: " __startCount)))
            )

            (§ assoc this :length (+ (- (:cursor this) (:offset this)) (* (inc __startCount) 32)))
            (§ assoc this :locator (ArrayList. #_"<>" __startCount))
            (loop-when-recur [#_"int" i 0] (< i __startCount) [(inc i)]
                (.. (:locator this) (add (.. this (readHash))))
            )
            (§ assoc this :stop-hash (.. this (readHash)))
        )
        nil
    )

    #_public
    (§ method #_"List<Sha256Hash>" getLocator []
        (:locator this)
    )

    #_public
    (§ method #_"Sha256Hash" getStopHash []
        (:stop-hash this)
    )

    #_override
    #_public
    (§ method #_"String" toString []
        (str "getblocks: " (.. Utils'SPACE_JOINER (join (:locator this))))
    )

    #_override
    #_protected
    (§ method #_"void" bitcoinSerializeToStream [#_"ByteArrayOutputStream" baos]
        ;; Version, for some reason.
        (Utils'uint32ToByteStreamLE ProtocolVersion'CURRENT, baos)
        ;; Then a vector of block hashes.  This is actually a "block locator", a set of block
        ;; identifiers that spans the entire chain with exponentially increasing gaps between
        ;; them, until we end up at the genesis block.  See CBlockLocator::Set().
        (.. baos (write (.. (VarInt. (.. (:locator this) (size))) (encode))))
        (doseq [#_"Sha256Hash" hash (:locator this)]
            ;; Have to reverse as wire format is little endian.
            (.. baos (write (.. hash (getReversedBytes))))
        )
        ;; Next, a block ID to stop at.
        (.. baos (write (.. (:stop-hash this) (getReversedBytes))))
        nil
    )

    #_override
    #_public
    (§ method #_"boolean" equals [#_"Object" o]
        (cond
            (= this o) true
            (or (nil? o) (not= (getClass) (.. o (getClass)))) false
            :else (let [#_"GetBlocksMessage" other (cast GetBlocksMessage o)]
                (and (= (:version this) (:version other)) (.. (:stop-hash this) (equals (:stop-hash other))) (= (.. (:locator this) (size)) (.. (:locator other) (size))) (.. (:locator this) (containsAll (:locator other)))) ;; ignores locator ordering
            )
        )
    )

    #_override
    #_public
    (§ method #_"int" hashCode []
        (let [#_"int" __hashCode (bit-xor (int (:version this)) (.. "getblocks" (hashCode)) (.. (:stop-hash this) (hashCode)))]
            (doseq [#_"Sha256Hash" l (:locator this)]
                (§ ass __hashCode (bit-xor __hashCode (.. l (hashCode)))) ;; ignores locator ordering
            )
            __hashCode
        )
    )
)

;;;
 ; Represents the "getdata" P2P network message, which requests the contents of blocks or transactions given their hashes.
 ;
 ; Instances of this class are not safe for use by multiple threads.
 ;;
#_public
(§ class GetDataMessage (§ extends ListMessage)
    #_public
    #_throws #_[ "ProtocolException" ]
    (§ constructor GetDataMessage [#_"NetworkParameters" params, #_"byte[]" payload]
        (§ super params, payload)
        this
    )

    ;;;
     ; Deserializes a 'getdata' message.
     ;
     ; @param params NetworkParameters object.
     ; @param payload Bitcoin protocol formatted byte array containing message content.
     ; @param serializer The serializer to use for this message.
     ; @param length The length of message if known.  Usually this is provided when deserializing of the wire
     ;               as the length will be provided as part of the header.  Set to Message.UNKNOWN_LENGTH, if not known.
     ; @throws ProtocolException
     ;;
    #_public
    #_throws #_[ "ProtocolException" ]
    (§ constructor GetDataMessage [#_"NetworkParameters" params, #_"byte[]" payload, #_"BitcoinSerializer" serializer, #_"int" length]
        (§ super params, payload, serializer, length)
        this
    )

    #_public
    (§ constructor GetDataMessage [#_"NetworkParameters" params]
        (§ super params)
        this
    )

    #_public
    (§ method #_"void" addTransaction [#_"Sha256Hash" hash]
        (.. this (addItem (InventoryItem. :InventoryItemType'TRANSACTION, hash)))
        nil
    )

    #_public
    (§ method #_"void" addBlock [#_"Sha256Hash" hash]
        (.. this (addItem (InventoryItem. :InventoryItemType'BLOCK, hash)))
        nil
    )

    #_public
    (§ method #_"void" addFilteredBlock [#_"Sha256Hash" hash]
        (.. this (addItem (InventoryItem. :InventoryItemType'FILTERED_BLOCK, hash)))
        nil
    )

    #_public
    (§ method #_"Sha256Hash" getHashOf [#_"int" i]
        (.. this (getItems) (get i) :hash)
    )
)

;;;
 ; The "getheaders" command is structurally identical to "getblocks", but has different meaning.  On receiving this
 ; message a Bitcoin node returns matching blocks up to the limit, but without the bodies.  It is useful as an
 ; optimization: when your wallet does not contain any keys created before a particular time, you don't have to download
 ; the bodies for those blocks because you know there are no relevant transactions.
 ;
 ; Instances of this class are not safe for use by multiple threads.
 ;;
#_public
(§ class GetHeadersMessage (§ extends GetBlocksMessage)
    #_public
    (§ constructor GetHeadersMessage [#_"NetworkParameters" params, #_"List<Sha256Hash>" locator, #_"Sha256Hash" __stopHash]
        (§ super params, locator, __stopHash)
        this
    )

    #_public
    #_throws #_[ "ProtocolException" ]
    (§ constructor GetHeadersMessage [#_"NetworkParameters" params, #_"byte[]" payload]
        (§ super params, payload)
        this
    )

    #_override
    #_public
    (§ method #_"String" toString []
        (str "getheaders: " (.. Utils'SPACE_JOINER (join (:locator this))))
    )

    ;;;
     ; Compares two getheaders messages.  Note that even though they are structurally identical a GetHeadersMessage
     ; will not compare equal to a GetBlocksMessage containing the same data.
     ;;
    #_override
    #_public
    (§ method #_"boolean" equals [#_"Object" o]
        (cond
            (= this o) true
            (or (nil? o) (not= (getClass) (.. o (getClass)))) false
            :else (let [#_"GetHeadersMessage" other (cast GetHeadersMessage o)]
                (and (= (:version this) (:version other)) (.. (:stop-hash this) (equals (:stop-hash other))) (= (.. (:locator this) (size)) (.. (:locator other) (size))) (.. (:locator this) (containsAll (:locator other)))) ;; ignores locator ordering
            )
        )
    )

    #_override
    #_public
    (§ method #_"int" hashCode []
        (let [#_"int" __hashCode (bit-xor (int (:version this)) (.. "getheaders" (hashCode)) (.. (:stop-hash this) (hashCode)))]
            (doseq [#_"Sha256Hash" l (:locator this)]
                (§ ass __hashCode (bit-xor __hashCode (.. l (hashCode)))) ;; ignores locator ordering
            )
            __hashCode
        )
    )
)

;;;
 ; A protocol message that contains a repeated series of block headers, sent in response to the "getheaders" command.
 ; This is useful when you want to traverse the chain but know you don't care about the block contents, for example,
 ; because you have a freshly created wallet with no keys.
 ;
 ; Instances of this class are not safe for use by multiple threads.
 ;;
#_public
(§ class HeadersMessage (§ extends Message)
    #_private
    #_static
    (def- #_"Logger" HeadersMessage'log (LoggerFactory/getLogger HeadersMessage))

    ;; The main client will never send us more than this number of headers.
    #_public
    #_static
    (def #_"int" HeadersMessage'MAX_HEADERS 2000)

    #_private
    (§ field- #_"List<Block>" :block-headers)

    #_public
    #_throws #_[ "ProtocolException" ]
    (§ constructor HeadersMessage [#_"NetworkParameters" params, #_"byte[]" payload]
        (§ super params, payload, 0)
        this
    )

    #_public
    #_throws #_[ "ProtocolException" ]
    (§ constructor HeadersMessage [#_"NetworkParameters" params, #_"Block..." headers]
        (§ super params)
        (§ assoc this :block-headers (Arrays/asList headers))
        this
    )

    #_public
    #_throws #_[ "ProtocolException" ]
    (§ constructor HeadersMessage [#_"NetworkParameters" params, #_"List<Block>" headers]
        (§ super params)
        (§ assoc this :block-headers headers)
        this
    )

    #_override
    #_public
    (§ method #_"void" bitcoinSerializeToStream [#_"ByteArrayOutputStream" baos]
        (.. baos (write (.. (VarInt. (.. (:block-headers this) (size))) (encode))))
        (doseq [#_"Block" header (:block-headers this)]
            (.. header (cloneAsHeader) (bitcoinSerializeToStream baos))
            (.. baos (write 0))
        )
        nil
    )

    #_override
    #_protected
    #_throws #_[ "ProtocolException" ]
    (§ method #_"void" parse []
        (let [#_"long" __numHeaders (.. this (readVarInt))]
            (when (< HeadersMessage'MAX_HEADERS __numHeaders)
                (throw (ProtocolException. (str "Too many headers: got " __numHeaders " which is larger than " HeadersMessage'MAX_HEADERS)))
            )

            (§ assoc this :block-headers (ArrayList. #_"<>"))
            (let [#_"BitcoinSerializer" serializer (BitcoinSerializer. (:params this), true)]

                (loop-when-recur [#_"int" i 0] (< i __numHeaders) [(inc i)]
                    (let [#_"Block" __newBlockHeader (.. serializer (makeBlock (:payload this), (:cursor this), Message'UNKNOWN_LENGTH))]
                        (when (.. __newBlockHeader (hasTransactions))
                            (throw (ProtocolException. "Block header does not end with a nil byte"))
                        )

                        (§ update this :cursor + (:optimal-encoding-message-size __newBlockHeader))
                        (.. (:block-headers this) (add __newBlockHeader))
                    )
                )

                (when (= (:length this) Message'UNKNOWN_LENGTH)
                    (§ assoc this :length (- (:cursor this) (:offset this)))
                )
            )
        )
        nil
    )

    #_public
    (§ method #_"List<Block>" getBlockHeaders []
        (:block-headers this)
    )
)

;;;
 ; Thrown to indicate that you don't have enough money available to perform the requested operation.
 ;;
#_public
(§ class InsufficientMoneyException (§ extends Exception)
    ;;; Contains the number of satoshis that would have been required to complete the operation. ;;
    #_nilable
    #_public
    (§ field #_"Coin" :missing)

    #_protected
    (§ constructor InsufficientMoneyException []
        (§ assoc this :missing nil)
        this
    )

    #_public
    (§ constructor InsufficientMoneyException [#_"Coin" missing]
        (§ this missing, (str "Insufficient money, missing " (.. missing (toFriendlyString))))
        this
    )

    #_public
    (§ constructor InsufficientMoneyException [#_"Coin" missing, #_"String" message]
        (§ super message)
        (§ assoc this :missing (ensure some? missing))
        this
    )
)

#_public
(§ class InventoryItem
    ;;;
     ; 4 byte uint32 type field + 32 byte hash
     ;;
    #_static
    (def #_"int" InventoryItem'MESSAGE_LENGTH 36)

    #_public
    #_static
    #_enum
    (def InventoryItemType'values
    #{
        :InventoryItemType'ERROR
        :InventoryItemType'TRANSACTION
        :InventoryItemType'BLOCK
        :InventoryItemType'FILTERED_BLOCK
    })

    #_public
    (§ field #_"InventoryItemType" :type)
    #_public
    (§ field #_"Sha256Hash" :hash)

    #_public
    (§ constructor InventoryItem [#_"InventoryItemType" type, #_"Sha256Hash" hash]
        (§ assoc this :type type)
        (§ assoc this :hash hash)
        this
    )

    #_override
    #_public
    (§ method #_"String" toString []
        (str (:type this) ": " (:hash this))
    )

    #_override
    #_public
    (§ method #_"boolean" equals [#_"Object" o]
        (cond
            (= this o) true
            (or (nil? o) (not= (getClass) (.. o (getClass)))) false
            :else (let [#_"InventoryItem" other (cast InventoryItem o)]
                (and (= (:type this) (:type other)) (.. (:hash this) (equals (:hash other))))
            )
        )
    )

    #_override
    #_public
    (§ method #_"int" hashCode []
        (Objects/hashCode (:type this), (:hash this))
    )
)

;;;
 ; Represents the "inv" P2P network message.  An inv contains a list of hashes of either blocks or transactions.
 ; It's a bandwidth optimization - on receiving some data, a (fully validating) peer sends every connected peer an inv
 ; containing the hash of what it saw.  It'll only transmit the full thing if a peer asks for it with a
 ; {@link GetDataMessage}.
 ;
 ; Instances of this class are not safe for use by multiple threads.
 ;;
#_public
(§ class InventoryMessage (§ extends ListMessage)
    ;;; A hard coded constant in the protocol. ;;
    #_public
    #_static
    (def #_"int" InventoryMessage'MAX_INV_SIZE 50000)

    #_public
    #_throws #_[ "ProtocolException" ]
    (§ constructor InventoryMessage [#_"NetworkParameters" params, #_"byte[]" bytes]
        (§ super params, bytes)
        this
    )

    ;;;
     ; Deserializes an 'inv' message.
     ;
     ; @param params NetworkParameters object.
     ; @param payload Bitcoin protocol formatted byte array containing message content.
     ; @param serializer The serializer to use for this message.
     ; @param length The length of message if known.  Usually this is provided when deserializing of the wire
     ;               as the length will be provided as part of the header.  Set to Message.UNKNOWN_LENGTH, if not known.
     ; @throws ProtocolException
     ;;
    #_public
    #_throws #_[ "ProtocolException" ]
    (§ constructor InventoryMessage [#_"NetworkParameters" params, #_"byte[]" payload, #_"BitcoinSerializer" serializer, #_"int" length]
        (§ super params, payload, serializer, length)
        this
    )

    #_public
    (§ constructor InventoryMessage [#_"NetworkParameters" params]
        (§ super params)
        this
    )

    #_public
    (§ method #_"void" addBlock [#_"Block" block]
        (.. this (addItem (InventoryItem. :InventoryItemType'BLOCK, (.. block (getHash)))))
        nil
    )

    #_public
    (§ method #_"void" addTransaction [#_"Transaction" tx]
        (.. this (addItem (InventoryItem. :InventoryItemType'TRANSACTION, (.. tx (getHash)))))
        nil
    )

    ;;; Creates a new inv message for the given transactions. ;;
    #_public
    #_static
    (§ defn #_"InventoryMessage" InventoryMessage'with [#_"Transaction..." txs]
        (assert-argument (< 0 (alength txs)))
        (let [#_"InventoryMessage" result (InventoryMessage. (.. (aget txs 0) (getParams)))]
            (doseq [#_"Transaction" tx txs]
                (.. result (addTransaction tx))
            )
            result
        )
    )
)

;;;
 ; Abstract superclass of classes with list based payload, i.e. InventoryMessage and GetDataMessage.
 ;
 ; Instances of this class are not safe for use by multiple threads.
 ;;
#_public
#_abstract
(§ class ListMessage (§ extends Message)
    #_public
    #_static
    (def #_"long" ListMessage'MAX_INVENTORY_ITEMS 50000)

    #_private
    (§ field- #_"long" :array-len)
    ;; For some reason the compiler complains if this is inside InventoryItem.
    #_protected
    (§ field #_"List<InventoryItem>" :items)

    #_public
    #_throws #_[ "ProtocolException" ]
    (§ constructor ListMessage [#_"NetworkParameters" params, #_"byte[]" bytes]
        (§ super params, bytes, 0)
        this
    )

    #_public
    #_throws #_[ "ProtocolException" ]
    (§ constructor ListMessage [#_"NetworkParameters" params, #_"byte[]" payload, #_"BitcoinSerializer" serializer, #_"int" length]
        (§ super params, payload, 0, serializer, length)
        this
    )

    #_public
    (§ constructor ListMessage [#_"NetworkParameters" params]
        (§ super params)

        (§ assoc this :items (ArrayList. #_"<>"))
        (§ assoc this :length 1) ;; length of 0 varint
        this
    )

    #_public
    (§ method #_"List<InventoryItem>" getItems []
        (Collections/unmodifiableList (:items this))
    )

    #_public
    (§ method #_"void" addItem [#_"InventoryItem" item]
        (.. this (unCache))
        (§ assoc this :length (- (:length this) (VarInt'sizeOf (.. (:items this) (size)))))
        (.. (:items this) (add item))
        (§ assoc this :length (+ (:length this) (VarInt'sizeOf (.. (:items this) (size))) InventoryItem'MESSAGE_LENGTH))
        nil
    )

    #_public
    (§ method #_"void" removeItem [#_"int" index]
        (.. this (unCache))
        (§ assoc this :length (- (:length this) (VarInt'sizeOf (.. (:items this) (size)))))
        (.. (:items this) (remove index))
        (§ assoc this :length (+ (:length this) (VarInt'sizeOf (.. (:items this) (size))) (- InventoryItem'MESSAGE_LENGTH)))
        nil
    )

    #_override
    #_protected
    #_throws #_[ "ProtocolException" ]
    (§ method #_"void" parse []
        (§ assoc this :array-len (.. this (readVarInt)))
        (when (< ListMessage'MAX_INVENTORY_ITEMS (:array-len this))
            (throw (ProtocolException. (str "Too many items in INV message: " (:array-len this))))
        )
        (§ assoc this :length (int (+ (- (:cursor this) (:offset this)) (* (:array-len this) InventoryItem'MESSAGE_LENGTH))))

        ;; An inv is vector<CInv> where CInv is int+hash.  The int is either 1 or 2 for tx or block.
        (§ assoc this :items (ArrayList. #_"<>" (int (:array-len this))))
        (loop-when-recur [#_"int" i 0] (< i (:array-len this)) [(inc i)]
            (when (< (alength (:payload this)) (+ (:cursor this) InventoryItem'MESSAGE_LENGTH))
                (throw (ProtocolException. "Ran off the end of the INV"))
            )

            (let [#_"int" __typeCode (int (.. this (readUint32)))
                  ;; see ppszTypeName in net.h
                  #_"InventoryItemType" type
                    (case __typeCode
                        0 :InventoryItemType'ERROR
                        1 :InventoryItemType'TRANSACTION
                        2 :InventoryItemType'BLOCK
                        3 :InventoryItemType'FILTERED_BLOCK
                        (throw (ProtocolException. (str "Unknown CInv type: " __typeCode)))
                    )]
                (.. (:items this) (add (InventoryItem. type, (.. this (readHash)))))
            )
        )
        (§ assoc this :payload nil)
        nil
    )

    #_override
    #_public
    (§ method #_"void" bitcoinSerializeToStream [#_"ByteArrayOutputStream" baos]
        (.. baos (write (.. (VarInt. (.. (:items this) (size))) (encode))))
        (doseq [#_"InventoryItem" i (:items this)]
            ;; Write out the type code.
            (Utils'uint32ToByteStreamLE (.. (:type i) (ordinal)), baos)
            ;; And now the hash.
            (.. baos (write (.. (:hash i) (getReversedBytes))))
        )
        nil
    )

    #_override
    #_public
    (§ method #_"boolean" equals [#_"Object" o]
        (cond
            (= this o) true
            (or (nil? o) (not= (getClass) (.. o (getClass)))) false
            :else (.. (:items this) (equals (:items (cast ListMessage o))))
        )
    )

    #_override
    #_public
    (§ method #_"int" hashCode []
        (.. (:items this) (hashCode))
    )
)

;;;
 ; The "mempool" message asks a remote peer to announce all transactions in its memory pool, possibly restricted by
 ; any Bloom filter set on the connection.  The list of transaction hashes comes back in an inv message.  Note that
 ; this is different to the {@link TxConfidenceTable} object which doesn't try to keep track of all pending transactions,
 ; it's just a holding area for transactions that a part of the app may find interesting.  The mempool message has
 ; no fields.
 ;
 ; Instances of this class are not safe for use by multiple threads.
 ;;
#_public
(§ class MemoryPoolMessage (§ extends Message)
    #_override
    #_protected
    #_throws #_[ "ProtocolException" ]
    (§ method #_"void" parse []
        nil
    )

    #_override
    #_protected
    (§ method #_"void" bitcoinSerializeToStream [#_"ByteArrayOutputStream" baos]
        nil
    )
)

;;;
 ; A Message is a data structure that can be serialized/deserialized using the Bitcoin serialization format.
 ; Specific types of messages that are used both in the block chain, and on the wire, are derived from this class.
 ;
 ; Instances of this class are not safe for use by multiple threads.
 ;;
#_public
#_abstract
(§ class Message
    #_private
    #_static
    (def- #_"Logger" Message'log (LoggerFactory/getLogger Message))

    #_public
    #_static
    (def #_"int" Message'MAX_SIZE 0x02000000) ;; 32MB

    #_public
    #_static
    (def #_"int" Message'UNKNOWN_LENGTH Integer/MIN_VALUE)

    ;; Useful to ensure serialize/deserialize are consistent with each other.
    #_private
    #_static
    (def- #_"boolean" Message'SELF_CHECK false)

    ;; The offset is how many bytes into the provided byte array this message payload starts at.
    #_protected
    (§ field #_"int" :offset)
    ;; The cursor keeps track of where we are in the byte array as we parse it.
    ;; Note that it's relative to the start of the array NOT the start of the message payload.
    #_protected
    (§ field #_"int" :cursor)

    #_protected
    (§ field #_"int" :length Message'UNKNOWN_LENGTH)

    ;; The raw message payload bytes themselves.
    #_protected
    (§ field #_"byte[]" :payload)

    #_protected
    (§ field #_"boolean" :recached false)
    #_protected
    (§ field #_"BitcoinSerializer" :serializer)

    #_protected
    (§ field #_"int" :protocol-version)

    #_protected
    (§ field #_"NetworkParameters" :params)

    #_protected
    (§ constructor Message [#_"NetworkParameters" params]
        (§ assoc this :params params)
        (§ assoc this :serializer (:default-serializer params))
        this
    )

    #_protected
    #_throws #_[ "ProtocolException" ]
    (§ constructor Message [#_"NetworkParameters" params, #_"byte[]" payload, #_"int" offset, #_"int" __protocolVersion]
        (§ this params, payload, offset, __protocolVersion, (:default-serializer params), Message'UNKNOWN_LENGTH)
        this
    )

    ;;;
     ; @param params NetworkParameters object.
     ; @param payload Bitcoin protocol formatted byte array containing message content.
     ; @param offset The location of the first payload byte within the array.
     ; @param protocolVersion Bitcoin protocol version.
     ; @param serializer The serializer to use for this message.
     ; @param length The length of message payload if known.  Usually this is provided when deserializing of the wire
     ;               as the length will be provided as part of the header.  Set to Message.UNKNOWN_LENGTH, if not known.
     ; @throws ProtocolException
     ;;
    #_protected
    #_throws #_[ "ProtocolException" ]
    (§ constructor Message [#_"NetworkParameters" params, #_"byte[]" payload, #_"int" offset, #_"int" __protocolVersion, #_"BitcoinSerializer" serializer, #_"int" length]
        (§ assoc this :serializer serializer)
        (§ assoc this :protocol-version __protocolVersion)
        (§ assoc this :params params)
        (§ assoc this :payload payload)
        (§ assoc this :cursor (§ assoc this :offset offset))
        (§ assoc this :length length)

        (.. this (parse))

        (when (= (:length this) Message'UNKNOWN_LENGTH)
            (assert-state false, "Length field has not been set in constructor for %s after parse.", (.. (getClass) (getSimpleName)))
        )

        (when Message'SELF_CHECK
            (.. this (selfCheck payload, offset))
        )

        (when (not (:parse-retain serializer))
            (§ assoc this :payload nil)
        )
        this
    )

    #_private
    (§ method- #_"void" selfCheck [#_"byte[]" payload, #_"int" offset]
        (when (not (instance? VersionMessage this))
            (let [#_"byte[]" bytes (byte-array (- (:cursor this) offset)) _ (System/arraycopy payload, offset, bytes, 0, (- (:cursor this) offset))]
                (let [#_"byte[]" clone (.. this (bitcoinSerialize))]
                    (when (not (Arrays/equals clone, bytes))
                        (throw (RuntimeException. (str "Serialization is wrong: \n" (.. Utils'HEX (encode clone)) " vs \n" (.. Utils'HEX (encode bytes)))))
                    )
                )
            )
        )
        nil
    )

    #_protected
    #_throws #_[ "ProtocolException" ]
    (§ constructor Message [#_"NetworkParameters" params, #_"byte[]" payload, #_"int" offset]
        (§ this params, payload, offset, ProtocolVersion'CURRENT, (:default-serializer params), Message'UNKNOWN_LENGTH)
        this
    )

    #_protected
    #_throws #_[ "ProtocolException" ]
    (§ constructor Message [#_"NetworkParameters" params, #_"byte[]" payload, #_"int" offset, #_"BitcoinSerializer" serializer, #_"int" length]
        (§ this params, payload, offset, ProtocolVersion'CURRENT, serializer, length)
        this
    )

    ;; These methods handle the serialization/deserialization using the custom Bitcoin protocol.

    #_protected
    #_abstract
    #_throws #_[ "ProtocolException" ]
    (§ method #_"void" parse [])

    ;;;
     ; To be called before any change of internal values including any setters.  This ensures
     ; any cached byte array is removed.
     ;
     ; Child messages of this object (e.g. Transactions belonging to a Block) will not have
     ; their internal byte caches invalidated unless they are also modified internally.
     ;;
    #_protected
    (§ method #_"void" unCache []
        (§ assoc this :payload nil)
        (§ assoc this :recached false)
        nil
    )

    #_protected
    (§ method #_"void" adjustLength [#_"int" n, #_"int" adjustment]
        (condp = Message'UNKNOWN_LENGTH
            (:length this) this
            ;; Our own length is now unknown if we have an unknown length adjustment.
            adjustment (§ assoc this :length Message'UNKNOWN_LENGTH)
            ;; Also check if we will need more bytes to encode the length prefix.
            ;; The assumption here is we never call adjustLength with the same arraySize as before.
            :else (§ update this :length + adjustment (case n (0 1) n (- (VarInt'sizeOf n) (VarInt'sizeOf (dec n)))))
        )
        nil
    )

    ;;;
     ; used for unit testing
     ;;
    #_public
    (§ method #_"boolean" isCached []
        (some? (:payload this))
    )

    #_public
    (§ method #_"boolean" isRecached []
        (:recached this)
    )

    ;;;
     ; Returns a copy of the array returned by {@link Message#unsafeBitcoinSerialize()}, which is safe to mutate.
     ; If you need extra performance and can guarantee you won't write to the array, you can use the unsafe version.
     ;
     ; @return a freshly allocated serialized byte array.
     ;;
    #_public
    (§ method #_"byte[]" bitcoinSerialize []
        (let [#_"byte[]" bytes (.. this (unsafeBitcoinSerialize))
              #_"byte[]" copy (byte-array (alength bytes))]
            (System/arraycopy bytes, 0, copy, 0, (alength bytes))
            copy
        )
    )

    ;;;
     ; Serialize this message to a byte array that conforms to the bitcoin wire protocol.
     ;
     ; This method may return the original byte array used to construct this message if the
     ; following conditions are met:
     ; <ol>
     ; <li>1. The message was parsed from a byte array with parseRetain = true.</li>
     ; <li>2. The message has not been modified.</li>
     ; <li>3. The array had an offset of 0 and no surplus bytes.</li>
     ; </ol>
     ;
     ; If condition 3 is not met then an copy of the relevant portion of the array will be returned.
     ; Otherwise a full serialize will occur.  For this reason you should only use this API
     ; if you can guarantee you will treat the resulting array as read only.
     ;
     ; @return a byte array owned by this object, do NOT mutate it.
     ;;
    #_public
    (§ method #_"byte[]" unsafeBitcoinSerialize []
        ;; 1st attempt to use a cached array.
        (when (some? (:payload this))
            ;; Cached byte array is the entire message with no extras so we can return as is and avoid an array copy.
            (when (and (= (:offset this) 0) (= (:length this) (alength (:payload this))))
                (§ return (:payload this))
            )

            (let [#_"byte[]" bytes (byte-array (:length this))]
                (System/arraycopy (:payload this), (:offset this), bytes, 0, (:length this))
                (§ return bytes)
            )
        )

        ;; No cached array available so serialize parts by stream.
        (let [#_"ByteArrayOutputStream" baos (ByteArrayOutputStream. (if (< (:length this) 32) 32 (+ (:length this) 32)))]
            (.. this (bitcoinSerializeToStream baos))

            (if (-> this :serializer :parse-retain)
                ;; A free set of steak knives!
                ;; If there happens to be a call to this method we gain an opportunity to recache
                ;; the byte array and in this case it contains no bytes from parent messages.
                ;; This give a dual benefit.  Releasing references to the larger byte array so that it
                ;; it is more likely to be GC'd.  And preventing double serializations.  E.g. calculating
                ;; merkle root calls this method.  It will frequently happen prior to serializing the block
                ;; which means another call to bitcoinSerialize is coming.  If we didn't recache then internal
                ;; serialization would occur a 2nd time and every subsequent time the message is serialized.
                (do
                    (§ assoc this :payload (.. baos (toByteArray)))
                    (§ assoc this :cursor (- (:cursor this) (:offset this)))
                    (§ assoc this :offset 0)
                    (§ assoc this :recached true)
                    (§ assoc this :length (alength (:payload this)))
                    (:payload this)
                )
                ;; Record length.  If this Message wasn't parsed from a byte stream it won't have length field
                ;; set (except for static length message types).  Setting it makes future streaming more efficient
                ;; because we can preallocate the ByteArrayOutputStream buffer and avoid resizing.
                (let [#_"byte[]" bytes (.. baos (toByteArray))]
                    (§ assoc this :length (alength bytes))
                    bytes
                )
            )
        )
    )

    ;;;
     ; Serialize this message to the provided stream using the bitcoin wire format.
     ;;
    #_public
    (§ method #_"void" bitcoinSerialize [#_"ByteArrayOutputStream" baos]
        ;; 1st check for cached bytes.
        (if (and (some? (:payload this)) (not= (:length this) Message'UNKNOWN_LENGTH))
            (.. baos (write (:payload this), (:offset this), (:length this)))
            (.. this (bitcoinSerializeToStream baos))
        )
        nil
    )

    ;;;
     ; Serializes this message to the provided stream.  If you just want the raw bytes use bitcoinSerialize().
     ;;
    #_protected
    (§ method #_"void" bitcoinSerializeToStream [#_"ByteArrayOutputStream" baos]
        (.. Message'log (error "Error: {} class has not implemented bitcoinSerializeToStream method.  Generating message with no payload", (getClass)))
        nil
    )

    ;;;
     ; This method is a NOP for all classes except Block and Transaction.  It is only declared in Message
     ; so BitcoinSerializer can avoid 2 instanceof checks + a casting.
     ;;
    #_public
    (§ method #_"Sha256Hash" getHash []
        (throw (UnsupportedOperationException.))
    )

    ;;;
     ; This returns a correct value by parsing the message.
     ;;
    #_public
    (§ method #_"int" getMessageSize []
        (when (= (:length this) Message'UNKNOWN_LENGTH)
            (assert-state false, "Length field has not been set in %s.", (.. (getClass) (getSimpleName)))
        )
        (:length this)
    )

    #_protected
    #_throws #_[ "ProtocolException" ]
    (§ method #_"long" readUint32 []
        (try
            (let [#_"long" u (Utils'readUint32 (:payload this), (:cursor this))]
                (§ update this :cursor + 4)
                u
            )
            (catch ArrayIndexOutOfBoundsException e
                (throw (ProtocolException. e))
            )
        )
    )

    #_protected
    #_throws #_[ "ProtocolException" ]
    (§ method #_"long" readInt64 []
        (try
            (let [#_"long" u (Utils'readInt64 (:payload this), (:cursor this))]
                (§ update this :cursor + 8)
                u
            )
            (catch ArrayIndexOutOfBoundsException e
                (throw (ProtocolException. e))
            )
        )
    )

    #_protected
    #_throws #_[ "ProtocolException" ]
    (§ method #_"BigInteger" readUint64 []
        ;; Java does not have an unsigned 64 bit type. So scrape it off the wire then flip.
        (BigInteger. (Utils'reverseBytes (.. this (readBytes 8))))
    )

    #_protected
    #_throws #_[ "ProtocolException" ]
    (§ method #_"long" readVarInt []
        (.. this (readVarInt 0))
    )

    #_protected
    #_throws #_[ "ProtocolException" ]
    (§ method #_"long" readVarInt [#_"int" offset]
        (try
            (let [#_"VarInt" varint (VarInt. (:payload this), (+ (:cursor this) offset))]
                (§ update this :cursor + offset (.. varint (getOriginalSizeInBytes)))
                (:value varint)
            )
            (catch ArrayIndexOutOfBoundsException e
                (throw (ProtocolException. e))
            )
        )
    )

    #_protected
    #_throws #_[ "ProtocolException" ]
    (§ method #_"byte[]" readBytes [#_"int" length]
        (when (< Message'MAX_SIZE length)
            (throw (ProtocolException. (str "Claimed value length too large: " length)))
        )

        (try
            (let [#_"byte[]" b (byte-array length)]
                (System/arraycopy (:payload this), (:cursor this), b, 0, length)
                (§ update this :cursor + length)
                b
            )
            (catch IndexOutOfBoundsException e
                (throw (ProtocolException. e))
            )
        )
    )

    #_protected
    #_throws #_[ "ProtocolException" ]
    (§ method #_"byte[]" readByteArray []
        (let [#_"long" len (.. this (readVarInt))]
            (.. this (readBytes (int len)))
        )
    )

    #_protected
    #_throws #_[ "ProtocolException" ]
    (§ method #_"String" readStr []
        (let [#_"long" length (.. this (readVarInt))]
            (if (= length 0) "" (Utils'toString (.. this (readBytes (int length))), "UTF-8")) ;; optimization for empty strings
        )
    )

    #_protected
    #_throws #_[ "ProtocolException" ]
    (§ method #_"Sha256Hash" readHash []
        ;; We have to flip it around, as it's been read off the wire in little endian.
        ;; Not the most efficient way to do this but the clearest.
        (Sha256Hash'wrapReversed (.. this (readBytes 32)))
    )

    #_protected
    (§ method #_"boolean" hasMoreBytes []
        (< (:cursor this) (alength (:payload this)))
    )

    ;;; Network parameters this message was created with. ;;
    #_public
    (§ method #_"NetworkParameters" getParams []
        (:params this)
    )
)

;;;
 ; Classes implementing this interface represent a monetary value, such as a Bitcoin or fiat amount.
 ;;
#_public
(§ interface Monetary
    ;;;
     ; Returns the absolute value of exponent of the value of a "smallest unit" in scientific notation.
     ; For Bitcoin, a satoshi is worth 1E-8 so this would be 8.
     ;;
    (§ method #_"int" smallestUnitExponent [])

    ;;;
     ; Returns the number of "smallest units" of this monetary value.
     ; For Bitcoin, this would be the number of satoshis.
     ;;
    (§ method #_"long" getValue [])

    (§ method #_"int" signum [])
)

#_public
#_static
(def #_"int" ProtocolVersion'MINIMUM 70000)
#_public
#_static
(def #_"int" ProtocolVersion'PONG 60001)
#_public
#_static
(def #_"int" ProtocolVersion'BLOOM_FILTER 70000)
#_public
#_static
(def #_"int" ProtocolVersion'CURRENT 70001)

;;;
 ; NetworkParameters contains the data needed for working with an instantiation of a Bitcoin chain.
 ;
 ; This is an abstract class, concrete instantiations can be found in the params package:
 ; one for the main network ({@link MainNetParams}), and one for the public test network.
 ;;
#_public
#_abstract
(§ class NetworkParameters
    ;;;
     ; The alert signing key originally owned by Satoshi, and now passed on to Gavin along with a few others.
     ;;
    #_public
    #_static
    (def #_"byte[]" NetworkParameters'SATOSHI_KEY (.. Utils'HEX (decode "04fc9702847840aaf195de8442ebecedf5b095cdbb9bc716bda9110971b28a49e0ead8564ff0db22209e0374782c093bb899692d524e9d6a6956e7c5ecbcd68284")))

    ;;; The string id of the main, production network where people trade things. ;;
    #_public
    #_static
    (def #_"String" NetworkParameters'ID_MAINNET "org.bitcoin.production")
    ;;; The string id of the testnet. ;;
    #_public
    #_static
    (def #_"String" NetworkParameters'ID_TESTNET "org.bitcoin.test")

    #_private
    #_static
    (def- #_"Logger" NetworkParameters'log (LoggerFactory/getLogger NetworkParameters))

    ;; TODO: Seed nodes should be here as well.

    ;;;
     ; Genesis block for this chain.
     ;
     ; The first block in every chain is a well known constant shared between all Bitcoin implemenetations.
     ; For a block to be valid, it must be eventually possible to work backwards to the genesis block by following
     ; the prevBlockHash pointers in the block headers.
     ;
     ; The genesis blocks for both test and main networks contain the timestamp of when they were created,
     ; and a message in the coinbase transaction.  It says,
     ; <i>"The Times 03/Jan/2009 Chancellor on brink of second bailout for banks"</i>.
     ;;
    #_protected
    (§ field #_"Block" :genesis-block)

    ;;;
     ; Maximum target represents the easiest allowable proof of work.
     ;;
    #_protected
    (§ field #_"BigInteger" :max-target)

    ;;;
     ; Default TCP port on which to connect to nodes.
     ;;
    #_protected
    (§ field #_"int" :port)

    ;;;
     ; The header bytes that identify the start of a packet on this network.
     ; Indicates message origin network and is used to seek to the next message when stream state is unknown.
     ;;
    #_protected
    (§ field #_"long" :packet-magic)

    ;;;
     ; First byte of a base58 encoded address.  See {@link Address}.
     ; This is the same as acceptableAddressCodes[0] and is the one used for "normal" addresses.
     ; Other types of address may be encountered with version codes found in the acceptableAddressCodes array.
     ;;
    #_protected
    (§ field #_"int" :address-header)

    ;;;
     ; First byte of a base58 encoded P2SH address.  P2SH addresses are defined as part of BIP0013.
     ;;
    #_protected
    (§ field #_"int" :p2sh-header)

    ;;;
     ; How many blocks pass between difficulty adjustment periods.  Bitcoin standardises this to be 2016.
     ;;
    #_protected
    (§ field #_"int" :interval)

    ;;;
     ; How much time in seconds is supposed to pass between "interval" blocks.  If the actual elapsed time is
     ; significantly different from this value, the network difficulty formula will produce a different value.
     ; Both test and main Bitcoin networks use 2 weeks (1209600 seconds).
     ;;
    #_protected
    (§ field #_"int" :target-timespan)

    ;;;
     ; The key used to sign {@link AlertMessage}s.
     ; You can use {@link ECKey#verify(byte[], byte[], byte[])} to verify signatures using it.
     ;;
    #_protected
    (§ field #_"byte[]" :alert-signing-key)

    ;;;
     ; 4 byte header for BIP32 (HD) wallet - public key part.
     ;;
    #_protected
    (§ field #_"int" :bip32-header-pub)

    ;;;
     ; 4 byte header for BIP32 (HD) wallet - private key part.
     ;;
    #_protected
    (§ field #_"int" :bip32-header-priv)

    ;;; Used to check majorities for block version upgrade. ;;

    ;;;
     ; The number of blocks in the last {@link getMajorityWindow()} blocks at which to trigger a notice
     ; to the user to upgrade their client, where the client does not understand those blocks.
     ;;
    #_protected
    (§ field #_"int" :majority-enforce-block-upgrade)

    ;;;
     ; The number of blocks in the last {@link getMajorityWindow()} blocks at which to enforce the requirement
     ; that all new blocks are of the newer type (i.e. outdated blocks are rejected).
     ;;
    #_protected
    (§ field #_"int" :majority-reject-block-outdated)

    ;;;
     ; The sampling window from which the version numbers of blocks are taken
     ; in order to determine if a new block version is now the majority.
     ;;
    #_protected
    (§ field #_"int" :majority-window)

    ;;;
     ; A Java package style string acting as unique ID for these parameters.
     ; This may be null for old deserialized wallets.  In that case we derive it heuristically
     ; by looking at the port number.
     ;;
    #_protected
    (§ field #_"String" :id)

    ;;;
     ; The depth of blocks required for a coinbase transaction to be spendable.
     ;;
    #_protected
    (§ field #_"int" :spendable-coinbase-depth)
    #_protected
    (§ field #_"int" :subsidy-decrease-block-count)

    ;;;
     ; The version codes that prefix addresses which are acceptable on this network.  Although Satoshi intended these
     ; to be used for "versioning", in fact they are today used to discriminate what kind of data is contained in the
     ; address and to prevent accidentally sending coins across chains which would destroy them.
     ;;
    #_protected
    (§ field #_"int[]" :acceptable-address-codes)

    ;;;
     ; DNS names that when resolved, give IP addresses of active peers.
     ;;
    #_protected
    (§ field #_"String[]" :dns-seeds)

    ;;;
     ; IP address of active peers.
     ;;
    #_protected
    (§ field #_"int[]" :addr-seeds)

    #_protected
    (§ field #_"String[]" :textual-checkpoints)
    #_protected
    (§ field #_"Map<Integer, Sha256Hash>" :checkpoints (HashMap. #_"<>"))

    #_protected
    (§ field #_"BitcoinSerializer" :default-serializer)

    #_protected
    (§ constructor NetworkParameters []
        (§ assoc this :alert-signing-key NetworkParameters'SATOSHI_KEY)
        (§ assoc this :genesis-block (NetworkParameters'createGenesis this))
        (§ assoc this :default-serializer (BitcoinSerializer. this, false))
        this
    )

    #_private
    #_static
    (§ defn- #_"Block" NetworkParameters'createGenesis [#_"NetworkParameters" param]
        (let [#_"Transaction" tx (Transaction. param)
              ;; A script containing the difficulty bits and the following message: "The Times 03/Jan/2009 Chancellor on brink of second bailout for banks".
              #_"byte[]" bytes (.. Utils'HEX (decode "04ffff001d0104455468652054696d65732030332f4a616e2f32303039204368616e63656c6c6f72206f6e206272696e6b206f66207365636f6e64206261696c6f757420666f722062616e6b73"))]
            (.. tx (addInput (TransactionInput. param, tx, bytes)))
            (let [#_"ByteArrayOutputStream" baos (ByteArrayOutputStream.)]
                (Script'writeBytes baos, (.. Utils'HEX (decode "04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f")))
                (.. baos (write ScriptOpCodes'OP_CHECKSIG))
                (.. tx (addOutput (TransactionOutput. param, tx, Coin'FIFTY_COINS, (.. baos (toByteArray)))))
                (let [#_"Block" genesis (Block. param, Block'BLOCK_VERSION_GENESIS)]
                    (.. genesis (addTransaction tx))
                    genesis
                )
            )
        )
    )

    #_public
    #_static
    (def #_"int" NetworkParameters'TARGET_TIMESPAN (* 14 24 60 60)) ;; 2 weeks per difficulty cycle, on average.
    #_public
    #_static
    (def #_"int" NetworkParameters'TARGET_SPACING (* 10 60)) ;; 10 minutes per block.
    #_public
    #_static
    (def #_"int" NetworkParameters'INTERVAL (quot NetworkParameters'TARGET_TIMESPAN NetworkParameters'TARGET_SPACING))

    #_public
    #_static
    (def #_"int" NetworkParameters'REWARD_HALVING_INTERVAL 210000)

    ;;;
     ; Blocks with a timestamp after this should enforce BIP 16, aka "Pay to script hash".  This BIP changed
     ; the network rules in a soft-forking manner, that is, blocks that don't follow the rules are accepted
     ; but not mined upon and thus will be quickly re-orged out as long as the majority are enforcing the rule.
     ;;
    #_public
    #_static
    (def #_"int" NetworkParameters'BIP16_ENFORCE_TIME 1333238400)

    ;;;
     ; The maximum number of coins to be generated.
     ;;
    #_public
    #_static
    (def #_"long" NetworkParameters'MAX_COINS 21000000)

    ;;;
     ; The maximum money to be generated.
     ;;
    #_public
    #_static
    (def #_"Coin" NetworkParameters'MAX_MONEY (.. Coin'COIN (multiply NetworkParameters'MAX_COINS)))

    #_override
    #_public
    (§ method #_"boolean" equals [#_"Object" o]
        (cond
            (= this o) true
            (or (nil? o) (not= (getClass) (.. o (getClass)))) false
            :else (= (:id this) (:id (cast NetworkParameters o)))
        )
    )

    #_override
    #_public
    (§ method #_"int" hashCode []
        (Objects/hashCode (:id this))
    )

    ;;; Returns the network parameters for the given string ID or NULL if not recognized. ;;
    #_nilable
    #_public
    #_static
    (§ defn #_"NetworkParameters" NetworkParameters'fromID [#_"String" id]
        (condp = id
            NetworkParameters'ID_MAINNET     MainNetParams'INSTANCE
            NetworkParameters'ID_TESTNET     TestNetParams'INSTANCE
            nil
        )
    )

    ;;;
     ; Checks if we are at a reward halving point.
     ;
     ; @param height The height of the previous stored block.
     ; @return if this is a reward halving point.
     ;;
    #_public
    (§ method #_"boolean" isRewardHalvingPoint [#_"int" height]
        (= (rem (inc height) NetworkParameters'REWARD_HALVING_INTERVAL) 0)
    )

    ;;;
     ; Checks if we are at a difficulty transition point.
     ;
     ; @param height The height of the previous stored block.
     ; @return if this is a difficulty transition point.
     ;;
    #_public
    (§ method #_"boolean" isDifficultyTransitionPoint [#_"int" height]
        (= (rem (inc height) (:interval this)) 0)
    )

    ;;;
     ; Throws an exception if the block's difficulty is not correct.
     ;
     ; @throws VerificationException if the block's difficulty is not correct.
     ;;
    #_public
    #_throws #_[ "VerificationException", "BlockStoreException" ]
    (§ method #_"void" checkDifficultyTransitions [#_"StoredBlock" __storedPrev, #_"Block" __nextBlock, #_"BlockStore" __blockStore]
        (let [#_"Block" prev (.. __storedPrev (getHeader))]

            ;; Is this supposed to be a difficulty transition point?
            (if (not (.. this (isDifficultyTransitionPoint (.. __storedPrev (getHeight)))))
                ;; No ... so check the difficulty didn't actually change.
                (when (not= (.. __nextBlock (getDifficultyTarget)) (.. prev (getDifficultyTarget)))
                    (throw (VerificationException. (str "Unexpected change in difficulty at height " (.. __storedPrev (getHeight)) ": " (Long/toHexString (.. __nextBlock (getDifficultyTarget))) " vs " (Long/toHexString (.. prev (getDifficultyTarget))))))
                )
                ;; We need to find a block far back in the chain.  It's OK that this is expensive because it only occurs every
                ;; two weeks after the initial block chain download.
                (let [#_"Stopwatch" watch (Stopwatch/createStarted)
                      #_"Sha256Hash" hash (.. prev (getHash)) #_"StoredBlock" cursor nil #_"int" interval (:interval this)]

                    (loop-when-recur [#_"int" i 0] (< i interval) [(inc i)]
                        (§ ass cursor (.. __blockStore (get hash)))
                        (when (nil? cursor)
                            ;; This should never happen.  If it does, it means we are following an incorrect or busted chain.
                            (throw (VerificationException. (str "Difficulty transition point but we did not find a way back to the last transition point. Not found: " hash)))
                        )
                        (§ ass hash (.. cursor (getHeader) (getPrevBlockHash)))
                    )
                    (assert-state (and (some? cursor) (.. this (isDifficultyTransitionPoint (dec (.. cursor (getHeight)))))), "Didn't arrive at a transition point.")

                    (.. watch (stop))
                    (when (< 50 (.. watch (elapsed TimeUnit/MILLISECONDS)))
                        (.. NetworkParameters'log (info "Difficulty transition traversal took {}", watch))
                    )

                    (let [#_"int" timespan (int (- (.. prev (getTimeSeconds)) (.. cursor (getHeader) (getTimeSeconds))))
                          ;; Limit the adjustment step.
                          #_"int" tts (:target-timespan this) timespan (min (max (quot tts 4) timespan) (* tts 4))
                          #_"BigInteger" __newTarget (.. (Utils'decodeCompactBits (.. prev (getDifficultyTarget))) (multiply (BigInteger/valueOf timespan)) (divide (BigInteger/valueOf tts)))]

                        (when (< 0 (.. __newTarget (compareTo (:max-target this))))
                            (.. NetworkParameters'log (info "Difficulty hit proof of work limit: {}", (.. __newTarget (toString 16))))
                            (§ ass __newTarget (:max-target this))
                        )

                        (let [#_"int" accuracy (- (int (>>> (.. __nextBlock (getDifficultyTarget)) 24)) 3)
                              #_"long" __receivedTargetCompact (.. __nextBlock (getDifficultyTarget))
                              ;; The calculated difficulty is to a higher precision than received, so reduce here.
                              __newTarget (.. __newTarget (and (.. (BigInteger/valueOf 0xffffff) (shiftLeft (* accuracy 8)))))
                              #_"long" __newTargetCompact (Utils'encodeCompactBits __newTarget)]

                            (when (not= __newTargetCompact __receivedTargetCompact)
                                (throw (VerificationException. (str "Network provided difficulty bits do not match what was calculated: " (Long/toHexString __newTargetCompact) " vs " (Long/toHexString __receivedTargetCompact))))
                            )
                        )
                    )
                )
            )
        )
        nil
    )

    ;;;
     ; Returns true if the block height is either not a checkpoint, or is a checkpoint and the hash matches.
     ;;
    #_public
    (§ method #_"boolean" passesCheckpoint [#_"int" height, #_"Sha256Hash" hash]
        (let [#_"Sha256Hash" __checkpointHash (.. (:checkpoints this) (get height))]
            (or (nil? __checkpointHash) (.. __checkpointHash (equals hash)))
        )
    )

    ;;;
     ; Returns true if the given height has a recorded checkpoint.
     ;;
    #_public
    (§ method #_"boolean" isCheckpoint [#_"int" height]
        (let [#_"Sha256Hash" __checkpointHash (.. (:checkpoints this) (get height))]
            (some? __checkpointHash)
        )
    )

    ;;;
     ; If we are running in testnet-in-a-box mode, we allow connections to nodes with 0 non-genesis blocks.
     ;;
    #_public
    (§ method #_"boolean" allowEmptyPeerChain []
        true
    )

    ;;;
     ; Returns the number of coins that will be produced in total, on this network.
     ; Where not applicable, a very large number of coins is returned
     ; instead (i.e. the main coin issue for Dogecoin).
     ;;
    #_public
    (§ method #_"Coin" getMaxMoney []
        NetworkParameters'MAX_MONEY
    )

    ;;;
     ; Any standard (i.e. pay-to-address) output smaller than this value will
     ; most likely be rejected by the network.
     ;;
    #_public
    (§ method #_"Coin" getMinNonDustOutput []
        Transaction'MIN_NONDUST_OUTPUT
    )

    ;;;
     ; Returns whether this network has a maximum number of coins (finite supply) or not.
     ; Always returns true for Bitcoin, but exists to be overridden for other networks.
     ;;
    #_public
    (§ method #_"boolean" hasMaxMoney []
        true
    )
    ;;;
     ; The flags indicating which block validation tests should be applied to
     ; the given block.  Enables support for alternative blockchains which enable
     ; tests based on different criteria.
     ;
     ; @param block Block to determine flags for.
     ; @param height Height of the block, if known, null otherwise.  Returned
     ; tests should be a safe subset if block height is unknown.
     ;;
    #_public
    (§ method #_"EnumSet<BlockVerifyFlag>" getBlockVerificationFlags [#_"Block" block, #_"VersionTally" tally, #_"Integer" height]
        (let [#_"EnumSet<BlockVerifyFlag>" flags (EnumSet/noneOf BlockVerifyFlag)]

            (when (.. block (isBIP34))
                (let [#_"Integer" count (.. tally (getCountAtOrAbove Block'BLOCK_VERSION_BIP34))]
                    (when (and (some? count) (<= (:majority-enforce-block-upgrade this) count))
                        (.. flags (add :BlockVerifyFlag'HEIGHT_IN_COINBASE))
                    )
                )
            )

            flags
        )
    )

    ;;;
     ; The flags indicating which script validation tests should be applied to
     ; the given transaction.  Enables support for alternative blockchains which enable
     ; tests based on different criteria.
     ;
     ; @param block Block the transaction belongs to.
     ; @param transaction to determine flags for.
     ; @param height Height of the block, if known, null otherwise.  Returned
     ; tests should be a safe subset if block height is unknown.
     ;;
    #_public
    (§ method #_"EnumSet<ScriptVerifyFlag>" getTransactionVerificationFlags [#_"Block" block, #_"Transaction" transaction, #_"VersionTally" tally, #_"Integer" height]
        (let [#_"EnumSet<ScriptVerifyFlag>" __verifyFlags (EnumSet/noneOf ScriptVerifyFlag)]
            (when (<= NetworkParameters'BIP16_ENFORCE_TIME (.. block (getTimeSeconds)))
                (.. __verifyFlags (add :ScriptVerifyFlag'P2SH))
            )

            ;; Start enforcing CHECKLOCKTIMEVERIFY (BIP65) for block.nVersion=4 blocks,
            ;; when 75% of the network has been upgraded:
            (when (and (<= Block'BLOCK_VERSION_BIP65 (.. block (getVersion))) (< (:majority-enforce-block-upgrade this) (.. tally (getCountAtOrAbove Block'BLOCK_VERSION_BIP65))))
                (.. __verifyFlags (add :ScriptVerifyFlag'CHECKLOCKTIMEVERIFY))
            )

            __verifyFlags
        )
    )
)

;;;
 ; Sent by a peer when a getdata request doesn't find the requested data in the mempool.  It has the same format
 ; as an inventory message and lists the hashes of the missing items.
 ;
 ; Instances of this class are not safe for use by multiple threads.
 ;;
#_public
(§ class NotFoundMessage (§ extends InventoryMessage)
    #_public
    #_static
    (def #_"int" NotFoundMessage'MIN_PROTOCOL_VERSION 70001)

    #_public
    (§ constructor NotFoundMessage [#_"NetworkParameters" params]
        (§ super params)
        this
    )

    #_public
    #_throws #_[ "ProtocolException" ]
    (§ constructor NotFoundMessage [#_"NetworkParameters" params, #_"byte[]" payload]
        (§ super params, payload)
        this
    )

    #_public
    (§ constructor NotFoundMessage [#_"NetworkParameters" params, #_"List<InventoryItem>" items]
        (§ super params)
        (§ assoc this :items (ArrayList. #_"<>" items))
        this
    )
)

;;;
 ; A data structure that contains proofs of block inclusion for one or more transactions, in an efficient manner.
 ;
 ; The encoding works as follows: we traverse the tree in depth-first order, storing a bit for each traversed node,
 ; signifying whether the node is the parent of at least one matched leaf txid (or a matched txid itself).  In case we
 ; are at the leaf level, or this bit is 0, its merkle node hash is stored, and its children are not explored further.
 ; Otherwise, no hash is stored, but we recurse into both (or the only) child branch.  During decoding, the same
 ; depth-first traversal is performed, consuming bits and hashes as they were written during encoding.
 ;
 ; The serialization is fixed and provides a hard guarantee about the encoded size,
 ; <tt>SIZE &lt;= 10 + ceil(32.25 * N)</tt> where N represents the number of leaf nodes of the partial tree.
 ; N itself is bounded by:
 ;
 ; N &lt;= total_transactions
 ; N &lt;= 1 + matched_transactions * tree_height
 ;
 ; <pre>The serialization format:
 ;  - uint32     total_transactions (4 bytes)
 ;  - varint     number of hashes (1-3 bytes)
 ;  - uint256[]  hashes in depth-first order (&lt;= 32*N bytes)
 ;  - varint     number of bytes of flag bits (1-3 bytes)
 ;  - byte[]     flag bits, packed per 8 in a byte, least significant bit first (&lt;= 2*N-1 bits)
 ; The size constraints follow from this.</pre>
 ;
 ; Instances of this class are not safe for use by multiple threads.
 ;;
#_public
(§ class PartialMerkleTree (§ extends Message)
    ;; the total number of transactions in the block
    #_private
    (§ field- #_"int" :transaction-count)

    ;; node-is-parent-of-matched-txid bits
    #_private
    (§ field- #_"byte[]" :matched-child-bits)

    ;; txids and internal hashes
    #_private
    (§ field- #_"List<Sha256Hash>" :hashes)

    #_public
    #_throws #_[ "ProtocolException" ]
    (§ constructor PartialMerkleTree [#_"NetworkParameters" params, #_"byte[]" payload, #_"int" offset]
        (§ super params, payload, offset)
        this
    )

    ;;;
     ; Constructs a new PMT with the given bit set (little endian) and the raw list of hashes including internal hashes,
     ; taking ownership of the list.
     ;;
    #_public
    (§ constructor PartialMerkleTree [#_"NetworkParameters" params, #_"byte[]" bits, #_"List<Sha256Hash>" hashes, #_"int" __origTxCount]
        (§ super params)

        (§ assoc this :matched-child-bits bits)
        (§ assoc this :hashes hashes)
        (§ assoc this :transaction-count __origTxCount)
        this
    )

    ;;;
     ; Calculates a PMT given the list of leaf hashes and which leaves need to be included.  The relevant interior hashes
     ; are calculated and a new PMT returned.
     ;;
    #_public
    #_static
    (§ defn #_"PartialMerkleTree" PartialMerkleTree'buildFromLeaves [#_"NetworkParameters" params, #_"byte[]" __includeBits, #_"List<Sha256Hash>" __allLeafHashes]
        ;; Calculate height of the tree.
        (let [#_"int" height (loop-when-recur [h 0] (< 1 (PartialMerkleTree'getTreeWidth (.. __allLeafHashes (size)), h)) [(inc h)] => h)
              #_"List<Boolean>" __bitList (ArrayList. #_"<>") #_"List<Sha256Hash>" hashes (ArrayList. #_"<>")]
            (PartialMerkleTree'traverseAndBuild height, 0, __allLeafHashes, __includeBits, __bitList, hashes)
            (let [#_"int" n (.. __bitList (size)) #_"byte[]" bits (byte-array (int (Math/ceil (/ n 8.0))))]
                (loop-when-recur [#_"int" i 0] (< i n) [(inc i)]
                    (when (.. __bitList (get i))
                        (Utils'setBitLE bits, i)
                    )
                )
                (PartialMerkleTree. params, bits, hashes, (.. __allLeafHashes (size)))
            )
        )
    )

    #_override
    #_public
    (§ method #_"void" bitcoinSerializeToStream [#_"ByteArrayOutputStream" baos]
        (Utils'uint32ToByteStreamLE (:transaction-count this), baos)

        (.. baos (write (.. (VarInt. (.. (:hashes this) (size))) (encode))))
        (doseq [#_"Sha256Hash" hash (:hashes this)]
            (.. baos (write (.. hash (getReversedBytes))))
        )

        (.. baos (write (.. (VarInt. (alength (:matched-child-bits this))) (encode))))
        (.. baos (write (:matched-child-bits this)))
        nil
    )

    #_override
    #_protected
    #_throws #_[ "ProtocolException" ]
    (§ method #_"void" parse []
        (§ assoc this :transaction-count (int (.. this (readUint32))))

        (let [#_"int" __nHashes (int (.. this (readVarInt)))]
            (§ assoc this :hashes (ArrayList. #_"<>" __nHashes))
            (loop-when-recur [#_"int" i 0] (< i __nHashes) [(inc i)]
                (.. (:hashes this) (add (.. this (readHash))))
            )

            (let [#_"int" __nFlagBytes (int (.. this (readVarInt)))]
                (§ assoc this :matched-child-bits (.. this (readBytes __nFlagBytes)))

                (§ assoc this :length (- (:cursor this) (:offset this)))
            )
        )
        nil
    )

    ;; Based on CPartialMerkleTree::TraverseAndBuild in Bitcoin Core.
    #_private
    #_static
    (§ defn- #_"void" PartialMerkleTree'traverseAndBuild [#_"int" height, #_"int" pos, #_"List<Sha256Hash>" __allLeafHashes, #_"byte[]" __includeBits, #_"List<Boolean>" __matchedChildBits, #_"List<Sha256Hash>" __resultHashes]
        (let [#_"boolean" __parentOfMatch false]
            ;; Is this node a parent of at least one matched hash?
            (loop-when-recur [#_"int" p (<< pos height)] (and (< p (<< (inc pos) height)) (< p (.. __allLeafHashes (size)))) [(inc p)]
                (when (Utils'checkBitLE __includeBits, p)
                    (§ ass __parentOfMatch true)
                    (§ break )
                )
            )
            ;; Store as a flag bit.
            (.. __matchedChildBits (add __parentOfMatch))
            (cond (or (= height 0) (not __parentOfMatch))
                (do
                    ;; If at height 0, or nothing interesting below, store hash and stop.
                    (.. __resultHashes (add (PartialMerkleTree'calcHash height, pos, __allLeafHashes)))
                )
                :else
                (do
                    ;; Otherwise descend into the subtrees.
                    (let [#_"int" h (dec height) #_"int" p (* pos 2)]
                        (PartialMerkleTree'traverseAndBuild h, p, __allLeafHashes, __includeBits, __matchedChildBits, __resultHashes)
                        (when (< (inc p) (PartialMerkleTree'getTreeWidth (.. __allLeafHashes (size)), h))
                            (PartialMerkleTree'traverseAndBuild h, (inc p), __allLeafHashes, __includeBits, __matchedChildBits, __resultHashes)
                        )
                    )
                )
            )
        )
        nil
    )

    #_private
    #_static
    (§ defn- #_"Sha256Hash" PartialMerkleTree'calcHash [#_"int" height, #_"int" pos, #_"List<Sha256Hash>" hashes]
        ;; Hash at height 0 is just the regular tx hash itself.
        (if (= height 0)
            (.. hashes (get pos))
            (let [#_"int" h (dec height) #_"int" p (* pos 2)
                  #_"Sha256Hash" l (PartialMerkleTree'calcHash h, p, hashes)
                  ;; Calculate right hash if not beyond the end of the array - copy left hash otherwise.
                  #_"Sha256Hash" r (if (< (inc p) (PartialMerkleTree'getTreeWidth (.. hashes (size)), h)) (PartialMerkleTree'calcHash h, (inc p), hashes) l)]
                (PartialMerkleTree'combineLeftRight (.. l (getBytes)), (.. r (getBytes)))
            )
        )
    )

    ;; Helper function to efficiently calculate the number of nodes at given height in the merkle tree.
    #_private
    #_static
    (§ defn- #_"int" PartialMerkleTree'getTreeWidth [#_"int" __transactionCount, #_"int" height]
        (>> (dec (+ __transactionCount (<< 1 height))) height)
    )

    #_private
    #_static
    (§ class- ValuesUsed
        #_public
        (§ field #_"int" :bits-used 0)
        (§ field #_"int" :hashes-used 0)
    )

    ;; Recursive function that traverses tree nodes, consuming the bits and hashes produced by TraverseAndBuild.
    ;; It returns the hash of the respective node.
    #_private
    #_throws #_[ "VerificationException" ]
    (§ method- #_"Sha256Hash" recursiveExtractHashes [#_"int" height, #_"int" pos, #_"ValuesUsed" used, #_"List<Sha256Hash>" __matchedHashes]
        ;; overflowed bits array - failure
        (when (<= (* (alength (:matched-child-bits this)) 8) (:bits-used used))
            (throw (VerificationException. "PartialMerkleTree overflowed its bits array"))
        )

        (let [#_"boolean" __parentOfMatch (Utils'checkBitLE (:matched-child-bits this), (:bits-used used))]
            (§ update used :bits-used inc)

            ;; if at height 0, or nothing interesting below, use stored hash and do not descend
            (cond (or (= height 0) (not __parentOfMatch))
                (do
                    ;; overflowed hash array - failure
                    (when (<= (.. (:hashes this) (size)) (:hashes-used used))
                        (throw (VerificationException. "PartialMerkleTree overflowed its hash array"))
                    )

                    (let [#_"Sha256Hash" hash (.. (:hashes this) (get (:hashes-used used)))]
                        (§ update used :hashes-used inc)
                        ;; in case of height 0, we have a matched txid
                        (when (and (= height 0) __parentOfMatch)
                            (.. __matchedHashes (add hash))
                        )

                        hash
                    )
                )
                :else
                (do
                    ;; otherwise, descend into the subtrees to extract matched txids and hashes
                    (let [#_"byte[]" left (.. this (recursiveExtractHashes (dec height), (* pos 2), used, __matchedHashes) (getBytes))
                          #_"byte[]" right]
                        (cond (< (inc (* pos 2)) (PartialMerkleTree'getTreeWidth (:transaction-count this), (dec height)))
                            (do
                                (§ ass right (.. this (recursiveExtractHashes (dec height), (inc (* pos 2)), used, __matchedHashes) (getBytes)))
                                (when (Arrays/equals right, left)
                                    (throw (VerificationException. "Invalid merkle tree with duplicated left/right branches"))
                                )
                            )
                            :else
                            (do
                                (§ ass right left)
                            )
                        )
                        ;; and combine them before returning
                        (PartialMerkleTree'combineLeftRight left, right)
                    )
                )
            )
        )
    )

    #_private
    #_static
    (§ defn- #_"Sha256Hash" PartialMerkleTree'combineLeftRight [#_"byte[]" left, #_"byte[]" right]
        (Sha256Hash'wrapReversed (Sha256Hash'hashTwice (Utils'reverseBytes left), 0, 32, (Utils'reverseBytes right), 0, 32))
    )

    ;;;
     ; Extracts tx hashes that are in this merkle tree and returns the merkle root of this tree.
     ;
     ; The returned root should be checked against the merkle root contained in the block header for security.
     ;
     ; @param matchedHashesOut A list which will contain the matched txn (will be cleared).
     ; @return the merkle root of this merkle tree.
     ; @throws ProtocolException if this partial merkle tree is invalid.
     ;;
    #_public
    #_throws #_[ "VerificationException" ]
    (§ method #_"Sha256Hash" getTxnHashAndMerkleRoot [#_"List<Sha256Hash>" __matchedHashesOut]
        (.. __matchedHashesOut (clear))

        ;; an empty set will not work
        (when (= (:transaction-count this) 0)
            (throw (VerificationException. "Got a CPartialMerkleTree with 0 transactions"))
        )
        ;; check for excessively high numbers of transactions
        (when (< (quot Block'MAX_BLOCK_SIZE 60) (:transaction-count this)) ;; 60 is the lower bound for the size of a serialized CTransaction
            (throw (VerificationException. "Got a CPartialMerkleTree with more transactions than is possible"))
        )
        ;; there can never be more hashes provided than one for every txid
        (when (< (:transaction-count this) (.. (:hashes this) (size)))
            (throw (VerificationException. "Got a CPartialMerkleTree with more hashes than transactions"))
        )
        ;; there must be at least one bit per node in the partial tree, and at least one node per hash
        (when (< (* (alength (:matched-child-bits this)) 8) (.. (:hashes this) (size)))
            (throw (VerificationException. "Got a CPartialMerkleTree with fewer matched bits than hashes"))
        )

        ;; calculate height of tree
        (let [#_"int" height (loop-when-recur [h 0] (< 1 (PartialMerkleTree'getTreeWidth (:transaction-count this), h)) [(inc h)] => h)
              ;; traverse the partial tree
              #_"ValuesUsed" used (ValuesUsed.) #_"Sha256Hash" root (.. this (recursiveExtractHashes height, 0, used, __matchedHashesOut))]
            ;; verify that all bits were consumed (except for the padding caused by serializing it as a byte sequence)
            ;; verify that all hashes were consumed
            (when (or (not= (quot (+ (:bits-used used) 7) 8) (alength (:matched-child-bits this))) (not= (:hashes-used used) (.. (:hashes this) (size))))
                (throw (VerificationException. "Got a CPartialMerkleTree that didn't need all the data it provided"))
            )
            root
        )
    )

    #_public
    (§ method #_"int" getTransactionCount []
        (:transaction-count this)
    )

    #_override
    #_public
    (§ method #_"boolean" equals [#_"Object" o]
        (cond
            (= this o) true
            (or (nil? o) (not= (getClass) (.. o (getClass)))) false
            :else (let [#_"PartialMerkleTree" other (cast PartialMerkleTree o)]
                (and (= (:transaction-count this) (:transaction-count other)) (.. (:hashes this) (equals (:hashes other))) (Arrays/equals (:matched-child-bits this), (:matched-child-bits other)))
            )
        )
    )

    #_override
    #_public
    (§ method #_"int" hashCode []
        (Objects/hashCode (:transaction-count this), (:hashes this), (Arrays/hashCode (:matched-child-bits this)))
    )

    #_override
    #_public
    (§ method #_"String" toString []
        (str "PartialMerkleTree{" "transactionCount=" (:transaction-count this) ", matchedChildBits=" (Arrays/toString (:matched-child-bits this)) ", hashes=" (:hashes this) "}")
    )
)

;;;
 ; A Peer handles the high level communication with a Bitcoin node, extending a {@link PeerSocketHandler}
 ; which handles low-level message (de)serialization.
 ;
 ; Note that timeouts are handled by the extended {@link AbstractTimeoutHandler} and timeout is automatically
 ; disabled (using {@link AbstractTimeoutHandler#setTimeoutEnabled(boolean)}) once the version handshake completes.
 ;;
#_public
(§ class Peer (§ extends PeerSocketHandler)
    #_private
    #_static
    (def- #_"Logger" Peer'log (LoggerFactory/getLogger Peer))

    #_protected
    (§ field #_"ReentrantLock" :lock (Threading'lock "peer"))

    #_private
    (§ field- #_"NetworkParameters" :params)
    #_private
    (§ field- #_"AbstractBlockChain" :block-chain)
    #_private
    (§ field- #_"Context" :context)

    #_private
    (§ field- #_"CopyOnWriteArrayList<ListenerRegistration<BlocksDownloadedEventListener>>" :blocks-downloaded-event-listeners (CopyOnWriteArrayList. #_"<>"))
    #_private
    (§ field- #_"CopyOnWriteArrayList<ListenerRegistration<ChainDownloadStartedEventListener>>" :chain-download-started-event-listeners (CopyOnWriteArrayList. #_"<>"))
    #_private
    (§ field- #_"CopyOnWriteArrayList<ListenerRegistration<PeerConnectedEventListener>>" :connected-event-listeners (CopyOnWriteArrayList. #_"<>"))
    #_private
    (§ field- #_"CopyOnWriteArrayList<ListenerRegistration<PeerDisconnectedEventListener>>" :disconnected-event-listeners (CopyOnWriteArrayList. #_"<>"))
    #_private
    (§ field- #_"CopyOnWriteArrayList<ListenerRegistration<GetDataEventListener>>" :get-data-event-listeners (CopyOnWriteArrayList. #_"<>"))
    #_private
    (§ field- #_"CopyOnWriteArrayList<ListenerRegistration<PreMessageReceivedEventListener>>" :pre-message-received-event-listeners (CopyOnWriteArrayList. #_"<>"))
    #_private
    (§ field- #_"CopyOnWriteArrayList<ListenerRegistration<OnTransactionBroadcastListener>>" :on-transaction-event-listeners (CopyOnWriteArrayList. #_"<>"))

    ;; Whether to try and download blocks and transactions from this peer.  Set to false by PeerGroup if not the
    ;; primary peer.  This is to avoid redundant work and concurrency problems with downloading the same chain
    ;; in parallel.
    #_private
    #_volatile
    (§ field- #_"boolean" :v-download-data)
    ;; The version data to announce to the other side of the connections we make: useful for setting our "user agent"
    ;; equivalent and other things.
    #_private
    (§ field- #_"VersionMessage" :version-message)
    ;; Maximum depth up to which pending transaction dependencies are downloaded, or 0 for disabled.
    #_private
    #_volatile
    (§ field- #_"int" :v-download-tx-dependency-depth)
    ;; How many block messages the peer has announced to us.  Peers only announce blocks that attach to their best chain
    ;; so we can use this to calculate the height of the peers chain, by adding it to the initial height in the version
    ;; message.  This method can go wrong if the peer re-orgs onto a shorter (but harder) chain, however, this is rare.
    #_private
    (§ field- #_"AtomicInteger" :blocks-announced (AtomicInteger.))
    ;; Each wallet added to the peer will be notified of downloaded transaction data.
    #_private
    (§ field- #_"CopyOnWriteArrayList<Wallet>" :wallets)
    ;; A time before which we only download block headers, after that point we download block bodies.
    #_private
    (§ field- #_"long" :fast-catchup-time-secs)
    ;; Whether we are currently downloading headers only or block bodies.  Starts at true.  If the fast catchup time is
    ;; set AND our best block is before that date, switch to false until block headers beyond that point have been
    ;; received at which point it gets set to true again.  This isn't relevant unless vDownloadData is true.
    #_private
    (§ field- #_"boolean" :download-block-bodies true)
    ;; Whether to request filtered blocks instead of full blocks if the protocol version allows for them.
    #_private
    (§ field- #_"boolean" :use-filtered-blocks false)
    ;; The current Bloom filter set on the connection, used to tell the remote peer what transactions to send us.
    #_private
    #_volatile
    (§ field- #_"BloomFilter" :v-bloom-filter)
    ;; The last filtered block we received, we're waiting to fill it out with transactions.
    #_private
    (§ field- #_"FilteredBlock" :current-filtered-block nil)
    ;; How many filtered blocks have been received during the lifetime of this connection.  Used to decide when to
    ;; refresh the server-side side filter by sending a new one (it degrades over time as false positives are added
    ;; on the remote side, see BIP 37 for a discussion of this).
    ;; TODO: Is this still needed?  It should not be since the auto FP tracking logic was added.
    #_private
    (§ field- #_"int" :filtered-blocks-received)
    ;; If non-null, we should discard incoming filtered blocks because we ran out of keys and are awaiting a new filter
    ;; to be calculated by the PeerGroup.  The discarded block hashes should be added here so we can re-request them
    ;; once we've recalculated and resent a new filter.
    #_nilable
    #_private
    (§ field- #_"List<Sha256Hash>" :awaiting-fresh-filter)
    ;; How frequently to refresh the filter.  This should become dynamic in future and calculated depending on the
    ;; actual false positive rate.  For now a good value was determined empirically around January 2013.
    #_private
    #_static
    (def- #_"int" Peer'RESEND_BLOOM_FILTER_BLOCK_COUNT 25000)
    ;; Keeps track of things we requested internally with getdata but didn't receive yet, so we can avoid re-requests.
    ;; It's not quite the same as getDataFutures, as this is used only for getdatas done as part of downloading
    ;; the chain and so is lighter weight (we just keep a bunch of hashes not futures).
    ;;
    ;; It is important to avoid a nasty edge case where we can end up with parallel chain downloads proceeding
    ;; simultaneously if we were to receive a newly solved block whilst parts of the chain are streaming to us.
    #_private
    (§ field- #_"HashSet<Sha256Hash>" :pending-block-downloads (HashSet. #_"<>"))
    ;; Keep references to TransactionConfidence objects for transactions that were announced by a remote peer, but
    ;; which we haven't downloaded yet.  These objects are de-duplicated by the TxConfidenceTable class.
    ;; Once the tx is downloaded (by some peer), the Transaction object that is created will have a reference to
    ;; the confidence object held inside it, and it's then up to the event listeners that receive the Transaction
    ;; to keep it pinned to the root set if they care about this data.
    #_suppress #_[ "MismatchedQueryAndUpdateOfCollection" ]
    #_private
    (§ field- #_"HashSet<TransactionConfidence>" :pending-tx-downloads (HashSet. #_"<>"))
    ;; The lowest version number we're willing to accept.  Lower than this will result in an immediate disconnect.
    #_private
    #_volatile
    (§ field- #_"int" :v-min-protocol-version)
    ;; When an API user explicitly requests a block or transaction from a peer, the InventoryItem is put here
    ;; whilst waiting for the response.  Is not used for downloads Peer generates itself.
    #_private
    #_static
    (§ class- GetDataRequest
        (§ field #_"Sha256Hash" :hash)
        (§ field #_"SettableFuture" :future)

        #_public
        (§ constructor GetDataRequest [#_"Sha256Hash" hash, #_"SettableFuture" future]
            (§ assoc this :hash hash)
            (§ assoc this :future future)
            this
        )
    )
    ;; TODO: The types/locking should be rationalised a bit.
    #_private
    (§ field- #_"CopyOnWriteArrayList<GetDataRequest>" :get-data-futures)
    #_private
    (§ field- #_"LinkedList<SettableFuture<AddressMessage>>" :get-addr-futures)

    #_private
    #_static
    (def- #_"int" Peer'PING_MOVING_AVERAGE_WINDOW 20)

    ;; Outstanding pings against this peer and how long the last one took to complete.
    #_private
    (§ field- #_"ReentrantLock" :last-ping-times-lock (ReentrantLock.))
    #_private
    (§ field- #_"long[]" :last-ping-times)
    #_private
    (§ field- #_"CopyOnWriteArrayList<PendingPing>" :pending-pings)

    #_private
    #_volatile
    (§ field- #_"VersionMessage" :v-peer-version-message)

    ;; A settable future which completes (with this) when the connection is open.
    #_private
    (§ field- #_"SettableFuture<Peer>" :connection-open-future (SettableFuture/create))
    #_private
    (§ field- #_"SettableFuture<Peer>" :outgoing-version-handshake-future (SettableFuture/create))
    #_private
    (§ field- #_"SettableFuture<Peer>" :incoming-version-handshake-future (SettableFuture/create))
    #_private
    (§ field- #_"ListenableFuture<Peer>" :version-handshake-future (Futures/transform (Futures/allAsList (:outgoing-version-handshake-future this), (:incoming-version-handshake-future this)), (Function. #_"<List<Peer>, Peer>")
        (§ anon
            #_override
            #_nilable
            #_public
            (§ method #_"Peer" apply [#_nilable #_"List<Peer>" peers]
                (ensure some? peers)
                (assert-state (and (= (.. peers (size)) 2) (= (.. peers (get 0)) (.. peers (get 1)))))
                (.. peers (get 0))
            )
        )))

    ;;;
     ; Construct a peer that reads/writes from the given block chain.
     ;
     ; Note that this does <b>NOT</b> make a connection to the given remoteAddress, it only creates a handler
     ; for a connection.  If you want to create a one-off connection, create a Peer and pass it to
     ; {@link NioClientManager#openConnection(java.net.SocketAddress, StreamConnection)}
     ; or
     ; {@link NioClient#NioClient(java.net.SocketAddress, StreamConnection, int)}.
     ;
     ; The remoteAddress provided should match the remote address of the peer which is being connected to,
     ; and is used to keep track of which peers relayed transactions and offer more descriptive logging.
     ;;
    #_public
    (§ constructor Peer [#_"NetworkParameters" params, #_"VersionMessage" ver, #_nilable #_"AbstractBlockChain" chain, #_"PeerAddress" __remoteAddress]
        (§ this params, ver, __remoteAddress, chain)
        this
    )

    ;;;
     ; Construct a peer that reads/writes from the given block chain.  Transactions stored in a {@link TxConfidenceTable}
     ; will have their confidence levels updated when a peer announces it, to reflect the greater likelyhood that
     ; the transaction is valid.
     ;
     ; Note that this does <b>NOT</b> make a connection to the given remoteAddress, it only creates a handler
     ; for a connection.  If you want to create a one-off connection, create a Peer and pass it to
     ; {@link NioClientManager#openConnection(java.net.SocketAddress, StreamConnection)}
     ; or
     ; {@link NioClient#NioClient(java.net.SocketAddress, StreamConnection, int)}.
     ;
     ; The remoteAddress provided should match the remote address of the peer which is being connected to,
     ; and is used to keep track of which peers relayed transactions and offer more descriptive logging.
     ;;
    #_public
    (§ constructor Peer [#_"NetworkParameters" params, #_"VersionMessage" ver, #_"PeerAddress" __remoteAddress, #_nilable #_"AbstractBlockChain" chain]
        (§ this params, ver, __remoteAddress, chain, Integer/MAX_VALUE)
        this
    )

    ;;;
     ; Construct a peer that reads/writes from the given block chain.  Transactions stored in a {@link TxConfidenceTable}
     ; will have their confidence levels updated when a peer announces it, to reflect the greater likelyhood that
     ; the transaction is valid.
     ;
     ; Note that this does <b>NOT</b> make a connection to the given remoteAddress, it only creates a handler
     ; for a connection.  If you want to create a one-off connection, create a Peer and pass it to
     ; {@link NioClientManager#openConnection(java.net.SocketAddress, StreamConnection)}
     ; or
     ; {@link NioClient#NioClient(java.net.SocketAddress, StreamConnection, int)}.
     ;
     ; The remoteAddress provided should match the remote address of the peer which is being connected to,
     ; and is used to keep track of which peers relayed transactions and offer more descriptive logging.
     ;;
    #_public
    (§ constructor Peer [#_"NetworkParameters" params, #_"VersionMessage" ver, #_"PeerAddress" __remoteAddress, #_nilable #_"AbstractBlockChain" chain, #_"int" __downloadTxDependencyDepth]
        (§ super params, __remoteAddress)

        (§ assoc this :params (ensure some? params))
        (§ assoc this :version-message (ensure some? ver))
        (§ assoc this :v-download-tx-dependency-depth (if (some? chain) __downloadTxDependencyDepth 0))
        (§ assoc this :block-chain chain) ;; Allowed to be nil.
        (§ assoc this :v-download-data (some? chain))
        (§ assoc this :get-data-futures (CopyOnWriteArrayList. #_"<>"))
        (§ assoc this :get-addr-futures (LinkedList. #_"<>"))
        (§ assoc this :fast-catchup-time-secs (.. (:genesis-block params) (getTimeSeconds)))
        (§ assoc this :pending-pings (CopyOnWriteArrayList. #_"<>"))
        (§ assoc this :v-min-protocol-version ProtocolVersion'PONG)
        (§ assoc this :wallets (CopyOnWriteArrayList. #_"<>"))
        (§ assoc this :context (Context'get))

        (.. (:version-handshake-future this) (addListener (Runnable.)
        (§ anon
            #_override
            #_public
            (§ method #_"void" run []
                (.. this (versionHandshakeComplete))
                nil
            )
        ), Threading'SAME_THREAD))
        this
    )

    ;;;
     ; Construct a peer that reads/writes from the given chain.  Automatically creates a VersionMessage for you from
     ; the given software name/version strings, which should be something like "MySimpleTool", "1.0" and which will tell
     ; the remote node to relay transaction inv messages before it has received a filter.
     ;
     ; Note that this does <b>NOT</b> make a connection to the given remoteAddress, it only creates a handler
     ; for a connection. If you want to create a one-off connection, create a Peer and pass it to
     ; {@link NioClientManager#openConnection(java.net.SocketAddress, StreamConnection)}
     ; or
     ; {@link NioClient#NioClient(java.net.SocketAddress, StreamConnection, int)}.
     ;
     ; The remoteAddress provided should match the remote address of the peer which is being connected to,
     ; and is used to keep track of which peers relayed transactions and offer more descriptive logging.
     ;;
    #_public
    (§ constructor Peer [#_"NetworkParameters" params, #_"AbstractBlockChain" __blockChain, #_"PeerAddress" __peerAddress, #_"String" __thisSoftwareName, #_"String" __thisSoftwareVersion]
        (§ this params, (VersionMessage. params, (.. __blockChain (getBestChainHeight))), __blockChain, __peerAddress)
        (.. (:version-message this) (appendToSubVer __thisSoftwareName, __thisSoftwareVersion, nil))
        this
    )

    ;;; Registers a listener that is invoked when new blocks are downloaded. ;;
    #_public
    (§ method #_"void" addBlocksDownloadedEventListener [#_"BlocksDownloadedEventListener" listener]
        (.. this (addBlocksDownloadedEventListener Threading'USER_THREAD, listener))
        nil
    )

    ;;; Registers a listener that is invoked when new blocks are downloaded. ;;
    #_public
    (§ method #_"void" addBlocksDownloadedEventListener [#_"Executor" executor, #_"BlocksDownloadedEventListener" listener]
        (.. (:blocks-downloaded-event-listeners this) (add (ListenerRegistration. listener, executor)))
        nil
    )

    ;;; Registers a listener that is invoked when a blockchain downloaded starts. ;;
    #_public
    (§ method #_"void" addChainDownloadStartedEventListener [#_"ChainDownloadStartedEventListener" listener]
        (.. this (addChainDownloadStartedEventListener Threading'USER_THREAD, listener))
        nil
    )

    ;;; Registers a listener that is invoked when a blockchain downloaded starts. ;;
    #_public
    (§ method #_"void" addChainDownloadStartedEventListener [#_"Executor" executor, #_"ChainDownloadStartedEventListener" listener]
        (.. (:chain-download-started-event-listeners this) (add (ListenerRegistration. listener, executor)))
        nil
    )

    ;;; Registers a listener that is invoked when a peer is connected. ;;
    #_public
    (§ method #_"void" addConnectedEventListener [#_"PeerConnectedEventListener" listener]
        (.. this (addConnectedEventListener Threading'USER_THREAD, listener))
        nil
    )

    ;;; Registers a listener that is invoked when a peer is connected. ;;
    #_public
    (§ method #_"void" addConnectedEventListener [#_"Executor" executor, #_"PeerConnectedEventListener" listener]
        (.. (:connected-event-listeners this) (add (ListenerRegistration. listener, executor)))
        nil
    )

    ;;; Registers a listener that is invoked when a peer is disconnected. ;;
    #_public
    (§ method #_"void" addDisconnectedEventListener [#_"PeerDisconnectedEventListener" listener]
        (.. this (addDisconnectedEventListener Threading'USER_THREAD, listener))
        nil
    )

    ;;; Registers a listener that is invoked when a peer is disconnected. ;;
    #_public
    (§ method #_"void" addDisconnectedEventListener [#_"Executor" executor, #_"PeerDisconnectedEventListener" listener]
        (.. (:disconnected-event-listeners this) (add (ListenerRegistration. listener, executor)))
        nil
    )

    ;;; Registers a listener that is called when messages are received. ;;
    #_public
    (§ method #_"void" addGetDataEventListener [#_"GetDataEventListener" listener]
        (.. this (addGetDataEventListener Threading'USER_THREAD, listener))
        nil
    )

    ;;; Registers a listener that is called when messages are received. ;;
    #_public
    (§ method #_"void" addGetDataEventListener [#_"Executor" executor, #_"GetDataEventListener" listener]
        (.. (:get-data-event-listeners this) (add (ListenerRegistration. #_"<>" listener, executor)))
        nil
    )

    ;;; Registers a listener that is called when a transaction is broadcast across the network. ;;
    #_public
    (§ method #_"void" addOnTransactionBroadcastListener [#_"OnTransactionBroadcastListener" listener]
        (.. this (addOnTransactionBroadcastListener Threading'USER_THREAD, listener))
        nil
    )

    ;;; Registers a listener that is called when a transaction is broadcast across the network. ;;
    #_public
    (§ method #_"void" addOnTransactionBroadcastListener [#_"Executor" executor, #_"OnTransactionBroadcastListener" listener]
        (.. (:on-transaction-event-listeners this) (add (ListenerRegistration. #_"<>" listener, executor)))
        nil
    )

    ;;; Registers a listener that is called immediately before a message is received. ;;
    #_public
    (§ method #_"void" addPreMessageReceivedEventListener [#_"PreMessageReceivedEventListener" listener]
        (.. this (addPreMessageReceivedEventListener Threading'USER_THREAD, listener))
        nil
    )

    ;;; Registers a listener that is called immediately before a message is received. ;;
    #_public
    (§ method #_"void" addPreMessageReceivedEventListener [#_"Executor" executor, #_"PreMessageReceivedEventListener" listener]
        (.. (:pre-message-received-event-listeners this) (add (ListenerRegistration. #_"<>" listener, executor)))
        nil
    )

    #_public
    (§ method #_"boolean" removeBlocksDownloadedEventListener [#_"BlocksDownloadedEventListener" listener]
        (ListenerRegistration'removeFromList listener, (:blocks-downloaded-event-listeners this))
    )

    #_public
    (§ method #_"boolean" removeChainDownloadStartedEventListener [#_"ChainDownloadStartedEventListener" listener]
        (ListenerRegistration'removeFromList listener, (:chain-download-started-event-listeners this))
    )

    #_public
    (§ method #_"boolean" removeConnectedEventListener [#_"PeerConnectedEventListener" listener]
        (ListenerRegistration'removeFromList listener, (:connected-event-listeners this))
    )

    #_public
    (§ method #_"boolean" removeDisconnectedEventListener [#_"PeerDisconnectedEventListener" listener]
        (ListenerRegistration'removeFromList listener, (:disconnected-event-listeners this))
    )

    #_public
    (§ method #_"boolean" removeGetDataEventListener [#_"GetDataEventListener" listener]
        (ListenerRegistration'removeFromList listener, (:get-data-event-listeners this))
    )

    #_public
    (§ method #_"boolean" removeOnTransactionBroadcastListener [#_"OnTransactionBroadcastListener" listener]
        (ListenerRegistration'removeFromList listener, (:on-transaction-event-listeners this))
    )

    #_public
    (§ method #_"boolean" removePreMessageReceivedEventListener [#_"PreMessageReceivedEventListener" listener]
        (ListenerRegistration'removeFromList listener, (:pre-message-received-event-listeners this))
    )

    #_override
    #_public
    (§ method #_"String" toString []
        (let [#_"PeerAddress" addr (.. this (getAddress))]
            ;; if null, it's a user-provided NetworkConnection object
            (if (some? addr) (.. addr (toString)) "Peer()")
        )
    )

    #_override
    #_protected
    (§ method #_"void" timeoutOccurred []
        (.. super (timeoutOccurred))

        (when (not (.. (:connection-open-future this) (isDone)))
            ;; Invoke the event handlers to tell listeners e.g. PeerGroup that we never managed to connect.
            (.. this (connectionClosed))
        )
        nil
    )

    #_override
    #_public
    (§ method #_"void" connectionClosed []
        (doseq [#_"ListenerRegistration<PeerDisconnectedEventListener>" registration (:disconnected-event-listeners this)]
            (.. (:executor registration) (execute (Runnable.)
            (§ anon
                #_override
                #_public
                (§ method #_"void" run []
                    (.. (:listener registration) (onPeerDisconnected (§ dhis Peer), 0))
                    nil
                )
            )))
        )
        nil
    )

    #_override
    #_public
    (§ method #_"void" connectionOpened []
        ;; Announce ourselves.  This has to come first to connect to clients beyond v0.3.20.2 which wait to hear
        ;; from us until they send their version message back.
        (let [#_"PeerAddress" address (.. this (getAddress))]
            (.. Peer'log (info "Announcing to {} as: {}", (if (some? address) (.. address (toSocketAddress)) "Peer"), (-> this :version-message :sub-ver)))
            (.. this (sendMessage (:version-message this)))
            (.. (:connection-open-future this) (set this))
            ;; When connecting, the remote peer sends us a version message with various bits of useful data in it.
            ;; We need to know the peer protocol version before we can talk to it.
        )
        nil
    )

    ;;;
     ; Provides a ListenableFuture that can be used to wait for the socket to connect.  A socket connection does not
     ; mean that protocol handshake has occurred.
     ;;
    #_public
    (§ method #_"ListenableFuture<Peer>" getConnectionOpenFuture []
        (:connection-open-future this)
    )

    #_public
    (§ method #_"ListenableFuture<Peer>" getVersionHandshakeFuture []
        (:version-handshake-future this)
    )

    #_override
    #_protected
    #_throws #_[ "Exception" ]
    (§ method #_"void" processMessage [#_"Message" m]
        ;; Allow event listeners to filter the message stream.  Listeners are allowed to drop messages by returning null.
        (doseq [#_"ListenerRegistration<PreMessageReceivedEventListener>" registration (:pre-message-received-event-listeners this)]
            ;; Skip any listeners that are supposed to run in another thread as we don't want to block waiting for it,
            ;; which might cause circular deadlock.
            (when (= (:executor registration) Threading'SAME_THREAD)
                (§ ass m (.. (:listener registration) (onPreMessageReceived this, m)))
                (when (nil? m)
                    (§ break )
                )
            )
        )
        (when (some? m)
            ;; If we are in the middle of receiving transactions as part of a filtered block push from the remote node,
            ;; and we receive something that's not a transaction, then we're done.
            (when (and (some? (:current-filtered-block this)) (not (instance? Transaction m)))
                (.. this (endFilteredBlock (:current-filtered-block this)))
                (§ assoc this :current-filtered-block nil)
            )

            ;; No further communication is possible until version handshake is complete.
            (when (not (or (instance? VersionMessage m) (instance? VersionAck m) (and (.. (:version-handshake-future this) (isDone)) (not (.. (:version-handshake-future this) (isCancelled))))))
                (throw (ProtocolException. (str "Received " (.. m (getClass) (getSimpleName)) " before version handshake is complete.")))
            )

            (condp instance? m
                Ping             (.. this (processPing (cast Ping m)))
                Pong             (.. this (processPong (cast Pong m)))
                ;; This is sent to us when we did a getdata on some transactions that aren't in the peers memory pool.
                ;; Because NotFoundMessage is a subclass of InventoryMessage, the test for it must come before the next.
                NotFoundMessage  (.. this (processNotFoundMessage (cast NotFoundMessage m)))
                InventoryMessage (.. this (processInv (cast InventoryMessage m)))
                Block            (.. this (processBlock (cast Block m)))
                FilteredBlock    (.. this (startFilteredBlock (cast FilteredBlock m)))
                Transaction      (.. this (processTransaction (cast Transaction m)))
                GetDataMessage   (.. this (processGetData (cast GetDataMessage m)))
                ;; We don't care about addresses of the network right now.  But in future, we should save them
                ;; in the wallet so we don't put too much load on the seed nodes and can properly explore the network.
                AddressMessage   (.. this (processAddressMessage (cast AddressMessage m)))
                HeadersMessage   (.. this (processHeaders (cast HeadersMessage m)))
                AlertMessage     (.. this (processAlert (cast AlertMessage m)))
                VersionMessage   (.. this (processVersionMessage (cast VersionMessage m)))
                VersionAck       (.. this (processVersionAck (cast VersionAck m)))
                RejectMessage    (.. Peer'log (error "{} {}: Received {}", this, (:sub-ver (.. this (getPeerVersionMessage))), m))
                                (.. Peer'log (warn "{}: Received unhandled message: {}", this, m))
            )
        )
        nil
    )

    #_private
    (§ method- #_"void" processAddressMessage [#_"AddressMessage" m]
        (let [#_"SettableFuture<AddressMessage>" future]
            (§ sync (:get-addr-futures this)
                (§ ass future (.. (:get-addr-futures this) (poll)))
                (when (nil? future) ;; Not an addr message we are waiting for.
                    (§ return nil)
                )
            )
            (.. future (set m))
        )
        nil
    )

    #_private
    #_throws #_[ "ProtocolException" ]
    (§ method- #_"void" processVersionMessage [#_"VersionMessage" m]
        (when (some? (:v-peer-version-message this))
            (throw (ProtocolException. "Got two version messages from peer"))
        )

        (§ assoc this :v-peer-version-message m)

        ;; Switch to the new protocol version.
        (let [#_"long" __peerTime (* (:time m) 1000)]
            (.. Peer'log (info "{}: Got version={}, subVer='{}', services=0x{}, time={}, blocks={}", this, (:client-version m), (:sub-ver m), (:local-services m), (String/format Locale/US, "%tF %tT", __peerTime, __peerTime), (:best-height m)))
            ;; bitcoinj is a client mode implementation.  That means there's not much point in us talking to other client mode
            ;; nodes because we can't download the data from them we need to find/verify transactions.  Some bogus implementations
            ;; claim to have a block chain in their services field but then report a height of zero, filter them out here.
            (if (or (not (.. m (hasBlockChain))) (and (not (.. (:params this) (allowEmptyPeerChain))) (= (:best-height m) 0)))
                (do
                    ;; Shut down the channel gracefully.
                    (.. Peer'log (info "{}: Peer does not have a copy of the block chain.", this))
                    (.. this (close))
                )
                (do
                    (when (< (:best-height m) 0)
                        ;; In this case, it's a protocol violation.
                        (throw (ProtocolException. (str "Peer reports invalid best height: " (:best-height m))))
                    )
                    ;; Now it's our turn ...
                    ;; Send an ACK message stating we accept the peers protocol version.
                    (.. this (sendMessage (VersionAck.)))
                    (.. Peer'log (debug "{}: Incoming version handshake complete.", this))
                    (.. (:incoming-version-handshake-future this) (set this))
                )
            )
        )
        nil
    )

    #_private
    #_throws #_[ "ProtocolException" ]
    (§ method- #_"void" processVersionAck [#_"VersionAck" m]
        (when (nil? (:v-peer-version-message this))
            (throw (ProtocolException. "got a version ack before version"))
        )
        (when (.. (:outgoing-version-handshake-future this) (isDone))
            (throw (ProtocolException. "got more than one version ack"))
        )
        (.. Peer'log (debug "{}: Outgoing version handshake complete.", this))
        (.. (:outgoing-version-handshake-future this) (set this))
        nil
    )

    #_private
    (§ method- #_"void" versionHandshakeComplete []
        (.. Peer'log (debug "{}: Handshake complete.", this))
        (.. this (setTimeoutEnabled false))
        (doseq [#_"ListenerRegistration<PeerConnectedEventListener>" registration (:connected-event-listeners this)]
            (.. (:executor registration) (execute (Runnable.)
            (§ anon
                #_override
                #_public
                (§ method #_"void" run []
                    (.. (:listener registration) (onPeerConnected (§ dhis Peer), 1))
                    nil
                )
            )))
        )
        ;; We check min version after onPeerConnected as channel.close() will
        ;; call onPeerDisconnected, and we should probably call onPeerConnected first.
        (let [#_"int" version (:v-min-protocol-version this)]
            (when (< (-> this :v-peer-version-message :client-version) version)
                (.. Peer'log (warn "Connected to a peer speaking protocol version {} but need {}, closing", (-> this :v-peer-version-message :client-version), version))
                (.. this (close))
            )
        )
        nil
    )

    #_protected
    (§ method #_"void" startFilteredBlock [#_"FilteredBlock" m]
        ;; Filtered blocks come before the data that they refer to, so stash it here and then fill it out as
        ;; messages stream in.  We'll call endFilteredBlock when a non-tx message arrives (e.g. another
        ;; FilteredBlock) or when a tx that isn't needed by that block is found.  A ping message is sent after
        ;; a getblocks, to force the non-tx message path.
        (§ assoc this :current-filtered-block m)
        ;; Potentially refresh the server side filter.  Because the remote node adds hits back into the filter
        ;; to save round-tripping back through us, the filter degrades over time as false positives get added,
        ;; triggering yet more false positives.  We refresh it every so often to get the FP rate back down.
        (§ update this :filtered-blocks-received inc)
        (when (= (rem (:filtered-blocks-received this) Peer'RESEND_BLOOM_FILTER_BLOCK_COUNT) (dec Peer'RESEND_BLOOM_FILTER_BLOCK_COUNT))
            (.. this (sendMessage (:v-bloom-filter this)))
        )
        nil
    )

    #_protected
    (§ method #_"void" processNotFoundMessage [#_"NotFoundMessage" m]
        ;; This is received when we previously did a getdata but the peer couldn't find what we requested in it's
        ;; memory pool.  Typically, because we are downloading dependencies of a relevant transaction and reached
        ;; the bottom of the dependency tree (where the unconfirmed transactions connect to transactions that are
        ;; in the chain).
        ;;
        ;; We go through and cancel the pending getdata futures for the items we were told weren't found.
        (doseq [#_"GetDataRequest" req (:get-data-futures this)]
            (doseq [#_"InventoryItem" item (.. m (getItems))]
                (when (.. (:hash item) (equals (:hash req)))
                    (.. Peer'log (info "{}: Bottomed out dep tree at {}", this, (:hash req)))
                    (.. (:future req) (cancel true))
                    (.. (:get-data-futures this) (remove req))
                    (§ break )
                )
            )
        )
        nil
    )

    #_protected
    (§ method #_"void" processAlert [#_"AlertMessage" m]
        (try
            (if (.. m (isSignatureValid))
                (.. Peer'log (info "Received alert from peer {}: {}", this, (.. m (getStatusBar))))
                (.. Peer'log (warn "Received alert with invalid signature from peer {}: {}", this, (.. m (getStatusBar))))
            )
            (catch Throwable t
                ;; Signature checking can FAIL on Android platforms before Gingerbread apparently due to bugs in their
                ;; BigInteger implementations!  See https://github.com/bitcoinj/bitcoinj/issues/526 for discussion.
                ;; As alerts are just optional and not that useful, we just swallow the error here.
                (.. Peer'log (error "Failed to check signature: bug in platform libraries?", t))
            )
        )
        nil
    )

    #_protected
    #_throws #_[ "ProtocolException" ]
    (§ method #_"void" processHeaders [#_"HeadersMessage" m]
        ;; Runs in network loop thread for this peer.
        ;;
        ;; This method can run if a peer just randomly sends us a "headers" message (should never happen), or more
        ;; likely when we've requested them as part of chain download using fast catchup.  We need to add each block to
        ;; the chain if it pre-dates the fast catchup time.  If we go past it, we can stop processing the headers and
        ;; request the full blocks from that point on instead.
        (let [#_"boolean" __downloadBlockBodies
              #_"long" __fastCatchupTimeSecs]

            (.. (:lock this) (lock))
            (try
                (when (nil? (:block-chain this))
                    ;; Can happen if we are receiving unrequested data, or due to programmer error.
                    (.. Peer'log (warn "Received headers when Peer is not configured with a chain."))
                    (§ return nil)
                )
                (§ ass __fastCatchupTimeSecs (:fast-catchup-time-secs this))
                (§ ass __downloadBlockBodies (:download-block-bodies this))
                (finally
                    (.. (:lock this) (unlock))
                )
            )

            (try
                (assert-state (not __downloadBlockBodies), (.. this (toString)))

                (loop-when-recur [#_"int" i 0] (< i (.. m (getBlockHeaders) (size))) [(inc i)]
                    (let [#_"Block" header (.. m (getBlockHeaders) (get i))]
                        ;; Process headers until we pass the fast catchup time, or are about to catch up with the head
                        ;; of the chain - always process the last block as a full/filtered block to kick us out of the
                        ;; fast catchup mode (in which we ignore new blocks).
                        (let [#_"boolean" __passedTime (<= __fastCatchupTimeSecs (.. header (getTimeSeconds)))
                              #_"boolean" __reachedTop (<= (-> this :v-peer-version-message :best-height) (.. (:block-chain this) (getBestChainHeight)))]
                            (cond (and (not __passedTime) (not __reachedTop))
                                (do
                                    (when (not (:v-download-data this))
                                        ;; Not download peer anymore, some other peer probably became better.
                                        (.. Peer'log (info "Lost download peer status, throwing away downloaded headers."))
                                        (§ return nil)
                                    )
                                    (cond (.. (:block-chain this) (add header))
                                        (do
                                            ;; The block was successfully linked into the chain. Notify the user of our progress.
                                            (.. this (invokeOnBlocksDownloaded header, nil))
                                        )
                                        :else
                                        (do
                                            ;; This block is unconnected - we don't know how to get from it back to the genesis block yet.
                                            ;; That must mean that the peer is buggy or malicious because we specifically requested for
                                            ;; headers that are part of the best chain.
                                            (throw (ProtocolException. (str "Got unconnected header from peer: " (.. header (getHashAsString)))))
                                        )
                                    )
                                )
                                :else
                                (do
                                    (.. (:lock this) (lock))
                                    (try
                                        (.. Peer'log (info "Passed the fast catchup time ({}) at height {}, discarding {} headers and requesting full blocks", (Utils'dateTimeFormat (* __fastCatchupTimeSecs 1000)), (inc (.. (:block-chain this) (getBestChainHeight))), (- (.. m (getBlockHeaders) (size)) i)))
                                        (§ assoc this :download-block-bodies true)
                                        ;; Prevent this request being seen as a duplicate.
                                        (§ assoc this :last-get-blocks-begin Sha256Hash'ZERO_HASH)
                                        (.. this (blockChainDownloadLocked Sha256Hash'ZERO_HASH))
                                        (finally
                                            (.. (:lock this) (unlock))
                                        )
                                    )
                                    (§ return nil)
                                )
                            )
                        )
                    )
                )
                ;; We added all headers in the message to the chain.
                ;; Request some more if we got up to the limit, otherwise we are at the end of the chain.
                (when (<= HeadersMessage'MAX_HEADERS (.. m (getBlockHeaders) (size)))
                    (.. (:lock this) (lock))
                    (try
                        (.. this (blockChainDownloadLocked Sha256Hash'ZERO_HASH))
                        (finally
                            (.. (:lock this) (unlock))
                        )
                    )
                )
                (catch VerificationException e
                    (.. Peer'log (warn "Block header verification failed", e))
                )
                (catch PrunedException e
                    ;; Unreachable when in SPV mode.
                    (throw (RuntimeException. e))
                )
            )
        )
        nil
    )

    #_protected
    (§ method #_"void" processGetData [#_"GetDataMessage" getdata]
        (.. Peer'log (info "{}: Received getdata message: {}", (.. this (getAddress)), (.. getdata (toString))))
        (let [#_"ArrayList<Message>" items (ArrayList. #_"<>")]
            (doseq [#_"ListenerRegistration<GetDataEventListener>" registration (:get-data-event-listeners this)]
                (when (= (:executor registration) Threading'SAME_THREAD)
                    (let [#_"List<Message>" __listenerItems (.. (:listener registration) (getData this, getdata))]
                        (when (some? __listenerItems)
                            (.. items (addAll __listenerItems))
                        )
                    )
                )
            )
            (when (not (.. items (isEmpty)))
                (.. Peer'log (info "{}: Sending {} items gathered from listeners to peer", (.. this (getAddress)), (.. items (size))))
                (doseq [#_"Message" item items]
                    (.. this (sendMessage item))
                )
            )
        )
        nil
    )

    #_protected
    #_throws #_[ "VerificationException" ]
    (§ method #_"void" processTransaction [#_"Transaction" tx]
        ;; Check a few basic syntax issues to ensure the received TX isn't nonsense.
        (.. tx (verify))
        (.. (:lock this) (lock))
        (try
            (.. Peer'log (debug "{}: Received tx {}", (.. this (getAddress)), (.. tx (getHashAsString))))
            ;; Label the transaction as coming in from the P2P network (as opposed to being created by us, direct import,
            ;; etc).  This helps the wallet decide how to risk analyze it later.
            ;;
            ;; Additionally, by invoking tx.getConfidence(), this tx now pins the confidence data into the heap, meaning
            ;; we can stop holding a reference to the confidence object ourselves.  It's up to event listeners on the
            ;; Peer to stash the tx object somewhere if they want to keep receiving updates about network propagation
            ;; and so on.
            (let [#_"TransactionConfidence" confidence (.. tx (getConfidence))]
                (.. confidence (setSource :ConfidenceSource'NETWORK))
                (.. (:pending-tx-downloads this) (remove confidence))
                (when (.. this (maybeHandleRequestedData tx))
                    (§ return nil)
                )

                (when (some? (:current-filtered-block this))
                    (when (not (.. (:current-filtered-block this) (provideTransaction tx)))
                        ;; Got a tx that didn't fit into the filtered block, so we must have received everything.
                        (.. this (endFilteredBlock (:current-filtered-block this)))
                        (§ assoc this :current-filtered-block nil)
                    )
                    ;; Don't tell wallets or listeners about this tx as they'll learn about it when the filtered block is
                    ;; fully downloaded instead.
                    (§ return nil)
                )

                ;; It's a broadcast transaction.  Tell all wallets about this tx so they can check if it's relevant or not.
                (doseq [#_"Wallet" wallet (:wallets this)]
                    (try
                        (when (.. wallet (isPendingTransactionRelevant tx))
                            (cond (< 0 (:v-download-tx-dependency-depth this))
                                (do
                                    ;; This transaction seems interesting to us, so let's download its dependencies.  This has
                                    ;; several purposes: we can check that the sender isn't attacking us by engaging in protocol
                                    ;; abuse games, like depending on a time-locked transaction that will never confirm, or
                                    ;; building huge chains of unconfirmed transactions (again - so they don't confirm and the
                                    ;; money can be taken back with a Finney attack).  Knowing the dependencies also lets us
                                    ;; store them in a serialized wallet so we always have enough data to re-announce to the
                                    ;; network and get the payment into the chain, in case the sender goes away and the network
                                    ;; starts to forget.
                                    ;;
                                    ;; TODO: Not all the above things are implemented.
                                    ;;
                                    ;; Note that downloading of dependencies can end up walking around 15 minutes back even
                                    ;; through transactions that have confirmed, as getdata on the remote peer also checks
                                    ;; relay memory not only the mempool.  Unfortunately we have no way to know that here.
                                    ;; In practice it should not matter much.
                                    (Futures/addCallback (.. this (downloadDependencies tx)), (FutureCallback. #_"<List<Transaction>>")
                                    (§ anon
                                        #_override
                                        #_public
                                        (§ method #_"void" onSuccess [#_"List<Transaction>" dependencies]
                                            (try
                                                (.. Peer'log (info "{}: Dependency download complete!", (.. this (getAddress))))
                                                (.. wallet (receivePending tx, dependencies))
                                                (catch VerificationException e
                                                    (.. Peer'log (error "{}: Wallet failed to process pending transaction {}", (.. this (getAddress)), (.. tx (getHash))))
                                                    (.. Peer'log (error "Error was: ", e))
                                                    ;; Not much more we can do at this point.
                                                )
                                            )
                                            nil
                                        )

                                        #_override
                                        #_public
                                        (§ method #_"void" onFailure [#_"Throwable" throwable]
                                            (.. Peer'log (error "Could not download dependencies of tx {}", (.. tx (getHashAsString))))
                                            (.. Peer'log (error "Error was: ", throwable))
                                            ;; Not much more we can do at this point.
                                            nil
                                        )
                                    ))
                                )
                                :else
                                (do
                                    (.. wallet (receivePending tx, nil))
                                )
                            )
                        )
                        (catch VerificationException e
                            (.. Peer'log (error "Wallet failed to verify tx", e))
                            ;; Carry on, listeners may still want to know.
                        )
                    )
                )
            )
            (finally
                (.. (:lock this) (unlock))
            )
        )
        ;; Tell all listeners about this tx so they can decide whether to keep it or not.  If no listener keeps a
        ;; reference around then the memory pool will forget about it after a while too because it uses weak references.
        (doseq [#_"ListenerRegistration<OnTransactionBroadcastListener>" registration (:on-transaction-event-listeners this)]
            (.. (:executor registration) (execute (Runnable.)
            (§ anon
                #_override
                #_public
                (§ method #_"void" run []
                    (.. (:listener registration) (onTransaction (§ dhis Peer), tx))
                    nil
                )
            )))
        )
        nil
    )

    ;;;
     ; Returns a future that wraps a list of all transactions that the given transaction depends on, recursively.
     ; Only transactions in peers memory pools are included; the recursion stops at transactions that are in the
     ; current best chain.  So it doesn't make much sense to provide a tx that was already in the best chain and
     ; a precondition checks this.
     ;
     ; For example, if tx has 2 inputs that connect to transactions A and B, and transaction B is unconfirmed and
     ; has one input connecting to transaction C that is unconfirmed, and transaction C connects to transaction D
     ; that is in the chain, then this method will return either {B, C} or {C, B}.  No ordering is guaranteed.
     ;
     ; This method is useful for apps that want to learn about how long an unconfirmed transaction might take
     ; to confirm, by checking for unexpectedly time locked transactions, unusually deep dependency trees or fee-paying
     ; transactions that depend on unconfirmed free transactions.
     ;
     ; Note that dependencies downloaded this way will not trigger the onTransaction method of event listeners.
     ;;
    #_public
    (§ method #_"ListenableFuture<List<Transaction>>" downloadDependencies [#_"Transaction" tx]
        (let [#_"ConfidenceType" __txConfidence (.. tx (getConfidence) (getConfidenceType))]
            (assert-argument (not= __txConfidence ConfidenceType'BUILDING))
            (.. Peer'log (info "{}: Downloading dependencies of {}", (.. this (getAddress)), (.. tx (getHashAsString))))
            (let [#_"LinkedList<Transaction>" results (LinkedList. #_"<>")]
                ;; future will be invoked when the entire dependency tree has been walked and the results compiled.
                (let [#_"ListenableFuture<Object>" future (.. this (downloadDependenciesInternal (:v-download-tx-dependency-depth this), 0, tx, (Object.), results))
                      #_"SettableFuture<List<Transaction>>" __resultFuture (SettableFuture/create)]
                    (Futures/addCallback future, (FutureCallback. #_"<Object>")
                    (§ anon
                        #_override
                        #_public
                        (§ method #_"void" onSuccess [#_"Object" ignored]
                            (.. __resultFuture (set results))
                            nil
                        )

                        #_override
                        #_public
                        (§ method #_"void" onFailure [#_"Throwable" throwable]
                            (.. __resultFuture (setException throwable))
                            nil
                        )
                    ))
                    __resultFuture
                )
            )
        )
    )

    ;; The marker object in the future returned is the same as the parameter.  It is arbitrary and can be anything.
    #_protected
    (§ method #_"ListenableFuture<Object>" downloadDependenciesInternal [#_"int" __maxDepth, #_"int" depth, #_"Transaction" tx, #_"Object" marker, #_"List<Transaction>" results]
        (let [#_"SettableFuture<Object>" __resultFuture (SettableFuture/create)
              #_"Sha256Hash" __rootTxHash (.. tx (getHash))]
            ;; We want to recursively grab its dependencies.  This is so listeners can learn important information like
            ;; whether a transaction is dependent on a timelocked transaction or has an unexpectedly deep dependency tree
            ;; or depends on a no-fee transaction.

            ;; We may end up requesting transactions that we've already downloaded and thrown away here.
            (let [#_"Set<Sha256Hash>" __needToRequest (CopyOnWriteArraySet. #_"<>")]
                (doseq [#_"TransactionInput" input (.. tx (getInputs))]
                    ;; There may be multiple inputs that connect to the same transaction.
                    (.. __needToRequest (add (.. (:outpoint input) (getHash))))
                )

                (.. (:lock this) (lock))
                (try
                    ;; Build the request for the missing dependencies.
                    (let [#_"List<ListenableFuture<Transaction>>" futures (Lists/newArrayList)
                          #_"GetDataMessage" getdata (GetDataMessage. (:params this))]

                        (when (< 1 (.. __needToRequest (size)))
                            (.. Peer'log (info "{}: Requesting {} transactions for depth {} dep resolution", (.. this (getAddress)), (.. __needToRequest (size)), (inc depth)))
                        )

                        (doseq [#_"Sha256Hash" hash __needToRequest]
                            (.. getdata (addTransaction hash))
                            (let [#_"GetDataRequest" req (GetDataRequest. hash, (SettableFuture/create))]
                                (.. futures (add (:future req)))
                                (.. (:get-data-futures this) (add req))
                            )
                        )

                        (let [#_"ListenableFuture<List<Transaction>>" successful (Futures/successfulAsList futures)]
                            (Futures/addCallback successful, (FutureCallback. #_"<List<Transaction>>")
                            (§ anon
                                #_override
                                #_public
                                (§ method #_"void" onSuccess [#_"List<Transaction>" transactions]
                                    ;; Once all transactions either were received, or we know there are no more to come, ...
                                    ;; Note that transactions will contain "null" for any positions that weren't successful.
                                    (let [#_"List<ListenableFuture<Object>>" __childFutures (Lists/newLinkedList)]
                                        (doseq [#_"Transaction" tx transactions]
                                            (when (nil? tx)
                                                (§ continue )
                                            )
                                            (.. Peer'log (info "{}: Downloaded dependency of {}: {}", (.. this (getAddress)), __rootTxHash, (.. tx (getHashAsString))))
                                            (.. results (add tx))
                                            ;; Now recurse into the dependencies of this transaction too.
                                            (when (< (inc depth) __maxDepth)
                                                (.. __childFutures (add (.. this (downloadDependenciesInternal __maxDepth, (inc depth), tx, marker, results))))
                                            )
                                        )
                                        (cond (= (.. __childFutures (size)) 0)
                                            (do
                                                ;; Short-circuit: we're at the bottom of this part of the tree.
                                                (.. __resultFuture (set marker))
                                            )
                                            :else
                                            (do
                                                ;; There are some children to download.  Wait until it's done (and their children, and their
                                                ;; children, ...) to inform the caller that we're finished.
                                                (Futures/addCallback (Futures/successfulAsList __childFutures), (FutureCallback. #_"<List<Object>>")
                                                (§ anon
                                                    #_override
                                                    #_public
                                                    (§ method #_"void" onSuccess [#_"List<Object>" objects]
                                                        (.. __resultFuture (set marker))
                                                        nil
                                                    )

                                                    #_override
                                                    #_public
                                                    (§ method #_"void" onFailure [#_"Throwable" throwable]
                                                        (.. __resultFuture (setException throwable))
                                                        nil
                                                    )
                                                ))
                                            )
                                        )
                                    )
                                    nil
                                )

                                #_override
                                #_public
                                (§ method #_"void" onFailure [#_"Throwable" throwable]
                                    (.. __resultFuture (setException throwable))
                                    nil
                                )
                            ))

                            ;; Start the operation.
                            (.. this (sendMessage getdata))
                        )
                    )
                    (catch Exception e
                        (.. Peer'log (error "{}: Couldn't send getdata in downloadDependencies({})", this, (.. tx (getHash)), e))
                        (.. __resultFuture (setException e))
                    )
                    (finally
                        (.. (:lock this) (unlock))
                    )
                )

                __resultFuture
            )
        )
    )

    #_protected
    (§ method #_"void" processBlock [#_"Block" m]
        (cond
            ;; Was this block requested by getBlock()?
            (.. this (maybeHandleRequestedData m))
                nil
            (nil? (:block-chain this))
                (.. Peer'log (debug "Received block but was not configured with an AbstractBlockChain"))
            ;; Did we lose download peer status after requesting block data?
            (not (:v-download-data this))
                (.. Peer'log (debug "{}: Received block we did not ask for: {}", (.. this (getAddress)), (.. m (getHashAsString))))
            :else
                (do
                    (.. (:pending-block-downloads this) (remove (.. m (getHash))))

                    (try
                        ;; Otherwise it's a block sent to us because the peer thought we needed it, so add it to the block chain.
                        (if (.. (:block-chain this) (add m))
                            ;; The block was successfully linked into the chain.  Notify the user of our progress.
                            (.. this (invokeOnBlocksDownloaded m, nil))
                            ;; This block is an orphan - we don't know how to get from it back to the genesis block yet.  That
                            ;; must mean that there are blocks we are missing, so do another getblocks with a new block locator
                            ;; to ask the peer to send them to us.  This can happen during the initial block chain download where
                            ;; the peer will only send us 500 at a time and then sends us the head block expecting us to request
                            ;; the others.
                            ;;
                            ;; We must do two things here:
                            ;; (1) Request from current top of chain to the oldest ancestor of the received block in the orphan set.
                            ;; (2) Filter out duplicate getblock requests (done in blockChainDownloadLocked).
                            ;;
                            ;; The reason for (1) is that otherwise if new blocks were solved during the middle of chain download
                            ;; we'd do a blockChainDownloadLocked() on the new best chain head, which would cause us to try and grab
                            ;; the chain twice (or more!) on the same connection!  The block chain would filter out the duplicates
                            ;; but only at a huge speed penalty.  By finding the orphan root we ensure every getblocks looks the
                            ;; same no matter how many blocks are solved, and therefore that the (2) duplicate filtering can work.
                            ;;
                            ;; We only do this if we are not currently downloading headers.  If we are then we don't want to kick
                            ;; off a request for lots more headers in parallel.
                            (do
                                (.. (:lock this) (lock))
                                (try
                                    (if (:download-block-bodies this)
                                        (let [#_"Block" __orphanRoot (ensure some? (.. (:block-chain this) (getOrphanRoot (.. m (getHash)))))]
                                            (.. this (blockChainDownloadLocked (.. __orphanRoot (getHash))))
                                        )
                                        (.. Peer'log (info "Did not start chain download on solved block due to in-flight header download."))
                                    )
                                    (finally
                                        (.. (:lock this) (unlock))
                                    )
                                )
                            )
                        )
                        (catch VerificationException e
                            ;; We don't want verification failures to kill the thread.
                            (.. Peer'log (warn "{}: Block verification failed", (.. this (getAddress)), e))
                        )
                        (catch PrunedException e
                            ;; Unreachable when in SPV mode.
                            (throw (RuntimeException. e))
                        )
                    )
                )
        )
        nil
    )

    ;; TODO: Fix this duplication.
    #_protected
    (§ method #_"void" endFilteredBlock [#_"FilteredBlock" m]
        (cond
            (not (:v-download-data this))
                (.. Peer'log (debug "{}: Received block we did not ask for: {}", (.. this (getAddress)), (.. m (getHash) (toString))))
            (nil? (:block-chain this))
                (.. Peer'log (debug "Received filtered block but was not configured with an AbstractBlockChain"))
            :else
                (do
                    ;; Note that we currently do nothing about peers which maliciously do not include transactions which
                    ;; actually match our filter or which simply do not send us all the transactions we need: it can be fixed
                    ;; by cross-checking peers against each other.
                    (.. (:pending-block-downloads this) (remove (.. m (getBlockHeader) (getHash))))

                    (try
                        ;; It's a block sent to us because the peer thought we needed it, so maybe add it to the block chain.
                        ;; The FilteredBlock m here contains a list of hashes, and may contain Transaction objects for a subset
                        ;; of the hashes (those that were sent to us by the remote peer).  Any hashes that haven't had a tx
                        ;; provided in processTransaction are ones that were announced to us previously via an 'inv' so the
                        ;; assumption is we have already downloaded them and either put them in the wallet, or threw them away
                        ;; for being false positives.
                        ;;
                        ;; TODO: Fix the following protocol race.
                        ;; It is possible for this code to go wrong such that we miss a confirmation.  If the remote peer announces
                        ;; a relevant transaction via an 'inv' and then it immediately announces the block that confirms
                        ;; the tx before we had a chance to download it+its dependencies and provide them to the wallet, then we
                        ;; will add the block to the chain here without the tx being in the wallet and thus it will miss its
                        ;; confirmation and become stuck forever.  The fix is to notice that there's a pending getdata for a tx
                        ;; that appeared in this block and delay processing until it arrived ... it's complicated by the fact that
                        ;; the data may be requested by a different peer to this one.

                        ;; Ask each wallet attached to the peer/blockchain if this block exhausts the list of data items
                        ;; (keys/addresses) that were used to calculate the previous filter.  If so, then it's possible this block
                        ;; is only partial.  Check for discarding first so we don't check for exhaustion on blocks we already know
                        ;; we're going to discard, otherwise redundant filters might end up being queued and calculated.
                        (.. (:lock this) (lock))
                        (try
                            (when (some? (:awaiting-fresh-filter this))
                                (.. Peer'log (info "Discarding block {} because we're still waiting for a fresh filter", (.. m (getHash))))
                                ;; We must record the hashes of blocks we discard because you cannot do getblocks twice on the same
                                ;; range of blocks and get an inv both times, due to the codepath in Bitcoin Core hitting
                                ;; CPeer::PushInventory() which checks CPeer::setInventoryKnown and thus deduplicates.
                                (.. (:awaiting-fresh-filter this) (add (.. m (getHash))))
                                (§ return nil) ;; Chain download process is restarted via a call to setBloomFilter.
                            )

                            (when (.. this (checkForFilterExhaustion m))
                                ;; Yes, so we must abandon the attempt to process this block and any further blocks we receive,
                                ;; then wait for the Bloom filter to be recalculated, sent to this peer and for the peer to acknowledge
                                ;; that the new filter is now in use (which we have to simulate with a ping/pong), and then we can
                                ;; safely restart the chain download with the new filter that contains a new set of lookahead keys.
                                (.. Peer'log (info "Bloom filter exhausted whilst processing block {}, discarding", (.. m (getHash))))
                                (§ assoc this :awaiting-fresh-filter (LinkedList. #_"<>"))
                                (.. (:awaiting-fresh-filter this) (add (.. m (getHash))))
                                (.. (:awaiting-fresh-filter this) (addAll (.. (:block-chain this) (drainOrphanBlocks))))
                                (§ return nil) ;; Chain download process is restarted via a call to setBloomFilter.
                            )
                            (finally
                                (.. (:lock this) (unlock))
                            )
                        )

                        (if (.. (:block-chain this) (add m))
                            ;; The block was successfully linked into the chain.  Notify the user of our progress.
                            (.. this (invokeOnBlocksDownloaded (.. m (getBlockHeader)), m))
                            ;; This block is an orphan - we don't know how to get from it back to the genesis block yet.  That
                            ;; must mean that there are blocks we are missing, so do another getblocks with a new block locator
                            ;; to ask the peer to send them to us.  This can happen during the initial block chain download where
                            ;; the peer will only send us 500 at a time and then sends us the head block expecting us to request
                            ;; the others.
                            ;;
                            ;; We must do two things here:
                            ;; (1) Request from current top of chain to the oldest ancestor of the received block in the orphan set.
                            ;; (2) Filter out duplicate getblock requests (done in blockChainDownloadLocked).
                            ;;
                            ;; The reason for (1) is that otherwise if new blocks were solved during the middle of chain download
                            ;; we'd do a blockChainDownloadLocked() on the new best chain head, which would cause us to try and grab the
                            ;; chain twice (or more!) on the same connection!  The block chain would filter out the duplicates but
                            ;; only at a huge speed penalty.  By finding the orphan root we ensure every getblocks looks the same
                            ;; no matter how many blocks are solved, and therefore that the (2) duplicate filtering can work.
                            (do
                                (.. (:lock this) (lock))
                                (try
                                    (let [#_"Block" __orphanRoot (ensure some? (.. (:block-chain this) (getOrphanRoot (.. m (getHash)))))]
                                        (.. this (blockChainDownloadLocked (.. __orphanRoot (getHash))))
                                    )
                                    (finally
                                        (.. (:lock this) (unlock))
                                    )
                                )
                            )
                        )
                        (catch VerificationException e
                            ;; We don't want verification failures to kill the thread.
                            (.. Peer'log (warn "{}: FilteredBlock verification failed", (.. this (getAddress)), e))
                        )
                        (catch PrunedException e
                            ;; We pruned away some of the data we need to properly handle this block.  We need to
                            ;; request the needed data from the remote peer and fix things.  Or just give up.
                            ;; TODO: Request e.getHash() and submit it to the block store before any other blocks.
                            (throw (RuntimeException. e))
                        )
                    )
                )
        )
        nil
    )

    #_private
    (§ method- #_"boolean" checkForFilterExhaustion [#_"FilteredBlock" m]
        (let [#_"boolean" exhausted false]
            (doseq [#_"Wallet" wallet (:wallets this)]
                (§ ass exhausted (| exhausted (.. wallet (checkForFilterExhaustion m))))
            )
            exhausted
        )
    )

    #_private
    (§ method- #_"boolean" maybeHandleRequestedData [#_"Message" m]
        (let [#_"boolean" found false #_"Sha256Hash" hash (.. m (getHash))]
            (doseq [#_"GetDataRequest" req (:get-data-futures this)]
                (when (.. hash (equals (:hash req)))
                    (.. (:future req) (set m))
                    (.. (:get-data-futures this) (remove req))
                    (§ ass found true)
                    ;; Keep going in case there are more.
                )
            )
            found
        )
    )

    #_private
    (§ method- #_"void" invokeOnBlocksDownloaded [#_"Block" block, #_nilable #_"FilteredBlock" fb]
        ;; It is possible for the peer block height difference to be negative when blocks have been solved and broadcast
        ;; since the time we first connected to the peer.  However, it's weird and unexpected to receive a callback
        ;; with negative "blocks left" in this case, so we clamp to zero so the API user doesn't have to think about it.
        (let [#_"int" __blocksLeft (max 0, (- (int (-> this :v-peer-version-message :best-height)) (.. (ensure some? (:block-chain this)) (getBestChainHeight))))]
            (doseq [#_"ListenerRegistration<BlocksDownloadedEventListener>" registration (:blocks-downloaded-event-listeners this)]
                (.. (:executor registration) (execute (Runnable.)
                (§ anon
                    #_override
                    #_public
                    (§ method #_"void" run []
                        (.. (:listener registration) (onBlocksDownloaded (§ dhis Peer), block, fb, __blocksLeft))
                        nil
                    )
                )))
            )
        )
        nil
    )

    #_protected
    (§ method #_"void" processInv [#_"InventoryMessage" inv]
        (let [#_"List<InventoryItem>" items (.. inv (getItems))]

            ;; Separate out the blocks and transactions, we'll handle them differently.
            (let [#_"List<InventoryItem>" transactions (LinkedList. #_"<>")
                  #_"List<InventoryItem>" blocks (LinkedList. #_"<>")]

                (doseq [#_"InventoryItem" item items]
                    (condp = (:type item)
                        Transaction (.. transactions (add item))
                        Block       (.. blocks (add item))
                        (throw (IllegalStateException. (str "Not implemented: " (:type item))))
                    )
                )

                (let [#_"boolean" download? (:v-download-data this)]

                    (when (and (= (.. transactions (size)) 0) (= (.. blocks (size)) 1))
                        ;; Single block announcement.  If we're downloading the chain this is just a tickle to make us continue
                        ;; (the block chain download protocol is very implicit and not well thought out).  If we're not downloading
                        ;; the chain then this probably means a new block was solved and the peer believes it connects to the best
                        ;; chain, so count it.  This way getBestChainHeight() can be accurate.
                        (cond (and download? (some? (:block-chain this)))
                            (do
                                (when (not (.. (:block-chain this) (isOrphan (:hash (.. blocks (get 0))))))
                                    (.. (:blocks-announced this) (incrementAndGet))
                                )
                            )
                            :else
                            (do
                                (.. (:blocks-announced this) (incrementAndGet))
                            )
                        )
                    )

                    (let [#_"GetDataMessage" getdata (GetDataMessage. (:params this))]

                        (let [#_"Iterator<InventoryItem>" it (.. transactions (iterator))]
                            (while (.. it (hasNext))
                                (let [#_"InventoryItem" item (.. it (next))]
                                    ;; Only download the transaction if we are the first peer that saw it be advertised.  Other peers will also
                                    ;; see it be advertised in inv packets asynchronously, they co-ordinate via the memory pool.  We could
                                    ;; potentially download transactions faster by always asking every peer for a tx when advertised, as remote
                                    ;; peers run at different speeds.  However to conserve bandwidth on mobile devices we try to only download a
                                    ;; transaction once.  This means we can miss broadcasts if the peer disconnects between sending us an inv and
                                    ;; sending us the transaction: currently we'll never try to re-fetch after a timeout.
                                    ;;
                                    ;; The line below can trigger confidence listeners.
                                    (let [#_"TransactionConfidence" conf (.. (:context this) (getConfidenceTable) (seen (:hash item), (.. this (getAddress))))]
                                        (cond (< 1 (.. conf (numBroadcastPeers)))
                                            (do
                                                ;; Some other peer already announced this so don't download.
                                                (.. it (remove))
                                            )
                                            (.. conf (getSource) (equals :ConfidenceSource'SELF))
                                            (do
                                                ;; We created this transaction ourselves, so don't download.
                                                (.. it (remove))
                                            )
                                            :else
                                            (do
                                                (.. Peer'log (debug "{}: getdata on tx {}", (.. this (getAddress)), (:hash item)))
                                                (.. getdata (addItem item))
                                                ;; Register with the garbage collector that we care about the confidence data for a while.
                                                (.. (:pending-tx-downloads this) (add conf))
                                            )
                                        )
                                    )
                                )
                            )

                            ;; If we are requesting filteredblocks, we have to send a ping after the getdata so that we have a clear
                            ;; end to the final FilteredBlock's transactions (in the form of a pong) sent to us.
                            (let [#_"boolean" __pingAfterGetData false]

                                (.. (:lock this) (lock))
                                (try
                                    (when (and (< 0 (.. blocks (size))) download? (some? (:block-chain this)))
                                        ;; Ideally, we'd only ask for the data here if we actually needed it.  However that can imply a lot of
                                        ;; disk IO to figure out what we've got.  Normally peers will not send us inv for things we already have
                                        ;; so we just re-request it here, and if we get duplicates the block chain / wallet will filter them out.
                                        (doseq [#_"InventoryItem" item blocks]
                                            (cond (and (.. (:block-chain this) (isOrphan (:hash item))) (:download-block-bodies this))
                                                (do
                                                    ;; If an orphan was re-advertised, ask for more blocks unless we are not currently downloading
                                                    ;; full block data because we have a getheaders outstanding.
                                                    (let [#_"Block" __orphanRoot (ensure some? (.. (:block-chain this) (getOrphanRoot (:hash item))))]
                                                        (.. this (blockChainDownloadLocked (.. __orphanRoot (getHash))))
                                                    )
                                                )
                                                :else
                                                (do
                                                    ;; Don't re-request blocks we already requested.  Normally this should not happen.  However there is
                                                    ;; an edge case: if a block is solved and we complete the inv<->getdata<->block<->getblocks cycle
                                                    ;; whilst other parts of the chain are streaming in, then the new getblocks request won't match the
                                                    ;; previous one: whilst the stopHash is the same (because we use the orphan root), the start hash
                                                    ;; will be different and so the getblocks req won't be dropped as a duplicate.  We'll end up
                                                    ;; requesting a subset of what we already requested, which can lead to parallel chain downloads
                                                    ;; and other nastyness.  So we just do a quick removal of redundant getdatas here too.
                                                    ;;
                                                    ;; Note that as of June 2012 Bitcoin Core won't actually ever interleave blocks pushed as
                                                    ;; part of chain download with newly announced blocks, so it should always be taken care of by
                                                    ;; the duplicate check in blockChainDownloadLocked().  But Bitcoin Core may change in future so
                                                    ;; it's better to be safe here.
                                                    (when (not (.. (:pending-block-downloads this) (contains (:hash item))))
                                                        (cond (and (.. (:v-peer-version-message this) (isBloomFilteringSupported)) (:use-filtered-blocks this))
                                                            (do
                                                                (.. getdata (addFilteredBlock (:hash item)))
                                                                (§ ass __pingAfterGetData true)
                                                            )
                                                            :else
                                                            (do
                                                                (.. getdata (addItem item))
                                                            )
                                                        )
                                                        (.. (:pending-block-downloads this) (add (:hash item)))
                                                    )
                                                )
                                            )
                                        )
                                        ;; If we're downloading the chain, doing a getdata on the last block we were told about will cause the
                                        ;; peer to advertize the head block to us in a single-item inv.  When we download THAT, it will be an
                                        ;; orphan block, meaning we'll re-enter blockChainDownloadLocked() to trigger another getblocks between the
                                        ;; current best block we have and the orphan block.  If more blocks arrive in the meantime they'll also
                                        ;; become orphan.
                                    )
                                    (finally
                                        (.. (:lock this) (unlock))
                                    )
                                )

                                (when (not (.. getdata (getItems) (isEmpty)))
                                    ;; This will cause us to receive a bunch of block or tx messages.
                                    (.. this (sendMessage getdata))
                                )

                                (when __pingAfterGetData
                                    (.. this (sendMessage (Ping. (long (* (Math/random) Long/MAX_VALUE)))))
                                )
                            )
                        )
                    )
                )
            )
        )
        nil
    )

    ;;;
     ; Asks the connected peer for the block of the given hash, and returns a future representing the answer.
     ; If you want the block right away and don't mind waiting for it, just call .get() on the result.  Your thread
     ; will block until the peer answers.
     ;;
    #_suppress #_[ "unchecked" ]
    ;; The 'unchecked conversion' warning being suppressed here comes from the sendSingleGetData() formally returning
    ;; ListenableFuture instead of ListenableFuture<Block>.  This is okay as sendSingleGetData() actually returns
    ;; ListenableFuture<Block> in this context.  Note that sendSingleGetData() is also used for Transactions.
    #_public
    (§ method #_"ListenableFuture<Block>" getBlock [#_"Sha256Hash" __blockHash]
        ;; This does not need to be locked.
        (.. Peer'log (info "Request to fetch block {}", __blockHash))
        (let [#_"GetDataMessage" getdata (GetDataMessage. (:params this))]
            (.. getdata (addBlock __blockHash))
            (.. this (sendSingleGetData getdata))
        )
    )

    ;;;
     ; Asks the connected peer for the given transaction from its memory pool.  Transactions in the chain cannot be
     ; retrieved this way because peers don't have a transaction ID to transaction-pos-on-disk index, and besides,
     ; in future many peers will delete old transaction data they don't need.
     ;;
    #_suppress #_[ "unchecked" ]
    ;; The 'unchecked conversion' warning being suppressed here comes from the sendSingleGetData() formally returning
    ;; ListenableFuture instead of ListenableFuture<Transaction>.  This is okay as sendSingleGetData() actually returns
    ;; ListenableFuture<Transaction> in this context.  Note that sendSingleGetData() is also used for Blocks.
    #_public
    (§ method #_"ListenableFuture<Transaction>" getPeerMempoolTransaction [#_"Sha256Hash" hash]
        ;; This does not need to be locked.
        (.. Peer'log (info "Request to fetch peer mempool tx  {}", hash))
        (let [#_"GetDataMessage" getdata (GetDataMessage. (:params this))]
            (.. getdata (addTransaction hash))
            (.. this (sendSingleGetData getdata))
        )
    )

    ;;; Sends a getdata with a single item in it. ;;
    #_private
    (§ method- #_"ListenableFuture" sendSingleGetData [#_"GetDataMessage" getdata]
        ;; This does not need to be locked.
        (assert-argument (= (.. getdata (getItems) (size)) 1))
        (let [#_"GetDataRequest" req (GetDataRequest. (.. getdata (getItems) (get 0) :hash), (SettableFuture/create))]
            (.. (:get-data-futures this) (add req))
            (.. this (sendMessage getdata))
            (:future req)
        )
    )

    ;;; Sends a getaddr request to the peer and returns a future that completes with the answer once the peer has replied. ;;
    #_public
    (§ method #_"ListenableFuture<AddressMessage>" getAddr []
        (let [#_"SettableFuture<AddressMessage>" future (SettableFuture/create)]
            (§ sync (:get-addr-futures this)
                (.. (:get-addr-futures this) (add future))
            )
            (.. this (sendMessage (GetAddrMessage. (:params this))))
            future
        )
    )

    ;;;
     ; When downloading the block chain, the bodies will be skipped for blocks created before the given date.
     ; Any transactions relevant to the wallet will therefore not be found, but if you know your wallet has no such
     ; transactions it doesn't matter and can save a lot of bandwidth and processing time.  Note that the times of blocks
     ; isn't known until their headers are available and they are requested in chunks, so some headers may be downloaded
     ; twice using this scheme, but this optimization can still be a large win for newly created wallets.
     ;
     ; @param secondsSinceEpoch Time in seconds since the epoch or 0 to reset to always downloading block bodies.
     ;;
    #_public
    (§ method #_"void" setDownloadParameters [#_"long" __secondsSinceEpoch, #_"boolean" __useFilteredBlocks]
        (.. (:lock this) (lock))
        (try
            (cond (= __secondsSinceEpoch 0)
                (do
                    (§ assoc this :fast-catchup-time-secs (.. (-> this :params :genesis-block) (getTimeSeconds)))
                    (§ assoc this :download-block-bodies true)
                )
                :else
                (do
                    (§ assoc this :fast-catchup-time-secs __secondsSinceEpoch)
                    ;; If the given time is before the current chains head block time, then this has no effect (we already
                    ;; downloaded everything we need).
                    (when (and (some? (:block-chain this)) (< (.. (:block-chain this) (getChainHead) (getHeader) (getTimeSeconds)) (:fast-catchup-time-secs this)))
                        (§ assoc this :download-block-bodies false)
                    )
                )
            )
            (§ assoc this :use-filtered-blocks __useFilteredBlocks)
            (finally
                (.. (:lock this) (unlock))
            )
        )
        nil
    )

    ;;;
     ; Links the given wallet to this peer.  If you have multiple peers, you should use a {@link PeerGroup} to manage
     ; them and use the {@link PeerGroup#addWallet(Wallet)} method instead of registering the wallet with each peer
     ; independently, otherwise the wallet will receive duplicate notifications.
     ;;
    #_public
    (§ method #_"void" addWallet [#_"Wallet" wallet]
        (.. (:wallets this) (add wallet))
        nil
    )

    ;;; Unlinks the given wallet from peer.  See {@link Peer#addWallet(Wallet)}. ;;
    #_public
    (§ method #_"void" removeWallet [#_"Wallet" wallet]
        (.. (:wallets this) (remove wallet))
        nil
    )

    ;; Keep track of the last request we made to the peer in blockChainDownloadLocked so we can avoid redundant and harmful
    ;; getblocks requests.
    #_private
    (§ field- #_"Sha256Hash" :last-get-blocks-begin)
    #_private
    (§ field- #_"Sha256Hash" :last-get-blocks-end)

    #_private
    (§ method- #_"void" blockChainDownloadLocked [#_"Sha256Hash" __toHash]
        (assert-state (.. (:lock this) (isHeldByCurrentThread)))

        ;; The block chain download process is a bit complicated.  Basically, we start with one or more blocks in a
        ;; chain that we have from a previous session.  We want to catch up to the head of the chain BUT we don't know
        ;; where that chain is up to or even if the top block we have is even still in the chain - we
        ;; might have got ourselves onto a fork that was later resolved by the network.
        ;;
        ;; To solve this, we send the peer a block locator which is just a list of block hashes.  It contains the
        ;; blocks we know about, but not all of them, just enough of them so the peer can figure out if we did end up
        ;; on a fork and if so, what the earliest still valid block we know about is likely to be.
        ;;
        ;; Once it has decided which blocks we need, it will send us an inv with up to 500 block messages.  We may
        ;; have some of them already if we already have a block chain and just need to catch up.  Once we request the
        ;; last block, if there are still more to come it sends us an "inv" containing only the hash of the head
        ;; block.
        ;;
        ;; That causes us to download the head block but then we find (in processBlock) that we can't connect
        ;; it to the chain yet because we don't have the intermediate blocks.  So we rerun this function building a
        ;; new block locator describing where we're up to.
        ;;
        ;; The getblocks with the new locator gets us another inv with another bunch of blocks.  We download them once
        ;; again.  This time when the peer sends us an inv with the head block, we already have it so we won't download
        ;; it again - but we recognize this case as special and call back into blockChainDownloadLocked to continue the
        ;; process.
        ;;
        ;; So this is a complicated process but it has the advantage that we can download a chain of enormous length
        ;; in a relatively stateless manner and with constant memory usage.
        ;;
        ;; All this is made more complicated by the desire to skip downloading the bodies of blocks that pre-date the
        ;; 'fast catchup time', which is usually set to the creation date of the earliest key in the wallet.  Because
        ;; we know there are no transactions using our keys before that date, we need only the headers.  To do that we
        ;; use the "getheaders" command.  Once we find we've gone past the target date, we throw away the downloaded
        ;; headers and then request the blocks from that point onwards.  "getheaders" does not send us an inv, it just
        ;; sends us the data we requested in a "headers" message.

        ;; TODO: Block locators should be abstracted out rather than special cased here.
        (let [#_"List<Sha256Hash>" __blockLocator (ArrayList. #_"<>" 51)]

            ;; For now, we don't do the exponential thinning as suggested here:
            ;;
            ;;   https://en.bitcoin.it/wiki/Protocol_specification#getblocks
            ;;
            ;; This is because it requires scanning all the block chain headers, which is very slow.  Instead we add the
            ;; top 100 block headers.  If there is a re-org deeper than that, we'll end up downloading the entire chain.
            ;; We must always put the genesis block as the first entry.

            (let [#_"BlockStore" store (.. (ensure some? (:block-chain this)) (getBlockStore))
                  #_"StoredBlock" __chainHead (.. (:block-chain this) (getChainHead))
                  #_"Sha256Hash" __chainHeadHash (.. __chainHead (getHeader) (getHash))]

                ;; Did we already make this request?  If so, don't do it again.
                (when (and (Objects/equal (:last-get-blocks-begin this), __chainHeadHash) (Objects/equal (:last-get-blocks-end this), __toHash))
                    (.. Peer'log (info "blockChainDownloadLocked({}): ignoring duplicated request: {}", __toHash, __chainHeadHash))
                    (doseq [#_"Sha256Hash" hash (:pending-block-downloads this)]
                        (.. Peer'log (info "Pending block download: {}", hash))
                    )
                    (.. Peer'log (info (Throwables/getStackTraceAsString (Throwable.))))
                    (§ return nil)
                )

                (let [#_"StoredBlock" cursor __chainHead]
                    (loop-when-recur [#_"int" i 100] (and (some? cursor) (< 0 i)) [(dec i)]
                        (.. __blockLocator (add (.. cursor (getHeader) (getHash))))
                        (try
                            (§ ass cursor (.. cursor (getPrev store)))
                            (catch BlockStoreException e
                                (.. Peer'log (error "Failed to walk the block chain whilst constructing a locator"))
                                (throw (RuntimeException. e))
                            )
                        )
                    )

                    ;; Only add the locator if we didn't already do so.  If the chain is < 50 blocks we already reached it.
                    (when (some? cursor)
                        (.. __blockLocator (add (.. (-> this :params :genesis-block) (getHash))))
                    )

                    ;; Record that we requested this range of blocks so we can filter out duplicate requests in the event
                    ;; of a block being solved during chain download.
                    (§ assoc this :last-get-blocks-begin __chainHeadHash)
                    (§ assoc this :last-get-blocks-end __toHash)

                    (cond (:download-block-bodies this)
                        (do
                            (let [#_"GetBlocksMessage" message (GetBlocksMessage. (:params this), __blockLocator, __toHash)]
                                (.. this (sendMessage message))
                            )
                        )
                        :else
                        (do
                            ;; Downloading headers for a while instead of full blocks.
                            (let [#_"GetHeadersMessage" message (GetHeadersMessage. (:params this), __blockLocator, __toHash)]
                                (.. this (sendMessage message))
                            )
                        )
                    )
                )
            )
        )
        nil
    )

    ;;;
     ; Starts an asynchronous download of the block chain.  The chain download is deemed to be complete once we've
     ; downloaded the same number of blocks that the peer advertised having in its version handshake message.
     ;;
    #_public
    (§ method #_"void" startBlockChainDownload []
        (.. this (setDownloadData true))
        ;; TODO: Peer might still have blocks that we don't have, and even have a heavier
        ;; chain even if the chain block count is lower.
        (let [#_"int" __blocksLeft (.. this (getPeerBlockHeightDifference))]
            (when (<= 0 __blocksLeft)
                (doseq [#_"ListenerRegistration<ChainDownloadStartedEventListener>" registration (:chain-download-started-event-listeners this)]
                    (.. (:executor registration) (execute (Runnable.)
                    (§ anon
                        #_override
                        #_public
                        (§ method #_"void" run []
                            (.. (:listener registration) (onChainDownloadStarted (§ dhis Peer), __blocksLeft))
                            nil
                        )
                    )))
                )
                ;; When we just want as many blocks as possible, we can set the target hash to zero.
                (.. (:lock this) (lock))
                (try
                    (.. this (blockChainDownloadLocked Sha256Hash'ZERO_HASH))
                    (finally
                        (.. (:lock this) (unlock))
                    )
                )
            )
        )
        nil
    )

    #_private
    #_static
    (§ class- PendingPing
        #_protected
        (§ field #_"Peer" :peer)
        ;; The future that will be invoked when the pong is heard back.
        #_public
        (§ field #_"SettableFuture<Long>" :future)
        ;; The random nonce that lets us tell apart overlapping pings/pongs.
        #_public
        (§ field #_"long" :nonce)
        ;; Measurement of the time elapsed.
        #_public
        (§ field #_"long" :start-time-msec)

        #_public
        (§ constructor PendingPing [#_"Peer" peer, #_"long" nonce]
            (§ assoc this :peer (ensure some? peer))
            (§ assoc this :future (SettableFuture/create))
            (§ assoc this :nonce nonce)
            (§ assoc this :start-time-msec (Utils'currentTimeMillis))
            this
        )

        #_public
        (§ method #_"void" complete []
            (when (not (.. (:future this) (isDone)))
                (let [#_"Long" elapsed (- (Utils'currentTimeMillis) (:start-time-msec this))]
                    (.. (:peer this) (addPingTimeData elapsed))
                    (.. Peer'log (debug "{}: ping time is {} msec", (.. (:peer this) (toString)), elapsed))
                    (.. (:future this) (set elapsed))
                )
            )
            nil
        )
    )

    ;;; Adds a ping time sample to the averaging window. ;;
    #_private
    (§ method- #_"void" addPingTimeData [#_"long" sample]
        (.. (:last-ping-times-lock this) (lock))
        (try
            (cond (nil? (:last-ping-times this))
                (do
                    (§ assoc this :last-ping-times (long-array Peer'PING_MOVING_AVERAGE_WINDOW))
                    ;; Initialize the averaging window to the first sample.
                    (Arrays/fill (:last-ping-times this), sample)
                )
                :else
                (do
                    ;; Shift all elements backwards by one.
                    (System/arraycopy (:last-ping-times this), 1, (:last-ping-times this), 0, (dec (alength (:last-ping-times this))))
                    ;; And append the new sample to the end.
                    (aset (:last-ping-times this) (dec (alength (:last-ping-times this))) sample)
                )
            )
            (finally
                (.. (:last-ping-times-lock this) (unlock))
            )
        )
        nil
    )

    ;;;
     ; Sends the peer a ping message and returns a future that will be invoked when the pong is received back.
     ; The future provides a number which is the number of milliseconds elapsed between the ping and the pong.
     ; Once the pong is received the value returned by {@link Peer#getLastPingTime()} is updated.
     ;
     ; @throws ProtocolException if the peer version is too low to support measurable pings.
     ;;
    #_public
    #_throws #_[ "ProtocolException" ]
    (§ method #_"ListenableFuture<Long>" ping []
        (.. this (ping (long (* (Math/random) Long/MAX_VALUE))))
    )

    #_protected
    #_throws #_[ "ProtocolException" ]
    (§ method #_"ListenableFuture<Long>" ping [#_"long" nonce]
        (let [#_"VersionMessage" ver (:v-peer-version-message this)]
            (when (not (.. ver (isPingPongSupported)))
                (throw (ProtocolException. (str "Peer version is too low for measurable pings: " ver)))
            )

            (let [#_"PendingPing" __pendingPing (PendingPing. this, nonce)]
                (.. (:pending-pings this) (add __pendingPing))
                (.. this (sendMessage (Ping. (:nonce __pendingPing))))

                (:future __pendingPing)
            )
        )
    )

    ;;;
     ; Returns the elapsed time of the last ping/pong cycle.  If {@link Peer#ping()} has never
     ; been called or we did not hear back the "pong" message yet, returns {@link Long#MAX_VALUE}.
     ;;
    #_public
    (§ method #_"long" getLastPingTime []
        (.. (:last-ping-times-lock this) (lock))
        (try
            (if (some? (:last-ping-times this)) (aget (:last-ping-times this) (dec (alength (:last-ping-times this)))) Long/MAX_VALUE)
            (finally
                (.. (:last-ping-times-lock this) (unlock))
            )
        )
    )

    ;;;
     ; Returns a moving average of the last N ping/pong cycles.  If {@link Peer#ping()} has never
     ; been called or we did not hear back the "pong" message yet, returns {@link Long#MAX_VALUE}.
     ; The moving average window is 5 buckets.
     ;;
    #_public
    (§ method #_"long" getPingTime []
        (.. (:last-ping-times-lock this) (lock))
        (try
            (if (some? (:last-ping-times this)) (long (/ (double (reduce + (:last-ping-times this))) (alength (:last-ping-times this)))) Long/MAX_VALUE)
            (finally
                (.. (:last-ping-times-lock this) (unlock))
            )
        )
    )

    #_private
    (§ method- #_"void" processPing [#_"Ping" m]
        (when (.. m (hasNonce))
            (.. this (sendMessage (Pong. (.. m (getNonce)))))
        )
        nil
    )

    #_protected
    (§ method #_"void" processPong [#_"Pong" m]
        ;; Iterates over a snapshot of the list, so we can run unlocked here.
        (doseq [#_"PendingPing" ping (:pending-pings this)]
            (when (= (.. m (getNonce)) (:nonce ping))
                (.. (:pending-pings this) (remove ping))
                ;; This line may trigger an event listener that re-runs ping().
                (.. ping (complete))
                (§ return nil)
            )
        )
        nil
    )

    ;;;
     ; Returns the difference between our best chain height and the peers, which can either be positive if we are
     ; behind the peer, or negative if the peer is ahead of us.
     ;;
    #_public
    (§ method #_"int" getPeerBlockHeightDifference []
        (ensure some? (:block-chain this), "No block chain configured")

        ;; Chain will overflow signed int blocks in ~41,000 years.
        (let [#_"int" __chainHeight (int (.. this (getBestHeight)))]
            ;; chainHeight should not be zero/negative because we shouldn't have given the user a Peer that is to another
            ;; client-mode node, nor should it be unconnected.  If that happens it means the user overrode us somewhere or
            ;; there is a bug in the peer management code.
            (assert-state (or (.. (:params this) (allowEmptyPeerChain)) (< 0 __chainHeight)), "Connected to peer with zero/negative chain height", __chainHeight)
            (- __chainHeight (.. (:block-chain this) (getBestChainHeight)))
        )
    )

    #_private
    (§ method- #_"boolean" isNotFoundMessageSupported []
        (<= NotFoundMessage'MIN_PROTOCOL_VERSION (-> this :v-peer-version-message :client-version))
    )

    ;;;
     ; Returns true if this peer will try and download things it is sent in "inv" messages.
     ; Normally you only need one peer to be downloading data.  Defaults to true.
     ;;
    #_public
    (§ method #_"boolean" isDownloadData []
        (:v-download-data this)
    )

    ;;;
     ; If set to false, the peer won't try and fetch blocks and transactions it hears about.  Normally, only one
     ; peer should download missing blocks.  Defaults to true.  Changing this value from false to true may trigger
     ; a request to the remote peer for the contents of its memory pool, if Bloom filtering is active.
     ;;
    #_public
    (§ method #_"void" setDownloadData [#_"boolean" download?]
        (§ assoc this :v-download-data download?)
        nil
    )

    ;;; Returns version data announced by the remote peer. ;;
    #_public
    (§ method #_"VersionMessage" getPeerVersionMessage []
        (:v-peer-version-message this)
    )

    ;;; Returns version data we announce to our remote peers. ;;
    #_public
    (§ method #_"VersionMessage" getVersionMessage []
        (:version-message this)
    )

    ;;;
     ; @return the height of the best chain as claimed by peer: sum of its ver announcement and blocks announced since.
     ;;
    #_public
    (§ method #_"long" getBestHeight []
        (+ (-> this :v-peer-version-message :best-height) (.. (:blocks-announced this) (get)))
    )

    ;;;
     ; The minimum P2P protocol version that is accepted.  If the peer speaks a protocol version lower than this, it
     ; will be disconnected.
     ;
     ; @return true if the peer was disconnected as a result.
     ;;
    #_public
    (§ method #_"boolean" setMinProtocolVersion [#_"int" __minProtocolVersion]
        (§ assoc this :v-min-protocol-version __minProtocolVersion)

        (let [#_"VersionMessage" ver (.. this (getPeerVersionMessage))]
            (when' (and (some? ver) (< (:client-version ver) __minProtocolVersion)) => false
                (.. Peer'log (warn "{}: Disconnecting due to new min protocol version {}, got: {}", this, __minProtocolVersion, (:client-version ver)))
                (.. this (close))
                true
            )
        )
    )

    ;;;
     ; Sets a Bloom filter on this connection.  This will cause the given {@link BloomFilter} object to be sent
     ; to the remote peer and if either a memory pool has been set using the constructor or the vDownloadData
     ; property is true, a {@link MemoryPoolMessage} is sent as well to trigger downloading of any pending
     ; transactions that may be relevant.
     ;
     ; The Peer does not automatically request filters from any wallets added using {@link Peer#addWallet(Wallet)}.
     ; This is to allow callers to avoid redundantly recalculating the same filter repeatedly when using multiple
     ; peers and multiple wallets together.
     ;
     ; Therefore, you should not use this method if your app uses a {@link PeerGroup}.  It is called for you.
     ;
     ; If the remote peer doesn't support Bloom filtering, then this call is ignored.  Once set you presently
     ; cannot unset a filter, though the underlying p2p protocol does support it.
     ;;
    #_public
    (§ method #_"void" setBloomFilter [#_"BloomFilter" filter]
        (.. this (setBloomFilter filter, true))
        nil
    )

    ;;;
     ; Sets a Bloom filter on this connection.  This will cause the given {@link BloomFilter} object to be sent
     ; to the remote peer and if requested, a {@link MemoryPoolMessage} is sent as well to trigger downloading of
     ; any pending transactions that may be relevant.
     ;
     ; The Peer does not automatically request filters from any wallets added using {@link Peer#addWallet(Wallet)}.
     ; This is to allow callers to avoid redundantly recalculating the same filter repeatedly when using multiple
     ; peers and multiple wallets together.
     ;
     ; Therefore, you should not use this method if your app uses a {@link PeerGroup}.  It is called for you.
     ;
     ; If the remote peer doesn't support Bloom filtering, then this call is ignored.  Once set you presently
     ; cannot unset a filter, though the underlying p2p protocol does support it.
     ;;
    #_public
    (§ method #_"void" setBloomFilter [#_"BloomFilter" filter, #_"boolean" __andQueryMemPool]
        (ensure some? filter, "Clearing filters is not currently supported")

        (let [#_"VersionMessage" ver (:v-peer-version-message this)]
            (when (and (some? ver) (.. ver (isBloomFilteringSupported)))
                (§ assoc this :v-bloom-filter filter)
                (.. Peer'log (debug "{}: Sending Bloom filter{}", this, (if __andQueryMemPool " and querying mempool" "")))
                (.. this (sendMessage filter))
                (when __andQueryMemPool
                    (.. this (sendMessage (MemoryPoolMessage.)))
                )
                (.. this (maybeRestartChainDownload))
            )
        )
        nil
    )

    #_private
    (§ method- #_"void" maybeRestartChainDownload []
        (.. (:lock this) (lock))
        (try
            (cond
                (nil? (:awaiting-fresh-filter this))
                    nil
                (not (:v-download-data this))
                    ;; This branch should be harmless but I want to know how often it happens in reality.
                    (.. Peer'log (warn "Lost download peer status whilst awaiting fresh filter."))
                :else
                    ;; Ping/pong to wait for blocks that are still being streamed to us to finish being downloaded and discarded.
                    (.. this (ping) (addListener (Runnable.)
                    (§ anon
                        #_override
                        #_public
                        (§ method #_"void" run []
                            (.. (:lock this) (lock))
                            (ensure some? (:awaiting-fresh-filter this))
                            (let [#_"GetDataMessage" getdata (GetDataMessage. (:params this))]
                                (doseq [#_"Sha256Hash" hash (:awaiting-fresh-filter this)]
                                    (.. getdata (addFilteredBlock hash))
                                )
                                (§ assoc this :awaiting-fresh-filter nil)
                                (.. (:lock this) (unlock))

                                (.. Peer'log (info "Restarting chain download"))
                                (.. this (sendMessage getdata))
                                ;; TODO: This bizarre ping-after-getdata hack probably isn't necessary.
                                ;; It's to ensure we know when the end of a filtered block stream of txns is, but we should just be
                                ;; able to match txns with the merkleblock.  Ask Matt why it's written this way.
                                (.. this (sendMessage (Ping. (long (* (Math/random) Long/MAX_VALUE)))))
                            )
                            nil
                        )
                    ), Threading'SAME_THREAD))
            )
            (finally
                (.. (:lock this) (unlock))
            )
        )
        nil
    )

    ;;;
     ; Returns the last {@link BloomFilter} set by {@link Peer#setBloomFilter(BloomFilter)}.  Bloom filters tell
     ; the remote node what transactions to send us, in a compact manner.
     ;;
    #_public
    (§ method #_"BloomFilter" getBloomFilter []
        (:v-bloom-filter this)
    )

    ;;;
     ; Returns true if this peer will use getdata/notfound messages to walk backwards through transaction dependencies
     ; before handing the transaction off to the wallet.  The wallet can do risk analysis on pending/recent transactions
     ; to try and discover if a pending tx might be at risk of double spending.
     ;;
    #_public
    (§ method #_"boolean" isDownloadTxDependencies []
        (< 0 (:v-download-tx-dependency-depth this))
    )

    ;;;
     ; Sets if this peer will use getdata/notfound messages to walk backwards through transaction dependencies
     ; before handing the transaction off to the wallet.  The wallet can do risk analysis on pending/recent transactions
     ; to try and discover if a pending tx might be at risk of double spending.
     ;;
    #_public
    (§ method #_"void" setDownloadTxDependencies [#_"boolean" enable]
        (§ assoc this :v-download-tx-dependency-depth (if enable Integer/MAX_VALUE 0))
        nil
    )

    ;;;
     ; Sets if this peer will use getdata/notfound messages to walk backwards through transaction dependencies
     ; before handing the transaction off to the wallet.  The wallet can do risk analysis on pending/recent transactions
     ; to try and discover if a pending tx might be at risk of double spending.
     ;;
    #_public
    (§ method #_"void" setDownloadTxDependencies [#_"int" depth]
        (§ assoc this :v-download-tx-dependency-depth depth)
        nil
    )
)

;;;
 ; A PeerAddress holds an IP address and port number representing the network location of
 ; a peer in the Bitcoin P2P network.  It exists primarily for serialization purposes.
 ;
 ; Instances of this class are not safe for use by multiple threads.
 ;;
#_public
(§ class PeerAddress (§ extends ChildMessage)
    #_static
    (def #_"int" PeerAddress'MESSAGE_SIZE 30)

    #_private
    (§ field- #_"InetAddress" :addr)
    #_private
    (§ field- #_"String" :hostname) ;; Used for .onion addresses.
    #_private
    (§ field- #_"int" :port)
    #_private
    (§ field- #_"BigInteger" :services)
    #_private
    (§ field- #_"long" :time)

    ;;;
     ; Construct a peer address from a serialized payload.
     ;;
    #_public
    #_throws #_[ "ProtocolException" ]
    (§ constructor PeerAddress [#_"NetworkParameters" params, #_"byte[]" payload, #_"int" offset, #_"int" __protocolVersion]
        (§ super params, payload, offset, __protocolVersion)
        this
    )

    ;;;
     ; Construct a peer address from a serialized payload.
     ;
     ; @param params NetworkParameters object.
     ; @param payload Bitcoin protocol formatted byte array containing message content.
     ; @param offset The location of the first payload byte within the array.
     ; @param protocolVersion Bitcoin protocol version.
     ; @param serializer The serializer to use for this message.
     ; @throws ProtocolException
     ;;
    #_public
    #_throws #_[ "ProtocolException" ]
    (§ constructor PeerAddress [#_"NetworkParameters" params, #_"byte[]" payload, #_"int" offset, #_"int" __protocolVersion, #_"Message" parent, #_"BitcoinSerializer" serializer]
        (§ super params, payload, offset, __protocolVersion, parent, serializer, Message'UNKNOWN_LENGTH)
        this
    )

    ;;;
     ; Construct a peer address from a memorized or hardcoded address.
     ;;
    #_public
    (§ constructor PeerAddress [#_"NetworkParameters" params, #_"InetAddress" addr, #_"int" port, #_"int" __protocolVersion, #_"BigInteger" services]
        (§ super params)

        (§ assoc this :addr (ensure some? addr))
        (§ assoc this :port port)
        (§ assoc this :protocol-version __protocolVersion)
        (§ assoc this :services services)

        (§ assoc this :length (if (< 31402 __protocolVersion) PeerAddress'MESSAGE_SIZE (- PeerAddress'MESSAGE_SIZE 4)))
        this
    )

    ;;;
     ; Constructs a peer address from the given IP address and port.  Version number is default for the given parameters.
     ;;
    #_public
    (§ constructor PeerAddress [#_"NetworkParameters" params, #_"InetAddress" addr, #_"int" port]
        (§ this params, addr, port, ProtocolVersion'CURRENT, BigInteger/ZERO)
        this
    )

    ;;;
     ; Constructs a peer address from the given IP address.  Port and version number are default for the given parameters.
     ;;
    #_public
    (§ constructor PeerAddress [#_"NetworkParameters" params, #_"InetAddress" addr]
        (§ this params, addr, (:port params))
        this
    )

    ;;;
     ; Constructs a peer address from an {@link InetSocketAddress}.  An InetSocketAddress can take in as parameters an
     ; InetAddress or a String hostname.  If you want to connect to a .onion, set the hostname to the .onion address.
     ;;
    #_public
    (§ constructor PeerAddress [#_"NetworkParameters" params, #_"InetSocketAddress" addr]
        (§ this params, (.. addr (getAddress)), (.. addr (getPort)))
        this
    )

    ;;;
     ; Constructs a peer address from a stringified hostname+port.  Use this if you want to connect to a Tor .onion address.
     ;;
    #_public
    (§ constructor PeerAddress [#_"NetworkParameters" params, #_"String" hostname, #_"int" port]
        (§ super params)

        (§ assoc this :hostname hostname)
        (§ assoc this :port port)
        (§ assoc this :protocol-version ProtocolVersion'CURRENT)
        (§ assoc this :services BigInteger/ZERO)
        this
    )

    #_public
    #_static
    (§ defn #_"PeerAddress" PeerAddress'localhost [#_"NetworkParameters" params]
        (PeerAddress. params, (InetAddresses/forString "127.0.0.1"), (:port params))
    )

    #_override
    #_protected
    (§ method #_"void" bitcoinSerializeToStream [#_"ByteArrayOutputStream" baos]
        (when (<= 31402 (:protocol-version this))
            ;; TODO: This appears to be dynamic because the client only ever sends out it's own address
            ;; so assumes itself to be up.  For a fuller implementation this needs to be dynamic only if
            ;; the address refers to this client.
            (let [#_"int" secs (int (Utils'currentTimeSeconds))]
                (Utils'uint32ToByteStreamLE secs, baos)
            )
        )
        (Utils'uint64ToByteStreamLE (:services this), baos) ;; nServices.
        ;; Java does not provide any utility to map an IPv4 address into IPv6 space, so we have to do it by hand.
        (let [#_"byte[]" __ipBytes (.. (:addr this) (getAddress))]
            (when (= (alength __ipBytes) 4)
                (let [#_"byte[]" v6addr (byte-array 16)]
                    (System/arraycopy __ipBytes, 0, v6addr, 12, 4)
                    (aset v6addr 10 (byte 0xff))
                    (aset v6addr 11 (byte 0xff))
                    (§ ass __ipBytes v6addr)
                )
            )
            (.. baos (write __ipBytes))
            ;; And write out the port.  Unlike the rest of the protocol, address and port is in big endian byte order.
            (.. baos (write (byte (& 0xff (>> (:port this) 8)))))
            (.. baos (write (byte (& 0xff (:port this)))))
        )
        nil
    )

    #_override
    #_protected
    #_throws #_[ "ProtocolException" ]
    (§ method #_"void" parse []
        ;; Format of a serialized address:
        ;;   uint32 timestamp
        ;;   uint64 services (flags determining what the node can do)
        ;;   16 bytes ip address
        ;;   2 bytes port num
        (§ assoc this :time (if (< 31402 (:protocol-version this)) (.. this (readUint32)) -1))
        (§ assoc this :services (.. this (readUint64)))
        (let [#_"byte[]" __addrBytes (.. this (readBytes 16))]
            (try
                (§ assoc this :addr (InetAddress/getByAddress __addrBytes))
                (catch UnknownHostException e
                    (throw (RuntimeException. e)) ;; Cannot happen.
                )
            )
            (§ assoc this :port (| (<< (& 0xff (aget (:payload this) (:cursor this))) 8) (& 0xff (aget (:payload this) (inc (:cursor this))))))
            (§ update this :cursor + 2)
            ;; The 4 byte difference is the uint32 timestamp that was introduced in version 31402.
            (§ assoc this :length (if (< 31402 (:protocol-version this)) PeerAddress'MESSAGE_SIZE (- PeerAddress'MESSAGE_SIZE 4)))
        )
        nil
    )

    #_public
    (§ method #_"String" getHostname []
        (:hostname this)
    )

    #_public
    (§ method #_"InetAddress" getAddr []
        (:addr this)
    )

    #_public
    (§ method #_"InetSocketAddress" getSocketAddress []
        (InetSocketAddress. (.. this (getAddr)), (.. this (getPort)))
    )

    #_public
    (§ method #_"int" getPort []
        (:port this)
    )

    #_public
    (§ method #_"BigInteger" getServices []
        (:services this)
    )

    #_public
    (§ method #_"long" getTime []
        (:time this)
    )

    #_override
    #_public
    (§ method #_"String" toString []
        (if (some? (:hostname this)) (str "[" (:hostname this) "]:" (:port this)) (str "[" (.. (:addr this) (getHostAddress)) "]:" (:port this)))
    )

    #_override
    #_public
    (§ method #_"boolean" equals [#_"Object" o]
        (cond
            (= this o) true
            (or (nil? o) (not= (getClass) (.. o (getClass)))) false
            :else (let [#_"PeerAddress" other (cast PeerAddress o)]
                (and (.. (:addr other) (equals (:addr this))) (= (:port other) (:port this)) (= (:time other) (:time this)) (.. (:services other) (equals (:services this))))
            )
        )
    )

    #_override
    #_public
    (§ method #_"int" hashCode []
        (Objects/hashCode (:addr this), (:port this), (:time this), (:services this))
    )

    #_public
    (§ method #_"InetSocketAddress" toSocketAddress []
        ;; Reconstruct the InetSocketAddress properly.
        (if (some? (:hostname this)) (InetSocketAddress/createUnresolved (:hostname this), (:port this)) (InetSocketAddress. (:addr this), (:port this)))
    )
)

;;;
 ; Thrown when a problem occurs in communicating with a peer, and we should retry.
 ;;
#_public
(§ class PeerException (§ extends Exception)
    #_public
    (§ constructor PeerException [#_"String" msg]
        (§ super msg)
        this
    )

    #_public
    (§ constructor PeerException [#_"Exception" e]
        (§ super e)
        this
    )

    #_public
    (§ constructor PeerException [#_"String" msg, #_"Exception" e]
        (§ super msg, e)
        this
    )
)

;;;
 ; An interface which provides the information required to properly filter data downloaded from Peers.
 ; Note that an implementer is responsible for calling {@link PeerGroup#recalculateFastCatchupAndFilter(PeerGroup.FilterRecalculateMode)}
 ; whenever a change occurs which effects the data provided via this interface.
 ;;
#_public
(§ interface PeerFilterProvider
    ;;;
     ; Returns the earliest timestamp (seconds since epoch) for which full/bloom-filtered blocks must be downloaded.
     ; Blocks with timestamps before this time will only have headers downloaded.  0 requires that all blocks be
     ; downloaded, and thus this should default to {@link System#currentTimeMillis()}/1000.
     ;;
    (§ method #_"long" getEarliestKeyCreationTime [])

    ;;;
     ; Called on all registered filter providers before getBloomFilterElementCount and getBloomFilter are called.
     ; Once called, the provider should ensure that the items it will want to insert into the filter don't change.
     ; The reason is that all providers will have their element counts queried, and then a filter big enough for
     ; all of them will be specified.  So the provider must use consistent state.  There is guaranteed to be
     ; a matching call to endBloomFilterCalculation that can be used to e.g. unlock a lock.
     ;;
    (§ method #_"void" beginBloomFilterCalculation [])

    ;;;
     ; Gets the number of elements that will be added to a bloom filter returned by
     ; {@link PeerFilterProvider#getBloomFilter(int, double, long)}.
     ;;
    (§ method #_"int" getBloomFilterElementCount [])

    ;;;
     ; Gets a bloom filter that contains all the necessary elements for the listener to receive relevant transactions.
     ; Default value should be an empty bloom filter with the given size, falsePositiveRate, and nTweak.
     ;;
    (§ method #_"BloomFilter" getBloomFilter [#_"int" size, #_"double" __falsePositiveRate, #_"long" __nTweak])

    (§ method #_"void" endBloomFilterCalculation [])
)

;;;
 ; Runs a set of connections to the P2P network, brings up connections to replace disconnected nodes and manages
 ; the interaction between them all.  Most applications will want to use one of these.
 ;
 ; PeerGroup tries to maintain a constant number of connections to a set of distinct peers.
 ; Each peer runs a network listener in its own thread.  When a connection is lost, a new peer
 ; will be tried after a delay as long as the number of connections less than the maximum.
 ;
 ; Connections are made to addresses from a provided list.  When that list is exhausted,
 ; we start again from the head of the list.
 ;
 ; The PeerGroup can broadcast a transaction to the currently connected set of peers.  It can
 ; also handle download of the blockchain from peers, restarting the process when peers die.
 ;
 ; A PeerGroup won't do anything until you call the {@link PeerGroup#start()} method which
 ; will block until peer discovery is completed and some outbound connections have been
 ; initiated (it will return before handshaking is done, however).
 ; You should call {@link PeerGroup#stop()} when finished.  Note that not all methods
 ; of PeerGroup are safe to call from a UI thread as some may do network IO,
 ; but starting and stopping the service should be fine.
 ;;
#_public
(§ class PeerGroup (§ implements TransactionBroadcaster)
    #_private
    #_static
    (def- #_"Logger" PeerGroup'log (LoggerFactory/getLogger PeerGroup))

    ;; All members in this class should be marked with final, volatile, @GuardedBy or a mix as appropriate to define
    ;; their thread safety semantics.  Volatile requires a Hungarian-style v prefix.

    ;; By default we don't require any services because any peer will do.
    #_private
    (§ field- #_"long" :required-services 0)

    ;;;
     ; The default number of connections to the p2p network the library will try to build.  This is set to 12 empirically.
     ; It used to be 4, but because we divide the connection pool in two for broadcasting transactions, that meant we
     ; were only sending transactions to two peers and sometimes this wasn't reliable enough: transactions wouldn't
     ; get through.
     ;;
    #_public
    #_static
    (def #_"int" PeerGroup'DEFAULT_CONNECTIONS 12)
    #_private
    #_volatile
    (§ field- #_"int" :v-max-peers-to-discover-count 100)
    #_private
    #_static
    (def- #_"long" PeerGroup'DEFAULT_PEER_DISCOVERY_TIMEOUT_MILLIS 5000)
    #_private
    #_volatile
    (§ field- #_"long" :v-peer-discovery-timeout-millis PeerGroup'DEFAULT_PEER_DISCOVERY_TIMEOUT_MILLIS)

    #_protected
    (§ field #_"ReentrantLock" :lock (Threading'lock "peergroup"))

    #_protected
    (§ field #_"NetworkParameters" :params)
    #_nilable
    #_protected
    (§ field #_"AbstractBlockChain" :chain)

    ;; This executor is used to queue up jobs: it's used when we don't want to use locks for mutual exclusion,
    ;; typically because the job might call in to user provided code that needs/wants the freedom to use the API
    ;; however it wants, or because a job needs to be ordered relative to other jobs like that.
    #_protected
    (§ field #_"ListeningScheduledExecutorService" :executor)

    ;; Whether the peer group is currently running.  Once shut down it cannot be restarted.
    #_private
    #_volatile
    (§ field- #_"boolean" :v-running)
    ;; Whether the peer group has been started or not.  An unstarted PG does not try to access the network.
    #_private
    #_volatile
    (§ field- #_"boolean" :v-used-up)

    ;; Addresses to try to connect to, excluding active peers.
    #_private
    (§ field- #_"PriorityQueue<PeerAddress>" :inactives)
    #_private
    (§ field- #_"Map<PeerAddress, ExponentialBackoff>" :backoff-map)

    ;; Currently active peers.  This is an ordered list rather than a set to make unit tests predictable.
    #_private
    (§ field- #_"CopyOnWriteArrayList<Peer>" :peers)
    ;; Currently connecting peers.
    #_private
    (§ field- #_"CopyOnWriteArrayList<Peer>" :pending-peers)
    #_private
    (§ field- #_"ClientConnectionManager" :channels)

    ;; The peer that has been selected for the purposes of downloading announced data.
    #_private
    (§ field- #_"Peer" :download-peer)
    ;; Callback for events related to chain download.
    #_nilable
    #_private
    (§ field- #_"PeerDataEventListener" :download-listener)

    #_private
    (§ field- #_"CopyOnWriteArrayList<ListenerRegistration<BlocksDownloadedEventListener>>" :peers-blocks-downloaded-event-listeners (CopyOnWriteArrayList. #_"<>"))
    #_private
    (§ field- #_"CopyOnWriteArrayList<ListenerRegistration<ChainDownloadStartedEventListener>>" :peers-chain-download-started-event-listeners (CopyOnWriteArrayList. #_"<>"))
    ;;; Callbacks for events related to peers connecting. ;;
    #_protected
    (§ field #_"CopyOnWriteArrayList<ListenerRegistration<PeerConnectedEventListener>>" :peer-connected-event-listeners (CopyOnWriteArrayList. #_"<>"))
    ;;; Callbacks for events related to peer connection/disconnection. ;;
    #_protected
    (§ field #_"CopyOnWriteArrayList<ListenerRegistration<PeerDiscoveredEventListener>>" :peer-discovered-event-listeners (CopyOnWriteArrayList. #_"<>"))
    ;;; Callbacks for events related to peers disconnecting. ;;
    #_protected
    (§ field #_"CopyOnWriteArrayList<ListenerRegistration<PeerDisconnectedEventListener>>" :peer-disconnected-event-listeners (CopyOnWriteArrayList. #_"<>"))
    ;;; Callbacks for events related to peer data being received. ;;
    #_private
    (§ field- #_"CopyOnWriteArrayList<ListenerRegistration<GetDataEventListener>>" :peer-get-data-event-listeners (CopyOnWriteArrayList. #_"<>"))
    #_private
    (§ field- #_"CopyOnWriteArrayList<ListenerRegistration<PreMessageReceivedEventListener>>" :peers-pre-message-received-event-listeners (CopyOnWriteArrayList. #_"<>"))
    #_protected
    (§ field #_"CopyOnWriteArrayList<ListenerRegistration<OnTransactionBroadcastListener>>" :peers-transaction-broadast-event-listeners (CopyOnWriteArrayList. #_"<>"))

    ;; Peer discovery sources, will be polled occasionally if there aren't enough inactives.
    #_private
    (§ field- #_"CopyOnWriteArraySet<PeerDiscovery>" :peer-discoverers)
    ;; The version message to use for new connections.
    #_private
    (§ field- #_"VersionMessage" :version-message)
    ;; Maximum depth up to which pending transaction dependencies are downloaded, or 0 for disabled.
    #_private
    (§ field- #_"int" :download-tx-dependency-depth)
    ;; How many connections we want to have open at the current time.  If we lose connections, we'll try opening more
    ;; until we reach this count.
    #_private
    (§ field- #_"int" :max-connections)
    ;; Minimum protocol version we will allow ourselves to connect to: require Bloom filtering.
    #_private
    #_volatile
    (§ field- #_"int" :v-min-required-protocol-version)

    ;;; How many milliseconds to wait after receiving a pong before sending another ping. ;;
    #_public
    #_static
    (def #_"long" PeerGroup'DEFAULT_PING_INTERVAL_MSEC 2000)
    #_private
    (§ field- #_"long" :ping-interval-msec PeerGroup'DEFAULT_PING_INTERVAL_MSEC)

    #_private
    (§ field- #_"boolean" :use-localhost-peer-when-possible true)
    #_private
    (§ field- #_"boolean" :ipv6-unreachable false)

    #_private
    (§ field- #_"long" :fast-catchup-time-secs)
    #_private
    (§ field- #_"CopyOnWriteArrayList<Wallet>" :wallets)
    #_private
    (§ field- #_"CopyOnWriteArrayList<PeerFilterProvider>" :peer-filter-providers)

    ;; This event listener is added to every peer.  It's here so when we announce transactions via an "inv",
    ;; every peer can fetch them.
    #_private
    (§ field- #_"PeerListener" :peer-listener (PeerListener.))

    #_private
    (§ field- #_"int" :min-broadcast-connections 0)

    #_private
    (§ field- #_"KeyChainEventListener" :wallet-key-event-listener (KeyChainEventListener.)
        (§ anon
            #_override
            #_public
            (§ method #_"void" onKeysAdded [#_"List<ECKey>" keys]
                (.. this (recalculateFastCatchupAndFilter :FilterRecalculateMode'SEND_IF_CHANGED))
                nil
            )
        ))

    #_private
    (§ field- #_"WalletCoinsReceivedEventListener" :wallet-coins-received-event-listener (WalletCoinsReceivedEventListener.)
        (§ anon
            #_override
            #_public
            (§ method #_"void" onCoinsReceived [#_"Wallet" wallet, #_"Transaction" tx, #_"Coin" __prevBalance, #_"Coin" __newBalance]
                ;; We received a relevant transaction.  We MAY need to recalculate and resend the Bloom filter, but only
                ;; if we have received a transaction that includes a relevant pay-to-pubkey output.
                ;;
                ;; The reason is that pay-to-pubkey outputs, when spent, will not repeat any data we can predict in their
                ;; inputs.  So a remote peer will update the Bloom filter for us when such an output is seen matching the
                ;; existing filter, so that it includes the tx hash in which the pay-to-pubkey output was observed.  Thus
                ;; the spending transaction will always match (due to the outpoint structure).
                ;;
                ;; Unfortunately, whilst this is required for correct sync of the chain in blocks, there are two edge cases.
                ;;
                ;; (1) If a wallet receives a relevant, confirmed p2pubkey output that was not broadcast across the network,
                ;; for example in a coinbase transaction, then the node that's serving us the chain will update its filter
                ;; but the rest will not.  If another transaction then spends it, the other nodes won't match/relay it.
                ;;
                ;; (2) If we receive a p2pubkey output broadcast across the network, all currently connected nodes will see
                ;; it and update their filter themselves, but any newly connected nodes will receive the last filter we
                ;; calculated, which would not include this transaction.
                ;;
                ;; For this reason we check if the transaction contained any relevant pay to pubkeys and force a recalc
                ;; and possibly retransmit if so.  The recalculation process will end up including the tx hash into the
                ;; filter.  In case (1), we need to retransmit the filter to the connected peers.  In case (2), we don't
                ;; and shouldn't, we should just recalculate and cache the new filter for next time.

                (doseq [#_"TransactionOutput" output (.. tx (getOutputs))]
                    (when (and (.. output (getScriptPubKey) (isSentToRawPubKey)) (.. output (isMine wallet)))
                        (if (= (.. tx (getConfidence) (getConfidenceType)) ConfidenceType'BUILDING)
                            (.. this (recalculateFastCatchupAndFilter :FilterRecalculateMode'SEND_IF_CHANGED))
                            (.. this (recalculateFastCatchupAndFilter :FilterRecalculateMode'DONT_SEND))
                        )
                        (§ return nil)
                    )
                )
                nil
            )
        ))

    ;; Exponential backoff for peers starts at 1 second and maxes at 10 minutes.
    #_private
    (§ field- #_"BackoffParams" :peer-backoff-params (BackoffParams. 1000, 1.5, (* 10 60 1000)))
    ;; Tracks failures globally in case of a network failure.
    #_private
    (§ field- #_"ExponentialBackoff" :group-backoff (ExponentialBackoff. (BackoffParams. 1000, 1.5, (* 10 1000))))

    ;; This is a synchronized set, so it locks on itself.  We use it to prevent TransactionBroadcast objects from
    ;; being garbage collected if nothing in the apps code holds on to them transitively.  See the discussion
    ;; in broadcastTransaction.
    #_private
    (§ field- #_"Set<TransactionBroadcast>" :running-broadcasts)

    #_private
    (§ class- PeerListener (§ implements GetDataEventListener, BlocksDownloadedEventListener)
        #_public
        (§ constructor PeerListener []
            this
        )

        #_override
        #_public
        (§ method #_"List<Message>" getData [#_"Peer" peer, #_"GetDataMessage" m]
            (.. this (handleGetData m))
        )

        #_override
        #_public
        (§ method #_"void" onBlocksDownloaded [#_"Peer" peer, #_"Block" block, #_nilable #_"FilteredBlock" __filteredBlock, #_"int" __blocksLeft]
            (when (some? (:chain this))
                (let [#_"double" rate (.. (:chain this) (getFalsePositiveRate))
                      #_"double" target (* (.. (:bloom-filter-merger this) (getBloomFilterFPRate)) PeerGroup'MAX_FP_RATE_INCREASE)]
                    (when (< target rate)
                        ;; TODO: Avoid hitting this path if the remote peer didn't acknowledge applying a new filter yet.
                        (.. PeerGroup'log (debug "Force update Bloom filter due to high false positive rate ({} vs {})", rate, target))

                        (.. this (recalculateFastCatchupAndFilter :FilterRecalculateMode'FORCE_SEND_FOR_REFRESH))
                    )
                )
            )
            nil
        )
    )

    #_private
    (§ class- PeerStartupListener (§ implements PeerConnectedEventListener, PeerDisconnectedEventListener)
        #_override
        #_public
        (§ method #_"void" onPeerConnected [#_"Peer" peer, #_"int" __peerCount]
            (.. this (handleNewPeer peer))
            nil
        )

        #_override
        #_public
        (§ method #_"void" onPeerDisconnected [#_"Peer" peer, #_"int" __peerCount]
            ;; The channel will be automatically removed from channels.
            (.. this (handlePeerDeath peer, nil))
            nil
        )
    )

    #_private
    (§ field- #_"PeerStartupListener" :startup-listener (PeerStartupListener.))

    ;;;
     ; The default Bloom filter false positive rate, which is selected to be extremely low such that you hardly ever
     ; download false positives.  This provides maximum performance.  Although this default can be overridden to push
     ; the FP rate higher, due to <a href="https://groups.google.com/forum/#!msg/bitcoinj/Ys13qkTwcNg/9qxnhwnkeoIJ">
     ; various complexities</a> there are still ways a remote peer can deanonymize the users wallet.  This is why the
     ; FP rate is chosen for performance rather than privacy.  If a future version of bitcoinj fixes the known
     ; de-anonymization attacks this FP rate may rise again (or more likely, become expressed as a bandwidth allowance).
     ;;
    #_public
    #_static
    (def #_"double" PeerGroup'DEFAULT_BLOOM_FILTER_FP_RATE 0.00001)
    ;;; Maximum increase in FP rate before forced refresh of the bloom filter. ;;
    #_public
    #_static
    (def #_"double" PeerGroup'MAX_FP_RATE_INCREASE 10.0)
    ;; An object that calculates bloom filters given a list of filter providers, whilst tracking some state useful
    ;; for privacy purposes.
    #_private
    (§ field- #_"FilterMerger" :bloom-filter-merger)

    ;;; The default timeout between when a connection attempt begins and version message exchange completes. ;;
    #_public
    #_static
    (def #_"int" PeerGroup'DEFAULT_CONNECT_TIMEOUT_MILLIS 5000)
    #_private
    #_volatile
    (§ field- #_"int" :v-connect-timeout-millis PeerGroup'DEFAULT_CONNECT_TIMEOUT_MILLIS)

    ;;; Whether bloom filter support is enabled when using a non FullPrunedBlockchain. ;;
    #_private
    #_volatile
    (§ field- #_"boolean" :v-bloom-filtering-enabled true)

    ;;; See {@link #PeerGroup(Context)}. ;;
    #_public
    (§ constructor PeerGroup [#_"NetworkParameters" params]
        (§ this params, nil)
        this
    )

    ;;;
     ; Creates a PeerGroup with the given context.  No chain is provided so this node will report its chain height
     ; as zero to other peers.  This constructor is useful if you just want to explore the network but aren't interested
     ; in downloading block data.
     ;;
    #_public
    (§ constructor PeerGroup [#_"Context" context]
        (§ this context, nil)
        this
    )

    ;;; See {@link #PeerGroup(Context, AbstractBlockChain)}. ;;
    #_public
    (§ constructor PeerGroup [#_"NetworkParameters" params, #_nilable #_"AbstractBlockChain" chain]
        (§ this (Context'getOrCreate params), chain, (NioClientManager.))
        this
    )

    ;;;
     ; Creates a PeerGroup for the given context and chain.  Blocks will be passed to the chain as they are broadcast
     ; and downloaded.  This is probably the constructor you want to use.
     ;;
    #_public
    (§ constructor PeerGroup [#_"Context" context, #_nilable #_"AbstractBlockChain" chain]
        (§ this context, chain, (NioClientManager.))
        this
    )

    ;;; See {@link #PeerGroup(Context, AbstractBlockChain, ClientConnectionManager)}. ;;
    #_public
    (§ constructor PeerGroup [#_"NetworkParameters" params, #_nilable #_"AbstractBlockChain" chain, #_"ClientConnectionManager" __connectionManager]
        (§ this (Context'getOrCreate params), chain, __connectionManager)
        this
    )

    ;;;
     ; Creates a new PeerGroup allowing you to specify the {@link ClientConnectionManager} which is used to create new
     ; connections and keep track of existing ones.
     ;;
    #_private
    (§ constructor- PeerGroup [#_"Context" context, #_nilable #_"AbstractBlockChain" chain, #_"ClientConnectionManager" __connectionManager]
        (ensure some? context)

        (§ assoc this :params (.. context (getParams)))
        (§ assoc this :chain chain)
        (§ assoc this :fast-catchup-time-secs (.. (-> this :params :genesis-block) (getTimeSeconds)))
        (§ assoc this :wallets (CopyOnWriteArrayList. #_"<>"))
        (§ assoc this :peer-filter-providers (CopyOnWriteArrayList. #_"<>"))

        (§ assoc this :executor (.. this (createPrivateExecutor)))

        ;; This default sentinel value will be overridden by one of two actions:
        ;;   - adding a peer discovery source sets it to the default.
        ;;   - using connectTo() will increment it by one.
        (§ assoc this :max-connections 0)

        (let [#_"int" height (if (some? chain) (.. chain (getBestChainHeight)) 0)]
            (§ assoc this :version-message (VersionMessage. (:params this), height))
            ;; We never request that the remote node wait for a bloom filter yet, as we have no wallets.
            (§ assoc-in this [:version-message :relay-txes-before-filter] true)

            (§ assoc this :download-tx-dependency-depth Integer/MAX_VALUE)

            (§ assoc this :inactives (PriorityQueue. #_"<>" 1, (Comparator. #_"<PeerAddress>")
            (§ anon
                #_suppress #_[ "FieldAccessNotGuarded" ] ;; Only called when inactives is accessed, and lock is held then.
                #_override
                #_public
                (§ method #_"int" compare [#_"PeerAddress" a, #_"PeerAddress" b]
                    (assert-state (.. (:lock this) (isHeldByCurrentThread)))

                    (let [#_"int" result (.. (:backoff-map this) (get a) (compareTo (.. (:backoff-map this) (get b))))]
                        ;; Sort by port if otherwise equals - for testing.
                        (when (= result 0)
                            (§ ass result (Ints/compare (.. a (getPort)), (.. b (getPort))))
                        )
                        result
                    )
                )
            )))
            (§ assoc this :backoff-map (HashMap. #_"<>"))
            (§ assoc this :peers (CopyOnWriteArrayList. #_"<>"))
            (§ assoc this :pending-peers (CopyOnWriteArrayList. #_"<>"))
            (§ assoc this :channels __connectionManager)
            (§ assoc this :peer-discoverers (CopyOnWriteArraySet. #_"<>"))
            (§ assoc this :running-broadcasts (Collections/synchronizedSet (HashSet. #_"<TransactionBroadcast>")))
            (§ assoc this :bloom-filter-merger (FilterMerger. PeerGroup'DEFAULT_BLOOM_FILTER_FP_RATE))
            (§ assoc this :v-min-required-protocol-version ProtocolVersion'BLOOM_FILTER)
            this
        )
    )

    #_private
    (§ field- #_"CountDownLatch" :executor-startup-latch (CountDownLatch. 1))

    #_protected
    (§ method #_"ListeningScheduledExecutorService" createPrivateExecutor []
        (let [#_"ListeningScheduledExecutorService" result (MoreExecutors/listeningDecorator (ScheduledThreadPoolExecutor. 1, (ContextPropagatingThreadFactory. "PeerGroup Thread")))]
            ;; Hack: jam the executor so jobs just queue up until the user calls start() on us.  For example, adding a wallet
            ;; results in a bloom filter recalc being queued, but we don't want to do that until we're actually started.
            (.. result (execute (Runnable.)
            (§ anon
                #_override
                #_public
                (§ method #_"void" run []
                    (Uninterruptibles/awaitUninterruptibly (:executor-startup-latch this))
                    nil
                )
            )))
            result
        )
    )

    ;;;
     ; This is how many milliseconds we wait for peer discoveries to return their results.
     ;;
    #_public
    (§ method #_"void" setPeerDiscoveryTimeoutMillis [#_"long" millis]
        (§ assoc this :v-peer-discovery-timeout-millis millis)
        nil
    )

    ;;;
     ; Adjusts the desired number of connections that we will create to peers.  Note that if there are already peers
     ; open and the new value is lower than the current number of peers, those connections will be terminated.
     ; Likewise if there aren't enough current connections to meet the new requested max size, some will be added.
     ;;
    #_public
    (§ method #_"void" setMaxConnections [#_"int" __maxConnections]
        (.. (:lock this) (lock))
        (try
            (§ assoc this :max-connections __maxConnections)
            (when (not (.. this (isRunning)))
                (§ return nil)
            )
            (finally
                (.. (:lock this) (unlock))
            )
        )

        ;; We may now have too many or too few open connections.  Add more or drop some to get to the right amount.
        (let [#_"int" adjustment (- __maxConnections (.. (:channels this) (getConnectedClientCount)))]
            (when (< 0 adjustment)
                (.. this (triggerConnections))
            )

            (when (< adjustment 0)
                (.. (:channels this) (closeConnections (- adjustment)))
            )
        )
        nil
    )

    ;;;
     ; Configure download of pending transaction dependencies.  A change of values only takes effect for newly connected peers.
     ;;
    #_public
    (§ method #_"void" setDownloadTxDependencies [#_"int" depth]
        (.. (:lock this) (lock))
        (try
            (§ assoc this :download-tx-dependency-depth depth)
            (finally
                (.. (:lock this) (unlock))
            )
        )
        nil
    )

    #_private
    (§ field- #_"Runnable" :trigger-connections-job (Runnable.
        (§ anon
            #_private
            (§ field- #_"boolean" :first-run true)
            #_private
            #_static
            (def- #_"long" PeerGroup'MIN_PEER_DISCOVERY_INTERVAL 1000)

            #_override
            #_public
            (§ method #_"void" run []
                (try
                    (.. this (go))
                    (catch Throwable e
                        (.. PeerGroup'log (error "Exception when trying to build connections", e)) ;; The executor swallows exceptions :( ;; )
                    )
                )
                nil
            )

            #_public
            (§ method #_"void" go []
                (when (:v-running this)
                    (let [#_"boolean" __doDiscovery false #_"long" now (Utils'currentTimeMillis)]
                        (.. (:lock this) (lock))
                        (try
                            ;; First run: try and use a local node if there is one, for the additional security it can provide.
                            (when (and (:use-localhost-peer-when-possible this) (.. this (maybeCheckForLocalhostPeer)) (:first-run this))
                                (.. PeerGroup'log (info "Localhost peer detected, trying to use it instead of P2P discovery"))
                                (§ assoc this :max-connections 0)
                                (.. this (connectToLocalHost))
                                (§ return nil)
                            )

                            (let [#_"boolean" __havePeerWeCanTry (and (not (.. (:inactives this) (isEmpty))) (<= (.. (:backoff-map this) (get (.. (:inactives this) (peek))) (getRetryTime)) now))]
                                (§ ass __doDiscovery (not __havePeerWeCanTry))
                            )
                            (finally
                                (§ assoc this :first-run false)
                                (.. (:lock this) (unlock))
                            )
                        )

                        ;; Don't hold the lock across discovery as this process can be very slow.
                        (let [#_"boolean" __discoverySuccess false]
                            (when __doDiscovery
                                (try
                                    (§ ass __discoverySuccess (< 0 (.. this (discoverPeers))))
                                    (catch PeerDiscoveryException e
                                        (.. PeerGroup'log (error "Peer discovery failure", e))
                                    )
                                )
                            )

                            (let [#_"long" __retryTime
                                  #_"PeerAddress" __addrToTry]
                                (.. (:lock this) (lock))
                                (try
                                    (when __doDiscovery
                                        ;; Require that we have enough connections, to consider this a success,
                                        ;; or we just constantly test for new peers.
                                        (if (and __discoverySuccess (<= (.. this (getMaxConnections)) (.. this (countConnectedAndPendingPeers))))
                                            (.. (:group-backoff this) (trackSuccess))
                                            (.. (:group-backoff this) (trackFailure))
                                        )
                                    )
                                    ;; Inactives is sorted by backoffMap time.
                                    (cond (.. (:inactives this) (isEmpty))
                                        (do
                                            (cond (< (.. this (countConnectedAndPendingPeers)) (.. this (getMaxConnections)))
                                                (let [#_"long" interval (max (- (.. (:group-backoff this) (getRetryTime)) now), PeerGroup'MIN_PEER_DISCOVERY_INTERVAL)]
                                                    (.. PeerGroup'log (info (str "Peer discovery didn't provide us any more peers, will try again in " interval "ms.")))
                                                    (.. (:executor this) (schedule this, interval, TimeUnit/MILLISECONDS))
                                                )
                                                :else
                                                (do
                                                    ;; We have enough peers and discovery provided no more, so just settle down.
                                                    ;; Most likely we were given a fixed set of addresses in some test scenario.
                                                )
                                            )
                                            (§ return nil)
                                        )
                                        :else
                                        (do
                                            (loop []
                                                (§ ass __addrToTry (.. (:inactives this) (poll)))
                                                (§ recur-if (and (:ipv6-unreachable this) (instance? Inet6Address (.. __addrToTry (getAddr)))))
                                            )
                                            (§ ass __retryTime (.. (:backoff-map this) (get __addrToTry) (getRetryTime)))
                                        )
                                    )
                                    (§ ass __retryTime (max __retryTime, (.. (:group-backoff this) (getRetryTime))))
                                    (when (< now __retryTime)
                                        (let [#_"long" delay (- __retryTime now)]
                                            (.. PeerGroup'log (info "Waiting {} msec before next connect attempt {}", delay, (if (some? __addrToTry) (str "to " __addrToTry) "")))
                                            (.. (:inactives this) (add __addrToTry))
                                            (.. (:executor this) (schedule this, delay, TimeUnit/MILLISECONDS))
                                            (§ return nil)
                                        )
                                    )
                                    (.. this (connectTo __addrToTry, false, (:v-connect-timeout-millis this)))
                                    (finally
                                        (.. (:lock this) (unlock))
                                    )
                                )
                                (when (< (.. this (countConnectedAndPendingPeers)) (.. this (getMaxConnections)))
                                    (.. (:executor this) (execute this)) ;; Try next peer immediately.
                                )
                            )
                        )
                    )
                )
                nil
            )
        )))

    #_private
    (§ method- #_"void" triggerConnections []
        ;; Run on a background thread due to the need to potentially retry and back off in the background.
        (when (not (.. (:executor this) (isShutdown)))
            (.. (:executor this) (execute (:trigger-connections-job this)))
        )
        nil
    )

    ;;; The maximum number of connections that we will create to peers. ;;
    #_public
    (§ method #_"int" getMaxConnections []
        (.. (:lock this) (lock))
        (try
            (:max-connections this)
            (finally
                (.. (:lock this) (unlock))
            )
        )
    )

    #_private
    (§ method- #_"List<Message>" handleGetData [#_"GetDataMessage" m]
        ;; Scans the wallets and memory pool for transactions in the getdata message and returns them.
        ;; Runs on peer threads.
        (.. (:lock this) (lock))
        (try
            (let [#_"LinkedList<Message>" transactions (LinkedList. #_"<>")
                  #_"LinkedList<InventoryItem>" items (LinkedList. #_"<>" (.. m (getItems)))
                  #_"Iterator<InventoryItem>" it (.. items (iterator))]
                (while (.. it (hasNext))
                    (let [#_"InventoryItem" item (.. it (next))]
                        ;; Check the wallets.
                        (doseq [#_"Wallet" w (:wallets this)]
                            (let [#_"Transaction" tx (.. w (getTransaction (:hash item)))]
                                (when (some? tx)
                                    (.. transactions (add tx))
                                    (.. it (remove))
                                    (§ break )
                                )
                            )
                        )
                    )
                )
                transactions
            )
            (finally
                (.. (:lock this) (unlock))
            )
        )
    )

    ;;;
     ; Sets the {@link VersionMessage} that will be announced on newly created connections.  A version message is
     ; primarily interesting because it lets you customize the "subVer" field which is used a bit like the User-Agent
     ; field from HTTP.  It means your client tells the other side what it is, see
     ; <a href="https://github.com/bitcoin/bips/blob/master/bip-0014.mediawiki">BIP 14</a>.
     ;
     ; The VersionMessage you provide is copied and the best chain height/time filled in for each new connection,
     ; therefore you don't have to worry about setting that.  The provided object is really more of a template.
     ;;
    #_public
    (§ method #_"void" setVersionMessage [#_"VersionMessage" ver]
        (.. (:lock this) (lock))
        (try
            (§ assoc this :version-message ver)
            (finally
                (.. (:lock this) (unlock))
            )
        )
        nil
    )

    ;;;
     ; Returns the version message provided by setVersionMessage or a default if none was given.
     ;;
    #_public
    (§ method #_"VersionMessage" getVersionMessage []
        (.. (:lock this) (lock))
        (try
            (:version-message this)
            (finally
                (.. (:lock this) (unlock))
            )
        )
    )

    ;;;
     ; Sets information that identifies this software to remote nodes.  This is a convenience wrapper for creating
     ; a new {@link VersionMessage}, calling {@link VersionMessage#appendToSubVer(String, String, String)} on it,
     ; and then calling {@link PeerGroup#setVersionMessage(VersionMessage)} on the result of that.  See the docs for
     ; {@link VersionMessage#appendToSubVer(String, String, String)} for information on what the fields should contain.
     ;;
    #_public
    (§ method #_"void" setUserAgent [#_"String" name, #_"String" version, #_nilable #_"String" comments]
        ;; TODO: Check that height is needed here (it wasnt, but it should be, no?)
        (let [#_"int" height (if (some? (:chain this)) (.. (:chain this) (getBestChainHeight)) 0)
              #_"VersionMessage" ver (VersionMessage. (:params this), height)]
            (§ assoc ver :relay-txes-before-filter false)
            (.. this (updateVersionMessageRelayTxesBeforeFilter ver))
            (.. ver (appendToSubVer name, version, comments))
            (.. this (setVersionMessage ver))
        )
        nil
    )

    ;; Updates the relayTxesBeforeFilter flag of ver.
    #_private
    (§ method- #_"void" updateVersionMessageRelayTxesBeforeFilter [#_"VersionMessage" ver]
        ;; We will provide the remote node with a bloom filter (i.e. they shouldn't relay yet)
        ;; if chain == null || !chain.shouldVerifyTransactions() and a wallet is added and bloom filters are enabled.
        ;; Note that the default here means that no tx invs will be received if no wallet is ever added.
        (.. (:lock this) (lock))
        (try
            (let [#_"boolean" __spvMode (and (some? (:chain this)) (not (.. (:chain this) (shouldVerifyTransactions))))
                  #_"boolean" __willSendFilter (and __spvMode (< 0 (.. (:peer-filter-providers this) (size))) (:v-bloom-filtering-enabled this))]
                (§ assoc ver :relay-txes-before-filter (not __willSendFilter))
            )
            (finally
                (.. (:lock this) (unlock))
            )
        )
        nil
    )

    ;;;
     ; Sets information that identifies this software to remote nodes.  This is a convenience wrapper for creating
     ; a new {@link VersionMessage}, calling {@link VersionMessage#appendToSubVer(String, String, String)} on it,
     ; and then calling {@link PeerGroup#setVersionMessage(VersionMessage)} on the result of that.  See the docs for
     ; {@link VersionMessage#appendToSubVer(String, String, String)} for information on what the fields should contain.
     ;;
    #_public
    (§ method #_"void" setUserAgent [#_"String" name, #_"String" version]
        (.. this (setUserAgent name, version, nil))
        nil
    )

    ;;; See {@link Peer#addBlocksDownloadedEventListener(BlocksDownloadedEventListener)}. ;;
    #_public
    (§ method #_"void" addBlocksDownloadedEventListener [#_"BlocksDownloadedEventListener" listener]
        (.. this (addBlocksDownloadedEventListener Threading'USER_THREAD, listener))
        nil
    )

    ;;;
     ; Adds a listener that will be notified on the given executor when
     ; blocks are downloaded by the download peer.
     ;
     ; @see Peer#addBlocksDownloadedEventListener(Executor, BlocksDownloadedEventListener)
     ;;
    #_public
    (§ method #_"void" addBlocksDownloadedEventListener [#_"Executor" executor, #_"BlocksDownloadedEventListener" listener]
        (.. (:peers-blocks-downloaded-event-listeners this) (add (ListenerRegistration. #_"<>" (ensure some? listener), executor)))
        (doseq [#_"Peer" peer (.. this (getConnectedPeers))]
            (.. peer (addBlocksDownloadedEventListener executor, listener))
        )
        (doseq [#_"Peer" peer (.. this (getPendingPeers))]
            (.. peer (addBlocksDownloadedEventListener executor, listener))
        )
        nil
    )

    ;;; See {@link Peer#addBlocksDownloadedEventListener(BlocksDownloadedEventListener)}. ;;
    #_public
    (§ method #_"void" addChainDownloadStartedEventListener [#_"ChainDownloadStartedEventListener" listener]
        (.. this (addChainDownloadStartedEventListener Threading'USER_THREAD, listener))
        nil
    )

    ;;;
     ; Adds a listener that will be notified on the given executor when
     ; chain download starts.
     ;;
    #_public
    (§ method #_"void" addChainDownloadStartedEventListener [#_"Executor" executor, #_"ChainDownloadStartedEventListener" listener]
        (.. (:peers-chain-download-started-event-listeners this) (add (ListenerRegistration. #_"<>" (ensure some? listener), executor)))
        (doseq [#_"Peer" peer (.. this (getConnectedPeers))]
            (.. peer (addChainDownloadStartedEventListener executor, listener))
        )
        (doseq [#_"Peer" peer (.. this (getPendingPeers))]
            (.. peer (addChainDownloadStartedEventListener executor, listener))
        )
        nil
    )

    ;;; See {@link Peer#addConnectedEventListener(PeerConnectedEventListener)}. ;;
    #_public
    (§ method #_"void" addConnectedEventListener [#_"PeerConnectedEventListener" listener]
        (.. this (addConnectedEventListener Threading'USER_THREAD, listener))
        nil
    )

    ;;;
     ; Adds a listener that will be notified on the given executor when
     ; new peers are connected to.
     ;;
    #_public
    (§ method #_"void" addConnectedEventListener [#_"Executor" executor, #_"PeerConnectedEventListener" listener]
        (.. (:peer-connected-event-listeners this) (add (ListenerRegistration. #_"<>" (ensure some? listener), executor)))
        (doseq [#_"Peer" peer (.. this (getConnectedPeers))]
            (.. peer (addConnectedEventListener executor, listener))
        )
        (doseq [#_"Peer" peer (.. this (getPendingPeers))]
            (.. peer (addConnectedEventListener executor, listener))
        )
        nil
    )

    ;;; See {@link Peer#addDisconnectedEventListener(PeerDisconnectedEventListener)}. ;;
    #_public
    (§ method #_"void" addDisconnectedEventListener [#_"PeerDisconnectedEventListener" listener]
        (.. this (addDisconnectedEventListener Threading'USER_THREAD, listener))
        nil
    )

    ;;;
     ; Adds a listener that will be notified on the given executor when
     ; peers are disconnected from.
     ;;
    #_public
    (§ method #_"void" addDisconnectedEventListener [#_"Executor" executor, #_"PeerDisconnectedEventListener" listener]
        (.. (:peer-disconnected-event-listeners this) (add (ListenerRegistration. #_"<>" (ensure some? listener), executor)))
        (doseq [#_"Peer" peer (.. this (getConnectedPeers))]
            (.. peer (addDisconnectedEventListener executor, listener))
        )
        (doseq [#_"Peer" peer (.. this (getPendingPeers))]
            (.. peer (addDisconnectedEventListener executor, listener))
        )
        nil
    )

    ;;; See {@link Peer#addDiscoveredEventListener(PeerDiscoveredEventListener)}. ;;
    #_public
    (§ method #_"void" addDiscoveredEventListener [#_"PeerDiscoveredEventListener" listener]
        (.. this (addDiscoveredEventListener Threading'USER_THREAD, listener))
        nil
    )

    ;;;
     ; Adds a listener that will be notified on the given executor when new
     ; peers are discovered.
     ;;
    #_public
    (§ method #_"void" addDiscoveredEventListener [#_"Executor" executor, #_"PeerDiscoveredEventListener" listener]
        (.. (:peer-discovered-event-listeners this) (add (ListenerRegistration. #_"<>" (ensure some? listener), executor)))
        nil
    )

    ;;; See {@link Peer#addGetDataEventListener(GetDataEventListener)}. ;;
    #_public
    (§ method #_"void" addGetDataEventListener [#_"GetDataEventListener" listener]
        (.. this (addGetDataEventListener Threading'USER_THREAD, listener))
        nil
    )

    ;;; See {@link Peer#addGetDataEventListener(Executor, GetDataEventListener)}. ;;
    #_public
    (§ method #_"void" addGetDataEventListener [#_"Executor" executor, #_"GetDataEventListener" listener]
        (.. (:peer-get-data-event-listeners this) (add (ListenerRegistration. #_"<>" (ensure some? listener), executor)))
        (doseq [#_"Peer" peer (.. this (getConnectedPeers))]
            (.. peer (addGetDataEventListener executor, listener))
        )
        (doseq [#_"Peer" peer (.. this (getPendingPeers))]
            (.. peer (addGetDataEventListener executor, listener))
        )
        nil
    )

    ;;; See {@link Peer#addOnTransactionBroadcastListener(OnTransactionBroadcastListener)}. ;;
    #_public
    (§ method #_"void" addOnTransactionBroadcastListener [#_"OnTransactionBroadcastListener" listener]
        (.. this (addOnTransactionBroadcastListener Threading'USER_THREAD, listener))
        nil
    )

    ;;; See {@link Peer#addOnTransactionBroadcastListener(OnTransactionBroadcastListener)}. ;;
    #_public
    (§ method #_"void" addOnTransactionBroadcastListener [#_"Executor" executor, #_"OnTransactionBroadcastListener" listener]
        (.. (:peers-transaction-broadast-event-listeners this) (add (ListenerRegistration. #_"<>" (ensure some? listener), executor)))
        (doseq [#_"Peer" peer (.. this (getConnectedPeers))]
            (.. peer (addOnTransactionBroadcastListener executor, listener))
        )
        (doseq [#_"Peer" peer (.. this (getPendingPeers))]
            (.. peer (addOnTransactionBroadcastListener executor, listener))
        )
        nil
    )

    ;;; See {@link Peer#addPreMessageReceivedEventListener(PreMessageReceivedEventListener)}. ;;
    #_public
    (§ method #_"void" addPreMessageReceivedEventListener [#_"PreMessageReceivedEventListener" listener]
        (.. this (addPreMessageReceivedEventListener Threading'USER_THREAD, listener))
        nil
    )

    ;;; See {@link Peer#addPreMessageReceivedEventListener(Executor, PreMessageReceivedEventListener)}. ;;
    #_public
    (§ method #_"void" addPreMessageReceivedEventListener [#_"Executor" executor, #_"PreMessageReceivedEventListener" listener]
        (.. (:peers-pre-message-received-event-listeners this) (add (ListenerRegistration. #_"<>" (ensure some? listener), executor)))
        (doseq [#_"Peer" peer (.. this (getConnectedPeers))]
            (.. peer (addPreMessageReceivedEventListener executor, listener))
        )
        (doseq [#_"Peer" peer (.. this (getPendingPeers))]
            (.. peer (addPreMessageReceivedEventListener executor, listener))
        )
        nil
    )

    #_public
    (§ method #_"boolean" removeBlocksDownloadedEventListener [#_"BlocksDownloadedEventListener" listener]
        (let [#_"boolean" result (ListenerRegistration'removeFromList listener, (:peers-blocks-downloaded-event-listeners this))]
            (doseq [#_"Peer" peer (.. this (getConnectedPeers))]
                (.. peer (removeBlocksDownloadedEventListener listener))
            )
            (doseq [#_"Peer" peer (.. this (getPendingPeers))]
                (.. peer (removeBlocksDownloadedEventListener listener))
            )
            result
        )
    )

    #_public
    (§ method #_"boolean" removeChainDownloadStartedEventListener [#_"ChainDownloadStartedEventListener" listener]
        (let [#_"boolean" result (ListenerRegistration'removeFromList listener, (:peers-chain-download-started-event-listeners this))]
            (doseq [#_"Peer" peer (.. this (getConnectedPeers))]
                (.. peer (removeChainDownloadStartedEventListener listener))
            )
            (doseq [#_"Peer" peer (.. this (getPendingPeers))]
                (.. peer (removeChainDownloadStartedEventListener listener))
            )
            result
        )
    )

    ;;; The given event listener will no longer be called with events. ;;
    #_public
    (§ method #_"boolean" removeConnectedEventListener [#_"PeerConnectedEventListener" listener]
        (let [#_"boolean" result (ListenerRegistration'removeFromList listener, (:peer-connected-event-listeners this))]
            (doseq [#_"Peer" peer (.. this (getConnectedPeers))]
                (.. peer (removeConnectedEventListener listener))
            )
            (doseq [#_"Peer" peer (.. this (getPendingPeers))]
                (.. peer (removeConnectedEventListener listener))
            )
            result
        )
    )

    ;;; The given event listener will no longer be called with events. ;;
    #_public
    (§ method #_"boolean" removeDisconnectedEventListener [#_"PeerDisconnectedEventListener" listener]
        (let [#_"boolean" result (ListenerRegistration'removeFromList listener, (:peer-disconnected-event-listeners this))]
            (doseq [#_"Peer" peer (.. this (getConnectedPeers))]
                (.. peer (removeDisconnectedEventListener listener))
            )
            (doseq [#_"Peer" peer (.. this (getPendingPeers))]
                (.. peer (removeDisconnectedEventListener listener))
            )
            result
        )
    )

    ;;; The given event listener will no longer be called with events. ;;
    #_public
    (§ method #_"boolean" removeDiscoveredEventListener [#_"PeerDiscoveredEventListener" listener]
        (let [#_"boolean" result (ListenerRegistration'removeFromList listener, (:peer-discovered-event-listeners this))]
            result
        )
    )

    ;;; The given event listener will no longer be called with events. ;;
    #_public
    (§ method #_"boolean" removeGetDataEventListener [#_"GetDataEventListener" listener]
        (let [#_"boolean" result (ListenerRegistration'removeFromList listener, (:peer-get-data-event-listeners this))]
            (doseq [#_"Peer" peer (.. this (getConnectedPeers))]
                (.. peer (removeGetDataEventListener listener))
            )
            (doseq [#_"Peer" peer (.. this (getPendingPeers))]
                (.. peer (removeGetDataEventListener listener))
            )
            result
        )
    )

    ;;; The given event listener will no longer be called with events. ;;
    #_public
    (§ method #_"boolean" removeOnTransactionBroadcastListener [#_"OnTransactionBroadcastListener" listener]
        (let [#_"boolean" result (ListenerRegistration'removeFromList listener, (:peers-transaction-broadast-event-listeners this))]
            (doseq [#_"Peer" peer (.. this (getConnectedPeers))]
                (.. peer (removeOnTransactionBroadcastListener listener))
            )
            (doseq [#_"Peer" peer (.. this (getPendingPeers))]
                (.. peer (removeOnTransactionBroadcastListener listener))
            )
            result
        )
    )

    #_public
    (§ method #_"boolean" removePreMessageReceivedEventListener [#_"PreMessageReceivedEventListener" listener]
        (let [#_"boolean" result (ListenerRegistration'removeFromList listener, (:peers-pre-message-received-event-listeners this))]
            (doseq [#_"Peer" peer (.. this (getConnectedPeers))]
                (.. peer (removePreMessageReceivedEventListener listener))
            )
            (doseq [#_"Peer" peer (.. this (getPendingPeers))]
                (.. peer (removePreMessageReceivedEventListener listener))
            )
            result
        )
    )

    ;;;
     ; Returns a newly allocated list containing the currently connected peers.
     ; If all you care about is the count, use numConnectedPeers().
     ;;
    #_public
    (§ method #_"List<Peer>" getConnectedPeers []
        (.. (:lock this) (lock))
        (try
            (ArrayList. #_"<>" (:peers this))
            (finally
                (.. (:lock this) (unlock))
            )
        )
    )

    ;;;
     ; Returns a list containing Peers that did not complete connection yet.
     ;;
    #_public
    (§ method #_"List<Peer>" getPendingPeers []
        (.. (:lock this) (lock))
        (try
            (ArrayList. #_"<>" (:pending-peers this))
            (finally
                (.. (:lock this) (unlock))
            )
        )
    )

    ;;;
     ; Add an address to the list of potential peers to connect to.  It won't necessarily be used unless there's a need
     ; to build new connections to reach the max connection count.
     ;
     ; @param peerAddress IP/port to use.
     ;;
    #_public
    (§ method #_"void" addAddress [#_"PeerAddress" addr]
        (let [#_"int" __newMax]
            (.. (:lock this) (lock))
            (try
                (.. this (addInactive addr))
                (§ ass __newMax (inc (.. this (getMaxConnections))))
                (finally
                    (.. (:lock this) (unlock))
                )
            )
            (.. this (setMaxConnections __newMax))
        )
        nil
    )

    #_private
    (§ method- #_"void" addInactive [#_"PeerAddress" addr]
        (.. (:lock this) (lock))
        (try
            ;; Deduplicate.
            (when-not (.. (:backoff-map this) (containsKey addr))
                (.. (:backoff-map this) (put addr, (ExponentialBackoff. (:peer-backoff-params this))))
                (.. (:inactives this) (offer addr))
            )
            (finally
                (.. (:lock this) (unlock))
            )
        )
        nil
    )

    ;;;
     ; Convenience for connecting only to peers that can serve specific services.
     ; It will configure suitable peer discoveries.
     ;
     ; @param requiredServices Required services as a bitmask, e.g. {@link VersionMessage#NODE_NETWORK}.
     ;;
    #_public
    (§ method #_"void" setRequiredServices [#_"long" __requiredServices]
        (.. (:lock this) (lock))
        (try
            (§ assoc this :required-services __requiredServices)
            (.. (:peer-discoverers this) (clear))
            (.. this (addPeerDiscovery (MultiplexingDiscovery'forServices (:params this), __requiredServices)))
            (finally
                (.. (:lock this) (unlock))
            )
        )
        nil
    )

    ;;; Convenience method for addAddress(PeerAddress.(address, params.port)). ;;
    #_public
    (§ method #_"void" addAddress [#_"InetAddress" address]
        (.. this (addAddress (PeerAddress. (:params this), address, (-> this :params :port))))
        nil
    )

    ;;;
     ; Add addresses from a discovery source to the list of potential peers to connect to.
     ; If max connections has not been configured, or set to zero, then it's set to the default at this point.
     ;;
    #_public
    (§ method #_"void" addPeerDiscovery [#_"PeerDiscovery" __peerDiscovery]
        (.. (:lock this) (lock))
        (try
            (when (= (.. this (getMaxConnections)) 0)
                (.. this (setMaxConnections PeerGroup'DEFAULT_CONNECTIONS))
            )
            (.. (:peer-discoverers this) (add __peerDiscovery))
            (finally
                (.. (:lock this) (unlock))
            )
        )
        nil
    )

    ;;; Returns number of discovered peers. ;;
    #_protected
    #_throws #_[ "PeerDiscoveryException" ]
    (§ method #_"int" discoverPeers []
        ;; Don't hold the lock whilst doing peer discovery: it can take a long time and cause high API latency.
        (assert-state (not (.. (:lock this) (isHeldByCurrentThread))))

        (let [#_"int" __maxPeersToDiscoverCount (:v-max-peers-to-discover-count this)
              #_"long" __peerDiscoveryTimeoutMillis (:v-peer-discovery-timeout-millis this)
              #_"Stopwatch" watch (Stopwatch/createStarted)
              #_"List<PeerAddress>" __addressList (Lists/newLinkedList)]

            (doseq [#_"PeerDiscovery" __peerDiscovery (:peer-discoverers this)] ;; COW
                (let [#_"InetSocketAddress[]" addresses (.. __peerDiscovery (getPeers (:required-services this), __peerDiscoveryTimeoutMillis, TimeUnit/MILLISECONDS))]
                    (doseq [#_"InetSocketAddress" address addresses]
                        (.. __addressList (add (PeerAddress. (:params this), address)))
                    )
                    (when (<= __maxPeersToDiscoverCount (.. __addressList (size)))
                        (§ break )
                    )
                )
            )

            (when (not (.. __addressList (isEmpty)))
                (doseq [#_"PeerAddress" address __addressList]
                    (.. this (addInactive address))
                )

                (let [#_"ImmutableSet<PeerAddress>" __peersDiscoveredSet (ImmutableSet/copyOf __addressList)]
                    (doseq [#_"ListenerRegistration<PeerDiscoveredEventListener>" registration (:peer-discovered-event-listeners this)] ;; COW
                        (.. (:executor registration) (execute (Runnable.)
                        (§ anon
                            #_override
                            #_public
                            (§ method #_"void" run []
                                (.. (:listener registration) (onPeersDiscovered __peersDiscoveredSet))
                                nil
                            )
                        )))
                    )
                )
            )
            (.. watch (stop))
            (.. PeerGroup'log (info "Peer discovery took {} and returned {} items", watch, (.. __addressList (size))))
            (.. __addressList (size))
        )
    )

    #_testing
    (§ method #_"void" waitForJobQueue []
        (Futures/getUnchecked (.. (:executor this) (submit (Runnables/doNothing))))
        nil
    )

    #_private
    (§ method- #_"int" countConnectedAndPendingPeers []
        (.. (:lock this) (lock))
        (try
            (+ (.. (:peers this) (size)) (.. (:pending-peers this) (size)))
            (finally
                (.. (:lock this) (unlock))
            )
        )
    )

    #_private
    #_static
    #_enum
    (def- LocalhostCheckState'values
    #{
        :LocalhostCheckState'NOT_TRIED
        :LocalhostCheckState'FOUND
        :LocalhostCheckState'FOUND_AND_CONNECTED
        :LocalhostCheckState'NOT_THERE
    })
    #_private
    (§ field- #_"LocalhostCheckState" :localhost-check-state :LocalhostCheckState'NOT_TRIED)

    #_private
    (§ method- #_"boolean" maybeCheckForLocalhostPeer []
        (assert-state (.. (:lock this) (isHeldByCurrentThread)))

        (when' (= (:localhost-check-state this) :LocalhostCheckState'NOT_TRIED) => false
            ;; Do a fast blocking connect to see if anything is listening.
            (let [#_"Socket" socket nil]
                (try
                    (§ ass socket (Socket.))
                    (.. socket (connect (InetSocketAddress. (InetAddresses/forString "127.0.0.1"), (-> this :params :port)), (:v-connect-timeout-millis this)))
                    (§ assoc this :localhost-check-state :LocalhostCheckState'FOUND)
                    true
                    (catch IOException e
                        (.. PeerGroup'log (info "Localhost peer not detected."))
                        (§ assoc this :localhost-check-state :LocalhostCheckState'NOT_THERE)
                        false
                    )
                    (finally
                        (when (some? socket)
                            (try
                                (.. socket (close))
                                (catch IOException _
                                    ;; Ignore.
                                )
                            )
                        )
                    )
                )
            )
        )
    )

    ;;;
     ; Starts the PeerGroup and begins network activity.
     ;
     ; @return A future that completes when first connection activity has been triggered (note: not first connection made).
     ;;
    #_public
    (§ method #_"ListenableFuture" startAsync []
        ;; This is run in a background thread by the Service implementation.
        (when (nil? (:chain this))
            ;; Just try to help catch what might be a programming error.
            (.. PeerGroup'log (warn "Starting up with no attached block chain. Did you forget to pass one to the constructor?"))
        )
        (assert-state (not (:v-used-up this)), "Cannot start a peer group twice")

        (§ assoc this :v-running true)
        (§ assoc this :v-used-up true)
        (.. (:executor-startup-latch this) (countDown))

        ;; We do blocking waits during startup, so run on the executor thread.
        (.. (:executor this) (submit (Runnable.)
        (§ anon
            #_override
            #_public
            (§ method #_"void" run []
                (try
                    (.. PeerGroup'log (info "Starting ..."))
                    (.. (:channels this) (startAsync))
                    (.. (:channels this) (awaitRunning))
                    (.. this (triggerConnections))
                    (.. this (setupPinging))
                    (catch Throwable e
                        (.. PeerGroup'log (error "Exception when starting up", e)) ;; The executor swallows exceptions :( ;; )
                    )
                )
                nil
            )
        )))
    )

    ;;; Does a blocking startup. ;;
    #_public
    (§ method #_"void" start []
        (Futures/getUnchecked (.. this (startAsync)))
        nil
    )

    ;;; Can just use start() for a blocking start here instead of startAsync/awaitRunning: PeerGroup is no longer a Guava service. ;;
    #_deprecated
    #_public
    (§ method #_"void" awaitRunning []
        (.. this (waitForJobQueue))
        nil
    )

    #_public
    (§ method #_"ListenableFuture" stopAsync []
        (assert-state (:v-running this))
        (§ assoc this :v-running false)
        (let [#_"ListenableFuture" future (.. (:executor this) (submit (Runnable.)
            (§ anon
                #_override
                #_public
                (§ method #_"void" run []
                    (try
                        (.. PeerGroup'log (info "Stopping ..."))
                        ;; Blocking close of all sockets.
                        (.. (:channels this) (stopAsync))
                        (.. (:channels this) (awaitTerminated))
                        (doseq [#_"PeerDiscovery" __peerDiscovery (:peer-discoverers this)]
                            (.. __peerDiscovery (shutdown))
                        )
                        (§ assoc this :v-running false)
                        (.. PeerGroup'log (info "Stopped."))
                        (catch Throwable e
                            (.. PeerGroup'log (error "Exception when shutting down", e)) ;; The executor swallows exceptions :( ;; )
                        )
                    )
                    nil
                )
            )))]
            (.. (:executor this) (shutdown))
            (:future this)
        )
    )

    ;;; Does a blocking stop. ;;
    #_public
    (§ method #_"void" stop []
        (try
            (.. this (stopAsync))
            (.. PeerGroup'log (info "Awaiting PeerGroup shutdown ..."))
            (.. (:executor this) (awaitTermination Long/MAX_VALUE, TimeUnit/SECONDS))
            (catch InterruptedException e
                (throw (RuntimeException. e))
            )
        )
        nil
    )

    ;;; Can just use stop() here instead of stopAsync/awaitTerminated: PeerGroup is no longer a Guava service. ;;
    #_deprecated
    #_public
    (§ method #_"void" awaitTerminated []
        (try
            (.. (:executor this) (awaitTermination Long/MAX_VALUE, TimeUnit/SECONDS))
            (catch InterruptedException e
                (throw (RuntimeException. e))
            )
        )
        nil
    )

    ;;;
     ; Link the given wallet to this PeerGroup.  This is used for three purposes:
     ;
     ; <ol>
     ;   <li>So the wallet receives broadcast transactions.</li>
     ;   <li>Announcing pending transactions that didn't get into the chain yet to our peers.</li>
     ;   <li>Set the fast catchup time using {@link PeerGroup#setFastCatchupTimeSecs(long)} to optimize chain download.</li>
     ; </ol>
     ;
     ; Note that this should be done before chain download commences because if you add a wallet with keys earlier
     ; than the current chain head, the relevant parts of the chain won't be redownloaded for you.
     ;
     ; The Wallet will have an event listener registered on it, so to avoid leaks remember to use
     ; {@link PeerGroup#removeWallet(Wallet)} on it if you wish to keep the Wallet but lose the PeerGroup.
     ;;
    #_public
    (§ method #_"void" addWallet [#_"Wallet" wallet]
        (.. (:lock this) (lock))
        (try
            (ensure some? wallet)
            (assert-state (not (.. (:wallets this) (contains wallet))))
            (.. (:wallets this) (add wallet))
            (.. wallet (setTransactionBroadcaster this))
            (.. wallet (addCoinsReceivedEventListener Threading'SAME_THREAD, (:wallet-coins-received-event-listener this)))
            (.. wallet (addKeyChainEventListener Threading'SAME_THREAD, (:wallet-key-event-listener this)))
            (.. this (addPeerFilterProvider wallet))
            (doseq [#_"Peer" peer (:peers this)]
                (.. peer (addWallet wallet))
            )
            (finally
                (.. (:lock this) (unlock))
            )
        )
        nil
    )

    ;;;
     ; Link the given PeerFilterProvider to this PeerGroup.
     ; DO NOT use this for Wallets, use {@link PeerGroup#addWallet(Wallet)} instead.
     ;
     ; Note that this should be done before chain download commences because if you add a listener with keys earlier
     ; than the current chain head, the relevant parts of the chain won't be redownloaded for you.
     ;
     ; This method invokes {@link PeerGroup#recalculateFastCatchupAndFilter(FilterRecalculateMode)}.
     ; The return value of this method is the <code>ListenableFuture</code> returned by that invocation.
     ;
     ; @return a future that completes once each <code>Peer</code> in this group has had its <code>BloomFilter</code> (re)set.
     ;;
    #_public
    (§ method #_"ListenableFuture<BloomFilter>" addPeerFilterProvider [#_"PeerFilterProvider" provider]
        (.. (:lock this) (lock))
        (try
            (ensure some? provider)
            (assert-state (not (.. (:peer-filter-providers this) (contains provider))))
            ;; Insert provider at the start.  This avoids various concurrency problems that could occur because we need
            ;; all providers to be in a consistent, unchanging state whilst the filter is built.  Providers can give
            ;; this guarantee by taking a lock in their begin method, but if we add to the end of the list here, it
            ;; means we establish a lock ordering a > b > c if that's the order the providers were added in.  Given that
            ;; the main wallet will usually be first, this establishes an ordering wallet > other-provider, which means
            ;; other-provider can then not call into the wallet itself.  Other providers installed by the API user should
            ;; come first so the expected ordering is preserved.  This can also manifest itself in providers that use
            ;; synchronous RPCs into an actor instead of locking, but the same issue applies.
            (.. (:peer-filter-providers this) (add 0, provider))

            ;; Don't bother downloading block bodies before the oldest keys in all our wallets.  Make sure we recalculate
            ;; if a key is added.  Of course, by then we may have downloaded the chain already.  Ideally adding keys would
            ;; automatically rewind the block chain and redownload the blocks to find transactions relevant to those keys,
            ;; all transparently and in the background.  But we are a long way from that yet.
            (let [#_"ListenableFuture<BloomFilter>" future (.. this (recalculateFastCatchupAndFilter :FilterRecalculateMode'SEND_IF_CHANGED))]
                (.. this (updateVersionMessageRelayTxesBeforeFilter (.. this (getVersionMessage))))
                future
            )
            (finally
                (.. (:lock this) (unlock))
            )
        )
    )

    ;;;
     ; Opposite of {@link #addPeerFilterProvider(PeerFilterProvider)}.  Again, don't use this for wallets.
     ; Does not trigger recalculation of the filter.
     ;;
    #_public
    (§ method #_"void" removePeerFilterProvider [#_"PeerFilterProvider" provider]
        (.. (:lock this) (lock))
        (try
            (ensure some? provider)
            (assert-argument (.. (:peer-filter-providers this) (remove provider)))
            (finally
                (.. (:lock this) (unlock))
            )
        )
        nil
    )

    ;;;
     ; Unlinks the given wallet so it no longer receives broadcast transactions or has its transactions announced.
     ;;
    #_public
    (§ method #_"void" removeWallet [#_"Wallet" wallet]
        (.. (:wallets this) (remove (ensure some? wallet)))
        (.. (:peer-filter-providers this) (remove wallet))
        (.. wallet (removeCoinsReceivedEventListener (:wallet-coins-received-event-listener this)))
        (.. wallet (removeKeyChainEventListener (:wallet-key-event-listener this)))
        (.. wallet (setTransactionBroadcaster nil))
        (doseq [#_"Peer" peer (:peers this)]
            (.. peer (removeWallet wallet))
        )
        nil
    )

    #_public
    #_static
    #_enum
    (def FilterRecalculateMode'values
    #{
        :FilterRecalculateMode'SEND_IF_CHANGED
        :FilterRecalculateMode'FORCE_SEND_FOR_REFRESH
        :FilterRecalculateMode'DONT_SEND
    })

    #_private
    (§ field- #_"Map<FilterRecalculateMode, SettableFuture<BloomFilter>>" :in-flight-recalculations (Maps/newHashMap))

    ;;;
     ; Recalculates the bloom filter given to peers as well as the timestamp after which full blocks are downloaded
     ; (instead of only headers).  Note that calls made one after another may return the same future, if the request
     ; wasn't processed yet (i.e. calls are deduplicated).
     ;
     ; @param mode In what situations to send the filter to connected peers.
     ; @return A future that completes once the filter has been calculated (note: this does not mean acknowledged by remote peers).
     ;;
    #_public
    (§ method #_"ListenableFuture<BloomFilter>" recalculateFastCatchupAndFilter [#_"FilterRecalculateMode" mode]
        (let [#_"SettableFuture<BloomFilter>" future (SettableFuture/create)]
            (§ sync (:in-flight-recalculations this)
                (when (some? (.. (:in-flight-recalculations this) (get mode)))
                    (§ return (.. (:in-flight-recalculations this) (get mode)))
                )

                (.. (:in-flight-recalculations this) (put mode, future))
            )
            (let [#_"Runnable" command (Runnable.)
                (§ anon
                    #_override
                    #_public
                    (§ method #_"void" run []
                        (try
                            (.. this (go))
                            (catch Throwable e
                                (.. PeerGroup'log (error "Exception when trying to recalculate Bloom filter", e)) ;; The executor swallows exceptions :( ;; )
                            )
                        )
                        nil
                    )

                    #_public
                    (§ method #_"void" go []
                        (assert-state (not (.. (:lock this) (isHeldByCurrentThread))))
                        ;; Fully verifying mode doesn't use this optimization (it can't as it needs to see all transactions).
                        (when (or (and (some? (:chain this)) (.. (:chain this) (shouldVerifyTransactions))) (not (:v-bloom-filtering-enabled this)))
                            (§ return nil)
                        )

                        ;; We only ever call bloomFilterMerger.calculate on jobQueue, so we cannot be calculating two filters at once.
                        (let [#_"FilterMergerResult" result (.. (:bloom-filter-merger this) (calculate (ImmutableList/copyOf (:peer-filter-providers this))))] ;; COW
                            (let [#_"boolean" send
                                    (condp = mode
                                        :FilterRecalculateMode'SEND_IF_CHANGED        (:changed result)
                                        :FilterRecalculateMode'DONT_SEND              false
                                        :FilterRecalculateMode'FORCE_SEND_FOR_REFRESH true
                                        (throw (UnsupportedOperationException.))
                                    )]
                                (when send
                                    (doseq [#_"Peer" peer (:peers this)] ;; COW
                                        ;; Only query the mempool if this recalculation request is not in order to lower the observed FP
                                        ;; rate.  There's no point querying the mempool when doing this because the FP rate can only go
                                        ;; down, and we will have seen all the relevant txns before: it's pointless to ask for them again.
                                        (.. peer (setBloomFilter (:filter result), (not= mode :FilterRecalculateMode'FORCE_SEND_FOR_REFRESH)))
                                    )
                                    ;; Reset the false positive estimate so that we don't send a flood of filter updates
                                    ;; if the estimate temporarily overshoots our threshold.
                                    (when (some? (:chain this))
                                        (.. (:chain this) (resetFalsePositiveEstimate))
                                    )
                                )
                                ;; Do this last so that bloomFilter is already set when it gets called.
                                (.. this (setFastCatchupTimeSecs (:earliest-key-time-secs result)))
                                (§ sync (:in-flight-recalculations this)
                                    (.. (:in-flight-recalculations this) (put mode, nil))
                                )
                                (.. future (set (:filter result)))
                            )
                        )
                        nil
                    )
                )]
                (try
                    (.. (:executor this) (execute (.. this command)))
                    (catch RejectedExecutionException _
                        ;; Can happen during shutdown.
                    )
                )
            )
            future
        )
    )

    ;;;
     ; Sets the false positive rate of bloom filters given to peers.  The default is {@link #DEFAULT_BLOOM_FILTER_FP_RATE}.
     ;
     ; Be careful regenerating the bloom filter too often, as it decreases anonymity because remote nodes can
     ; compare transactions against both the new and old filters to significantly decrease the false positive rate.
     ;
     ; See the docs for {@link BloomFilter#BloomFilter(int, double, long, BloomFilter.BloomUpdate)} for a brief
     ; explanation of anonymity when using bloom filters.
     ;;
    #_public
    (§ method #_"void" setBloomFilterFalsePositiveRate [#_"double" __bloomFilterFPRate]
        (.. (:lock this) (lock))
        (try
            (.. (:bloom-filter-merger this) (setBloomFilterFPRate __bloomFilterFPRate))
            (.. this (recalculateFastCatchupAndFilter :FilterRecalculateMode'SEND_IF_CHANGED))
            (finally
                (.. (:lock this) (unlock))
            )
        )
        nil
    )

    ;;;
     ; Returns the number of currently connected peers.  To be informed when this count changes,
     ; register a {@link PeerConnectedEventListener}/{@link PeerDisconnectedEventListener}
     ; and use the onPeerConnected/onPeerDisconnected methods.
     ;;
    #_public
    (§ method #_"int" numConnectedPeers []
        (.. (:peers this) (size))
    )

    ;;;
     ; Connect to a peer by creating a channel to the destination address.  This should not be
     ; used normally - let the PeerGroup manage connections through {@link #start()}.
     ;
     ; @param address Destination IP and port.
     ; @return The newly created Peer object or null if the peer could not be connected.
     ;         Use {@link Peer#getConnectionOpenFuture()} if you
     ;         want a future which completes when the connection is open.
     ;;
    #_nilable
    #_public
    (§ method #_"Peer" connectTo [#_"InetSocketAddress" address]
        (.. (:lock this) (lock))
        (try
            (let [#_"PeerAddress" __peerAddress (PeerAddress. (:params this), address)]
                (.. (:backoff-map this) (put __peerAddress, (ExponentialBackoff. (:peer-backoff-params this))))
                (.. this (connectTo __peerAddress, true, (:v-connect-timeout-millis this)))
            )
            (finally
                (.. (:lock this) (unlock))
            )
        )
    )

    ;;;
     ; Helper for forcing a connection to localhost.  Useful when using test mode.  Returns the peer object.
     ;;
    #_nilable
    #_public
    (§ method #_"Peer" connectToLocalHost []
        (.. (:lock this) (lock))
        (try
            (let [#_"PeerAddress" localhost (PeerAddress'localhost (:params this))]
                (.. (:backoff-map this) (put localhost, (ExponentialBackoff. (:peer-backoff-params this))))
                (.. this (connectTo localhost, true, (:v-connect-timeout-millis this)))
            )
            (finally
                (.. (:lock this) (unlock))
            )
        )
    )

    ;;;
     ; Creates a version message to send, constructs a Peer object and attempts to connect it.
     ; Returns the peer on success or null on failure.
     ;
     ; @param address Remote network address.
     ; @param incrementMaxConnections Whether to consider this connection an attempt to fill our quota, or something explicitly requested.
     ; @return Peer or null.
     ;;
    #_nilable
    #_protected
    (§ method #_"Peer" connectTo [#_"PeerAddress" address, #_"boolean" __incrementMaxConnections, #_"int" __connectTimeoutMillis]
        (assert-state (.. (:lock this) (isHeldByCurrentThread)))
        (let [#_"VersionMessage" ver (.. this (getVersionMessage) (duplicate))]
            (§ assoc ver :best-height (if (some? (:chain this)) (.. (:chain this) (getBestChainHeight)) 0))
            (§ assoc ver :time (Utils'currentTimeSeconds))

            (let [#_"Peer" peer (.. this (createPeer address, ver))]
                (.. peer (addConnectedEventListener Threading'SAME_THREAD, (:startup-listener this)))
                (.. peer (addDisconnectedEventListener Threading'SAME_THREAD, (:startup-listener this)))
                (.. peer (setMinProtocolVersion (:v-min-required-protocol-version this)))
                (.. (:pending-peers this) (add peer))

                (try
                    (.. PeerGroup'log (info "Attempting connection to {}     ({} connected, {} pending, {} max)", address, (.. (:peers this) (size)), (.. (:pending-peers this) (size)), (:max-connections this)))
                    (let [#_"ListenableFuture<SocketAddress>" future (.. (:channels this) (openConnection (.. address (toSocketAddress)), peer))]
                        (when (.. future (isDone))
                            (Uninterruptibles/getUninterruptibly future)
                        )
                    )
                    (catch ExecutionException e
                        (let [#_"Throwable" cause (Throwables/getRootCause e)]
                            (.. PeerGroup'log (warn (str "Failed to connect to " address ": " (.. cause (getMessage)))))
                            (.. this (handlePeerDeath peer, cause))
                            (§ return nil)
                        )
                    )
                )
                (.. peer (setSocketTimeout __connectTimeoutMillis))
                ;; When the channel has connected and version negotiated successfully, handleNewPeer will end up being called
                ;; on a worker thread.
                (when __incrementMaxConnections
                    ;; We don't use setMaxConnections here as that would trigger a recursive attempt to establish a new
                    ;; outbound connection.
                    (§ update this :max-connections inc)
                )
                peer
            )
        )
    )

    ;;; You can override this to customise the creation of {@link Peer} objects. ;;
    #_protected
    (§ method #_"Peer" createPeer [#_"PeerAddress" address, #_"VersionMessage" ver]
        (Peer. (:params this), ver, address, (:chain this), (:download-tx-dependency-depth this))
    )

    ;;;
     ; Sets the timeout between when a connection attempt to a peer begins and when the version message exchange completes.
     ; This does not apply to currently pending peers.
     ;;
    #_public
    (§ method #_"void" setConnectTimeoutMillis [#_"int" __connectTimeoutMillis]
        (§ assoc this :v-connect-timeout-millis __connectTimeoutMillis)
        nil
    )

    ;;;
     ; Start downloading the blockchain from the first available peer.
     ;
     ; If no peers are currently connected, the download will be started once a peer starts.  If the peer dies,
     ; the download will resume with another peer.
     ;
     ; @param listener A listener for chain download events, may not be null.
     ;;
    #_public
    (§ method #_"void" startBlockChainDownload [#_"PeerDataEventListener" listener]
        (.. (:lock this) (lock))
        (try
            (when (some? (:download-peer this))
                (when (some? (:download-listener this))
                    (PeerGroup'removeDataEventListenerFromPeer (:download-peer this), (:download-listener this))
                )
                (when (some? listener)
                    (PeerGroup'addDataEventListenerToPeer Threading'USER_THREAD, (:download-peer this), listener)
                )
            )
            (§ assoc this :download-listener listener)
            ;; TODO: Be more nuanced about which peer to download from.  We can also try
            ;; downloading from multiple peers and handle the case when a new peer comes along
            ;; with a longer chain after we thought we were done.
            (when (not (.. (:peers this) (isEmpty)))
                (.. this (startBlockChainDownloadFromPeer (.. (:peers this) (iterator) (next)))) ;; Will add the new download listener.
            )
            (finally
                (.. (:lock this) (unlock))
            )
        )
        nil
    )

    ;;;
     ; Register a data event listener against a single peer (i.e. for blockchain download).
     ; Handling registration/deregistration on peer death/add is outside the scope of these methods.
     ;;
    #_private
    #_static
    (§ defn- #_"void" PeerGroup'addDataEventListenerToPeer [#_"Executor" executor, #_"Peer" peer, #_"PeerDataEventListener" __downloadListener]
        (.. peer (addBlocksDownloadedEventListener executor, __downloadListener))
        (.. peer (addChainDownloadStartedEventListener executor, __downloadListener))
        (.. peer (addGetDataEventListener executor, __downloadListener))
        (.. peer (addPreMessageReceivedEventListener executor, __downloadListener))
        nil
    )

    ;;;
     ; Remove a registered data event listener against a single peer (i.e. for blockchain download).
     ; Handling registration/deregistration on peer death/add is outside the scope of these methods.
     ;;
    #_private
    #_static
    (§ defn- #_"void" PeerGroup'removeDataEventListenerFromPeer [#_"Peer" peer, #_"PeerDataEventListener" listener]
        (.. peer (removeBlocksDownloadedEventListener listener))
        (.. peer (removeChainDownloadStartedEventListener listener))
        (.. peer (removeGetDataEventListener listener))
        (.. peer (removePreMessageReceivedEventListener listener))
        nil
    )

    ;;;
     ; Download the blockchain from peers.  Convenience that uses a {@link DownloadProgressTracker} for you.
     ;
     ; This method waits until the download is complete.  "Complete" is defined as downloading
     ; from at least one peer all the blocks that are in that peer's inventory.
     ;;
    #_public
    (§ method #_"void" downloadBlockChain []
        (let [#_"DownloadProgressTracker" listener (DownloadProgressTracker.)]
            (.. this (startBlockChainDownload listener))
            (try
                (.. listener (await))
                (catch InterruptedException e
                    (throw (RuntimeException. e))
                )
            )
        )
        nil
    )

    #_protected
    (§ method #_"void" handleNewPeer [#_"Peer" peer]
        (let [#_"int" __newSize -1]
            (.. (:lock this) (lock))
            (try
                (.. (:group-backoff this) (trackSuccess))
                (.. (:backoff-map this) (get (.. peer (getAddress))) (trackSuccess))

                ;; Sets up the newly connected peer so it can do everything it needs to.
                (.. (:pending-peers this) (remove peer))
                (.. (:peers this) (add peer))
                (§ ass __newSize (.. (:peers this) (size)))
                (.. PeerGroup'log (info "{}: New peer      ({} connected, {} pending, {} max)", peer, __newSize, (.. (:pending-peers this) (size)), (:max-connections this)))
                ;; Give the peer a filter that can be used to probabilistically drop transactions that
                ;; aren't relevant to our wallet.  We may still receive some false positives, which is
                ;; OK because it helps improve wallet privacy.  Old nodes will just ignore the message.
                (when (some? (.. (:bloom-filter-merger this) (getLastFilter)))
                    (.. peer (setBloomFilter (.. (:bloom-filter-merger this) (getLastFilter))))
                )
                (.. peer (setDownloadData false))
                ;; TODO: The peer should calculate the fast catchup time from the added wallets here.
                (doseq [#_"Wallet" wallet (:wallets this)]
                    (.. peer (addWallet wallet))
                )
                (when (nil? (:download-peer this))
                    ;; Kick off chain download if we aren't already doing it.
                    (.. this (setDownloadPeer (.. this (selectDownloadPeer (:peers this)))))
                    (let [#_"boolean" __shouldDownloadChain (and (some? (:download-listener this)) (some? (:chain this)))]
                        (when __shouldDownloadChain
                            (.. this (startBlockChainDownloadFromPeer (:download-peer this)))
                        )
                    )
                )
                ;; Make sure the peer knows how to upload transactions that are requested from us.
                (.. peer (addBlocksDownloadedEventListener Threading'SAME_THREAD, (:peer-listener this)))
                (.. peer (addGetDataEventListener Threading'SAME_THREAD, (:peer-listener this)))

                ;; And set up event listeners for clients.  This will allow them to find out about new transactions and blocks.
                (doseq [#_"ListenerRegistration<BlocksDownloadedEventListener>" registration (:peers-blocks-downloaded-event-listeners this)]
                    (.. peer (addBlocksDownloadedEventListener (:executor registration), (:listener registration)))
                )
                (doseq [#_"ListenerRegistration<ChainDownloadStartedEventListener>" registration (:peers-chain-download-started-event-listeners this)]
                    (.. peer (addChainDownloadStartedEventListener (:executor registration), (:listener registration)))
                )
                (doseq [#_"ListenerRegistration<PeerConnectedEventListener>" registration (:peer-connected-event-listeners this)]
                    (.. peer (addConnectedEventListener (:executor registration), (:listener registration)))
                )

                ;; We intentionally do not add disconnect listeners to peers.
                (doseq [#_"ListenerRegistration<GetDataEventListener>" registration (:peer-get-data-event-listeners this)]
                    (.. peer (addGetDataEventListener (:executor registration), (:listener registration)))
                )
                (doseq [#_"ListenerRegistration<OnTransactionBroadcastListener>" registration (:peers-transaction-broadast-event-listeners this)]
                    (.. peer (addOnTransactionBroadcastListener (:executor registration), (:listener registration)))
                )
                (doseq [#_"ListenerRegistration<PreMessageReceivedEventListener>" registration (:peers-pre-message-received-event-listeners this)]
                    (.. peer (addPreMessageReceivedEventListener (:executor registration), (:listener registration)))
                )
                (finally
                    (.. (:lock this) (unlock))
                )
            )

            (let [#_"int" __fNewSize __newSize]
                (doseq [#_"ListenerRegistration<PeerConnectedEventListener>" registration (:peer-connected-event-listeners this)]
                    (.. (:executor registration) (execute (Runnable.)
                    (§ anon
                        #_override
                        #_public
                        (§ method #_"void" run []
                            (.. (:listener registration) (onPeerConnected peer, __fNewSize))
                            nil
                        )
                    )))
                )
            )
        )
        nil
    )

    #_nilable
    #_private
    #_volatile
    (§ field- #_"ListenableScheduledFuture<?>" :v-ping-task)

    #_suppress #_[ "NonAtomicOperationOnVolatileField" ]
    #_private
    (§ method- #_"void" setupPinging []
        (when-not (<= (.. this (getPingIntervalMsec)) 0) ;; Disabled.
            (§ assoc this :v-ping-task (.. (:executor this) (scheduleAtFixedRate (Runnable.)
            (§ anon
                #_override
                #_public
                (§ method #_"void" run []
                    (try
                        (if (<= (.. this (getPingIntervalMsec)) 0) ;; Disabled.
                            (let [#_"ListenableScheduledFuture<?>" task (:v-ping-task this)]
                                (when (some? task)
                                    (.. task (cancel false))
                                    (§ assoc this :v-ping-task nil)
                                )
                            )
                            (doseq [#_"Peer" peer (.. this (getConnectedPeers))]
                                (when (.. peer (getPeerVersionMessage) (isPingPongSupported))
                                    (.. peer (ping))
                                )
                            )
                        )
                        (catch Throwable e
                            (.. PeerGroup'log (error "Exception in ping loop", e)) ;; The executor swallows exceptions :( ;; )
                        )
                    )
                    nil
                )
            ), (.. this (getPingIntervalMsec)), (.. this (getPingIntervalMsec)), TimeUnit/MILLISECONDS)))
        )
        nil
    )

    #_private
    (§ method- #_"void" setDownloadPeer [#_nilable #_"Peer" peer]
        (.. (:lock this) (lock))
        (try
            (when-not (= (:download-peer this) peer)
                (when (some? (:download-peer this))
                    (.. PeerGroup'log (info "Unsetting download peer: {}", (:download-peer this)))
                    (when (some? (:download-listener this))
                        (PeerGroup'removeDataEventListenerFromPeer (:download-peer this), (:download-listener this))
                    )
                    (.. (:download-peer this) (setDownloadData false))
                )
                (§ assoc this :download-peer peer)
                (when (some? (:download-peer this))
                    (.. PeerGroup'log (info "Setting download peer: {}", (:download-peer this)))
                    (when (some? (:download-listener this))
                        (PeerGroup'addDataEventListenerToPeer Threading'SAME_THREAD, peer, (:download-listener this))
                    )
                    (.. (:download-peer this) (setDownloadData true))
                    (when (some? (:chain this))
                        (.. (:download-peer this) (setDownloadParameters (:fast-catchup-time-secs this), (some? (.. (:bloom-filter-merger this) (getLastFilter)))))
                    )
                )
            )
            (finally
                (.. (:lock this) (unlock))
            )
        )
        nil
    )

    ;;;
     ; Tells the PeerGroup to download only block headers before a certain time and bodies after that.
     ; Call this before starting block chain download.
     ; Do not use a time > NOW - 1 block, as it will break some block download logic.
     ;;
    #_public
    (§ method #_"void" setFastCatchupTimeSecs [#_"long" __secondsSinceEpoch]
        (.. (:lock this) (lock))
        (try
            (assert-state (or (nil? (:chain this)) (not (.. (:chain this) (shouldVerifyTransactions)))), "Fast catchup is incompatible with fully verifying")

            (§ assoc this :fast-catchup-time-secs __secondsSinceEpoch)
            (when (some? (:download-peer this))
                (.. (:download-peer this) (setDownloadParameters __secondsSinceEpoch, (some? (.. (:bloom-filter-merger this) (getLastFilter)))))
            )
            (finally
                (.. (:lock this) (unlock))
            )
        )
        nil
    )

    ;;;
     ; Returns the current fast catchup time.  The contents of blocks before this time won't be downloaded as they
     ; cannot contain any interesting transactions.  If you use {@link PeerGroup#addWallet(Wallet)} this just returns
     ; the min of the wallets earliest key times.
     ;
     ; @return a time in seconds since the epoch.
     ;;
    #_public
    (§ method #_"long" getFastCatchupTimeSecs []
        (.. (:lock this) (lock))
        (try
            (:fast-catchup-time-secs this)
            (finally
                (.. (:lock this) (unlock))
            )
        )
    )

    #_protected
    (§ method #_"void" handlePeerDeath [#_"Peer" peer, #_nilable #_"Throwable" exception]
        ;; Peer deaths can occur during startup if a connect attempt after peer discovery aborts immediately.
        (when (.. this (isRunning))
            (let [#_"int" __numPeers #_"int" __numConnectedPeers 0]
                (.. (:lock this) (lock))
                (try
                    (.. (:pending-peers this) (remove peer))
                    (.. (:peers this) (remove peer))

                    (let [#_"PeerAddress" address (.. peer (getAddress))]

                        (.. PeerGroup'log (info "{}: Peer died      ({} connected, {} pending, {} max)", address, (.. (:peers this) (size)), (.. (:pending-peers this) (size)), (:max-connections this)))
                        (when (= peer (:download-peer this))
                            (.. PeerGroup'log (info "Download peer died. Picking a new one."))
                            (.. this (setDownloadPeer nil))
                            ;; Pick a new one and possibly tell it to download the chain.
                            (let [#_"Peer" __newDownloadPeer (.. this (selectDownloadPeer (:peers this)))]
                                (when (some? __newDownloadPeer)
                                    (.. this (setDownloadPeer __newDownloadPeer))
                                    (when (some? (:download-listener this))
                                        (.. this (startBlockChainDownloadFromPeer __newDownloadPeer))
                                    )
                                )
                            )
                        )
                        (§ ass __numPeers (+ (.. (:peers this) (size)) (.. (:pending-peers this) (size))))
                        (§ ass __numConnectedPeers (.. (:peers this) (size)))

                        (.. (:group-backoff this) (trackFailure))

                        (cond (instance? NoRouteToHostException exception)
                            (do
                                (when (and (instance? Inet6Address (.. address (getAddr))) (not (:ipv6-unreachable this)))
                                    (§ assoc this :ipv6-unreachable true)
                                    (.. PeerGroup'log (warn "IPv6 peer connect failed due to routing failure, ignoring IPv6 addresses from now on"))
                                )
                            )
                            :else
                            (do
                                (.. (:backoff-map this) (get address) (trackFailure))
                                ;; Put back on inactive list.
                                (.. (:inactives this) (offer address))
                            )
                        )

                        (when (< __numPeers (.. this (getMaxConnections)))
                            (.. this (triggerConnections))
                        )
                    )
                    (finally
                        (.. (:lock this) (unlock))
                    )
                )

                (.. peer (removeBlocksDownloadedEventListener (:peer-listener this)))
                (.. peer (removeGetDataEventListener (:peer-listener this)))
                (doseq [#_"Wallet" wallet (:wallets this)]
                    (.. peer (removeWallet wallet))
                )

                (let [#_"int" __fNumConnectedPeers __numConnectedPeers]

                    (doseq [#_"ListenerRegistration<BlocksDownloadedEventListener>" registration (:peers-blocks-downloaded-event-listeners this)]
                        (.. peer (removeBlocksDownloadedEventListener (:listener registration)))
                    )
                    (doseq [#_"ListenerRegistration<ChainDownloadStartedEventListener>" registration (:peers-chain-download-started-event-listeners this)]
                        (.. peer (removeChainDownloadStartedEventListener (:listener registration)))
                    )
                    (doseq [#_"ListenerRegistration<GetDataEventListener>" registration (:peer-get-data-event-listeners this)]
                        (.. peer (removeGetDataEventListener (:listener registration)))
                    )
                    (doseq [#_"ListenerRegistration<PreMessageReceivedEventListener>" registration (:peers-pre-message-received-event-listeners this)]
                        (.. peer (removePreMessageReceivedEventListener (:listener registration)))
                    )
                    (doseq [#_"ListenerRegistration<OnTransactionBroadcastListener>" registration (:peers-transaction-broadast-event-listeners this)]
                        (.. peer (removeOnTransactionBroadcastListener (:listener registration)))
                    )

                    (doseq [#_"ListenerRegistration<PeerDisconnectedEventListener>" registration (:peer-disconnected-event-listeners this)]
                        (.. (:executor registration) (execute (Runnable.)
                        (§ anon
                            #_override
                            #_public
                            (§ method #_"void" run []
                                (.. (:listener registration) (onPeerDisconnected peer, __fNumConnectedPeers))
                                nil
                            )
                        )))
                        (.. peer (removeDisconnectedEventListener (:listener registration)))
                    )
                )
            )
        )
        nil
    )

    #_private
    (§ field- #_"int" :stall-period-seconds 10)
    #_private
    (§ field- #_"int" :stall-min-speed-bytes-sec (* Block'HEADER_SIZE 20))

    ;;;
     ; Configures the stall speed: the speed at which a peer is considered to be serving us the block chain
     ; unacceptably slowly.  Once a peer has served us data slower than the given data rate for the given
     ; number of seconds, it is considered stalled and will be disconnected, forcing the chain download to continue
     ; from a different peer.  The defaults are chosen conservatively, but if you are running on a platform that is
     ; CPU constrained or on a very slow network e.g. EDGE, the default settings may need adjustment to
     ; avoid false stalls.
     ;
     ; @param periodSecs How many seconds the download speed must be below blocksPerSec, defaults to 10.
     ; @param bytesPerSecond Download speed (only blocks/txns count) must be consistently below this for a stall, defaults to the bandwidth required for 20 block headers per second.
     ;;
    #_public
    (§ method #_"void" setStallThreshold [#_"int" __periodSecs, #_"int" __bytesPerSecond]
        (.. (:lock this) (lock))
        (try
            (§ assoc this :stall-period-seconds __periodSecs)
            (§ assoc this :stall-min-speed-bytes-sec __bytesPerSecond)
            (finally
                (.. (:lock this) (unlock))
            )
        )
        nil
    )

    #_private
    (§ class- ChainDownloadSpeedCalculator (§ implements BlocksDownloadedEventListener, Runnable)
        #_private
        (§ field- #_"int" :blocks-in-last-second)
        #_private
        (§ field- #_"int" :txns-in-last-second)
        #_private
        (§ field- #_"int" :orig-txns-in-last-second)
        #_private
        (§ field- #_"long" :bytes-in-last-second)

        ;; If we take more stalls than this, we assume we're on some kind of terminally slow network and the
        ;; stall threshold just isn't set properly.  We give up on stall disconnects after that.
        #_private
        (§ field- #_"int" :max-stalls 3)

        ;; How many seconds the peer has until we start measuring its speed.
        #_private
        (§ field- #_"int" :warmup-seconds -1)

        ;; Used to calculate a moving average.
        #_private
        (§ field- #_"long[]" :samples)
        #_private
        (§ field- #_"int" :cursor)

        #_private
        (§ field- #_"boolean" :sync-done)

        #_override
        #_public
        #_synchronized
        (§ method #_"void" onBlocksDownloaded [#_"Peer" peer, #_"Block" block, #_nilable #_"FilteredBlock" __filteredBlock, #_"int" __blocksLeft]
            (§ update this :blocks-in-last-second inc)
            (§ update this :bytes-in-last-second + Block'HEADER_SIZE)
            (let [#_"List<Transaction>" __blockTransactions (.. block (getTransactions))]
                ;; This whole area of the type hierarchy is a mess.
                (let [#_"int" __txCount (+ (if (some? __blockTransactions) (.. this (countAndMeasureSize __blockTransactions)) 0) (if (some? __filteredBlock) (.. this (countAndMeasureSize (.. __filteredBlock (getAssociatedTransactions) (values)))) 0))]
                    (§ update this :txns-in-last-second + __txCount)
                    (when (some? __filteredBlock)
                        (§ update this :orig-txns-in-last-second + (.. __filteredBlock (getTransactionCount)))
                    )
                )
            )
            nil
        )

        #_private
        (§ method- #_"int" countAndMeasureSize [#_"Collection<Transaction>" transactions]
            (doseq [#_"Transaction" transaction transactions]
                (§ update this :bytes-in-last-second + (.. transaction (getMessageSize)))
            )
            (.. transactions (size))
        )

        #_override
        #_public
        (§ method #_"void" run []
            (try
                (.. this (calculate))
                (catch Throwable e
                    (.. PeerGroup'log (error "Error in speed calculator", e))
                )
            )
            nil
        )

        #_private
        (§ method- #_"void" calculate []
            (let [#_"int" __minSpeedBytesPerSec
                  #_"int" period]

                (.. (:lock this) (lock))
                (try
                    (§ ass __minSpeedBytesPerSec (:stall-min-speed-bytes-sec this))
                    (§ ass period (:stall-period-seconds this))
                    (finally
                        (.. (:lock this) (unlock))
                    )
                )

                (§ sync this
                    (when (or (nil? (:samples this)) (not= (alength (:samples this)) period))
                        (§ assoc this :samples (long-array period))
                        ;; *2 because otherwise a single low sample could cause an immediate disconnect which is too harsh.
                        (Arrays/fill (:samples this), (* __minSpeedBytesPerSec 2))
                        (§ assoc this :warmup-seconds 15)
                    )

                    (let [#_"boolean" __behindPeers (and (some? (:chain this)) (< (.. (:chain this) (getBestChainHeight)) (PeerGroup'getMostCommonChainHeight)))]
                        (when (not __behindPeers)
                            (§ assoc this :sync-done true)
                        )
                        (when (not (:sync-done this))
                            (cond (< (:warmup-seconds this) 0)
                                (do
                                    ;; Calculate the moving average.
                                    (aset (:samples this) (:cursor this) (:bytes-in-last-second this))
                                    (§ update this :cursor inc)
                                    (when (= (:cursor this) (alength (:samples this)))
                                        (§ assoc this :cursor 0)
                                    )
                                    (let [#_"long" average 0]
                                        (doseq [#_"long" sample (:samples this)]
                                            (§ ass average (+ average sample))
                                        )
                                        (§ ass average (quot average (alength (:samples this))))

                                        (.. PeerGroup'log (info (String/format Locale/US, "%d blocks/sec, %d tx/sec, %d pre-filtered tx/sec, avg/last %.2f/%.2f kilobytes per sec (stall threshold <%.2f KB/sec for %d seconds)", (:blocks-in-last-second this), (:txns-in-last-second this), (:orig-txns-in-last-second this), (/ average 1024.0), (/ (:bytes-in-last-second this) 1024.0), (/ __minSpeedBytesPerSec 1024.0), (alength (:samples this)))))

                                        (when (and (< average __minSpeedBytesPerSec) (< 0 (:max-stalls this)))
                                            (§ update this :max-stalls dec)
                                            (cond (= (:max-stalls this) 0)
                                                (do
                                                    ;; We could consider starting to drop the Bloom filtering FP rate at this point, because
                                                    ;; we tried a bunch of peers and no matter what we don't seem to be able to go any faster.
                                                    ;; This implies we're bandwidth bottlenecked and might want to start using bandwidth
                                                    ;; more effectively.  Of course if there's a MITM that is deliberately throttling us,
                                                    ;; this is a good way to make us take away all the FPs from our Bloom filters ... but
                                                    ;; as they don't give us a whole lot of privacy either way that's not inherently a big
                                                    ;; deal.
                                                    (.. PeerGroup'log (warn "This network seems to be slower than the requested stall threshold - won't do stall disconnects any more."))
                                                )
                                                :else
                                                (do
                                                    (let [#_"Peer" peer (.. this (getDownloadPeer))]
                                                        (.. PeerGroup'log (warn (String/format Locale/US, "Chain download stalled: received %.2f KB/sec for %d seconds, require average of %.2f KB/sec, disconnecting %s", (/ average 1024.0), (alength (:samples this)), (/ __minSpeedBytesPerSec 1024.0), peer)))
                                                        (.. peer (close))
                                                        ;; Reset the sample buffer and give the next peer time to get going.
                                                        (§ assoc this :samples nil)
                                                        (§ assoc this :warmup-seconds period)
                                                    )
                                                )
                                            )
                                        )
                                    )
                                )
                                :else
                                (do
                                    (§ update this :warmup-seconds dec)
                                    (when (< 0 (:bytes-in-last-second this))
                                        (.. PeerGroup'log (info (String/format Locale/US, "%d blocks/sec, %d tx/sec, %d pre-filtered tx/sec, last %.2f kilobytes per sec", (:blocks-in-last-second this), (:txns-in-last-second this), (:orig-txns-in-last-second this), (/ (:bytes-in-last-second this) 1024.0))))
                                    )
                                )
                            )
                        )
                        (§ assoc this :blocks-in-last-second 0)
                        (§ assoc this :txns-in-last-second 0)
                        (§ assoc this :orig-txns-in-last-second 0)
                        (§ assoc this :bytes-in-last-second 0)
                    )
                )
            )
            nil
        )
    )
    #_nilable
    #_private
    (§ field- #_"ChainDownloadSpeedCalculator" :chain-download-speed-calculator)

    #_private
    (§ method- #_"void" startBlockChainDownloadFromPeer [#_"Peer" peer]
        (.. (:lock this) (lock))
        (try
            (.. this (setDownloadPeer peer))

            (when (nil? (:chain-download-speed-calculator this))
                ;; Every second, run the calculator which will log how fast we are downloading the chain.
                (§ assoc this :chain-download-speed-calculator (ChainDownloadSpeedCalculator.))
                (.. (:executor this) (scheduleAtFixedRate (:chain-download-speed-calculator this), 1, 1, TimeUnit/SECONDS))
            )
            (.. peer (addBlocksDownloadedEventListener Threading'SAME_THREAD, (:chain-download-speed-calculator this)))

            ;; startBlockChainDownload will setDownloadData(true) on itself automatically.
            (.. peer (startBlockChainDownload))
            (finally
                (.. (:lock this) (unlock))
            )
        )
        nil
    )

    ;;;
     ; Returns a future that is triggered when the number of connected peers is equal to the given number of peers.
     ; By using this with {@link PeerGroup#getMaxConnections()} you can wait until the network is fully online.
     ; To block immediately, just call get() on the result.  Just calls {@link #waitForPeersOfVersion(int, long)}
     ; with zero as the protocol version.
     ;
     ; @param numPeers How many peers to wait for.
     ; @return a future that will be triggered when the number of connected peers >= numPeers.
     ;;
    #_public
    (§ method #_"ListenableFuture<List<Peer>>" waitForPeers [#_"int" __numPeers]
        (.. this (waitForPeersOfVersion __numPeers, 0))
    )

    ;;;
     ; Returns a future that is triggered when there are at least the requested number of connected peers that support
     ; the given protocol version or higher.  To block immediately, just call get() on the result.
     ;
     ; @param numPeers How many peers to wait for.
     ; @param protocolVersion The protocol version the awaited peers must implement (or better).
     ; @return a future that will be triggered when the number of connected peers implementing protocolVersion or higher >= numPeers.
     ;;
    #_public
    (§ method #_"ListenableFuture<List<Peer>>" waitForPeersOfVersion [#_"int" __numPeers, #_"long" __protocolVersion]
        (let [#_"List<Peer>" __foundPeers (.. this (findPeersOfAtLeastVersion __protocolVersion))]
            (if (<= __numPeers (.. __foundPeers (size)))
                (Futures/immediateFuture __foundPeers)
                (let [#_"SettableFuture<List<Peer>>" future (SettableFuture/create)]
                    (.. this (addConnectedEventListener (PeerConnectedEventListener.)
                    (§ anon
                        #_override
                        #_public
                        (§ method #_"void" onPeerConnected [#_"Peer" peer, #_"int" __peerCount]
                            (let [#_"List<Peer>" peers (.. this (findPeersOfAtLeastVersion __protocolVersion))]
                                (when (<= __numPeers (.. peers (size)))
                                    (.. future (set peers))
                                    (.. this (removeConnectedEventListener this))
                                )
                            )
                            nil
                        )
                    )))
                    future
                )
            )
        )
    )

    ;;;
     ; Returns an array list of peers that implement the given protocol version or better.
     ;;
    #_public
    (§ method #_"List<Peer>" findPeersOfAtLeastVersion [#_"long" __protocolVersion]
        (.. (:lock this) (lock))
        (try
            (let [#_"ArrayList<Peer>" results (ArrayList. #_"<Peer>" (.. (:peers this) (size)))]
                (doseq [#_"Peer" peer (:peers this)]
                    (when (<= __protocolVersion (:client-version (.. peer (getPeerVersionMessage))))
                        (.. results (add peer))
                    )
                )
                results
            )
            (finally
                (.. (:lock this) (unlock))
            )
        )
    )

    ;;;
     ; Returns a future that is triggered when there are at least the requested number of connected peers that support
     ; the given protocol version or higher.  To block immediately, just call get() on the result.
     ;
     ; @param numPeers How many peers to wait for.
     ; @param mask An integer representing a bit mask that will be ANDed with the peers advertised service masks.
     ; @return a future that will be triggered when the number of connected peers implementing protocolVersion or higher >= numPeers.
     ;;
    #_public
    (§ method #_"ListenableFuture<List<Peer>>" waitForPeersWithServiceMask [#_"int" __numPeers, #_"int" mask]
        (.. (:lock this) (lock))
        (try
            (let [#_"List<Peer>" __foundPeers (.. this (findPeersWithServiceMask mask))]
                (if (<= __numPeers (.. __foundPeers (size)))
                    (Futures/immediateFuture __foundPeers)
                    (let [#_"SettableFuture<List<Peer>>" future (SettableFuture/create)]
                        (.. this (addConnectedEventListener (PeerConnectedEventListener.)
                        (§ anon
                            #_override
                            #_public
                            (§ method #_"void" onPeerConnected [#_"Peer" peer, #_"int" __peerCount]
                                (let [#_"List<Peer>" peers (.. this (findPeersWithServiceMask mask))]
                                    (when (<= __numPeers (.. peers (size)))
                                        (.. future (set peers))
                                        (.. this (removeConnectedEventListener this))
                                    )
                                )
                                nil
                            )
                        )))
                        future
                    )
                )
            )
            (finally
                (.. (:lock this) (unlock))
            )
        )
    )

    ;;;
     ; Returns an array list of peers that match the requested service bit mask.
     ;;
    #_public
    (§ method #_"List<Peer>" findPeersWithServiceMask [#_"int" mask]
        (.. (:lock this) (lock))
        (try
            (let [#_"ArrayList<Peer>" results (ArrayList. #_"<Peer>" (.. (:peers this) (size)))]
                (doseq [#_"Peer" peer (:peers this)]
                    (when (= (& (:local-services (.. peer (getPeerVersionMessage))) mask) mask)
                        (.. results (add peer))
                    )
                )
                results
            )
            (finally
                (.. (:lock this) (unlock))
            )
        )
    )

    ;;;
     ; Returns the number of connections that are required before transactions will be broadcast.  If there aren't
     ; enough, {@link PeerGroup#broadcastTransaction(Transaction)} will wait until the minimum number is reached so
     ; propagation across the network can be observed.  If no value has been set using
     ; {@link PeerGroup#setMinBroadcastConnections(int)} a default of 80% of whatever
     ; {@link PeerGroup#getMaxConnections()} returns is used.
     ;;
    #_public
    (§ method #_"int" getMinBroadcastConnections []
        (.. (:lock this) (lock))
        (try
            (if (= (:min-broadcast-connections this) 0)
                (let [#_"int" m (.. this (getMaxConnections))]
                    (if (<= m 1) m (int (Math/round (* m 0.8))))
                )
                (:min-broadcast-connections this)
            )
            (finally
                (.. (:lock this) (unlock))
            )
        )
    )

    ;;;
     ; See {@link PeerGroup#getMinBroadcastConnections()}.
     ;;
    #_public
    (§ method #_"void" setMinBroadcastConnections [#_"int" value]
        (.. (:lock this) (lock))
        (try
            (§ assoc this :min-broadcast-connections value)
            (finally
                (.. (:lock this) (unlock))
            )
        )
        nil
    )

    ;;;
     ; Calls {@link PeerGroup#broadcastTransaction(Transaction, int)} with getMinBroadcastConnections() as the number
     ; of connections to wait for before commencing broadcast.
     ;;
    #_override
    #_public
    (§ method #_"TransactionBroadcast" broadcastTransaction [#_"Transaction" tx]
        (.. this (broadcastTransaction tx, (max 1, (.. this (getMinBroadcastConnections)))))
    )

    ;;;
     ; Given a transaction, sends it un-announced to one peer and then waits for it to be received back from
     ; other peers.  Once all connected peers have announced the transaction, the future available via the
     ; {@link TransactionBroadcast#future()} method will be completed.  If anything goes wrong, the exception
     ; will be thrown when get() is called, or you can receive it via a callback on the {@link ListenableFuture}.
     ; This method returns immediately, so if you want it to block just call get() on the result.
     ;
     ; Note that if the PeerGroup is limited to only one connection (discovery is not activated) then the future
     ; will complete as soon as the transaction was successfully written to that peer.
     ;
     ; The transaction won't be sent until there are at least minConnections active connections available.
     ; A good choice for proportion would be between 0.5 and 0.8 but if you want faster transmission during initial
     ; bringup of the peer group you can lower it.
     ;
     ; The returned {@link TransactionBroadcast} object can be used to get progress feedback,
     ; which is calculated by watching the transaction propagate across the network and be announced by peers.
     ;;
    #_public
    (§ method #_"TransactionBroadcast" broadcastTransaction [#_"Transaction" tx, #_"int" __minConnections]
        ;; If we don't have a record of where this tx came from already, set it to be ourselves so Peer doesn't end up
        ;; redownloading it from the network redundantly.
        (when (.. tx (getConfidence) (getSource) (equals :ConfidenceSource'UNKNOWN))
            (.. PeerGroup'log (info "Transaction source unknown, setting to SELF: {}", (.. tx (getHashAsString))))
            (.. tx (getConfidence) (setSource :ConfidenceSource'SELF))
        )
        (let [#_"TransactionBroadcast" broadcast (TransactionBroadcast. this, tx)]
            (.. broadcast (setMinConnections __minConnections))
            ;; Send the TX to the wallet once we have a successful broadcast.
            (Futures/addCallback (.. broadcast (future)), (FutureCallback. #_"<Transaction>")
            (§ anon
                #_override
                #_public
                (§ method #_"void" onSuccess [#_"Transaction" transaction]
                    (.. (:running-broadcasts this) (remove broadcast))
                    ;; OK, now tell the wallet about the transaction.  If the wallet created the transaction,
                    ;; then it already knows and will ignore this.  If it's a transaction we received from
                    ;; somebody else via a side channel and are now broadcasting, this will put it into the
                    ;; wallet now we know it's valid.
                    (doseq [#_"Wallet" wallet (:wallets this)]
                        ;; Assumption here is there are no dependencies of the created transaction.
                        ;;
                        ;; We may end up with two threads trying to do this in parallel - the wallet will
                        ;; ignore whichever one loses the race.
                        (try
                            (.. wallet (receivePending transaction, nil))
                            (catch VerificationException e
                                (throw (RuntimeException. e)) ;; Cannot fail to verify a tx we created ourselves.
                            )
                        )
                    )
                    nil
                )

                #_override
                #_public
                (§ method #_"void" onFailure [#_"Throwable" throwable]
                    ;; This can happen if we get a reject message from a peer.
                    (.. (:running-broadcasts this) (remove broadcast))
                    nil
                )
            ))
            ;; Keep a reference to the TransactionBroadcast object.  This is important because otherwise, the entire tree
            ;; of objects we just created would become garbage if the user doesn't hold on to the returned future, and
            ;; eventually be collected.  This in turn could result in the transaction not being committed to the wallet
            ;; at all.
            (.. (:running-broadcasts this) (add broadcast))
            (.. broadcast (broadcast))
            broadcast
        )
    )

    ;;;
     ; Returns the period between pings for an individual peer.  Setting this lower means more accurate and timely
     ; ping times are available via {@link Peer#getLastPingTime()} but it increases load on the
     ; remote node.  It defaults to {@link PeerGroup#DEFAULT_PING_INTERVAL_MSEC}.
     ;;
    #_public
    (§ method #_"long" getPingIntervalMsec []
        (.. (:lock this) (lock))
        (try
            (:ping-interval-msec this)
            (finally
                (.. (:lock this) (unlock))
            )
        )
    )

    ;;;
     ; Sets the period between pings for an individual peer.  Setting this lower means more accurate and timely
     ; ping times are available via {@link Peer#getLastPingTime()} but it increases load on the
     ; remote node.  It defaults to {@link PeerGroup#DEFAULT_PING_INTERVAL_MSEC}.
     ; Setting the value to be <= 0 disables pinging entirely, although you can still request one yourself
     ; using {@link Peer#ping()}.
     ;;
    #_public
    (§ method #_"void" setPingIntervalMsec [#_"long" __pingIntervalMsec]
        (.. (:lock this) (lock))
        (try
            (§ assoc this :ping-interval-msec __pingIntervalMsec)
            (let [#_"ListenableScheduledFuture<?>" task (:v-ping-task this)]
                (when (some? task)
                    (.. task (cancel false))
                )
                (.. this (setupPinging))
            )
            (finally
                (.. (:lock this) (unlock))
            )
        )
        nil
    )

    ;;;
     ; If a peer is connected to that claims to speak a protocol version lower than the given version, it will
     ; be disconnected and another one will be tried instead.
     ;;
    #_public
    (§ method #_"void" setMinRequiredProtocolVersion [#_"int" __minRequiredProtocolVersion]
        (§ assoc this :v-min-required-protocol-version __minRequiredProtocolVersion)
        nil
    )

    ;;; The minimum protocol version required: defaults to the version required for Bloom filtering. ;;
    #_public
    (§ method #_"int" getMinRequiredProtocolVersion []
        (:v-min-required-protocol-version this)
    )

    ;;;
     ; Returns our peers most commonly reported chain height.  If multiple heights are tied, the highest is returned.
     ; If no peers are connected, returns zero.
     ;;
    #_public
    (§ method #_"int" getMostCommonChainHeight []
        (.. (:lock this) (lock))
        (try
            (PeerGroup'getMostCommonChainHeight (:peers this))
            (finally
                (.. (:lock this) (unlock))
            )
        )
    )

    ;;;
     ; Returns most commonly reported chain height from the given list of {@link Peer}s.
     ; If multiple heights are tied, the highest is returned.  If no peers are connected, returns zero.
     ;;
    #_public
    #_static
    (§ defn #_"int" PeerGroup'getMostCommonChainHeight [#_"List<Peer>" peers]
        (if (.. peers (isEmpty))
            0
            (let [#_"List<Integer>" heights (ArrayList. #_"<>" (.. peers (size)))]
                (doseq [#_"Peer" peer peers]
                    (.. heights (add (int (.. peer (getBestHeight)))))
                )
                (Utils'maxOfMostFreq heights)
            )
        )
    )

    ;;;
     ; Given a list of Peers, return a Peer to be used as the download peer.  If you don't want PeerGroup to manage
     ; download peer statuses for you, just override this and always return null.
     ;;
    #_nilable
    #_protected
    (§ method #_"Peer" selectDownloadPeer [#_"List<Peer>" peers]
        ;; Characteristics to select for in order of importance:
        ;;  - Chain height is reasonable (majority of nodes).
        ;;  - High enough protocol version for the features we want (but we'll settle for less).
        ;;  - Randomly, to try and spread the load.
        (when-not (.. peers (isEmpty))
            ;; Make sure we don't select a peer that is behind/synchronizing itself.
            (let [#_"int" __mostCommonChainHeight (PeerGroup'getMostCommonChainHeight peers) #_"List<Peer>" candidates (ArrayList. #_"<>")]
                (doseq [#_"Peer" peer peers]
                    (when (= (.. peer (getBestHeight)) __mostCommonChainHeight)
                        (.. candidates (add peer))
                    )
                )
                ;; Of the candidates, find the peers that meet the minimum protocol version we want to target.  We could select
                ;; the highest version we've seen on the assumption that newer versions are always better but we don't want to
                ;; zap peers if they upgrade early.  If we can't find any peers that have our preferred protocol version or
                ;; better then we'll settle for the highest we found instead.
                (let [#_"int" __highestVersion 0 #_"int" __preferredVersion 0]
                    (doseq [#_"Peer" peer candidates]
                        (§ ass __highestVersion (max (:client-version (.. peer (getPeerVersionMessage))), __highestVersion))
                        (§ ass __preferredVersion (min __highestVersion, ProtocolVersion'BLOOM_FILTER))
                    )
                    (let [#_"ArrayList<Peer>" candidates2 (ArrayList. #_"<>" (.. candidates (size)))]
                        (doseq [#_"Peer" peer candidates]
                            (when (<= __preferredVersion (:client-version (.. peer (getPeerVersionMessage))))
                                (.. candidates2 (add peer))
                            )
                        )
                        (let [#_"int" index (int (* (Math/random) (.. candidates2 (size))))]
                            (.. candidates2 (get index))
                        )
                    )
                )
            )
        )
    )

    ;;;
     ; Returns the currently selected download peer.  Bear in mind that it may have changed as soon
     ; as this method returns.  Can return null if no peer was selected.
     ;;
    #_public
    (§ method #_"Peer" getDownloadPeer []
        (.. (:lock this) (lock))
        (try
            (:download-peer this)
            (finally
                (.. (:lock this) (unlock))
            )
        )
    )

    ;;;
     ; Returns the maximum number of {@link Peer}s to discover.
     ; This maximum is checked after each {@link PeerDiscovery} so this max number can be surpassed.
     ;
     ; @return the maximum number of peers to discover.
     ;;
    #_public
    (§ method #_"int" getMaxPeersToDiscoverCount []
        (:v-max-peers-to-discover-count this)
    )

    ;;;
     ; Sets the maximum number of {@link Peer}s to discover.
     ; This maximum is checked after each {@link PeerDiscovery} so this max number can be surpassed.
     ;
     ; @param maxPeersToDiscoverCount the maximum number of peers to discover.
     ;;
    #_public
    (§ method #_"void" setMaxPeersToDiscoverCount [#_"int" __maxPeersToDiscoverCount]
        (§ assoc this :v-max-peers-to-discover-count __maxPeersToDiscoverCount)
        nil
    )

    ;;; See {@link #setUseLocalhostPeerWhenPossible(boolean)}. ;;
    #_public
    (§ method #_"boolean" getUseLocalhostPeerWhenPossible []
        (.. (:lock this) (lock))
        (try
            (:use-localhost-peer-when-possible this)
            (finally
                (.. (:lock this) (unlock))
            )
        )
    )

    ;;;
     ; When true (the default), PeerGroup will attempt to connect to a Bitcoin node running on localhost before
     ; attempting to use the P2P network.  If successful, only localhost will be used.  This makes for a simple
     ; and easy way for a user to upgrade a bitcoinj based app running in SPV mode to fully validating security.
     ;;
    #_public
    (§ method #_"void" setUseLocalhostPeerWhenPossible [#_"boolean" __useLocalhostPeerWhenPossible]
        (.. (:lock this) (lock))
        (try
            (§ assoc this :use-localhost-peer-when-possible __useLocalhostPeerWhenPossible)
            (finally
                (.. (:lock this) (unlock))
            )
        )
        nil
    )

    #_public
    (§ method #_"boolean" isRunning []
        (:v-running this)
    )

    ;;;
     ; Can be used to disable Bloom filtering entirely, even in SPV mode.  You are very unlikely to need this, it is
     ; an optimisation for rare cases when full validation is not required but it's still more efficient to download
     ; full blocks than filtered blocks.
     ;;
    #_public
    (§ method #_"void" setBloomFilteringEnabled [#_"boolean" __bloomFilteringEnabled]
        (§ assoc this :v-bloom-filtering-enabled __bloomFilteringEnabled)
        nil
    )

    ;;; Returns whether the Bloom filtering protocol optimisation is in use: defaults to true. ;;
    #_public
    (§ method #_"boolean" isBloomFilteringEnabled []
        (:v-bloom-filtering-enabled this)
    )
)

;;;
 ; Handles high-level message (de)serialization for peers, acting as the bridge between the
 ; {@link net} classes and {@link Peer}.
 ;;
#_public
#_abstract
(§ class PeerSocketHandler (§ extends AbstractTimeoutHandler) (§ implements StreamConnection)
    #_private
    #_static
    (def- #_"Logger" PeerSocketHandler'log (LoggerFactory/getLogger PeerSocketHandler))

    #_private
    (§ field- #_"BitcoinSerializer" :serializer)
    #_protected
    (§ field #_"PeerAddress" :peer-address)
    ;; If we close() before we know our writeTarget, set this to true to call writeTarget.closeConnection() right away.
    #_private
    (§ field- #_"boolean" :close-pending)
    ;; writeTarget will be thread-safe, and may call into PeerGroup, which calls us, so we should call it unlocked.
    #_testing
    #_protected
    (§ field #_"MessageWriteTarget" :write-target)

    ;; The ByteBuffers passed to us from the writeTarget are static in size, and usually smaller than some messages we
    ;; will receive.  For SPV clients, this should be rare (i.e. we're mostly dealing with small transactions), but for
    ;; messages which are larger than the read buffer, we have to keep a temporary buffer with its bytes.
    #_private
    (§ field- #_"byte[]" :large-read-buffer)
    #_private
    (§ field- #_"int" :large-read-buffer-pos)
    #_private
    (§ field- #_"BitcoinPacketHeader" :header)

    #_private
    (§ field- #_"Lock" :lock (Threading'lock "PeerSocketHandler"))

    #_public
    (§ constructor PeerSocketHandler [#_"NetworkParameters" params, #_"InetSocketAddress" __remoteIp]
        (ensure some? params)
        (§ assoc this :serializer (:default-serializer params))
        (§ assoc this :peer-address (PeerAddress. params, __remoteIp))
        this
    )

    #_public
    (§ constructor PeerSocketHandler [#_"NetworkParameters" params, #_"PeerAddress" __peerAddress]
        (ensure some? params)
        (§ assoc this :serializer (:default-serializer params))
        (§ assoc this :peer-address (ensure some? __peerAddress))
        this
    )

    ;;;
     ; Sends the given message to the peer.  Due to the asynchronousness of network programming, there is no guarantee
     ; the peer will have received it.  Throws NotYetConnectedException if we are not yet connected to the remote peer.
     ; TODO: Maybe use something other than the unchecked NotYetConnectedException here.
     ;;
    #_public
    #_throws #_[ "NotYetConnectedException" ]
    (§ method #_"void" sendMessage [#_"Message" message]
        (.. (:lock this) (lock))
        (try
            (when (nil? (:write-target this))
                (throw (NotYetConnectedException.))
            )
            (finally
                (.. (:lock this) (unlock))
            )
        )
        ;; TODO: Some round-tripping could be avoided here.
        (let [#_"ByteArrayOutputStream" baos (ByteArrayOutputStream.)]
            (.. (:serializer this) (serialize message, baos))
            (.. (:write-target this) (writeBytes (.. baos (toByteArray))))
        )
        nil
    )

    ;;;
     ; Closes the connection to the peer if one exists, or immediately closes the connection as soon as it opens.
     ;;
    #_public
    (§ method #_"void" close []
        (.. (:lock this) (lock))
        (try
            (when (nil? (:write-target this))
                (§ assoc this :close-pending true)
                (§ return nil)
            )
            (finally
                (.. (:lock this) (unlock))
            )
        )
        (.. (:write-target this) (closeConnection))
        nil
    )

    #_override
    #_protected
    (§ method #_"void" timeoutOccurred []
        (.. PeerSocketHandler'log (info "{}: Timed out", (.. this (getAddress))))
        (.. this (close))
        nil
    )

    ;;;
     ; Called every time a message is received from the network.
     ;;
    #_protected
    #_abstract
    #_throws #_[ "Exception" ]
    (§ method #_"void" processMessage [#_"Message" m])

    #_override
    #_public
    (§ method #_"int" receiveBytes [#_"ByteBuffer" buff]
        (assert-argument (and (= (.. buff (position)) 0) (<= (+ BitcoinPacketHeader'HEADER_LENGTH 4) (.. buff (capacity)))))
        (try
            ;; Repeatedly try to deserialize messages until we hit a BufferUnderflowException.
            (let [#_"boolean" __firstMessage true]
                (loop []
                    ;; If we are in the middle of reading a message, try to fill that one first, before we expect another.
                    (when (some? (:large-read-buffer this))
                        ;; This can only happen in the first iteration.
                        (assert-state __firstMessage)
                        ;; Read new bytes into the largeReadBuffer.
                        (let [#_"int" __bytesToGet (min (.. buff (remaining)), (- (alength (:large-read-buffer this)) (:large-read-buffer-pos this)))]
                            (.. buff (get (:large-read-buffer this), (:large-read-buffer-pos this), __bytesToGet))
                            (§ update this :large-read-buffer-pos + __bytesToGet)
                            ;; Check the largeReadBuffer's status.
                            (cond (= (:large-read-buffer-pos this) (alength (:large-read-buffer this)))
                                (do
                                    ;; ...processing a message if one is available.
                                    (.. this (processMessage (.. (:serializer this) (deserializePayload (:header this), (ByteBuffer/wrap (:large-read-buffer this))))))
                                    (§ assoc this :large-read-buffer nil)
                                    (§ assoc this :header nil)
                                    (§ ass __firstMessage false)
                                )
                                :else ;; ...or just returning if we don't have enough bytes yet.
                                (do
                                    (§ return (.. buff (position)))
                                )
                            )
                        )
                    )
                    ;; Now try to deserialize any messages left in buff.
                    (let [#_"Message" message
                          #_"int" __preSerializePosition (.. buff (position))]
                        (try
                            (§ ass message (.. (:serializer this) (deserialize buff)))
                            (catch BufferUnderflowException e
                                ;; If we went through the whole buffer without a full message, we need to use the largeReadBuffer.
                                (cond (and __firstMessage (= (.. buff (limit)) (.. buff (capacity))))
                                    (do
                                        ;; ...so reposition the buffer to 0 and read the next message header.
                                        (.. buff (position 0))
                                        (try
                                            (.. (:serializer this) (seekPastMagicBytes buff))
                                            (§ assoc this :header (.. (:serializer this) (deserializeHeader buff)))
                                            ;; Initialize the largeReadBuffer with the next message's size and fill it with any bytes left in buff.
                                            (§ assoc this :large-read-buffer (byte-array (-> this :header :size)))
                                            (§ assoc this :large-read-buffer-pos (.. buff (remaining)))
                                            (.. buff (get (:large-read-buffer this), 0, (:large-read-buffer-pos this)))
                                            (catch BufferUnderflowException e1
                                                ;; If we went through a whole buffer's worth of bytes without getting a header, give up.
                                                ;; In cases where the buff is just really small, we could create a second largeReadBuffer
                                                ;; that we use to deserialize the magic+header, but that is rather complicated when the buff
                                                ;; should probably be at least that big anyway (for efficiency).
                                                (throw (ProtocolException. (str "No magic bytes+header after reading " (.. buff (capacity)) " bytes")))
                                            )
                                        )
                                    )
                                    :else
                                    (do
                                        ;; Reposition the buffer to its original position, which saves us from skipping messages by
                                        ;; seeking past part of the magic bytes before all of them are in the buffer.
                                        (.. buff (position __preSerializePosition))
                                    )
                                )
                                (§ return (.. buff (position)))
                            )
                        )
                        ;; Process our freshly deserialized message.
                        (.. this (processMessage message))
                        (§ ass __firstMessage false)
                    )
                )
            )
            (catch Exception e
                (.. this (exceptionCaught e))
                ;; Returning -1 also throws an IllegalStateException upstream and kills the connection.
                -1
            )
        )
    )

    ;;;
     ; Sets the {@link MessageWriteTarget} used to write messages to the peer.  This should almost never be called,
     ; it is called automatically by {@link NioClient} or {@link NioClientManager} once the socket finishes initialization.
     ;;
    #_override
    #_public
    (§ method #_"void" setWriteTarget [#_"MessageWriteTarget" __writeTarget]
        (assert-argument (some? __writeTarget))

        (.. (:lock this) (lock))
        (let [#_"boolean" __closeNow false]
            (try
                (assert-argument (nil? (:write-target this)))

                (§ ass __closeNow (:close-pending this))
                (§ assoc this :write-target __writeTarget)
                (finally
                    (.. (:lock this) (unlock))
                )
            )
            (when __closeNow
                (.. __writeTarget (closeConnection))
            )
        )
        nil
    )

    #_override
    #_public
    (§ method #_"int" getMaxMessageSize []
        Message'MAX_SIZE
    )

    ;;;
     ; @return the IP address and port of peer.
     ;;
    #_public
    (§ method #_"PeerAddress" getAddress []
        (:peer-address this)
    )

    ;;; Catch any exceptions, logging them and then closing the channel. ;;
    #_private
    (§ method- #_"void" exceptionCaught [#_"Exception" e]
        (let [#_"PeerAddress" addr (.. this (getAddress))
              #_"String" s (if (some? addr) (.. addr (toString)) "?")]
            (cond (or (instance? ConnectException e) (instance? IOException e))
                (do
                    ;; Short message for network errors
                    (.. PeerSocketHandler'log (info (str s " - " (.. e (getMessage)))))
                )
                :else
                (do
                    (.. PeerSocketHandler'log (warn (str s " - "), e))
                    (let [#_"Thread.UncaughtExceptionHandler" handler Threading'UNCAUGHT_EXCEPTION_HANDLER]
                        (when (some? handler)
                            (.. handler (uncaughtException (Thread/currentThread), e))
                        )
                    )
                )
            )

            (.. this (close))
        )
        nil
    )
)

;;;
 ; Instances of this class are not safe for use by multiple threads.
 ;;
#_public
(§ class Ping (§ extends Message)
    #_private
    (§ field- #_"long" :nonce)
    #_private
    (§ field- #_"boolean" :has-nonce)

    #_public
    #_throws #_[ "ProtocolException" ]
    (§ constructor Ping [#_"NetworkParameters" params, #_"byte[]" payload]
        (§ super params, payload, 0)
        this
    )

    ;;;
     ; Create a Ping with a nonce value.
     ; Only use this if the remote node has a protocol version > 60000.
     ;;
    #_public
    (§ constructor Ping [#_"long" nonce]
        (§ assoc this :nonce nonce)
        (§ assoc this :has-nonce true)
        this
    )

    ;;;
     ; Create a Ping without a nonce value.
     ; Only use this if the remote node has a protocol version <= 60000.
     ;;
    #_public
    (§ constructor Ping []
        (§ assoc this :has-nonce false)
        this
    )

    #_override
    #_public
    (§ method #_"void" bitcoinSerializeToStream [#_"ByteArrayOutputStream" baos]
        (when (:has-nonce this)
            (Utils'int64ToByteStreamLE (:nonce this), baos)
        )
        nil
    )

    #_override
    #_protected
    #_throws #_[ "ProtocolException" ]
    (§ method #_"void" parse []
        (try
            (§ assoc this :nonce (.. this (readInt64)))
            (§ assoc this :has-nonce true)
            (catch ProtocolException e
                (§ assoc this :has-nonce false)
            )
        )
        (§ assoc this :length (if (:has-nonce this) 8 0))
        nil
    )

    #_public
    (§ method #_"boolean" hasNonce []
        (:has-nonce this)
    )

    #_public
    (§ method #_"long" getNonce []
        (:nonce this)
    )
)

;;;
 ; Instances of this class are not safe for use by multiple threads.
 ;;
#_public
(§ class Pong (§ extends Message)
    #_private
    (§ field- #_"long" :nonce)

    #_public
    #_throws #_[ "ProtocolException" ]
    (§ constructor Pong [#_"NetworkParameters" params, #_"byte[]" payload]
        (§ super params, payload, 0)
        this
    )

    ;;;
     ; Create a Pong with a nonce value.
     ; Only use this if the remote node has a protocol version > 60000.
     ;;
    #_public
    (§ constructor Pong [#_"long" nonce]
        (§ assoc this :nonce nonce)
        this
    )

    #_override
    #_protected
    #_throws #_[ "ProtocolException" ]
    (§ method #_"void" parse []
        (§ assoc this :nonce (.. this (readInt64)))
        (§ assoc this :length 8)
        nil
    )

    #_override
    #_public
    (§ method #_"void" bitcoinSerializeToStream [#_"ByteArrayOutputStream" baos]
        (Utils'int64ToByteStreamLE (:nonce this), baos)
        nil
    )

    ;;; Returns the nonce sent by the remote peer. ;;
    #_public
    (§ method #_"long" getNonce []
        (:nonce this)
    )
)

#_public
(§ class ProtocolException (§ extends VerificationException)
    #_public
    (§ constructor ProtocolException [#_"String" msg]
        (§ super msg)
        this
    )

    #_public
    (§ constructor ProtocolException [#_"Exception" e]
        (§ super e)
        this
    )

    #_public
    (§ constructor ProtocolException [#_"String" msg, #_"Exception" e]
        (§ super msg, e)
        this
    )
)

;; TODO: Rename PrunedException to something like RequiredDataWasPrunedException.

;;;
 ; PrunedException is thrown in cases where a fully verifying node has deleted (pruned) old block data that turned
 ; out to be necessary for handling a re-org.  Normally this should never happen unless you're playing with the testnet
 ; as the pruning parameters should be set very conservatively, such that an absolutely enormous re-org would be
 ; required to trigger it.
 ;;
#_public
(§ class PrunedException (§ extends Exception)
    #_private
    (§ field- #_"Sha256Hash" :hash)

    #_public
    (§ constructor PrunedException [#_"Sha256Hash" hash]
        (§ super (.. hash (toString)))

        (§ assoc this :hash hash)
        this
    )

    #_public
    (§ method #_"Sha256Hash" getHash []
        (:hash this)
    )
)

#_public
(§ enum RejectCode
    ;;; The message was not able to be parsed. ;;
    (§ item RejectCode'MALFORMED       (byte 0x01))
    ;;; The message described an invalid object. ;;
    (§ item RejectCode'INVALID         (byte 0x10))
    ;;; The message was obsolete or described an object which is obsolete (e.g. unsupported, old version, v1 block). ;;
    (§ item RejectCode'OBSOLETE        (byte 0x11))
    ;;;
     ; The message was relayed multiple times or described an object which is in conflict with another.
     ; This message can describe errors in protocol implementation or the presence of an attempt to DOUBLE SPEND.
     ;;
    (§ item RejectCode'DUPLICATE       (byte 0x12))
    ;;;
     ; The message described an object was not standard and was thus not accepted.
     ; Bitcoin Core has a concept of standard transaction forms, which describe scripts and encodings which
     ; it is willing to relay further.  Other transactions are neither relayed nor mined, though they are considered
     ; valid if they appear in a block.
     ;;
    (§ item RejectCode'NONSTANDARD     (byte 0x40))
    ;;;
     ; This refers to a specific form of NONSTANDARD transactions, which have an output smaller than some constant
     ; defining them as dust (this is no longer used).
     ;;
    (§ item RejectCode'DUST            (byte 0x41))
    ;;; The messages described an object which did not have sufficient fee to be relayed further. ;;
    (§ item RejectCode'INSUFFICIENTFEE (byte 0x42))
    ;;; The message described a block which was invalid according to hard-coded checkpoint blocks. ;;
    (§ item RejectCode'CHECKPOINT      (byte 0x43))
    (§ item RejectCode'OTHER           (byte 0xff))

    (§ field #_"byte" :code)

    (§ constructor RejectCode [#_"byte" code]
        (§ assoc this :code code)
        this
    )

    #_static
    (§ defn #_"RejectCode" RejectCode'fromCode [#_"byte" code]
        (doseq [#_"RejectCode" rc (RejectCode'values)]
            (when (= (:code rc) code)
                (§ return rc)
            )
        )

        RejectCode'OTHER
    )
)

;;;
 ; A message sent by nodes when a message we sent was rejected (i.e. a transaction had too little fee/was invalid/etc).
 ;
 ; Instances of this class are not safe for use by multiple threads.
 ;;
#_public
(§ class RejectMessage (§ extends Message)
    #_private
    (§ field- #_"String" :message)
    #_private
    (§ field- #_"String" :reason)

    #_private
    (§ field- #_"RejectCode" :code)
    #_private
    (§ field- #_"Sha256Hash" :message-hash)

    #_public
    #_throws #_[ "ProtocolException" ]
    (§ constructor RejectMessage [#_"NetworkParameters" params, #_"byte[]" payload]
        (§ super params, payload, 0)
        this
    )

    ;;; Constructs a reject message that fingers the object with the given hash as rejected for the given reason. ;;
    #_public
    #_throws #_[ "ProtocolException" ]
    (§ constructor RejectMessage [#_"NetworkParameters" params, #_"RejectCode" code, #_"Sha256Hash" hash, #_"String" message, #_"String" reason]
        (§ super params)

        (§ assoc this :code code)
        (§ assoc this :message-hash hash)
        (§ assoc this :message message)
        (§ assoc this :reason reason)
        this
    )

    #_override
    #_protected
    #_throws #_[ "ProtocolException" ]
    (§ method #_"void" parse []
        (§ assoc this :message (.. this (readStr)))
        (§ assoc this :code (RejectCode'fromCode (aget (.. this (readBytes 1)) 0)))
        (§ assoc this :reason (.. this (readStr)))
        (when (or (.. (:message this) (equals "block")) (.. (:message this) (equals "tx")))
            (§ assoc this :message-hash (.. this (readHash)))
        )
        (§ assoc this :length (- (:cursor this) (:offset this)))
        nil
    )

    #_override
    #_public
    (§ method #_"void" bitcoinSerializeToStream [#_"ByteArrayOutputStream" baos]
        (let [#_"byte[]" __messageBytes (.. (:message this) (getBytes "UTF-8"))]
            (.. baos (write (.. (VarInt. (alength __messageBytes)) (encode))))
            (.. baos (write __messageBytes))
            (.. baos (write (-> this :code :code)))
            (let [#_"byte[]" __reasonBytes (.. (:reason this) (getBytes "UTF-8"))]
                (.. baos (write (.. (VarInt. (alength __reasonBytes)) (encode))))
                (.. baos (write __reasonBytes))
                (when (or (.. "block" (equals (:message this))) (.. "tx" (equals (:message this))))
                    (.. baos (write (.. (:message-hash this) (getReversedBytes))))
                )
            )
        )
        nil
    )

    ;;;
     ; Provides the type of message which was rejected by the peer.
     ; Note that this is ENTIRELY UNTRUSTED and should be sanity-checked before it is printed or processed.
     ;;
    #_public
    (§ method #_"String" getRejectedMessage []
        (:message this)
    )

    ;;;
     ; Provides the hash of the rejected object (if getRejectedMessage() is either "tx" or "block"), otherwise null.
     ;;
    #_public
    (§ method #_"Sha256Hash" getRejectedObjectHash []
        (:message-hash this)
    )

    ;;;
     ; The reason code given for why the peer rejected the message.
     ;;
    #_public
    (§ method #_"RejectCode" getReasonCode []
        (:code this)
    )

    ;;;
     ; The reason message given for rejection.
     ; Note that this is ENTIRELY UNTRUSTED and should be sanity-checked before it is printed or processed.
     ;;
    #_public
    (§ method #_"String" getReasonString []
        (:reason this)
    )

    ;;;
     ; A String representation of the relevant details of this reject message.
     ; Be aware that the value returned by this method includes the value returned by
     ; {@link #getReasonString() getReasonString}, which is taken from the reject message unchecked.
     ; Through malice or otherwise, it might contain control characters or other harmful content.
     ;;
    #_override
    #_public
    (§ method #_"String" toString []
        (let [#_"Sha256Hash" hash (.. this (getRejectedObjectHash))]
            (String/format Locale/US, "Reject: %s %s for reason '%s' (%d)", (.. this (getRejectedMessage)), (or hash ""), (.. this (getReasonString)), (:code (.. this (getReasonCode))))
        )
    )

    #_override
    #_public
    (§ method #_"boolean" equals [#_"Object" o]
        (cond
            (= this o) true
            (or (nil? o) (not= (getClass) (.. o (getClass)))) false
            :else (let [#_"RejectMessage" other (cast RejectMessage o)]
                (and (.. (:message this) (equals (:message other))) (.. (:code this) (equals (:code other))) (.. (:reason this) (equals (:reason other))) (.. (:message-hash this) (equals (:message-hash other))))
            )
        )
    )

    #_override
    #_public
    (§ method #_"int" hashCode []
        (Objects/hashCode (:message this), (:code this), (:reason this), (:message-hash this))
    )
)

;;;
 ; This exception is used by the TransactionBroadcast class to indicate that a broadcast
 ; Transaction has been rejected by the network, for example because it violates a
 ; protocol rule.  Note that not all invalid transactions generate a reject message, and
 ; some peers may never do so.
 ;;
#_public
(§ class RejectedTransactionException (§ extends Exception)
    #_private
    (§ field- #_"Transaction" :tx)
    #_private
    (§ field- #_"RejectMessage" :reject-message)

    #_public
    (§ constructor RejectedTransactionException [#_"Transaction" tx, #_"RejectMessage" __rejectMessage]
        (§ super (.. __rejectMessage (toString)))

        (§ assoc this :tx tx)
        (§ assoc this :reject-message __rejectMessage)
        this
    )

    ;;; Return the original Transaction object whose broadcast was rejected. ;;
    #_public
    (§ method #_"Transaction" getTransaction []
        (:tx this)
    )

    ;;; Return the RejectMessage object representing the broadcast rejection. ;;
    #_public
    (§ method #_"RejectMessage" getRejectMessage []
        (:reject-message this)
    )
)

#_public
(§ class ScriptException (§ extends VerificationException)
    #_private
    (§ field- #_"ScriptError" :err)

    #_public
    (§ constructor ScriptException [#_"ScriptError" err, #_"String" msg]
        (§ super msg)
        (§ assoc this :err err)
        this
    )

    #_public
    (§ constructor ScriptException [#_"ScriptError" err, #_"String" msg, #_"Exception" e]
        (§ super msg, e)
        (§ assoc this :err err)
        this
    )

    #_public
    (§ method #_"ScriptError" getError []
        (:err this)
    )
)

;;;
 ; A Sha256Hash just wraps a byte[] so that equals and hashcode work correctly,
 ; allowing it to be used as keys in a map.
 ; It also checks that the length is correct and provides a bit more type safety.
 ;;
#_public
(§ class Sha256Hash (§ implements Comparable #_"<Sha256Hash>")
    #_public
    #_static
    (def #_"int" Sha256Hash'LENGTH 32) ;; bytes
    #_public
    #_static
    (def #_"Sha256Hash" Sha256Hash'ZERO_HASH (Sha256Hash'wrap (byte-array Sha256Hash'LENGTH)))

    #_private
    (§ field- #_"byte[]" :bytes)

    ;;;
     ; Use {@link #wrap(byte[])} instead.
     ;;
    #_protected
    (§ constructor Sha256Hash [#_"byte[]" __rawHashBytes]
        (assert-argument (= (alength __rawHashBytes) Sha256Hash'LENGTH))
        (§ assoc this :bytes __rawHashBytes)
        this
    )

    ;;;
     ; Creates a new instance that wraps the given hash value.
     ;
     ; @param rawHashBytes The raw hash bytes to wrap.
     ; @return a new instance.
     ; @throws IllegalArgumentException if the given array length is not exactly 32.
     ;;
    #_public
    #_static
    (§ defn #_"Sha256Hash" Sha256Hash'wrap [#_"byte[]" __rawHashBytes]
        (Sha256Hash. __rawHashBytes)
    )

    ;;;
     ; Creates a new instance that wraps the given hash value (represented as a hex string).
     ;
     ; @param hexString A hash value represented as a hex string.
     ; @return a new instance.
     ; @throws IllegalArgumentException if the given string is not a valid hex string, or if it does not represent exactly 32 bytes.
     ;;
    #_public
    #_static
    (§ defn #_"Sha256Hash" Sha256Hash'wrap [#_"String" __hexString]
        (Sha256Hash'wrap (.. Utils'HEX (decode __hexString)))
    )

    ;;;
     ; Creates a new instance that wraps the given hash value, but with byte order reversed.
     ;
     ; @param rawHashBytes The raw hash bytes to wrap.
     ; @return a new instance.
     ; @throws IllegalArgumentException if the given array length is not exactly 32.
     ;;
    #_public
    #_static
    (§ defn #_"Sha256Hash" Sha256Hash'wrapReversed [#_"byte[]" __rawHashBytes]
        (Sha256Hash'wrap (Utils'reverseBytes __rawHashBytes))
    )

    ;;;
     ; Creates a new instance containing the calculated (one-time) hash of the given bytes.
     ;
     ; @param contents The bytes on which the hash value is calculated.
     ; @return a new instance containing the calculated (one-time) hash.
     ;;
    #_public
    #_static
    (§ defn #_"Sha256Hash" Sha256Hash'of [#_"byte[]" contents]
        (Sha256Hash'wrap (Sha256Hash'hash contents))
    )

    ;;;
     ; Creates a new instance containing the hash of the calculated hash of the given bytes.
     ;
     ; @param contents The bytes on which the hash value is calculated.
     ; @return a new instance containing the calculated (two-time) hash.
     ;;
    #_public
    #_static
    (§ defn #_"Sha256Hash" Sha256Hash'twiceOf [#_"byte[]" contents]
        (Sha256Hash'wrap (Sha256Hash'hashTwice contents))
    )

    ;;;
     ; Returns a new SHA-256 MessageDigest instance.
     ;
     ; This is a convenience method which wraps the checked
     ; exception that can never occur with a RuntimeException.
     ;
     ; @return a new SHA-256 MessageDigest instance.
     ;;
    #_public
    #_static
    (§ defn #_"MessageDigest" Sha256Hash'newDigest []
        (try
            (MessageDigest/getInstance "SHA-256")
            (catch NoSuchAlgorithmException e
                (throw (RuntimeException. e)) ;; Can't happen.
            )
        )
    )

    ;;;
     ; Calculates the SHA-256 hash of the given bytes.
     ;
     ; @param input The bytes to hash.
     ; @return the hash (in big-endian order).
     ;;
    #_public
    #_static
    (§ defn #_"byte[]" Sha256Hash'hash [#_"byte[]" input]
        (Sha256Hash'hash input, 0, (alength input))
    )

    ;;;
     ; Calculates the SHA-256 hash of the given byte range.
     ;
     ; @param input The array containing the bytes to hash.
     ; @param offset The offset within the array of the bytes to hash.
     ; @param length The number of bytes to hash.
     ; @return the hash (in big-endian order).
     ;;
    #_public
    #_static
    (§ defn #_"byte[]" Sha256Hash'hash [#_"byte[]" input, #_"int" offset, #_"int" length]
        (let [#_"MessageDigest" digest (Sha256Hash'newDigest)]
            (.. digest (update input, offset, length))
            (.. digest (digest))
        )
    )

    ;;;
     ; Calculates the SHA-256 hash of the given bytes,
     ; and then hashes the resulting hash again.
     ;
     ; @param input The bytes to hash.
     ; @return the double-hash (in big-endian order).
     ;;
    #_public
    #_static
    (§ defn #_"byte[]" Sha256Hash'hashTwice [#_"byte[]" input]
        (Sha256Hash'hashTwice input, 0, (alength input))
    )

    ;;;
     ; Calculates the SHA-256 hash of the given byte range,
     ; and then hashes the resulting hash again.
     ;
     ; @param input The array containing the bytes to hash.
     ; @param offset The offset within the array of the bytes to hash.
     ; @param length The number of bytes to hash.
     ; @return the double-hash (in big-endian order).
     ;;
    #_public
    #_static
    (§ defn #_"byte[]" Sha256Hash'hashTwice [#_"byte[]" input, #_"int" offset, #_"int" length]
        (let [#_"MessageDigest" digest (Sha256Hash'newDigest)]
            (.. digest (update input, offset, length))
            (.. digest (digest (.. digest (digest))))
        )
    )

    ;;;
     ; Calculates the hash of hash on the given byte ranges.  This is equivalent to
     ; concatenating the two ranges and then passing the result to {@link #hashTwice(byte[])}.
     ;;
    #_public
    #_static
    (§ defn #_"byte[]" Sha256Hash'hashTwice [#_"byte[]" input1, #_"int" offset1, #_"int" length1, #_"byte[]" input2, #_"int" offset2, #_"int" length2]
        (let [#_"MessageDigest" digest (Sha256Hash'newDigest)]
            (.. digest (update input1, offset1, length1))
            (.. digest (update input2, offset2, length2))
            (.. digest (digest (.. digest (digest))))
        )
    )

    #_override
    #_public
    (§ method #_"boolean" equals [#_"Object" o]
        (cond
            (= this o) true
            (or (nil? o) (not= (getClass) (.. o (getClass)))) false
            :else (Arrays/equals (:bytes this), (:bytes (cast Sha256Hash o)))
        )
    )

    ;;;
     ; Returns the last four bytes of the wrapped hash.  This should be unique enough to be a suitable hash code
     ; even for blocks, where the goal is to try and get the first bytes to be zeros (i.e. the value as a big integer
     ; lower than the target value).
     ;;
    #_override
    #_public
    (§ method #_"int" hashCode []
        ;; Use the last 4 bytes, not the first 4 which are often zeros in Bitcoin.
        (Ints/fromBytes (aget (:bytes this) (- Sha256Hash'LENGTH 4)), (aget (:bytes this) (- Sha256Hash'LENGTH 3)), (aget (:bytes this) (- Sha256Hash'LENGTH 2)), (aget (:bytes this) (dec Sha256Hash'LENGTH)))
    )

    #_override
    #_public
    (§ method #_"String" toString []
        (.. Utils'HEX (encode (:bytes this)))
    )

    ;;;
     ; Returns the bytes interpreted as a positive integer.
     ;;
    #_public
    (§ method #_"BigInteger" toBigInteger []
        (BigInteger. 1, (:bytes this))
    )

    ;;;
     ; Returns the internal byte array, without defensively copying.  Therefore do NOT modify the returned array.
     ;;
    #_public
    (§ method #_"byte[]" getBytes []
        (:bytes this)
    )

    ;;;
     ; Returns a reversed copy of the internal byte array.
     ;;
    #_public
    (§ method #_"byte[]" getReversedBytes []
        (Utils'reverseBytes (:bytes this))
    )

    #_override
    #_public
    (§ method #_"int" compareTo [#_"Sha256Hash" other]
        (loop-when-recur [#_"int" i (dec Sha256Hash'LENGTH)] (<= 0 i) [(dec i)]
            (let [#_"int" __thisByte (& 0xff (aget (:bytes this) i))
                  #_"int" __otherByte (& 0xff (aget (:bytes other) i))]
                (when (> __thisByte __otherByte)
                    (§ return 1)
                )
                (when (< __thisByte __otherByte)
                    (§ return -1)
                )
            )
        )
        0
    )
)

;;;
 ; Wraps a {@link Block} object with extra data that can be derived from the block chain but is slow or inconvenient
 ; to calculate.  By storing it alongside the block header we reduce the amount of work required significantly.
 ; Recalculation is slow because the fields are cumulative - to find the chainWork you have to iterate over every
 ; block in the chain back to the genesis block, which involves lots of seeking/loading etc.  So we just keep a
 ; running total: it's a disk space vs cpu/io tradeoff.
 ;
 ; StoredBlocks are put inside a {@link BlockStore} which saves them to memory or disk.
 ;;
#_public
(§ class StoredBlock
    ;; A BigInteger representing the total amount of work done so far on this chain.  As of May 2011 it takes
    ;; 8 bytes to represent this field, so 12 bytes should be plenty for now.
    #_public
    #_static
    (def #_"int" StoredBlock'CHAIN_WORK_BYTES 12)
    #_public
    #_static
    (def #_"byte[]" StoredBlock'EMPTY_BYTES (byte-array StoredBlock'CHAIN_WORK_BYTES))
    #_public
    #_static
    (def #_"int" StoredBlock'COMPACT_SERIALIZED_SIZE (+ Block'HEADER_SIZE StoredBlock'CHAIN_WORK_BYTES 4)) ;; for height

    #_private
    (§ field- #_"Block" :header)
    #_private
    (§ field- #_"BigInteger" :chain-work)
    #_private
    (§ field- #_"int" :height)

    #_public
    (§ constructor StoredBlock [#_"Block" header, #_"BigInteger" __chainWork, #_"int" height]
        (§ assoc this :header header)
        (§ assoc this :chain-work __chainWork)
        (§ assoc this :height height)
        this
    )

    ;;;
     ; The block header this object wraps.  The referenced block object must not have any transactions in it.
     ;;
    #_public
    (§ method #_"Block" getHeader []
        (:header this)
    )

    ;;;
     ; The total sum of work done in this block, and all the blocks below it in the chain.  Work is a measure of
     ; how many tries are needed to solve a block.  If the target is set to cover 10% of the total hash value space,
     ; then the work represented by a block is 10.
     ;;
    #_public
    (§ method #_"BigInteger" getChainWork []
        (:chain-work this)
    )

    ;;;
     ; Position in the chain for this block.  The genesis block has a height of zero.
     ;;
    #_public
    (§ method #_"int" getHeight []
        (:height this)
    )

    ;;; Returns true if this objects chainWork is higher than the others. ;;
    #_public
    (§ method #_"boolean" moreWorkThan [#_"StoredBlock" other]
        (< 0 (.. (:chain-work this) (compareTo (:chain-work other))))
    )

    #_override
    #_public
    (§ method #_"boolean" equals [#_"Object" o]
        (cond
            (= this o) true
            (or (nil? o) (not= (getClass) (.. o (getClass)))) false
            :else (let [#_"StoredBlock" other (cast StoredBlock o)]
                (and (.. (:header this) (equals (:header other))) (.. (:chain-work this) (equals (:chain-work other))) (= (:height this) (:height other)))
            )
        )
    )

    #_override
    #_public
    (§ method #_"int" hashCode []
        (Objects/hashCode (:header this), (:chain-work this), (:height this))
    )

    ;;;
     ; Creates a new StoredBlock, calculating the additional fields by adding to the values in this block.
     ;;
    #_public
    #_throws #_[ "VerificationException" ]
    (§ method #_"StoredBlock" build [#_"Block" block]
        ;; Stored blocks track total work done in this chain, because the canonical chain is the one that represents
        ;; the largest amount of work done not the tallest.
        (let [#_"BigInteger" __chainWork (.. (:chain-work this) (add (.. block (getWork))))
              #_"int" height (inc (:height this))]
            (StoredBlock. block, __chainWork, height)
        )
    )

    ;;;
     ; Given a block store, looks up the previous block in this chain.  Convenience method for doing
     ; <tt>store.get(this.getHeader().getPrevBlockHash())</tt>.
     ;
     ; @return the previous block in the chain or null if it was not found in the store.
     ;;
    #_public
    #_throws #_[ "BlockStoreException" ]
    (§ method #_"StoredBlock" getPrev [#_"BlockStore" store]
        (.. store (get (.. this (getHeader) (getPrevBlockHash))))
    )

    ;;; Serializes the stored block to a custom packed format.  Used by {@link CheckpointManager}. ;;
    #_public
    (§ method #_"void" serializeCompact [#_"ByteBuffer" buffer]
        (let [#_"byte[]" __chainWorkBytes (.. this (getChainWork) (toByteArray))]
            (assert-state (<= (alength __chainWorkBytes) StoredBlock'CHAIN_WORK_BYTES), "Ran out of space to store chain work!")
            (when (< (alength __chainWorkBytes) StoredBlock'CHAIN_WORK_BYTES)
                ;; Pad to the right size.
                (.. buffer (put StoredBlock'EMPTY_BYTES, 0, (- StoredBlock'CHAIN_WORK_BYTES (alength __chainWorkBytes))))
            )
            (.. buffer (put __chainWorkBytes))
            (.. buffer (putInt (.. this (getHeight))))
            ;; Using unsafeBitcoinSerialize here can give us direct access to the same bytes we read off the wire,
            ;; avoiding serialization round-trips.
            (let [#_"byte[]" bytes (.. this (getHeader) (unsafeBitcoinSerialize))]
                (.. buffer (put bytes, 0, Block'HEADER_SIZE)) ;; Trim the trailing 00 byte (zero transactions).
            )
        )
        nil
    )

    ;;; De-serializes the stored block from a custom packed format.  Used by {@link CheckpointManager}. ;;
    #_public
    #_static
    #_throws #_[ "ProtocolException" ]
    (§ defn #_"StoredBlock" StoredBlock'deserializeCompact [#_"NetworkParameters" params, #_"ByteBuffer" buffer]
        (let [#_"byte[]" __chainWorkBytes (byte-array StoredBlock'CHAIN_WORK_BYTES)]
            (.. buffer (get __chainWorkBytes))
            (let [#_"BigInteger" __chainWork (BigInteger. 1, __chainWorkBytes)
                  #_"int" height (.. buffer (getInt))] ;; +4 bytes
                (let [#_"byte[]" header (byte-array (inc Block'HEADER_SIZE))] ;; Extra byte for the 00 transactions length.
                    (.. buffer (get header, 0, Block'HEADER_SIZE))
                    (StoredBlock. (.. (:default-serializer params) (makeBlock header)), __chainWork, height)
                )
            )
        )
    )

    #_override
    #_public
    (§ method #_"String" toString []
        (String/format Locale/US, "Block %s at height %d: %s", (.. this (getHeader) (getHashAsString)), (.. this (getHeight)), (.. this (getHeader) (toString)))
    )
)

;;;
 ; Contains minimal data neccessary to disconnect/connect the transactions
 ; in the stored block at will.  Can either store the full set of
 ; transactions (if the inputs for the block have not been tested to work)
 ; or the set of transaction outputs created/destroyed when the block is
 ; connected.
 ;;
#_public
(§ class StoredUndoableBlock
    (§ field #_"Sha256Hash" :block-hash)

    ;; Only one of either txOutChanges or transactions will be set.
    #_private
    (§ field- #_"TransactionOutputChanges" :tx-out-changes)
    #_private
    (§ field- #_"List<Transaction>" :transactions)

    #_public
    (§ constructor StoredUndoableBlock [#_"Sha256Hash" hash, #_"TransactionOutputChanges" __txOutChanges]
        (§ assoc this :block-hash hash)
        (§ assoc this :transactions nil)
        (§ assoc this :tx-out-changes __txOutChanges)
        this
    )

    #_public
    (§ constructor StoredUndoableBlock [#_"Sha256Hash" hash, #_"List<Transaction>" transactions]
        (§ assoc this :block-hash hash)
        (§ assoc this :tx-out-changes nil)
        (§ assoc this :transactions transactions)
        this
    )

    ;;;
     ; Get the transaction output changes if they have been calculated, otherwise null.
     ; Only one of this and getTransactions() will return a non-null value.
     ;;
    #_public
    (§ method #_"TransactionOutputChanges" getTxOutChanges []
        (:tx-out-changes this)
    )

    ;;;
     ; Get the full list of transactions if it is stored, otherwise null.
     ; Only one of this and getTxOutChanges() will return a non-null value.
     ;;
    #_public
    (§ method #_"List<Transaction>" getTransactions []
        (:transactions this)
    )

    ;;;
     ; Get the hash of the represented block.
     ;;
    #_public
    (§ method #_"Sha256Hash" getHash []
        (:block-hash this)
    )

    #_override
    #_public
    (§ method #_"int" hashCode []
        (.. (:block-hash this) (hashCode))
    )

    #_override
    #_public
    (§ method #_"boolean" equals [#_"Object" o]
        (cond
            (= this o) true
            (or (nil? o) (not= (getClass) (.. o (getClass)))) false
            :else (.. this (getHash) (equals (.. (cast StoredUndoableBlock o) (getHash))))
        )
    )

    #_override
    #_public
    (§ method #_"String" toString []
        (str "Undoable Block " (:block-hash this))
    )
)

;;;
 ; A transaction represents the movement of coins from some addresses to some other addresses.  It can also represent
 ; the minting of new coins.  A Transaction object corresponds to the equivalent in the Bitcoin C++ implementation.
 ;
 ; Transactions are the fundamental atoms of Bitcoin and have many powerful features.  Read
 ; <a href="https://bitcoinj.github.io/working-with-transactions">"Working with transactions"</a> in the
 ; documentation to learn more about how to use this class.
 ;
 ; All Bitcoin transactions are at risk of being reversed, though the risk is much less than with traditional payment
 ; systems.  Transactions have <i>confidence levels</i>, which help you decide whether to trust a transaction or not.
 ; Whether to trust a transaction is something that needs to be decided on a case by case basis - a rule that makes
 ; sense for selling MP3s might not make sense for selling cars, or accepting payments from a family member.  If you
 ; are building a wallet, how to present confidence to your users is something to consider carefully.
 ;
 ; Instances of this class are not safe for use by multiple threads.
 ;;
#_public
(§ class Transaction (§ extends ChildMessage)
    ;;;
     ; A comparator that can be used to sort transactions by their updateTime field.
     ; The ordering goes from most recent into the past.
     ;;
    #_public
    #_static
    (def #_"Comparator<Transaction>" Transaction'SORT_TX_BY_UPDATE_TIME (Comparator. #_"<Transaction>"
        (§ anon
            #_override
            #_public
            (§ method #_"int" compare [#_"Transaction" tx1, #_"Transaction" tx2]
                (let [#_"long" time1 (.. tx1 (getUpdateTime) (getTime))
                      #_"long" time2 (.. tx2 (getUpdateTime) (getTime))
                      #_"int" __updateTimeComparison (- (Longs/compare time1, time2))]
                    ;; If time1 == time2, compare by tx hash to make comparator consistent with equals.
                    (if (not= __updateTimeComparison 0) __updateTimeComparison (.. tx1 (getHash) (compareTo (.. tx2 (getHash)))))
                )
            )
        )))

    ;;; A comparator that can be used to sort transactions by their chain height. ;;
    #_public
    #_static
    (def #_"Comparator<Transaction>" Transaction'SORT_TX_BY_HEIGHT (Comparator. #_"<Transaction>"
        (§ anon
            #_override
            #_public
            (§ method #_"int" compare [#_"Transaction" tx1, #_"Transaction" tx2]
                (let [#_"TransactionConfidence" confidence1 (.. tx1 (getConfidence))
                      #_"int" height1 (if (= (.. confidence1 (getConfidenceType)) ConfidenceType'BUILDING) (.. confidence1 (getAppearedAtChainHeight)) Block'BLOCK_HEIGHT_UNKNOWN)
                      #_"TransactionConfidence" confidence2 (.. tx2 (getConfidence))
                      #_"int" height2 (if (= (.. confidence2 (getConfidenceType)) ConfidenceType'BUILDING) (.. confidence2 (getAppearedAtChainHeight)) Block'BLOCK_HEIGHT_UNKNOWN)
                      #_"int" __heightComparison (- (Ints/compare height1, height2))]
                    ;; If height1 == height2, compare by tx hash to make comparator consistent with equals.
                    (if (not= __heightComparison 0) __heightComparison (.. tx1 (getHash) (compareTo (.. tx2 (getHash)))))
                )
            )
        )))

    #_private
    #_static
    (def- #_"Logger" Transaction'log (LoggerFactory/getLogger Transaction))

    ;;; Threshold for lockTime: below this value it is interpreted as block number, otherwise as timestamp. ;;
    #_public
    #_static
    (def #_"int" Transaction'LOCKTIME_THRESHOLD 500000000) ;; Tue Nov  5 00:53:20 1985 UTC
    ;;; Same, but as a BigInteger for CHECKLOCKTIMEVERIFY. ;;
    #_public
    #_static
    (def #_"BigInteger" Transaction'LOCKTIME_THRESHOLD_BIG (BigInteger/valueOf Transaction'LOCKTIME_THRESHOLD))

    ;;; How many bytes a transaction can be before it won't be relayed anymore.  Currently 100kb. ;;
    #_public
    #_static
    (def #_"int" Transaction'MAX_STANDARD_TX_SIZE 100000)

    ;;;
     ; If feePerKb is lower than this, Bitcoin Core will treat it as if there were no fee.
     ;;
    #_public
    #_static
    (def #_"Coin" Transaction'REFERENCE_DEFAULT_MIN_TX_FEE (Coin'valueOf 5000)) ;; 0.05 mBTC

    ;;;
     ; If using this feePerKb, transactions will get confirmed within the next couple of blocks.
     ; This should be adjusted from time to time.  Last adjustment: February 2017.
     ;;
    #_public
    #_static
    (def #_"Coin" Transaction'DEFAULT_TX_FEE (Coin'valueOf 100000)) ;; 1 mBTC

    ;;;
     ; Any standard (i.e. pay-to-address) output smaller than this value (in satoshis) will most likely be rejected
     ; by the network.  This is calculated by assuming a standard output will be 34 bytes, and then using the formula
     ; used in {@link TransactionOutput#getMinNonDustValue(Coin)}.
     ;;
    #_public
    #_static
    (def #_"Coin" Transaction'MIN_NONDUST_OUTPUT (Coin'valueOf 2730)) ;; satoshis

    ;; These are bitcoin serialized.
    #_private
    (§ field- #_"long" :version)
    #_private
    (§ field- #_"ArrayList<TransactionInput>" :inputs)
    #_private
    (§ field- #_"ArrayList<TransactionOutput>" :outputs)

    #_private
    (§ field- #_"long" :lock-time)

    ;; This is either the time the transaction was broadcast as measured from the local clock, or the time from the
    ;; block in which it was included.  Note that this can be changed by re-orgs so the wallet may update this field.
    ;; Old serialized transactions don't have this field, thus null is valid.  It is used for returning an ordered
    ;; list of transactions from a wallet, which is helpful for presenting to users.
    #_private
    (§ field- #_"Date" :updated-at)

    ;; This is an in memory helper only.
    #_private
    (§ field- #_"Sha256Hash" :hash)

    ;; Data about how confirmed this tx is.  Serialized, may be null.
    #_nilable
    #_private
    (§ field- #_"TransactionConfidence" :confidence)

    ;; Records a map of which blocks the transaction has appeared in (keys) to an index within that block (values).
    ;; The "index" is not a real index, instead the values are only meaningful relative to each other.  For example,
    ;; consider two transactions that appear in the same block, t1 and t2, where t2 spends an output of t1.  Both
    ;; will have the same block hash as a key in their appearsInHashes, but the counter would be 1 and 2 respectively
    ;; regardless of where they actually appeared in the block.
    ;;
    ;; If this transaction is not stored in the wallet, appearsInHashes is null.
    #_private
    (§ field- #_"Map<Sha256Hash, Integer>" :appears-in-hashes)

    ;; Transactions can be encoded in a way that will use more bytes than is optimal
    ;; (due to VarInts having multiple encodings).
    ;; MAX_BLOCK_SIZE must be compared to the optimal encoding, not the actual encoding, so when parsing, we keep track
    ;; of the size of the ideal encoding in addition to the actual message size (which Message needs) so that Blocks
    ;; can properly keep track of optimal encoded size.
    #_private
    (§ field- #_"int" :optimal-encoding-message-size)

    ;;;
     ; This enum describes the underlying reason the transaction was created.  It's useful for rendering wallet GUIs
     ; more appropriately.
     ;;
    #_public
    #_static
    #_enum
    (def TransactionPurpose'values
    #{
        ;;; Used when the purpose of a transaction is genuinely unknown. ;;
        :TransactionPurpose'UNKNOWN
        ;;; Transaction created to satisfy a user payment request. ;;
        :TransactionPurpose'USER_PAYMENT
        ;;; Transaction automatically created and broadcast in order to reallocate money from old to new keys. ;;
        :TransactionPurpose'KEY_ROTATION
        ;;; Transaction that uses up pledges to an assurance contract. ;;
        :TransactionPurpose'ASSURANCE_CONTRACT_CLAIM
        ;;; Transaction that makes a pledge to an assurance contract. ;;
        :TransactionPurpose'ASSURANCE_CONTRACT_PLEDGE
        ;;; Send-to-self transaction that exists just to create an output of the right size we can pledge. ;;
        :TransactionPurpose'ASSURANCE_CONTRACT_STUB
        ;;; Raise fee, e.g. child-pays-for-parent. ;;
        :TransactionPurpose'RAISE_FEE
        ;; In future: de/refragmentation, privacy boosting/mixing, etc.
        ;; When adding a value, it also needs to be added to wallet.proto, WalletSerializer.makeTxProto()
        ;; and WalletSerializer.readTransaction()!
    })

    #_private
    (§ field- #_"TransactionPurpose" :purpose :TransactionPurpose'UNKNOWN)

    ;;;
     ; This field can be used by applications to record the exchange rate that was valid when the transaction happened.
     ; It's optional.
     ;;
    #_nilable
    #_private
    (§ field- #_"ExchangeRate" :exchange-rate)

    ;;;
     ; This field can be used to record the memo of the payment request that initiated the transaction.
     ; It's optional.
     ;;
    #_nilable
    #_private
    (§ field- #_"String" :memo)

    ;; Below flags apply in the context of BIP 68.
     ; If this flag set, CTxIn::nSequence is NOT interpreted as a relative lock-time.
     ;;
    #_public
    #_static
    (def #_"long" Transaction'SEQUENCE_LOCKTIME_DISABLE_FLAG (<< 1 31))

    ;; If CTxIn::nSequence encodes a relative lock-time and this flag
     ; is set, the relative lock-time has units of 512 seconds,
     ; otherwise it specifies blocks with a granularity of 1.
     ;;
    #_public
    #_static
    (def #_"long" Transaction'SEQUENCE_LOCKTIME_TYPE_FLAG (<< 1 22))

    ;; If CTxIn::nSequence encodes a relative lock-time, this mask is
     ; applied to extract that lock-time from the sequence field.
     ;;
    #_public
    #_static
    (def #_"long" Transaction'SEQUENCE_LOCKTIME_MASK 0x0000ffff)

    #_public
    (§ constructor Transaction [#_"NetworkParameters" params]
        (§ super params)

        (§ assoc this :version 1)
        (§ assoc this :inputs (ArrayList. #_"<>"))
        (§ assoc this :outputs (ArrayList. #_"<>"))
        ;; We don't initialize appearsIn deliberately as it's only useful for transactions stored in the wallet.
        (§ assoc this :length 8) ;; 8 for std fields
        this
    )

    ;;;
     ; Creates a transaction from the given serialized bytes, e.g. from a block or a tx network message.
     ;;
    #_public
    #_throws #_[ "ProtocolException" ]
    (§ constructor Transaction [#_"NetworkParameters" params, #_"byte[]" payload]
        (§ super params, payload, 0)
        this
    )

    ;;;
     ; Creates a transaction by reading payload starting from offset bytes in.  Length of a transaction is fixed.
     ;;
    #_public
    #_throws #_[ "ProtocolException" ]
    (§ constructor Transaction [#_"NetworkParameters" params, #_"byte[]" payload, #_"int" offset]
        (§ super params, payload, offset)
        ;; inputs/outputs will be created in parse()
        this
    )

    ;;;
     ; Creates a transaction by reading payload starting from offset bytes in.  Length of a transaction is fixed.
     ;
     ; @param params NetworkParameters object.
     ; @param payload Bitcoin protocol formatted byte array containing message content.
     ; @param offset The location of the first payload byte within the array.
     ; @param parseRetain Whether to retain the backing byte array for quick reserialization.
     ;                    If true and the backing byte array is invalidated due to modification of a field, then
     ;                    the cached bytes may be repopulated and retained if the message is serialized again in the future.
     ; @param length The length of message if known.  Usually this is provided when deserializing of the wire
     ;               as the length will be provided as part of the header.  Set to Message.UNKNOWN_LENGTH, if not known.
     ; @throws ProtocolException
     ;;
    #_public
    #_throws #_[ "ProtocolException" ]
    (§ constructor Transaction [#_"NetworkParameters" params, #_"byte[]" payload, #_"int" offset, #_nilable #_"Message" parent, #_"BitcoinSerializer" __setSerializer, #_"int" length]
        (§ super params, payload, offset, parent, __setSerializer, length)
        this
    )

    ;;;
     ; Creates a transaction by reading payload.  Length of a transaction is fixed.
     ;;
    #_public
    #_throws #_[ "ProtocolException" ]
    (§ constructor Transaction [#_"NetworkParameters" params, #_"byte[]" payload, #_nilable #_"Message" parent, #_"BitcoinSerializer" __setSerializer, #_"int" length]
        (§ super params, payload, 0, parent, __setSerializer, length)
        this
    )

    ;;;
     ; Returns the transaction hash as you see them in the block explorer.
     ;;
    #_override
    #_public
    (§ method #_"Sha256Hash" getHash []
        (when (nil? (:hash this))
            (§ assoc this :hash (Sha256Hash'wrapReversed (Sha256Hash'hashTwice (.. this (unsafeBitcoinSerialize)))))
        )
        (:hash this)
    )

    ;;;
     ; Used by BitcoinSerializer.  The serializer has to calculate a hash for checksumming so to
     ; avoid wasting the considerable effort a set method is provided so the serializer can set it.
     ;
     ; No verification is performed on this hash.
     ;;
    (§ method #_"void" setHash [#_"Sha256Hash" hash]
        (§ assoc this :hash hash)
        nil
    )

    #_public
    (§ method #_"String" getHashAsString []
        (.. this (getHash) (toString))
    )

    ;;;
     ; Gets the sum of the inputs, regardless of who owns them.
     ;;
    #_public
    (§ method #_"Coin" getInputSum []
        (let [#_"Coin" __inputTotal Coin'ZERO]

            (doseq [#_"TransactionInput" input (:inputs this)]
                (let [#_"Coin" __inputValue (.. input (getValue))]
                    (when (some? __inputValue)
                        (§ ass __inputTotal (.. __inputTotal (add __inputValue)))
                    )
                )
            )

            __inputTotal
        )
    )

    ;;;
     ; Calculates the sum of the outputs that are sending coins to a key in the wallet.
     ;;
    #_public
    (§ method #_"Coin" getValueSentToMe [#_"TransactionBag" __transactionBag]
        ;; This is tested in WalletTest.
        (let [#_"Coin" v Coin'ZERO]
            (doseq [#_"TransactionOutput" o (:outputs this)]
                (when (.. o (isMine __transactionBag))
                    (§ ass v (.. v (add (.. o (getValue)))))
                )
            )
            v
        )
    )

    ;;;
     ; Returns a map of block [hashes] which contain the transaction mapped to relativity counters, or null if this
     ; transaction doesn't have that data because it's not stored in the wallet or because it has never appeared in a
     ; block.
     ;;
    #_nilable
    #_public
    (§ method #_"Map<Sha256Hash, Integer>" getAppearsInHashes []
        (when (some? (:appears-in-hashes this)) (ImmutableMap/copyOf (:appears-in-hashes this)))
    )

    ;;;
     ; Convenience wrapper around getConfidence().getConfidenceType().
     ;
     ; @return true if this transaction hasn't been seen in any block yet.
     ;;
    #_public
    (§ method #_"boolean" isPending []
        (= (.. this (getConfidence) (getConfidenceType)) ConfidenceType'PENDING)
    )

    ;;;
     ; Puts the given block in the internal set of blocks in which this transaction appears.  This is
     ; used by the wallet to ensure transactions that appear on side chains are recorded properly even though
     ; the block stores do not save the transaction data at all.
     ;
     ; If there is a re-org this will be called once for each block that was previously seen, to update which block
     ; is the best chain.  The best chain block is guaranteed to be called last. So this must be idempotent.
     ;
     ; Sets updatedAt to be the earliest valid block time where this tx was seen.
     ;
     ; @param block     The {@link StoredBlock} in which the transaction has appeared.
     ; @param bestChain Whether to set the updatedAt timestamp from the block header (only if not already set).
     ; @param relativityOffset A number that disambiguates the order of transactions within a block.
     ;;
    #_public
    (§ method #_"void" setBlockAppearance [#_"StoredBlock" block, #_"boolean" __bestChain, #_"int" __relativityOffset]
        (let [#_"long" __blockTime (* (.. block (getHeader) (getTimeSeconds)) 1000)]
            (when (and __bestChain (or (nil? (:updated-at this)) (= (.. (:updated-at this) (getTime)) 0) (< __blockTime (.. (:updated-at this) (getTime)))))
                (§ assoc this :updated-at (Date. __blockTime))
            )

            (.. this (addBlockAppearance (.. block (getHeader) (getHash)), __relativityOffset))

            (when __bestChain
                (let [#_"TransactionConfidence" __transactionConfidence (.. this (getConfidence))]
                    ;; This sets type to BUILDING and depth to one.
                    (.. __transactionConfidence (setAppearedAtChainHeight (.. block (getHeight))))
                )
            )
        )
        nil
    )

    #_public
    (§ method #_"void" addBlockAppearance [#_"Sha256Hash" __blockHash, #_"int" __relativityOffset]
        ;; TODO: This could be a lot more memory efficient as we'll typically only store one element.
        (when (nil? (:appears-in-hashes this))
            (§ assoc this :appears-in-hashes (TreeMap. #_"<>"))
        )

        (.. (:appears-in-hashes this) (put __blockHash, __relativityOffset))
        nil
    )

    ;;;
     ; Calculates the sum of the inputs that are spending coins with keys in the wallet.  This requires the
     ; transactions sending coins to those keys to be in the wallet.  This method will not attempt to download
     ; the blocks containing the input transactions if the key is in the wallet but the transactions are not.
     ;
     ; @return sum of the inputs that are spending coins with keys in the wallet.
     ;;
    #_public
    #_throws #_[ "ScriptException" ]
    (§ method #_"Coin" getValueSentFromMe [#_"TransactionBag" wallet]
        ;; This is tested in WalletTest.
        (let [#_"Coin" v Coin'ZERO]
            (doseq [#_"TransactionInput" input (:inputs this)]
                ;; This input is taking value from a transaction in our wallet.  To discover the value,
                ;; we must find the connected transaction.
                (let [#_"TransactionOutput" connected (.. input (getConnectedOutput (.. wallet (getTransactionPool :PoolType'UNSPENT))))]
                    (when (nil? connected)
                        (§ ass connected (.. input (getConnectedOutput (.. wallet (getTransactionPool :PoolType'SPENT)))))
                    )
                    (when (nil? connected)
                        (§ ass connected (.. input (getConnectedOutput (.. wallet (getTransactionPool :PoolType'PENDING)))))
                    )

                    ;; The connected output may be the change to the sender of a previous input sent to this wallet.
                    ;; In this case we ignore it.
                    (when (and (some? connected) (.. connected (isMine wallet)))
                        (§ ass v (.. v (add (.. connected (getValue)))))
                    )
                )
            )
            v
        )
    )

    ;;;
     ; Gets the sum of the outputs of the transaction.  If the outputs are less than the inputs, it does not count the fee.
     ;
     ; @return the sum of the outputs regardless of who owns them.
     ;;
    #_public
    (§ method #_"Coin" getOutputSum []
        (let [#_"Coin" sum Coin'ZERO]

            (doseq [#_"TransactionOutput" output (:outputs this)]
                (§ ass sum (.. sum (add (.. output (getValue)))))
            )

            sum
        )
    )

    ;;;
     ; Returns the difference of {@link Transaction#getValueSentToMe(TransactionBag)} and {@link Transaction#getValueSentFromMe(TransactionBag)}.
     ;;
    #_public
    #_throws #_[ "ScriptException" ]
    (§ method #_"Coin" getValue [#_"TransactionBag" wallet]
        (.. this (getValueSentToMe wallet) (subtract (.. this (getValueSentFromMe wallet))))
    )

    ;;;
     ; The transaction fee is the difference of the value of all inputs and the value of all outputs.
     ; Currently, the fee can only be determined for transactions created by us.
     ;
     ; @return fee, or null if it cannot be determined.
     ;;
    #_public
    (§ method #_"Coin" getFee []
        (when-not (or (.. (:inputs this) (isEmpty)) (.. (:outputs this) (isEmpty))) ;; Incomplete transaction.
            (let [#_"Coin" fee Coin'ZERO]
                (doseq [#_"TransactionInput" input (:inputs this)]
                    (when (nil? (.. input (getValue)))
                        (§ return nil)
                    )
                    (§ ass fee (.. fee (add (.. input (getValue)))))
                )
                (doseq [#_"TransactionOutput" output (:outputs this)]
                    (§ ass fee (.. fee (subtract (.. output (getValue)))))
                )
                fee
            )
        )
    )

    ;;;
     ; Returns true if any of the outputs is marked as spent.
     ;;
    #_public
    (§ method #_"boolean" isAnyOutputSpent []
        (not (every? #(.. % (isAvailableForSpending)) (:outputs this)))
    )

    ;;;
     ; Returns false if this transaction has at least one output that is owned by the given wallet and unspent,
     ; true otherwise.
     ;;
    #_public
    (§ method #_"boolean" isEveryOwnedOutputSpent [#_"TransactionBag" bag]
        (not (some #(and (.. % (isAvailableForSpending)) (.. % (isMine bag))) (:outputs this)))
    )

    ;;;
     ; Returns the earliest time at which the transaction was seen (broadcast or included into the chain),
     ; or the epoch if that information isn't available.
     ;;
    #_public
    (§ method #_"Date" getUpdateTime []
        ;; Older wallets did not store this field.  Set to the epoch.
        (when (nil? (:updated-at this))
            (§ assoc this :updated-at (Date. 0))
        )
        (:updated-at this)
    )

    #_public
    (§ method #_"void" setUpdateTime [#_"Date" time]
        (§ assoc this :updated-at time)
        nil
    )

    ;;;
     ; These constants are a part of a scriptSig signature on the inputs.  They define the details of how a
     ; transaction can be redeemed, specifically, they control how the hash of the transaction is calculated.
     ;;
    #_public
    (§ enum SigHash
        (§ item SigHash'UNSET               0) ;; Caution: Using this type in isolation is non-standard.  Treated similar to ALL.
        (§ item SigHash'ALL                 1)
        (§ item SigHash'NONE                2)
        (§ item SigHash'SINGLE              3)

        (§ item SigHash'ANYONECANPAY        0x80) ;; Caution: Using this type in isolation is non-standard.  Treated similar to ANYONECANPAY_ALL.
        (§ item SigHash'ANYONECANPAY_ALL    0x81)
        (§ item SigHash'ANYONECANPAY_NONE   0x82)
        (§ item SigHash'ANYONECANPAY_SINGLE 0x83)

        #_public
        (§ field #_"int" :value)

        #_private
        (§ constructor- SigHash [#_"int" value]
            (§ assoc this :value value)
            this
        )
    )

    #_override
    #_protected
    (§ method #_"void" unCache []
        (.. super (unCache))
        (§ assoc this :hash nil)
        nil
    )

    #_protected
    #_static
    (§ defn #_"int" Transaction'calcLength [#_"byte[]" buf, #_"int" offset]
        ;; jump past version (uint32)
        (let [#_"int" cursor (+ offset 4) #_"VarInt" varint (VarInt. buf, cursor) #_"long" __txInCount (:value varint)
              cursor (+ cursor (.. varint (getOriginalSizeInBytes)))]

            (loop-when-recur [#_"int" i 0] (< i __txInCount) [(inc i)]
                ;; 36 = length of previous_outpoint
                (§ ass cursor (+ cursor 36))
                (§ ass varint (VarInt. buf, cursor))
                (let [#_"long" __scriptLen (:value varint)]
                    ;; 4 = length of sequence field (unint32)
                    (§ ass cursor (+ cursor __scriptLen 4 (.. varint (getOriginalSizeInBytes))))
                )
            )

            (let [varint (VarInt. buf, cursor) #_"long" __txOutCount (:value varint)
                  cursor (+ cursor (.. varint (getOriginalSizeInBytes)))]

                (loop-when-recur [#_"int" i 0] (< i __txOutCount) [(inc i)]
                    ;; 8 = length of tx value field (uint64)
                    (§ ass cursor (+ cursor 8))
                    (§ ass varint (VarInt. buf, cursor))
                    (let [#_"long" __scriptLen (:value varint)]
                        (§ ass cursor (+ cursor __scriptLen (.. varint (getOriginalSizeInBytes))))
                    )
                )
                ;; 4 = length of lock_time field (uint32)
                (+ (- cursor offset) 4)
            )
        )
    )

    #_override
    #_protected
    #_throws #_[ "ProtocolException" ]
    (§ method #_"void" parse []
        (§ assoc this :cursor (:offset this))

        (§ assoc this :version (.. this (readUint32)))
        (§ assoc this :optimal-encoding-message-size 4)

        ;; First come the inputs.
        (let [#_"long" __numInputs (.. this (readVarInt))]
            (§ update this :optimal-encoding-message-size + (VarInt'sizeOf __numInputs))
            (§ assoc this :inputs (ArrayList. #_"<>" (int __numInputs)))
            (loop-when-recur [#_"long" i 0] (< i __numInputs) [(inc i)]
                (let [#_"TransactionInput" input (TransactionInput. (:params this), this, (:payload this), (:cursor this), (:serializer this))]
                    (.. (:inputs this) (add input))
                    (let [#_"long" __scriptLen (.. this (readVarInt TransactionOutPoint'MESSAGE_LENGTH))]
                        (§ update this :optimal-encoding-message-size + TransactionOutPoint'MESSAGE_LENGTH (VarInt'sizeOf __scriptLen) __scriptLen 4)
                        (§ update this :cursor + __scriptLen 4)
                    )
                )
            )
            ;; Now the outputs.
            (let [#_"long" __numOutputs (.. this (readVarInt))]
                (§ update this :optimal-encoding-message-size + (VarInt'sizeOf __numOutputs))
                (§ assoc this :outputs (ArrayList. #_"<>" (int __numOutputs)))
                (loop-when-recur [#_"long" i 0] (< i __numOutputs) [(inc i)]
                    (let [#_"TransactionOutput" output (TransactionOutput. (:params this), this, (:payload this), (:cursor this), (:serializer this))]
                        (.. (:outputs this) (add output))
                        (let [#_"long" __scriptLen (.. this (readVarInt 8))]
                            (§ update this :optimal-encoding-message-size + 8 (VarInt'sizeOf __scriptLen) __scriptLen)
                            (§ update this :cursor + __scriptLen)
                        )
                    )
                )
                (§ assoc this :lock-time (.. this (readUint32)))
                (§ update this :optimal-encoding-message-size + 4)
                (§ assoc this :length (- (:cursor this) (:offset this)))
            )
        )
        nil
    )

    #_public
    (§ method #_"int" getOptimalEncodingMessageSize []
        (if (= (:optimal-encoding-message-size this) 0)
            (§ assoc this :optimal-encoding-message-size (.. this (getMessageSize)))
        )
        (:optimal-encoding-message-size this)
    )

    ;;;
     ; The priority (coin age) calculation doesn't use the regular message size, but rather one adjusted downwards
     ; for the number of inputs.  The goal is to incentivise cleaning up the UTXO set with free transactions, if one
     ; can do so.
     ;;
    #_public
    (§ method #_"int" getMessageSizeForPriorityCalc []
        (let [#_"int" size (.. this (getMessageSize))]
            (doseq [#_"TransactionInput" input (:inputs this)]
                ;; 41: min size of an input
                ;; 110: enough to cover a compressed pubkey p2sh redemption (somewhat arbitrary)
                (let [#_"int" benefit (+ 41 (min 110, (alength (.. input (getScriptSig) (getProgram)))))]
                    (when (< benefit size)
                        (§ ass size (- size benefit))
                    )
                )
            )
            size
        )
    )

    ;;;
     ; A coinbase transaction is one that creates a new coin.  They are the first transaction in each block and their
     ; value is determined by a formula that all implementations of Bitcoin share.  In 2011 the value of a coinbase
     ; transaction is 50 coins, but in future it will be less.  A coinbase transaction is defined not only by its
     ; position in a block but by the data in the inputs.
     ;;
    #_public
    (§ method #_"boolean" isCoinBase []
        (and (= (.. (:inputs this) (size)) 1) (.. (:inputs this) (get 0) (isCoinBase)))
    )

    ;;;
     ; A transaction is mature if it is either a building coinbase tx that is as deep or deeper than the required coinbase depth, or a non-coinbase tx.
     ;;
    #_public
    (§ method #_"boolean" isMature []
        (cond
            (not (.. this (isCoinBase))) true
            (not= (.. this (getConfidence) (getConfidenceType)) ConfidenceType'BUILDING) false
            :else (<= (-> this :params :spendable-coinbase-depth) (.. this (getConfidence) (getDepthInBlocks)))
        )
    )

    #_override
    #_public
    (§ method #_"String" toString []
        (.. this (toString nil))
    )

    ;;;
     ; A human readable version of the transaction useful for debugging.  The format is not guaranteed to be stable.
     ;
     ; @param chain If provided, will be used to estimate lock times (if set).  Can be null.
     ;;
    #_public
    (§ method #_"String" toString [#_nilable #_"AbstractBlockChain" chain]
        (let [#_"StringBuilder" sb (StringBuilder.)]
            (.. sb (append "  ") (append (.. this (getHashAsString))) (append "\n"))
            (when (some? (:updated-at this))
                (.. sb (append "  updated: ") (append (Utils'dateTimeFormat (:updated-at this))) (append "\n"))
            )
            (when (not= (:version this) 1)
                (.. sb (append "  version ") (append (:version this)) (append "\n"))
            )
            (when (.. this (isTimeLocked))
                (.. sb (append "  time locked until "))
                (cond (< (:lock-time this) Transaction'LOCKTIME_THRESHOLD)
                    (do
                        (.. sb (append "block ") (append (:lock-time this)))
                        (when (some? chain)
                            (.. sb (append " (estimated to be reached at ") (append (Utils'dateTimeFormat (.. chain (estimateBlockTime (int (:lock-time this)))))) (append ")"))
                        )
                    )
                    :else
                    (do
                        (.. sb (append (Utils'dateTimeFormat (* (:lock-time this) 1000))))
                    )
                )
                (.. sb (append "\n"))
            )
            (when (.. this (isOptInFullRBF))
                (.. sb (append "  opts into full replace-by-fee\n"))
            )
            (when (.. this (isCoinBase))
                (let [#_"String" script
                      #_"String" script2]
                    (try
                        (§ ass script (.. (:inputs this) (get 0) (getScriptSig) (toString)))
                        (§ ass script2 (.. (:outputs this) (get 0) (getScriptPubKey) (toString)))
                        (catch ScriptException _
                            (§ ass script "???")
                            (§ ass script2 "???")
                        )
                    )
                    (.. sb (append "     == COINBASE TXN (scriptSig ") (append script) (append ")  (scriptPubKey ") (append script2) (append ")\n"))
                    (§ return (.. sb (toString)))
                )
            )

            (cond (not (.. (:inputs this) (isEmpty)))
                (do
                    (doseq [#_"TransactionInput" in (:inputs this)]
                        (.. sb (append "     in   "))

                        (try
                            (let [#_"String" __scriptSigStr (.. in (getScriptSig) (toString))]
                                (.. sb (append (if (not (Strings/isNullOrEmpty __scriptSigStr)) __scriptSigStr "<no scriptSig>")))
                                (let [#_"Coin" value (.. in (getValue))]
                                    (when (some? value)
                                        (.. sb (append " ") (append (.. value (toFriendlyString))))
                                    )
                                    (.. sb (append "\n          outpoint:"))
                                    (let [#_"TransactionOutPoint" outpoint (:outpoint in)]
                                        (.. sb (append (.. outpoint (toString))))
                                        (let [#_"TransactionOutput" __connectedOutput (.. outpoint (getConnectedOutput))]
                                            (when (some? __connectedOutput)
                                                (let [#_"Script" __scriptPubKey (.. __connectedOutput (getScriptPubKey))]
                                                    (when (or (.. __scriptPubKey (isSentToAddress)) (.. __scriptPubKey (isPayToScriptHash)))
                                                        (.. sb (append " hash160:") (append (.. Utils'HEX (encode (.. __scriptPubKey (getPubKeyHash))))))
                                                    )
                                                )
                                            )
                                            (when (.. in (hasSequence))
                                                (.. sb (append "\n          sequence:") (append (Long/toHexString (.. in (getSequenceNumber)))))
                                                (when (.. in (isOptInFullRBF))
                                                    (.. sb (append ", opts into full RBF"))
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                            (catch Exception e
                                (.. sb (append "[exception: ") (append (.. e (getMessage))) (append "]"))
                            )
                        )
                        (.. sb (append "\n"))
                    )
                )
                :else
                (do
                    (.. sb (append "     INCOMPLETE: No inputs!\n"))
                )
            )

            (doseq [#_"TransactionOutput" out (:outputs this)]
                (.. sb (append "     out  "))
                (try
                    (let [#_"String" __scriptPubKeyStr (.. out (getScriptPubKey) (toString))]
                        (.. sb (append (if (not (Strings/isNullOrEmpty __scriptPubKeyStr)) __scriptPubKeyStr "<no scriptPubKey>")) (append " ") (append (.. out (getValue) (toFriendlyString))))
                        (when (not (.. out (isAvailableForSpending)))
                            (.. sb (append " Spent"))
                        )
                        (let [#_"TransactionInput" __spentBy (.. out (getSpentBy))]
                            (when (some? __spentBy)
                                (.. sb (append " by ") (append (.. __spentBy (getParentTransaction) (getHashAsString))))
                            )
                        )
                    )
                    (catch Exception e
                        (.. sb (append "[exception: ") (append (.. e (getMessage))) (append "]"))
                    )
                )
                (.. sb (append "\n"))
            )

            (let [#_"Coin" fee (.. this (getFee))]
                (when (some? fee)
                    (let [#_"int" size (alength (.. this (unsafeBitcoinSerialize)))]
                        (.. sb (append "     fee  ") (append (.. fee (multiply 1000) (divide size) (toFriendlyString))) (append "/kB, ") (append (.. fee (toFriendlyString))) (append " for ") (append size) (append " bytes\n"))
                    )
                )
                (when (some? (:purpose this))
                    (.. sb (append "     prps ") (append (:purpose this)) (append "\n"))
                )
                (.. sb (toString))
            )
        )
    )

    ;;;
     ; Removes all the inputs from this transaction.
     ; Note that this also invalidates the length attribute.
     ;;
    #_public
    (§ method #_"void" clearInputs []
        (.. this (unCache))
        (doseq [#_"TransactionInput" input (:inputs this)]
            (.. input (setParent nil))
        )
        (.. (:inputs this) (clear))
        ;; You wanted to reserialize, right?
        (§ assoc this :length (alength (.. this (unsafeBitcoinSerialize))))
        nil
    )

    ;;;
     ; Adds an input to this transaction that imports value from the given output.  Note that this input is <i>not</i>
     ; complete and after every input is added with {@link #addInput()} and every output is added with {@link #addOutput()},
     ; a {@link TransactionSigner} must be used to finalize the transaction and finish the inputs off.
     ; Otherwise it won't be accepted by the network.
     ;
     ; @return the newly created input.
     ;;
    #_public
    (§ method #_"TransactionInput" addInput [#_"TransactionOutput" from]
        (.. this (addInput (TransactionInput. (:params this), this, from)))
    )

    ;;;
     ; Adds an input directly, with no checking that it's valid.
     ;
     ; @return the new input.
     ;;
    #_public
    (§ method #_"TransactionInput" addInput [#_"TransactionInput" input]
        (.. this (unCache))
        (.. input (setParent this))
        (.. (:inputs this) (add input))
        (.. this (adjustLength (.. (:inputs this) (size)), (:length input)))
        input
    )

    ;;;
     ; Creates and adds an input to this transaction, with no checking that it's valid.
     ;
     ; @return the newly created input.
     ;;
    #_public
    (§ method #_"TransactionInput" addInput [#_"Sha256Hash" __spendTxHash, #_"long" __outputIndex, #_"Script" script]
        (.. this (addInput (TransactionInput. (:params this), this, (.. script (getProgram)), (TransactionOutPoint. (:params this), __outputIndex, __spendTxHash))))
    )

    ;;;
     ; Adds a new and fully signed input for the given parameters.  Note that this method is <b>not</b> thread safe
     ; and requires external synchronization.  Please refer to general documentation on Bitcoin scripting and contracts
     ; to understand the values of sigHash and anyoneCanPay: otherwise you can use the other form of this method
     ; that sets them to typical defaults.
     ;
     ; @throws ScriptException if the scriptPubKey is not a pay to address or pay to pubkey script.
     ;;
    #_public
    #_throws #_[ "ScriptException" ]
    (§ method #_"TransactionInput" addSignedInput [#_"TransactionOutPoint" __prevOut, #_"Script" __scriptPubKey, #_"ECKey" __sigKey, #_"SigHash" __sigHash, #_"boolean" anyone?]
        ;; Verify the API user didn't try to do operations out of order.
        (assert-state (not (.. (:outputs this) (isEmpty))), "Attempting to sign tx without outputs.")

        (let [#_"TransactionInput" input (TransactionInput. (:params this), this, (byte-array 0), __prevOut)]
            (.. this (addInput input))
            (let [#_"Sha256Hash" hash (.. this (hashForSignature (dec (.. (:inputs this) (size))), __scriptPubKey, __sigHash, anyone?))
                  #_"ECDSASignature" __ecSig (.. __sigKey (sign hash))
                  #_"TransactionSignature" __txSig (TransactionSignature. __ecSig, __sigHash, anyone?)]
                (cond (.. __scriptPubKey (isSentToRawPubKey))
                    (do
                        (.. input (setScriptSig (ScriptBuilder'createInputScript __txSig)))
                    )
                    (.. __scriptPubKey (isSentToAddress))
                    (do
                        (.. input (setScriptSig (ScriptBuilder'createInputScript __txSig, __sigKey)))
                    )
                    :else
                    (do
                        (throw (ScriptException. :ScriptError'UNKNOWN_ERROR, (str "Don't know how to sign for this kind of scriptPubKey: " __scriptPubKey)))
                    )
                )
                input
            )
        )
    )

    ;;;
     ; Same as {@link #addSignedInput(TransactionOutPoint, Script, ECKey, Transaction.SigHash, boolean)},
     ; but defaults to {@link SigHash#ALL} and "false" for the anyoneCanPay flag.  This is normally what you want.
     ;;
    #_public
    #_throws #_[ "ScriptException" ]
    (§ method #_"TransactionInput" addSignedInput [#_"TransactionOutPoint" __prevOut, #_"Script" __scriptPubKey, #_"ECKey" __sigKey]
        (.. this (addSignedInput __prevOut, __scriptPubKey, __sigKey, SigHash'ALL, false))
    )

    ;;;
     ; Adds an input that points to the given output and contains a valid signature for it, calculated using the
     ; signing key.
     ;;
    #_public
    (§ method #_"TransactionInput" addSignedInput [#_"TransactionOutput" output, #_"ECKey" __signingKey]
        (.. this (addSignedInput (.. output (getOutPointFor)), (.. output (getScriptPubKey)), __signingKey))
    )

    ;;;
     ; Adds an input that points to the given output and contains a valid signature for it, calculated using the
     ; signing key.
     ;;
    #_public
    (§ method #_"TransactionInput" addSignedInput [#_"TransactionOutput" output, #_"ECKey" __signingKey, #_"SigHash" __sigHash, #_"boolean" anyone?]
        (.. this (addSignedInput (.. output (getOutPointFor)), (.. output (getScriptPubKey)), __signingKey, __sigHash, anyone?))
    )

    ;;;
     ; Removes all the outputs from this transaction.
     ; Note that this also invalidates the length attribute.
     ;;
    #_public
    (§ method #_"void" clearOutputs []
        (.. this (unCache))
        (doseq [#_"TransactionOutput" output (:outputs this)]
            (.. output (setParent nil))
        )
        (.. (:outputs this) (clear))
        ;; You wanted to reserialize, right?
        (§ assoc this :length (alength (.. this (unsafeBitcoinSerialize))))
        nil
    )

    ;;;
     ; Adds the given output to this transaction.  The output must be completely initialized.  Returns the given output.
     ;;
    #_public
    (§ method #_"TransactionOutput" addOutput [#_"TransactionOutput" to]
        (.. this (unCache))
        (.. to (setParent this))
        (.. (:outputs this) (add to))
        (.. this (adjustLength (.. (:outputs this) (size)), (:length to)))
        to
    )

    ;;;
     ; Creates an output based on the given address and value, adds it to this transaction, and returns the new output.
     ;;
    #_public
    (§ method #_"TransactionOutput" addOutput [#_"Coin" value, #_"Address" address]
        (.. this (addOutput (TransactionOutput. (:params this), this, value, address)))
    )

    ;;;
     ; Creates an output that pays to the given pubkey directly (no address) with the given value, adds it to this
     ; transaction, and returns the new output.
     ;;
    #_public
    (§ method #_"TransactionOutput" addOutput [#_"Coin" value, #_"ECKey" pubkey]
        (.. this (addOutput (TransactionOutput. (:params this), this, value, pubkey)))
    )

    ;;;
     ; Creates an output that pays to the given script.  The address and key forms are specialisations of this method,
     ; you won't normally need to use it unless you're doing unusual things.
     ;;
    #_public
    (§ method #_"TransactionOutput" addOutput [#_"Coin" value, #_"Script" script]
        (.. this (addOutput (TransactionOutput. (:params this), this, value, (.. script (getProgram)))))
    )

    ;;;
     ; Calculates a signature that is valid for being inserted into the input at the given position.  This is simply
     ; a wrapper around calling {@link Transaction#hashForSignature(int, byte[], Transaction.SigHash, boolean)}
     ; followed by {@link ECKey#sign(Sha256Hash)} and then returning a new {@link TransactionSignature}.  The key
     ; must be usable for signing as-is: if the key is encrypted it must be decrypted first external to this method.
     ;
     ; @param inputIndex Which input to calculate the signature for, as an index.
     ; @param key The private key used to calculate the signature.
     ; @param redeemScript Byte-exact contents of the scriptPubKey that is being satisified, or the P2SH redeem script.
     ; @param hashType Signing mode, see the enum for documentation.
     ; @param anyoneCanPay Signing mode, see the SigHash enum for documentation.
     ; @return A newly calculated signature object that wraps the r, s and sighash components.
     ;;
    #_public
    (§ method #_"TransactionSignature" calculateSignature [#_"int" __inputIndex, #_"ECKey" key, #_"byte[]" __redeemScript, #_"SigHash" __hashType, #_"boolean" anyone?]
        (let [#_"Sha256Hash" hash (.. this (hashForSignature __inputIndex, __redeemScript, __hashType, anyone?))]
            (TransactionSignature. (.. key (sign hash)), __hashType, anyone?)
        )
    )

    ;;;
     ; Calculates a signature that is valid for being inserted into the input at the given position.  This is simply
     ; a wrapper around calling {@link Transaction#hashForSignature(int, byte[], Transaction.SigHash, boolean)}
     ; followed by {@link ECKey#sign(Sha256Hash)} and then returning a new {@link TransactionSignature}.
     ;
     ; @param inputIndex Which input to calculate the signature for, as an index.
     ; @param key The private key used to calculate the signature.
     ; @param redeemScript The scriptPubKey that is being satisified, or the P2SH redeem script.
     ; @param hashType Signing mode, see the enum for documentation.
     ; @param anyoneCanPay Signing mode, see the SigHash enum for documentation.
     ; @return A newly calculated signature object that wraps the r, s and sighash components.
     ;;
    #_public
    (§ method #_"TransactionSignature" calculateSignature [#_"int" __inputIndex, #_"ECKey" key, #_"Script" __redeemScript, #_"SigHash" __hashType, #_"boolean" anyone?]
        (let [#_"Sha256Hash" hash (.. this (hashForSignature __inputIndex, (.. __redeemScript (getProgram)), __hashType, anyone?))]
            (TransactionSignature. (.. key (sign hash)), __hashType, anyone?)
        )
    )

    ;;;
     ; Calculates a signature hash, that is, a hash of a simplified form of the transaction.  How exactly the transaction
     ; is simplified is specified by the type and anyoneCanPay parameters.
     ;
     ; This is a low level API and when using the regular {@link Wallet} class you don't have to call this yourself.
     ; When working with more complex transaction types and contracts, it can be necessary.  When signing a P2SH output
     ; the redeemScript should be the script encoded into the scriptSig field, for normal transactions, it's the
     ; scriptPubKey of the output you're signing for.
     ;
     ; @param inputIndex Input the signature is being calculated for.  Tx signatures are always relative to an input.
     ; @param redeemScript The bytes that should be in the given input during signing.
     ; @param type Should be SigHash.ALL.
     ; @param anyoneCanPay Should be false.
     ;;
    #_public
    (§ method #_"Sha256Hash" hashForSignature [#_"int" __inputIndex, #_"byte[]" __redeemScript, #_"SigHash" type, #_"boolean" anyone?]
        (let [#_"byte" __sigHashType (byte (TransactionSignature'calcSigHashValue type, anyone?))]
            (.. this (hashForSignature __inputIndex, __redeemScript, __sigHashType))
        )
    )

    ;;;
     ; Calculates a signature hash, that is, a hash of a simplified form of the transaction.  How exactly the transaction
     ; is simplified is specified by the type and anyoneCanPay parameters.
     ;
     ; This is a low level API and when using the regular {@link Wallet} class you don't have to call this yourself.
     ; When working with more complex transaction types and contracts, it can be necessary.  When signing a P2SH output
     ; the redeemScript should be the script encoded into the scriptSig field, for normal transactions, it's the
     ; scriptPubKey of the output you're signing for.
     ;
     ; @param inputIndex Input the signature is being calculated for.  Tx signatures are always relative to an input.
     ; @param redeemScript The script that should be in the given input during signing.
     ; @param type Should be SigHash.ALL.
     ; @param anyoneCanPay Should be false.
     ;;
    #_public
    (§ method #_"Sha256Hash" hashForSignature [#_"int" __inputIndex, #_"Script" __redeemScript, #_"SigHash" type, #_"boolean" anyone?]
        (let [#_"int" __sigHash (TransactionSignature'calcSigHashValue type, anyone?)]
            (.. this (hashForSignature __inputIndex, (.. __redeemScript (getProgram)), (byte __sigHash)))
        )
    )

    ;;;
     ; This is required for signatures which use a sigHashType which cannot be represented using SigHash and anyoneCanPay.
     ; See transaction c99c49da4c38af669dea436d3e73780dfdb6c1ecf9958baa52960e8baee30e73, which has sigHashType 0.
     ;;
    #_public
    (§ method #_"Sha256Hash" hashForSignature [#_"int" __inputIndex, #_"byte[]" __connectedScript, #_"byte" __sigHashType]
        ;; The SIGHASH flags are used in the design of contracts, please see this page for a further understanding of
        ;; the purposes of the code in this method:
        ;;
        ;;   https://en.bitcoin.it/wiki/Contracts

        ;; Create a copy of this transaction to operate upon because we need make changes to the inputs and outputs.
        ;; It would not be thread-safe to change the attributes of the transaction object itself.
        (let [#_"Transaction" tx (.. (-> this :params :default-serializer) (makeTransaction (.. this (bitcoinSerialize))))]

            ;; Clear input scripts in preparation for signing.  If we're signing a fresh transaction that step isn't very
            ;; helpful, but it doesn't add much cost relative to the actual EC math so we'll do it anyway.
            (loop-when-recur [#_"int" i 0] (< i (.. (:inputs tx) (size))) [(inc i)]
                (.. (:inputs tx) (get i) (clearScriptBytes))
            )

            ;; This step has no purpose beyond being synchronized with Bitcoin Core's bugs.  OP_CODESEPARATOR
            ;; is a legacy holdover from a previous, broken design of executing scripts that shipped in Bitcoin 0.1.
            ;; It was seriously flawed and would have let anyone take anyone elses money.  Later versions switched to
            ;; the design we use today where scripts are executed independently but share a stack.  This left the
            ;; OP_CODESEPARATOR instruction having no purpose as it was only meant to be used internally, not actually
            ;; ever put into scripts.  Deleting OP_CODESEPARATOR is a step that should never be required but if we don't
            ;; do it, we could split off the main chain.
            (§ ass __connectedScript (Script'removeAllInstancesOfOp __connectedScript, ScriptOpCodes'OP_CODESEPARATOR))

            ;; Set the input to the script of its output.  Bitcoin Core does this but the step has no obvious purpose as
            ;; the signature covers the hash of the prevout transaction which obviously includes the output script
            ;; already.  Perhaps it felt safer to him in some way, or is another leftover from how the code was written.
            (let [#_"TransactionInput" input (.. (:inputs tx) (get __inputIndex))]
                (.. input (setScriptBytes __connectedScript))

                (cond (= (& __sigHashType 0x1f) (:value SigHash'NONE))
                    (do
                        ;; SIGHASH_NONE means no outputs are signed at all - the signature is effectively for a "blank cheque".
                        (§ assoc tx :outputs (ArrayList. #_"<>" 0))
                        ;; The signature isn't broken by new versions of the transaction issued by other parties.
                        (loop-when-recur [#_"int" i 0] (< i (.. (:inputs tx) (size))) [(inc i)]
                            (when (not= i __inputIndex)
                                (.. (:inputs tx) (get i) (setSequenceNumber 0))
                            )
                        )
                    )
                    (= (& __sigHashType 0x1f) (:value SigHash'SINGLE))
                    (do
                        ;; SIGHASH_SINGLE means only sign the output at the same index as the input (i.e. my output).
                        (when (<= (.. (:outputs tx) (size)) __inputIndex)
                            ;; The input index is beyond the number of outputs, it's a buggy signature made by a broken
                            ;; Bitcoin implementation.  Bitcoin Core also contains a bug in handling this case:
                            ;; any transaction output that is signed in this case will result in both the signed output
                            ;; and any future outputs to this public key being steal-able by anyone who has
                            ;; the resulting signature and the public key (both of which are part of the signed tx input).

                            ;; Bitcoin Core's bug is that SignatureHash was supposed to return a hash and on this codepath it
                            ;; actually returns the constant "1" to indicate an error, which is never checked for.  Oops.
                            (§ return (Sha256Hash'wrap "0100000000000000000000000000000000000000000000000000000000000000"))
                        )
                        ;; In SIGHASH_SINGLE the outputs after the matching input index are deleted, and the outputs before
                        ;; that position are "nulled out".  Unintuitively, the value in a "null" transaction is set to -1.
                        (§ assoc tx :outputs (ArrayList. #_"<>" (.. (:outputs tx) (subList 0, (inc __inputIndex)))))
                        (loop-when-recur [#_"int" i 0] (< i __inputIndex) [(inc i)]
                            (.. (:outputs tx) (set i, (TransactionOutput. (:params tx), tx, Coin'NEGATIVE_SATOSHI, (byte-array 0))))
                        )
                        ;; The signature isn't broken by new versions of the transaction issued by other parties.
                        (loop-when-recur [#_"int" i 0] (< i (.. (:inputs tx) (size))) [(inc i)]
                            (when (not= i __inputIndex)
                                (.. (:inputs tx) (get i) (setSequenceNumber 0))
                            )
                        )
                    )
                )

                (when (= (& __sigHashType (:value SigHash'ANYONECANPAY)) (:value SigHash'ANYONECANPAY))
                    ;; SIGHASH_ANYONECANPAY means the signature in the input is not broken by changes/additions/removals
                    ;; of other inputs.  For example, this is useful for building assurance contracts.
                    (§ assoc tx :inputs (ArrayList. #_"<TransactionInput>"))
                    (.. (:inputs tx) (add input))
                )

                (let [#_"ByteArrayOutputStream" baos (ByteArrayOutputStream. (if (= (:length tx) Message'UNKNOWN_LENGTH) 256 (+ (:length tx) 4)))]
                    (.. tx (bitcoinSerialize baos))
                    ;; We also have to write a hash type (sigHashType is actually an unsigned char).
                    (Utils'uint32ToByteStreamLE (& 0x000000ff __sigHashType), baos)
                    ;; Note that this is NOT reversed to ensure it will be signed correctly.  If it were to be printed out
                    ;; however then we would expect that it is IS reversed.
                    (Sha256Hash'twiceOf (.. baos (toByteArray)))
                )
            )
        )
    )

    #_override
    #_protected
    (§ method #_"void" bitcoinSerializeToStream [#_"ByteArrayOutputStream" baos]
        (Utils'uint32ToByteStreamLE (:version this), baos)
        (.. baos (write (.. (VarInt. (.. (:inputs this) (size))) (encode))))
        (doseq [#_"TransactionInput" in (:inputs this)]
            (.. in (bitcoinSerialize baos))
        )
        (.. baos (write (.. (VarInt. (.. (:outputs this) (size))) (encode))))
        (doseq [#_"TransactionOutput" out (:outputs this)]
            (.. out (bitcoinSerialize baos))
        )
        (Utils'uint32ToByteStreamLE (:lock-time this), baos)
        nil
    )

    ;;;
     ; Transactions can have an associated lock time, specified either as a block height or in seconds since the
     ; UNIX epoch.  A transaction is not allowed to be confirmed by miners until the lock time is reached, and
     ; since Bitcoin 0.8+ a transaction that did not end its lock period (non final) is considered to be non
     ; standard and won't be relayed or included in the memory pool either.
     ;;
    #_public
    (§ method #_"long" getLockTime []
        (:lock-time this)
    )

    ;;;
     ; Transactions can have an associated lock time, specified either as a block height or in seconds since the
     ; UNIX epoch.  A transaction is not allowed to be confirmed by miners until the lock time is reached, and
     ; since Bitcoin 0.8+ a transaction that did not end its lock period (non final) is considered to be non
     ; standard and won't be relayed or included in the memory pool either.
     ;;
    #_public
    (§ method #_"void" setLockTime [#_"long" __lockTime]
        (.. this (unCache))
        (let [#_"boolean" __seqNumSet false]
            (doseq [#_"TransactionInput" input (:inputs this)]
                (when (not= (.. input (getSequenceNumber)) TransactionInput'NO_SEQUENCE)
                    (§ ass __seqNumSet true)
                    (§ break )
                )
            )
            (when (and (not= __lockTime 0) (or (not __seqNumSet) (.. (:inputs this) (isEmpty))))
                ;; At least one input must have a non-default sequence number for lock times to have any effect.
                ;; For instance one of them can be set to zero to make this feature work.
                (.. Transaction'log (warn "You are setting the lock time on a transaction but none of the inputs have non-default sequence numbers. This will not do what you expect!"))
            )
            (§ assoc this :lock-time __lockTime)
        )
        nil
    )

    #_public
    (§ method #_"long" getVersion []
        (:version this)
    )

    #_public
    (§ method #_"void" setVersion [#_"int" version]
        (§ assoc this :version version)
        (.. this (unCache))
        nil
    )

    ;;; Returns an unmodifiable view of all inputs. ;;
    #_public
    (§ method #_"List<TransactionInput>" getInputs []
        (Collections/unmodifiableList (:inputs this))
    )

    ;;; Returns an unmodifiable view of all outputs. ;;
    #_public
    (§ method #_"List<TransactionOutput>" getOutputs []
        (Collections/unmodifiableList (:outputs this))
    )

    ;;;
     ; Returns the list of transacion outputs, whether spent or unspent, that match a wallet by address or that are
     ; watched by a wallet, i.e. transaction outputs whose script's address is controlled by the wallet and transaction
     ; outputs whose script is watched by the wallet.
     ;
     ; @param transactionBag The wallet that controls addresses and watches scripts.
     ; @return linked list of outputs relevant to the wallet in this transaction.
     ;;
    #_public
    (§ method #_"List<TransactionOutput>" getWalletOutputs [#_"TransactionBag" __transactionBag]
        (let [#_"List<TransactionOutput>" __walletOutputs (LinkedList. #_"<>")]

            (doseq [#_"TransactionOutput" o (:outputs this)]
                (when (.. o (isMine __transactionBag))
                    (.. __walletOutputs (add o))
                )
            )

            __walletOutputs
        )
    )

    ;;; Randomly re-orders the transaction outputs: good for privacy. ;;
    #_public
    (§ method #_"void" shuffleOutputs []
        (Collections/shuffle (:outputs this))
        nil
    )

    ;;; Same as getInputs().get(index). ;;
    #_public
    (§ method #_"TransactionInput" getInput [#_"long" index]
        (.. (:inputs this) (get (int index)))
    )

    ;;; Same as getOutputs().get(index). ;;
    #_public
    (§ method #_"TransactionOutput" getOutput [#_"long" index]
        (.. (:outputs this) (get (int index)))
    )

    ;;;
     ; Returns the confidence object for this transaction from the {@link TxConfidenceTable}
     ; referenced by the implicit {@link Context}.
     ;;
    #_public
    (§ method #_"TransactionConfidence" getConfidence []
        (.. this (getConfidence (Context'get)))
    )

    ;;;
     ; Returns the confidence object for this transaction from the {@link TxConfidenceTable}
     ; referenced by the given {@link Context}.
     ;;
    #_public
    (§ method #_"TransactionConfidence" getConfidence [#_"Context" context]
        (.. this (getConfidence (.. context (getConfidenceTable))))
    )

    ;;;
     ; Returns the confidence object for this transaction from the {@link TxConfidenceTable}.
     ;;
    #_public
    (§ method #_"TransactionConfidence" getConfidence [#_"TxConfidenceTable" table]
        (when (nil? (:confidence this))
            (§ assoc this :confidence (.. table (getOrCreate (.. this (getHash)))))
        )
        (:confidence this)
    )

    ;;; Check if the transaction has a known confidence. ;;
    #_public
    (§ method #_"boolean" hasConfidence []
        (not= (.. this (getConfidence) (getConfidenceType)) ConfidenceType'UNKNOWN)
    )

    #_override
    #_public
    (§ method #_"boolean" equals [#_"Object" o]
        (cond
            (= this o) true
            (or (nil? o) (not= (getClass) (.. o (getClass)))) false
            :else (.. this (getHash) (equals (.. (cast Transaction o) (getHash))))
        )
    )

    #_override
    #_public
    (§ method #_"int" hashCode []
        (.. this (getHash) (hashCode))
    )

    ;;;
     ; Gets the count of regular SigOps in this transactions.
     ;;
    #_public
    #_throws #_[ "ScriptException" ]
    (§ method #_"int" getSigOpCount []
        (let [#_"int" __sigOps 0]
            (doseq [#_"TransactionInput" input (:inputs this)]
                (§ ass __sigOps (+ __sigOps (Script'getSigOpCount (.. input (getScriptBytes)))))
            )
            (doseq [#_"TransactionOutput" output (:outputs this)]
                (§ ass __sigOps (+ __sigOps (Script'getSigOpCount (.. output (getScriptBytes)))))
            )
            __sigOps
        )
    )

    ;;;
     ; Check block height is in coinbase input script, for use after BIP 34
     ; enforcement is enabled.
     ;;
    #_public
    #_throws #_[ "VerificationException" ]
    (§ method #_"void" checkCoinBaseHeight [#_"int" height]
        (assert-argument (<= Block'BLOCK_HEIGHT_GENESIS height))
        (assert-state (.. this (isCoinBase)))

        ;; Check block height is in coinbase input script.
        (let [#_"TransactionInput" in (.. this (getInputs) (get 0))
              #_"ScriptBuilder" builder (ScriptBuilder.)]
            (.. builder (number height))
            (let [#_"byte[]" expected (.. builder (build) (getProgram))
                  #_"byte[]" actual (.. in (getScriptBytes))]
                (when (< (alength actual) (alength expected))
                    (throw (VerificationException. "Block height mismatch in coinbase."))
                )

                (loop-when-recur [#_"int" __scriptIdx 0] (< __scriptIdx (alength expected)) [(inc __scriptIdx)]
                    (when (not= (aget actual __scriptIdx) (aget expected __scriptIdx))
                        (throw (VerificationException. "Block height mismatch in coinbase."))
                    )
                )
            )
        )
        nil
    )

    ;;;
     ; Checks the transaction contents for sanity, in ways that can be done in a standalone manner.
     ; Does <b>not</b> perform all checks on a transaction such as whether the inputs are already spent.
     ; Specifically this method verifies:
     ;
     ; <ul>
     ;     <li>That there is at least one input and output.</li>
     ;     <li>That the serialized size is not larger than the max block size.</li>
     ;     <li>That no outputs have negative value.</li>
     ;     <li>That the outputs do not sum to larger than the max allowed quantity of coin in the system.</li>
     ;     <li>If the tx is a coinbase tx, the coinbase scriptSig size is within range.  Otherwise that
     ;     there are no coinbase inputs in the tx.</li>
     ; </ul>
     ;
     ; @throws VerificationException
     ;;
    #_public
    #_throws #_[ "VerificationException" ]
    (§ method #_"void" verify []
        (when (or (= (.. (:inputs this) (size)) 0) (= (.. (:outputs this) (size)) 0))
            (throw (VerificationException. "Transaction had no inputs or no outputs."))
        )
        (when (< Block'MAX_BLOCK_SIZE (.. this (getMessageSize)))
            (throw (VerificationException. "Transaction larger than MAX_BLOCK_SIZE"))
        )

        (let [#_"Coin" __valueOut Coin'ZERO #_"HashSet<TransactionOutPoint>" outpoints (HashSet. #_"<>")]
            (doseq [#_"TransactionInput" input (:inputs this)]
                (when (.. outpoints (contains (:outpoint input)))
                    (throw (VerificationException. "Duplicated outpoint"))
                )
                (.. outpoints (add (:outpoint input)))
            )
            (try
                (doseq [#_"TransactionOutput" output (:outputs this)]
                    (when (< (.. output (getValue) (signum)) 0) ;; getValue() can throw IllegalStateException
                        (throw (VerificationException. "Transaction output negative"))
                    )

                    (§ ass __valueOut (.. __valueOut (add (.. output (getValue)))))
                    (when (and (.. (:params this) (hasMaxMoney)) (< 0 (.. __valueOut (compareTo (.. (:params this) (getMaxMoney))))))
                        (throw (IllegalArgumentException.))
                    )
                )
                (catch IllegalStateException _
                    (throw (VerificationException. "Total transaction output value greater than possible"))
                )
                (catch IllegalArgumentException _
                    (throw (VerificationException. "Total transaction output value greater than possible"))
                )
            )

            (if (.. this (isCoinBase))
                (let [#_"int" n (alength (.. (:inputs this) (get 0) (getScriptBytes)))]
                    (when (not (<= 2 n 100))
                        (throw (VerificationException. "Coinbase script size out of range"))
                    )
                )
                (doseq [#_"TransactionInput" input (:inputs this)]
                    (when (.. input (isCoinBase))
                        (throw (VerificationException. "Coinbase input as input in non-coinbase transaction"))
                    )
                )
            )
        )
        nil
    )

    ;;;
     ; A transaction is time locked if at least one of its inputs is non-final and it has a lock time.
     ;
     ; To check if this transaction is final at a given height and time, see {@link Transaction#isFinal(int, long)}.
     ;;
    #_public
    (§ method #_"boolean" isTimeLocked []
        (and (not= (.. this (getLockTime)) 0) (some? (some #(.. % (hasSequence)) (.. this (getInputs)))))
    )

    ;;;
     ; Returns whether this transaction will opt into the
     ; <a href="https://github.com/bitcoin/bips/blob/master/bip-0125.mediawiki">full replace-by-fee</a> semantics.
     ;;
    #_public
    (§ method #_"boolean" isOptInFullRBF []
        (some? (some #(.. % (isOptInFullRBF)) (.. this (getInputs))))
    )

    ;;;
     ; Returns true if this transaction is considered finalized and can be placed in a block.  Non-finalized
     ; transactions won't be included by miners and can be replaced with newer versions using sequence numbers.
     ; This is useful in certain types of <a href="http://en.bitcoin.it/wiki/Contracts">contracts</a>, such as
     ; micropayment channels.
     ;
     ; Note that currently the replacement feature is disabled in Bitcoin Core and will need to be
     ; re-activated before this functionality is useful.
     ;;
    #_public
    (§ method #_"boolean" isFinal [#_"int" height, #_"long" secs]
        (let [#_"long" time (.. this (getLockTime))]
            (or (< time (if (< time Transaction'LOCKTIME_THRESHOLD) height secs)) (not (.. this (isTimeLocked))))
        )
    )

    ;;;
     ; Returns either the lock time as a date, if it was specified in seconds, or an estimate based on the time in
     ; the current head block if it was specified as a block time.
     ;;
    #_public
    (§ method #_"Date" estimateLockTime [#_"AbstractBlockChain" chain]
        (if (< (:lock-time this) Transaction'LOCKTIME_THRESHOLD) (.. chain (estimateBlockTime (int (.. this (getLockTime))))) (Date. (* (.. this (getLockTime)) 1000)))
    )

    ;;;
     ; Returns the purpose for which this transaction was created.  See the javadoc for {@link Purpose} for more
     ; information on the point of this field and what it can be.
     ;;
    #_public
    (§ method #_"TransactionPurpose" getPurpose []
        (:purpose this)
    )

    ;;;
     ; Marks the transaction as being created for the given purpose.  See the javadoc for {@link Purpose} for more
     ; information on the point of this field and what it can be.
     ;;
    #_public
    (§ method #_"void" setPurpose [#_"TransactionPurpose" purpose]
        (§ assoc this :purpose purpose)
        nil
    )

    ;;;
     ; Getter for {@link #exchangeRate}.
     ;;
    #_nilable
    #_public
    (§ method #_"ExchangeRate" getExchangeRate []
        (:exchange-rate this)
    )

    ;;;
     ; Setter for {@link #exchangeRate}.
     ;;
    #_public
    (§ method #_"void" setExchangeRate [#_"ExchangeRate" __exchangeRate]
        (§ assoc this :exchange-rate __exchangeRate)
        nil
    )

    ;;;
     ; Returns the transaction {@link #memo}.
     ;;
    #_public
    (§ method #_"String" getMemo []
        (:memo this)
    )

    ;;;
     ; Set the transaction {@link #memo}.
     ; It can be used to record the memo of the payment request that initiated the transaction.
     ;;
    #_public
    (§ method #_"void" setMemo [#_"String" memo]
        (§ assoc this :memo memo)
        nil
    )
)

;;;
 ; This interface is used to abstract the {@link Wallet} and the {@link Transaction}.
 ;;
#_public
(§ interface TransactionBag
    ;;; Returns true if this wallet contains a public key which hashes to the given hash. ;;
    (§ method #_"boolean" isPubKeyHashMine [#_"byte[]" __pubkeyHash])

    ;;; Returns true if this wallet contains a keypair with the given public key. ;;
    (§ method #_"boolean" isPubKeyMine [#_"byte[]" pubkey])

    ;;; Returns true if this wallet knows the script corresponding to the given hash. ;;
    (§ method #_"boolean" isPayToScriptHashMine [#_"byte[]" __payToScriptHash])

    ;;; Returns transactions from a specific pool. ;;
    (§ method #_"Map<Sha256Hash, Transaction>" getTransactionPool [#_"PoolType" pool])
)

;;;
 ; Represents a single transaction broadcast that we are performing.  A broadcast occurs after a new transaction
 ; is created (typically by a {@link Wallet}) and needs to be sent to the network.  A broadcast can succeed or fail.
 ; A success is defined as seeing the transaction be announced by peers via inv messages, thus indicating their acceptance.
 ; A failure is defined as not reaching acceptance within a timeout period, or getting an explicit reject message from
 ; a peer indicating that the transaction was not acceptable.
 ;;
#_public
(§ class TransactionBroadcast
    #_private
    #_static
    (def- #_"Logger" TransactionBroadcast'log (LoggerFactory/getLogger TransactionBroadcast))

    #_private
    (§ field- #_"SettableFuture<Transaction>" :future (SettableFuture/create))
    #_private
    (§ field- #_"PeerGroup" :peer-group)
    #_private
    (§ field- #_"Transaction" :tx)
    #_private
    (§ field- #_"int" :min-connections)
    #_private
    (§ field- #_"int" :num-waiting-for)

    ;;; Used for shuffling the peers before broadcast: unit tests can replace this to make themselves deterministic. ;;
    #_testing
    #_public
    #_static
    (def #_"Random" TransactionBroadcast'RANDOM (Random.))

    ;; Tracks which nodes sent us a reject message about this broadcast, if any.  Useful for debugging.
    #_private
    (§ field- #_"Map<Peer, RejectMessage>" :rejects (Collections/synchronizedMap (HashMap. #_"<Peer, RejectMessage>")))

    (§ constructor TransactionBroadcast [#_"PeerGroup" __peerGroup, #_"Transaction" tx]
        (§ assoc this :peer-group __peerGroup)
        (§ assoc this :tx tx)
        (§ assoc this :min-connections (max 1, (.. __peerGroup (getMinBroadcastConnections))))
        this
    )

    #_public
    (§ method #_"ListenableFuture<Transaction>" future []
        (:future this)
    )

    #_public
    (§ method #_"void" setMinConnections [#_"int" __minConnections]
        (§ assoc this :min-connections __minConnections)
        nil
    )

    #_private
    (§ field- #_"PreMessageReceivedEventListener" :rejection-listener (PreMessageReceivedEventListener.)
        (§ anon
            #_override
            #_public
            (§ method #_"Message" onPreMessageReceived [#_"Peer" peer, #_"Message" m]
                (when (instance? RejectMessage m)
                    (let [#_"RejectMessage" __rejectMessage (cast RejectMessage m)]
                        (when (.. (:tx this) (getHash) (equals (.. __rejectMessage (getRejectedObjectHash))))
                            (.. (:rejects this) (put peer, __rejectMessage))
                            (let [#_"int" size (.. (:rejects this) (size))
                                  #_"long" threshold (Math/round (/ (:num-waiting-for this) 2.0))]
                                (when (< threshold size)
                                    (.. TransactionBroadcast'log (warn "Threshold for considering broadcast rejected has been reached ({}/{})", size, threshold))
                                    (.. (:future this) (setException (RejectedTransactionException. (:tx this), __rejectMessage)))
                                    (.. (:peer-group this) (removePreMessageReceivedEventListener this))
                                )
                            )
                        )
                    )
                )
                m
            )
        ))

    #_public
    (§ method #_"ListenableFuture<Transaction>" broadcast []
        (.. (:peer-group this) (addPreMessageReceivedEventListener Threading'SAME_THREAD, (:rejection-listener this)))
        (.. TransactionBroadcast'log (info "Waiting for {} peers required for broadcast, we have {} ...", (:min-connections this), (.. (:peer-group this) (getConnectedPeers) (size))))
        (.. (:peer-group this) (waitForPeers (:min-connections this)) (addListener (EnoughAvailablePeers.), Threading'SAME_THREAD))
        (:future this)
    )

    #_private
    (§ class- EnoughAvailablePeers (§ implements Runnable)
        #_override
        #_public
        (§ method #_"void" run []
            ;; We now have enough connected peers to send the transaction.
            ;; This can be called immediately if we already have enough.  Otherwise it'll be called from a peer thread.

            ;; We will send the tx simultaneously to half the connected peers and wait to hear back from at least half
            ;; of the other half, i.e. with 4 peers connected we will send the tx to 2 randomly chosen peers, and then
            ;; wait for it to show up on one of the other two.  This will be taken as sign of network acceptance.  As can
            ;; be seen, 4 peers is probably too little - it doesn't taken many broken peers for tx propagation to have
            ;; a big effect.
            (let [#_"List<Peer>" peers (.. (:peer-group this) (getConnectedPeers))] ;; snapshots
                ;; Prepare to send the transaction by adding a listener that'll be called when confidence changes.
                ;; Only bother with this if we might actually hear back:
                (when (< 1 (:min-connections this))
                    (.. (:tx this) (getConfidence) (addEventListener (ConfidenceChange.)))
                )
                ;; Bitcoin Core sends an inv in this case and then lets the peer request the tx data.  We just
                ;; blast out the TX here for a couple of reasons.  Firstly it's simpler: in the case where we have
                ;; just a single connection we don't have to wait for getdata to be received and handled before
                ;; completing the future in the code immediately below.  Secondly, it's faster.  The reason the
                ;; Bitcoin Core sends an inv is privacy - it means you can't tell if the peer originated the
                ;; transaction or not.  However, we are not a fully validating node and this is advertised in
                ;; our version message, as SPV nodes cannot relay it doesn't give away any additional information
                ;; to skip the inv here - we wouldn't send invs anyway.
                (let [#_"int" __numConnected (.. peers (size))
                      #_"int" __numToBroadcastTo (int (max 1, (Math/round (Math/ceil (/ (.. peers (size)) 2.0)))))]
                    (§ assoc this :num-waiting-for (int (Math/ceil (/ (- (.. peers (size)) __numToBroadcastTo) 2.0))))
                    (Collections/shuffle peers, TransactionBroadcast'RANDOM)
                    (§ ass peers (.. peers (subList 0, __numToBroadcastTo)))
                    (.. TransactionBroadcast'log (info "broadcastTransaction: We have {} peers, adding {} to the memory pool", __numConnected, (.. (:tx this) (getHashAsString))))
                    (.. TransactionBroadcast'log (info "Sending to {} peers, will wait for {}, sending to: {}", __numToBroadcastTo, (:num-waiting-for this), (.. (Joiner/on ",") (join peers))))
                    (doseq [#_"Peer" peer peers]
                        (try
                            (.. peer (sendMessage (:tx this)))
                            ;; We don't record the peer as having seen the tx in the memory pool because we want to track only
                            ;; how many peers announced to us.
                            (catch Exception e
                                (.. TransactionBroadcast'log (error "Caught exception sending to {}", peer, e))
                            )
                        )
                    )
                    ;; If we've been limited to talk to only one peer, we can't wait to hear back because the
                    ;; remote peer won't tell us about transactions we just announced to it for obvious reasons.
                    ;; So we just have to assume we're done, at that point.  This happens when we're not given
                    ;; any peer discovery source and the user just calls connectTo() once.
                    (when (= (:min-connections this) 1)
                        (.. (:peer-group this) (removePreMessageReceivedEventListener (:rejection-listener this)))
                        (.. (:future this) (set (:tx this)))
                    )
                )
            )
            nil
        )
    )

    #_private
    (§ field- #_"int" :num-seem-peers)
    #_private
    (§ field- #_"boolean" :mined)

    #_private
    (§ class- ConfidenceChange (§ implements TransactionConfidenceListener)
        #_override
        #_public
        (§ method #_"void" onConfidenceChanged [#_"TransactionConfidence" conf, #_"ConfidenceChangeReason" reason]
            ;; The number of peers that announced this tx has gone up.
            (let [#_"int" __numSeenPeers (+ (.. conf (numBroadcastPeers)) (.. (:rejects this) (size)))
                  #_"boolean" mined (some? (.. (:tx this) (getAppearsInHashes)))]
                (.. TransactionBroadcast'log (info "broadcastTransaction: {}:  TX {} seen by {} peers{}", reason, (.. (:tx this) (getHashAsString)), __numSeenPeers, (if mined " and mined" "")))

                ;; Progress callback on the requested thread.
                (.. this (invokeAndRecord __numSeenPeers, mined))

                (when (or (<= (:num-waiting-for this) __numSeenPeers) mined)
                    ;; We've seen the min required number of peers announce the transaction, or it was included
                    ;; in a block.  Normally we'd expect to see it fully propagate before it gets mined, but
                    ;; it can be that a block is solved very soon after broadcast, and it's also possible that
                    ;; due to version skew and changes in the relay rules our transaction is not going to
                    ;; fully propagate yet can get mined anyway.
                    ;;
                    ;; Note that we can't wait for the current number of connected peers right now because we
                    ;; could have added more peers after the broadcast took place, which means they won't
                    ;; have seen the transaction.  In future when peers sync up their memory pools after they
                    ;; connect we could come back and change this.
                    ;;
                    ;; We're done!  It's important that the PeerGroup lock is not held (by this thread) at this
                    ;; point to avoid triggering inversions when the Future completes.
                    (.. TransactionBroadcast'log (info "broadcastTransaction: {} complete", (.. (:tx this) (getHash))))
                    (.. (:peer-group this) (removePreMessageReceivedEventListener (:rejection-listener this)))
                    (.. conf (removeEventListener this))
                    (.. (:future this) (set (:tx this))) ;; RE-ENTRANCY POINT
                )
            )
            nil
        )
    )

    #_private
    (§ method- #_"void" invokeAndRecord [#_"int" __numSeenPeers, #_"boolean" mined]
        (§ sync this
            (§ assoc this :num-seem-peers __numSeenPeers)
            (§ assoc this :mined mined)
        )
        (.. this (invokeProgressCallback __numSeenPeers, mined))
        nil
    )

    #_private
    (§ method- #_"void" invokeProgressCallback [#_"int" __numSeenPeers, #_"boolean" mined]
        (let [#_"ProgressCallback" callback
              #_"Executor" executor]
            (§ sync this
                (§ ass callback (:callback this))
                (§ ass executor (:progress-callback-executor this))
            )
            (when (some? callback)
                (let [#_"double" progress (min 1.0, (if mined 1.0 (/ __numSeenPeers (double (:num-waiting-for this)))))]
                    (assert-state (<= 0.0 progress 1.0), progress)
                    (try
                        (cond (nil? executor)
                            (do
                                (.. callback (onBroadcastProgress progress))
                            )
                            :else
                            (do
                                (.. executor (execute (Runnable.)
                                (§ anon
                                    #_override
                                    #_public
                                    (§ method #_"void" run []
                                        (.. callback (onBroadcastProgress progress))
                                        nil
                                    )
                                )))
                            )
                        )
                        (catch Throwable e
                            (.. TransactionBroadcast'log (error "Exception during progress callback", e))
                        )
                    )
                )
            )
        )
        nil
    )

    ;;; An interface for receiving progress information on the propagation of the tx, from 0.0 to 1.0 ;;
    #_public
    (§ interface ProgressCallback
        ;;;
         ; onBroadcastProgress will be invoked on the provided executor when the progress of the transaction
         ; broadcast has changed, because the transaction has been announced by another peer or because the transaction
         ; was found inside a mined block (in this case progress will go to 1.0 immediately).  Any exceptions thrown
         ; by this callback will be logged and ignored.
         ;;
        (§ method #_"void" onBroadcastProgress [#_"double" progress])
    )

    #_nilable
    #_private
    (§ field- #_"ProgressCallback" :callback)
    #_nilable
    #_private
    (§ field- #_"Executor" :progress-callback-executor)

    ;;;
     ; Sets the given callback for receiving progress values, which will run on the user thread.
     ; See {@link Threading} for details.  If the broadcast has already started then the callback will
     ; be invoked immediately with the current progress.
     ;;
    #_public
    (§ method #_"void" setProgressCallback [#_"ProgressCallback" callback]
        (.. this (setProgressCallback callback, Threading'USER_THREAD))
        nil
    )

    ;;;
     ; Sets the given callback for receiving progress values, which will run on the given executor.  If the executor
     ; is null, then the callback will run on a network thread and may be invoked multiple times in parallel.  You
     ; probably want to provide your UI thread or Threading.USER_THREAD for the second parameter.  If the broadcast
     ; has already started, then the callback will be invoked immediately with the current progress.
     ;;
    #_public
    (§ method #_"void" setProgressCallback [#_"ProgressCallback" callback, #_nilable #_"Executor" executor]
        (let [#_"boolean" __shouldInvoke
              #_"int" num
              #_"boolean" mined]
            (§ sync this
                (§ assoc this :callback callback)
                (§ assoc this :progress-callback-executor executor)
                (§ ass num (:num-seem-peers this))
                (§ ass mined (:mined this))
                (§ ass __shouldInvoke (< 0 (:num-waiting-for this)))
            )
            (when __shouldInvoke
                (.. this (invokeProgressCallback num, mined))
            )
        )
        nil
    )
)

;;;
 ; A general interface which declares the ability to broadcast transactions.
 ; This is implemented by {@link PeerGroup}.
 ;;
#_public
(§ interface TransactionBroadcaster
    ;;; Broadcast the given transaction on the network. ;;
    (§ method #_"TransactionBroadcast" broadcastTransaction [#_"Transaction" tx])
)

;; TODO: Modify the getDepthInBlocks method to require the chain height to be specified, in preparation for ceasing to touch every tx on every block.

;;;
 ; A TransactionConfidence object tracks data you can use to make a confidence decision about a transaction.
 ; It also contains some pre-canned rules for common scenarios: if you aren't really sure what level of confidence
 ; you need, these should prove useful.  You can get a confidence object using {@link Transaction#getConfidence()}.
 ; They cannot be constructed directly.
 ;
 ; Confidence in a transaction can come in multiple ways:
 ;
 ; <ul>
 ; <li>Because you created it yourself and only you have the necessary keys.</li>
 ; <li>Receiving it from a fully validating peer you know is trustworthy, for instance, because it's run by yourself.</li>
 ; <li>Receiving it from a peer on the network you randomly chose.  If your network connection is not being
 ;     intercepted, you have a pretty good chance of connecting to a node that is following the rules.</li>
 ; <li>Receiving it from multiple peers on the network.  If your network connection is not being intercepted,
 ;     hearing about a transaction from multiple peers indicates the network has accepted the transaction and
 ;     thus miners likely have too (miners have the final say in whether a transaction becomes valid or not).</li>
 ; <li>Seeing the transaction appear appear in a block on the main chain.  Your confidence increases as the transaction
 ;     becomes further buried under work.  Work can be measured either in blocks (roughly, units of time), or
 ;     amount of work done.</li>
 ; </ul>
 ;
 ; Alternatively, you may know that the transaction is "dead", that is, one or more of its inputs have
 ; been double spent and will never confirm unless there is another re-org.
 ;
 ; TransactionConfidence is updated via the {@link TransactionConfidence#incrementDepthInBlocks()}
 ; method to ensure the block depth is up to date.
 ; To make a copy that won't be changed, use {@link TransactionConfidence#duplicate()}.
 ;;
#_public
(§ class TransactionConfidence
    ;;;
     ; The peers that have announced the transaction to us.  Network nodes don't have stable identities, so we use
     ; IP address as an approximation.  It's obviously vulnerable to being gamed if we allow arbitrary people to connect
     ; to us, so only peers we explicitly connected to should go here.
     ;;
    #_private
    (§ field- #_"CopyOnWriteArrayList<PeerAddress>" :broadcast-by)
    ;;; The time the transaction was last announced to us. ;;
    #_private
    (§ field- #_"Date" :last-broadcasted-at)
    ;;; The Transaction that this confidence object is associated with. ;;
    #_private
    (§ field- #_"Sha256Hash" :hash)
    ;; Lazily created listeners array.
    #_private
    (§ field- #_"CopyOnWriteArrayList<ListenerRegistration<TransactionConfidenceListener>>" :listeners)

    ;; The depth of the transaction on the best chain in blocks.  An unconfirmed block has depth 0.
    #_private
    (§ field- #_"int" :depth)

    ;;; Describes the state of the transaction in general terms.  Properties can be read to learn specifics. ;;
    #_public
    (§ enum ConfidenceType
        ;;; If BUILDING, then the transaction is included in the best chain and your confidence in it is increasing. ;;
        (§ item ConfidenceType'BUILDING    1)

        ;;;
         ; If PENDING, then the transaction is unconfirmed and should be included shortly, as long as it is being
         ; announced and is considered valid by the network.  A pending transaction will be announced if the containing
         ; wallet has been attached to a live {@link PeerGroup} using {@link PeerGroup#addWallet(Wallet)}.
         ; You can estimate how likely the transaction is to be included by connecting to a bunch of nodes then measuring
         ; how many announce it, using {@link TransactionConfidence#numBroadcastPeers()}.
         ; Or if you saw it from a trusted peer, you can assume it's valid and will get mined sooner or later as well.
         ;;
        (§ item ConfidenceType'PENDING     2)

        ;;;
         ; If DEAD, then it means the transaction won't confirm unless there is another re-org,
         ; because some other transaction is spending one of its inputs.  Such transactions should be alerted to the user
         ; so they can take action, e.g. suspending shipment of goods if they are a merchant.
         ; It can also mean that a coinbase transaction has been made dead from it being moved onto a side chain.
         ;;
        (§ item ConfidenceType'DEAD        4)

        ;;;
         ; If IN_CONFLICT, then it means there is another transaction (or several other transactions) spending one
         ; (or several) of its inputs but nor this transaction nor the other/s transaction/s are included in the best chain.
         ; The other/s transaction/s should be IN_CONFLICT too.
         ; IN_CONFLICT can be thought as an intermediary state between a. PENDING and BUILDING or b. PENDING and DEAD.
         ; Another common name for this situation is "double spend".
         ;;
        (§ item ConfidenceType'IN_CONFLICT 5)

        ;;;
         ; If a transaction hasn't been broadcast yet, or there's no record of it, its confidence is UNKNOWN.
         ;;
        (§ item ConfidenceType'UNKNOWN     0)

        #_public
        (§ field #_"int" :value)

        #_private
        (§ constructor- ConfidenceType [#_"int" value]
            (§ assoc this :value value)
            this
        )
    )

    #_private
    (§ field- #_"ConfidenceType" :confidence-type ConfidenceType'UNKNOWN)
    #_private
    (§ field- #_"int" :appeared-at-chain-height -1)
    ;; The transaction that double spent this one, if any.
    #_private
    (§ field- #_"Transaction" :overriding-transaction)

    ;;;
     ; Information about where the transaction was first seen (network, sent direct from peer, created by ourselves).
     ; Useful for risk analyzing pending transactions.  Probably not that useful after a tx is included in the chain,
     ; unless re-org double spends start happening frequently.
     ;;
    #_public
    #_static
    #_enum
    (def ConfidenceSource'values
    #{
        ;;; We don't know where the transaction came from. ;;
        :ConfidenceSource'UNKNOWN
        ;;; We got this transaction from a network peer. ;;
        :ConfidenceSource'NETWORK
        ;;; This transaction was created by our own wallet, so we know it's not a double spend. ;;
        :ConfidenceSource'SELF
    })
    #_private
    (§ field- #_"ConfidenceSource" :source :ConfidenceSource'UNKNOWN)

    #_public
    (§ constructor TransactionConfidence [#_"Sha256Hash" hash]
        ;; Assume a default number of peers for our set.
        (§ assoc this :broadcast-by (CopyOnWriteArrayList. #_"<>"))
        (§ assoc this :listeners (CopyOnWriteArrayList. #_"<>"))
        (§ assoc this :hash hash)
        this
    )

    ;;;
     ; A confidence listener is informed when the level of {@link TransactionConfidence} is updated by something, like
     ; for example a {@link Wallet}.  You can add listeners to update your user interface or manage your order tracking
     ; system when confidence levels pass a certain threshold.  <b>Note that confidence can go down as well as up.</b>
     ; For example, this can happen if somebody is doing a double-spend attack against you.  Whilst it's unlikely, your
     ; code should be able to handle that in order to be correct.
     ;
     ; During listener execution, it's safe to remove the current listener but not others.
     ;;
    #_public
    (§ interface TransactionConfidenceListener
        ;;; An enum that describes why a transaction confidence listener is being invoked (i.e. the class of change). ;;
        #_static
        #_enum
        (def ConfidenceChangeReason'values
        #{
            ;;;
             ; Occurs when the type returned by {@link TransactionConfidence#getConfidenceType()} has changed.
             ; For example, if a PENDING transaction changes to BUILDING or DEAD, then this reason will be given.
             ; It's a high level summary.
             ;;
            :ConfidenceChangeReason'TYPE

            ;;;
             ; Occurs when a transaction that is in the best known block chain gets buried by another block.  If you're
             ; waiting for a certain number of confirmations, this is the reason to watch out for.
             ;;
            :ConfidenceChangeReason'DEPTH

            ;;;
             ; Occurs when a pending transaction (not in the chain) was announced by another connected peers.  By
             ; watching the number of peers that announced a transaction go up, you can see whether it's being
             ; accepted by the network or not.  If all your peers announce, it's a pretty good bet the transaction
             ; is considered relayable and has thus reached the miners.
             ;;
            :ConfidenceChangeReason'SEEN_PEERS
        })

        (§ method #_"void" onConfidenceChanged [#_"TransactionConfidence" confidence, #_"ConfidenceChangeReason" reason])
    )

    ;; This is used to ensure that confidence objects which aren't referenced from anywhere but which have an event
    ;; listener set on them don't become eligible for garbage collection.  Otherwise the TxConfidenceTable, which only
    ;; has weak references to these objects, would not be enough to keep the event listeners working as transactions
    ;; propagate around the network - it cannot know directly if the API user is interested in the object, so it uses
    ;; heap reachability as a proxy for interest.
    ;;
    ;; We add ourselves to this set when a listener is added and remove ourselves when the listener list is empty.
    #_private
    #_static
    (def- #_"Set<TransactionConfidence>" TransactionConfidence'PINNED_CONFIDENCE_OBJECTS (Collections/synchronizedSet (HashSet. #_"<TransactionConfidence>")))

    ;;;
     ; Adds an event listener that will be run when this confidence object is updated.  The listener will be locked
     ; and is likely to be invoked on a peer thread.
     ;
     ; Note that this is NOT called when every block arrives.  Instead it is called when the transaction
     ; transitions between confidence states, i.e. from not being seen in the chain to being seen (not necessarily in
     ; the best chain).  If you want to know when the transaction gets buried under another block, consider using
     ; a future from {@link #getDepthFuture(int)}.
     ;;
    #_public
    (§ method #_"void" addEventListener [#_"Executor" executor, #_"TransactionConfidenceListener" listener]
        (ensure some? listener)

        (.. (:listeners this) (addIfAbsent (ListenerRegistration. #_"<>" listener, executor)))
        (.. TransactionConfidence'PINNED_CONFIDENCE_OBJECTS (add this))
        nil
    )

    ;;;
     ; Adds an event listener that will be run when this confidence object is updated.  The listener will be locked
     ; and is likely to be invoked on a peer thread.
     ;
     ; Note that this is NOT called when every block arrives.  Instead it is called when the transaction
     ; transitions between confidence states, i.e. from not being seen in the chain to being seen (not necessarily in
     ; the best chain).  If you want to know when the transaction gets buried under another block, implement a
     ; {@link BlockChainListener}, attach it to a {@link BlockChain} and then use the getters on the
     ; confidence object to determine the new depth.
     ;;
    #_public
    (§ method #_"void" addEventListener [#_"TransactionConfidenceListener" listener]
        (.. this (addEventListener Threading'USER_THREAD, listener))
        nil
    )

    #_public
    (§ method #_"boolean" removeEventListener [#_"TransactionConfidenceListener" listener]
        (ensure some? listener)

        (let [#_"boolean" removed (ListenerRegistration'removeFromList listener, (:listeners this))]
            (when (.. (:listeners this) (isEmpty))
                (.. TransactionConfidence'PINNED_CONFIDENCE_OBJECTS (remove this))
            )
            removed
        )
    )

    ;;;
     ; Returns the chain height at which the transaction appeared if confidence type is BUILDING.
     ;
     ; @throws IllegalStateException if the confidence type is not BUILDING.
     ;;
    #_public
    #_synchronized
    (§ method #_"int" getAppearedAtChainHeight []
        (when (not= (.. this (getConfidenceType)) ConfidenceType'BUILDING)
            (throw (IllegalStateException. (str "Confidence type is " (.. this (getConfidenceType)) ", not BUILDING")))
        )
        (:appeared-at-chain-height this)
    )

    ;;;
     ; The chain height at which the transaction appeared, if it has been seen in the best chain.
     ; Automatically sets the current type to {@link ConfidenceType#BUILDING} and depth to one.
     ;;
    #_public
    #_synchronized
    (§ method #_"void" setAppearedAtChainHeight [#_"int" __appearedAtChainHeight]
        (when (< __appearedAtChainHeight 0)
            (throw (IllegalArgumentException. "appearedAtChainHeight out of range"))
        )

        (§ assoc this :appeared-at-chain-height __appearedAtChainHeight)
        (§ assoc this :depth 1)
        (.. this (setConfidenceType ConfidenceType'BUILDING))
        nil
    )

    ;;;
     ; Returns a general statement of the level of confidence you can have in this transaction.
     ;;
    #_public
    #_synchronized
    (§ method #_"ConfidenceType" getConfidenceType []
        (:confidence-type this)
    )

    ;;;
     ; Called by other objects in the system, like a {@link Wallet}, when new information about the confidence
     ; of a transaction becomes available.
     ;;
    #_public
    #_synchronized
    (§ method #_"void" setConfidenceType [#_"ConfidenceType" type]
        (when-not (= type (:confidence-type this))
            (§ assoc this :confidence-type type)
            (when (not= type ConfidenceType'DEAD)
                (§ assoc this :overriding-transaction nil)
            )
            (when (any = type ConfidenceType'PENDING ConfidenceType'IN_CONFLICT)
                (§ assoc this :depth 0)
                (§ assoc this :appeared-at-chain-height -1)
            )
        )
        nil
    )

    ;;;
     ; Called by a {@link Peer} when a transaction is pending and announced by a peer.  The more peers announce
     ; the transaction, the more peers have validated it (assuming your internet connection is not being intercepted).
     ; If confidence is currently unknown, sets it to {@link ConfidenceType#PENDING}.  Does not run listeners.
     ;
     ; @param address IP address of the peer, used as a proxy for identity.
     ; @return true if marked, false if this address was already seen.
     ;;
    #_public
    (§ method #_"boolean" markBroadcastBy [#_"PeerAddress" address]
        (§ assoc this :last-broadcasted-at (Utils'now))
        (when' (.. (:broadcast-by this) (addIfAbsent address)) => false ;; Duplicate.
            (§ sync this
                (when (= (.. this (getConfidenceType)) ConfidenceType'UNKNOWN)
                    (§ assoc this :confidence-type ConfidenceType'PENDING)
                )
            )
            true
        )
    )

    ;;;
     ; Returns how many peers have been passed to {@link TransactionConfidence#markBroadcastBy}.
     ;;
    #_public
    (§ method #_"int" numBroadcastPeers []
        (.. (:broadcast-by this) (size))
    )

    ;;;
     ; Returns a snapshot of {@link PeerAddress}es that announced the transaction.
     ;;
    #_public
    (§ method #_"Set<PeerAddress>" getBroadcastBy []
        (let [#_"ListIterator<PeerAddress>" iterator (.. (:broadcast-by this) (listIterator))]
            (Sets/newHashSet iterator)
        )
    )

    ;;; Returns true if the given address has been seen via markBroadcastBy(). ;;
    #_public
    (§ method #_"boolean" wasBroadcastBy [#_"PeerAddress" address]
        (.. (:broadcast-by this) (contains address))
    )

    ;;; Return the time the transaction was last announced to us. ;;
    #_public
    (§ method #_"Date" getLastBroadcastedAt []
        (:last-broadcasted-at this)
    )

    ;;; Set the time the transaction was last announced to us. ;;
    #_public
    (§ method #_"void" setLastBroadcastedAt [#_"Date" __lastBroadcastedAt]
        (§ assoc this :last-broadcasted-at __lastBroadcastedAt)
        nil
    )

    #_override
    #_public
    #_synchronized
    (§ method #_"String" toString []
        (let [#_"StringBuilder" sb (StringBuilder.)
              #_"int" peers (.. this (numBroadcastPeers))]
            (when (< 0 peers)
                (.. sb (append "Seen by ") (append peers) (append (if (< 1 peers) " peers" " peer")))
                (when (some? (:last-broadcasted-at this))
                    (.. sb (append " (most recently: ") (append (Utils'dateTimeFormat (:last-broadcasted-at this))) (append ")"))
                )
                (.. sb (append ". "))
            )
            (condp = (.. this (getConfidenceType))
                ConfidenceType'UNKNOWN     (.. sb (append "Unknown confidence level."))
                ConfidenceType'DEAD        (.. sb (append "Dead: overridden by double spend and will not confirm."))
                ConfidenceType'PENDING     (.. sb (append "Pending/unconfirmed."))
                ConfidenceType'IN_CONFLICT (.. sb (append "In conflict."))
                ConfidenceType'BUILDING    (.. sb (append (String/format Locale/US, "Appeared in best chain at height %d, depth %d.", (.. this (getAppearedAtChainHeight)), (.. this (getDepthInBlocks)))))
            )
            (when (not= (:source this) :ConfidenceSource'UNKNOWN)
                (.. sb (append " Source: ") (append (:source this)))
            )
            (.. sb (toString))
        )
    )

    ;;;
     ; Called by the wallet when the tx appears on the best chain and a new block is added to the top.
     ; Updates the internal counter that tracks how deeply buried the block is.
     ;
     ; @return the new depth
     ;;
    #_public
    #_synchronized
    (§ method #_"int" incrementDepthInBlocks []
        (§ update this :depth inc)
        (:depth this)
    )

    ;;;
     ; Depth in the chain is an approximation of how much time has elapsed since the transaction has been confirmed.
     ; On average there is supposed to be a new block every 10 minutes, but the actual rate may vary.  Bitcoin Core
     ; considers a transaction impractical to reverse after 6 blocks, but as of EOY 2011 network
     ; security is high enough that often only one block is considered enough even for high value transactions.
     ; For low value transactions like songs, or other cheap items, no blocks at all may be necessary.
     ;
     ; If the transaction appears in the top block, the depth is one.  If it's anything else (pending, dead, unknown)
     ; the depth is zero.
     ;;
    #_public
    #_synchronized
    (§ method #_"int" getDepthInBlocks []
        (:depth this)
    )

    ;;
     ; Set the depth in blocks.  Having one block confirmation is a depth of one.
     ;;
    #_public
    #_synchronized
    (§ method #_"void" setDepthInBlocks [#_"int" depth]
        (§ assoc this :depth depth)
        nil
    )

    ;;;
     ; Erases the set of broadcast/seen peers.  This cannot be called whilst the confidence is PENDING.  It is useful
     ; for saving memory and wallet space once a tx is buried so deep it doesn't seem likely to go pending again.
     ;;
    #_public
    (§ method #_"void" clearBroadcastBy []
        (assert-state (not= (.. this (getConfidenceType)) ConfidenceType'PENDING))
        (.. (:broadcast-by this) (clear))
        (§ assoc this :last-broadcasted-at nil)
        nil
    )

    ;;;
     ; If this transaction has been overridden by a double spend (is dead), this call returns the overriding transaction.
     ; Note that this call <b>can return null</b> if you have migrated an old wallet, as pre-Jan 2012 wallets did not
     ; store this information.
     ;
     ; @return the transaction that double spent this one.
     ; @throws IllegalStateException if confidence type is not DEAD.
     ;;
    #_public
    #_synchronized
    (§ method #_"Transaction" getOverridingTransaction []
        (when (not= (.. this (getConfidenceType)) ConfidenceType'DEAD)
            (throw (IllegalStateException. (str "Confidence type is " (.. this (getConfidenceType)) ", not DEAD")))
        )
        (:overriding-transaction this)
    )

    ;;;
     ; Called when the transaction becomes newly dead, that is, we learn that one of its inputs has already been spent
     ; in such a way that the double-spending transaction takes precedence over this one.  It will not become valid now
     ; unless there is a re-org.  Automatically sets the confidence type to DEAD.  The overriding transaction may not
     ; directly double spend this one, but could also have double spent a dependency of this tx.
     ;;
    #_public
    #_synchronized
    (§ method #_"void" setOverridingTransaction [#_nilable #_"Transaction" __overridingTransaction]
        (§ assoc this :overriding-transaction __overridingTransaction)
        (.. this (setConfidenceType ConfidenceType'DEAD))
        nil
    )

    ;;; Returns a copy of this object.  Event listeners are not duplicated. ;;
    #_public
    (§ method #_"TransactionConfidence" duplicate []
        (let [#_"TransactionConfidence" c (TransactionConfidence. (:hash this))]
            (.. (:broadcast-by c) (addAll (:broadcast-by this)))
            (§ assoc c :last-broadcasted-at (:last-broadcasted-at this))
            (§ sync this
                (§ assoc c :confidence-type (:confidence-type this))
                (§ assoc c :overriding-transaction (:overriding-transaction this))
                (§ assoc c :appeared-at-chain-height (:appeared-at-chain-height this))
            )
            c
        )
    )

    ;;;
     ; Call this after adjusting the confidence, for cases where listeners should be notified.  This has to be done
     ; explicitly rather than being done automatically because sometimes complex changes to transaction states can
     ; result in a series of confidence changes that are not really useful to see separately.  By invoking listeners
     ; explicitly, more precise control is available.  Note that this will run the listeners on the user code thread.
     ;;
    #_public
    (§ method #_"void" queueListeners [#_"ConfidenceChangeReason" reason]
        (doseq [#_"ListenerRegistration<TransactionConfidenceListener>" registration (:listeners this)]
            (.. (:executor registration) (execute (Runnable.)
            (§ anon
                #_override
                #_public
                (§ method #_"void" run []
                    (.. (:listener registration) (onConfidenceChanged (§ dhis TransactionConfidence), reason))
                    nil
                )
            )))
        )
        nil
    )

    ;;;
     ; The source of a transaction tries to identify where it came from originally.  For instance, did we download it
     ; from the peer to peer network, or make it ourselves, or receive it via Bluetooth, or import it from another app,
     ; and so on.  This information is useful for {@link CoinSelector} implementations to risk analyze
     ; transactions and decide when to spend them.
     ;;
    #_public
    #_synchronized
    (§ method #_"ConfidenceSource" getSource []
        (:source this)
    )

    ;;;
     ; The source of a transaction tries to identify where it came from originally.  For instance, did we download it
     ; from the peer to peer network, or make it ourselves, or receive it via Bluetooth, or import it from another app,
     ; and so on.  This information is useful for {@link CoinSelector} implementations to risk analyze
     ; transactions and decide when to spend them.
     ;;
    #_public
    #_synchronized
    (§ method #_"void" setSource [#_"ConfidenceSource" source]
        (§ assoc this :source source)
        nil
    )

    ;;;
     ; Returns a future that completes when the transaction has been confirmed by "depth" blocks.  For instance setting
     ; depth to one will wait until it appears in a block on the best chain, and zero will wait until it has been seen
     ; on the network.
     ;;
    #_public
    #_synchronized
    (§ method #_"ListenableFuture<TransactionConfidence>" getDepthFuture [#_"int" depth, #_"Executor" executor]
        (let [#_"SettableFuture<TransactionConfidence>" result (SettableFuture/create)]
            (when (<= depth (.. this (getDepthInBlocks)))
                (.. result (set this))
            )

            (.. this (addEventListener executor, (TransactionConfidenceListener.)
            (§ anon
                #_override
                #_public
                (§ method #_"void" onConfidenceChanged [#_"TransactionConfidence" confidence, #_"ConfidenceChangeReason" reason]
                    (when (<= depth (.. this (getDepthInBlocks)))
                        (.. this (removeEventListener this))
                        (.. result (set confidence))
                    )
                    nil
                )
            )))
            result
        )
    )

    #_public
    #_synchronized
    (§ method #_"ListenableFuture<TransactionConfidence>" getDepthFuture [#_"int" depth]
        (.. this (getDepthFuture depth, Threading'USER_THREAD))
    )

    #_public
    (§ method #_"Sha256Hash" getTransactionHash []
        (:hash this)
    )
)

;;;
 ; A transfer of coins from one address to another creates a transaction in which the outputs
 ; can be claimed by the recipient in the input of another transaction.  You can imagine a
 ; transaction as being a module which is wired up to others, the inputs of one have to be wired
 ; to the outputs of another.  The exceptions are coinbase transactions, which create new coins.
 ;
 ; Instances of this class are not safe for use by multiple threads.
 ;;
#_public
(§ class TransactionInput (§ extends ChildMessage)
    ;;; Magic sequence number that indicates there is no sequence number. ;;
    #_public
    #_static
    (def #_"long" TransactionInput'NO_SEQUENCE 0xffffffff)
    #_private
    #_static
    (def- #_"byte[]" TransactionInput'EMPTY_ARRAY (byte-array 0))
    ;; Magic outpoint index that indicates the input is in fact unconnected.
    #_private
    #_static
    (def- #_"long" TransactionInput'UNCONNECTED 0xffffffff)

    ;; Allows for altering transactions after they were broadcast.  Values below NO_SEQUENCE-1 mean it can be altered.
    #_private
    (§ field- #_"long" :sequence)
    ;;;
     ; The previous output transaction reference, as an OutPoint structure.  This contains the
     ; data needed to connect to the output of the transaction we're gathering coins from.
     ;;
    #_private
    (§ field- #_"TransactionOutPoint" :outpoint)
    ;; The "script bytes" might not actually be a script.  In coinbase transactions where new coins are minted there
    ;; is no input transaction, so instead the scriptBytes contains some extra stuff (like a rollover nonce) that we
    ;; don't care about much.  The bytes are turned into a Script object (cached below) on demand via a getter.
    #_private
    (§ field- #_"byte[]" :script-bytes)
    ;; The Script object obtained from parsing scriptBytes.  Only filled in on demand and if the transaction is not
    ;; coinbase.
    #_private
    (§ field- #_"WeakReference<Script>" :script-sig)
    ;;; Value of the output connected to the input, if known.  This field does not participate in equals()/hashCode(). ;;
    #_nilable
    #_private
    (§ field- #_"Coin" :value)

    ;;;
     ; Creates an input that connects to nothing - used only in creation of coinbase transactions.
     ;;
    #_public
    (§ constructor TransactionInput [#_"NetworkParameters" params, #_nilable #_"Transaction" parent, #_"byte[]" script]
        (§ this params, parent, script, (TransactionOutPoint. params, TransactionInput'UNCONNECTED, (cast Transaction nil)))
        this
    )

    #_public
    (§ constructor TransactionInput [#_"NetworkParameters" params, #_nilable #_"Transaction" parent, #_"byte[]" script, #_"TransactionOutPoint" outpoint]
        (§ this params, parent, script, outpoint, nil)
        this
    )

    #_public
    (§ constructor TransactionInput [#_"NetworkParameters" params, #_nilable #_"Transaction" parent, #_"byte[]" script, #_"TransactionOutPoint" outpoint, #_nilable #_"Coin" value]
        (§ super params)

        (§ assoc this :script-bytes script)
        (§ assoc this :outpoint outpoint)
        (§ assoc this :sequence TransactionInput'NO_SEQUENCE)
        (§ assoc this :value value)
        (.. this (setParent parent))
        (§ assoc this :length (+ 40 (if (some? script) (+ (VarInt'sizeOf (alength script)) (alength script)) 1)))
        this
    )

    ;;;
     ; Creates an UNSIGNED input that links to the given output.
     ;;
    (§ constructor TransactionInput [#_"NetworkParameters" params, #_"Transaction" parent, #_"TransactionOutput" output]
        (§ super params)

        (let [#_"long" __outputIndex (.. output (getIndex))]
            (if (some? (.. output (getParentTransaction)))
                (§ assoc this :outpoint (TransactionOutPoint. params, __outputIndex, (.. output (getParentTransaction))))
                (§ assoc this :outpoint (TransactionOutPoint. params, output))
            )
            (§ assoc this :script-bytes TransactionInput'EMPTY_ARRAY)
            (§ assoc this :sequence TransactionInput'NO_SEQUENCE)
            (.. this (setParent parent))
            (§ assoc this :value (.. output (getValue)))
            (§ assoc this :length 41)
            this
        )
    )

    ;;;
     ; Deserializes an input message.  This is usually part of a transaction message.
     ;;
    #_public
    #_throws #_[ "ProtocolException" ]
    (§ constructor TransactionInput [#_"NetworkParameters" params, #_nilable #_"Transaction" parent, #_"byte[]" payload, #_"int" offset]
        (§ super params, payload, offset)

        (.. this (setParent parent))
        (§ assoc this :value nil)
        this
    )

    ;;;
     ; Deserializes an input message.  This is usually part of a transaction message.
     ;
     ; @param params NetworkParameters object.
     ; @param payload Bitcoin protocol formatted byte array containing message content.
     ; @param offset The location of the first payload byte within the array.
     ; @param serializer The serializer to use for this message.
     ; @throws ProtocolException
     ;;
    #_public
    #_throws #_[ "ProtocolException" ]
    (§ constructor TransactionInput [#_"NetworkParameters" params, #_"Transaction" parent, #_"byte[]" payload, #_"int" offset, #_"BitcoinSerializer" serializer]
        (§ super params, payload, offset, parent, serializer, Message'UNKNOWN_LENGTH)

        (§ assoc this :value nil)
        this
    )

    #_override
    #_protected
    #_throws #_[ "ProtocolException" ]
    (§ method #_"void" parse []
        (§ assoc this :outpoint (TransactionOutPoint. (:params this), (:payload this), (:cursor this), this, (:serializer this)))
        (§ assoc this :cursor (+ (:cursor this) (.. (:outpoint this) (getMessageSize))))
        (let [#_"int" __scriptLen (int (.. this (readVarInt)))]
            (§ assoc this :length (+ (- (:cursor this) (:offset this)) __scriptLen 4))
            (§ assoc this :script-bytes (.. this (readBytes __scriptLen)))
            (§ assoc this :sequence (.. this (readUint32)))
        )
        nil
    )

    #_override
    #_protected
    (§ method #_"void" bitcoinSerializeToStream [#_"ByteArrayOutputStream" baos]
        (.. (:outpoint this) (bitcoinSerialize baos))
        (.. baos (write (.. (VarInt. (alength (:script-bytes this))) (encode))))
        (.. baos (write (:script-bytes this)))
        (Utils'uint32ToByteStreamLE (:sequence this), baos)
        nil
    )

    ;;;
     ; Coinbase transactions have special inputs with hashes of zero.  If this is such an input, returns true.
     ;;
    #_public
    (§ method #_"boolean" isCoinBase []
        (and (.. (:outpoint this) (getHash) (equals Sha256Hash'ZERO_HASH)) (= (& (.. (:outpoint this) (getIndex)) 0xffffffff) 0xffffffff)) ;; -1 but all is serialized to the wire as unsigned int.
    )

    ;;;
     ; Returns the script that is fed to the referenced output (scriptPubKey) script in order to satisfy it: usually
     ; contains signatures and maybe keys, but can contain arbitrary data if the output script accepts it.
     ;;
    #_public
    #_throws #_[ "ScriptException" ]
    (§ method #_"Script" getScriptSig []
        ;; Transactions that generate new coins don't actually have a script.
        ;; Instead this parameter is overloaded to be something totally different.
        (let [#_"Script" script (when (some? (:script-sig this)) (.. (:script-sig this) (get)))]
            (when (nil? script)
                (§ ass script (Script. (:script-bytes this)))
                (§ assoc this :script-sig (WeakReference. #_"<>" script))
            )
            script
        )
    )

    ;;; Set the given program as the scriptSig that is supposed to satisfy the connected output script. ;;
    #_public
    (§ method #_"void" setScriptSig [#_"Script" __scriptSig]
        (§ assoc this :script-sig (WeakReference. #_"<>" (ensure some? __scriptSig)))
        ;; TODO: This should all be cleaned up so we have a consistent internal representation.
        (.. this (setScriptBytes (.. __scriptSig (getProgram))))
        nil
    )

    ;;;
     ; Convenience method that returns the from address of this input by parsing the scriptSig.  The concept of
     ; a "from address" is not well defined in Bitcoin and you should not assume that senders of a transaction can
     ; actually receive coins on the same address they used to sign (e.g. this is not true for shared wallets).
     ;;
    #_deprecated
    #_public
    #_throws #_[ "ScriptException" ]
    (§ method #_"Address" getFromAddress []
        (when (.. this (isCoinBase))
            (throw (ScriptException. :ScriptError'UNKNOWN_ERROR, "This is a coinbase transaction which generates new coins. It does not have a from address."))
        )

        (.. this (getScriptSig) (getFromAddress (:params this)))
    )

    ;;;
     ; Sequence numbers allow participants in a multi-party transaction signing protocol to create new versions of the
     ; transaction independently of each other.  Newer versions of a transaction can replace an existing version that's
     ; in nodes memory pools if the existing version is time locked.  See the Contracts page on the Bitcoin wiki for
     ; examples of how you can use this feature to build contract protocols.
     ;;
    #_public
    (§ method #_"long" getSequenceNumber []
        (:sequence this)
    )

    ;;;
     ; Sequence numbers allow participants in a multi-party transaction signing protocol to create new versions of the
     ; transaction independently of each other.  Newer versions of a transaction can replace an existing version that's
     ; in nodes memory pools if the existing version is time locked.  See the Contracts page on the Bitcoin wiki for
     ; examples of how you can use this feature to build contract protocols.
     ;;
    #_public
    (§ method #_"void" setSequenceNumber [#_"long" sequence]
        (.. this (unCache))
        (§ assoc this :sequence sequence)
        nil
    )

    ;;;
     ; The "script bytes" might not actually be a script.  In coinbase transactions where new coins are minted there
     ; is no input transaction, so instead the scriptBytes contains some extra stuff (like a rollover nonce) that we
     ; don't care about much.  The bytes are turned into a Script object (cached below) on demand via a getter.
     ;
     ; @return the scriptBytes
     ;;
    #_public
    (§ method #_"byte[]" getScriptBytes []
        (:script-bytes this)
    )

    ;;; Clear input scripts, e.g. in preparation for signing. ;;
    #_public
    (§ method #_"void" clearScriptBytes []
        (.. this (setScriptBytes TransactionInput'EMPTY_ARRAY))
        nil
    )

    ;;;
     ; @param scriptBytes The scriptBytes to set.
     ;;
    (§ method #_"void" setScriptBytes [#_"byte[]" script]
        (.. this (unCache))
        (§ assoc this :script-sig nil)
        (let [#_"int" __oldLength (:length this)]
            (§ assoc this :script-bytes script)
            ;; 40 = previous_outpoint (36) + sequence (4)
            (let [#_"int" __newLength (+ 40 (if (some? script) (+ (VarInt'sizeOf (alength script)) (alength script)) 1))]
                (.. this (adjustLength (- __newLength __oldLength)))
            )
        )
        nil
    )

    ;;;
     ; @return the Transaction that owns this input.
     ;;
    #_public
    (§ method #_"Transaction" getParentTransaction []
        (cast Transaction (:parent this))
    )

    ;;;
     ; @return the value of the output connected to this input.
     ;;
    #_nilable
    #_public
    (§ method #_"Coin" getValue []
        (:value this)
    )

    #_public
    #_static
    #_enum
    (def ConnectionResult'values
    #{
        :ConnectionResult'NO_SUCH_TX
        :ConnectionResult'ALREADY_SPENT
        :ConnectionResult'SUCCESS
    })

    ;; TODO: Clean all this up once TransactionOutPoint disappears.

    ;;;
     ; Locates the referenced output from the given pool of transactions.
     ;
     ; @return the TransactionOutput (or null) if the transaction's map doesn't contain the referenced tx.
     ;;
    #_nilable
    (§ method #_"TransactionOutput" getConnectedOutput [#_"Map<Sha256Hash, Transaction>" transactions]
        (let [#_"Transaction" tx (.. transactions (get (.. (:outpoint this) (getHash))))]
            (when (some? tx) (.. tx (getOutputs) (get (int (.. (:outpoint this) (getIndex))))))
        )
    )

    ;;;
     ; Alias for getOutpoint().getConnectedRedeemData(keyBag).
     ;
     ; @see TransactionOutPoint#getConnectedRedeemData(KeyBag)
     ;;
    #_nilable
    #_public
    #_throws #_[ "ScriptException" ]
    (§ method #_"RedeemData" getConnectedRedeemData [#_"KeyBag" __keyBag]
        (.. (:outpoint this) (getConnectedRedeemData __keyBag))
    )

    #_public
    #_static
    #_enum
    (def ConnectionMode'values
    #{
        :ConnectionMode'DISCONNECT_ON_CONFLICT
        :ConnectionMode'ABORT_ON_CONFLICT
    })

    ;;;
     ; Connects this input to the relevant output of the referenced transaction if it's in the given map.
     ; Connecting means updating the internal pointers and spent flags.  If the mode is to ABORT_ON_CONFLICT,
     ; then the spent output won't be changed, but the outpoint.fromTx pointer will still be updated.
     ;
     ; @param transactions Map of txhash->transaction.
     ; @param mode Whether to abort if there's a pre-existing connection or not.
     ; @return NO_SUCH_TX if the prevtx wasn't found, ALREADY_SPENT if there was a conflict, SUCCESS if not.
     ;;
    #_public
    (§ method #_"ConnectionResult" connect [#_"Map<Sha256Hash, Transaction>" transactions, #_"ConnectionMode" mode]
        (let [#_"Transaction" tx (.. transactions (get (.. (:outpoint this) (getHash))))]
            (if (some? tx) (.. this (connect tx, mode)) :ConnectionResult'NO_SUCH_TX)
        )
    )

    ;;;
     ; Connects this input to the relevant output of the referenced transaction.
     ; Connecting means updating the internal pointers and spent flags.  If the mode is to ABORT_ON_CONFLICT,
     ; then the spent output won't be changed, but the outpoint.fromTx pointer will still be updated.
     ;
     ; @param transaction The transaction to try.
     ; @param mode Whether to abort if there's a pre-existing connection or not.
     ; @return NO_SUCH_TX if transaction is not the prevtx, ALREADY_SPENT if there was a conflict, SUCCESS if not.
     ;;
    #_public
    (§ method #_"ConnectionResult" connect [#_"Transaction" transaction, #_"ConnectionMode" mode]
        (when' (.. transaction (getHash) (equals (.. (:outpoint this) (getHash)))) => :ConnectionResult'NO_SUCH_TX
            (assert-element-index (int (.. (:outpoint this) (getIndex))), (.. transaction (getOutputs) (size)), "Corrupt transaction")

            (let [#_"TransactionOutput" out (.. transaction (getOutput (int (.. (:outpoint this) (getIndex)))))]
                (when (not (.. out (isAvailableForSpending)))
                    (cond (.. this (getParentTransaction) (equals (-> this :outpoint :from-tx)))
                        (do
                            ;; Already connected.
                            (§ return :ConnectionResult'SUCCESS)
                        )
                        (= mode :ConnectionMode'DISCONNECT_ON_CONFLICT)
                        (do
                            (.. out (markAsUnspent))
                        )
                        (= mode :ConnectionMode'ABORT_ON_CONFLICT)
                        (do
                            (§ assoc-in this [:outpoint :from-tx] (.. out (getParentTransaction)))
                            (§ return :ConnectionResult'ALREADY_SPENT)
                        )
                    )
                )
                (.. this (connect out))
                :ConnectionResult'SUCCESS
            )
        )
    )

    ;;; Internal use only: connects this TransactionInput to the given output (updates pointers and spent flags). ;;
    #_public
    (§ method #_"void" connect [#_"TransactionOutput" out]
        (§ assoc-in this [:outpoint :from-tx] (.. out (getParentTransaction)))
        (.. out (markAsSpent this))
        (§ assoc this :value (.. out (getValue)))
        nil
    )

    ;;;
     ; If this input is connected, check the output is connected back to this input and release it if so, making
     ; it spendable once again.
     ;
     ; @return true if the disconnection took place, false if it was not connected.
     ;;
    #_public
    (§ method #_"boolean" disconnect []
        (let [#_"TransactionOutput" __connectedOutput]
            (cond (some? (-> this :outpoint :from-tx))
                (do
                    ;; The outpoint is connected using a "standard" wallet, disconnect it.
                    (§ ass __connectedOutput (.. (:outpoint this) :from-tx (getOutput (int (.. (:outpoint this) (getIndex))))))
                    (§ assoc-in this [:outpoint :from-tx] nil)
                )
                (some? (-> this :outpoint :connected-output))
                (do
                    ;; The outpoint is connected using a UTXO based wallet, disconnect it.
                    (§ ass __connectedOutput (-> this :outpoint :connected-output))
                    (§ assoc-in this [:outpoint :connected-output] nil)
                )
                :else
                (do
                    ;; The outpoint is not connected, do nothing.
                    (§ return false)
                )
            )

            (when' (and (some? __connectedOutput) (= (.. __connectedOutput (getSpentBy)) this)) => false
                ;; The outpoint was connected to an output, disconnect the output.
                (.. __connectedOutput (markAsUnspent))
                true
            )
        )
    )

    ;;;
     ; @return true if this transaction's sequence number is set (i.e. it may be a part of a time-locked transaction).
     ;;
    #_public
    (§ method #_"boolean" hasSequence []
        (not= (:sequence this) TransactionInput'NO_SEQUENCE)
    )

    ;;;
     ; Returns whether this input will cause a transaction to opt into the
     ; <a href="https://github.com/bitcoin/bips/blob/master/bip-0125.mediawiki">full replace-by-fee</a> semantics.
     ;;
    #_public
    (§ method #_"boolean" isOptInFullRBF []
        (< (:sequence this) (dec TransactionInput'NO_SEQUENCE))
    )

    ;;;
     ; For a connected transaction, runs the script against the connected pubkey and verifies they are correct.
     ;
     ; @throws ScriptException if the script did not verify.
     ; @throws VerificationException if the outpoint doesn't match the given output.
     ;;
    #_public
    #_throws #_[ "VerificationException" ]
    (§ method #_"void" verify []
        (let [#_"Transaction" __fromTx (-> this :outpoint :from-tx)]
            (ensure some? __fromTx, "Not connected")

            (let [#_"TransactionOutput" output (.. __fromTx (getOutput (int (.. (:outpoint this) (getIndex)))))]
                (ECKey'verify output)
            )
        )
        nil
    )

    ;;;
     ; Verifies that this input can spend the given output.  Note that this input must be a part of a transaction.
     ; Also note that the consistency of the outpoint will be checked, even if this input has not been connected.
     ;
     ; @param output The output that this input is supposed to spend.
     ; @throws ScriptException if the script doesn't verify.
     ; @throws VerificationException if the outpoint doesn't match the given output.
     ;;
    #_public
    #_throws #_[ "VerificationException" ]
    (§ method #_"void" verify [#_"TransactionOutput" output]
        (when (some? (:parent output))
            (when (not (.. (:outpoint this) (getHash) (equals (.. output (getParentTransaction) (getHash)))))
                (throw (VerificationException. "This input does not refer to the tx containing the output."))
            )
            (when (not= (.. (:outpoint this) (getIndex)) (.. output (getIndex)))
                (throw (VerificationException. "This input refers to a different output on the given tx."))
            )
        )
        (let [#_"Script" __pubKey (.. output (getScriptPubKey))
              #_"int" __myIndex (.. this (getParentTransaction) (getInputs) (indexOf this))]
            (.. this (getScriptSig) (correctlySpends (.. this (getParentTransaction)), __myIndex, __pubKey))
        )
        nil
    )

    ;;;
     ; Returns the connected output, assuming the input was connected with
     ; {@link TransactionInput#connect(TransactionOutput)} or variants at some point.
     ; If it wasn't connected, then this method returns null.
     ;;
    #_nilable
    #_public
    (§ method #_"TransactionOutput" getConnectedOutput []
        (.. (:outpoint this) (getConnectedOutput))
    )

    ;;;
     ; Returns the connected transaction, assuming the input was connected with
     ; {@link TransactionInput#connect(TransactionOutput)} or variants at some point.
     ; If it wasn't connected, then this method returns null.
     ;;
    #_nilable
    #_public
    (§ method #_"Transaction" getConnectedTransaction []
        (-> this :outpoint :from-tx)
    )

    ;;; Returns a copy of the input detached from its containing transaction, if need be. ;;
    #_public
    (§ method #_"TransactionInput" duplicateDetached []
        (TransactionInput. (:params this), nil, (.. this (bitcoinSerialize)), 0)
    )

    ;;;
     ; Returns either RuleViolation.NONE if the input is standard, or which rule makes it non-standard if so.
     ; The "IsStandard" rules control whether the default Bitcoin Core client blocks relay of a tx / refuses to mine it,
     ; however, non-standard transactions can still be included in blocks and will be accepted as valid if so.
     ;
     ; This method simply calls <tt>RiskAnalysis.isInputStandard(this)</tt>.
     ;;
    #_public
    (§ method #_"RuleViolation" isStandard []
        (RiskAnalysis'isInputStandard this)
    )

    #_override
    #_public
    (§ method #_"boolean" equals [#_"Object" o]
        (cond
            (= this o) true
            (or (nil? o) (not= (getClass) (.. o (getClass)))) false
            :else (let [#_"TransactionInput" other (cast TransactionInput o)]
                (and (= (:sequence this) (:sequence other)) (= (:parent this) (:parent other)) (.. (:outpoint this) (equals (:outpoint other))) (Arrays/equals (:script-bytes this), (:script-bytes other)))
            )
        )
    )

    #_override
    #_public
    (§ method #_"int" hashCode []
        (Objects/hashCode (:sequence this), (:outpoint this), (Arrays/hashCode (:script-bytes this)))
    )

    ;;;
     ; Returns a human readable debug string.
     ;;
    #_override
    #_public
    (§ method #_"String" toString []
        (try
            (let [#_"StringBuilder" sb (StringBuilder. "TxIn")]
                (cond (.. this (isCoinBase))
                    (do
                        (.. sb (append ": COINBASE"))
                    )
                    :else
                    (do
                        (.. sb (append " for [") (append (:outpoint this)) (append "]: ") (append (.. this (getScriptSig))))
                        (let [#_"String" flags (.. (Joiner/on ", ") (skipNulls) (join (when (.. this (hasSequence)) (str "sequence: " (Long/toHexString (:sequence this)))), (when (.. this (isOptInFullRBF)) "opts into full RBF")))]
                            (when (not (.. flags (isEmpty)))
                                (.. sb (append " (") (append flags) (append ")"))
                            )
                        )
                    )
                )
                (.. sb (toString))
            )
            (catch ScriptException e
                (throw (RuntimeException. e))
            )
        )
    )
)

;;;
 ; This message is a reference or pointer to an output of a different transaction.
 ;
 ; Instances of this class are not safe for use by multiple threads.
 ;;
#_public
(§ class TransactionOutPoint (§ extends ChildMessage)
    #_static
    (def #_"int" TransactionOutPoint'MESSAGE_LENGTH 36)

    ;;; Hash of the transaction to which we refer. ;;
    #_private
    (§ field- #_"Sha256Hash" :hash)
    ;;; Which output of that transaction we are talking about. ;;
    #_private
    (§ field- #_"long" :index)

    ;; This is not part of bitcoin serialization.  It points to the connected transaction.
    (§ field #_"Transaction" :from-tx)

    ;; The connected output.
    (§ field #_"TransactionOutput" :connected-output)

    #_public
    (§ constructor TransactionOutPoint [#_"NetworkParameters" params, #_"long" index, #_nilable #_"Transaction" __fromTx]
        (§ super params)

        (§ assoc this :index index)
        (cond (some? __fromTx)
            (do
                (§ assoc this :hash (.. __fromTx (getHash)))
                (§ assoc this :from-tx __fromTx)
            )
            :else
            (do
                ;; This happens when constructing the genesis block.
                (§ assoc this :hash Sha256Hash'ZERO_HASH)
            )
        )
        (§ assoc this :length TransactionOutPoint'MESSAGE_LENGTH)
        this
    )

    #_public
    (§ constructor TransactionOutPoint [#_"NetworkParameters" params, #_"long" index, #_"Sha256Hash" hash]
        (§ super params)

        (§ assoc this :index index)
        (§ assoc this :hash hash)
        (§ assoc this :length TransactionOutPoint'MESSAGE_LENGTH)
        this
    )

    #_public
    (§ constructor TransactionOutPoint [#_"NetworkParameters" params, #_"TransactionOutput" __connectedOutput]
        (§ this params, (.. __connectedOutput (getIndex)), (.. __connectedOutput (getParentTransactionHash)))
        (§ assoc this :connected-output __connectedOutput)
        this
    )

    ;;;
     ; Deserializes the message.  This is usually part of a transaction message.
     ;;
    #_public
    #_throws #_[ "ProtocolException" ]
    (§ constructor TransactionOutPoint [#_"NetworkParameters" params, #_"byte[]" payload, #_"int" offset]
        (§ super params, payload, offset)
        this
    )

    ;;;
     ; Deserializes the message.  This is usually part of a transaction message.
     ;
     ; @param params NetworkParameters object.
     ; @param offset The location of the first payload byte within the array.
     ; @param serializer The serializer to use for this message.
     ; @throws ProtocolException
     ;;
    #_public
    #_throws #_[ "ProtocolException" ]
    (§ constructor TransactionOutPoint [#_"NetworkParameters" params, #_"byte[]" payload, #_"int" offset, #_"Message" parent, #_"BitcoinSerializer" serializer]
        (§ super params, payload, offset, parent, serializer, TransactionOutPoint'MESSAGE_LENGTH)
        this
    )

    #_override
    #_protected
    #_throws #_[ "ProtocolException" ]
    (§ method #_"void" parse []
        (§ assoc this :length TransactionOutPoint'MESSAGE_LENGTH)
        (§ assoc this :hash (.. this (readHash)))
        (§ assoc this :index (.. this (readUint32)))
        nil
    )

    #_override
    #_protected
    (§ method #_"void" bitcoinSerializeToStream [#_"ByteArrayOutputStream" baos]
        (.. baos (write (.. (:hash this) (getReversedBytes))))
        (Utils'uint32ToByteStreamLE (:index this), baos)
        nil
    )

    ;;;
     ; An outpoint is a part of a transaction input that points to the output of another transaction.  If we have both
     ; sides in memory, and they have been linked together, this returns a pointer to the connected output, or null
     ; if there is no such connection.
     ;;
    #_nilable
    #_public
    (§ method #_"TransactionOutput" getConnectedOutput []
        (if (some? (:from-tx this)) (.. (:from-tx this) (getOutputs) (get (int (:index this)))) (:connected-output this))
    )

    ;;;
     ; Returns the pubkey script from the connected output.
     ;
     ; @throws NullPointerException if there is no connected output.
     ;;
    #_public
    (§ method #_"byte[]" getConnectedPubKeyScript []
        (let [#_"byte[]" result (.. (ensure some? (.. this (getConnectedOutput))) (getScriptBytes))]
            (assert-state (< 0 (alength result)))
            result
        )
    )

    ;;;
     ; Returns the ECKey identified in the connected output, for either pay-to-address scripts or pay-to-key scripts.
     ; For P2SH scripts you can use {@link #getConnectedRedeemData(KeyBag)} and then get the key from RedeemData.
     ; If the script form cannot be understood, throws ScriptException.
     ;
     ; @return an ECKey or null if the connected key cannot be found in the wallet.
     ;;
    #_nilable
    #_public
    #_throws #_[ "ScriptException" ]
    (§ method #_"ECKey" getConnectedKey [#_"KeyBag" __keyBag]
        (let [#_"TransactionOutput" __connectedOutput (.. this (getConnectedOutput))]
            (ensure some? __connectedOutput, "Input is not connected so cannot retrieve key")
            (let [#_"Script" __connectedScript (.. __connectedOutput (getScriptPubKey))]

                (when (.. __connectedScript (isSentToAddress))
                    (let [#_"byte[]" __addressBytes (.. __connectedScript (getPubKeyHash))]
                        (§ return (.. __keyBag (findKeyFromPubHash __addressBytes)))
                    )
                )

                (when (.. __connectedScript (isSentToRawPubKey))
                    (let [#_"byte[]" __pubkeyBytes (.. __connectedScript (getPubKey))]
                        (§ return (.. __keyBag (findKeyFromPubKey __pubkeyBytes)))
                    )
                )

                (throw (ScriptException. :ScriptError'UNKNOWN_ERROR, (str "Could not understand form of connected output script: " __connectedScript)))
            )
        )
    )

    ;;;
     ; Returns the RedeemData identified in the connected output, for either pay-to-address scripts, pay-to-key
     ; or P2SH scripts.
     ; If the script forms cannot be understood, throws ScriptException.
     ;
     ; @return a RedeemData or null if the connected data cannot be found in the wallet.
     ;;
    #_nilable
    #_public
    #_throws #_[ "ScriptException" ]
    (§ method #_"RedeemData" getConnectedRedeemData [#_"KeyBag" __keyBag]
        (let [#_"TransactionOutput" __connectedOutput (.. this (getConnectedOutput))]
            (ensure some? __connectedOutput, "Input is not connected so cannot retrieve key")
            (let [#_"Script" __connectedScript (.. __connectedOutput (getScriptPubKey))]

                (when (.. __connectedScript (isSentToAddress))
                    (let [#_"byte[]" __addressBytes (.. __connectedScript (getPubKeyHash))]
                        (§ return (RedeemData'of (.. __keyBag (findKeyFromPubHash __addressBytes)), __connectedScript))
                    )
                )

                (when (.. __connectedScript (isSentToRawPubKey))
                    (let [#_"byte[]" __pubkeyBytes (.. __connectedScript (getPubKey))]
                        (§ return (RedeemData'of (.. __keyBag (findKeyFromPubKey __pubkeyBytes)), __connectedScript))
                    )
                )

                (when (.. __connectedScript (isPayToScriptHash))
                    (let [#_"byte[]" __scriptHash (.. __connectedScript (getPubKeyHash))]
                        (§ return (.. __keyBag (findRedeemDataFromScriptHash __scriptHash)))
                    )
                )

                (throw (ScriptException. :ScriptError'UNKNOWN_ERROR, (str "Could not understand form of connected output script: " __connectedScript)))
            )
        )
    )

    #_override
    #_public
    (§ method #_"String" toString []
        (str (:hash this) ":" (:index this))
    )

    ;;;
     ; Returns the hash of the transaction this outpoint references/spends/is connected to.
     ;;
    #_override
    #_public
    (§ method #_"Sha256Hash" getHash []
        (:hash this)
    )

    (§ method #_"void" setHash [#_"Sha256Hash" hash]
        (§ assoc this :hash hash)
        nil
    )

    #_public
    (§ method #_"long" getIndex []
        (:index this)
    )

    #_public
    (§ method #_"void" setIndex [#_"long" index]
        (§ assoc this :index index)
        nil
    )

    #_override
    #_public
    (§ method #_"boolean" equals [#_"Object" o]
        (cond
            (= this o) true
            (or (nil? o) (not= (getClass) (.. o (getClass)))) false
            :else (let [#_"TransactionOutPoint" other (cast TransactionOutPoint o)]
                (and (= (.. this (getIndex)) (.. other (getIndex))) (.. this (getHash) (equals (.. other (getHash)))))
            )
        )
    )

    #_override
    #_public
    (§ method #_"int" hashCode []
        (Objects/hashCode (.. this (getIndex)), (.. this (getHash)))
    )
)

;;;
 ; A TransactionOutput message contains a scriptPubKey that controls who is able to spend its value.
 ; It is a sub-part of the Transaction message.
 ;
 ; Instances of this class are not safe for use by multiple threads.
 ;;
#_public
(§ class TransactionOutput (§ extends ChildMessage)
    #_private
    #_static
    (def- #_"Logger" TransactionOutput'log (LoggerFactory/getLogger TransactionOutput))

    ;; The output's value is kept as a native type in order to save class instances.
    #_private
    (§ field- #_"long" :value)

    ;; A transaction output has a script used for authenticating that the redeemer is allowed to spend
    ;; this output.
    #_private
    (§ field- #_"byte[]" :script-bytes)

    ;; The script bytes are parsed and turned into a Script on demand.
    #_private
    (§ field- #_"Script" :script-pub-key)

    ;; These fields are not Bitcoin serialized.  They are used for tracking purposes in our wallet only.
    ;; If set to true, this output is counted towards our balance.  If false and spentBy is null the tx output
    ;; was owned by us and was sent to somebody else.  If false and spentBy is set it means this output was owned
    ;; by us and used in one of our own transactions (e.g. because it is a change output).
    #_private
    (§ field- #_"boolean" :available-for-spending)
    #_nilable
    #_private
    (§ field- #_"TransactionInput" :spent-by)

    #_private
    (§ field- #_"int" :script-len)

    ;;;
     ; Deserializes a transaction output message.  This is usually part of a transaction message.
     ;;
    #_public
    #_throws #_[ "ProtocolException" ]
    (§ constructor TransactionOutput [#_"NetworkParameters" params, #_nilable #_"Transaction" parent, #_"byte[]" payload, #_"int" offset]
        (§ super params, payload, offset)

        (.. this (setParent parent))
        (§ assoc this :available-for-spending true)
        this
    )

    ;;;
     ; Deserializes a transaction output message.  This is usually part of a transaction message.
     ;
     ; @param params NetworkParameters object.
     ; @param payload Bitcoin protocol formatted byte array containing message content.
     ; @param offset The location of the first payload byte within the array.
     ; @param serializer The serializer to use for this message.
     ; @throws ProtocolException
     ;;
    #_public
    #_throws #_[ "ProtocolException" ]
    (§ constructor TransactionOutput [#_"NetworkParameters" params, #_nilable #_"Transaction" parent, #_"byte[]" payload, #_"int" offset, #_"BitcoinSerializer" serializer]
        (§ super params, payload, offset, parent, serializer, Message'UNKNOWN_LENGTH)

        (§ assoc this :available-for-spending true)
        this
    )

    ;;;
     ; Creates an output that sends 'value' to the given address (public key hash).  The amount should be
     ; created with something like {@link Coin#valueOf(int, int)}.  Typically you would use
     ; {@link Transaction#addOutput(Coin, Address)} instead of creating a TransactionOutput directly.
     ;;
    #_public
    (§ constructor TransactionOutput [#_"NetworkParameters" params, #_nilable #_"Transaction" parent, #_"Coin" value, #_"Address" to]
        (§ this params, parent, value, (.. (ScriptBuilder'createOutputScript to) (getProgram)))
        this
    )

    ;;;
     ; Creates an output that sends 'value' to the given public key using a simple CHECKSIG script (no addresses).
     ; The amount should be created with something like {@link Coin#valueOf(int, int)}.  Typically you would use
     ; {@link Transaction#addOutput(Coin, ECKey)} instead of creating an output directly.
     ;;
    #_public
    (§ constructor TransactionOutput [#_"NetworkParameters" params, #_nilable #_"Transaction" parent, #_"Coin" value, #_"ECKey" to]
        (§ this params, parent, value, (.. (ScriptBuilder'createOutputScript to) (getProgram)))
        this
    )

    #_public
    (§ constructor TransactionOutput [#_"NetworkParameters" params, #_nilable #_"Transaction" parent, #_"Coin" value, #_"byte[]" script]
        (§ super params)

        ;; Negative values obviously make no sense, except for -1 which is used as a sentinel value when calculating
        ;; SIGHASH_SINGLE signatures, so unfortunately we have to allow that here.
        (assert-argument (or (<= 0 (.. value (signum))) (.. value (equals Coin'NEGATIVE_SATOSHI))), "Negative values not allowed")
        (assert-argument (or (not (.. params (hasMaxMoney))) (<= (.. value (compareTo (.. params (getMaxMoney)))) 0)), "Values larger than MAX_MONEY not allowed")

        (§ assoc this :value (:value value))
        (§ assoc this :script-bytes script)
        (.. this (setParent parent))
        (§ assoc this :available-for-spending true)
        (§ assoc this :length (+ 8 (VarInt'sizeOf (alength script)) (alength script)))
        this
    )

    #_public
    #_throws #_[ "ScriptException" ]
    (§ method #_"Script" getScriptPubKey []
        (when (nil? (:script-pub-key this))
            (§ assoc this :script-pub-key (Script. (:script-bytes this)))
        )
        (:script-pub-key this)
    )

    ;;;
     ; If the output script pays to an address as in <a href="https://bitcoin.org/en/developer-guide#term-p2pkh">P2PKH</a>,
     ; return the address of the receiver, i.e. a base58 encoded hash of the public key in the script.
     ;
     ; @param networkParameters Needed to specify an address.
     ; @return null, if the output script is not the form <i>OP_DUP OP_HASH160 <PubkeyHash> OP_EQUALVERIFY OP_CHECKSIG</i>, i.e. not P2PKH.
     ; @return an address made out of the public key hash.
     ;;
    #_nilable
    #_public
    #_throws #_[ "ScriptException" ]
    (§ method #_"Address" getAddressFromP2PKHScript [#_"NetworkParameters" params]
        (when (.. this (getScriptPubKey) (isSentToAddress)) (.. this (getScriptPubKey) (getToAddress params)))
    )

    ;;;
     ; If the output script pays to a redeem script, return the address of the redeem script as described by,
     ; i.e. a base58 encoding of [one-byte version][20-byte hash][4-byte checksum], where the 20-byte hash refers to
     ; the redeem script.
     ;
     ; P2SH is described by <a href="https://github.com/bitcoin/bips/blob/master/bip-0016.mediawiki">BIP 16</a> and
     ; <a href="https://bitcoin.org/en/developer-guide#p2sh-scripts">documented in the Bitcoin Developer Guide</a>.
     ;
     ; @param networkParameters Needed to specify an address.
     ; @return null if the output script does not pay to a script hash.
     ; @return an address that belongs to the redeem script.
     ;;
    #_nilable
    #_public
    #_throws #_[ "ScriptException" ]
    (§ method #_"Address" getAddressFromP2SH [#_"NetworkParameters" params]
        (when (.. this (getScriptPubKey) (isPayToScriptHash)) (.. this (getScriptPubKey) (getToAddress params)))
    )

    #_override
    #_protected
    #_throws #_[ "ProtocolException" ]
    (§ method #_"void" parse []
        (§ assoc this :value (.. this (readInt64)))
        (§ assoc this :script-len (int (.. this (readVarInt))))
        (§ assoc this :length (+ (- (:cursor this) (:offset this)) (:script-len this)))
        (§ assoc this :script-bytes (.. this (readBytes (:script-len this))))
        nil
    )

    #_override
    #_protected
    (§ method #_"void" bitcoinSerializeToStream [#_"ByteArrayOutputStream" baos]
        (ensure some? (:script-bytes this))

        (Utils'int64ToByteStreamLE (:value this), baos)
        ;; TODO: Move script serialization into the Script class, where it belongs.
        (.. baos (write (.. (VarInt. (alength (:script-bytes this))) (encode))))
        (.. baos (write (:script-bytes this)))
        nil
    )

    ;;;
     ; Returns the value of this output.
     ; This is the amount of currency that the destination address receives.
     ;;
    #_public
    (§ method #_"Coin" getValue []
        (try
            (Coin'valueOf (:value this))
            (catch IllegalArgumentException e
                (throw (IllegalStateException. (.. e (getMessage)), e))
            )
        )
    )

    ;;;
     ; Sets the value of this output.
     ;;
    #_public
    (§ method #_"void" setValue [#_"Coin" value]
        (ensure some? value)

        (.. this (unCache))
        (§ assoc this :value (:value value))
        nil
    )

    ;;;
     ; Gets the index of this output in the parent transaction, or throws if this output is free standing.
     ; Iterates over the parents list to discover this.
     ;;
    #_public
    (§ method #_"int" getIndex []
        (let [#_"List<TransactionOutput>" outputs (.. this (getParentTransaction) (getOutputs))]
            (loop-when-recur [#_"int" i 0] (< i (.. outputs (size))) [(inc i)]
                (when (= (.. outputs (get i)) this)
                    (§ return i)
                )
            )

            (throw (IllegalStateException. "Output linked to wrong parent transaction?"))
        )
    )

    ;;;
     ; Will this transaction be relayable and mined by default miners?
     ;;
    #_public
    (§ method #_"boolean" isDust []
        ;; Transactions that are OP_RETURN can't be dust regardless of their value.
        (if (.. this (getScriptPubKey) (isOpReturn)) false (.. this (getValue) (isLessThan (.. this (getMinNonDustValue)))))
    )

    ;;;
     ; Gets the minimum value for a txout of this size to be considered non-dust by Bitcoin Core (and thus relayed).
     ; See CTxOut::IsDust() in Bitcoin Core.  The assumption is that any output that would consume more than a third
     ; of its value in fees is not something the Bitcoin system wants to deal with right now, so we call them "dust outputs"
     ; and they're made non standard.  The choice of one third is somewhat arbitrary and may change in future.
     ;
     ; You probably should use {@link TransactionOutput#getMinNonDustValue()} which uses a safe fee-per-kb by default.
     ;
     ; @param feePerKb The fee required per kilobyte.  Note that this is the same as Bitcoin Core's -minrelaytxfee * 3.
     ;;
    #_public
    (§ method #_"Coin" getMinNonDustValue [#_"Coin" __feePerKb]
        ;; A typical output is 33 bytes (pubkey hash + opcodes) and requires an input of 148 bytes to spend so we add
        ;; that together to find out the total amount of data used to transfer this amount of value.  Note that this
        ;; formula is wrong for anything that's not a pay-to-address output, unfortunately, we must follow Bitcoin Core's
        ;; wrongness in order to ensure we're considered standard.  A better formula would either estimate the
        ;; size of data needed to satisfy all different script types, or just hard code 33 below.
        (let [#_"long" size (+ (alength (.. this (unsafeBitcoinSerialize))) 148)]
            (.. __feePerKb (multiply size) (divide 1000))
        )
    )

    ;;;
     ; Returns the minimum value for this output to be considered "not dust", i.e. the transaction will be relayable
     ; and mined by default miners.  For normal pay to address outputs, this is 2730 satoshis, the same as
     ; {@link Transaction#MIN_NONDUST_OUTPUT}.
     ;;
    #_public
    (§ method #_"Coin" getMinNonDustValue []
        (.. this (getMinNonDustValue (.. Transaction'REFERENCE_DEFAULT_MIN_TX_FEE (multiply 3))))
    )

    ;;;
     ; Sets this objects availableForSpending flag to false and the spentBy pointer to the given input.
     ; If the input is null, it means this output was signed over to somebody else rather than one of our own keys.
     ;
     ; @throws IllegalStateException if the transaction was already marked as spent.
     ;;
    #_public
    (§ method #_"void" markAsSpent [#_"TransactionInput" input]
        (assert-state (:available-for-spending this))

        (§ assoc this :available-for-spending false)
        (§ assoc this :spent-by input)
        nil
    )

    ;;;
     ; Resets the spent pointer / availableForSpending flag to null.
     ;;
    #_public
    (§ method #_"void" markAsUnspent []
        (§ assoc this :available-for-spending true)
        (§ assoc this :spent-by nil)
        nil
    )

    ;;;
     ; Returns whether {@link TransactionOutput#markAsSpent(TransactionInput)} has been called on this class.
     ; A {@link Wallet} will mark a transaction output as spent once it sees a transaction input that is connected to it.
     ; Note that this flag can be false when an output has in fact been spent according to the rest of the network if
     ; the spending transaction wasn't downloaded yet, and it can be marked as spent when in reality the rest of the
     ; network believes it to be unspent if the signature or script connecting to it was not actually valid.
     ;;
    #_public
    (§ method #_"boolean" isAvailableForSpending []
        (:available-for-spending this)
    )

    ;;;
     ; The backing script bytes which can be turned into a Script object.
     ;
     ; @return the scriptBytes
    ;;
    #_public
    (§ method #_"byte[]" getScriptBytes []
        (:script-bytes this)
    )

    ;;;
     ; Returns true if this output is to a key, or an address we have the keys for, in the wallet.
     ;;
    #_public
    (§ method #_"boolean" isMine [#_"TransactionBag" __transactionBag]
        (try
            (let [#_"Script" script (.. this (getScriptPubKey))]
                (cond
                    (.. script (isSentToRawPubKey)) (.. __transactionBag (isPubKeyMine (.. script (getPubKey))))
                    (.. script (isPayToScriptHash)) (.. __transactionBag (isPayToScriptHashMine (.. script (getPubKeyHash))))
                    :else (.. __transactionBag (isPubKeyHashMine (.. script (getPubKeyHash))))
                )
            )
            (catch ScriptException e
                ;; Just means we didn't understand the output of this transaction: ignore it.
                (.. TransactionOutput'log (debug "Could not parse tx {} output script: {}", (if (some? (:parent this)) (.. (:parent this) (getHash)) "(no parent)"), (.. e (toString))))
                false
            )
        )
    )

    ;;;
     ; Returns a human readable debug string.
     ;;
    #_override
    #_public
    (§ method #_"String" toString []
        (try
            (let [#_"Script" script (.. this (getScriptPubKey))
                  #_"StringBuilder" sb (StringBuilder. "TxOut of ")]
                (.. sb (append (.. (Coin'valueOf (:value this)) (toFriendlyString))))
                (cond
                    (or (.. script (isSentToAddress)) (.. script (isPayToScriptHash)))
                        (.. sb (append " to ") (append (.. script (getToAddress (:params this)))))
                    (.. script (isSentToRawPubKey))
                        (.. sb (append " to pubkey ") (append (.. Utils'HEX (encode (.. script (getPubKey))))))
                    (.. script (isSentToMultiSig))
                        (.. sb (append " to multisig"))
                    :else
                        (.. sb (append " (unknown type)"))
                )
                (.. sb (append " script:") (append script))
                (.. sb (toString))
            )
            (catch ScriptException e
                (throw (RuntimeException. e))
            )
        )
    )

    ;;;
     ; Returns the connected input.
     ;;
    #_nilable
    #_public
    (§ method #_"TransactionInput" getSpentBy []
        (:spent-by this)
    )

    ;;;
     ; Returns the transaction that owns this output.
     ;;
    #_nilable
    #_public
    (§ method #_"Transaction" getParentTransaction []
        (cast Transaction (:parent this))
    )

    ;;;
     ; Returns the transaction hash that owns this output.
     ;;
    #_nilable
    #_public
    (§ method #_"Sha256Hash" getParentTransactionHash []
        (when (some? (:parent this)) (.. (:parent this) (getHash)))
    )

    ;;;
     ; Returns the depth in blocks of the parent tx.
     ;
     ; If the transaction appears in the top block, the depth is one.
     ; If it's anything else (pending, dead, unknown), then -1.
     ;
     ; @return the tx depth or -1.
     ;;
    #_public
    (§ method #_"int" getParentTransactionDepthInBlocks []
        (when (some? (.. this (getParentTransaction)))
            (let [#_"TransactionConfidence" confidence (.. this (getParentTransaction) (getConfidence))]
                (when (= (.. confidence (getConfidenceType)) ConfidenceType'BUILDING)
                    (§ return (.. confidence (getDepthInBlocks)))
                )
            )
        )
        -1
    )

    ;;;
     ; Returns a new {@link TransactionOutPoint}, which is essentially a structure pointing to this output.
     ; Requires that this output is not detached.
     ;;
    #_public
    (§ method #_"TransactionOutPoint" getOutPointFor []
        (TransactionOutPoint. (:params this), (.. this (getIndex)), (.. this (getParentTransaction)))
    )

    ;;; Returns a copy of the output detached from its containing transaction, if need be. ;;
    #_public
    (§ method #_"TransactionOutput" duplicateDetached []
        (TransactionOutput. (:params this), nil, (Coin'valueOf (:value this)), (org.spongycastle.util.Arrays/clone (:script-bytes this)))
    )

    #_override
    #_public
    (§ method #_"boolean" equals [#_"Object" o]
        (cond
            (= this o) true
            (or (nil? o) (not= (getClass) (.. o (getClass)))) false
            :else (let [#_"TransactionOutput" other (cast TransactionOutput o)]
                (and (= (:value this) (:value other)) (or (nil? (:parent this)) (and (= (:parent this) (:parent other)) (= (.. this (getIndex)) (.. other (getIndex))))) (Arrays/equals (:script-bytes this), (:script-bytes other)))
            )
        )
    )

    #_override
    #_public
    (§ method #_"int" hashCode []
        (Objects/hashCode (:value this), (:parent this), (Arrays/hashCode (:script-bytes this)))
    )
)

;;;
 ; TransactionOutputChanges represents a delta to the set of unspent outputs.  It used as a return value for
 ; {@link AbstractBlockChain#connectTransactions(int, Block)}.  It contains the full list of transaction outputs created
 ; and spent in a block.  It DOES contain outputs created that were spent later in the block, as those are needed for
 ; BIP30 (no duplicate txid creation if the previous one was not fully spent prior to this block) verification.
 ;;
#_public
(§ class TransactionOutputChanges
    #_public
    (§ field #_"List<UTXO>" :tx-outs-created)
    #_public
    (§ field #_"List<UTXO>" :tx-outs-spent)

    #_public
    (§ constructor TransactionOutputChanges [#_"List<UTXO>" __txOutsCreated, #_"List<UTXO>" __txOutsSpent]
        (§ assoc this :tx-outs-created __txOutsCreated)
        (§ assoc this :tx-outs-spent __txOutsSpent)
        this
    )
)

;;;
 ; Tracks transactions that are being announced across the network.  Typically one is created for you by a
 ; {@link PeerGroup} and then given to each Peer to update.  The current purpose is to let Peers update the confidence
 ; (number of peers broadcasting).  It helps address an attack scenario in which a malicious remote peer (or several)
 ; feeds you invalid transactions, e.g. ones that spend coins which don't exist.  If you don't see most of the peers
 ; announce the transaction within a reasonable time, it may be that the TX is not valid.  Alternatively, an attacker
 ; may control your entire internet connection: in this scenario counting broadcasting peers does not help you.
 ;
 ; It is <b>not</b> at this time directly equivalent to the Bitcoin Core memory pool, which tracks
 ; all transactions not currently included in the best chain - it's simply a cache.
 ;;
#_public
(§ class TxConfidenceTable
    #_protected
    (§ field #_"ReentrantLock" :lock (Threading'lock "txconfidencetable"))

    #_private
    #_static
    (§ class- WeakConfidenceReference (§ extends WeakReference #_"<TransactionConfidence>")
        #_public
        (§ field #_"Sha256Hash" :hash)

        #_public
        (§ constructor WeakConfidenceReference [#_"TransactionConfidence" confidence, #_"ReferenceQueue<TransactionConfidence>" queue]
            (§ super confidence, queue)

            (§ assoc this :hash (.. confidence (getTransactionHash)))
            this
        )
    )
    #_private
    (§ field- #_"LinkedHashMap<Sha256Hash, WeakConfidenceReference>" :table)

    ;; This ReferenceQueue gets entries added to it when they are only weakly reachable, i.e. the TxConfidenceTable is
    ;; the only thing that is tracking the confidence data anymore.  We check it from time to time and delete table entries
    ;; corresponding to expired transactions.  In this way memory usage of the system is in line with however many
    ;; transactions you actually care to track the confidence of.  We can still end up with lots of hashes being stored
    ;; if our peers flood us with invs but the MAX_SIZE param caps this.
    #_private
    (§ field- #_"ReferenceQueue<TransactionConfidence>" :reference-queue)

    ;;; The max size of a table created with the no-args constructor. ;;
    #_public
    #_static
    (def #_"int" TxConfidenceTable'MAX_SIZE 1000)

    ;;;
     ; Creates a table that will track at most the given number of transactions (allowing you to bound memory usage).
     ;
     ; @param size Max number of transactions to track.  The table will fill up to this size then stop growing.
     ;;
    #_public
    (§ constructor TxConfidenceTable [#_"int" size]
        (§ assoc this :table (LinkedHashMap. #_"<Sha256Hash, WeakConfidenceReference>"
        (§ anon
            #_override
            #_protected
            (§ method #_"boolean" removeEldestEntry [#_"Map.Entry<Sha256Hash, WeakConfidenceReference>" entry]
                ;; An arbitrary choice to stop the memory used by tracked transactions getting too huge in the event
                ;; of some kind of DoS attack.
                (< size (.. this (size)))
            )
        )))
        (§ assoc this :reference-queue (ReferenceQueue. #_"<>"))
        this
    )

    ;;;
     ; Creates a table that will track at most {@link TxConfidenceTable#MAX_SIZE} entries.
     ; You should normally use this constructor.
     ;;
    #_public
    (§ constructor TxConfidenceTable []
        (§ this TxConfidenceTable'MAX_SIZE)
        this
    )

    ;;;
     ; If any transactions have expired due to being only weakly reachable through us, go ahead and delete their
     ; table entries - it means we downloaded the transaction and sent it to various event listeners, none of
     ; which bothered to keep a reference.  Typically, this is because the transaction does not involve any keys
     ; that are relevant to any of our wallets.
     ;;
    #_private
    (§ method- #_"void" cleanTable []
        (.. (:lock this) (lock))
        (try
            (let [#_"Reference<? extends TransactionConfidence>" ref]
                (loop-when-recur [] (some? (§ ass ref (.. (:reference-queue this) (poll)))) []
                    ;; Find which transaction got deleted by the GC.
                    (let [#_"WeakConfidenceReference" __txRef (cast WeakConfidenceReference ref)]
                        ;; And remove the associated map entry, so the other bits of memory can also be reclaimed.
                        (.. (:table this) (remove (:hash __txRef)))
                    )
                )
            )
            (finally
                (.. (:lock this) (unlock))
            )
        )
        nil
    )

    ;;;
     ; Returns the number of peers that have seen the given hash recently.
     ;;
    #_public
    (§ method #_"int" numBroadcastPeers [#_"Sha256Hash" hash]
        (.. (:lock this) (lock))
        (try
            (.. this (cleanTable))
            (let-when [#_"WeakConfidenceReference" entry (.. (:table this) (get hash))] (some? entry) => 0 ;; No such TX known.
                (let-when [#_"TransactionConfidence" confidence (.. entry (get))] (nil? confidence) => (.. confidence (numBroadcastPeers))
                    ;; Such a TX hash was seen, but nothing seemed to care, so we ended up throwing away the data.
                    (.. (:table this) (remove hash))
                    0
                )
            )
            (finally
                (.. (:lock this) (unlock))
            )
        )
    )

    ;;;
     ; Called by peers when they see a transaction advertised in an "inv" message.  It passes the data on to the relevant
     ; {@link TransactionConfidence} object, creating it if needed.
     ;
     ; @return the number of peers that have now announced this hash (including the caller).
     ;;
    #_public
    (§ method #_"TransactionConfidence" seen [#_"Sha256Hash" hash, #_"PeerAddress" __byPeer]
        (let [#_"TransactionConfidence" confidence
              #_"boolean" fresh false]
            (.. (:lock this) (lock))
            (do
                (.. this (cleanTable))
                (§ ass confidence (Context'getOrCreate hash))
                (§ ass fresh (.. confidence (markBroadcastBy __byPeer)))
            )
            (.. (:lock this) (unlock))
            (when fresh
                (.. confidence (queueListeners :ConfidenceChangeReason'SEEN_PEERS))
            )
            confidence
        )
    )

    ;;;
     ; Returns the {@link TransactionConfidence} for the given hash if we have downloaded it, or null if that tx hash
     ; is unknown to the system at this time.
     ;;
    #_public
    (§ method #_"TransactionConfidence" getOrCreate [#_"Sha256Hash" hash]
        (ensure some? hash)

        (.. (:lock this) (lock))
        (try
            (let [#_"WeakConfidenceReference" reference (.. (:table this) (get hash))]
                (when (some? reference)
                    (let [#_"TransactionConfidence" confidence (.. reference (get))]
                        (when (some? confidence)
                            (§ return confidence)
                        )
                    )
                )
                (let [#_"TransactionConfidence" confidence (TransactionConfidence. hash)]
                    (.. (:table this) (put hash, (WeakConfidenceReference. confidence, (:reference-queue this))))
                    confidence
                )
            )
            (finally
                (.. (:lock this) (unlock))
            )
        )
    )

    ;;;
     ; Returns the {@link TransactionConfidence} for the given hash if we have downloaded it, or null if that tx hash
     ; is unknown to the system at this time.
     ;;
    #_nilable
    #_public
    (§ method #_"TransactionConfidence" get [#_"Sha256Hash" hash]
        (.. (:lock this) (lock))
        (try
            (let [#_"WeakConfidenceReference" ref (.. (:table this) (get hash))]
                (when (some? ref) (.. ref (get)))
            )
            (finally
                (.. (:lock this) (unlock))
            )
        )
    )
)

;; TODO: Fix this class: should not talk about addresses, height should be optional/support mempool height etc.

;;;
 ; A UTXO message contains the information necessary to check a spending transaction.
 ; It avoids having to store the entire parentTransaction just to get the hash and index.
 ; Useful when working with free standing outputs.
 ;;
#_public
(§ class UTXO
    #_private
    (§ field- #_"Coin" :value)
    #_private
    (§ field- #_"Script" :script)
    #_private
    (§ field- #_"Sha256Hash" :hash)
    #_private
    (§ field- #_"long" :index)
    #_private
    (§ field- #_"int" :height)
    #_private
    (§ field- #_"boolean" :coinbase)
    #_private
    (§ field- #_"String" :address)

    ;;;
     ; Creates a stored transaction output.
     ;
     ; @param hash     The hash of the containing transaction.
     ; @param index    The outpoint.
     ; @param value    The value available.
     ; @param height   The height this output was created in.
     ; @param coinbase The coinbase flag.
     ;;
    #_public
    (§ constructor UTXO [#_"Sha256Hash" hash, #_"long" index, #_"Coin" value, #_"int" height, #_"boolean" coinbase, #_"Script" script]
        (§ assoc this :hash hash)
        (§ assoc this :index index)
        (§ assoc this :value value)
        (§ assoc this :height height)
        (§ assoc this :script script)
        (§ assoc this :coinbase coinbase)
        (§ assoc this :address "")
        this
    )

    ;;;
     ; Creates a stored transaction output.
     ;
     ; @param hash     The hash of the containing transaction.
     ; @param index    The outpoint.
     ; @param value    The value available.
     ; @param height   The height this output was created in.
     ; @param coinbase The coinbase flag.
     ; @param address  The address.
     ;;
    #_public
    (§ constructor UTXO [#_"Sha256Hash" hash, #_"long" index, #_"Coin" value, #_"int" height, #_"boolean" coinbase, #_"Script" script, #_"String" address]
        (§ this hash, index, value, height, coinbase, script)
        (§ assoc this :address address)
        this
    )

    ;;; The value which this Transaction output holds. ;;
    #_public
    (§ method #_"Coin" getValue []
        (:value this)
    )

    ;;; The Script object which you can use to get address, script bytes or script type. ;;
    #_public
    (§ method #_"Script" getScript []
        (:script this)
    )

    ;;; The hash of the transaction which holds this output. ;;
    #_public
    (§ method #_"Sha256Hash" getHash []
        (:hash this)
    )

    ;;; The index of this output in the transaction which holds it. ;;
    #_public
    (§ method #_"long" getIndex []
        (:index this)
    )

    ;;; Gets the height of the block that created this output. ;;
    #_public
    (§ method #_"int" getHeight []
        (:height this)
    )

    ;;; Gets the flag of whether this was created by a coinbase tx. ;;
    #_public
    (§ method #_"boolean" isCoinbase []
        (:coinbase this)
    )

    ;;; The address of this output, can be the empty string if none was provided at construction time or was deserialized. ;;
    #_public
    (§ method #_"String" getAddress []
        (:address this)
    )

    #_override
    #_public
    (§ method #_"String" toString []
        (String/format Locale/US, "Stored TxOut of %s (%s:%d)", (.. (:value this) (toFriendlyString)), (:hash this), (:index this))
    )

    #_override
    #_public
    (§ method #_"int" hashCode []
        (Objects/hashCode (.. this (getIndex)), (.. this (getHash)))
    )

    #_override
    #_public
    (§ method #_"boolean" equals [#_"Object" o]
        (cond
            (= this o) true
            (or (nil? o) (not= (getClass) (.. o (getClass)))) false
            :else (let [#_"UTXO" other (cast UTXO o)]
                (and (= (.. this (getIndex)) (.. other (getIndex))) (.. this (getHash) (equals (.. other (getHash)))))
            )
        )
    )
)

;;;
 ; Instances of this class are not safe for use by multiple threads.
 ;;
#_public
(§ class UnknownMessage (§ extends EmptyMessage)
    #_private
    (§ field- #_"String" :name)

    #_public
    #_throws #_[ "ProtocolException" ]
    (§ constructor UnknownMessage [#_"NetworkParameters" params, #_"String" name, #_"byte[]" payload]
        (§ super params, payload, 0)

        (§ assoc this :name name)
        this
    )

    #_override
    #_public
    (§ method #_"String" toString []
        (str "Unknown message [" (:name this) "]: " (if (some? (:payload this)) (.. Utils'HEX (encode (:payload this))) ""))
    )
)

;;;
 ; A collection of various utility methods that are helpful for working with the Bitcoin protocol.
 ; To enable debug logging from the library, run with -Dbitcoinj.logging=true on your command line.
 ;;
#_public
(§ class Utils
    ;;; The string that prefixes all text messages signed using Bitcoin keys. ;;
    #_public
    #_static
    (def #_"String" Utils'BITCOIN_SIGNED_MESSAGE_HEADER "Bitcoin Signed Message:\n")
    #_public
    #_static
    (def #_"byte[]" Utils'BITCOIN_SIGNED_MESSAGE_HEADER_BYTES (.. Utils'BITCOIN_SIGNED_MESSAGE_HEADER (getBytes Charsets/UTF_8)))

    #_public
    #_static
    (def #_"Joiner" Utils'SPACE_JOINER (Joiner/on " "))

    ;;;
     ; The regular {@link java.math.BigInteger#toByteArray()} includes the sign bit of the number and might result
     ; in an extra byte addition.  This method removes this extra byte.
     ;
     ; Assuming only positive numbers, it's possible to discriminate if an extra byte is added by checking if the
     ; first element of the array is 0 (0000_0000).  Due to the minimal representation provided by BigInteger, it means
     ; that the bit sign is the least significant bit 0000_000<b>0</b>.  Otherwise the representation is not minimal.
     ; For example, if the sign bit is 0000_00<b>0</b>0, then the representation is not minimal due to the rightmost zero.
     ;
     ; @param b The integer to format into a byte array.
     ; @param numBytes The desired size of the resulting byte array.
     ; @return numBytes byte long array.
     ;;
    #_public
    #_static
    (§ defn #_"byte[]" Utils'bigIntegerToBytes [#_"BigInteger" b, #_"int" __numBytes]
        (assert-argument (<= 0 (.. b (signum))), "b must be positive or zero")
        (assert-argument (< 0 __numBytes), "numBytes must be positive")

        (let [#_"byte[]" src (.. b (toByteArray))
              #_"byte[]" dest (byte-array __numBytes)
              #_"boolean" __isFirstByteOnlyForSign (= (aget src 0) 0)
              #_"int" length (if __isFirstByteOnlyForSign (dec (alength src)) (alength src))]

            (assert-argument (<= length __numBytes), (str "The given number does not fit in " __numBytes))

            (let [#_"int" __srcPos (if __isFirstByteOnlyForSign 1 0)
                  #_"int" __destPos (- __numBytes length)]
                (System/arraycopy src, __srcPos, dest, __destPos, length)
                dest
            )
        )
    )

    #_public
    #_static
    (§ defn #_"void" Utils'uint32ToByteArrayBE [#_"long" val, #_"byte[]" out, #_"int" offset]
        (aset out offset (byte (& 0xff (>> val 24))))
        (aset out (inc offset) (byte (& 0xff (>> val 16))))
        (aset out (+ offset 2) (byte (& 0xff (>> val 8))))
        (aset out (+ offset 3) (byte (& 0xff val)))
        nil
    )

    #_public
    #_static
    (§ defn #_"void" Utils'uint32ToByteArrayLE [#_"long" val, #_"byte[]" out, #_"int" offset]
        (aset out offset (byte (& 0xff val)))
        (aset out (inc offset) (byte (& 0xff (>> val 8))))
        (aset out (+ offset 2) (byte (& 0xff (>> val 16))))
        (aset out (+ offset 3) (byte (& 0xff (>> val 24))))
        nil
    )

    #_public
    #_static
    (§ defn #_"void" Utils'uint64ToByteArrayLE [#_"long" val, #_"byte[]" out, #_"int" offset]
        (aset out offset (byte (& 0xff val)))
        (aset out (inc offset) (byte (& 0xff (>> val 8))))
        (aset out (+ offset 2) (byte (& 0xff (>> val 16))))
        (aset out (+ offset 3) (byte (& 0xff (>> val 24))))
        (aset out (+ offset 4) (byte (& 0xff (>> val 32))))
        (aset out (+ offset 5) (byte (& 0xff (>> val 40))))
        (aset out (+ offset 6) (byte (& 0xff (>> val 48))))
        (aset out (+ offset 7) (byte (& 0xff (>> val 56))))
        nil
    )

    #_public
    #_static
    (§ defn #_"void" Utils'uint32ToByteStreamLE [#_"long" val, #_"ByteArrayOutputStream" baos]
        (.. baos (write (int (& 0xff val))))
        (.. baos (write (int (& 0xff (>> val 8)))))
        (.. baos (write (int (& 0xff (>> val 16)))))
        (.. baos (write (int (& 0xff (>> val 24)))))
        nil
    )

    #_public
    #_static
    (§ defn #_"void" Utils'int64ToByteStreamLE [#_"long" val, #_"ByteArrayOutputStream" baos]
        (.. baos (write (int (& 0xff val))))
        (.. baos (write (int (& 0xff (>> val 8)))))
        (.. baos (write (int (& 0xff (>> val 16)))))
        (.. baos (write (int (& 0xff (>> val 24)))))
        (.. baos (write (int (& 0xff (>> val 32)))))
        (.. baos (write (int (& 0xff (>> val 40)))))
        (.. baos (write (int (& 0xff (>> val 48)))))
        (.. baos (write (int (& 0xff (>> val 56)))))
        nil
    )

    #_public
    #_static
    (§ defn #_"void" Utils'uint64ToByteStreamLE [#_"BigInteger" val, #_"ByteArrayOutputStream" baos]
        (let [#_"byte[]" bytes (.. val (toByteArray))]
            (when (< 8 (alength bytes))
                (throw (RuntimeException. "Input too large to encode into a uint64"))
            )

            (§ ass bytes (Utils'reverseBytes bytes))
            (.. baos (write bytes))
            (when (< (alength bytes) 8)
                (loop-when-recur [#_"int" i 0] (< i (- 8 (alength bytes))) [(inc i)]
                    (.. baos (write 0))
                )
            )
        )
        nil
    )

    ;;;
     ; Work around lack of unsigned types in Java.
     ;;
    #_public
    #_static
    (§ defn #_"boolean" Utils'isLessThanUnsigned [#_"long" n1, #_"long" n2]
        (< (UnsignedLongs/compare n1, n2) 0)
    )

    ;;;
     ; Work around lack of unsigned types in Java.
     ;;
    #_public
    #_static
    (§ defn #_"boolean" Utils'isLessThanOrEqualToUnsigned [#_"long" n1, #_"long" n2]
        (<= (UnsignedLongs/compare n1, n2) 0)
    )

    ;;;
     ; Hex encoding used throughout the framework.  Use with HEX.encode(byte[]) or HEX.decode(CharSequence).
     ;;
    #_public
    #_static
    (def #_"BaseEncoding" Utils'HEX (.. (BaseEncoding/base16) (lowerCase)))

    ;;;
     ; Returns a copy of the given byte array in reverse order.
     ;;
    #_public
    #_static
    (§ defn #_"byte[]" Utils'reverseBytes [#_"byte[]" bytes]
        ;; We could use the XOR trick here, but it's easier to understand if we don't.
        ;; If we find this is really a performance issue, the matter can be revisited.
        (let [#_"byte[]" buf (byte-array (alength bytes))]
            (loop-when-recur [#_"int" i 0] (< i (alength bytes)) [(inc i)]
                (aset buf i (aget bytes (- (alength bytes) 1 i)))
            )
            buf
        )
    )

    ;;;
     ; Returns a copy of the given byte array with the bytes of each double-word (4 bytes) reversed.
     ;
     ; @param bytes Length must be divisible by 4.
     ; @param trimLength Trim output to this length.  If positive, must be divisible by 4.
     ;;
    #_public
    #_static
    (§ defn #_"byte[]" Utils'reverseDwordBytes [#_"byte[]" bytes, #_"int" __trimLength]
        (assert-argument (= (rem (alength bytes) 4) 0))
        (assert-argument (or (< __trimLength 0) (= (rem __trimLength 4) 0)))

        (let [#_"byte[]" rev (byte-array (if (< -1 __trimLength (alength bytes)) __trimLength (alength bytes)))]

            (loop-when-recur [#_"int" i 0] (< i (alength rev)) [(+ i 4)]
                (System/arraycopy bytes, i, rev, i, 4)
                (loop-when-recur [#_"int" j 0] (< j 4) [(inc j)]
                    (aset rev (+ i j) (aget bytes (- (+ i 3) j)))
                )
            )
            rev
        )
    )

    ;;; Parse 4 bytes from the byte array (starting at the offset) as unsigned 32-bit integer in little endian format. ;;
    #_public
    #_static
    (§ defn #_"long" Utils'readUint32 [#_"byte[]" bytes, #_"int" offset]
        (| (& 0xff (aget bytes offset)) (<< (& 0xff (aget bytes (inc offset))) 8) (<< (& 0xff (aget bytes (+ offset 2))) 16) (<< (& 0xff (aget bytes (+ offset 3))) 24))
    )

    ;;; Parse 8 bytes from the byte array (starting at the offset) as signed 64-bit integer in little endian format. ;;
    #_public
    #_static
    (§ defn #_"long" Utils'readInt64 [#_"byte[]" bytes, #_"int" offset]
        (| (& 0xff (aget bytes offset)) (<< (& 0xff (aget bytes (inc offset))) 8) (<< (& 0xff (aget bytes (+ offset 2))) 16) (<< (& 0xff (aget bytes (+ offset 3))) 24) (<< (& 0xff (aget bytes (+ offset 4))) 32) (<< (& 0xff (aget bytes (+ offset 5))) 40) (<< (& 0xff (aget bytes (+ offset 6))) 48) (<< (& 0xff (aget bytes (+ offset 7))) 56))
    )

    ;;; Parse 4 bytes from the byte array (starting at the offset) as unsigned 32-bit integer in big endian format. ;;
    #_public
    #_static
    (§ defn #_"long" Utils'readUint32BE [#_"byte[]" bytes, #_"int" offset]
        (| (<< (& 0xff (aget bytes offset)) 24) (<< (& 0xff (aget bytes (inc offset))) 16) (<< (& 0xff (aget bytes (+ offset 2))) 8) (& 0xff (aget bytes (+ offset 3))))
    )

    ;;; Parse 2 bytes from the byte array (starting at the offset) as unsigned 16-bit integer in big endian format. ;;
    #_public
    #_static
    (§ defn #_"int" Utils'readUint16BE [#_"byte[]" bytes, #_"int" offset]
        (| (<< (& 0xff (aget bytes offset)) 8) (& 0xff (aget bytes (inc offset))))
    )

    ;;;
     ; Calculates RIPEMD160(SHA256(input)).  This is used in Address calculations.
     ;;
    #_public
    #_static
    (§ defn #_"byte[]" Utils'sha256hash160 [#_"byte[]" input]
        (let [#_"byte[]" sha256 (Sha256Hash'hash input)
              #_"RIPEMD160Digest" digest (RIPEMD160Digest.)]
            (.. digest (update sha256, 0, (alength sha256)))
            (let [#_"byte[]" out (byte-array 20)]
                (.. digest (doFinal out, 0))
                out
            )
        )
    )

    ;;;
     ; MPI encoded numbers are produced by the OpenSSL BN_bn2mpi function.  They consist of
     ; a 4 byte big endian length field, followed by the stated number of bytes representing
     ; the number in big endian format (with a sign bit).
     ;
     ; @param hasLength can be set to false if the given array is missing the 4 byte length field.
     ;;
    #_public
    #_static
    (§ defn #_"BigInteger" Utils'decodeMPI [#_"byte[]" mpi, #_"boolean" __hasLength]
        (let [#_"byte[]" buf]
            (if __hasLength
                (let [#_"int" n (int (Utils'readUint32BE mpi, 0))]
                    (§ ass buf (byte-array n))
                    (System/arraycopy mpi, 4, buf, 0, n)
                )
                (§ ass buf mpi)
            )
            (if (= (alength buf) 0)
                BigInteger/ZERO
                (let [#_"boolean" negative? (= (& (aget buf 0) 0x80) 0x80)]
                    (when negative?
                        (aset buf 0 (& (aget buf 0) 0x7f))
                    )
                    (let [#_"BigInteger" result (BigInteger. buf)]
                        (if negative? (.. result (negate)) result)
                    )
                )
            )
        )
    )

    ;;;
     ; MPI encoded numbers are produced by the OpenSSL BN_bn2mpi function.  They consist of
     ; a 4 byte big endian length field, followed by the stated number of bytes representing
     ; the number in big endian format (with a sign bit).
     ;
     ; @param includeLength indicates whether the 4 byte length field should be included.
     ;;
    #_public
    #_static
    (§ defn #_"byte[]" Utils'encodeMPI [#_"BigInteger" value, #_"boolean" __includeLength]
        (if (.. value (equals BigInteger/ZERO))
            (if __includeLength (byte-array [ 0x00, 0x00, 0x00, 0x00 ]) (byte-array 0))
            (let [#_"boolean" negative? (< (.. value (signum)) 0) value (if negative?  (.. value (negate)) value)
                  #_"byte[]" array (.. value (toByteArray)) #_"int" length (alength array) length (if (= (& (aget array 0) 0x80) 0x80) (inc length) length)]
                (cond __includeLength
                    (let [#_"byte[]" result (byte-array (+ length 4))]
                        (System/arraycopy array, 0, result, (+ (- length (alength array)) 3), (alength array))
                        (Utils'uint32ToByteArrayBE length, result, 0)
                        (when negative?
                            (aset result 4 (| (aget result 4) 0x80))
                        )
                        result
                    )
                    :else
                    (let [#_"byte[]" result]
                        (cond (not= length (alength array))
                            (do
                                (§ ass result (byte-array length))
                                (System/arraycopy array, 0, result, 1, (alength array))
                            )
                            :else
                            (do
                                (§ ass result array)
                            )
                        )
                        (when negative?
                            (aset result 0 (| (aget result 0) 0x80))
                        )
                        result
                    )
                )
            )
        )
    )

    ;;;
     ; The "compact" format is a representation of a whole number N using an unsigned 32 bit number similar to
     ; a floating point format.  The most significant 8 bits are the unsigned exponent of base 256.  This exponent
     ; can be thought of as "number of bytes of N".  The lower 23 bits are the mantissa.  Bit number 24 (0x800000)
     ; represents the sign of N.  Therefore, N = (-1^sign) * mantissa * 256^(exponent-3).
     ;
     ; Satoshi's original implementation used BN_bn2mpi() and BN_mpi2bn().  MPI uses the most significant bit of
     ; the first byte as sign.  Thus 0x1234560000 is compact 0x05123456 and 0xc0de000000 is compact 0x0600c0de.
     ; Compact 0x05c0de00 would be -0x40de000000.
     ;
     ; Bitcoin only uses this "compact" format for encoding difficulty targets, which are unsigned 256bit quantities.
     ; Thus, all the complexities of the sign bit and using base 256 are probably an implementation accident.
     ;;
    #_public
    #_static
    (§ defn #_"BigInteger" Utils'decodeCompactBits [#_"long" compact]
        (let [#_"int" size (& (int (>> compact 24)) 0xff)
              #_"byte[]" bytes (byte-array (+ 4 size))]
            (aset bytes 3 (byte size))
            (when (<= 1 size)
                (aset bytes 4 (byte (& (>> compact 16) 0xff)))
            )
            (when (<= 2 size)
                (aset bytes 5 (byte (& (>> compact 8) 0xff)))
            )
            (when (<= 3 size)
                (aset bytes 6 (byte (& compact 0xff)))
            )
            (Utils'decodeMPI bytes, true)
        )
    )

    ;;;
     ; @see Utils#decodeCompactBits(long)
     ;;
    #_public
    #_static
    (§ defn #_"long" Utils'encodeCompactBits [#_"BigInteger" value]
        (let [#_"int" size (alength (.. value (toByteArray)))
              #_"long" result (if (<= size 3) (<< (.. value (longValue)) (* 8 (- 3 size))) (.. value (shiftRight (* 8 (- size 3))) (longValue)))]
            ;; The 0x00800000 bit denotes the sign.
            ;; Thus, if it is already set, divide the mantissa by 256 and increase the exponent.
            (when (not= (& result 0x00800000) 0)
                (§ ass result (>> result 8))
                (§ ass size (inc size))
            )
            (§ ass result (| result (<< size 24)))
            (§ ass result (| result (if (= (.. value (signum)) -1) 0x00800000 0)))
            result
        )
    )

    ;;;
     ; Returns the current time.
     ;;
    #_public
    #_static
    (§ defn #_"Date" Utils'now []
        (Date.)
    )

    ;; TODO: Replace usages of this where the result is / 1000 with currentTimeSeconds.
    ;;; Returns the current time in milliseconds since the epoch. ;;
    #_public
    #_static
    (§ defn #_"long" Utils'currentTimeMillis []
        (System/currentTimeMillis)
    )

    #_public
    #_static
    (§ defn #_"long" Utils'currentTimeSeconds []
        (quot (Utils'currentTimeMillis) 1000)
    )

    #_private
    #_static
    (def- #_"TimeZone" Utils'UTC (TimeZone/getTimeZone "UTC"))

    ;;;
     ; Formats a given date+time value to an ISO 8601 string.
     ;
     ; @param dateTime value to format, as a Date
     ;;
    #_public
    #_static
    (§ defn #_"String" Utils'dateTimeFormat [#_"Date" __dateTime]
        (let [#_"DateFormat" iso8601 (SimpleDateFormat. "yyyy-MM-dd'T'HH:mm:ss'Z'", Locale/US)]
            (.. iso8601 (setTimeZone Utils'UTC))
            (.. iso8601 (format __dateTime))
        )
    )

    ;;;
     ; Formats a given date+time value to an ISO 8601 string.
     ;
     ; @param dateTime value to format, unix time (ms)
     ;;
    #_public
    #_static
    (§ defn #_"String" Utils'dateTimeFormat [#_"long" __dateTime]
        (let [#_"DateFormat" iso8601 (SimpleDateFormat. "yyyy-MM-dd'T'HH:mm:ss'Z'", Locale/US)]
            (.. iso8601 (setTimeZone Utils'UTC))
            (.. iso8601 (format __dateTime))
        )
    )

    #_public
    #_static
    (§ defn #_"byte[]" Utils'copyOf [#_"byte[]" in, #_"int" length]
        (let [#_"byte[]" out (byte-array length)]
            (System/arraycopy in, 0, out, 0, (min length, (alength in)))
            out
        )
    )

    ;;;
     ; Creates a copy of bytes and appends b to the end of it.
     ;;
    #_public
    #_static
    (§ defn #_"byte[]" Utils'appendByte [#_"byte[]" bytes, #_"byte" b]
        (let [#_"byte[]" result (Arrays/copyOf bytes, (inc (alength bytes)))]
            (aset result (dec (alength result)) b)
            result
        )
    )

    ;;;
     ; Constructs a new String by decoding the given bytes using the specified charset.
     ;
     ; This is a convenience method which wraps the checked exception with a RuntimeException.
     ; The exception can never occur given the charsets
     ; US-ASCII, ISO-8859-1, UTF-8, UTF-16, UTF-16LE or UTF-16BE.
     ;
     ; @param bytes The bytes to be decoded into characters.
     ; @param charsetName The name of a supported {@linkplain java.nio.charset.Charset charset}.
     ; @return the decoded String.
     ;;
    #_public
    #_static
    (§ defn #_"String" Utils'toString [#_"byte[]" bytes, #_"String" charset]
        (try
            (String. bytes, charset)
            (catch UnsupportedEncodingException e
                (throw (RuntimeException. e))
            )
        )
    )

    ;;;
     ; Encodes the given string into a sequence of bytes using the named charset.
     ;
     ; This is a convenience method which wraps the checked exception with a RuntimeException.
     ; The exception can never occur given the charsets
     ; US-ASCII, ISO-8859-1, UTF-8, UTF-16, UTF-16LE or UTF-16BE.
     ;
     ; @param str The string to encode into bytes.
     ; @param charsetName The name of a supported {@linkplain java.nio.charset.Charset charset}.
     ; @return the encoded bytes.
     ;;
    #_public
    #_static
    (§ defn #_"byte[]" Utils'toBytes [#_"CharSequence" s, #_"String" charset]
        (try
            (.. s (toString) (getBytes charset))
            (catch UnsupportedEncodingException e
                (throw (RuntimeException. e))
            )
        )
    )

    ;;;
     ; Attempts to parse the given string as arbitrary-length hex or base58 and then return the results,
     ; or null if neither parse was successful.
     ;;
    #_public
    #_static
    (§ defn #_"byte[]" Utils'parseAsHexOrBase58 [#_"String" data]
        (try
            (.. Utils'HEX (decode data))
            (catch Exception _
                ;; Didn't decode as hex, try base58.
                (try
                    (Base58'decodeChecked data)
                    (catch AddressFormatException __
                        nil
                    )
                )
            )
        )
    )

    ;;;
     ; Given a textual message, returns a byte buffer formatted as follows:
     ;
     ; <tt>[24] "Bitcoin Signed Message:\n" [message.length as a varint] message</tt>.
     ;;
    #_public
    #_static
    (§ defn #_"byte[]" Utils'formatMessageForSigning [#_"String" message]
        (let [#_"ByteArrayOutputStream" baos (ByteArrayOutputStream.)]
            (.. baos (write (alength Utils'BITCOIN_SIGNED_MESSAGE_HEADER_BYTES)))
            (.. baos (write Utils'BITCOIN_SIGNED_MESSAGE_HEADER_BYTES))
            (let [#_"byte[]" bytes (.. message (getBytes Charsets/UTF_8)) #_"VarInt" size (VarInt. (alength bytes))]
                (.. baos (write (.. size (encode))))
                (.. baos (write bytes))
                (.. baos (toByteArray))
            )
        )
    )

    ;; 00000001, 00000010, 00000100, 00001000, ...
    #_private
    #_static
    (def- #_"int[]" Utils'BIT_MASK (int-array [ 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80 ]))

    ;;; Checks if the given bit is set in data, using little endian (not the same as Java native big endian). ;;
    #_public
    #_static
    (§ defn #_"boolean" Utils'checkBitLE [#_"byte[]" data, #_"int" index]
        (not= (& (aget data (>>> index 3)) (aget Utils'BIT_MASK (& 7 index))) 0)
    )

    ;;; Sets the given bit in data to one, using little endian (not the same as Java native big endian). ;;
    #_public
    #_static
    (§ defn #_"void" Utils'setBitLE [#_"byte[]" data, #_"int" index]
        (aset data (>>> index 3) (| (aget data (>>> index 3)) (aget Utils'BIT_MASK (& 7 index))))
        nil
    )

    ;;; Sleep for a span of time. ;;
    #_public
    #_static
    (§ defn #_"void" Utils'sleep [#_"long" millis]
        (Uninterruptibles/sleepUninterruptibly millis, TimeUnit/MILLISECONDS)
        nil
    )

    #_private
    #_static
    (§ class- Pair (§ implements Comparable #_"<Pair>")
        (§ field- #_"int" :item)
        (§ field- #_"int" :count)

        #_public
        (§ constructor Pair [#_"int" item, #_"int" count]
            (§ assoc this :count count)
            (§ assoc this :item item)
            this
        )

        ;; Note that in this implementation compareTo() is not consistent with equals().
        #_override
        #_public
        (§ method #_"int" compareTo [#_"Pair" o]
            (- (Ints/compare (:count this), (:count o)))
        )
    )

    #_public
    #_static
    (§ defn #_"int" Utils'maxOfMostFreq [#_"int..." items]
        ;; Java 6 sucks.
        (let [#_"ArrayList<Integer>" list (ArrayList. #_"<>" (alength items))]
            (doseq [#_"int" item items]
                (.. list (add item))
            )
            (Utils'maxOfMostFreq list)
        )
    )

    #_public
    #_static
    (§ defn #_"int" Utils'maxOfMostFreq [#_"List<Integer>" items]
        (if (.. items (isEmpty))
            0
            ;; This would be much easier in a functional language (or in Java 8).
            (let [items (.. (Ordering/natural) (reverse) (sortedCopy items)) #_"LinkedList<Pair>" pairs (Lists/newLinkedList)]
                (.. pairs (add (Pair. (.. items (get 0)), 0)))
                (doseq [#_"int" item items]
                    (let [#_"Pair" pair (.. pairs (getLast))]
                        (when (not= (:item pair) item)
                            (§ ass pair (Pair. item, 0))
                            (.. pairs (add pair))
                        )
                        (§ update pair :count inc)
                    )
                )
                ;; pairs now contains a uniqified list of the sorted inputs, with counts for how often that item appeared.
                ;; Now sort by how frequently they occur, and pick the max of the most frequent.
                (Collections/sort pairs)
                (let [#_"int" __maxCount (:count (.. pairs (getFirst))) #_"int" __maxItem (:item (.. pairs (getFirst)))]
                    (doseq [#_"Pair" pair pairs]
                        (when (not= (:count pair) __maxCount)
                            (§ break )
                        )
                        (§ ass __maxItem (max __maxItem, (:item pair)))
                    )
                    __maxItem
                )
            )
        )
    )
)

;;;
 ; A variable-length encoded unsigned integer using Satoshi's encoding (a.k.a. "CompactSize").
 ;;
#_public
(§ class VarInt
    #_public
    (§ field #_"long" :value)
    #_private
    (§ field- #_"int" :originally-encoded-size)

    ;;;
     ; Constructs a new VarInt with the given unsigned long value.
     ;
     ; @param value the unsigned long value (beware widening conversion of negatives!)
     ;;
    #_public
    (§ constructor VarInt [#_"long" value]
        (§ assoc this :value value)
        (§ assoc this :originally-encoded-size (.. this (getSizeInBytes)))
        this
    )

    ;;;
     ; Constructs a new VarInt with the value parsed from the specified offset of the given buffer.
     ;
     ; @param buf The buffer containing the value.
     ; @param offset The offset of the value.
     ;;
    #_public
    (§ constructor VarInt [#_"byte[]" buf, #_"int" offset]
        (let [#_"int" first (& 0xff (aget buf offset))]
            (cond (< first 253)
                (do
                    (§ assoc this :value first)
                    (§ assoc this :originally-encoded-size 1) ;; 1 data byte (8 bits)
                )
                (= first 253)
                (do
                    (§ assoc this :value (| (& 0xff (aget buf (inc offset))) (<< (& 0xff (aget buf (+ offset 2))) 8)))
                    (§ assoc this :originally-encoded-size 3) ;; 1 marker + 2 data bytes (16 bits)
                )
                (= first 254)
                (do
                    (§ assoc this :value (Utils'readUint32 buf, (inc offset)))
                    (§ assoc this :originally-encoded-size 5) ;; 1 marker + 4 data bytes (32 bits)
                )
                :else
                (do
                    (§ assoc this :value (Utils'readInt64 buf, (inc offset)))
                    (§ assoc this :originally-encoded-size 9) ;; 1 marker + 8 data bytes (64 bits)
                )
            )
            this
        )
    )

    ;;;
     ; Returns the original number of bytes used to encode the value if it was
     ; deserialized from a byte array, or the minimum encoded size if it was not.
     ;;
    #_public
    (§ method #_"int" getOriginalSizeInBytes []
        (:originally-encoded-size this)
    )

    ;;;
     ; Returns the minimum encoded size of the value.
     ;;
    #_public
    (§ method #_"int" getSizeInBytes []
        (VarInt'sizeOf (:value this))
    )

    ;;;
     ; Returns the minimum encoded size of the given unsigned long value.
     ;
     ; @param value the unsigned long value (beware widening conversion of negatives!)
     ;;
    #_public
    #_static
    (§ defn #_"int" VarInt'sizeOf [#_"long" value]
        (cond ;; if negative, it's actually a very large unsigned long value
            (< value 0)           9 ;; 1 marker + 8 data bytes
            (< value 253)         1 ;; 1 data byte
            (<= value 0xffff)     3 ;; 1 marker + 2 data bytes
            (<= value 0xffffffff) 5 ;; 1 marker + 4 data bytes
            :else                 9 ;; 1 marker + 8 data bytes
        )
    )

    ;;;
     ; Encodes the value into its minimal representation.
     ;
     ; @return the minimal encoded bytes of the value.
     ;;
    #_public
    (§ method #_"byte[]" encode []
        (case (VarInt'sizeOf (:value this))
            1 (byte-array [ (byte (:value this)) ])
            3 (byte-array [ (byte 253), (byte (:value this)), (byte (>> (:value this) 8)) ])
            5 (let [#_"byte[]" bytes (byte-array 5)]
                    (aset bytes 0 (byte 254))
                    (Utils'uint32ToByteArrayLE (:value this), bytes, 1)
                    bytes)
              (let [#_"byte[]" bytes (byte-array 9)]
                    (aset bytes 0 (byte 255))
                    (Utils'uint64ToByteArrayLE (:value this), bytes, 1)
                    bytes)
        )
    )
)

#_public
(§ class VerificationException (§ extends RuntimeException)
    #_public
    (§ constructor VerificationException [#_"String" msg]
        (§ super msg)
        this
    )

    #_public
    (§ constructor VerificationException [#_"Exception" e]
        (§ super e)
        this
    )

    #_public
    (§ constructor VerificationException [#_"String" msg, #_"Throwable" t]
        (§ super msg, t)
        this
    )
)

;;;
 ; The verack message, sent by a client accepting the version message they
 ; received from their peer.
 ;
 ; Instances of this class are not safe for use by multiple threads.
 ;;
#_public
(§ class VersionAck (§ extends EmptyMessage)
    #_public
    (§ constructor VersionAck []
        this
    )

    ;; this is needed by the BitcoinSerializer
    #_public
    (§ constructor VersionAck [#_"NetworkParameters" params, #_"byte[]" payload]
        this
    )
)

;;;
 ; A VersionMessage holds information exchanged during connection setup with another peer.  Most of the fields are
 ; not particularly interesting.  The subVer field, since BIP 14, acts as a User-Agent string would.  You can and should
 ; append to or change the subVer for your own software so other implementations can identify it, and you can look at
 ; the subVer field received from other nodes to see what they are running.
 ;
 ; After creating yourself a VersionMessage, you can pass it to {@link PeerGroup#setVersionMessage(VersionMessage)}
 ; to ensure it will be used for each new connection.
 ;
 ; Instances of this class are not safe for use by multiple threads.
 ;;
#_public
(§ class VersionMessage (§ extends Message)
    ;;; The version of this library release, as a string. ;;
    #_public
    #_static
    (def #_"String" VersionMessage'BITCOINJ_VERSION "0.15-SNAPSHOT")
    ;;; The value that is prepended to the subVer field of this application. ;;
    #_public
    #_static
    (def #_"String" VersionMessage'LIBRARY_SUBVER (str "/bitcoinj:" VersionMessage'BITCOINJ_VERSION "/"))

    ;;; A services flag that denotes whether the peer has a copy of the block chain or not. ;;
    #_public
    #_static
    (def #_"int" VersionMessage'NODE_NETWORK 1)

    ;;;
     ; The version number of the protocol spoken.
     ;;
    #_public
    (§ field #_"int" :client-version)
    ;;;
     ; Flags defining what optional services are supported.
     ;;
    #_public
    (§ field #_"long" :local-services)
    ;;;
     ; What the other side believes the current time to be, in seconds.
     ;;
    #_public
    (§ field #_"long" :time)
    ;;;
     ; What the other side believes the address of this program is.  Not used.
     ;;
    #_public
    (§ field #_"PeerAddress" :my-addr)
    ;;;
     ; What the other side believes their own address is.  Not used.
     ;;
    #_public
    (§ field #_"PeerAddress" :their-addr)
    ;;;
     ; User-Agent as defined in <a href="https://github.com/bitcoin/bips/blob/master/bip-0014.mediawiki">BIP 14</a>.
     ; Bitcoin Core sets it to something like "/Satoshi:0.9.1/".
     ;;
    #_public
    (§ field #_"String" :sub-ver)
    ;;;
     ; How many blocks are in the chain, according to the other side.
     ;;
    #_public
    (§ field #_"long" :best-height)
    ;;;
     ; Whether or not to relay tx invs before a filter is received.
     ; See <a href="https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki#extensions-to-existing-messages">BIP 37</a>.
     ;;
    #_public
    (§ field #_"boolean" :relay-txes-before-filter)

    #_public
    #_throws #_[ "ProtocolException" ]
    (§ constructor VersionMessage [#_"NetworkParameters" params, #_"byte[]" payload]
        (§ super params, payload, 0)
        this
    )

    ;; It doesn't really make sense to ever lazily parse a version message or to retain the backing bytes.
    ;; If you're receiving this on the wire you need to check the protocol version and it will never need
    ;; to be sent back down the wire.

    #_public
    (§ constructor VersionMessage [#_"NetworkParameters" params, #_"int" __newBestHeight]
        (§ super params)

        (§ assoc this :client-version ProtocolVersion'CURRENT)
        (§ assoc this :local-services 0)
        (§ assoc this :time (quot (System/currentTimeMillis) 1000))
        ;; Note that the Bitcoin Core doesn't do anything with these, and finding out your own external IP address
        ;; is kind of tricky anyway, so we just put nonsense here for now.
        (let [#_"InetAddress" localhost (InetAddresses/forString "127.0.0.1")]
            (§ assoc this :my-addr (PeerAddress. params, localhost, (:port params), 0, BigInteger/ZERO))
            (§ assoc this :their-addr (PeerAddress. params, localhost, (:port params), 0, BigInteger/ZERO))
            (§ assoc this :sub-ver VersionMessage'LIBRARY_SUBVER)
            (§ assoc this :best-height __newBestHeight)
            (§ assoc this :relay-txes-before-filter true)

            (§ assoc this :length 85)
            (when (< 31402 (:protocol-version this))
                (§ update this :length + 8)
            )
            (§ assoc this :length (+ (:length this) (VarInt'sizeOf (.. (:sub-ver this) (length))) (.. (:sub-ver this) (length))))
            this
        )
    )

    #_override
    #_protected
    #_throws #_[ "ProtocolException" ]
    (§ method #_"void" parse []
        (§ assoc this :client-version (int (.. this (readUint32))))
        (§ assoc this :local-services (.. this (readUint64) (longValue)))
        (§ assoc this :time (.. this (readUint64) (longValue)))
        (§ assoc this :my-addr (PeerAddress. (:params this), (:payload this), (:cursor this), 0))
        (§ assoc this :cursor (+ (:cursor this) (.. (:my-addr this) (getMessageSize))))
        (§ assoc this :their-addr (PeerAddress. (:params this), (:payload this), (:cursor this), 0))
        (§ assoc this :cursor (+ (:cursor this) (.. (:their-addr this) (getMessageSize))))
        ;; uint64 localHostNonce (random data)
        ;; We don't care about the localhost nonce.  It's used to detect connecting back to yourself in cases where
        ;; there are NATs and proxies in the way.  However we don't listen for inbound connections so it's irrelevant.
        (.. this (readUint64))
        (try
            ;; Initialize default values for flags which may not be sent by old nodes.
            (§ assoc this :sub-ver "")
            (§ assoc this :best-height 0)
            (§ assoc this :relay-txes-before-filter true)
            (when (not (.. this (hasMoreBytes)))
                (§ return nil)
            )

            ;; string subVer (currently "")
            (§ assoc this :sub-ver (.. this (readStr)))
            (when (not (.. this (hasMoreBytes)))
                (§ return nil)
            )

            ;; int bestHeight (size of known block chain)
            (§ assoc this :best-height (.. this (readUint32)))
            (when (not (.. this (hasMoreBytes)))
                (§ return nil)
            )

            (§ assoc this :relay-txes-before-filter (not= (aget (.. this (readBytes 1)) 0) 0))
            (finally
                (§ assoc this :length (- (:cursor this) (:offset this)))
            )
        )
        nil
    )

    #_override
    #_public
    (§ method #_"void" bitcoinSerializeToStream [#_"ByteArrayOutputStream" baos]
        (Utils'uint32ToByteStreamLE (:client-version this), baos)
        (Utils'uint32ToByteStreamLE (:local-services this), baos)
        (Utils'uint32ToByteStreamLE (>> (:local-services this) 32), baos)
        (Utils'uint32ToByteStreamLE (:time this), baos)
        (Utils'uint32ToByteStreamLE (>> (:time this) 32), baos)
        (try
            ;; My address.
            (.. (:my-addr this) (bitcoinSerialize baos))
            ;; Their address.
            (.. (:their-addr this) (bitcoinSerialize baos))
            (catch UnknownHostException e
                (throw (RuntimeException. e)) ;; Can't happen.
            )
            (catch IOException e
                (throw (RuntimeException. e)) ;; Can't happen.
            )
        )
        ;; Next up is the "local host nonce", this is to detect the case of connecting back to yourself.
        ;; We don't care about this as we won't be accepting inbound connections.
        (Utils'uint32ToByteStreamLE 0, baos)
        (Utils'uint32ToByteStreamLE 0, baos)
        ;; Now comes subVer.
        (let [#_"byte[]" __subVerBytes (.. (:sub-ver this) (getBytes "UTF-8"))]
            (.. baos (write (.. (VarInt. (alength __subVerBytes)) (encode))))
            (.. baos (write __subVerBytes))
            ;; Size of known block chain.
            (Utils'uint32ToByteStreamLE (:best-height this), baos)
            (.. baos (write (if (:relay-txes-before-filter this) 1 0)))
        )
        nil
    )

    ;;;
     ; Returns true if the version message indicates the sender has a full copy of the block chain,
     ; or if it's running in client mode (only has the headers).
     ;;
    #_public
    (§ method #_"boolean" hasBlockChain []
        (= (& (:local-services this) VersionMessage'NODE_NETWORK) VersionMessage'NODE_NETWORK)
    )

    #_override
    #_public
    (§ method #_"boolean" equals [#_"Object" o]
        (cond
            (= this o) true
            (or (nil? o) (not= (getClass) (.. o (getClass)))) false
            :else (let [#_"VersionMessage" other (cast VersionMessage o)]
                (and (= (:best-height other) (:best-height this)) (= (:client-version other) (:client-version this)) (= (:local-services other) (:local-services this)) (= (:time other) (:time this)) (.. (:sub-ver other) (equals (:sub-ver this))) (.. (:my-addr other) (equals (:my-addr this))) (.. (:their-addr other) (equals (:their-addr this))) (= (:relay-txes-before-filter other) (:relay-txes-before-filter this)))
            )
        )
    )

    #_override
    #_public
    (§ method #_"int" hashCode []
        (Objects/hashCode (:best-height this), (:client-version this), (:local-services this), (:time this), (:sub-ver this), (:my-addr this), (:their-addr this), (:relay-txes-before-filter this))
    )

    #_override
    #_public
    (§ method #_"String" toString []
        (let [#_"StringBuilder" sb (StringBuilder.)]
            (.. sb (append "\n"))
            (.. sb (append "client version: ") (append (:client-version this)) (append "\n"))
            (.. sb (append "local services: ") (append (:local-services this)) (append "\n"))
            (.. sb (append "time:           ") (append (:time this)) (append "\n"))
            (.. sb (append "my addr:        ") (append (:my-addr this)) (append "\n"))
            (.. sb (append "their addr:     ") (append (:their-addr this)) (append "\n"))
            (.. sb (append "sub version:    ") (append (:sub-ver this)) (append "\n"))
            (.. sb (append "best height:    ") (append (:best-height this)) (append "\n"))
            (.. sb (append "delay tx relay: ") (append (not (:relay-txes-before-filter this))) (append "\n"))
            (.. sb (toString))
        )
    )

    #_public
    (§ method #_"VersionMessage" duplicate []
        (let [#_"VersionMessage" v (VersionMessage. (:params this), (int (:best-height this)))]
            (§ assoc v :client-version (:client-version this))
            (§ assoc v :local-services (:local-services this))
            (§ assoc v :time (:time this))
            (§ assoc v :my-addr (:my-addr this))
            (§ assoc v :their-addr (:their-addr this))
            (§ assoc v :sub-ver (:sub-ver this))
            (§ assoc v :relay-txes-before-filter (:relay-txes-before-filter this))
            v
        )
    )

    ;;;
     ; Appends the given user-agent information to the subVer field.  The subVer is composed of a series of
     ; name:version pairs separated by slashes in the form of a path.  For example a typical subVer field for bitcoinj
     ; users might look like "/bitcoinj:0.13/MultiBit:1.2/" where libraries come further to the left.
     ;
     ; There can be as many components as you feel a need for, and the version string can be anything, but it is
     ; recommended to use A.B.C where A = major, B = minor and C = revision for software releases, and dates for
     ; auto-generated source repository snapshots.  A valid subVer begins and ends with a slash, therefore name
     ; and version are not allowed to contain such characters.
     ;
     ; Anything put in the "comments" field will appear in brackets and may be used for platform info, or anything
     ; else.  For example, calling <tt>appendToSubVer("MultiBit", "1.0", "Windows")</tt> will result in a subVer being
     ; set of "/bitcoinj:1.0/MultiBit:1.0(Windows)/".  Therefore the / ( and ) characters are reserved in all these
     ; components.  If you don't want to add a comment (recommended), pass null.
     ;
     ; See <a href="https://github.com/bitcoin/bips/blob/master/bip-0014.mediawiki">BIP 14</a> for more information.
     ;
     ; @param comments Optional (can be null) platform or other node specific information.
     ; @throws IllegalArgumentException if name, version or comments contains invalid characters.
     ;;
    #_public
    (§ method #_"void" appendToSubVer [#_"String" name, #_"String" version, #_nilable #_"String" comments]
        (VersionMessage'checkSubVerComponent name)
        (VersionMessage'checkSubVerComponent version)

        (cond (some? comments)
            (do
                (VersionMessage'checkSubVerComponent comments)
                (§ assoc this :sub-ver (.. (:sub-ver this) (concat (String/format Locale/US, "%s:%s(%s)/", name, version, comments))))
            )
            :else
            (do
                (§ assoc this :sub-ver (.. (:sub-ver this) (concat (String/format Locale/US, "%s:%s/", name, version))))
            )
        )
        nil
    )

    #_private
    #_static
    (§ defn- #_"void" VersionMessage'checkSubVerComponent [#_"String" component]
        (when (or (.. component (contains "/")) (.. component (contains "(")) (.. component (contains ")")))
            (throw (IllegalArgumentException. "name contains invalid characters"))
        )
        nil
    )

    ;;;
     ; Returns true if the clientVersion field is >= Pong.MIN_PROTOCOL_VERSION.  If it is then ping() is usable.
     ;;
    #_public
    (§ method #_"boolean" isPingPongSupported []
        (<= ProtocolVersion'PONG (:client-version this))
    )

    ;;;
     ; Returns true if the clientVersion field is >= FilteredBlock.MIN_PROTOCOL_VERSION.  If it is then Bloom filtering
     ; is available and the memory pool of the remote peer will be queried when the downloadData property is true.
     ;;
    #_public
    (§ method #_"boolean" isBloomFilteringSupported []
        (<= ProtocolVersion'BLOOM_FILTER (:client-version this))
    )
)

;;;
 ; In Bitcoin the following format is often used to represent some type of key:
 ;
 ; <pre>[one version byte] [data bytes] [4 checksum bytes]</pre>
 ;
 ; and the result is then Base58 encoded.
 ; This format is used for addresses, and private keys exported using the dumpprivkey command.
 ;;
#_public
(§ class VersionedChecksummedBytes (§ implements Comparable #_"<VersionedChecksummedBytes>")
    #_protected
    (§ field #_"int" :version)
    #_protected
    (§ field #_"byte[]" :bytes)

    #_protected
    #_throws #_[ "AddressFormatException" ]
    (§ constructor VersionedChecksummedBytes [#_"String" encoded]
        (let [#_"byte[]" __versionAndDataBytes (Base58'decodeChecked encoded)
              #_"byte" __versionByte (aget __versionAndDataBytes 0)]
            (§ assoc this :version (& __versionByte 0xff))
            (§ assoc this :bytes (byte-array (dec (alength __versionAndDataBytes))))
            (System/arraycopy __versionAndDataBytes, 1, (:bytes this), 0, (dec (alength __versionAndDataBytes)))
            this
        )
    )

    #_protected
    (§ constructor VersionedChecksummedBytes [#_"int" version, #_"byte[]" bytes]
        (assert-argument (< -1 version 256))

        (§ assoc this :version version)
        (§ assoc this :bytes bytes)
        this
    )

    ;;;
     ; Returns the base-58 encoded String representation of this object,
     ; including version and checksum bytes.
     ;;
    #_public
    (§ method #_"String" toBase58 []
        ;; A stringified buffer is: 1 byte version + data bytes + 4 bytes check code (a truncated hash).
        (let [#_"byte[]" __addressBytes (byte-array (+ 1 (alength (:bytes this)) 4))]
            (aset __addressBytes 0 (byte (:version this)))
            (System/arraycopy (:bytes this), 0, __addressBytes, 1, (alength (:bytes this)))
            (let [#_"byte[]" checksum (Sha256Hash'hashTwice __addressBytes, 0, (inc (alength (:bytes this))))]
                (System/arraycopy checksum, 0, __addressBytes, (inc (alength (:bytes this))), 4)
                (Base58'encode __addressBytes)
            )
        )
    )

    #_override
    #_public
    (§ method #_"String" toString []
        (DeterministicKey'toBase58)
    )

    #_override
    #_public
    (§ method #_"int" hashCode []
        (Objects/hashCode (:version this), (Arrays/hashCode (:bytes this)))
    )

    #_override
    #_public
    (§ method #_"boolean" equals [#_"Object" o]
        (cond
            (= this o) true
            (or (nil? o) (not= (getClass) (.. o (getClass)))) false
            :else (let [#_"VersionedChecksummedBytes" other (cast VersionedChecksummedBytes o)]
                (and (= (:version this) (:version other)) (Arrays/equals (:bytes this), (:bytes other)))
            )
        )
    )

    ;;;
     ; {@inheritDoc}
     ;
     ; This implementation uses an optimized Google Guava method to compare <code>bytes</code>.
     ;;
    #_override
    #_public
    (§ method #_"int" compareTo [#_"VersionedChecksummedBytes" o]
        (let [#_"int" result (Ints/compare (:version this), (:version o))]
            (if (not= result 0) result (.. (UnsignedBytes/lexicographicalComparator) (compare (:bytes this), (:bytes o))))
        )
    )

    ;;;
     ; Returns the "version" or "header" byte: the first byte of the data.  This is used to disambiguate what
     ; the contents apply to, for example, which network the key or address is valid on.
     ;
     ; @return a positive number between 0 and 255.
     ;;
    #_public
    (§ method #_"int" getVersion []
        (:version this)
    )
)

;;;
 ; This exception is thrown by the Address class when you try and decode an address with a version code that isn't
 ; used by that network.  You shouldn't allow the user to proceed in this case as they are trying to send money across
 ; different chains, an operation that is guaranteed to destroy the money.
 ;;
#_public
(§ class WrongNetworkException (§ extends AddressFormatException)
    ;;; The version code that was provided in the address. ;;
    #_public
    (§ field #_"int" :ver-code)
    ;;; The list of acceptable versions that were expected given the addresses network parameters. ;;
    #_public
    (§ field #_"int[]" :acceptable-versions)

    #_public
    (§ constructor WrongNetworkException [#_"int" __verCode, #_"int[]" __acceptableVersions]
        (§ super (str "Version code of address did not match acceptable versions for network: " __verCode " not in " (Arrays/toString __acceptableVersions)))

        (§ assoc this :ver-code __verCode)
        (§ assoc this :acceptable-versions __acceptableVersions)
        this
    )
)

#_(ns org.bitcoinj.core.listeners
    (:import [com.google.common.util.concurrent ListenableFuture SettableFuture]
             [java.util Date List Locale Set]
             [java.util.concurrent ExecutionException]
             [org.slf4j LoggerFactory Logger]
    )
)

;;;
 ; Deprecated: implement the more specific event listener interfaces instead to fill out only what you need.
 ;;
#_deprecated
#_public
#_abstract
(§ class AbstractPeerDataEventListener (§ implements PeerDataEventListener)
    #_override
    #_public
    (§ method #_"void" onBlocksDownloaded [#_"Peer" peer, #_"Block" block, #_nilable #_"FilteredBlock" __filteredBlock, #_"int" __blocksLeft]
        nil
    )

    #_override
    #_public
    (§ method #_"void" onChainDownloadStarted [#_"Peer" peer, #_"int" __blocksLeft]
        nil
    )

    #_override
    #_public
    (§ method #_"Message" onPreMessageReceived [#_"Peer" peer, #_"Message" m]
        ;; Just pass the message right through for further processing.
        m
    )

    #_override
    #_public
    (§ method #_"List<Message>" getData [#_"Peer" peer, #_"GetDataMessage" m]
        nil
    )
)

;;;
 ; Old interface for backwards compatibility. Implement the more specific interfaces instead.
 ;;
#_deprecated
#_public
(§ interface BlockChainListener (§ extends NewBestBlockListener, TransactionReceivedInBlockListener, ReorganizeListener))

;;;
 ; Implementors can listen to events like blocks being downloaded/transactions being broadcast/connect/disconnects,
 ; they can pre-filter messages before they are procesesed by a {@link Peer} or {@link PeerGroup}, and they can
 ; provide transactions to remote peers when they ask for them.
 ;;
#_public
(§ interface BlocksDownloadedEventListener
    ;; TODO: Fix the Block/FilteredBlock type hierarchy so we can avoid the stupid typeless API here.
    ;;;
     ; Called on a Peer thread when a block is received.
     ;
     ; The block may be a Block object that contains transactions, a Block object that is only a header when
     ; fast catchup is being used.  If set, filteredBlock can be used to retrieve the list of associated transactions.
     ;
     ; @param peer The peer receiving the block.
     ; @param block The downloaded block.
     ; @param filteredBlock If non-null, the object that wraps the block header passed as the block param.
     ; @param blocksLeft The number of blocks left to download.
     ;;
    (§ method #_"void" onBlocksDownloaded [#_"Peer" peer, #_"Block" block, #_nilable #_"FilteredBlock" __filteredBlock, #_"int" __blocksLeft])
)

;;;
 ; Implementors can listen to events like blocks being downloaded/transactions being broadcast/connect/disconnects,
 ; they can pre-filter messages before they are procesesed by a {@link Peer} or {@link PeerGroup}, and they can
 ; provide transactions to remote peers when they ask for them.
 ;;
#_public
(§ interface ChainDownloadStartedEventListener
    ;;;
     ; Called when a download is started with the initial number of blocks to be downloaded.
     ;
     ; @param peer The peer receiving the block.
     ; @param blocksLeft The number of blocks left to download.
     ;;
    (§ method #_"void" onChainDownloadStarted [#_"Peer" peer, #_"int" __blocksLeft])
)

;;;
 ; An implementation of {@link AbstractPeerDataEventListener} that listens to chain download events and tracks
 ; progress as a percentage.  The default implementation prints progress to stdout, but you can subclass it and
 ; override the progress method to update a GUI instead.
 ;;
#_public
(§ class DownloadProgressTracker (§ extends AbstractPeerDataEventListener)
    #_private
    #_static
    (def- #_"Logger" DownloadProgressTracker'log (LoggerFactory/getLogger DownloadProgressTracker))

    #_private
    (§ field- #_"int" :original-blocks-left -1)
    #_private
    (§ field- #_"int" :last-percent 0)
    #_private
    (§ field- #_"SettableFuture<Long>" :future (SettableFuture/create))
    #_private
    (§ field- #_"boolean" :caught-up false)

    #_override
    #_public
    (§ method #_"void" onChainDownloadStarted [#_"Peer" peer, #_"int" __blocksLeft]
        (when (and (< 0 __blocksLeft) (= (:original-blocks-left this) -1))
            (.. this (startDownload __blocksLeft))
        )
        ;; Only mark this the first time, because this method can be called more than once during a chain download
        ;; if we switch peers during it.
        (if (= (:original-blocks-left this) -1)
            (§ assoc this :original-blocks-left __blocksLeft)
            (.. DownloadProgressTracker'log (info "Chain download switched to {}", peer))
        )
        (when (= __blocksLeft 0)
            (.. this (doneDownload))
            (.. (:future this) (set (.. peer (getBestHeight))))
        )
        nil
    )

    #_override
    #_public
    (§ method #_"void" onBlocksDownloaded [#_"Peer" peer, #_"Block" block, #_nilable #_"FilteredBlock" __filteredBlock, #_"int" __blocksLeft]
        (when-not (:caught-up this)
            (when (= __blocksLeft 0)
                (§ assoc this :caught-up true)
                (.. this (doneDownload))
                (.. (:future this) (set (.. peer (getBestHeight))))
            )

            (when-not (or (< __blocksLeft 0) (<= (:original-blocks-left this) 0))
                (let [#_"double" pct (- 100.0 (* 100.0 (/ __blocksLeft (double (:original-blocks-left this)))))]
                    (when (not= (int pct) (:last-percent this))
                        (.. this (progress pct, __blocksLeft, (Date. (* (.. block (getTimeSeconds)) 1000))))
                        (§ assoc this :last-percent (int pct))
                    )
                )
            )
        )
        nil
    )

    ;;;
     ; Called when download progress is made.
     ;
     ; @param pct The percentage of chain downloaded, estimated.
     ; @param date The date of the last block downloaded.
     ;;
    #_protected
    (§ method #_"void" progress [#_"double" pct, #_"int" __blocksSoFar, #_"Date" date]
        (.. DownloadProgressTracker'log (info (String/format Locale/US, "Chain download %d%% done with %d blocks to go, block date %s", (int pct), __blocksSoFar, (Utils'dateTimeFormat date))))
        nil
    )

    ;;;
     ; Called when download is initiated.
     ;
     ; @param blocks The number of blocks to download, estimated.
     ;;
    #_protected
    (§ method #_"void" startDownload [#_"int" blocks]
        (.. DownloadProgressTracker'log (info (str "Downloading block chain of size " blocks ". " (if (< 1000 blocks) "This may take a while." ""))))
        nil
    )

    ;;;
     ; Called when we are done downloading the block chain.
     ;;
    #_protected
    (§ method #_"void" doneDownload []
        nil
    )

    ;;;
     ; Wait for the chain to be downloaded.
     ;;
    #_public
    #_throws #_[ "InterruptedException" ]
    (§ method #_"void" await []
        (try
            (.. (:future this) (get))
            (catch ExecutionException e
                (throw (RuntimeException. e))
            )
        )
        nil
    )

    ;;;
     ; Returns a listenable future that completes with the height of the best chain (as reported by the peer) once chain
     ; download seems to be finished.
     ;;
    #_public
    (§ method #_"ListenableFuture<Long>" getFuture []
        (:future this)
    )
)

;;;
 ; Implementors can listen to events like blocks being downloaded/transactions being broadcast/connect/disconnects,
 ; they can pre-filter messages before they are procesesed by a {@link Peer} or {@link PeerGroup}, and they can
 ; provide transactions to remote peers when they ask for them.
 ;;
#_public
(§ interface GetDataEventListener
    ;;;
     ; Called when a peer receives a getdata message, usually in response to an "inv" being broadcast.  Return as many
     ; items as possible which appear in the {@link GetDataMessage}, or null if you're not interested in responding.
     ;
     ; Note that this will never be called if registered with any executor other than
     ; {@link Threading#SAME_THREAD}.
     ;;
    #_nilable
    (§ method #_"List<Message>" getData [#_"Peer" peer, #_"GetDataMessage" m])
)

;;;
 ; Listener interface for when a new block on the best chain is seen.
 ;;
#_public
(§ interface NewBestBlockListener
    ;;;
     ; Called when a new block on the best chain is seen, after relevant transactions are extracted and sent to us via either
     ; {@link TransactionReceivedInBlockListener#receiveFromBlock(Transaction, StoredBlock, BlockChain.NewBlockType, int relativityOffset)}
     ; or {@link TransactionReceivedInBlockListener#notifyTransactionIsInBlock(Sha256Hash, StoredBlock, BlockChain.NewBlockType, int)}.
     ;
     ; If this block is causing a re-organise to a new chain, this method is NOT called even though
     ; the block may be the new best block: your reorganize implementation is expected to do whatever
     ; would normally be done do for a new best block in this case.
     ;;
    #_throws #_[ "VerificationException" ]
    (§ method #_"void" notifyNewBestBlock [#_"StoredBlock" block])
)

;;;
 ; Called when a new transaction is broadcast over the network.
 ;;
#_public
(§ interface OnTransactionBroadcastListener
    ;;;
     ; Called when a new transaction is broadcast over the network.
     ;;
    (§ method #_"void" onTransaction [#_"Peer" peer, #_"Transaction" t])
)

;;;
 ; Implementors can listen to events indicating a new peer connecting.
 ;;
#_public
(§ interface PeerConnectedEventListener
    ;;;
     ; Called when a peer is connected.  If this listener is registered to a {@link Peer} instead of a {@link PeerGroup},
     ; peerCount will always be 1.
     ;
     ; @param peer
     ; @param peerCount The total number of connected peers.
     ;;
    (§ method #_"void" onPeerConnected [#_"Peer" peer, #_"int" __peerCount])
)

;;;
 ; Implementors can listen to events like blocks being downloaded/transactions being broadcast/connect/disconnects,
 ; they can pre-filter messages before they are processed by a {@link Peer} or {@link PeerGroup}, and they can
 ; provide transactions to remote peers when they ask for them.
 ;;
#_public
(§ interface PeerDataEventListener (§ extends BlocksDownloadedEventListener, ChainDownloadStartedEventListener, GetDataEventListener, PreMessageReceivedEventListener))

;;;
 ; Implementors can listen to events indicating a peer disconnecting.
 ;;
#_public
(§ interface PeerDisconnectedEventListener
    ;;;
     ; Called when a peer is disconnected.  Note that this won't be called if the listener is registered on
     ; a {@link PeerGroup} and the group is in the process of shutting down.  If this listener is registered to
     ; a {@link Peer} instead of a {@link PeerGroup}, peerCount will always be 0.  This handler can be called
     ; without a corresponding invocation of onPeerConnected if the initial connection is never successful.
     ;
     ; @param peer
     ; @param peerCount The total number of connected peers.
     ;;
    (§ method #_"void" onPeerDisconnected [#_"Peer" peer, #_"int" __peerCount])
)

;;;
 ; Implementors can listen to events for peers being discovered.
 ;;
#_public
(§ interface PeerDiscoveredEventListener
    ;;;
     ; Called when peers are discovered, this happens at startup of {@link PeerGroup}
     ; or if we run out of suitable {@link Peer}s to connect to.
     ;
     ; @param peerAddresses The set of discovered {@link PeerAddress}es.
     ;;
    (§ method #_"void" onPeersDiscovered [#_"Set<PeerAddress>" __peerAddresses])
)

;;;
 ; Implementors can listen to events like blocks being downloaded/transactions being broadcast/connect/disconnects,
 ; they can pre-filter messages before they are procesesed by a {@link Peer} or {@link PeerGroup}, and they can
 ; provide transactions to remote peers when they ask for them.
 ;;
#_public
(§ interface PreMessageReceivedEventListener
    ;;;
     ; Called when a message is received by a peer, before the message is processed.  The returned message is
     ; processed instead.  Returning null will cause the message to be ignored by the Peer returning the same message
     ; object allows you to see the messages received but not change them.  The result from one event listeners
     ; callback is passed as "m" to the next, forming a chain.
     ;
     ; Note that this will never be called if registered with any executor other than {@link Threading#SAME_THREAD}.
     ;;
    (§ method #_"Message" onPreMessageReceived [#_"Peer" peer, #_"Message" m])
)

;;;
 ; Listener interface for when the best chain has changed.
 ;;
#_public
(§ interface ReorganizeListener
    ;;;
     ; Called by the {@link BlockChain} when the best chain (representing total work done)
     ; has changed.  In this case, we need to go through our transactions and find out if any have become invalid.
     ; It's possible for our balance to go down in this case: money we thought we had can suddenly vanish
     ; if the rest of the network agrees it should be so.
     ;
     ; The oldBlocks/newBlocks lists are ordered height-wise from top first to bottom last (i.e. newest blocks first).
     ;;
    #_throws #_[ "VerificationException" ]
    (§ method #_"void" reorganize [#_"StoredBlock" __splitPoint, #_"List<StoredBlock>" __oldBlocks, #_"List<StoredBlock>" __newBlocks])
)

;;;
 ; Implementors are called when confidence of a transaction changes.
 ;;
#_public
(§ interface TransactionConfidenceEventListener
    ;;;
     ; Called when a transaction changes its confidence level.  You can also attach event listeners to
     ; the individual transactions, if you don't care about all of them.  Usually you would save the wallet to disk
     ; after receiving this callback unless you already set up autosaving.
     ;
     ; You should pay attention to this callback in case a transaction becomes <i>dead</i>, that is, a transaction
     ; you believed to be active (send or receive) becomes overridden by the network.  This can happen if
     ;
     ; <ol>
     ;     <li>You are sharing keys between wallets and accidentally create/broadcast a double spend.</li>
     ;     <li>Somebody is attacking the network and reversing transactions, i.e. the user is a victim of fraud.</li>
     ;     <li>A bug: for example you create a transaction, broadcast it but fail to commit it.
     ;     The {@link Wallet} will then re-use the same outputs when creating the next spend.</li>
     ; </ol>
     ;
     ; To find if the transaction is dead, you can use <tt>tx.getConfidence().getConfidenceType() ==
     ; TransactionConfidence.ConfidenceType.DEAD</tt>.  If it is, you should notify the user in some way
     ; so they know the thing they bought may not arrive/the thing they sold should not be dispatched.
     ;
     ; Note that this callback will be invoked for every transaction in the wallet, for every new block that is
     ; received (because the depth has changed).  <b>If you want to update a UI view from the contents of the wallet
     ; it is more efficient to use onWalletChanged instead.</b>
     ;;
    (§ method #_"void" onTransactionConfidenceChanged [#_"Wallet" wallet, #_"Transaction" tx])
)

;;;
 ; Listener interface for when we receive a new block that contains a relevant transaction.
 ;;
#_public
(§ interface TransactionReceivedInBlockListener
    ;;;
     ; Called by the {@link BlockChain} when we receive a new block that contains a relevant transaction.
     ;
     ; A transaction may be received multiple times if is included into blocks in parallel chains.  The blockType
     ; parameter describes whether the containing block is on the main/best chain or whether it's on a presently
     ; inactive side chain.
     ;
     ; The relativityOffset parameter is an arbitrary number used to establish an ordering between transactions
     ; within the same block.  In the case where full blocks are being downloaded, it is simply the index of the
     ; transaction within that block.  When Bloom filtering is in use, we don't find out the exact offset into a block
     ; that a transaction occurred at, so the relativity count is not reflective of anything in an absolute sense but
     ; rather exists only to order the transaction relative to the others.
     ;;
    #_throws #_[ "VerificationException" ]
    (§ method #_"void" receiveFromBlock [#_"Transaction" tx, #_"StoredBlock" block, #_"NewBlockType" __blockType, #_"int" __relativityOffset])

    ;;;
     ; Called by the {@link BlockChain} when we receive a new {@link FilteredBlock} that contains the given
     ; transaction hash in its merkle tree.
     ;
     ; A transaction may be received multiple times if is included into blocks in parallel chains.  The blockType
     ; parameter describes whether the containing block is on the main/best chain or whether it's on a presently
     ; inactive side chain.
     ;
     ; The relativityOffset parameter in this case is an arbitrary (meaningless) number, that is useful only when
     ; compared to the relativity count of another transaction received inside the same block.  It is used to establish
     ; an ordering of transactions relative to one another.
     ;
     ; This method should return false if the given tx hash isn't known about, e.g. because the the transaction was
     ; a Bloom false positive.  If it was known about and stored, it should return true.  The caller may need to know
     ; this to calculate the effective FP rate.
     ;
     ; @return whether the transaction is known about i.e. was considered relevant previously.
     ;;
    #_throws #_[ "VerificationException" ]
    (§ method #_"boolean" notifyTransactionIsInBlock [#_"Sha256Hash" __txHash, #_"StoredBlock" block, #_"NewBlockType" __blockType, #_"int" __relativityOffset])
)

#_(ns org.bitcoinj.crypto
    (:import [com.google.common.base Joiner MoreObjects Objects Stopwatch]
             [com.google.common.collect ImmutableList Iterables Maps]
             [com.google.common.primitives Ints]
             [com.google.protobuf ByteString]
             [java.io ByteArrayOutputStream FileNotFoundException IOException InputStream]
             [java.math BigInteger]
             [java.nio ByteBuffer ByteOrder]
             [java.security MessageDigest SecureRandom]
             [java.util ArrayList Arrays Collections Comparator List Locale Map]
             [javax.crypto Mac]
             [javax.crypto.spec SecretKeySpec]
             [org.slf4j LoggerFactory Logger]
             [org.spongycastle.crypto.digests SHA512Digest]
             [org.spongycastle.crypto.macs HMac]
             [org.spongycastle.crypto.params KeyParameter]
             [org.spongycastle.math.ec ECCurve ECFieldElement ECPoint]
    )
)

;;;
 ; This is just a wrapper for the i (child number) as per BIP 32 with a boolean getter for the most significant bit
 ; and a getter for the actual 0-based child number.  A {@link java.util.List} of these forms a <i>path</i> through a
 ; {@link DeterministicHierarchy}.  This class is immutable.
 ;;
#_public
(§ class ChildNumber (§ implements Comparable #_"<ChildNumber>")
    ;;;
     ; The bit that's set in the child number to indicate whether this key is "hardened".  Given a hardened key, it is
     ; not possible to derive a child public key if you know only the hardened public key.  With a non-hardened key this
     ; is possible, so you can derive trees of public keys given only a public parent, but the downside is that it's
     ; possible to leak private keys if you disclose a parent public key and a child private key (elliptic curve maths
     ; allows you to work upwards).
     ;;
    #_public
    #_static
    (def #_"int" ChildNumber'HARDENED_BIT 0x80000000)

    #_public
    #_static
    (def #_"ChildNumber" ChildNumber'ZERO (ChildNumber. 0))
    #_public
    #_static
    (def #_"ChildNumber" ChildNumber'ONE (ChildNumber. 1))
    #_public
    #_static
    (def #_"ChildNumber" ChildNumber'ZERO_HARDENED (ChildNumber. 0, true))

    ;;; Integer i as per BIP 32 spec, including the MSB denoting derivation type (0 = public, 1 = private). ;;
    #_private
    (§ field- #_"int" :i)

    #_public
    (§ constructor ChildNumber [#_"int" __childNumber, #_"boolean" __isHardened]
        (when (ChildNumber'hasHardenedBit __childNumber)
            (throw (IllegalArgumentException. (str "Most significant bit is reserved and shouldn't be set: " __childNumber)))
        )

        (§ assoc this :i (if __isHardened (| __childNumber ChildNumber'HARDENED_BIT) __childNumber))
        this
    )

    #_public
    (§ constructor ChildNumber [#_"int" i]
        (§ assoc this :i i)
        this
    )

    ;;; Returns the uint32 encoded form of the path element, including the most significant bit. ;;
    #_public
    (§ method #_"int" getI []
        (:i this)
    )

    ;;; Returns the uint32 encoded form of the path element, including the most significant bit. ;;
    #_public
    (§ method #_"int" i []
        (:i this)
    )

    #_public
    (§ method #_"boolean" isHardened []
        (ChildNumber'hasHardenedBit (:i this))
    )

    #_private
    #_static
    (§ defn- #_"boolean" ChildNumber'hasHardenedBit [#_"int" a]
        (not= (& a ChildNumber'HARDENED_BIT) 0)
    )

    ;;; Returns the child number without the hardening bit set (i.e. index in that part of the tree). ;;
    #_public
    (§ method #_"int" num []
        (& (:i this) (bit-not ChildNumber'HARDENED_BIT))
    )

    #_override
    #_public
    (§ method #_"String" toString []
        (String/format Locale/US, "%d%s", (.. this (num)), (if (.. this (isHardened)) "H" ""))
    )

    #_override
    #_public
    (§ method #_"boolean" equals [#_"Object" o]
        (cond
            (= this o) true
            (or (nil? o) (not= (getClass) (.. o (getClass)))) false
            :else (= (:i this) (:i (cast ChildNumber o)))
        )
    )

    #_override
    #_public
    (§ method #_"int" hashCode []
        (:i this)
    )

    #_override
    #_public
    (§ method #_"int" compareTo [#_"ChildNumber" other]
        ;; Note that in this implementation compareTo() is not consistent with equals().
        (Ints/compare (.. this (num)), (.. other (num)))
    )
)

;; TODO: This whole API feels a bit object heavy.  Do we really need ChildNumber and so many maps, etc?
;; TODO: Should we be representing this using an actual tree arrangement in memory instead of a bunch of hashmaps?

;;;
 ; A DeterministicHierarchy calculates and keeps a whole tree (hierarchy) of keys originating from a single
 ; root key.  This implements part of the BIP 32 specification.  A deterministic key tree is useful because
 ; Bitcoin's privacy system require new keys to be created for each transaction, but managing all these
 ; keys quickly becomes unwieldy.  In particular it becomes hard to back up and distribute them.  By having
 ; a way to derive random-looking but deterministic keys we can make wallet backup simpler and gain the
 ; ability to hand out {@link DeterministicKey}s to other people who can then create new addresses
 ; on the fly, without having to contact us.
 ;
 ; The hierarchy is started from a single root key, and a location in the tree is given by a path which
 ; is a list of {@link ChildNumber}s.
 ;;
#_public
(§ class DeterministicHierarchy
    #_private
    (§ field- #_"Map<ImmutableList<ChildNumber>, DeterministicKey>" :keys (Maps/newHashMap))
    #_private
    (§ field- #_"ImmutableList<ChildNumber>" :root-path)
    ;; Keep track of how many child keys each node has.  This is kind of weak.
    #_private
    (§ field- #_"Map<ImmutableList<ChildNumber>, ChildNumber>" :last-child-numbers (Maps/newHashMap))

    #_public
    #_static
    (def #_"int" DeterministicHierarchy'BIP32_STANDARDISATION_TIME_SECS 1369267200)

    ;;;
     ; Constructs a new hierarchy rooted at the given key.  Note that this does not have to be the top of the tree.
     ; You can construct a DeterministicHierarchy for a subtree of a larger tree that you may not own.
     ;;
    #_public
    (§ constructor DeterministicHierarchy [#_"DeterministicKey" __rootKey]
        (.. this (putKey __rootKey))
        (§ assoc this :root-path (.. __rootKey (getPath)))
        this
    )

    ;;;
     ; Inserts a key into the heirarchy.  Used during deserialization: you normally don't need this.  Keys must be
     ; inserted in order.
     ;;
    #_public
    (§ method #_"void" putKey [#_"DeterministicKey" key]
        (let [#_"ImmutableList<ChildNumber>" path (.. key (getPath))]
            ;; Update our tracking of what the next child in each branch of the tree should be.  Just assume that keys
            ;; are inserted in order here.
            (let [#_"DeterministicKey" parent (.. key (getParent))]
                (when (some? parent)
                    (.. (:last-child-numbers this) (put (.. parent (getPath)), (.. key (getChildNumber))))
                )
                (.. (:keys this) (put path, key))
            )
        )
        nil
    )

    ;;;
     ; Returns a key for the given path, optionally creating it.
     ;
     ; @param path The path to the key.
     ; @param relativePath Whether the path is relative to the root path.
     ; @param create Whether the key corresponding to path should be created (with any necessary ancestors) if it doesn't exist already.
     ; @return next newly created key using the child derivation function.
     ; @throws IllegalArgumentException if create is false and the path was not found.
     ;;
    #_public
    (§ method #_"DeterministicKey" get [#_"List<ChildNumber>" path, #_"boolean" __relativePath, #_"boolean" create]
        (let [#_"ImmutableList<ChildNumber>" __absolutePath (if __relativePath (.. (ImmutableList/builder #_"ImmutableList<ChildNumber>") (addAll (:root-path this)) (addAll path) (build)) (ImmutableList/copyOf path))]
            (when (not (.. (:keys this) (containsKey __absolutePath)))
                (when (not create)
                    (throw (IllegalArgumentException. (String/format Locale/US, "No key found for %s path %s.", (if __relativePath "relative" "absolute"), (HDUtils'formatPath path))))
                )
                (assert-argument (< 0 (.. __absolutePath (size))), "Can't derive the master key: nothing to derive from.")
                (let [#_"DeterministicKey" parent (.. this (get (.. __absolutePath (subList 0, (dec (.. __absolutePath (size))))), false, true))]
                    (.. this (putKey (HDKeyDerivation'deriveChildKey parent, (.. __absolutePath (get (dec (.. __absolutePath (size))))))))
                )
            )
            (.. (:keys this) (get __absolutePath))
        )
    )

    ;;;
     ; Extends the tree by calculating the next key that hangs off the given parent path.  For example, if you pass
     ; a path of 1/2 here and there are already keys 1/2/1 and 1/2/2 then it will derive 1/2/3.
     ;
     ; @param parentPath The path to the parent.
     ; @param relative Whether the path is relative to the root path.
     ; @param createParent Whether the parent corresponding to path should be created (with any necessary ancestors) if it doesn't exist already.
     ; @param privateDerivation Whether to use private or public derivation.
     ; @return next newly created key using the child derivation funtcion.
     ; @throws IllegalArgumentException if the parent doesn't exist and createParent is false.
     ;;
    #_public
    (§ method #_"DeterministicKey" deriveNextChild [#_"ImmutableList<ChildNumber>" __parentPath, #_"boolean" relative, #_"boolean" __createParent, #_"boolean" __privateDerivation]
        (let [#_"DeterministicKey" parent (.. this (get __parentPath, relative, __createParent))]
            (loop-when-recur [#_"int" i 0] (< i HDKeyDerivation'MAX_CHILD_DERIVATION_ATTEMPTS) [(inc i)]
                (try
                    (let [#_"ChildNumber" __createChildNumber (.. this (getNextChildNumberToDerive (.. parent (getPath)), __privateDerivation))]
                        (§ return (.. this (deriveChild parent, __createChildNumber)))
                    )
                    (catch HDDerivationException _
                    )
                )
            )
            (throw (HDDerivationException. "Maximum number of child derivation attempts reached, this is probably an indication of a bug."))
        )
    )

    #_private
    (§ method- #_"ChildNumber" getNextChildNumberToDerive [#_"ImmutableList<ChildNumber>" path, #_"boolean" __privateDerivation]
        (let [#_"ChildNumber" __lastChildNumber (.. (:last-child-numbers this) (get path))
              #_"ChildNumber" __nextChildNumber (ChildNumber. (if (some? __lastChildNumber) (inc (.. __lastChildNumber (num))) 0), __privateDerivation)]
            (.. (:last-child-numbers this) (put path, __nextChildNumber))
            __nextChildNumber
        )
    )

    #_public
    (§ method #_"int" getNumChildren [#_"ImmutableList<ChildNumber>" path]
        (let [#_"ChildNumber" cn (.. (:last-child-numbers this) (get path))]
            ;; Children start with zero based childnumbers.
            (if (some? cn) (+ 1 (.. cn (num))) 0)
        )
    )

    ;;;
     ; Extends the tree by calculating the requested child for the given path.  For example, to get the key at position
     ; 1/2/3 you would pass 1/2 as the parent path and 3 as the child number.
     ;
     ; @param parentPath The path to the parent.
     ; @param relative Whether the path is relative to the root path.
     ; @param createParent Whether the parent corresponding to path should be created (with any necessary ancestors) if it doesn't exist already.
     ; @return the requested key.
     ; @throws IllegalArgumentException if the parent doesn't exist and createParent is false.
     ;;
    #_public
    (§ method #_"DeterministicKey" deriveChild [#_"List<ChildNumber>" __parentPath, #_"boolean" relative, #_"boolean" __createParent, #_"ChildNumber" __createChildNumber]
        (.. this (deriveChild (.. this (get __parentPath, relative, __createParent)), __createChildNumber))
    )

    #_private
    (§ method- #_"DeterministicKey" deriveChild [#_"DeterministicKey" parent, #_"ChildNumber" __createChildNumber]
        (let [#_"DeterministicKey" __childKey (HDKeyDerivation'deriveChildKey parent, __createChildNumber)]
            (.. this (putKey __childKey))
            __childKey
        )
    )

    ;;;
     ; Returns the root key that the {@link DeterministicHierarchy} was created with.
     ;;
    #_public
    (§ method #_"DeterministicKey" getRootKey []
        (.. this (get (:root-path this), false, false))
    )
)

;;;
 ; A deterministic key is a node in a {@link DeterministicHierarchy}.  As per
 ; <a href="https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki">the BIP 32 specification</a> it is a pair
 ; (key, chaincode).  If you know its path in the tree and its chain code you can derive more keys from this.
 ; To obtain one of these, you can call {@link HDKeyDerivation#createMasterPrivateKey(byte[])}.
 ;;
#_public
(§ class DeterministicKey (§ extends ECKey)
    ;;; Sorts deterministic keys in the order of their child number.  That's <i>usually</i> the order used to derive them. ;;
    #_public
    #_static
    (def #_"Comparator<ECKey>" DeterministicKey'CHILDNUM_ORDER (Comparator. #_"<ECKey>"
        (§ anon
            #_override
            #_public
            (§ method #_"int" compare [#_"ECKey" k1, #_"ECKey" k2]
                (let [#_"ChildNumber" cn1 (.. (cast DeterministicKey k1) (getChildNumber))
                      #_"ChildNumber" cn2 (.. (cast DeterministicKey k2) (getChildNumber))]
                    (.. cn1 (compareTo cn2))
                )
            )
        )))

    #_private
    (§ field- #_"DeterministicKey" :parent)
    #_private
    (§ field- #_"ImmutableList<ChildNumber>" :child-number-path)
    #_private
    (§ field- #_"int" :depth)
    #_private
    (§ field- #_"int" :parent-fingerprint) ;; 0 if this key is root node of key hierarchy

    ;;; 32 bytes ;;
    #_private
    (§ field- #_"byte[]" :chain-code)

    ;;; Constructs a key from its components.  This is not normally something you should use. ;;
    #_public
    (§ constructor DeterministicKey [#_"ImmutableList<ChildNumber>" path, #_"byte[]" code, #_"LazyECPoint" __publicAsPoint, #_nilable #_"BigInteger" priv, #_nilable #_"DeterministicKey" parent]
        (§ super priv, (ECKey'compressPoint (ensure some? __publicAsPoint)))

        (assert-argument (= (alength code) 32))

        (§ assoc this :parent parent)
        (§ assoc this :child-number-path (ensure some? path))
        (§ assoc this :chain-code (Arrays/copyOf code, (alength code)))
        (§ assoc this :depth (if (some? parent) (inc (:depth parent)) 0))
        (§ assoc this :parent-fingerprint (if (some? parent) (.. parent (getFingerprint)) 0))
        this
    )

    #_public
    (§ constructor DeterministicKey [#_"ImmutableList<ChildNumber>" path, #_"byte[]" code, #_"ECPoint" __publicAsPoint, #_nilable #_"BigInteger" priv, #_nilable #_"DeterministicKey" parent]
        (§ this path, code, (LazyECPoint. __publicAsPoint), priv, parent)
        this
    )

    ;;; Constructs a key from its components.  This is not normally something you should use. ;;
    #_public
    (§ constructor DeterministicKey [#_"ImmutableList<ChildNumber>" path, #_"byte[]" code, #_"BigInteger" priv, #_nilable #_"DeterministicKey" parent]
        (§ super priv, (ECKey'compressPoint (ECKey'publicPointFromPrivate priv)))

        (assert-argument (= (alength code) 32))

        (§ assoc this :parent parent)
        (§ assoc this :child-number-path (ensure some? path))
        (§ assoc this :chain-code (Arrays/copyOf code, (alength code)))
        (§ assoc this :depth (if (some? parent) (inc (:depth parent)) 0))
        (§ assoc this :parent-fingerprint (if (some? parent) (.. parent (getFingerprint)) 0))
        this
    )

    ;;;
     ; Return the fingerprint of this key's parent as an int value, or zero if this key is the
     ; root node of the key hierarchy.  Raise an exception if the arguments are inconsistent.
     ; This method exists to avoid code repetition in the constructors.
     ;;
    #_private
    #_static
    #_throws #_[ "IllegalArgumentException" ]
    (§ defn- #_"int" ascertainParentFingerprint [#_"DeterministicKey" parent, #_"int" pfp]
        (when (and (some? parent) (not= pfp 0))
            (assert-argument (= (.. parent (getFingerprint)) pfp), "parent fingerprint mismatch", (Integer/toHexString (.. parent (getFingerprint))), (Integer/toHexString pfp))
        )
        pfp
    )

    ;;;
     ; Constructs a key from its components, including its public key data and possibly-redundant
     ; information about its parent key.  Invoked when deserializing, but otherwise not something
     ; that you normally should use.
     ;;
    #_public
    (§ constructor DeterministicKey [#_"ImmutableList<ChildNumber>" path, #_"byte[]" code, #_"LazyECPoint" __publicAsPoint, #_nilable #_"DeterministicKey" parent, #_"int" depth, #_"int" pfp]
        (§ super nil, (ECKey'compressPoint (ensure some? __publicAsPoint)))

        (assert-argument (= (alength code) 32))

        (§ assoc this :parent parent)
        (§ assoc this :child-number-path (ensure some? path))
        (§ assoc this :chain-code (Arrays/copyOf code, (alength code)))
        (§ assoc this :depth depth)
        (§ assoc this :parent-fingerprint (.. this (ascertainParentFingerprint parent, pfp)))
        this
    )

    ;;;
     ; Constructs a key from its components, including its private key data and possibly-redundant
     ; information about its parent key.  Invoked when deserializing, but otherwise not something that
     ; you normally should use.
     ;;
    #_public
    (§ constructor DeterministicKey [#_"ImmutableList<ChildNumber>" path, #_"byte[]" code, #_"BigInteger" priv, #_nilable #_"DeterministicKey" parent, #_"int" depth, #_"int" pfp]
        (§ super priv, (ECKey'compressPoint (ECKey'publicPointFromPrivate priv)))

        (assert-argument (= (alength code) 32))

        (§ assoc this :parent parent)
        (§ assoc this :child-number-path (ensure some? path))
        (§ assoc this :chain-code (Arrays/copyOf code, (alength code)))
        (§ assoc this :depth depth)
        (§ assoc this :parent-fingerprint (.. this (ascertainParentFingerprint parent, pfp)))
        this
    )

    ;;; Clones the key. ;;
    #_public
    (§ constructor DeterministicKey [#_"DeterministicKey" __keyToClone, #_"DeterministicKey" parent]
        (§ super (:priv __keyToClone), (.. (:pub __keyToClone) (get)))

        (§ assoc this :parent parent)
        (§ assoc this :child-number-path (:child-number-path __keyToClone))
        (§ assoc this :chain-code (:chain-code __keyToClone))
        (§ assoc this :depth (.. (:child-number-path this) (size)))
        (§ assoc this :parent-fingerprint (.. (:parent this) (getFingerprint)))
        this
    )

    ;;;
     ; Returns the path through some {@link DeterministicHierarchy} which reaches this keys position in the tree.
     ; A path can be written as 1/2/1 which means the first child of the root, the second child of that node, then
     ; the first child of that node.
     ;;
    #_public
    (§ method #_"ImmutableList<ChildNumber>" getPath []
        (:child-number-path this)
    )

    ;;;
     ; Returns the path of this key as a human readable string starting with M to indicate the master key.
     ;;
    #_public
    (§ method #_"String" getPathAsString []
        (HDUtils'formatPath (.. this (getPath)))
    )

    ;;;
     ; Return this key's depth in the hierarchy, where the root node is at depth zero.
     ; This may be different than the number of segments in the path if this key was
     ; deserialized without access to its parent.
     ;;
    #_public
    (§ method #_"int" getDepth []
        (:depth this)
    )

    ;;; Returns the last element of the path returned by {@link DeterministicKey#getPath()}. ;;
    #_public
    (§ method #_"ChildNumber" getChildNumber []
        (if (= (.. (:child-number-path this) (size)) 0) ChildNumber'ZERO (.. (:child-number-path this) (get (dec (.. (:child-number-path this) (size))))))
    )

    ;;;
     ; Returns the chain code associated with this key.  See the specification to learn more about chain codes.
     ;;
    #_public
    (§ method #_"byte[]" getChainCode []
        (:chain-code this)
    )

    ;;;
     ; Returns RIPE-MD160(SHA256(pub key bytes)).
     ;;
    #_public
    (§ method #_"byte[]" getIdentifier []
        (Utils'sha256hash160 (.. this (getPubKey)))
    )

    ;;; Returns the first 32 bits of the result of {@link #getIdentifier()}. ;;
    #_public
    (§ method #_"int" getFingerprint []
        ;; TODO: Why is this different than armory's fingerprint?  BIP 32: "The first 32 bits of the identifier are called the fingerprint."
        (.. (ByteBuffer/wrap (Arrays/copyOfRange (.. this (getIdentifier)), 0, 4)) (getInt))
    )

    #_nilable
    #_public
    (§ method #_"DeterministicKey" getParent []
        (:parent this)
    )

    ;;;
     ; Return the fingerprint of the key from which this key was derived, if this is
     ; a child key, or else an array of four zero-value bytes.
     ;;
    #_public
    (§ method #_"int" getParentFingerprint []
        (:parent-fingerprint this)
    )

    ;;;
     ; Returns private key bytes, padded with zeros to 33 bytes.
     ;
     ; @throws IllegalStateException if the private key bytes are missing.
     ;;
    #_public
    (§ method #_"byte[]" getPrivKeyBytes33 []
        (let [#_"byte[]" bytes33 (byte-array 33)
              #_"byte[]" priv (.. this (getPrivKeyBytes))]
            (System/arraycopy priv, 0, bytes33, (- 33 (alength priv)), (alength priv))
            bytes33
        )
    )

    ;;;
     ; Returns the same key with the private bytes removed.  May return the same instance.  The purpose of this is to
     ; save memory: the private key can always be very efficiently rederived from a parent that a private key, so storing
     ; all the private keys in RAM is a poor tradeoff especially on constrained devices.  This means that the returned
     ; key may still be usable for signing and so on, so don't expect it to be a true pubkey-only object!  If you want
     ; that then you should follow this call with a call to {@link #dropParent()}.
     ;;
    #_public
    (§ method #_"DeterministicKey" dropPrivateBytes []
        (if (.. this (isPubKeyOnly)) this (DeterministicKey. (.. this (getPath)), (.. this (getChainCode)), (:pub this), nil, (:parent this)))
    )

    ;;;
     ; Returns the same key with the parent pointer removed (it still knows its own path and the parent fingerprint).
     ;
     ; If this key doesn't have private key bytes stored/cached itself, but could rederive them from the parent, then
     ; the new key returned by this method won't be able to do that.  Thus, using dropPrivateBytes().dropParent() on a
     ; regular DeterministicKey will yield a new DeterministicKey that cannot sign or do other things involving the
     ; private key at all.
     ;;
    #_public
    (§ method #_"DeterministicKey" dropParent []
        (let [#_"DeterministicKey" key (DeterministicKey. (.. this (getPath)), (.. this (getChainCode)), (:pub this), (:priv this), nil)]
            (§ assoc key :parent-fingerprint (:parent-fingerprint this))
            key
        )
    )

    #_static
    (§ defn #_"byte[]" DeterministicKey'addChecksum [#_"byte[]" input]
        (let [#_"int" __inputLength (alength input)
              #_"byte[]" checksummed (byte-array (+ __inputLength 4))]
            (System/arraycopy input, 0, checksummed, 0, __inputLength)
            (let [#_"byte[]" checksum (Sha256Hash'hashTwice input)]
                (System/arraycopy checksum, 0, checksummed, __inputLength, 4)
                checksummed
            )
        )
    )

    ;;;
     ; A deterministic key is considered to be 'public key only' if it hasn't got a private key part and it cannot be
     ; rederived.  If the hierarchy is encrypted this returns true.
     ;;
    #_override
    #_public
    (§ method #_"boolean" isPubKeyOnly []
        (and (.. super (isPubKeyOnly)) (or (nil? (:parent this)) (.. (:parent this) (isPubKeyOnly))))
    )

    ;;; {@inheritDoc} ;;
    #_override
    #_public
    (§ method #_"boolean" hasPrivKey []
        (some? (.. this (findParentWithPrivKey)))
    )

    #_nilable
    #_override
    #_public
    (§ method #_"byte[]" getSecretBytes []
        (when (some? (:priv this)) (.. this (getPrivKeyBytes)))
    )

    #_override
    #_public
    (§ method #_"ECDSASignature" sign [#_"Sha256Hash" input]
        (let [#_"BigInteger" __privateKey (.. this (findOrDerivePrivateKey))]
            ;; This key is a part of a public-key only heirarchy and cannot be used for signing.
            (when (nil? __privateKey)
                (throw (MissingPrivateKeyException.))
            )

            (.. super (doSign input, __privateKey))
        )
    )

    #_private
    (§ method- #_"DeterministicKey" findParentWithPrivKey []
        (loop-when-recur [#_"DeterministicKey" key this] (and (some? key) (nil? (:priv key))) [(:parent key)] => key)
    )

    #_nilable
    #_private
    (§ method- #_"BigInteger" findOrDerivePrivateKey []
        (let [#_"DeterministicKey" cursor (.. this (findParentWithPrivKey))]
            (when (some? cursor)
                (.. this (derivePrivateKeyDownwards cursor, (.. (:priv cursor) (toByteArray))))
            )
        )
    )

    #_private
    (§ method- #_"BigInteger" derivePrivateKeyDownwards [#_"DeterministicKey" cursor, #_"byte[]" __parentalPrivateKeyBytes]
        (let [#_"DeterministicKey" __downCursor (DeterministicKey. (:child-number-path cursor), (:chain-code cursor), (:pub cursor), (BigInteger. 1, __parentalPrivateKeyBytes), (:parent cursor))]
            ;; Now we have to rederive the keys along the path back to ourselves.  That path can be found by just truncating
            ;; our path with the length of the parents path.
            (let [#_"ImmutableList<ChildNumber>" path (.. (:child-number-path this) (subList (.. cursor (getPath) (size)), (.. (:child-number-path this) (size))))]
                (doseq [#_"ChildNumber" num path]
                    (§ ass __downCursor (HDKeyDerivation'deriveChildKey __downCursor, num))
                )
                ;; downCursor is now the same key as us, but with private key bytes.
                ;; If it's not, it means we tried decrypting with an invalid password
                ;; and earlier checks e.g. for padding didn't catch it.
                (when (not (.. (:pub __downCursor) (equals (:pub this))))
                    (throw (RuntimeException. "Could not decrypt bytes"))
                )

                (ensure some? (:priv __downCursor))
            )
        )
    )

    ;;;
     ; Derives a child at the given index using hardened derivation.  Note: <code>index</code>
     ; is not the "i" value.  If you want the softened derivation, then use instead
     ; <code>HDKeyDerivation.deriveChildKey(this, new ChildNumber(child, false))</code>.
     ;;
    #_public
    (§ method #_"DeterministicKey" derive [#_"int" child]
        (HDKeyDerivation'deriveChildKey this, (ChildNumber. child, true))
    )

    ;;;
     ; Returns the private key of this deterministic key.  Even if this object isn't storing the private key,
     ; it can be re-derived by walking up to the parents if necessary and this is what will happen.
     ;
     ; @throws IllegalStateException if the parents are encrypted or a watching chain.
     ;;
    #_override
    #_public
    (§ method #_"BigInteger" getPrivKey []
        (let [#_"BigInteger" key (.. this (findOrDerivePrivateKey))]
            (assert-state (some? key), "Private key bytes not available")
            key
        )
    )

    #_public
    (§ method #_"byte[]" serializePublic [#_"NetworkParameters" params]
        (.. this (serialize params, true))
    )

    #_public
    (§ method #_"byte[]" serializePrivate [#_"NetworkParameters" params]
        (.. this (serialize params, false))
    )

    #_private
    (§ method- #_"byte[]" serialize [#_"NetworkParameters" params, #_"boolean" pub]
        (let [#_"ByteBuffer" ser (ByteBuffer/allocate 78)]
            (.. ser (putInt (if pub (:bip32-header-pub params) (:bip32-header-priv params))))
            (.. ser (put (byte (.. this (getDepth)))))
            (.. ser (putInt (.. this (getParentFingerprint))))
            (.. ser (putInt (.. this (getChildNumber) (i))))
            (.. ser (put (.. this (getChainCode))))
            (.. ser (put (if pub (.. this (getPubKey)) (.. this (getPrivKeyBytes33)))))
            (assert-state (= (.. ser (position)) 78))
            (.. ser (array))
        )
    )

    #_public
    (§ method #_"String" serializePubB58 [#_"NetworkParameters" params]
        (DeterministicKey'toBase58 (.. this (serialize params, true)))
    )

    #_public
    (§ method #_"String" serializePrivB58 [#_"NetworkParameters" params]
        (DeterministicKey'toBase58 (.. this (serialize params, false)))
    )

    #_static
    (§ defn #_"String" DeterministicKey'toBase58 [#_"byte[]" ser]
        (Base58'encode (DeterministicKey'addChecksum ser))
    )

    ;;; Deserialize a base-58-encoded HD Key with no parent. ;;
    #_public
    #_static
    (§ defn #_"DeterministicKey" DeterministicKey'deserializeB58 [#_"String" base58, #_"NetworkParameters" params]
        (DeterministicKey'deserializeB58 nil, base58, params)
    )

    ;;;
     ; Deserialize a base-58-encoded HD Key.
     ;
     ; @param parent The parent node in the given key's deterministic hierarchy.
     ; @throws IllegalArgumentException if the base58 encoded key could not be parsed.
     ;;
    #_public
    #_static
    (§ defn #_"DeterministicKey" DeterministicKey'deserializeB58 [#_nilable #_"DeterministicKey" parent, #_"String" base58, #_"NetworkParameters" params]
        (DeterministicKey'deserialize params, (Base58'decodeChecked base58), parent)
    )

    ;;;
     ; Deserialize an HD Key with no parent.
     ;;
    #_public
    #_static
    (§ defn #_"DeterministicKey" DeterministicKey'deserialize [#_"NetworkParameters" params, #_"byte[]" __serializedKey]
        (DeterministicKey'deserialize params, __serializedKey, nil)
    )

    ;;;
     ; Deserialize an HD Key.
     ;
     ; @param parent The parent node in the given key's deterministic hierarchy.
     ;;
    #_public
    #_static
    (§ defn #_"DeterministicKey" DeterministicKey'deserialize [#_"NetworkParameters" params, #_"byte[]" __serializedKey, #_nilable #_"DeterministicKey" parent]
        (let [#_"ByteBuffer" buffer (ByteBuffer/wrap __serializedKey)
              #_"int" header (.. buffer (getInt))]
            (when (and (not= header (:bip32-header-priv params)) (not= header (:bip32-header-pub params)))
                (throw (IllegalArgumentException. (str "Unknown header bytes: " (.. (DeterministicKey'toBase58 __serializedKey) (substring 0, 4)))))
            )

            (let [#_"boolean" pub (= header (:bip32-header-pub params))
                  #_"int" depth (& (.. buffer (get)) 0xff) ;; convert signed byte to positive int since depth cannot be negative
                  #_"int" pfp (.. buffer (getInt))
                  #_"int" i (.. buffer (getInt))
                  #_"ChildNumber" __childNumber (ChildNumber. i)
                  #_"ImmutableList<ChildNumber>" path]
                (cond (some? parent)
                    (do
                        (when (= pfp 0)
                            (throw (IllegalArgumentException. "Parent was provided but this key doesn't have one"))
                        )
                        (when (not= (.. parent (getFingerprint)) pfp)
                            (throw (IllegalArgumentException. "Parent fingerprints don't match"))
                        )
                        (§ ass path (HDUtils'append (.. parent (getPath)), __childNumber))
                        (when (not= (.. path (size)) depth)
                            (throw (IllegalArgumentException. "Depth does not match"))
                        )
                    )
                    :else
                    (do
                        ;; We have been given a key that is not a root key, yet we lack the object representing the parent.
                        ;; This can happen when deserializing an account key for a watching wallet.  In this case, we assume
                        ;; that the client wants to conceal the key's position in the hierarchy.  The path is truncated at
                        ;; the parent's node.
                        (§ ass path (if (<= 1 depth) (ImmutableList/of __childNumber) (ImmutableList/of)))
                    )
                )
                (let [#_"byte[]" code (byte-array 32) _ (.. buffer (get code))
                      #_"byte[]" data (byte-array 33) _ (.. buffer (get data))]
                    (assert-argument (not (.. buffer (hasRemaining))), "Found unexpected data in key")
                    (if pub
                        (DeterministicKey. path, code, (LazyECPoint. (.. ECKey'CURVE (getCurve)), data), parent, depth, pfp)
                        (DeterministicKey. path, code, (BigInteger. 1, data), parent, depth, pfp)
                    )
                )
            )
        )
    )

    ;;;
     ; The creation time of a deterministic key is equal to that of its parent, unless this key is the root of a tree
     ; in which case the time is stored alongside the key as per normal, see {@link ECKey#getCreationTimeSeconds()}.
     ;;
    #_override
    #_public
    (§ method #_"long" getCreationTimeSeconds []
        (if (some? (:parent this)) (.. (:parent this) (getCreationTimeSeconds)) (.. super (getCreationTimeSeconds)))
    )

    ;;;
     ; The creation time of a deterministic key is equal to that of its parent, unless this key is the root of a tree.
     ; Thus, setting the creation time on a leaf is forbidden.
     ;;
    #_override
    #_public
    (§ method #_"void" setCreationTimeSeconds [#_"long" secs]
        (if (some? (:parent this))
            (throw (IllegalStateException. "Creation time can only be set on root keys."))
            (.. super (setCreationTimeSeconds secs))
        )
        nil
    )

    ;;;
     ; Verifies equality of all fields but NOT the parent pointer, thus the same key derived in two separate heirarchy
     ; objects will equal each other.
     ;;
    #_override
    #_public
    (§ method #_"boolean" equals [#_"Object" o]
        (cond
            (= this o) true
            (or (nil? o) (not= (getClass) (.. o (getClass)))) false
            :else (let [#_"DeterministicKey" other (cast DeterministicKey o)]
                (and (.. super (equals other)) (Arrays/equals (:chain-code this), (:chain-code other)) (Objects/equal (:child-number-path this), (:child-number-path other)))
            )
        )
    )

    #_override
    #_public
    (§ method #_"int" hashCode []
        (Objects/hashCode (.. super (hashCode)), (Arrays/hashCode (:chain-code this)), (:child-number-path this))
    )

    #_override
    #_public
    (§ method #_"String" toString []
        (let [#_"MoreObjects.ToStringHelper" helper (.. (MoreObjects/toStringHelper this) (omitNullValues))]
            (.. helper (add "pub", (.. Utils'HEX (encode (.. (:pub this) (getEncoded))))))
            (.. helper (add "chainCode", (.. Utils'HEX (encode (:chain-code this)))))
            (.. helper (add "path", (.. this (getPathAsString))))
            (when (< 0 (:creation-time-seconds this))
                (.. helper (add "creationTimeSeconds", (:creation-time-seconds this)))
            )
            (.. helper (add "isPubKeyOnly", (.. this (isPubKeyOnly))))
            (.. helper (toString))
        )
    )

    #_override
    #_public
    (§ method #_"void" formatKeyWithAddress [#_"boolean" __includePrivateKeys, #_"StringBuilder" sb, #_"NetworkParameters" params]
        (let [#_"Address" address (.. this (toAddress params))]
            (.. sb (append "  addr:") (append address))
            (.. sb (append "  hash160:") (append (.. Utils'HEX (encode (.. this (getPubKeyHash))))))
            (.. sb (append "  (") (append (.. this (getPathAsString))) (append ")\n"))
            (when __includePrivateKeys
                (.. sb (append "  ") (append (.. this (toStringWithPrivate params))) (append "\n"))
            )
        )
        nil
    )
)

;;;
 ; Provides a uniform way to access something that can be optionally encrypted
 ; and which can have a creation time associated with it.
 ;;
#_public
(§ interface EncryptableItem
    ;;; Returns the raw bytes of the item, if not encrypted, or null if encrypted or the secret is missing. ;;
    #_nilable
    (§ method #_"byte[]" getSecretBytes [])

    ;;; Returns the time in seconds since the UNIX epoch at which this encryptable item was first created/derived. ;;
    (§ method #_"long" getCreationTimeSeconds [])
)

#_public
(§ class HDDerivationException (§ extends RuntimeException)
    #_public
    (§ constructor HDDerivationException [#_"String" message]
        (§ super message)
        this
    )
)

;;;
 ; Implementation of the <a href="https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki">BIP 32</a>
 ; deterministic wallet child key generation algorithm.
 ;;
#_public
(§ class HDKeyDerivation
    ;; Some arbitrary random number.  Doesn't matter what it is.
    #_private
    #_static
    (def- #_"BigInteger" HDKeyDerivation'RAND_INT (BigInteger. 256, (SecureRandom.)))

    #_private
    (§ constructor- HDKeyDerivation []
        this
    )

    ;;;
     ; Child derivation may fail (although with extremely low probability); in such case it is re-attempted.
     ; This is the maximum number of re-attempts (to avoid an infinite loop in case of bugs etc.)
     ;;
    #_public
    #_static
    (def #_"int" HDKeyDerivation'MAX_CHILD_DERIVATION_ATTEMPTS 100)

    ;;;
     ; Generates a new deterministic key from the given seed, which can be any arbitrary byte array.
     ; However resist the temptation to use a string as the seed - any key derived from a password
     ; is likely to be weak and easily broken by attackers (this is not theoretical, people have had
     ; money stolen that way).  This method checks that the given seed is at least 64 bits long.
     ;
     ; @throws HDDerivationException if generated master key is invalid (private key 0 or >= n).
     ; @throws IllegalArgumentException if the seed is less than 8 bytes and could be brute forced.
     ;;
    #_public
    #_static
    #_throws #_[ "HDDerivationException" ]
    (§ defn #_"DeterministicKey" HDKeyDerivation'createMasterPrivateKey [#_"byte[]" seed]
        (assert-argument (< 8 (alength seed)), "Seed is too short and could be brute forced")

        ;; Calculate I = HMAC-SHA512(key="Bitcoin seed", msg=S).
        (let [#_"byte[]" i (HDUtils'hmacSha512 (HDUtils'createHmacSha512Digest (.. "Bitcoin seed" (getBytes))), seed)]
            ;; Split I into two 32-byte sequences, Il and Ir.
            ;; Use Il as master secret key, and Ir as master chain code.
            (assert-state (= (alength i) 64), (alength i))

            (let [#_"byte[]" il (Arrays/copyOfRange i, 0, 32)
                  #_"byte[]" ir (Arrays/copyOfRange i, 32, 64)]
                (Arrays/fill i, (byte 0))
                (let [#_"DeterministicKey" __masterPrivKey (HDKeyDerivation'createMasterPrivKeyFromBytes il, ir)]
                    (Arrays/fill il, (byte 0))
                    (Arrays/fill ir, (byte 0))

                    ;; Child deterministic keys will chain up to their parents to find the keys.
                    (.. __masterPrivKey (setCreationTimeSeconds (Utils'currentTimeSeconds)))
                    __masterPrivKey
                )
            )
        )
    )

    ;;;
     ; @throws HDDerivationException if privKeyBytes is invalid (0 or >= n).
     ;;
    #_public
    #_static
    #_throws #_[ "HDDerivationException" ]
    (§ defn #_"DeterministicKey" HDKeyDerivation'createMasterPrivKeyFromBytes [#_"byte[]" __privKeyBytes, #_"byte[]" code]
        (let [#_"BigInteger" priv (BigInteger. 1, __privKeyBytes)]
            (HDKeyDerivation'assertNonZero priv, "Generated master key is invalid.")
            (HDKeyDerivation'assertLessThanN priv, "Generated master key is invalid.")
            (DeterministicKey. (ImmutableList/of #_"ImmutableList<ChildNumber>"), code, priv, nil)
        )
    )

    #_public
    #_static
    (§ defn #_"DeterministicKey" HDKeyDerivation'createMasterPubKeyFromBytes [#_"byte[]" __pubKeyBytes, #_"byte[]" code]
        (DeterministicKey. (ImmutableList/of #_"ImmutableList<ChildNumber>"), code, (LazyECPoint. (.. ECKey'CURVE (getCurve)), __pubKeyBytes), nil, nil)
    )

    ;;;
     ; Derives a key given the "extended" child number, i.e. the 0x80000000 bit of the value that you
     ; pass for <code>childNumber</code> will determine whether to use hardened derivation or not.
     ; Consider whether your code would benefit from the clarity of the equivalent, but explicit, form
     ; of this method that takes a <code>ChildNumber</code> rather than an <code>int</code>, for example:
     ; <code>deriveChildKey(parent, new ChildNumber(childNumber, true))</code>
     ; where the value of the hardened bit of <code>childNumber</code> is zero.
     ;;
    #_public
    #_static
    (§ defn #_"DeterministicKey" HDKeyDerivation'deriveChildKey [#_"DeterministicKey" parent, #_"int" __childNumber]
        (HDKeyDerivation'deriveChildKey parent, (ChildNumber. __childNumber))
    )

    ;;;
     ; Derives a key of the "extended" child number, i.e. with the 0x80000000 bit specifying whether
     ; to use hardened derivation or not.  If derivation fails, tries a next child.
     ;;
    #_public
    #_static
    (§ defn #_"DeterministicKey" HDKeyDerivation'deriveThisOrNextChildKey [#_"DeterministicKey" parent, #_"int" __childNumber]
        (let [#_"ChildNumber" child (ChildNumber. __childNumber)
              #_"boolean" __isHardened (.. child (isHardened))]
            (loop-when-recur [#_"int" i 0] (< i HDKeyDerivation'MAX_CHILD_DERIVATION_ATTEMPTS) [(inc i)]
                (try
                    (§ ass child (ChildNumber. (+ (.. child (num)) i), __isHardened))
                    (§ return (HDKeyDerivation'deriveChildKey parent, child))
                    (catch HDDerivationException _
                    )
                )
            )
            (throw (HDDerivationException. "Maximum number of child derivation attempts reached, this is probably an indication of a bug."))
        )
    )

    ;;;
     ; @throws HDDerivationException if private derivation is attempted for a public-only parent key, or
     ; if the resulting derived key is invalid (e.g. private key == 0).
     ;;
    #_public
    #_static
    #_throws #_[ "HDDerivationException" ]
    (§ defn #_"DeterministicKey" HDKeyDerivation'deriveChildKey [#_"DeterministicKey" parent, #_"ChildNumber" __childNumber]
        (if (not (.. parent (hasPrivKey)))
            (let [#_"RawKeyBytes" raw (HDKeyDerivation'deriveChildKeyBytesFromPublic parent, __childNumber, :PublicDerivationMode'NORMAL)]
                (DeterministicKey. (HDUtils'append (.. parent (getPath)), __childNumber), (:chain-code raw), (LazyECPoint. (.. ECKey'CURVE (getCurve)), (:key-bytes raw)), nil, parent)
            )
            (let [#_"RawKeyBytes" raw (HDKeyDerivation'deriveChildKeyBytesFromPrivate parent, __childNumber)]
                (DeterministicKey. (HDUtils'append (.. parent (getPath)), __childNumber), (:chain-code raw), (BigInteger. 1, (:key-bytes raw)), parent)
            )
        )
    )

    #_public
    #_static
    #_throws #_[ "HDDerivationException" ]
    (§ defn #_"RawKeyBytes" HDKeyDerivation'deriveChildKeyBytesFromPrivate [#_"DeterministicKey" parent, #_"ChildNumber" __childNumber]
        (assert-argument (.. parent (hasPrivKey)), "Parent key must have private key bytes for this method.")

        (let [#_"byte[]" __parentPublicKey (.. parent (getPubKeyPoint) (getEncoded true))]
            (assert-state (= (alength __parentPublicKey) 33), (str "Parent pubkey must be 33 bytes, but is " (alength __parentPublicKey)))

            (let [#_"ByteBuffer" data (ByteBuffer/allocate 37)]
                (.. data (put (if (.. __childNumber (isHardened)) (.. parent (getPrivKeyBytes33)) __parentPublicKey)))
                (.. data (putInt (.. __childNumber (i))))

                (let [#_"byte[]" i (HDUtils'hmacSha512 (.. parent (getChainCode)), (.. data (array)))]
                    (assert-state (= (alength i) 64), (alength i))

                    (let [#_"byte[]" il (Arrays/copyOfRange i, 0, 32)
                          #_"byte[]" code (Arrays/copyOfRange i, 32, 64)
                          #_"BigInteger" ili (BigInteger. 1, il)]
                        (HDKeyDerivation'assertLessThanN ili, "Illegal derived key: I_L >= n")

                        (let [#_"BigInteger" priv (.. parent (getPrivKey))
                              #_"BigInteger" ki (.. priv (add ili) (mod (.. ECKey'CURVE (getN))))]
                            (HDKeyDerivation'assertNonZero ki, "Illegal derived key: derived private key equals 0.")

                            (RawKeyBytes. (.. ki (toByteArray)), code)
                        )
                    )
                )
            )
        )
    )

    #_public
    #_static
    #_enum
    (def PublicDerivationMode'values
    #{
        :PublicDerivationMode'NORMAL
        :PublicDerivationMode'WITH_INVERSION
    })

    #_public
    #_static
    #_throws #_[ "HDDerivationException" ]
    (§ defn #_"RawKeyBytes" HDKeyDerivation'deriveChildKeyBytesFromPublic [#_"DeterministicKey" parent, #_"ChildNumber" __childNumber, #_"PublicDerivationMode" mode]
        (assert-argument (not (.. __childNumber (isHardened))), "Can't use private derivation with public keys only.")

        (let [#_"byte[]" __parentPublicKey (.. parent (getPubKeyPoint) (getEncoded true))]
            (assert-state (= (alength __parentPublicKey) 33), (str "Parent pubkey must be 33 bytes, but is " (alength __parentPublicKey)))

            (let [#_"ByteBuffer" data (ByteBuffer/allocate 37)]
                (.. data (put __parentPublicKey))
                (.. data (putInt (.. __childNumber (i))))

                (let [#_"byte[]" i (HDUtils'hmacSha512 (.. parent (getChainCode)), (.. data (array)))]
                    (assert-state (= (alength i) 64), (alength i))

                    (let [#_"byte[]" il (Arrays/copyOfRange i, 0, 32)
                          #_"byte[]" code (Arrays/copyOfRange i, 32, 64)
                          #_"BigInteger" ili (BigInteger. 1, il)]
                        (HDKeyDerivation'assertLessThanN ili, "Illegal derived key: I_L >= n")

                        (let [#_"BigInteger" __N (.. ECKey'CURVE (getN))
                              #_"ECPoint" __Ki]
                            (condp = mode
                                :PublicDerivationMode'NORMAL
                                    (§ ass __Ki (.. (ECKey'publicPointFromPrivate ili) (add (.. parent (getPubKeyPoint)))))
                                :PublicDerivationMode'WITH_INVERSION
                                    (§ do
                                        ;; This trick comes from Gregory Maxwell.  Check the homomorphic properties of our curve hold.  The
                                        ;; below calculations should be redundant and give the same result as NORMAL but if the precalculated
                                        ;; tables have taken a bit flip will yield a different answer.  This mode is used when vending a key
                                        ;; to perform a last-ditch sanity check trying to catch bad RAM.
                                        (§ ass __Ki (ECKey'publicPointFromPrivate (.. ili (add HDKeyDerivation'RAND_INT) (mod __N))))
                                        (let [#_"BigInteger" __additiveInverse (.. HDKeyDerivation'RAND_INT (negate) (mod __N))]
                                            (§ ass __Ki (Ki/add (ECKey'publicPointFromPrivate __additiveInverse)))
                                            (§ ass __Ki (Ki/add (.. parent (getPubKeyPoint))))
                                        )
                                    )
                                (throw (AssertionError.))
                            )

                            (HDKeyDerivation'assertNonInfinity __Ki, "Illegal derived key: derived public key equals infinity.")
                            (RawKeyBytes. (Ki/getEncoded true), code)
                        )
                    )
                )
            )
        )
    )

    #_private
    #_static
    (§ defn- #_"void" HDKeyDerivation'assertNonZero [#_"BigInteger" integer, #_"String" __errorMessage]
        (when (.. integer (equals BigInteger/ZERO))
            (throw (HDDerivationException. __errorMessage))
        )
        nil
    )

    #_private
    #_static
    (§ defn- #_"void" HDKeyDerivation'assertNonInfinity [#_"ECPoint" point, #_"String" __errorMessage]
        (when (.. point (equals (.. ECKey'CURVE (getCurve) (getInfinity))))
            (throw (HDDerivationException. __errorMessage))
        )
        nil
    )

    #_private
    #_static
    (§ defn- #_"void" HDKeyDerivation'assertLessThanN [#_"BigInteger" integer, #_"String" __errorMessage]
        (when (> (.. integer (compareTo (.. ECKey'CURVE (getN)))) 0)
            (throw (HDDerivationException. __errorMessage))
        )
        nil
    )

    #_public
    #_static
    (§ class RawKeyBytes
        #_public
        (§ field #_"byte[]" :key-bytes)
        #_public
        (§ field #_"byte[]" :chain-code)

        #_public
        (§ constructor RawKeyBytes [#_"byte[]" __keyBytes, #_"byte[]" code]
            (§ assoc this :key-bytes __keyBytes)
            (§ assoc this :chain-code code)
            this
        )
    )
)

;;;
 ; Static utilities used in BIP 32 Hierarchical Deterministic Wallets (HDW).
 ;;
#_public
(§ class HDUtils
    #_private
    #_static
    (def- #_"Joiner" HDUtils'PATH_JOINER (Joiner/on "/"))

    #_static
    (§ defn #_"HMac" HDUtils'createHmacSha512Digest [#_"byte[]" key]
        (let [#_"SHA512Digest" digest (SHA512Digest.)
              #_"HMac" __hMac (HMac. digest)]
            (.. __hMac (init (KeyParameter. key)))
            __hMac
        )
    )

    #_static
    (§ defn #_"byte[]" HDUtils'hmacSha512 [#_"HMac" __hmacSha512, #_"byte[]" input]
        (.. __hmacSha512 (reset))
        (.. __hmacSha512 (update input, 0, (alength input)))
        (let [#_"byte[]" out (byte-array 64)]
            (.. __hmacSha512 (doFinal out, 0))
            out
        )
    )

    #_public
    #_static
    (§ defn #_"byte[]" HDUtils'hmacSha512 [#_"byte[]" key, #_"byte[]" data]
        (HDUtils'hmacSha512 (HDUtils'createHmacSha512Digest key), data)
    )

    #_static
    (§ defn #_"byte[]" HDUtils'toCompressed [#_"byte[]" __uncompressedPoint]
        (.. ECKey'CURVE (getCurve) (decodePoint __uncompressedPoint) (getEncoded true))
    )

    ;;; Append a derivation level to an existing path. ;;
    #_public
    #_static
    (§ defn #_"ImmutableList<ChildNumber>" HDUtils'append [#_"List<ChildNumber>" path, #_"ChildNumber" __childNumber]
        (.. (ImmutableList/builder #_"ImmutableList<ChildNumber>") (addAll path) (add __childNumber) (build))
    )

    ;;; Concatenate two derivation paths. ;;
    #_public
    #_static
    (§ defn #_"ImmutableList<ChildNumber>" HDUtils'concat [#_"List<ChildNumber>" path, #_"List<ChildNumber>" path2]
        (.. (ImmutableList/builder #_"ImmutableList<ChildNumber>") (addAll path) (addAll path2) (build))
    )

    ;;; Convert to a string path, starting with "M/". ;;
    #_public
    #_static
    (§ defn #_"String" HDUtils'formatPath [#_"List<ChildNumber>" path]
        (.. HDUtils'PATH_JOINER (join (Iterables/concat (Collections/singleton "M"), path)))
    )

    ;;;
     ; The path is a human-friendly representation of the deterministic path.  For example:
     ;
     ; "44H / 0H / 0H / 1 / 1"
     ;
     ; Where a letter "H" means hardened key.  Spaces are ignored.
     ;;
    #_public
    #_static
    (§ defn #_"List<ChildNumber>" HDUtils'parsePath [#_non-nil #_"String" path]
        (let [#_"List<ChildNumber>" nodes (ArrayList. #_"<>")]

            (doseq [#_"String" s (.. path (replace "M", "") (split "/"))]
                (let [s (.. s (replaceAll " ", ""))]
                    (when (not= (.. s (length)) 0)
                        (let [#_"boolean" hard? (.. s (endsWith "H")) s (if hard? (.. s (substring 0, (dec (.. s (length))))) s)]
                            (.. nodes (add (ChildNumber. (Integer/parseInt s), hard?)))
                        )
                    )
                )
            )

            nodes
        )
    )
)

;;;
 ; A wrapper around ECPoint that delays decoding of the point for as long as possible.  This is useful because point
 ; encode/decode in Bouncy Castle is quite slow especially on Dalvik, as it often involves decompression/recompression.
 ;;
#_public
(§ class LazyECPoint
    ;; If curve is set, bits is also set.  If curve is unset, point is set and bits is unset.  Point can be set along
    ;; with curve and bits when the cached form has been accessed and thus must have been converted.
    #_private
    (§ field- #_"ECCurve" :curve)
    #_private
    (§ field- #_"byte[]" :bits)

    ;; This field is effectively final - once set it won't change again.  However it can be set after construction.
    #_nilable
    #_private
    (§ field- #_"ECPoint" :point)

    #_public
    (§ constructor LazyECPoint [#_"ECCurve" curve, #_"byte[]" bits]
        (§ assoc this :curve curve)
        (§ assoc this :bits bits)
        this
    )

    #_public
    (§ constructor LazyECPoint [#_"ECPoint" point]
        (§ assoc this :point (ensure some? point))
        (§ assoc this :curve nil)
        (§ assoc this :bits nil)
        this
    )

    #_public
    (§ method #_"ECPoint" get []
        (when (nil? (:point this))
            (§ assoc this :point (.. (:curve this) (decodePoint (:bits this))))
        )
        (:point this)
    )

    ;; Delegated methods.

    #_public
    (§ method #_"ECPoint" getDetachedPoint []
        (.. this (get) (getDetachedPoint))
    )

    #_public
    (§ method #_"byte[]" getEncoded []
        (if (some? (:bits this))
            (Arrays/copyOf (:bits this), (alength (:bits this)))
            (.. this (get) (getEncoded))
        )
    )

    #_public
    (§ method #_"boolean" isInfinity []
        (.. this (get) (isInfinity))
    )

    #_public
    (§ method #_"ECPoint" timesPow2 [#_"int" e]
        (.. this (get) (timesPow2 e))
    )

    #_public
    (§ method #_"ECFieldElement" getYCoord []
        (.. this (get) (getYCoord))
    )

    #_public
    (§ method #_"ECFieldElement[]" getZCoords []
        (.. this (get) (getZCoords))
    )

    #_public
    (§ method #_"boolean" isNormalized []
        (.. this (get) (isNormalized))
    )

    #_public
    (§ method #_"boolean" isCompressed []
        (if (some? (:bits this)) (any = (aget (:bits this) 0) 2 3) (.. this (get) (isCompressed)))
    )

    #_public
    (§ method #_"ECPoint" multiply [#_"BigInteger" k]
        (.. this (get) (multiply k))
    )

    #_public
    (§ method #_"ECPoint" subtract [#_"ECPoint" b]
        (.. this (get) (subtract b))
    )

    #_public
    (§ method #_"boolean" isValid []
        (.. this (get) (isValid))
    )

    #_public
    (§ method #_"ECPoint" scaleY [#_"ECFieldElement" scale]
        (.. this (get) (scaleY scale))
    )

    #_public
    (§ method #_"ECFieldElement" getXCoord []
        (.. this (get) (getXCoord))
    )

    #_public
    (§ method #_"ECPoint" scaleX [#_"ECFieldElement" scale]
        (.. this (get) (scaleX scale))
    )

    #_public
    (§ method #_"boolean" equals [#_"ECPoint" other]
        (.. this (get) (equals other))
    )

    #_public
    (§ method #_"ECPoint" negate []
        (.. this (get) (negate))
    )

    #_public
    (§ method #_"ECPoint" threeTimes []
        (.. this (get) (threeTimes))
    )

    #_public
    (§ method #_"ECFieldElement" getZCoord [#_"int" index]
        (.. this (get) (getZCoord index))
    )

    #_public
    (§ method #_"byte[]" getEncoded [#_"boolean" compressed]
        (if (and (= compressed (.. this (isCompressed))) (some? (:bits this)))
            (Arrays/copyOf (:bits this), (alength (:bits this)))
            (.. this (get) (getEncoded compressed))
        )
    )

    #_public
    (§ method #_"ECPoint" add [#_"ECPoint" b]
        (.. this (get) (add b))
    )

    #_public
    (§ method #_"ECPoint" twicePlus [#_"ECPoint" b]
        (.. this (get) (twicePlus b))
    )

    #_public
    (§ method #_"ECCurve" getCurve []
        (.. this (get) (getCurve))
    )

    #_public
    (§ method #_"ECPoint" normalize []
        (.. this (get) (normalize))
    )

    #_public
    (§ method #_"ECFieldElement" getY []
        (.. this (normalize) (getYCoord))
    )

    #_public
    (§ method #_"ECPoint" twice []
        (.. this (get) (twice))
    )

    #_public
    (§ method #_"ECFieldElement" getAffineYCoord []
        (.. this (get) (getAffineYCoord))
    )

    #_public
    (§ method #_"ECFieldElement" getAffineXCoord []
        (.. this (get) (getAffineXCoord))
    )

    #_public
    (§ method #_"ECFieldElement" getX []
        (.. this (normalize) (getXCoord))
    )

    #_override
    #_public
    (§ method #_"boolean" equals [#_"Object" o]
        (cond
            (= this o) true
            (or (nil? o) (not= (getClass) (.. o (getClass)))) false
            :else (Arrays/equals (.. this (getCanonicalEncoding)), (.. (cast LazyECPoint o) (getCanonicalEncoding)))
        )
    )

    #_override
    #_public
    (§ method #_"int" hashCode []
        (Arrays/hashCode (.. this (getCanonicalEncoding)))
    )

    #_private
    (§ method- #_"byte[]" getCanonicalEncoding []
        (.. this (getEncoded true))
    )
)

;;;
 ; A MnemonicCode object may be used to convert between binary seed values and lists of words per
 ; <a href="https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki">the BIP 39 specification</a>.
 ;;

#_public
(§ class MnemonicCode
    #_private
    #_static
    (def- #_"Logger" MnemonicCode'log (LoggerFactory/getLogger MnemonicCode))

    #_private
    (§ field- #_"ArrayList<String>" :word-list)

    #_private
    #_static
    (def- #_"String[]" MnemonicCode'BIP39_ENGLISH_WORDLIST (into-array String
    [
        "abandon", "ability", "able", "about", "above", "absent", "absorb", "abstract",
        "absurd", "abuse", "access", "accident", "account", "accuse", "achieve", "acid",
        "acoustic", "acquire", "across", "act", "action", "actor", "actress", "actual",
        "adapt", "add", "addict", "address", "adjust", "admit", "adult", "advance",
        "advice", "aerobic", "affair", "afford", "afraid", "again", "age", "agent",
        "agree", "ahead", "aim", "air", "airport", "aisle", "alarm", "album",
        "alcohol", "alert", "alien", "all", "alley", "allow", "almost", "alone",
        "alpha", "already", "also", "alter", "always", "amateur", "amazing", "among",
        "amount", "amused", "analyst", "anchor", "ancient", "anger", "angle", "angry",
        "animal", "ankle", "announce", "annual", "another", "answer", "antenna", "antique",
        "anxiety", "any", "apart", "apology", "appear", "apple", "approve", "april",
        "arch", "arctic", "area", "arena", "argue", "arm", "armed", "armor",
        "army", "around", "arrange", "arrest", "arrive", "arrow", "art", "artefact",
        "artist", "artwork", "ask", "aspect", "assault", "asset", "assist", "assume",
        "asthma", "athlete", "atom", "attack", "attend", "attitude", "attract", "auction",
        "audit", "august", "aunt", "author", "auto", "autumn", "average", "avocado",
        "avoid", "awake", "aware", "away", "awesome", "awful", "awkward", "axis",
        "baby", "bachelor", "bacon", "badge", "bag", "balance", "balcony", "ball",
        "bamboo", "banana", "banner", "bar", "barely", "bargain", "barrel", "base",
        "basic", "basket", "battle", "beach", "bean", "beauty", "because", "become",
        "beef", "before", "begin", "behave", "behind", "believe", "below", "belt",
        "bench", "benefit", "best", "betray", "better", "between", "beyond", "bicycle",
        "bid", "bike", "bind", "biology", "bird", "birth", "bitter", "black",
        "blade", "blame", "blanket", "blast", "bleak", "bless", "blind", "blood",
        "blossom", "blouse", "blue", "blur", "blush", "board", "boat", "body",
        "boil", "bomb", "bone", "bonus", "book", "boost", "border", "boring",
        "borrow", "boss", "bottom", "bounce", "box", "boy", "bracket", "brain",
        "brand", "brass", "brave", "bread", "breeze", "brick", "bridge", "brief",
        "bright", "bring", "brisk", "broccoli", "broken", "bronze", "broom", "brother",
        "brown", "brush", "bubble", "buddy", "budget", "buffalo", "build", "bulb",
        "bulk", "bullet", "bundle", "bunker", "burden", "burger", "burst", "bus",
        "business", "busy", "butter", "buyer", "buzz", "cabbage", "cabin", "cable",
        "cactus", "cage", "cake", "call", "calm", "camera", "camp", "can",
        "canal", "cancel", "candy", "cannon", "canoe", "canvas", "canyon", "capable",
        "capital", "captain", "car", "carbon", "card", "cargo", "carpet", "carry",
        "cart", "case", "cash", "casino", "castle", "casual", "cat", "catalog",
        "catch", "category", "cattle", "caught", "cause", "caution", "cave", "ceiling",
        "celery", "cement", "census", "century", "cereal", "certain", "chair", "chalk",
        "champion", "change", "chaos", "chapter", "charge", "chase", "chat", "cheap",
        "check", "cheese", "chef", "cherry", "chest", "chicken", "chief", "child",
        "chimney", "choice", "choose", "chronic", "chuckle", "chunk", "churn", "cigar",
        "cinnamon", "circle", "citizen", "city", "civil", "claim", "clap", "clarify",
        "claw", "clay", "clean", "clerk", "clever", "click", "client", "cliff",
        "climb", "clinic", "clip", "clock", "clog", "close", "cloth", "cloud",
        "clown", "club", "clump", "cluster", "clutch", "coach", "coast", "coconut",
        "code", "coffee", "coil", "coin", "collect", "color", "column", "combine",
        "come", "comfort", "comic", "common", "company", "concert", "conduct", "confirm",
        "congress", "connect", "consider", "control", "convince", "cook", "cool", "copper",
        "copy", "coral", "core", "corn", "correct", "cost", "cotton", "couch",
        "country", "couple", "course", "cousin", "cover", "coyote", "crack", "cradle",
        "craft", "cram", "crane", "crash", "crater", "crawl", "crazy", "cream",
        "credit", "creek", "crew", "cricket", "crime", "crisp", "critic", "crop",
        "cross", "crouch", "crowd", "crucial", "cruel", "cruise", "crumble", "crunch",
        "crush", "cry", "crystal", "cube", "culture", "cup", "cupboard", "curious",
        "current", "curtain", "curve", "cushion", "custom", "cute", "cycle", "dad",
        "damage", "damp", "dance", "danger", "daring", "dash", "daughter", "dawn",
        "day", "deal", "debate", "debris", "decade", "december", "decide", "decline",
        "decorate", "decrease", "deer", "defense", "define", "defy", "degree", "delay",
        "deliver", "demand", "demise", "denial", "dentist", "deny", "depart", "depend",
        "deposit", "depth", "deputy", "derive", "describe", "desert", "design", "desk",
        "despair", "destroy", "detail", "detect", "develop", "device", "devote", "diagram",
        "dial", "diamond", "diary", "dice", "diesel", "diet", "differ", "digital",
        "dignity", "dilemma", "dinner", "dinosaur", "direct", "dirt", "disagree", "discover",
        "disease", "dish", "dismiss", "disorder", "display", "distance", "divert", "divide",
        "divorce", "dizzy", "doctor", "document", "dog", "doll", "dolphin", "domain",
        "donate", "donkey", "donor", "door", "dose", "double", "dove", "draft",
        "dragon", "drama", "drastic", "draw", "dream", "dress", "drift", "drill",
        "drink", "drip", "drive", "drop", "drum", "dry", "duck", "dumb",
        "dune", "during", "dust", "dutch", "duty", "dwarf", "dynamic", "eager",
        "eagle", "early", "earn", "earth", "easily", "east", "easy", "echo",
        "ecology", "economy", "edge", "edit", "educate", "effort", "egg", "eight",
        "either", "elbow", "elder", "electric", "elegant", "element", "elephant", "elevator",
        "elite", "else", "embark", "embody", "embrace", "emerge", "emotion", "employ",
        "empower", "empty", "enable", "enact", "end", "endless", "endorse", "enemy",
        "energy", "enforce", "engage", "engine", "enhance", "enjoy", "enlist", "enough",
        "enrich", "enroll", "ensure", "enter", "entire", "entry", "envelope", "episode",
        "equal", "equip", "era", "erase", "erode", "erosion", "error", "erupt",
        "escape", "essay", "essence", "estate", "eternal", "ethics", "evidence", "evil",
        "evoke", "evolve", "exact", "example", "excess", "exchange", "excite", "exclude",
        "excuse", "execute", "exercise", "exhaust", "exhibit", "exile", "exist", "exit",
        "exotic", "expand", "expect", "expire", "explain", "expose", "express", "extend",
        "extra", "eye", "eyebrow", "fabric", "face", "faculty", "fade", "faint",
        "faith", "fall", "false", "fame", "family", "famous", "fan", "fancy",
        "fantasy", "farm", "fashion", "fat", "fatal", "father", "fatigue", "fault",
        "favorite", "feature", "february", "federal", "fee", "feed", "feel", "female",
        "fence", "festival", "fetch", "fever", "few", "fiber", "fiction", "field",
        "figure", "file", "film", "filter", "final", "find", "fine", "finger",
        "finish", "fire", "firm", "first", "fiscal", "fish", "fit", "fitness",
        "fix", "flag", "flame", "flash", "flat", "flavor", "flee", "flight",
        "flip", "float", "flock", "floor", "flower", "fluid", "flush", "fly",
        "foam", "focus", "fog", "foil", "fold", "follow", "food", "foot",
        "force", "forest", "forget", "fork", "fortune", "forum", "forward", "fossil",
        "foster", "found", "fox", "fragile", "frame", "frequent", "fresh", "friend",
        "fringe", "frog", "front", "frost", "frown", "frozen", "fruit", "fuel",
        "fun", "funny", "furnace", "fury", "future", "gadget", "gain", "galaxy",
        "gallery", "game", "gap", "garage", "garbage", "garden", "garlic", "garment",
        "gas", "gasp", "gate", "gather", "gauge", "gaze", "general", "genius",
        "genre", "gentle", "genuine", "gesture", "ghost", "giant", "gift", "giggle",
        "ginger", "giraffe", "girl", "give", "glad", "glance", "glare", "glass",
        "glide", "glimpse", "globe", "gloom", "glory", "glove", "glow", "glue",
        "goat", "goddess", "gold", "good", "goose", "gorilla", "gospel", "gossip",
        "govern", "gown", "grab", "grace", "grain", "grant", "grape", "grass",
        "gravity", "great", "green", "grid", "grief", "grit", "grocery", "group",
        "grow", "grunt", "guard", "guess", "guide", "guilt", "guitar", "gun",
        "gym", "habit", "hair", "half", "hammer", "hamster", "hand", "happy",
        "harbor", "hard", "harsh", "harvest", "hat", "have", "hawk", "hazard",
        "head", "health", "heart", "heavy", "hedgehog", "height", "hello", "helmet",
        "help", "hen", "hero", "hidden", "high", "hill", "hint", "hip",
        "hire", "history", "hobby", "hockey", "hold", "hole", "holiday", "hollow",
        "home", "honey", "hood", "hope", "horn", "horror", "horse", "hospital",
        "host", "hotel", "hour", "hover", "hub", "huge", "human", "humble",
        "humor", "hundred", "hungry", "hunt", "hurdle", "hurry", "hurt", "husband",
        "hybrid", "ice", "icon", "idea", "identify", "idle", "ignore", "ill",
        "illegal", "illness", "image", "imitate", "immense", "immune", "impact", "impose",
        "improve", "impulse", "inch", "include", "income", "increase", "index", "indicate",
        "indoor", "industry", "infant", "inflict", "inform", "inhale", "inherit", "initial",
        "inject", "injury", "inmate", "inner", "innocent", "input", "inquiry", "insane",
        "insect", "inside", "inspire", "install", "intact", "interest", "into", "invest",
        "invite", "involve", "iron", "island", "isolate", "issue", "item", "ivory",
        "jacket", "jaguar", "jar", "jazz", "jealous", "jeans", "jelly", "jewel",
        "job", "join", "joke", "journey", "joy", "judge", "juice", "jump",
        "jungle", "junior", "junk", "just", "kangaroo", "keen", "keep", "ketchup",
        "key", "kick", "kid", "kidney", "kind", "kingdom", "kiss", "kit",
        "kitchen", "kite", "kitten", "kiwi", "knee", "knife", "knock", "know",
        "lab", "label", "labor", "ladder", "lady", "lake", "lamp", "language",
        "laptop", "large", "later", "latin", "laugh", "laundry", "lava", "law",
        "lawn", "lawsuit", "layer", "lazy", "leader", "leaf", "learn", "leave",
        "lecture", "left", "leg", "legal", "legend", "leisure", "lemon", "lend",
        "length", "lens", "leopard", "lesson", "letter", "level", "liar", "liberty",
        "library", "license", "life", "lift", "light", "like", "limb", "limit",
        "link", "lion", "liquid", "list", "little", "live", "lizard", "load",
        "loan", "lobster", "local", "lock", "logic", "lonely", "long", "loop",
        "lottery", "loud", "lounge", "love", "loyal", "lucky", "luggage", "lumber",
        "lunar", "lunch", "luxury", "lyrics", "machine", "mad", "magic", "magnet",
        "maid", "mail", "main", "major", "make", "mammal", "man", "manage",
        "mandate", "mango", "mansion", "manual", "maple", "marble", "march", "margin",
        "marine", "market", "marriage", "mask", "mass", "master", "match", "material",
        "math", "matrix", "matter", "maximum", "maze", "meadow", "mean", "measure",
        "meat", "mechanic", "medal", "media", "melody", "melt", "member", "memory",
        "mention", "menu", "mercy", "merge", "merit", "merry", "mesh", "message",
        "metal", "method", "middle", "midnight", "milk", "million", "mimic", "mind",
        "minimum", "minor", "minute", "miracle", "mirror", "misery", "miss", "mistake",
        "mix", "mixed", "mixture", "mobile", "model", "modify", "mom", "moment",
        "monitor", "monkey", "monster", "month", "moon", "moral", "more", "morning",
        "mosquito", "mother", "motion", "motor", "mountain", "mouse", "move", "movie",
        "much", "muffin", "mule", "multiply", "muscle", "museum", "mushroom", "music",
        "must", "mutual", "myself", "mystery", "myth", "naive", "name", "napkin",
        "narrow", "nasty", "nation", "nature", "near", "neck", "need", "negative",
        "neglect", "neither", "nephew", "nerve", "nest", "net", "network", "neutral",
        "never", "news", "next", "nice", "night", "noble", "noise", "nominee",
        "noodle", "normal", "north", "nose", "notable", "note", "nothing", "notice",
        "novel", "now", "nuclear", "number", "nurse", "nut", "oak", "obey",
        "object", "oblige", "obscure", "observe", "obtain", "obvious", "occur", "ocean",
        "october", "odor", "off", "offer", "office", "often", "oil", "okay",
        "old", "olive", "olympic", "omit", "once", "one", "onion", "online",
        "only", "open", "opera", "opinion", "oppose", "option", "orange", "orbit",
        "orchard", "order", "ordinary", "organ", "orient", "original", "orphan", "ostrich",
        "other", "outdoor", "outer", "output", "outside", "oval", "oven", "over",
        "own", "owner", "oxygen", "oyster", "ozone", "pact", "paddle", "page",
        "pair", "palace", "palm", "panda", "panel", "panic", "panther", "paper",
        "parade", "parent", "park", "parrot", "party", "pass", "patch", "path",
        "patient", "patrol", "pattern", "pause", "pave", "payment", "peace", "peanut",
        "pear", "peasant", "pelican", "pen", "penalty", "pencil", "people", "pepper",
        "perfect", "permit", "person", "pet", "phone", "photo", "phrase", "physical",
        "piano", "picnic", "picture", "piece", "pig", "pigeon", "pill", "pilot",
        "pink", "pioneer", "pipe", "pistol", "pitch", "pizza", "place", "planet",
        "plastic", "plate", "play", "please", "pledge", "pluck", "plug", "plunge",
        "poem", "poet", "point", "polar", "pole", "police", "pond", "pony",
        "pool", "popular", "portion", "position", "possible", "post", "potato", "pottery",
        "poverty", "powder", "power", "practice", "praise", "predict", "prefer", "prepare",
        "present", "pretty", "prevent", "price", "pride", "primary", "print", "priority",
        "prison", "private", "prize", "problem", "process", "produce", "profit", "program",
        "project", "promote", "proof", "property", "prosper", "protect", "proud", "provide",
        "public", "pudding", "pull", "pulp", "pulse", "pumpkin", "punch", "pupil",
        "puppy", "purchase", "purity", "purpose", "purse", "push", "put", "puzzle",
        "pyramid", "quality", "quantum", "quarter", "question", "quick", "quit", "quiz",
        "quote", "rabbit", "raccoon", "race", "rack", "radar", "radio", "rail",
        "rain", "raise", "rally", "ramp", "ranch", "random", "range", "rapid",
        "rare", "rate", "rather", "raven", "raw", "razor", "ready", "real",
        "reason", "rebel", "rebuild", "recall", "receive", "recipe", "record", "recycle",
        "reduce", "reflect", "reform", "refuse", "region", "regret", "regular", "reject",
        "relax", "release", "relief", "rely", "remain", "remember", "remind", "remove",
        "render", "renew", "rent", "reopen", "repair", "repeat", "replace", "report",
        "require", "rescue", "resemble", "resist", "resource", "response", "result", "retire",
        "retreat", "return", "reunion", "reveal", "review", "reward", "rhythm", "rib",
        "ribbon", "rice", "rich", "ride", "ridge", "rifle", "right", "rigid",
        "ring", "riot", "ripple", "risk", "ritual", "rival", "river", "road",
        "roast", "robot", "robust", "rocket", "romance", "roof", "rookie", "room",
        "rose", "rotate", "rough", "round", "route", "royal", "rubber", "rude",
        "rug", "rule", "run", "runway", "rural", "sad", "saddle", "sadness",
        "safe", "sail", "salad", "salmon", "salon", "salt", "salute", "same",
        "sample", "sand", "satisfy", "satoshi", "sauce", "sausage", "save", "say",
        "scale", "scan", "scare", "scatter", "scene", "scheme", "school", "science",
        "scissors", "scorpion", "scout", "scrap", "screen", "script", "scrub", "sea",
        "search", "season", "seat", "second", "secret", "section", "security", "seed",
        "seek", "segment", "select", "sell", "seminar", "senior", "sense", "sentence",
        "series", "service", "session", "settle", "setup", "seven", "shadow", "shaft",
        "shallow", "share", "shed", "shell", "sheriff", "shield", "shift", "shine",
        "ship", "shiver", "shock", "shoe", "shoot", "shop", "short", "shoulder",
        "shove", "shrimp", "shrug", "shuffle", "shy", "sibling", "sick", "side",
        "siege", "sight", "sign", "silent", "silk", "silly", "silver", "similar",
        "simple", "since", "sing", "siren", "sister", "situate", "six", "size",
        "skate", "sketch", "ski", "skill", "skin", "skirt", "skull", "slab",
        "slam", "sleep", "slender", "slice", "slide", "slight", "slim", "slogan",
        "slot", "slow", "slush", "small", "smart", "smile", "smoke", "smooth",
        "snack", "snake", "snap", "sniff", "snow", "soap", "soccer", "social",
        "sock", "soda", "soft", "solar", "soldier", "solid", "solution", "solve",
        "someone", "song", "soon", "sorry", "sort", "soul", "sound", "soup",
        "source", "south", "space", "spare", "spatial", "spawn", "speak", "special",
        "speed", "spell", "spend", "sphere", "spice", "spider", "spike", "spin",
        "spirit", "split", "spoil", "sponsor", "spoon", "sport", "spot", "spray",
        "spread", "spring", "spy", "square", "squeeze", "squirrel", "stable", "stadium",
        "staff", "stage", "stairs", "stamp", "stand", "start", "state", "stay",
        "steak", "steel", "stem", "step", "stereo", "stick", "still", "sting",
        "stock", "stomach", "stone", "stool", "story", "stove", "strategy", "street",
        "strike", "strong", "struggle", "student", "stuff", "stumble", "style", "subject",
        "submit", "subway", "success", "such", "sudden", "suffer", "sugar", "suggest",
        "suit", "summer", "sun", "sunny", "sunset", "super", "supply", "supreme",
        "sure", "surface", "surge", "surprise", "surround", "survey", "suspect", "sustain",
        "swallow", "swamp", "swap", "swarm", "swear", "sweet", "swift", "swim",
        "swing", "switch", "sword", "symbol", "symptom", "syrup", "system", "table",
        "tackle", "tag", "tail", "talent", "talk", "tank", "tape", "target",
        "task", "taste", "tattoo", "taxi", "teach", "team", "tell", "ten",
        "tenant", "tennis", "tent", "term", "test", "text", "thank", "that",
        "theme", "then", "theory", "there", "they", "thing", "this", "thought",
        "three", "thrive", "throw", "thumb", "thunder", "ticket", "tide", "tiger",
        "tilt", "timber", "time", "tiny", "tip", "tired", "tissue", "title",
        "toast", "tobacco", "today", "toddler", "toe", "together", "toilet", "token",
        "tomato", "tomorrow", "tone", "tongue", "tonight", "tool", "tooth", "top",
        "topic", "topple", "torch", "tornado", "tortoise", "toss", "total", "tourist",
        "toward", "tower", "town", "toy", "track", "trade", "traffic", "tragic",
        "train", "transfer", "trap", "trash", "travel", "tray", "treat", "tree",
        "trend", "trial", "tribe", "trick", "trigger", "trim", "trip", "trophy",
        "trouble", "truck", "true", "truly", "trumpet", "trust", "truth", "try",
        "tube", "tuition", "tumble", "tuna", "tunnel", "turkey", "turn", "turtle",
        "twelve", "twenty", "twice", "twin", "twist", "two", "type", "typical",
        "ugly", "umbrella", "unable", "unaware", "uncle", "uncover", "under", "undo",
        "unfair", "unfold", "unhappy", "uniform", "unique", "unit", "universe", "unknown",
        "unlock", "until", "unusual", "unveil", "update", "upgrade", "uphold", "upon",
        "upper", "upset", "urban", "urge", "usage", "use", "used", "useful",
        "useless", "usual", "utility", "vacant", "vacuum", "vague", "valid", "valley",
        "valve", "van", "vanish", "vapor", "various", "vast", "vault", "vehicle",
        "velvet", "vendor", "venture", "venue", "verb", "verify", "version", "very",
        "vessel", "veteran", "viable", "vibrant", "vicious", "victory", "video", "view",
        "village", "vintage", "violin", "virtual", "virus", "visa", "visit", "visual",
        "vital", "vivid", "vocal", "voice", "void", "volcano", "volume", "vote",
        "voyage", "wage", "wagon", "wait", "walk", "wall", "walnut", "want",
        "warfare", "warm", "warrior", "wash", "wasp", "waste", "water", "wave",
        "way", "wealth", "weapon", "wear", "weasel", "weather", "web", "wedding",
        "weekend", "weird", "welcome", "west", "wet", "whale", "what", "wheat",
        "wheel", "when", "where", "whip", "whisper", "wide", "width", "wife",
        "wild", "will", "win", "window", "wine", "wing", "wink", "winner",
        "winter", "wire", "wisdom", "wise", "wish", "witness", "wolf", "woman",
        "wonder", "wood", "wool", "word", "work", "world", "worry", "worth",
        "wrap", "wreck", "wrestle", "wrist", "write", "wrong", "yard", "year",
        "yellow", "you", "young", "youth", "zebra", "zero", "zone", "zoo",
    ]))
    #_private
    #_static
    (def- #_"String" MnemonicCode'BIP39_ENGLISH_SHA256 "ad90bf3beb7b0eb7e5acd74727dc0da96e0a280a258354e7293fb7e211ac03db")

    ;;; UNIX time for when the BIP39 standard was finalised.  This can be used as a default seed birthday. ;;
    #_public
    #_static
    (def #_"long" MnemonicCode'BIP39_STANDARDISATION_TIME_SECS 1381276800)

    #_private
    #_static
    (def- #_"int" MnemonicCode'PBKDF2_ROUNDS 2048)

    #_public
    #_static
    (def #_"MnemonicCode" MnemonicCode'INSTANCE)

    #_static
    (§ block
        (try
            (§ ass MnemonicCode'INSTANCE (MnemonicCode.))
            (catch FileNotFoundException e
                (.. MnemonicCode'log (error "Could not find word list", e))
            )
            (catch IOException e
                (.. MnemonicCode'log (error "Failed to load word list", e))
            )
        )
    )

    ;;; Initialize from the included word list. ;;
    #_public
    #_throws #_[ "IOException" ]
    (§ constructor MnemonicCode []
        (§ this MnemonicCode'BIP39_ENGLISH_WORDLIST, MnemonicCode'BIP39_ENGLISH_SHA256)
        this
    )

    ;;;
     ; Creates an MnemonicCode object, initializing with words read from the supplied input stream.
     ; If a wordListDigest is supplied, the digest of the words will be checked.
     ;;
    #_public
    #_throws #_[ "IOException", "IllegalArgumentException" ]
    (§ constructor MnemonicCode [#_"String[]" words, #_"String" digest]
        (§ assoc this :word-list (ArrayList. #_"<>" 2048))
        (let [#_"MessageDigest" md (Sha256Hash'newDigest)]
            (doseq [#_"String" word words]
                (.. md (update (.. word (getBytes))))
                (.. (:word-list this) (add word))
            )

            (when-not (= (.. (:word-list this) (size)) 2048)
                (throw (IllegalArgumentException. "input stream did not contain 2048 words"))
            )

            ;; If a wordListDigest is supplied, check to make sure it matches.
            (when (some? digest)
                (when-not (.. Utils'HEX (encode (.. md (digest))) (equals digest))
                    (throw (IllegalArgumentException. "wordlist digest mismatch"))
                )
            )
            this
        )
    )

    ;;;
     ; Convert mnemonic word list to seed.
     ;;
    #_public
    #_static
    (§ defn #_"byte[]" MnemonicCode'toSeed [#_"List<String>" words, #_"String" passphrase]
        ;; To create binary seed from mnemonic, we use PBKDF2 function with mnemonic sentence (in UTF-8) used as a password
        ;; and string "mnemonic" + passphrase (again in UTF-8) used as a salt.  Iteration count is set to 4096 and HMAC-SHA512
        ;; is used as a pseudo-random function.  Desired length of the derived key is 512 bits (= 64 bytes).

        (let [#_"String" pass (.. Utils'SPACE_JOINER (join words))
              #_"String" salt (str "mnemonic" passphrase)]

            (let [#_"Stopwatch" watch (Stopwatch/createStarted)
                  #_"byte[]" seed (PBKDF2SHA512'derive pass, salt, MnemonicCode'PBKDF2_ROUNDS, 64)]
                (.. watch (stop))
                (.. MnemonicCode'log (info "PBKDF2 took {}", watch))
                seed
            )
        )
    )

    ;;;
     ; Convert mnemonic word list to original entropy value.
     ;;
    #_public
    #_throws #_[ "MnemonicLengthException", "MnemonicWordException", "MnemonicChecksumException" ]
    (§ method #_"byte[]" toEntropy [#_"List<String>" words]
        (when (< 0 (rem (.. words (size)) 3))
            (throw (MnemonicLengthException. "Word list size must be multiple of three words."))
        )

        (when (= (.. words (size)) 0)
            (throw (MnemonicLengthException. "Word list is empty."))
        )

        ;; Look up all the words in the list and construct the concatenation of the original entropy and the checksum.

        (let [#_"int" __concatLenBits (* (.. words (size)) 11)
              #_"boolean[]" __concatBits (boolean-array __concatLenBits)
              #_"int" wordindex 0]
            (doseq [#_"String" word words]
                ;; Find the words index in the wordlist.
                (let [#_"int" ndx (Collections/binarySearch (:word-list this), word)]
                    (when (< ndx 0)
                        (throw (MnemonicWordException. word))
                    )

                    ;; Set the next 11 bits to the value of the index.
                    (loop-when-recur [#_"int" i 0] (< i 11) [(inc i)]
                        (aset __concatBits (+ (* wordindex 11) i) (not= (& ndx (<< 1 (- 10 i))) 0))
                    )
                    (§ ass wordindex (inc wordindex))
                )
            )

            (let [#_"int" __checksumLengthBits (quot __concatLenBits 33)
                  #_"int" __entropyLengthBits (- __concatLenBits __checksumLengthBits)]

                ;; Extract original entropy as bytes.
                (let [#_"byte[]" entropy (byte-array (quot __entropyLengthBits 8))]
                    (loop-when-recur [#_"int" i 0] (< i (alength entropy)) [(inc i)]
                        (loop-when-recur [#_"int" j 0] (< j 8) [(inc j)]
                            (when (aget __concatBits (+ (* i 8) j))
                                (aset entropy i (| (aget entropy i) (<< 1 (- 7 j))))
                            )
                        )
                    )

                    ;; Take the digest of the entropy.
                    (let [#_"byte[]" hash (Sha256Hash'hash entropy)
                          #_"boolean[]" __hashBits (MnemonicCode'bytesToBits hash)]

                        ;; Check all the checksum bits.
                        (loop-when-recur [#_"int" i 0] (< i __checksumLengthBits) [(inc i)]
                            (when (not= (aget __concatBits (+ __entropyLengthBits i)) (aget __hashBits i))
                                (throw (MnemonicChecksumException.))
                            )
                        )

                        entropy
                    )
                )
            )
        )
    )

    ;;;
     ; Convert entropy data to mnemonic word list.
     ;;
    #_public
    #_throws #_[ "MnemonicLengthException" ]
    (§ method #_"List<String>" toMnemonic [#_"byte[]" entropy]
        (when (< 0 (rem (alength entropy) 4))
            (throw (MnemonicLengthException. "Entropy length not multiple of 32 bits."))
        )

        (when (= (alength entropy) 0)
            (throw (MnemonicLengthException. "Entropy is empty."))
        )

        ;; We take initial entropy of ENT bits and compute its checksum by taking first ENT / 32 bits of its SHA256 hash.

        (let [#_"byte[]" hash (Sha256Hash'hash entropy)
              #_"boolean[]" __hashBits (MnemonicCode'bytesToBits hash)]

            (let [#_"boolean[]" __entropyBits (MnemonicCode'bytesToBits entropy)
                  #_"int" __checksumLengthBits (quot (alength __entropyBits) 32)]

                ;; We append these bits to the end of the initial entropy.
                (let [#_"boolean[]" __concatBits (boolean-array (+ (alength __entropyBits) __checksumLengthBits))]
                    (System/arraycopy __entropyBits, 0, __concatBits, 0, (alength __entropyBits))
                    (System/arraycopy __hashBits, 0, __concatBits, (alength __entropyBits), __checksumLengthBits)

                    ;; Next we take these concatenated bits and split them into groups of 11 bits.  Each group encodes number from 0-2047
                    ;; which is a position in a wordlist.  We convert numbers into words and use joined words as mnemonic sentence.

                    (let [#_"ArrayList<String>" words (ArrayList. #_"<>")
                          #_"int" nwords (quot (alength __concatBits) 11)]
                        (loop-when-recur [#_"int" i 0] (< i nwords) [(inc i)]
                            (let [#_"int" index 0]
                                (loop-when-recur [#_"int" j 0] (< j 11) [(inc j)]
                                    (§ ass index (<< index 1))
                                    (when (aget __concatBits (+ (* i 11) j))
                                        (§ ass index (| index 0x1))
                                    )
                                )
                                (.. words (add (.. (:word-list this) (get index))))
                            )
                        )

                        words
                    )
                )
            )
        )
    )

    ;;;
     ; Check to see if a mnemonic word list is valid.
     ;;
    #_public
    #_throws #_[ "MnemonicException" ]
    (§ method #_"void" check [#_"List<String>" words]
        (.. this (toEntropy words))
        nil
    )

    #_private
    #_static
    (§ defn- #_"boolean[]" MnemonicCode'bytesToBits [#_"byte[]" data]
        (let [#_"boolean[]" bits (boolean-array (* (alength data) 8))]
            (loop-when-recur [#_"int" i 0] (< i (alength data)) [(inc i)]
                (loop-when-recur [#_"int" j 0] (< j 8) [(inc j)]
                    (aset bits (+ (* i 8) j) (not= (& (aget data i) (<< 1 (- 7 j))) 0))
                )
            )
            bits
        )
    )
)

;;;
 ; Exceptions thrown by the MnemonicCode module.
 ;;
#_public
(§ class MnemonicException (§ extends Exception)
    #_public
    (§ constructor MnemonicException []
        (§ super )
        this
    )

    #_public
    (§ constructor MnemonicException [#_"String" msg]
        (§ super msg)
        this
    )

    ;;;
     ; Thrown when an argument to MnemonicCode is the wrong length.
     ;;
    #_public
    #_static
    (§ class MnemonicLengthException (§ extends MnemonicException)
        #_public
        (§ constructor MnemonicLengthException [#_"String" msg]
            (§ super msg)
            this
        )
    )

    ;;;
     ; Thrown when a list of MnemonicCode words fails the checksum check.
     ;;
    #_public
    #_static
    (§ class MnemonicChecksumException (§ extends MnemonicException)
        #_public
        (§ constructor MnemonicChecksumException []
            (§ super )
            this
        )
    )

    ;;;
     ; Thrown when a word is encountered which is not in the MnemonicCode's word list.
     ;;
    #_public
    #_static
    (§ class MnemonicWordException (§ extends MnemonicException)
        ;;; Contains the word that was not found in the word list. ;;
        #_public
        (§ field #_"String" :bad-word)

        #_public
        (§ constructor MnemonicWordException [#_"String" __badWord]
            (§ super )
            (§ assoc this :bad-word __badWord)
            this
        )
    )
)

;;;
 ; This is a clean-room implementation of PBKDF2 using RFC 2898 as a reference.
 ;
 ; RFC 2898: http://tools.ietf.org/html/rfc2898#section-5.2
 ;
 ; This code passes all RFC 6070 test vectors: http://tools.ietf.org/html/rfc6070
 ;
 ; http://cryptofreek.org/2012/11/29/pbkdf2-pure-java-implementation/
 ; Modified to use SHA-512 - Ken Sedgwick ken@bonsai.com
 ;;
#_public
(§ class PBKDF2SHA512
    #_public
    #_static
    (§ defn #_"byte[]" PBKDF2SHA512'derive [#_"String" __P, #_"String" __S, #_"int" c, #_"int" __dkLen]
        (let [#_"ByteArrayOutputStream" baos (ByteArrayOutputStream.)]

            (try
                (let [#_"int" __hLen 20]

                    (when (< (* (dec (Math/pow 2, 32)) __hLen) __dkLen)
                        (throw (IllegalArgumentException. "derived key too long"))
                    )

                    (let [#_"int" l (int (Math/ceil (/ (double __dkLen) (double __hLen))))]
                    ;; int r = dkLen - (l - 1) * hLen;

                        (loop-when-recur [#_"int" i 1] (<= i l) [(inc i)]
                            (let [#_"byte[]" __T (PBKDF2SHA512'F __P, __S, c, i)]
                                (.. baos (write __T))
                            )
                        )
                    )
                )
                (catch Exception e
                    (throw (RuntimeException. e))
                )
            )

            (let [#_"byte[]" __baDerived (byte-array __dkLen)]
                (System/arraycopy (.. baos (toByteArray)), 0, __baDerived, 0, (alength __baDerived))

                __baDerived
            )
        )
    )

    #_private
    #_static
    #_throws #_[ "Exception" ]
    (§ defn- #_"byte[]" PBKDF2SHA512'F [#_"String" __P, #_"String" __S, #_"int" c, #_"int" i]
        (let [#_"byte[]" __U_LAST nil
              #_"byte[]" __U_XOR nil]

            (let [#_"SecretKeySpec" key (SecretKeySpec. (.. __P (getBytes "UTF-8")), "HmacSHA512")
                  #_"Mac" mac (Mac/getInstance (.. key (getAlgorithm)))]
                (.. mac (init key))

                (loop-when-recur [#_"int" j 0] (< j c) [(inc j)]
                    (cond (= j 0)
                        (do
                            (let [#_"byte[]" __baS (.. __S (getBytes "UTF-8"))
                                  #_"byte[]" __baI (PBKDF2SHA512'INT i)
                                  #_"byte[]" __baU (byte-array (+ (alength __baS) (alength __baI)))]

                                (System/arraycopy __baS, 0, __baU, 0, (alength __baS))
                                (System/arraycopy __baI, 0, __baU, (alength __baS), (alength __baI))

                                (§ ass __U_XOR (.. mac (doFinal __baU)))
                                (§ ass __U_LAST __U_XOR)
                                (.. mac (reset))
                            )
                        )
                        :else
                        (do
                            (let [#_"byte[]" __baU (.. mac (doFinal __U_LAST))]
                                (.. mac (reset))

                                (loop-when-recur [#_"int" k 0] (< k (alength __U_XOR)) [(inc k)]
                                    (aset __U_XOR k (byte (bit-xor (aget __U_XOR k) (aget __baU k))))
                                )

                                (§ ass __U_LAST __baU)
                            )
                        )
                    )
                )

                __U_XOR
            )
        )
    )

    #_private
    #_static
    (§ defn- #_"byte[]" PBKDF2SHA512'INT [#_"int" i]
        (let [#_"ByteBuffer" bb (ByteBuffer/allocate 4)]
            (.. bb (order ByteOrder/BIG_ENDIAN))
            (.. bb (putInt i))

            (.. bb (array))
        )
    )
)

;;;
 ; A TransactionSignature wraps an {@link ECKey.ECDSASignature} and adds methods for handling
 ; the additional SIGHASH mode byte that is used.
 ;;
#_public
(§ class TransactionSignature (§ extends ECDSASignature)
    ;;;
     ; A byte that controls which parts of a transaction are signed.  This is exposed because signatures
     ; parsed off the wire may have sighash flags that aren't "normal" serializations of the enum values.
     ; Because Bitcoin Core works via bit testing, we must not lose the exact value when round-tripping
     ; otherwise we'll fail to verify signature hashes.
     ;;
    #_public
    (§ field #_"int" :sighash-flags)

    ;;; Constructs a signature with the given components and SIGHASH_ALL. ;;
    #_public
    (§ constructor TransactionSignature [#_"BigInteger" r, #_"BigInteger" s]
        (§ this r, s, (:value SigHash'ALL))
        this
    )

    ;;; Constructs a signature with the given components and raw sighash flag bytes (needed for rule compatibility). ;;
    #_public
    (§ constructor TransactionSignature [#_"BigInteger" r, #_"BigInteger" s, #_"int" __sighashFlags]
        (§ super r, s)
        (§ assoc this :sighash-flags __sighashFlags)
        this
    )

    ;;; Constructs a transaction signature based on the ECDSA signature. ;;
    #_public
    (§ constructor TransactionSignature [#_"ECDSASignature" signature, #_"SigHash" mode, #_"boolean" anyone?]
        (§ super (:r signature), (:s signature))
        (§ assoc this :sighash-flags (TransactionSignature'calcSigHashValue mode, anyone?))
        this
    )

    ;;;
     ; Returns a dummy invalid signature whose R/S values are set such that they will take up the same number of
     ; encoded bytes as a real signature.  This can be useful when you want to fill out a transaction to be of
     ; the right size (e.g. for fee calculations) but don't have the requisite signing key yet and will fill out
     ; the real signature later.
     ;;
    #_public
    #_static
    (§ defn #_"TransactionSignature" TransactionSignature'dummy []
        (let [#_"BigInteger" val ECKey'HALF_CURVE_ORDER]
            (TransactionSignature. val, val)
        )
    )

    ;;; Calculates the byte used in the protocol to represent the combination of mode and anyoneCanPay. ;;
    #_public
    #_static
    (§ defn #_"int" TransactionSignature'calcSigHashValue [#_"SigHash" mode, #_"boolean" anyone?]
        ;; Enforce compatibility since this code was made before the SigHash enum was updated.
        (assert-argument (any = mode SigHash'ALL SigHash'NONE SigHash'SINGLE))

        (let [#_"int" __sighashFlags (:value mode)]
            (when anyone?
                (§ ass __sighashFlags (| __sighashFlags (:value SigHash'ANYONECANPAY)))
            )
            __sighashFlags
        )
    )

    ;;;
     ; Returns true if the given signature is has canonical encoding, and will thus be accepted as standard by
     ; Bitcoin Core.  DER and the SIGHASH encoding allow for quite some flexibility in how the same structures
     ; are encoded, and this can open up novel attacks in which a man in the middle takes a transaction and then
     ; changes its signature such that the transaction hash is different but it's still valid.  This can confuse
     ; wallets and generally violates people's mental model of how Bitcoin should work, thus non-canonical
     ; signatures are now not relayed by default.
     ;;
    #_public
    #_static
    (§ defn #_"boolean" TransactionSignature'isEncodingCanonical [#_"byte[]" signature]
        ;; See Bitcoin Core's IsCanonicalSignature, https://bitcointalk.org/index.php?topic=8392.msg127623#msg127623
        ;; A canonical signature exists of: <30> <total len> <02> <len R> <R> <02> <len S> <S> <hashtype>
        ;; Where R and S are not negative (their first byte has its highest bit not set), and not
        ;; excessively padded (do not start with a 0 byte, unless an otherwise negative number follows,
        ;; in which case a single 0 byte is necessary and even required).
        (and (<= 9 (alength signature) 73)
            ;; mask the byte to prevent sign-extension hurting us
            (let [#_"int" __hashType (& (& (aget signature (dec (alength signature))) 0xff) (bit-not (:value SigHash'ANYONECANPAY)))]
                (and (<= (:value SigHash'ALL) __hashType (:value SigHash'SINGLE))
                    ;; "wrong type"                      "wrong length marker"
                    (= (& 0xff (aget signature 0)) 0x30) (= (& 0xff (aget signature 1)) (- (alength signature) 3))
                    (let [#_"int" __lenR (& 0xff (aget signature 3))]
                        (and (< (+ 5 __lenR) (alength signature)) (not= __lenR 0)
                            (let [#_"int" __lenS (& 0xff (aget signature (+ 5 __lenR)))]
                                (and (= (+ __lenR __lenS 7) (alength signature)) (not= __lenS 0)
                                    ;; R value type mismatch          R value negative
                                    (= (aget signature (- 4 2)) 0x02) (not= (& 0x80 (aget signature 4)) 0x80)
                                    ;; R value excessively padded
                                    (or (<= __lenR 1) (not= (aget signature 4) 0x00) (= (& 0x80 (aget signature (+ 4 1))) 0x80))
                                    ;; S value type mismatch                  S value negative
                                    (= (aget signature (+ 6 __lenR -2)) 0x02) (not= (& 0x80 (aget signature (+ 6 __lenR))) 0x80)
                                    ;; S value excessively padded
                                    (or (<= __lenS 1) (not= (aget signature (+ 6 __lenR)) 0x00) (= (& 0x80 (aget signature (+ 6 __lenR 1))) 0x80))
                                )
                            )
                        )
                    )
                )
            )
        )
    )

    #_public
    (§ method #_"boolean" anyoneCanPay []
        (not= (& (:sighash-flags this) (:value SigHash'ANYONECANPAY)) 0)
    )

    #_public
    (§ method #_"SigHash" sigHashMode []
        (let [#_"int" mode (& (:sighash-flags this) 0x1f)]
            (condp = mode
                (:value SigHash'NONE)   SigHash'NONE
                (:value SigHash'SINGLE) SigHash'SINGLE
                                        SigHash'ALL
            )
        )
    )

    ;;;
     ; What we get back from the signer are the two components of a signature, r and s.  To get a flat byte stream
     ; of the type used by Bitcoin we have to encode them using DER encoding, which is just a way to pack the two
     ; components into a structure, and then we append a byte to the end for the sighash flags.
     ;;
    #_public
    (§ method #_"byte[]" encodeToBitcoin []
        (let [#_"ByteArrayOutputStream" baos (.. this (derByteStream))]
            (.. baos (write (:sighash-flags this)))
            (.. baos (toByteArray))
        )
    )

    #_override
    #_public
    (§ method #_"ECDSASignature" toCanonicalised []
        (TransactionSignature. (.. super (toCanonicalised)), (.. this (sigHashMode)), (.. this (anyoneCanPay)))
    )

    ;;;
     ; Returns a decoded signature.
     ;
     ; @param requireCanonicalEncoding if the encoding of the signature must be canonical.
     ; @throws RuntimeException if the signature is invalid or unparseable in some way.
     ; @deprecated use {@link #decodeFromBitcoin(byte[], boolean, boolean)} instead.
     ;;
    #_deprecated
    #_public
    #_static
    #_throws #_[ "VerificationException" ]
    (§ defn #_"TransactionSignature" TransactionSignature'decodeFromBitcoin [#_"byte[]" bytes, #_"boolean" __requireCanonicalEncoding]
        (TransactionSignature'decodeFromBitcoin bytes, __requireCanonicalEncoding, false)
    )

    ;;;
     ; Returns a decoded signature.
     ;
     ; @param requireCanonicalEncoding if the encoding of the signature must be canonical.
     ; @param requireCanonicalSValue if the S-value must be canonical (below half the order of the curve).
     ; @throws RuntimeException if the signature is invalid or unparseable in some way.
     ;;
    #_public
    #_static
    #_throws #_[ "VerificationException" ]
    (§ defn #_"TransactionSignature" TransactionSignature'decodeFromBitcoin [#_"byte[]" bytes, #_"boolean" __requireCanonicalEncoding, #_"boolean" __requireCanonicalSValue]
        ;; Bitcoin encoding is DER signature + sighash byte.
        (when (and __requireCanonicalEncoding (not (TransactionSignature'isEncodingCanonical bytes)))
            (throw (VerificationException. "Signature encoding is not canonical."))
        )

        (let [#_"ECDSASignature" sig]
            (try
                (§ ass sig (ECDSASignature'decodeFromDER bytes))
                (catch IllegalArgumentException e
                    (throw (VerificationException. "Could not decode DER", e))
                )
            )
            (when (and __requireCanonicalSValue (not (.. sig (isCanonical))))
                (throw (VerificationException. "S-value is not canonical."))
            )

            ;; In Bitcoin, any value of the final byte is valid, but not necessarily canonical.  See javadocs
            ;; for isEncodingCanonical to learn more about this.  So we must store the exact byte found.
            (TransactionSignature. (:r sig), (:s sig), (aget bytes (dec (alength bytes))))
        )
    )
)

#_(ns org.bitcoinj.kits
    (:import [com.google.common.collect *]
             [com.google.common.util.concurrent *]
             [java.io *]
             [java.net *]
             [java.nio.channels *]
             [java.util *]
             [java.util.concurrent *]
             [org.slf4j LoggerFactory Logger]
    )
)

;;;
 ; Utility class that wraps the boilerplate needed to set up a new SPV bitcoinj app.  Instantiate it with a directory
 ; and file prefix, optionally configure a few things, then use startAsync and optionally awaitRunning.  The object will
 ; construct and configure a {@link BlockChain}, {@link SPVBlockStore}, {@link Wallet} and {@link PeerGroup}.  Depending
 ; on the value of the blockingStartup property, startup will be considered complete once the block chain has fully
 ; synchronized, so it can take a while.
 ;
 ; To add listeners and modify the objects that are constructed, you can either do that by overriding the
 ; {@link #onSetupCompleted()} method (which will run on a background thread) and make your changes there,
 ; or by waiting for the service to start and then accessing the objects from wherever you want.  However, you cannot
 ; access the objects this class creates until startup is complete.
 ;
 ; The asynchronous design of this class may seem puzzling (just use {@link #awaitRunning()} if you don't want that).
 ; It is to make it easier to fit bitcoinj into GUI apps, which require a high degree of responsiveness on their main
 ; thread which handles all the animation and user interaction.  Even when blockingStart is false, initializing bitcoinj
 ; means doing potentially blocking file IO, generating keys and other potentially intensive operations.  By running it
 ; on a background thread, there's no risk of accidentally causing UI lag.
 ;
 ; Note that {@link #awaitRunning()} can throw an unchecked {@link IllegalStateException}
 ; if anything goes wrong during startup - you should probably handle it and use {@link Exception#getCause()} to figure
 ; out what went wrong more precisely.  Same thing if you just use the {@link #startAsync()} method.
 ;;
#_public
(§ class WalletAppKit (§ extends AbstractIdleService)
    #_protected
    #_static
    (def #_"Logger" WalletAppKit'log (LoggerFactory/getLogger WalletAppKit))

    #_protected
    (§ field #_"String" :file-prefix)
    #_protected
    (§ field #_"NetworkParameters" :params)
    #_protected
    #_volatile
    (§ field #_"BlockChain" :v-chain)
    #_protected
    #_volatile
    (§ field #_"BlockStore" :v-store)
    #_protected
    #_volatile
    (§ field #_"Wallet" :v-wallet)
    #_protected
    #_volatile
    (§ field #_"PeerGroup" :v-peer-group)

    #_protected
    (§ field #_"File" :directory)
    #_protected
    #_volatile
    (§ field #_"File" :v-wallet-file)

    #_protected
    (§ field #_"boolean" :use-auto-save true)
    #_protected
    (§ field #_"PeerAddress[]" :peer-addresses)
    #_protected
    (§ field #_"DownloadProgressTracker" :download-listener)
    #_protected
    (§ field #_"boolean" :auto-stop true)
    #_protected
    (§ field #_"String[]" :textual-checkpoints)
    #_protected
    (§ field #_"boolean" :blocking-startup true)
    #_protected
    (§ field #_"String" :user-agent)
    #_protected
    (§ field #_"String" :version)
    #_nilable
    #_protected
    (§ field #_"PeerDiscovery" :discovery)

    #_protected
    #_volatile
    (§ field #_"Context" :context)

    ;;;
     ; Creates a new WalletAppKit, with a newly created {@link Context}.  Files will be stored in the given directory.
     ;;
    #_public
    (§ constructor WalletAppKit [#_"NetworkParameters" params, #_"File" directory, #_"String" __filePrefix]
        (§ this (Context. params), directory, __filePrefix)
        this
    )

    ;;;
     ; Creates a new WalletAppKit, with the given {@link Context}.  Files will be stored in the given directory.
     ;;
    #_public
    (§ constructor WalletAppKit [#_"Context" context, #_"File" directory, #_"String" __filePrefix]
        (§ assoc this :context context)
        (§ assoc this :params (ensure some? (.. context (getParams))))
        (§ assoc this :directory (ensure some? directory))
        (§ assoc this :file-prefix (ensure some? __filePrefix))
        this
    )

    ;;; Will only connect to the given addresses.  Cannot be called after startup. ;;
    #_public
    (§ method #_"WalletAppKit" setPeerNodes [#_"PeerAddress..." addresses]
        (assert-state (= (state) KeyChainState'NEW), "Cannot call after startup")
        (§ assoc this :peer-addresses addresses)
        this
    )

    ;;; Will only connect to localhost.  Cannot be called after startup. ;;
    #_public
    (§ method #_"WalletAppKit" connectToLocalHost []
        (try
            (let [#_"InetAddress" __localHost (InetAddress/getLocalHost)]
                (.. this (setPeerNodes (PeerAddress. (:params this), __localHost, (-> this :params :port))))
            )
            (catch UnknownHostException e
                ;; Borked machine with no loopback adapter configured properly.
                (throw (RuntimeException. e))
            )
        )
    )

    ;;; If true, the wallet will save itself to disk automatically whenever it changes. ;;
    #_public
    (§ method #_"WalletAppKit" setAutoSave [#_"boolean" value]
        (assert-state (= (state) KeyChainState'NEW), "Cannot call after startup")
        (§ assoc this :use-auto-save value)
        this
    )

    ;;;
     ; If you want to learn about the sync process, you can provide a listener here.  For instance,
     ; a {@link DownloadProgressTracker} is a good choice.  This has no effect unless
     ; setBlockingStartup(false) has been called too, due to some missing implementation code.
     ;;
    #_public
    (§ method #_"WalletAppKit" setDownloadListener [#_"DownloadProgressTracker" listener]
        (§ assoc this :download-listener listener)
        this
    )

    ;;; If true, will register a shutdown hook to stop the library.  Defaults to true. ;;
    #_public
    (§ method #_"WalletAppKit" setAutoStop [#_"boolean" __autoStop]
        (§ assoc this :auto-stop __autoStop)
        this
    )

    ;;;
     ; If set, the file is expected to contain a checkpoints file calculated with BuildCheckpoints.
     ; It makes initial block sync faster for new users - please refer to the documentation on the
     ; bitcoinj website (https://bitcoinj.github.io/speeding-up-chain-sync) for further details.
     ;;
    #_public
    (§ method #_"WalletAppKit" setCheckpoints [#_"String[]" checkpoints]
        (§ assoc this :textual-checkpoints (ensure some? checkpoints))
        this
    )

    ;;;
     ; If true (the default) then the startup of this service won't be considered complete until the network has been
     ; brought up, peer connections established and the block chain synchronised.  Therefore {@link #awaitRunning()} can
     ; potentially take a very long time.  If false, then startup is considered complete once the network activity
     ; begins and peer connections/block chain sync will continue in the background.
     ;;
    #_public
    (§ method #_"WalletAppKit" setBlockingStartup [#_"boolean" __blockingStartup]
        (§ assoc this :blocking-startup __blockingStartup)
        this
    )

    ;;;
     ; Sets the string that will appear in the subver field of the version message.
     ;
     ; @param userAgent A short string that should be the name of your app, e.g. "My Wallet".
     ; @param version A short string that contains the version number, e.g. "1.0-BETA".
     ;;
    #_public
    (§ method #_"WalletAppKit" setUserAgent [#_"String" __userAgent, #_"String" version]
        (§ assoc this :user-agent (ensure some? __userAgent))
        (§ assoc this :version (ensure some? version))
        this
    )

    ;;;
     ; Sets the peer discovery class to use.  If none is provided then DNS is used, which is a reasonable default.
     ;;
    #_public
    (§ method #_"WalletAppKit" setDiscovery [#_nilable #_"PeerDiscovery" discovery]
        (§ assoc this :discovery discovery)
        this
    )

    ;;;
     ; Override this to use a {@link BlockStore} that isn't the default of {@link SPVBlockStore}.
     ;;
    #_protected
    #_throws #_[ "BlockStoreException" ]
    (§ method #_"BlockStore" provideBlockStore [#_"File" file]
        (SPVBlockStore. (:params this), file)
    )

    ;;;
     ; This method is invoked on a background thread after all objects are initialised, but before the peer group
     ; or block chain download is started.  You can tweak the objects configuration here.
     ;;
    #_protected
    (§ method #_"void" onSetupCompleted []
        nil
    )

    #_override
    #_protected
    #_throws #_[ "Exception" ]
    (§ method #_"void" startUp []
        ;; Runs in a separate thread.
        (Context'propagate (:context this))
        (when (and (not (.. (:directory this) (exists))) (not (.. (:directory this) (mkdirs))))
            (throw (IOException. (str "Could not create directory " (.. (:directory this) (getAbsolutePath)))))
        )

        (.. WalletAppKit'log (info "Starting up with directory = {}", (:directory this)))
        (try
            (let [#_"File" __chainFile (File. (:directory this), (str (:file-prefix this) ".spvchain"))
                  #_"boolean" __chainFileExists (.. __chainFile (exists))]
                (§ assoc this :v-wallet-file (File. (:directory this), (str (:file-prefix this) ".wallet")))
                (let [#_"boolean" replay? (and (.. (:v-wallet-file this) (exists)) (not __chainFileExists))]
                    (§ assoc this :v-wallet (.. this (createOrLoadWallet replay?)))

                    ;; Initiate Bitcoin network objects (block store, blockchain and peer group).
                    (§ assoc this :v-store (.. this (provideBlockStore __chainFile)))
                    (when (not __chainFileExists)
                        (when (nil? (:textual-checkpoints this))
                            (§ assoc this :textual-checkpoints (-> this :params :textual-checkpoints))
                        )

                        (cond (some? (:textual-checkpoints this))
                            (do
                                ;; Initialize the chain file with a checkpoint to speed up first-run sync.
                                (let [#_"long" time (.. (:v-wallet this) (getEarliestKeyCreationTime))]
                                    (if (< 0 time)
                                        (CheckpointManager'checkpoint (:params this), (:textual-checkpoints this), (:v-store this), time)
                                        (.. WalletAppKit'log (warn "Creating a new uncheckpointed block store due to a wallet with a creation time of zero: this will result in a very slow chain sync"))
                                    )
                                )
                            )
                            __chainFileExists
                            (do
                                (.. WalletAppKit'log (info "Deleting the chain file in preparation from restore."))
                                (.. (:v-store this) (close))
                                (when (not (.. __chainFile (delete)))
                                    (throw (IOException. "Failed to delete chain file in preparation for restore."))
                                )

                                (§ assoc this :v-store (SPVBlockStore. (:params this), __chainFile))
                            )
                        )
                    )
                    (§ assoc this :v-chain (BlockChain. (:params this), (:v-store this)))
                    (§ assoc this :v-peer-group (.. this (createPeerGroup)))
                    (when (some? (:user-agent this))
                        (.. (:v-peer-group this) (setUserAgent (:user-agent this), (:version this)))
                    )

                    ;; Set up peer addresses or discovery first, so if wallet extensions try to broadcast a transaction
                    ;; before we're actually connected the broadcast waits for an appropriate number of connections.
                    (cond (some? (:peer-addresses this))
                        (do
                            (doseq [#_"PeerAddress" addr (:peer-addresses this)]
                                (.. (:v-peer-group this) (addAddress addr))
                            )
                            (.. (:v-peer-group this) (setMaxConnections (alength (:peer-addresses this))))
                            (§ assoc this :peer-addresses nil)
                        )
                        :else
                        (do
                            (.. (:v-peer-group this) (addPeerDiscovery (or (:discovery this) (DnsDiscovery. (:params this)))))
                        )
                    )
                    (.. (:v-chain this) (addWallet (:v-wallet this)))
                    (.. (:v-peer-group this) (addWallet (:v-wallet this)))
                    (.. this (onSetupCompleted))

                    (cond (:blocking-startup this)
                        (do
                            (.. (:v-peer-group this) (start))
                            ;; Make sure we shut down cleanly.
                            (.. this (installShutdownHook))

                            ;; TODO: Be able to use the provided download listener when doing a blocking startup.
                            (let [#_"DownloadProgressTracker" listener (DownloadProgressTracker.)]
                                (.. (:v-peer-group this) (startBlockChainDownload listener))
                                (.. listener (await))
                            )
                        )
                        :else
                        (do
                            (Futures/addCallback (.. (:v-peer-group this) (startAsync)), (FutureCallback.)
                            (§ anon
                                #_override
                                #_public
                                (§ method #_"void" onSuccess [#_nilable #_"Object" result]
                                    (let [#_"DownloadProgressTracker" l (or (:download-listener this) (DownloadProgressTracker.))]
                                        (.. (:v-peer-group this) (startBlockChainDownload l))
                                    )
                                    nil
                                )

                                #_override
                                #_public
                                (§ method #_"void" onFailure [#_"Throwable" t]
                                    (throw (RuntimeException. t))
                                )
                            ))
                        )
                    )
                )
            )
            (catch BlockStoreException e
                (throw (IOException. e))
            )
        )
        nil
    )

    #_private
    #_throws #_[ "Exception" ]
    (§ method- #_"Wallet" createOrLoadWallet [#_"boolean" replay?]
        (let [#_"Wallet" wallet]

            (cond (.. (:v-wallet-file this) (exists))
                (do
                    (§ ass wallet (.. this (loadWallet replay?)))
                )
                :else
                (do
                    (§ ass wallet (.. this (createWallet)))
                    (.. wallet (freshReceiveKey))
                )
            )

            (when (:use-auto-save this)
                (.. this (setupAutoSave wallet))
            )

            wallet
        )
    )

    #_protected
    (§ method #_"void" setupAutoSave [#_"Wallet" wallet]
        (.. wallet (autosaveToFile (:v-wallet-file this), 5, TimeUnit/SECONDS, nil))
        nil
    )

    #_private
    #_throws #_[ "Exception" ]
    (§ method- #_"Wallet" loadWallet [#_"boolean" replay?]
        (let [#_"Wallet" wallet
              #_"FileInputStream" __walletStream (FileInputStream. (:v-wallet-file this))]
            (try
                (let [#_"Protos.Wallet" proto (WalletSerializer'parseToProto __walletStream)]
                    (§ ass wallet (.. (WalletSerializer.) (readWallet (:params this), proto)))
                    (when replay?
                        (.. wallet (reset))
                    )
                )
                (finally
                    (.. __walletStream (close))
                )
            )
            wallet
        )
    )

    #_protected
    (§ method #_"Wallet" createWallet []
        (Wallet. (:params this), (KeyChainGroup. (:params this)))
    )

    #_protected
    #_throws #_[ "TimeoutException" ]
    (§ method #_"PeerGroup" createPeerGroup []
        (PeerGroup. (:params this), (:v-chain this))
    )

    #_private
    (§ method- #_"void" installShutdownHook []
        (when (:auto-stop this)
            (.. (Runtime/getRuntime) (addShutdownHook (Thread.)
            (§ anon
                #_override
                #_public
                (§ method #_"void" run []
                    (try
                        (.. (§ dhis WalletAppKit) (stopAsync))
                        (.. (§ dhis WalletAppKit) (awaitTerminated))
                        (catch Exception e
                            (throw (RuntimeException. e))
                        )
                    )
                    nil
                )
            )))
        )
        nil
    )

    #_override
    #_protected
    #_throws #_[ "Exception" ]
    (§ method #_"void" shutDown []
        ;; Runs in a separate thread.
        (try
            (Context'propagate (:context this))
            (.. (:v-peer-group this) (stop))
            (.. (:v-wallet this) (saveToFile (:v-wallet-file this)))
            (.. (:v-store this) (close))

            (§ assoc this :v-peer-group nil)
            (§ assoc this :v-wallet nil)
            (§ assoc this :v-store nil)
            (§ assoc this :v-chain nil)
            (catch BlockStoreException e
                (throw (IOException. e))
            )
        )
        nil
    )

    #_public
    (§ method #_"NetworkParameters" params []
        (:params this)
    )

    #_public
    (§ method #_"BlockChain" chain []
        (assert-state (any = (state) KeyChainState'STARTING KeyChainState'RUNNING), "Cannot call until startup is complete")
        (:v-chain this)
    )

    #_public
    (§ method #_"BlockStore" store []
        (assert-state (any = (state) KeyChainState'STARTING KeyChainState'RUNNING), "Cannot call until startup is complete")
        (:v-store this)
    )

    #_public
    (§ method #_"Wallet" wallet []
        (assert-state (any = (state) KeyChainState'STARTING KeyChainState'RUNNING), "Cannot call until startup is complete")
        (:v-wallet this)
    )

    #_public
    (§ method #_"PeerGroup" peerGroup []
        (assert-state (any = (state) KeyChainState'STARTING KeyChainState'RUNNING), "Cannot call until startup is complete")
        (:v-peer-group this)
    )

    #_public
    (§ method #_"File" directory []
        (:directory this)
    )
)

#_(ns org.bitcoinj.net
    (:import [com.google.common.base Throwables]
             [com.google.common.collect ImmutableList Lists]
             [com.google.common.util.concurrent AbstractExecutionThreadService AbstractIdleService ListenableFuture Service]
             [com.google.protobuf ByteString MessageLite]
             [java.io IOException]
             [java.net ConnectException InetAddress InetSocketAddress SocketAddress]
             [java.nio ByteBuffer ByteOrder]
             [java.nio.channels CancelledKeyException SelectionKey SocketChannel]
             [java.nio.channels.spi SelectorProvider]
             [java.util Arrays Collections HashSet Iterator LinkedList Set TimerTask Timer]
             [java.util.concurrent.atomic AtomicReference]
             [java.util.concurrent.locks ReentrantLock]
             [javax.net SocketFactory]
             [org.slf4j LoggerFactory Logger]
    )
)

;;;
 ; A base class which provides basic support for socket timeouts.  It is used instead of integrating timeouts into the
 ; NIO select thread both for simplicity and to keep code shared between NIO and blocking sockets as much as possible.
 ;;
#_public
#_abstract
(§ class AbstractTimeoutHandler
    ;; TimerTask and timeout value which are added to a timer to kill the connection on timeout.
    #_private
    (§ field- #_"TimerTask" :timeout-task)
    #_private
    (§ field- #_"long" :timeout-millis 0)
    #_private
    (§ field- #_"boolean" :timeout-enabled true)

    ;; A timer which manages expiring channels as their timeouts occur (if configured).
    #_private
    #_static
    (def- #_"Timer" AbstractTimeoutHandler'TIMEOUT_TIMER (Timer. "AbstractTimeoutHandler timeouts", true))

    ;;;
     ; Enables or disables the timeout entirely.  This may be useful if you want to store the timeout value
     ; but wish to temporarily disable/enable timeouts.
     ;
     ; The default is for timeoutEnabled to be true but timeoutMillis to be set to 0 (i.e. disabled).
     ;
     ; This call will reset the current progress towards the timeout.
     ;;
    #_public
    #_synchronized
    (§ method #_"void" setTimeoutEnabled [#_"boolean" __timeoutEnabled]
        (§ assoc this :timeout-enabled __timeoutEnabled)
        (.. this (resetTimeout))
        nil
    )

    ;;;
     ; Sets the receive timeout to the given number of milliseconds, automatically killing the connection
     ; if no messages are received for this long.
     ;
     ; A timeout of 0 is interpreted as no timeout.
     ;
     ; The default is for timeoutEnabled to be true but timeoutMillis to be set to 0 (i.e. disabled).
     ;
     ; This call will reset the current progress towards the timeout.
     ;;
    #_public
    #_synchronized
    (§ method #_"void" setSocketTimeout [#_"int" __timeoutMillis]
        (§ assoc this :timeout-millis __timeoutMillis)
        (.. this (resetTimeout))
        nil
    )

    ;;;
     ; Resets the current progress towards timeout to 0.
     ;;
    #_protected
    #_synchronized
    (§ method #_"void" resetTimeout []
        (when (some? (:timeout-task this))
            (.. (:timeout-task this) (cancel))
        )
        (when (and (not= (:timeout-millis this) 0) (:timeout-enabled this))
            (§ assoc this :timeout-task (TimerTask.
            (§ anon
                #_override
                #_public
                (§ method #_"void" run []
                    (.. this (timeoutOccurred))
                    nil
                )
            )))
            (.. AbstractTimeoutHandler'TIMEOUT_TIMER (schedule (:timeout-task this), (:timeout-millis this)))
        )
        nil
    )

    #_protected
    #_abstract
    (§ method #_"void" timeoutOccurred [])
)

;;;
 ; Creates a simple connection to a server using a {@link StreamConnection} to process data.
 ;
 ; Generally, using {@link NioClient} and {@link NioClientManager} should be preferred over {@link BlockingClient}
 ; and {@link BlockingClientManager}, unless you wish to connect over a proxy or use some other network settings that
 ; cannot be set using NIO.
 ;;
#_public
(§ class BlockingClient (§ implements MessageWriteTarget)
    #_private
    #_static
    (def- #_"Logger" BlockingClient'log (LoggerFactory/getLogger BlockingClient))

    #_private
    #_static
    (def- #_"int" BlockingClient'BUFFER_SIZE_LOWER_BOUND 4096)
    #_private
    #_static
    (def- #_"int" BlockingClient'BUFFER_SIZE_UPPER_BOUND 65536)

    #_private
    (§ field- #_"Socket" :socket)
    #_private
    #_volatile
    (§ field- #_"boolean" :v-close-requested false)
    #_private
    (§ field- #_"SettableFuture<SocketAddress>" :connect-future)

    ;;;
     ; Creates a new client to the given server address using the given {@link StreamConnection} to decode the data.
     ; The given connection <b>MUST</b> be unique to this object.  This does not block while waiting for the connection
     ; to open, but will call either the {@link StreamConnection#connectionOpened()} or
     ; {@link StreamConnection#connectionClosed()} callback on the created network event processing thread.
     ;
     ; @param connectTimeoutMillis The connect timeout set on the connection (in milliseconds).
     ;                             0 is interpreted as no timeout.
     ; @param socketFactory An object that creates {@link Socket} objects on demand, which may be customised to control
     ;                      how this client connects to the internet.  If not sure, use SocketFactory.getDefault().
     ; @param clientSet A set which this object will add itself to after initialization, and then remove itself from.
     ;;
    #_public
    #_throws #_[ "IOException" ]
    (§ constructor BlockingClient [#_"SocketAddress" __serverAddress, #_"StreamConnection" connection, #_"int" __connectTimeoutMillis, #_"SocketFactory" __socketFactory, #_nilable #_"Set<BlockingClient>" __clientSet]
        (§ assoc this :connect-future (SettableFuture/create))
        ;; Try to fit at least one message in the network buffer, but place an upper and lower limit on its size to make
        ;; sure it doesnt get too large or have to call read too often.
        (.. connection (setWriteTarget this))
        (§ assoc this :socket (.. __socketFactory (createSocket)))
        (let [#_"Context" context (Context'get)]
            (let [#_"Thread" t (Thread.)
                (§ anon
                    #_override
                    #_public
                    (§ method #_"void" run []
                        (Context'propagate context)
                        (when (some? __clientSet)
                            (.. __clientSet (add (§ dhis BlockingClient)))
                        )
                        (try
                            (.. (:socket this) (connect __serverAddress, __connectTimeoutMillis))
                            (.. connection (connectionOpened))
                            (.. (:connect-future this) (set __serverAddress))
                            (let [#_"InputStream" stream (.. (:socket this) (getInputStream))]
                                (BlockingClient'runReadLoop stream, connection)
                            )
                            (catch Exception e
                                (when (not (:v-close-requested this))
                                    (.. BlockingClient'log (error "Error trying to open/read from connection: {}: {}", __serverAddress, (.. e (getMessage))))
                                    (.. (:connect-future this) (setException e))
                                )
                            )
                            (finally
                                (try
                                    (.. (:socket this) (close))
                                    (catch IOException e1
                                        ;; At this point there isn't much we can do, and we can probably assume the channel is closed.
                                    )
                                )
                                (when (some? __clientSet)
                                    (.. __clientSet (remove (§ dhis BlockingClient)))
                                )
                                (.. connection (connectionClosed))
                            )
                        )
                        nil
                    )
                )]
                (.. t (setName (str "BlockingClient network thread for " __serverAddress)))
                (.. t (setDaemon true))
                (.. t (start))
                this
            )
        )
    )

    ;;;
     ; A blocking call that never returns, except by throwing an exception.  It reads bytes from the input stream
     ; and feeds them to the provided {@link StreamConnection}, for example, a {@link Peer}.
     ;;
    #_public
    #_static
    #_throws #_[ "Exception" ]
    (§ defn #_"void" BlockingClient'runReadLoop [#_"InputStream" stream, #_"StreamConnection" connection]
        (let [#_"ByteBuffer" dbuf (ByteBuffer/allocateDirect (min (max (.. connection (getMaxMessageSize)), BlockingClient'BUFFER_SIZE_LOWER_BOUND), BlockingClient'BUFFER_SIZE_UPPER_BOUND))
              #_"byte[]" __readBuff (byte-array (.. dbuf (capacity)))]
            (loop []
                ;; TODO: Kill the message duplication here.
                (assert-state (and (< 0 (.. dbuf (remaining))) (<= (.. dbuf (remaining)) (alength __readBuff))))
                (let [#_"int" read (.. stream (read __readBuff, 0, (max 1, (min (.. dbuf (remaining)), (.. stream (available))))))]
                    (when (= read -1)
                        (§ return nil)
                    )

                    (.. dbuf (put __readBuff, 0, read))
                    ;; "flip" the buffer - setting the limit to the current position and setting position to 0
                    (.. dbuf (flip))
                    ;; Use connection.receiveBytes's return value as a double-check that it stopped reading at the right location.
                    (let [#_"int" __bytesConsumed (.. connection (receiveBytes dbuf))]
                        (assert-state (= (.. dbuf (position)) __bytesConsumed))
                        ;; Now drop the bytes which were read by compacting dbuf (resetting limit and keeping relative position).
                        (.. dbuf (compact))
                    )
                )
            )
        )
        nil
    )

    ;;;
     ; Closes the connection to the server, triggering the {@link StreamConnection#connectionClosed()}
     ; event on the network-handling thread where all callbacks occur.
     ;;
    #_override
    #_public
    (§ method #_"void" closeConnection []
        ;; Closes the channel, triggering an exception in the network-handling thread triggering connectionClosed().
        (try
            (§ assoc this :v-close-requested true)
            (.. (:socket this) (close))
            (catch IOException e
                (throw (RuntimeException. e))
            )
        )
        nil
    )

    #_override
    #_public
    #_synchronized
    #_throws #_[ "IOException" ]
    (§ method #_"void" writeBytes [#_"byte[]" message]
        (try
            (let [#_"OutputStream" stream (.. (:socket this) (getOutputStream))]
                (.. stream (write message))
                (.. stream (flush))
            )
            (catch IOException e
                (.. BlockingClient'log (error "Error writing message to connection, closing connection", e))
                (.. this (closeConnection))
                (throw e)
            )
        )
        nil
    )

    ;;; Returns a future that completes once connection has occurred at the socket level or with an exception if failed to connect. ;;
    #_public
    (§ method #_"ListenableFuture<SocketAddress>" getConnectFuture []
        (:connect-future this)
    )
)

;;;
 ; A thin wrapper around a set of {@link BlockingClient}s.
 ;
 ; Generally, using {@link NioClient} and {@link NioClientManager} should be preferred over {@link BlockingClient}
 ; and {@link BlockingClientManager} as they scale significantly better, unless you wish to connect over a proxy or use
 ; some other network settings that cannot be set using NIO.
 ;;
#_public
(§ class BlockingClientManager (§ extends AbstractIdleService) (§ implements ClientConnectionManager)
    #_private
    (§ field- #_"SocketFactory" :socket-factory)
    #_private
    (§ field- #_"Set<BlockingClient>" :clients (Collections/synchronizedSet (HashSet. #_"<BlockingClient>")))

    #_private
    (§ field- #_"int" :connect-timeout-millis 1000)

    #_public
    (§ constructor BlockingClientManager []
        (§ assoc this :socket-factory (SocketFactory/getDefault))
        this
    )

    ;;;
     ; Creates a blocking client manager that will obtain sockets from the given factory.
     ; Useful for customising how bitcoinj connects to the P2P network.
     ;;
    #_public
    (§ constructor BlockingClientManager [#_"SocketFactory" __socketFactory]
        (§ assoc this :socket-factory (ensure some? __socketFactory))
        this
    )

    #_override
    #_public
    (§ method #_"ListenableFuture<SocketAddress>" openConnection [#_"SocketAddress" __serverAddress, #_"StreamConnection" connection]
        (try
            (when (not (.. this (isRunning)))
                (throw (IllegalStateException.))
            )

            (.. (BlockingClient. __serverAddress, connection, (:connect-timeout-millis this), (:socket-factory this), (:clients this)) (getConnectFuture))
            (catch IOException e
                (throw (RuntimeException. e)) ;; This should only happen if we are, e.g. out of system resources.
            )
        )
    )

    ;;; Sets the number of milliseconds to wait before giving up on a connect attempt. ;;
    #_public
    (§ method #_"void" setConnectTimeoutMillis [#_"int" __connectTimeoutMillis]
        (§ assoc this :connect-timeout-millis __connectTimeoutMillis)
        nil
    )

    #_override
    #_protected
    #_throws #_[ "Exception" ]
    (§ method #_"void" startUp []
        nil
    )

    #_override
    #_protected
    #_throws #_[ "Exception" ]
    (§ method #_"void" shutDown []
        (§ sync (:clients this)
            (doseq [#_"BlockingClient" client (:clients this)]
                (.. client (closeConnection))
            )
        )
        nil
    )

    #_override
    #_public
    (§ method #_"int" getConnectedClientCount []
        (.. (:clients this) (size))
    )

    #_override
    #_public
    (§ method #_"void" closeConnections [#_"int" n]
        (when (not (.. this (isRunning)))
            (throw (IllegalStateException.))
        )

        (§ sync (:clients this)
            (loop-when-recur [#_"Iterator<BlockingClient>" it (.. (:clients this) (iterator))] (and (< 0 n) (.. it (hasNext))) [(§ ass n (dec n))]
                (.. it (next) (closeConnection))
            )
        )
        nil
    )
)

;;;
 ; A generic interface for an object which keeps track of a set of open client connections, creates new ones and
 ; ensures they are serviced properly.
 ;
 ; When the service is {@link com.google.common.util.concurrent.Service#stop()}ed, all connections will be closed
 ; and the appropriate connectionClosed() calls must be made.
 ;;
#_public
(§ interface ClientConnectionManager (§ extends Service)
    ;;;
     ; Creates a new connection to the given address, with the given connection used to handle incoming data.  Any errors
     ; that occur during connection will be returned in the given future, including errors that can occur immediately.
     ;;
    (§ method #_"ListenableFuture<SocketAddress>" openConnection [#_"SocketAddress" __serverAddress, #_"StreamConnection" connection])

    ;;; Gets the number of connected peers. ;;
    (§ method #_"int" getConnectedClientCount [])

    ;;; Closes n peer connections. ;;
    (§ method #_"void" closeConnections [#_"int" n])
)

;; TODO: The locking in all this class is horrible and not really necessary.  We should just run all network stuff on one thread.

;;;
 ; A simple NIO MessageWriteTarget which handles all the business logic of a connection (reading+writing bytes).
 ; Used only by the NioClient and NioServer classes.
 ;;
(§ class ConnectionHandler (§ implements MessageWriteTarget)
    #_private
    #_static
    (def- #_"Logger" ConnectionHandler'log (LoggerFactory/getLogger ConnectionHandler))

    #_private
    #_static
    (def- #_"int" ConnectionHandler'BUFFER_SIZE_LOWER_BOUND 4096)
    #_private
    #_static
    (def- #_"int" ConnectionHandler'BUFFER_SIZE_UPPER_BOUND 65536)

    #_private
    #_static
    (def- #_"int" ConnectionHandler'OUTBOUND_BUFFER_BYTE_COUNT (+ Message'MAX_SIZE 24)) ;; 24 byte message header

    ;; We lock when touching local flags and when writing data, but NEVER when calling any methods which leave
    ;; this class into non-Java classes.
    #_private
    (§ field- #_"ReentrantLock" :lock (Threading'lock "nioConnectionHandler"))
    #_private
    (§ field- #_"ByteBuffer" :read-buff)
    #_private
    (§ field- #_"SocketChannel" :channel)
    #_private
    (§ field- #_"SelectionKey" :key)
    (§ field #_"StreamConnection" :connection)
    #_private
    (§ field- #_"boolean" :close-called false)

    #_private
    (§ field- #_"long" :bytes-to-write-remaining 0)
    #_private
    (§ field- #_"LinkedList<ByteBuffer>" :bytes-to-write (LinkedList. #_"<>"))

    #_private
    (§ field- #_"Set<ConnectionHandler>" :connected-handlers)

    #_public
    #_throws #_[ "IOException" ]
    (§ constructor ConnectionHandler [#_"StreamConnectionFactory" factory, #_"SelectionKey" key]
        (§ this (.. factory (getNewConnection (.. (cast SocketChannel (.. key (channel))) (socket) (getInetAddress)), (.. (cast SocketChannel (.. key (channel))) (socket) (getPort)))), key)
        (when (nil? (:connection this))
            (throw (IOException. "Parser factory.getNewConnection returned nil"))
        )
        this
    )

    #_private
    (§ constructor- ConnectionHandler [#_nilable #_"StreamConnection" connection, #_"SelectionKey" key]
        (§ assoc this :key key)
        (§ assoc this :channel (ensure some? (cast SocketChannel (.. key (channel)))))
        (when (some? connection)
            (§ assoc this :connection connection)
            (§ assoc this :read-buff (ByteBuffer/allocateDirect (min (max (.. connection (getMaxMessageSize)), ConnectionHandler'BUFFER_SIZE_LOWER_BOUND), ConnectionHandler'BUFFER_SIZE_UPPER_BOUND)))
            (.. connection (setWriteTarget this)) ;; May callback into us (e.g. closeConnection() now).
            (§ assoc this :connected-handlers nil)
        )
        this
    )

    #_public
    (§ constructor ConnectionHandler [#_"StreamConnection" connection, #_"SelectionKey" key, #_"Set<ConnectionHandler>" __connectedHandlers]
        (§ this (ensure some? connection), key)

        ;; closeConnection() may have already happened because we invoked the other c'tor above, which called
        ;; connection.setWriteTarget() which might have re-entered already.  In this case we shouldn't add ourselves
        ;; to the connectedHandlers set.
        (.. (:lock this) (lock))
        (try
            (§ assoc this :connected-handlers __connectedHandlers)
            (when (not (:close-called this))
                (assert-state (.. (:connected-handlers this) (add this)))
            )
            (finally
                (.. (:lock this) (unlock))
            )
        )
        this
    )

    #_private
    (§ method- #_"void" setWriteOps []
        ;; Make sure we are registered to get updated when writing is available again.
        (.. (:key this) (interestOps (| (.. (:key this) (interestOps)) SelectionKey/OP_WRITE)))
        ;; Refresh the selector to make sure it gets the new interestOps.
        (.. (:key this) (selector) (wakeup))
        nil
    )

    ;; Tries to write any outstanding write bytes, runs in any thread (possibly unlocked).
    #_private
    #_throws #_[ "IOException" ]
    (§ method- #_"void" tryWriteBytes []
        (.. (:lock this) (lock))
        (try
            ;; Iterate through the outbound ByteBuff queue, pushing as much as possible into the OS' network buffer.
            (let [#_"Iterator<ByteBuffer>" __bytesIterator (.. (:bytes-to-write this) (iterator))]
                (while (.. __bytesIterator (hasNext))
                    (let [#_"ByteBuffer" buff (.. __bytesIterator (next))]
                        (§ assoc this :bytes-to-write-remaining (- (:bytes-to-write-remaining this) (.. (:channel this) (write buff))))
                        (cond (not (.. buff (hasRemaining)))
                            (do
                                (.. __bytesIterator (remove))
                            )
                            :else
                            (do
                                (.. this (setWriteOps))
                                (§ break )
                            )
                        )
                    )
                )
                ;; If we are done writing, clear the OP_WRITE interestOps.
                (when (.. (:bytes-to-write this) (isEmpty))
                    (.. (:key this) (interestOps (& (.. (:key this) (interestOps)) (bit-not SelectionKey/OP_WRITE))))
                )
                ;; Don't bother waking up the selector here, since we're just removing an op, not adding.
            )
            (finally
                (.. (:lock this) (unlock))
            )
        )
        nil
    )

    #_override
    #_public
    #_throws #_[ "IOException" ]
    (§ method #_"void" writeBytes [#_"byte[]" message]
        (let [#_"boolean" __andUnlock true]
            (.. (:lock this) (lock))
            (try
                ;; Network buffers are not unlimited (and are often smaller than some messages we may wish to send), and
                ;; thus we have to buffer outbound messages sometimes.  To do this, we use a queue of ByteBuffers and just
                ;; append to it when we want to send a message.  We then let tryWriteBytes() either send the message or
                ;; register our SelectionKey to wakeup when we have free outbound buffer space available.
                (when (< ConnectionHandler'OUTBOUND_BUFFER_BYTE_COUNT (+ (:bytes-to-write-remaining this) (alength message)))
                    (throw (IOException. "Outbound buffer overflowed"))
                )

                ;; Just dump the message onto the write buffer and call tryWriteBytes.
                ;; TODO: Kill the needless message duplication when the write completes right away.
                (.. (:bytes-to-write this) (offer (ByteBuffer/wrap (Arrays/copyOf message, (alength message)))))
                (§ update this :bytes-to-write-remaining + (alength message))
                (.. this (setWriteOps))
                (catch IOException e
                    (.. (:lock this) (unlock))
                    (§ ass __andUnlock false)
                    (.. ConnectionHandler'log (warn "Error writing message to connection, closing connection", e))
                    (.. this (closeConnection))
                    (throw e)
                )
                (catch CancelledKeyException e
                    (.. (:lock this) (unlock))
                    (§ ass __andUnlock false)
                    (.. ConnectionHandler'log (warn "Error writing message to connection, closing connection", e))
                    (.. this (closeConnection))
                    (throw (IOException. e))
                )
                (finally
                    (when __andUnlock
                        (.. (:lock this) (unlock))
                    )
                )
            )
        )
        nil
    )

    ;; May NOT be called with lock held.
    #_override
    #_public
    (§ method #_"void" closeConnection []
        (assert-state (not (.. (:lock this) (isHeldByCurrentThread))))
        (try
            (.. (:channel this) (close))
            (catch IOException e
                (throw (RuntimeException. e))
            )
        )
        (.. this (connectionClosed))
        nil
    )

    #_private
    (§ method- #_"void" connectionClosed []
        (let [#_"boolean" __callClosed false]
            (.. (:lock this) (lock))
            (try
                (§ ass __callClosed (not (:close-called this)))
                (§ assoc this :close-called true)
                (finally
                    (.. (:lock this) (unlock))
                )
            )
            (when __callClosed
                (assert-state (or (nil? (:connected-handlers this)) (.. (:connected-handlers this) (remove this))))
                (.. (:connection this) (connectionClosed))
            )
        )
        nil
    )

    ;; Handle a SelectionKey which was selected.
    ;; Runs unlocked as the caller is single-threaded (or if not, should enforce that handleKey is only called
    ;; atomically for a given ConnectionHandler).
    #_public
    #_static
    (§ defn #_"void" ConnectionHandler'handleKey [#_"SelectionKey" key]
        (let [#_"ConnectionHandler" handler (cast ConnectionHandler (.. key (attachment)))]
            (try
                (when (nil? handler)
                    (§ return nil)
                )
                (when (not (.. key (isValid)))
                    (.. handler (closeConnection)) ;; Key has been cancelled, make sure the socket gets closed.
                    (§ return nil)
                )
                (when (.. key (isReadable))
                    ;; Do a socket read and invoke the connection's receiveBytes message.
                    (let [#_"int" read (.. (:channel handler) (read (:read-buff handler)))]
                        (cond (= read 0)
                            (do
                                (§ return nil) ;; Was probably waiting on a write.
                            )
                            (= read -1) ;; Socket was closed.
                            (do
                                (.. key (cancel))
                                (.. handler (closeConnection))
                                (§ return nil)
                            )
                        )
                        ;; "flip" the buffer - setting the limit to the current position and setting position to 0
                        (.. (:read-buff handler) (flip))
                        ;; Use connection.receiveBytes's return value as a check that it stopped reading at the right location.
                        (let [#_"int" __bytesConsumed (.. (ensure some? (:connection handler)) (receiveBytes (:read-buff handler)))]
                            (assert-state (= (.. (:read-buff handler) (position)) __bytesConsumed))
                            ;; Now drop the bytes which were read by compacting readBuff (resetting limit and keeping relative position).
                            (.. (:read-buff handler) (compact))
                        )
                    )
                )
                (when (.. key (isWritable))
                    (.. handler (tryWriteBytes))
                )
                (catch Exception e
                    ;; This can happen e.g. if the channel closes while the thread is about to get killed
                    ;; (ClosedByInterruptException), or if handler.connection.receiveBytes throws something.
                    (let [#_"Throwable" t (Throwables/getRootCause e)]
                        (.. ConnectionHandler'log (warn "Error handling SelectionKey: {} {}", (.. t (getClass) (getName)), (if (some? (.. t (getMessage))) (.. t (getMessage)) ""), e))
                        (.. handler (closeConnection))
                    )
                )
            )
        )
        nil
    )
)

;;;
 ; A reusable object that will calculate, given a list of {@link PeerFilterProvider}s, a merged {@link BloomFilter}
 ; and earliest key time for all of them.  Used by the {@link PeerGroup} class internally.
 ;
 ; Thread safety: threading here can be complicated.  Each filter provider is given a begin event, which may acquire
 ; a lock (and is guaranteed to receive an end event).  This class is mostly thread unsafe and is meant to be used from
 ; a single thread only, PeerGroup ensures this by only accessing it from the dedicated PeerGroup thread.  PeerGroup
 ; does not hold any locks whilst this object is used, relying on the single thread to prevent multiple filters being
 ; calculated in parallel, thus a filter provider can do things like make blocking calls into PeerGroup from a separate
 ; thread.  However the bloomFilterFPRate property IS thread safe, for convenience.
 ;;
#_public
(§ class FilterMerger
    ;; We use a constant tweak to avoid giving up privacy when we regenerate our filter with new keys.
    #_private
    (§ field- #_"long" :bloom-filter-tweak (long (* (Math/random) Long/MAX_VALUE)))

    #_private
    #_volatile
    (§ field- #_"double" :v-bloom-filter-fp-rate)
    #_private
    (§ field- #_"int" :last-bloom-filter-element-count)
    #_private
    (§ field- #_"BloomFilter" :last-filter)

    #_public
    (§ constructor FilterMerger [#_"double" __bloomFilterFPRate]
        (§ assoc this :v-bloom-filter-fp-rate __bloomFilterFPRate)
        this
    )

    #_public
    #_static
    (§ class FilterMergerResult
        #_public
        (§ field #_"BloomFilter" :filter)
        #_public
        (§ field #_"long" :earliest-key-time-secs)
        #_public
        (§ field #_"boolean" :changed)
    )

    #_public
    (§ method #_"FilterMergerResult" calculate [#_"ImmutableList<PeerFilterProvider>" providers]
        (let [#_"LinkedList<PeerFilterProvider>" __begunProviders (Lists/newLinkedList)]
            (try
                ;; All providers must be in a consistent, unchanging state because the filter is a merged one that's
                ;; large enough for all providers elements: if a provider were to get more elements in the middle of the
                ;; calculation, we might assert or calculate the filter wrongly.  Most providers use a lock here but
                ;; snapshotting required state is also a legitimate strategy.
                (doseq [#_"PeerFilterProvider" provider providers]
                    (.. provider (beginBloomFilterCalculation))
                    (.. __begunProviders (add provider))
                )
                (let [#_"FilterMergerResult" result (FilterMergerResult.)]
                    (§ assoc result :earliest-key-time-secs Long/MAX_VALUE)
                    (let [#_"int" elements 0
                          #_"boolean" __requiresUpdateAll false]
                        (doseq [#_"PeerFilterProvider" p providers]
                            (§ update result :earliest-key-time-secs min (.. p (getEarliestKeyCreationTime)))
                            (§ ass elements (+ elements (.. p (getBloomFilterElementCount))))
                        )

                        (when (< 0 elements)
                            ;; We stair-step our element count so that we avoid creating a filter with different parameters
                            ;; as much as possible as that results in a loss of privacy.
                            ;; The constant 100 here is somewhat arbitrary, but makes sense for small to medium wallets -
                            ;; it will likely mean we never need to create a filter with different parameters.
                            (§ assoc this :last-bloom-filter-element-count (if (< (:last-bloom-filter-element-count this) elements) (+ elements 100) (:last-bloom-filter-element-count this)))
                            (let [#_"BloomUpdate" __bloomFlags (if __requiresUpdateAll :BloomUpdate'UPDATE_ALL :BloomUpdate'UPDATE_P2PUBKEY_ONLY)
                                  #_"double" __fpRate (:v-bloom-filter-fp-rate this)
                                  #_"BloomFilter" filter (BloomFilter. (:last-bloom-filter-element-count this), __fpRate, (:bloom-filter-tweak this), __bloomFlags)]
                                (doseq [#_"PeerFilterProvider" p providers]
                                    (.. filter (merge (.. p (getBloomFilter (:last-bloom-filter-element-count this), __fpRate, (:bloom-filter-tweak this)))))
                                )

                                (§ assoc result :changed (not (.. filter (equals (:last-filter this)))))
                                (§ assoc result :filter (§ assoc this :last-filter filter))
                            )
                        )
                        ;; Now adjust the earliest key time backwards by a week to handle the case of clock drift.  This can occur
                        ;; both in block header timestamps and if the users clock was out of sync when the key was first created
                        ;; (to within a small amount of tolerance).
                        (§ assoc result :earliest-key-time-secs (- (:earliest-key-time-secs this) (* 86400 7)))
                        (§ return result)
                    )
                )
                (finally
                    (doseq [#_"PeerFilterProvider" provider __begunProviders]
                        (.. provider (endBloomFilterCalculation))
                    )
                )
            )
        )
    )

    #_public
    (§ method #_"void" setBloomFilterFPRate [#_"double" __bloomFilterFPRate]
        (§ assoc this :v-bloom-filter-fp-rate __bloomFilterFPRate)
        nil
    )

    #_public
    (§ method #_"double" getBloomFilterFPRate []
        (:v-bloom-filter-fp-rate this)
    )

    #_public
    (§ method #_"BloomFilter" getLastFilter []
        (:last-filter this)
    )
)

;;;
 ; A target to which messages can be written/connection can be closed.
 ;;
#_public
(§ interface MessageWriteTarget
    ;;;
     ; Writes the given bytes to the remote server.
     ;;
    #_throws #_[ "IOException" ]
    (§ method #_"void" writeBytes [#_"byte[]" message])
    ;;;
     ; Closes the connection to the server, triggering the {@link StreamConnection#connectionClosed()}
     ; event on the network-handling thread where all callbacks occur.
     ;;
    (§ method #_"void" closeConnection [])
)

;;;
 ; Creates a simple connection to a server using a {@link StreamConnection} to process data.
 ;;
#_public
(§ class NioClient (§ implements MessageWriteTarget)
    #_private
    #_static
    (def- #_"Logger" NioClient'log (LoggerFactory/getLogger NioClient))

    #_private
    (§ field- #_"NioClientHandler" :handler)
    #_private
    (§ field- #_"NioClientManager" :manager (NioClientManager.))

    (§ class NioClientHandler (§ extends AbstractTimeoutHandler) (§ implements StreamConnection)
        #_private
        (§ field- #_"StreamConnection" :upstream-connection)
        #_private
        (§ field- #_"MessageWriteTarget" :write-target)
        #_private
        (§ field- #_"boolean" :close-on-open)
        #_private
        (§ field- #_"boolean" :close-called)

        (§ constructor NioClientHandler [#_"StreamConnection" __upstreamConnection, #_"int" __connectTimeoutMillis]
            (§ assoc this :upstream-connection __upstreamConnection)
            (.. this (setSocketTimeout __connectTimeoutMillis))
            (.. this (setTimeoutEnabled true))
            this
        )

        #_override
        #_protected
        #_synchronized
        (§ method #_"void" timeoutOccurred []
            (§ assoc this :close-on-open true)
            (.. this (connectionClosed))
            nil
        )

        #_override
        #_public
        #_synchronized
        (§ method #_"void" connectionClosed []
            (.. (:manager this) (stopAsync))
            (when (not (:close-called this))
                (§ assoc this :close-called true)
                (.. (:upstream-connection this) (connectionClosed))
            )
            nil
        )

        #_override
        #_public
        #_synchronized
        (§ method #_"void" connectionOpened []
            (when (not (:close-on-open this))
                (.. (:upstream-connection this) (connectionOpened))
            )
            nil
        )

        #_override
        #_public
        #_throws #_[ "Exception" ]
        (§ method #_"int" receiveBytes [#_"ByteBuffer" buff]
            (.. (:upstream-connection this) (receiveBytes buff))
        )

        #_override
        #_public
        #_synchronized
        (§ method #_"void" setWriteTarget [#_"MessageWriteTarget" __writeTarget]
            (cond (:close-on-open this)
                (do
                    (.. __writeTarget (closeConnection))
                )
                :else
                (do
                    (.. this (setTimeoutEnabled false))
                    (§ assoc this :write-target __writeTarget)
                    (.. (:upstream-connection this) (setWriteTarget __writeTarget))
                )
            )
            nil
        )

        #_override
        #_public
        (§ method #_"int" getMaxMessageSize []
            (.. (:upstream-connection this) (getMaxMessageSize))
        )
    )

    ;;;
     ; Creates a new client to the given server address using the given {@link StreamConnection} to decode the data.
     ; The given connection <b>MUST</b> be unique to this object.  This does not block while waiting for the connection
     ; to open, but will call either the {@link StreamConnection#connectionOpened()} or
     ; {@link StreamConnection#connectionClosed()} callback on the created network event processing thread.
     ;
     ; @param connectTimeoutMillis The connect timeout set on the connection (in milliseconds).
     ;                             0 is interpreted as no timeout.
     ;;
    #_public
    #_throws #_[ "IOException" ]
    (§ constructor NioClient [#_"SocketAddress" __serverAddress, #_"StreamConnection" parser, #_"int" __connectTimeoutMillis]
        (.. (:manager this) (startAsync))
        (.. (:manager this) (awaitRunning))
        (§ assoc this :handler (NioClientHandler. parser, __connectTimeoutMillis))
        (Futures/addCallback (.. (:manager this) (openConnection __serverAddress, (:handler this))), (FutureCallback. #_"<SocketAddress>")
        (§ anon
            #_override
            #_public
            (§ method #_"void" onSuccess [#_"SocketAddress" result]
                nil
            )

            #_override
            #_public
            (§ method #_"void" onFailure [#_"Throwable" t]
                (.. NioClient'log (error "Connect to {} failed: {}", __serverAddress, (Throwables/getRootCause t)))
                nil
            )
        ))
        this
    )

    #_override
    #_public
    (§ method #_"void" closeConnection []
        (.. (:handler this) :write-target (closeConnection))
        nil
    )

    #_override
    #_public
    #_synchronized
    #_throws #_[ "IOException" ]
    (§ method #_"void" writeBytes [#_"byte[]" message]
        (.. (:handler this) :write-target (writeBytes message))
        nil
    )
)

;;;
 ; A class which manages a set of client connections.  Uses Java NIO to select network events and processes them
 ; in a single network processing thread.
 ;;
#_public
(§ class NioClientManager (§ extends AbstractExecutionThreadService) (§ implements ClientConnectionManager)
    #_private
    #_static
    (def- #_"Logger" NioClientManager'log (LoggerFactory/getLogger NioClientManager))

    #_private
    (§ field- #_"Selector" :selector)

    (§ class PendingConnection
        (§ field- #_"SocketChannel" :sc)
        (§ field- #_"StreamConnection" :connection)
        (§ field- #_"SocketAddress" :address)
        (§ field- #_"SettableFuture<SocketAddress>" :future (SettableFuture/create))

        (§ constructor PendingConnection [#_"SocketChannel" sc, #_"StreamConnection" connection, #_"SocketAddress" address]
            (§ assoc this :sc sc)
            (§ assoc this :connection connection)
            (§ assoc this :address address)
            this
        )
    )
    (§ field #_"Queue<PendingConnection>" :new-connection-channels (LinkedBlockingQueue. #_"<>"))

    ;; Added to/removed from by the individual ConnectionHandler's, thus must by synchronized on its own.
    #_private
    (§ field- #_"Set<ConnectionHandler>" :connected-handlers (Collections/synchronizedSet (HashSet. #_"<ConnectionHandler>")))

    ;; Handle a SelectionKey which was selected.
    #_private
    #_throws #_[ "IOException" ]
    (§ method- #_"void" handleKey [#_"SelectionKey" key]
        ;; We could have a !isValid() key here if the connection is already closed at this point,
        ;; i.e. a client connection which has finished the initial connect process.
        (cond (and (.. key (isValid)) (.. key (isConnectable)))
            (do
                ;; Create a ConnectionHandler and hook everything together.
                (let [#_"PendingConnection" data (cast PendingConnection (.. key (attachment)))
                      #_"StreamConnection" connection (:connection data)
                      #_"SocketChannel" sc (cast SocketChannel (.. key (channel)))
                      #_"ConnectionHandler" handler (ConnectionHandler. connection, key, (:connected-handlers this))]
                    (try
                        (cond (.. sc (finishConnect))
                            (do
                                (.. NioClientManager'log (info "Connected to {}", (.. sc (socket) (getRemoteSocketAddress))))
                                (.. key (interestOps (& (| (.. key (interestOps)) SelectionKey/OP_READ) (bit-not SelectionKey/OP_CONNECT))) (attach handler))
                                (.. connection (connectionOpened))
                                (.. (:future data) (set (:address data)))
                            )
                            :else
                            (do
                                (.. NioClientManager'log (warn "Failed to connect to {}", (.. sc (socket) (getRemoteSocketAddress))))
                                (.. handler (closeConnection)) ;; Failed to connect for some reason.
                                (.. (:future data) (setException (ConnectException. "Unknown reason")))
                                (§ assoc data :future nil)
                            )
                        )
                        (catch Exception e
                            ;; If e is a CancelledKeyException, there is a race to get to interestOps after finishConnect() which
                            ;; may cause this.  Otherwise it may be any arbitrary kind of connection failure.
                            ;; Calling sc.socket().getRemoteSocketAddress() here throws an exception, so we can only log the error itself.
                            (let [#_"Throwable" cause (Throwables/getRootCause e)]
                                (.. NioClientManager'log (warn "Failed to connect with exception: {}: {}", (.. cause (getClass) (getName)), (.. cause (getMessage)), e))
                                (.. handler (closeConnection))
                                (.. (:future data) (setException cause))
                                (§ assoc data :future nil)
                            )
                        )
                    )
                )
            )
            :else ;; Process bytes read.
            (do
                (ConnectionHandler'handleKey key)
            )
        )
        nil
    )

    ;;;
     ; Creates a new client manager which uses Java NIO for socket management.
     ; Uses a single thread to handle all select calls.
     ;;
    #_public
    (§ constructor NioClientManager []
        (try
            (§ assoc this :selector (.. (SelectorProvider/provider) (openSelector)))
            (catch IOException e
                (throw (RuntimeException. e)) ;; Shouldn't ever happen.
            )
        )
        this
    )

    #_override
    #_public
    (§ method #_"void" run []
        (try
            (.. (Thread/currentThread) (setPriority Thread/MIN_PRIORITY))
            (while (.. this (isRunning))
                (let [#_"PendingConnection" conn]
                    (while (some? (§ ass conn (.. (:new-connection-channels this) (poll))))
                        (try
                            (let [#_"SelectionKey" key (.. (:sc conn) (register (:selector this), SelectionKey/OP_CONNECT))]
                                (.. key (attach conn))
                            )
                            (catch ClosedChannelException _
                                (.. NioClientManager'log (warn "SocketChannel was closed before it could be registered"))
                            )
                        )
                    )

                    (.. (:selector this) (select))

                    (let [#_"Iterator<SelectionKey>" it (.. (:selector this) (selectedKeys) (iterator))]
                        (while (.. it (hasNext))
                            (let [#_"SelectionKey" key (.. it (next))]
                                (.. it (remove))
                                (ConnectionHandler'handleKey key)
                            )
                        )
                    )
                )
            )
            (catch Exception e
                (.. NioClientManager'log (warn "Error trying to open/read from connection: ", e))
            )
            (finally
                ;; Go through and close everything, without letting IOExceptions get in our way.
                (doseq [#_"SelectionKey" key (.. (:selector this) (keys))]
                    (try
                        (.. key (channel) (close))
                        (catch IOException e
                            (.. NioClientManager'log (warn "Error closing channel", e))
                        )
                    )
                    (.. key (cancel))
                    (when (instance? ConnectionHandler (.. key (attachment)))
                        (ConnectionHandler'handleKey key) ;; Close connection if relevant.
                    )
                )
                (try
                    (.. (:selector this) (close))
                    (catch IOException e
                        (.. NioClientManager'log (warn "Error closing client manager selector", e))
                    )
                )
            )
        )
        nil
    )

    #_override
    #_public
    (§ method #_"ListenableFuture<SocketAddress>" openConnection [#_"SocketAddress" __serverAddress, #_"StreamConnection" connection]
        (when (not (.. this (isRunning)))
            (throw (IllegalStateException.))
        )

        ;; Create a new connection, give it a connection as an attachment.
        (try
            (let [#_"SocketChannel" sc (SocketChannel/open)]
                (.. sc (configureBlocking false))
                (.. sc (connect __serverAddress))
                (let [#_"PendingConnection" data (PendingConnection. sc, connection, __serverAddress)]
                    (.. (:new-connection-channels this) (offer data))
                    (.. (:selector this) (wakeup))
                    (:future data)
                )
            )
            (catch Throwable e
                (Futures/immediateFailedFuture e)
            )
        )
    )

    #_override
    #_public
    (§ method #_"void" triggerShutdown []
        (.. (:selector this) (wakeup))
        nil
    )

    #_override
    #_public
    (§ method #_"int" getConnectedClientCount []
        (.. (:connected-handlers this) (size))
    )

    #_override
    #_public
    (§ method #_"void" closeConnections [#_"int" n]
        (loop-when-recur n (< 0 n) (dec n)
            (let [#_"ConnectionHandler" handler]
                (§ sync (:connected-handlers this)
                    (§ ass handler (.. (:connected-handlers this) (iterator) (next)))
                )
                (when (some? handler)
                    (.. handler (closeConnection)) ;; Removes handler from connectedHandlers before returning.
                )
            )
        )
        nil
    )

    #_override
    #_protected
    (§ method #_"Executor" executor []
        (Executor.)
        (§ anon
            #_override
            #_public
            (§ method #_"void" execute [#_"Runnable" command]
                (.. (ContextPropagatingThreadFactory. "NioClientManager") (newThread command) (start))
                nil
            )
        )
    )
)

;;;
 ; Creates a simple server listener which listens for incoming client connections and uses a {@link StreamConnection}
 ; to process data.
 ;;
#_public
(§ class NioServer (§ extends AbstractExecutionThreadService)
    #_private
    #_static
    (def- #_"Logger" NioServer'log (LoggerFactory/getLogger NioServer))

    #_private
    (§ field- #_"StreamConnectionFactory" :connection-factory)

    #_private
    (§ field- #_"ServerSocketChannel" :sc)
    #_testing
    (§ field #_"Selector" :selector)

    ;; Handle a SelectionKey which was selected.
    #_private
    #_throws #_[ "IOException" ]
    (§ method- #_"void" handleKey [#_"Selector" selector, #_"SelectionKey" key]
        (cond (and (.. key (isValid)) (.. key (isAcceptable)))
            (do
                ;; Accept a new connection, give it a stream connection as an attachment.
                (let [#_"SocketChannel" __newChannel (.. (:sc this) (accept))]
                    (.. __newChannel (configureBlocking false))
                    (let [#_"SelectionKey" __newKey (.. __newChannel (register selector, SelectionKey/OP_READ))]
                        (try
                            (let [#_"ConnectionHandler" handler (ConnectionHandler. (:connection-factory this), __newKey)]
                                (.. __newKey (attach handler))
                                (.. (:connection handler) (connectionOpened))
                            )
                            (catch IOException e
                                ;; This can happen if ConnectionHandler's call to get a new handler returned null.
                                (.. NioServer'log (error "Error handling new connection", (.. (Throwables/getRootCause e) (getMessage))))
                                (.. __newKey (channel) (close))
                            )
                        )
                    )
                )
            )
            :else ;; Got a closing channel or a channel to a client connection.
            (do
                (ConnectionHandler'handleKey key)
            )
        )
        nil
    )

    ;;;
     ; Creates a new server which is capable of listening for incoming connections and processing client provided data
     ; using {@link StreamConnection}s created by the given {@link StreamConnectionFactory}.
     ;
     ; @throws IOException if there is an issue opening the server socket or binding fails for some reason.
     ;;
    #_public
    #_throws #_[ "IOException" ]
    (§ constructor NioServer [#_"StreamConnectionFactory" factory, #_"InetSocketAddress" __bindAddress]
        (§ assoc this :connection-factory factory)

        (§ assoc this :sc (ServerSocketChannel/open))
        (.. (:sc this) (configureBlocking false))
        (.. (:sc this) (socket) (bind __bindAddress))
        (§ assoc this :selector (.. (SelectorProvider/provider) (openSelector)))
        (.. (:sc this) (register (:selector this), SelectionKey/OP_ACCEPT))
        this
    )

    #_override
    #_protected
    #_throws #_[ "Exception" ]
    (§ method #_"void" run []
        (try
            (while (.. this (isRunning))
                (.. (:selector this) (select))

                (let [#_"Iterator<SelectionKey>" it (.. (:selector this) (selectedKeys) (iterator))]
                    (while (.. it (hasNext))
                        (let [#_"SelectionKey" key (.. it (next))]
                            (.. it (remove))

                            (ConnectionHandler'handleKey (:selector this), key)
                        )
                    )
                )
            )
            (catch Exception e
                (.. NioServer'log (error "Error trying to open/read from connection: {}", e))
            )
            (finally
                ;; Go through and close everything, without letting IOExceptions get in our way.
                (doseq [#_"SelectionKey" key (.. (:selector this) (keys))]
                    (try
                        (.. key (channel) (close))
                        (catch IOException e
                            (.. NioServer'log (error "Error closing channel", e))
                        )
                    )
                    (try
                        (.. key (cancel))
                        (ConnectionHandler'handleKey (:selector this), key)
                        (catch IOException e
                            (.. NioServer'log (error "Error closing selection key", e))
                        )
                    )
                )
                (try
                    (.. (:selector this) (close))
                    (catch IOException e
                        (.. NioServer'log (error "Error closing server selector", e))
                    )
                )
                (try
                    (.. (:sc this) (close))
                    (catch IOException e
                        (.. NioServer'log (error "Error closing server channel", e))
                    )
                )
            )
        )
        nil
    )

    ;;;
     ; Invoked by the Execution service when it's time to stop.
     ; Calling this method directly will NOT stop the service, call
     ; {@link com.google.common.util.concurrent.AbstractExecutionThreadService#stop()} instead.
     ;;
    #_override
    #_public
    (§ method #_"void" triggerShutdown []
        ;; Wake up the selector and let the selection thread break its loop as the ExecutionService !isRunning().
        (.. (:selector this) (wakeup))
        nil
    )
)

;;;
 ; A handler which is used in {@link NioServer} and {@link NioClient} to split up incoming data streams
 ; into protobufs and provide an interface for writing protobufs to the connections.
 ;
 ; Messages are encoded with a 4-byte signed integer (big endian) prefix to indicate their length followed
 ; by the serialized protobuf.
 ;;
#_public
(§ class ProtobufConnection #_"<MessageType extends MessageLite>" (§ extends AbstractTimeoutHandler) (§ implements StreamConnection)
    #_private
    #_static
    (def- #_"Logger" ProtobufConnection'log #_"<MessageType extends MessageLite>" (LoggerFactory/getLogger ProtobufConnection))

    ;;;
     ; An interface which can be implemented to handle callbacks as new messages are generated and socket events occur.
     ;
     ; @param <MessageType> The protobuf type which is used on this socket.
     ;                      This <b>MUST</b> match the MessageType used in the parent {@link ProtobufConnection}.
     ;;
    #_public
    (§ interface ProtobufConnectionListener #_"<MessageType extends MessageLite>"
        ;;; Called when a new protobuf is received from the remote side. ;;
        (§ method #_"void" messageReceived [#_"ProtobufConnection<MessageType>" handler, #_"MessageType" msg])
        ;;; Called when the connection is opened and available for writing data to. ;;
        (§ method #_"void" connectionOpen [#_"ProtobufConnection<MessageType>" handler])
        ;;; Called when the connection is closed and no more data should be provided. ;;
        (§ method #_"void" connectionClosed [#_"ProtobufConnection<MessageType>" handler])
    )

    ;; The callback listener.
    #_private
    (§ field- #_"ProtobufConnectionListener<MessageType>" :handler)
    ;; The prototype which is used to deserialize messages.
    #_private
    (§ field- #_"MessageLite" :prototype)

    ;; The maximum message size (NOT INCLUDING LENGTH PREFIX).
    (§ field #_"int" :max-message-size)

    ;; A temporary buffer used when the message size is larger than the buffer being used by the network code.
    ;; Because the networking code uses a constant size buffer and we want to allow for very large message sizes, we use
    ;; a smaller network buffer per client and only allocate more memory when we need it to deserialize large messages.
    ;; Though this is not in of itself a DoS protection, it allows for handling more legitimate clients per server and
    ;; attacking clients can be made to timeout/get blocked if they are sending crap to fill buffers.
    #_private
    (§ field- #_"int" :message-bytes-offset 0)
    #_private
    (§ field- #_"byte[]" :message-bytes)
    #_private
    (§ field- #_"ReentrantLock" :lock (Threading'lock "ProtobufConnection"))

    #_testing
    (§ field #_"AtomicReference<MessageWriteTarget>" :write-target (AtomicReference. #_"<>"))

    ;;;
     ; Creates a new protobuf handler.
     ;
     ; @param handler The callback listener.
     ; @param prototype The default instance of the message type used in both directions of this channel.
     ;                  This should be the return value from {@link MessageType#getDefaultInstanceForType()}.
     ; @param maxMessageSize The maximum message size (not including the 4-byte length prefix).
     ;                       Note that this has an upper bound of {@link Integer#MAX_VALUE} - 4.
     ; @param timeoutMillis The timeout between messages before the connection is automatically closed.
     ;                      Only enabled after the connection is established.
     ;;
    #_public
    (§ constructor ProtobufConnection [#_"ProtobufConnectionListener<MessageType>" handler, #_"MessageType" prototype, #_"int" __maxMessageSize, #_"int" __timeoutMillis]
        (§ assoc this :handler handler)
        (§ assoc this :prototype prototype)
        (§ assoc this :max-message-size (min __maxMessageSize, (- Integer/MAX_VALUE 4)))
        (.. this (setTimeoutEnabled false))
        (.. this (setSocketTimeout __timeoutMillis))
        this
    )

    #_override
    #_public
    (§ method #_"void" setWriteTarget [#_"MessageWriteTarget" __writeTarget]
        ;; Only allow it to be set once.
        (assert-state (nil? (.. (:write-target this) (getAndSet (ensure some? __writeTarget)))))
        nil
    )

    #_override
    #_public
    (§ method #_"int" getMaxMessageSize []
        (:max-message-size this)
    )

    ;;;
     ; Closes this connection, eventually triggering a {@link ProtobufConnection.Listener#connectionClosed()} event.
     ;;
    #_public
    (§ method #_"void" closeConnection []
        (.. (:write-target this) (get) (closeConnection))
        nil
    )

    #_override
    #_protected
    (§ method #_"void" timeoutOccurred []
        (.. ProtobufConnection'log #_"<MessageType extends MessageLite>" (warn (str "Timeout occurred for " (:handler this))))
        (.. this (closeConnection))
        nil
    )

    ;; Deserializes and provides a listener event (buff must not have the length prefix in it).
    ;; Does set the buffers's position to its limit.
    #_suppress #_[ "unchecked" ]
    ;; The warning 'unchecked cast' being suppressed here comes from the build() formally returning
    ;; a MessageLite-derived class that cannot be statically guaranteed to be the MessageType.
    #_private
    #_throws #_[ "Exception" ]
    (§ method- #_"void" deserializeMessage [#_"ByteBuffer" buff]
        (let [#_"MessageType" msg (cast MessageType (.. (:prototype this) (newBuilderForType) (mergeFrom (ByteString/copyFrom buff)) (build)))]
            (.. this (resetTimeout))
            (.. (:handler this) (messageReceived this, msg))
        )
        nil
    )

    #_override
    #_public
    #_throws #_[ "Exception" ]
    (§ method #_"int" receiveBytes [#_"ByteBuffer" buff]
        (.. (:lock this) (lock))
        (try
            (cond
                (some? (:message-bytes this))
                    ;; Just keep filling up the currently being worked on message.
                    (let [#_"int" n (min (- (alength (:message-bytes this)) (:message-bytes-offset this)), (.. buff (remaining)))]
                        (.. buff (get (:message-bytes this), (:message-bytes-offset this), n))
                        (§ update this :message-bytes-offset + n)
                        (when' (= (:message-bytes-offset this) (alength (:message-bytes this))) => n
                            ;; Filled up our buffer, decode the message.
                            (.. this (deserializeMessage (ByteBuffer/wrap (:message-bytes this))))
                            (§ assoc this :message-bytes nil)
                            (+ n (if (.. buff (hasRemaining)) (.. this (receiveBytes buff)) 0))
                        )
                    )
                (< (.. buff (remaining)) 4)
                    ;; If we cant read the length prefix yet, give up.
                    0
                :else
                    ;; Read one integer in big endian.
                    (let [_ (.. buff (order ByteOrder/BIG_ENDIAN)) #_"int" len (.. buff (getInt))]
                        ;; If length is larger than the maximum message size (or is negative/overflows) throw an exception and close
                        ;; the connection.
                        (when-not (<= 0 len (:max-message-size this))
                            (throw (IllegalStateException. "Message too large or length underflowed"))
                        )
                        (cond
                            ;; If the buffer's capacity is less than the next messages length + 4 (length prefix), we must use messageBytes
                            ;; as a temporary buffer to store the message.
                            (< (.. buff (capacity)) (+ len 4))
                                (do
                                    (§ assoc this :message-bytes (byte-array len))
                                    ;; Now copy all remaining bytes into the new buffer, set messageBytesOffset and tell the caller how many
                                    ;; bytes we consumed.
                                    (let [#_"int" n (.. buff (remaining))]
                                        (.. buff (get (:message-bytes this), 0, n))
                                        (§ assoc this :message-bytes-offset n)
                                        (+ n 4)
                                    )
                                )
                            ;; Wait until the whole message is available in the buffer.
                            (< (.. buff (remaining)) len)
                                (do ;; Make sure the buffer's position is right at the end.
                                    (.. buff (position (- (.. buff (position)) 4)))
                                    0
                                )
                            :else
                                ;; Temporarily limit the buffer to the size of the message, so that the protobuf decode doesn't get messed up.
                                (let [#_"int" limit (.. buff (limit))]
                                    (.. buff (limit (+ (.. buff (position)) len)))
                                    (.. this (deserializeMessage buff))
                                    (assert-state (= (.. buff (remaining)) 0))
                                    ;; Reset the limit in case we have to recurse.
                                    (.. buff (limit limit))
                                    ;; If there are still bytes remaining, see if we can pull out another message since we won't get called again.
                                    (+ len 4 (if (.. buff (hasRemaining)) (.. this (receiveBytes buff)) 0))
                                )
                        )
                    )
            )
            (finally
                (.. (:lock this) (unlock))
            )
        )
    )

    #_override
    #_public
    (§ method #_"void" connectionClosed []
        (.. (:handler this) (connectionClosed this))
        nil
    )

    #_override
    #_public
    (§ method #_"void" connectionOpened []
        (.. this (setTimeoutEnabled true))
        (.. (:handler this) (connectionOpen this))
        nil
    )

    ;;;
     ; Writes the given message to the other side of the connection, prefixing it with the proper 4-byte prefix.
     ;
     ; Provides a write-order guarantee.
     ;
     ; @throws IllegalStateException if the encoded message is larger than the maximum message size.
     ;;
    #_public
    #_throws #_[ "IllegalStateException" ]
    (§ method #_"void" write [#_"MessageType" msg]
        (let [#_"byte[]" __messageBytes (.. msg (toByteArray))]
            (assert-state (<= (alength __messageBytes) (:max-message-size this)))

            (let [#_"byte[]" __messageLength (byte-array 4)]
                (Utils'uint32ToByteArrayBE (alength __messageBytes), __messageLength, 0)
                (try
                    (let [#_"MessageWriteTarget" target (.. (:write-target this) (get))]
                        (.. target (writeBytes __messageLength))
                        (.. target (writeBytes __messageBytes))
                    )
                    (catch IOException e
                        (.. this (closeConnection))
                    )
                )
            )
        )
        nil
    )
)

;;;
 ; A generic handler which is used in {@link NioServer}, {@link NioClient} and {@link BlockingClient} to handle incoming
 ; data streams.
 ;;
#_public
(§ interface StreamConnection
    ;;; Called when the connection socket is closed. ;;
    (§ method #_"void" connectionClosed [])

    ;;; Called when the connection socket is first opened. ;;
    (§ method #_"void" connectionOpened [])

    ;;;
     ; Called when new bytes are available from the remote end.  This should only ever be called by the single
     ; writeTarget associated with any given StreamConnection, multiple callers will likely confuse implementations.
     ;
     ; Implementers/callers must follow the following conventions exactly:
     ; <ul>
     ; <li>buff will start with its limit set to the position we can read to and its position set to the location we
     ;     will start reading at (always 0).</li>
     ; <li>May read more than one message (recursively) if there are enough bytes available.</li>
     ; <li>Uses some internal buffering to store message which are larger (incl. their length prefix) than buff's
     ;     capacity(), i.e. it is up to this method to ensure we dont run out of buffer space to decode the next message.</li>
     ; <li>buff will end with its limit the same as it was previously, and its position set to the position up to which
     ;     bytes have been read (the same as its return value).</li>
     ; <li>buff must be at least the size of a Bitcoin header (incl. magic bytes).</li>
     ; </ul>
     ;
     ; @return the amount of bytes consumed which should not be provided again.
     ;;
    #_throws #_[ "Exception" ]
    (§ method #_"int" receiveBytes [#_"ByteBuffer" buff])

    ;;;
     ; Called when this connection is attached to an upstream write target (i.e. a low-level connection handler).
     ; This writeTarget should be stored and used to close the connection or write data to the socket.
     ;;
    (§ method #_"void" setWriteTarget [#_"MessageWriteTarget" __writeTarget])

    ;;;
     ; Returns the maximum message size of a message on the socket. This is used in calculating size of buffers
     ; to allocate.
     ;;
    (§ method #_"int" getMaxMessageSize [])
)

;;;
 ; A factory which generates new {@link StreamConnection}s when a new connection is opened.
 ;;
#_public
(§ interface StreamConnectionFactory
    ;;;
     ; Returns a new handler or null to have the connection close.
     ;
     ; @param inetAddress The client's (IP) address.
     ; @param port The remote port on the client side.
     ;;
    #_nilable
    (§ method #_"StreamConnection" getNewConnection [#_"InetAddress" __inetAddress, #_"int" port])
)

#_(ns org.bitcoinj.net.discovery
    (:import [com.google.common.collect Lists]
             [java.net InetAddress InetSocketAddress UnknownHostException]
             [java.util ArrayList Collections List]
             [java.util.concurrent TimeUnit]
             [org.slf4j LoggerFactory Logger]
    )
)

;;;
 ; Supports peer discovery through DNS.
 ;
 ; Failure to resolve individual host names will not cause an Exception to be thrown.
 ; However, if all hosts passed fail to resolve a PeerDiscoveryException will be thrown during getPeers().
 ;
 ; DNS seeds do not attempt to enumerate every peer on the network.
 ; {@link DnsDiscovery#getPeers(long, java.util.concurrent.TimeUnit)} will return up to 30 random peers
 ; from the set of those returned within the timeout period.  If you want more peers to connect to,
 ; you need to discover them via other means (like addr broadcasts).
 ;;
#_public
(§ class DnsDiscovery (§ extends MultiplexingDiscovery)
    ;;;
     ; Supports finding peers through DNS A records.  Community run DNS entry points will be used.
     ;
     ; @param netParams Network parameters to be used for port information.
     ;;
    #_public
    (§ constructor DnsDiscovery [#_"NetworkParameters" params]
        (§ this (:dns-seeds params), params)
        this
    )

    ;;;
     ; Supports finding peers through DNS A records.
     ;
     ; @param dnsSeeds Host names to be examined for seed addresses.
     ; @param params Network parameters to be used for port information.
     ;;
    #_public
    (§ constructor DnsDiscovery [#_"String[]" seeds, #_"NetworkParameters" params]
        (§ super params, (DnsDiscovery'buildDiscoveries params, seeds))
        this
    )

    #_private
    #_static
    (§ defn- #_"List<PeerDiscovery>" DnsDiscovery'buildDiscoveries [#_"NetworkParameters" params, #_"String[]" seeds]
        (let [#_"List<PeerDiscovery>" discoveries (ArrayList. #_"<>")]
            (when (some? seeds)
                (doseq [#_"String" seed seeds]
                    (.. discoveries (add (DnsSeedDiscovery. params, seed)))
                )
            )
            discoveries
        )
    )

    #_override
    #_protected
    (§ method #_"ExecutorService" createExecutor []
        (Executors/newFixedThreadPool (.. (:seeds this) (size)), (DaemonThreadFactory. "DNS seed lookups"))
    )

    ;;; Implements discovery from a single DNS host. ;;
    #_public
    #_static
    (§ class DnsSeedDiscovery (§ implements PeerDiscovery)
        #_private
        (§ field- #_"String" :hostname)
        #_private
        (§ field- #_"NetworkParameters" :params)

        #_public
        (§ constructor DnsSeedDiscovery [#_"NetworkParameters" params, #_"String" hostname]
            (§ assoc this :hostname hostname)
            (§ assoc this :params params)
            this
        )

        #_override
        #_public
        #_throws #_[ "PeerDiscoveryException" ]
        (§ method #_"InetSocketAddress[]" getPeers [#_"long" services, #_"long" __timeoutValue, #_"TimeUnit" __timeoutUnit]
            (when (not= services 0)
                (throw (PeerDiscoveryException. (str "DNS seeds cannot filter by services: " services)))
            )

            (try
                (let [#_"InetAddress[]" response (InetAddress/getAllByName (:hostname this))
                      #_"InetSocketAddress[]" result (make-array InetSocketAddress (alength response))]
                    (loop-when-recur [#_"int" i 0] (< i (alength response)) [(inc i)]
                        (aset result i (InetSocketAddress. (aget response i), (-> this :params :port)))
                    )
                    (§ return result)
                )
                (catch UnknownHostException e
                    (throw (PeerDiscoveryException. e))
                )
            )
        )

        #_override
        #_public
        (§ method #_"void" shutdown []
            nil
        )

        #_override
        #_public
        (§ method #_"String" toString []
            (:hostname this)
        )
    )
)

;;;
 ; MultiplexingDiscovery queries multiple PeerDiscovery objects, shuffles their responses and then returns the results,
 ; thus selecting randomly between them and reducing the influence of any particular seed.  Any that don't respond
 ; within the timeout are ignored.  Backends are queried in parallel.  Backends may block.
 ;;
#_public
(§ class MultiplexingDiscovery (§ implements PeerDiscovery)
    #_private
    #_static
    (def- #_"Logger" MultiplexingDiscovery'log (LoggerFactory/getLogger MultiplexingDiscovery))

    #_protected
    (§ field #_"List<PeerDiscovery>" :seeds)
    #_protected
    (§ field #_"NetworkParameters" :net-params)
    #_private
    #_volatile
    (§ field- #_"ExecutorService" :v-thread-pool)

    ;;;
     ; Builds a suitable set of peer discoveries.  Will query them in parallel before producing a merged response.
     ; If specific services are required, DNS is not used as the protocol can't handle it.
     ;
     ; @param params Network to use.
     ; @param services Required services as a bitmask, e.g. {@link VersionMessage#NODE_NETWORK}.
     ;;
    #_public
    #_static
    (§ defn #_"MultiplexingDiscovery" MultiplexingDiscovery'forServices [#_"NetworkParameters" params, #_"long" services]
        (let [#_"List<PeerDiscovery>" discoveries (Lists/newArrayList)]
            ;; Also use DNS seeds if there is no specific service requirement.
            (when (= services 0)
                (let [#_"String[]" seeds (:dns-seeds params)]
                    (when (some? seeds)
                        (doseq [#_"String" seed seeds]
                            (.. discoveries (add (DnsSeedDiscovery. params, seed)))
                        )
                    )
                )
            )
            (MultiplexingDiscovery. params, discoveries)
        )
    )

    ;;;
     ; Will query the given seeds in parallel before producing a merged response.
     ;;
    #_public
    (§ constructor MultiplexingDiscovery [#_"NetworkParameters" params, #_"List<PeerDiscovery>" seeds]
        (assert-argument (not (.. seeds (isEmpty))))

        (§ assoc this :net-params params)
        (§ assoc this :seeds seeds)
        this
    )

    #_override
    #_public
    #_throws #_[ "PeerDiscoveryException" ]
    (§ method #_"InetSocketAddress[]" getPeers [#_"long" services, #_"long" __timeoutValue, #_"TimeUnit" __timeoutUnit]
        (§ assoc this :v-thread-pool (.. this (createExecutor)))
        (try
            (let [#_"List<Callable<InetSocketAddress[]>>" tasks (Lists/newArrayList)]
                (doseq [#_"PeerDiscovery" seed (:seeds this)]
                    (.. tasks (add (Callable. #_"<InetSocketAddress[]>"
                    (§ anon
                        #_override
                        #_public
                        #_throws #_[ "Exception" ]
                        (§ method #_"InetSocketAddress[]" call []
                            (.. seed (getPeers services, __timeoutValue, __timeoutUnit))
                        )
                    ))))
                )
                (let [#_"List<Future<InetSocketAddress[]>>" futures (.. (:v-thread-pool this) (invokeAll tasks, __timeoutValue, __timeoutUnit))
                      #_"ArrayList<InetSocketAddress>" addrs (Lists/newArrayList)]
                    (loop-when-recur [#_"int" i 0] (< i (.. futures (size))) [(inc i)]
                        (let [#_"Future<InetSocketAddress[]>" future (.. futures (get i))]
                            (when (.. future (isCancelled))
                                (.. MultiplexingDiscovery'log (warn "Seed {}: timed out", (.. (:seeds this) (get i))))
                                (§ continue ) ;; Timed out.
                            )
                            (let [#_"InetSocketAddress[]" __inetAddresses]
                                (try
                                    (§ ass __inetAddresses (.. future (get)))
                                    (catch ExecutionException e
                                        (.. MultiplexingDiscovery'log (warn "Seed {}: failed to look up: {}", (.. (:seeds this) (get i)), (.. e (getMessage))))
                                        (§ continue )
                                    )
                                )
                                (Collections/addAll addrs, __inetAddresses)
                            )
                        )
                    )
                    (when (= (.. addrs (size)) 0)
                        (throw (PeerDiscoveryException. (str "No peer discovery returned any results in " (.. __timeoutUnit (toMillis __timeoutValue)) "ms. Check internet connection?")))
                    )

                    (Collections/shuffle addrs)
                    (.. (:v-thread-pool this) (shutdownNow))
                    (.. addrs (toArray (make-array InetSocketAddress (.. addrs (size)))))
                )
            )
            (catch InterruptedException e
                (throw (PeerDiscoveryException. e))
            )
            (finally
                (.. (:v-thread-pool this) (shutdown))
            )
        )
    )

    #_protected
    (§ method #_"ExecutorService" createExecutor []
        (Executors/newFixedThreadPool (.. (:seeds this) (size)), (ContextPropagatingThreadFactory. "Multiplexing discovery"))
    )

    #_override
    #_public
    (§ method #_"void" shutdown []
        (let [#_"ExecutorService" tp (:v-thread-pool this)]
            (when (some? tp)
                (.. tp (shutdown))
            )
        )
        nil
    )
)

;;;
 ; A PeerDiscovery object is responsible for finding addresses of other nodes in the Bitcoin P2P network.
 ; Note that the addresses returned may or may not be accepting connections.
 ;;
#_public
(§ interface PeerDiscovery
    ;;;
     ; Returns an array of addresses.  This method may block.
     ;
     ; @param services Required services as a bitmask, e.g. {@link VersionMessage#NODE_NETWORK}.
     ;;
    #_throws #_[ "PeerDiscoveryException" ]
    (§ method #_"InetSocketAddress[]" getPeers [#_"long" services, #_"long" __timeoutValue, #_"TimeUnit" __timeoutUnit])

    ;;; Stops any discovery in progress when we want to shut down quickly. ;;
    (§ method #_"void" shutdown [])
)

#_public
(§ class PeerDiscoveryException (§ extends Exception)
    #_public
    (§ constructor PeerDiscoveryException []
        (§ super )
        this
    )

    #_public
    (§ constructor PeerDiscoveryException [#_"String" message]
        (§ super message)
        this
    )

    #_public
    (§ constructor PeerDiscoveryException [#_"Throwable" arg0]
        (§ super arg0)
        this
    )

    #_public
    (§ constructor PeerDiscoveryException [#_"String" message, #_"Throwable" arg0]
        (§ super message, arg0)
        this
    )
)

;;;
 ; SeedPeers stores a pre-determined list of Bitcoin node addresses.  These nodes are selected based on
 ; being active on the network for a long period of time.  The intention is to be a last resort way of finding
 ; a connection to the network, in case IRC and DNS fail.  The list comes from the Bitcoin C++ source code.
 ;;
#_public
(§ class SeedPeers (§ implements PeerDiscovery)
    #_private
    (§ field- #_"NetworkParameters" :params)
    #_private
    (§ field- #_"int[]" :seed-addrs)
    #_private
    (§ field- #_"int" :pnseed-index)

    ;;;
     ; Supports finding peers by IP addresses.
     ;
     ; @param params Network parameters to be used for port information.
     ;;
    #_public
    (§ constructor SeedPeers [#_"NetworkParameters" params]
        (§ this (:addr-seeds params), params)
        this
    )

    ;;;
     ; Supports finding peers by IP addresses.
     ;
     ; @param seedAddrs IP addresses for seed addresses.
     ; @param params Network parameters to be used for port information.
     ;;
    #_public
    (§ constructor SeedPeers [#_"int[]" __seedAddrs, #_"NetworkParameters" params]
        (§ assoc this :seed-addrs __seedAddrs)
        (§ assoc this :params params)
        this
    )

    ;;;
     ; Acts as an iterator, returning the address of each node in the list sequentially.
     ; Once all the list has been iterated, null will be returned for each subsequent query.
     ;
     ; @return InetSocketAddress - the address/port of the next node.
     ; @throws PeerDiscoveryException
     ;;
    #_nilable
    #_public
    #_throws #_[ "PeerDiscoveryException" ]
    (§ method #_"InetSocketAddress" getPeer []
        (try
            (.. this (nextPeer))
            (catch UnknownHostException e
                (throw (PeerDiscoveryException. e))
            )
        )
    )

    #_nilable
    #_private
    #_throws #_[ "UnknownHostException", "PeerDiscoveryException" ]
    (§ method- #_"InetSocketAddress" nextPeer []
        (when (or (nil? (:seed-addrs this)) (= (alength (:seed-addrs this)) 0))
            (throw (PeerDiscoveryException. "No IP address seeds configured; unable to find any peers"))
        )

        (when (< (:pnseed-index this) (alength (:seed-addrs this)))
            (let [#_"int" i (:pnseed-index this)]
                (§ update this :pnseed-index inc)
                (InetSocketAddress. (.. this (convertAddress (aget (:seed-addrs this) i))), (-> this :params :port))
            )
        )
    )

    ;;;
     ; Returns an array containing all the Bitcoin nodes within the list.
     ;;
    #_override
    #_public
    #_throws #_[ "PeerDiscoveryException" ]
    (§ method #_"InetSocketAddress[]" getPeers [#_"long" services, #_"long" __timeoutValue, #_"TimeUnit" __timeoutUnit]
        (when (not= services 0)
            (throw (PeerDiscoveryException. (str "Pre-determined peers cannot be filtered by services: " services)))
        )

        (try
            (.. this (allPeers))
            (catch UnknownHostException e
                (throw (PeerDiscoveryException. e))
            )
        )
    )

    #_private
    #_throws #_[ "UnknownHostException" ]
    (§ method- #_"InetSocketAddress[]" allPeers []
        (let [#_"InetSocketAddress[]" addresses (make-array InetSocketAddress (alength (:seed-addrs this)))]
            (loop-when-recur [#_"int" i 0] (< i (alength (:seed-addrs this))) [(inc i)]
                (aset addresses i (InetSocketAddress. (.. this (convertAddress (aget (:seed-addrs this) i))), (-> this :params :port)))
            )
            addresses
        )
    )

    #_private
    #_throws #_[ "UnknownHostException" ]
    (§ method- #_"InetAddress" convertAddress [#_"int" seed]
        (let [#_"byte[]" v4addr (byte-array 4)]
            (aset v4addr 0 (byte (& 0xff seed)))
            (aset v4addr 1 (byte (& 0xff (>> seed 8))))
            (aset v4addr 2 (byte (& 0xff (>> seed 16))))
            (aset v4addr 3 (byte (& 0xff (>> seed 24))))
            (InetAddress/getByAddress v4addr)
        )
    )

    #_override
    #_public
    (§ method #_"void" shutdown []
        nil
    )
)

#_(ns org.bitcoinj.params
    (:import [com.google.common.base Stopwatch]
             [com.google.common.collect ImmutableSet Lists]
             [java.math BigInteger]
             [java.net *]
             [java.util Collection Date Set]
             [java.util.concurrent TimeUnit]
             [org.slf4j LoggerFactory Logger]
    )
)

;;;
 ; Parameters for the main production network on which people trade goods and services.
 ;;
#_public
(§ class MainNetParams (§ extends NetworkParameters)
    #_public
    (§ constructor MainNetParams []
        (§ super )

        (§ assoc this :interval NetworkParameters'INTERVAL)
        (§ assoc this :target-timespan NetworkParameters'TARGET_TIMESPAN)
        (§ assoc this :max-target (Utils'decodeCompactBits 0x1d00ffff))
        (§ assoc this :address-header 0)
        (§ assoc this :p2sh-header 5)
        (§ assoc this :acceptable-address-codes (int-array [ (:address-header this), (:p2sh-header this) ]))
        (§ assoc this :port 8333)
        (§ assoc this :packet-magic 0xf9beb4d9)
        (§ assoc this :bip32-header-pub 0x0488b21e) ;; 4 byte header that serializes in base58 to "xpub"
        (§ assoc this :bip32-header-priv 0x0488ade4) ;; 4 byte header that serializes in base58 to "xprv"

        (§ assoc this :majority-enforce-block-upgrade 750)
        (§ assoc this :majority-reject-block-outdated 950)
        (§ assoc this :majority-window 1000)

        (.. (:genesis-block this) (setDifficultyTarget 0x1d00ffff))
        (.. (:genesis-block this) (setTime 1231006505))
        (.. (:genesis-block this) (setNonce 2083236893))
        (§ assoc this :id NetworkParameters'ID_MAINNET)
        (§ assoc this :subsidy-decrease-block-count 210000)
        (§ assoc this :spendable-coinbase-depth 100)
        (assert-state (.. (:genesis-block this) (getHashAsString) (equals "000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f")))

        ;; This contains (at a minimum) the blocks which are not BIP30 compliant.  BIP30 changed how duplicate
        ;; transactions are handled.  Duplicated transactions could occur in the case where a coinbase had the same
        ;; extraNonce and the same outputs but appeared at different heights, and greatly complicated re-org handling.
        ;; Having these here simplifies block connection logic considerably.
        (.. (:checkpoints this) (put 91722, (Sha256Hash'wrap "00000000000271a2dc26e7667f8419f2e15416dc6955e5a6c6cdf3f2574dd08e")))
        (.. (:checkpoints this) (put 91812, (Sha256Hash'wrap "00000000000af0aed4792b1acee3d966af36cf5def14935db8de83d6f9306f2f")))
        (.. (:checkpoints this) (put 91842, (Sha256Hash'wrap "00000000000a4d0a398161ffc163c503763b1f4360639393e0e4c8e300e0caec")))
        (.. (:checkpoints this) (put 91880, (Sha256Hash'wrap "00000000000743f190a18c5577a3c2d2a1f610ae9601ac046a38084ccb7cd721")))
        (.. (:checkpoints this) (put 200000, (Sha256Hash'wrap "000000000000034a7dedef4a161fa058a2d67a173a90155f3a2fe6fc132e0ebf")))

        (§ assoc this :dns-seeds (into-array String
        [
            "seed.bitcoin.sipa.be",          ;; Pieter Wuille
            "dnsseed.bluematt.me",           ;; Matt Corallo
            "dnsseed.bitcoin.dashjr.org",    ;; Luke Dashjr
            "seed.bitcoinstats.com",         ;; Chris Decker
            "seed.bitnodes.io",              ;; Addy Yeow
            "bitseed.xf2.org",               ;; Jeff Garzik
            "seed.bitcoin.jonasschnelli.ch", ;; Jonas Schnelli
        ]))

        (§ assoc this :addr-seeds (int-array
        [
            0x1ddb1032, 0x6242ce40, 0x52d6a445, 0x2dd7a445, 0x8a53cd47, 0x73263750, 0xda23c257, 0xecd4ed57,
            0x0a40ec59, 0x75dce160, 0x7df76791, 0x89370bad, 0xa4f214ad, 0x767700ae, 0x638b0418, 0x868a1018,
            0xcd9f332e, 0x0129653e, 0xcc92dc3e, 0x96671640, 0x56487e40, 0x5b66f440, 0xb1d01f41, 0xf1dc6041,
            0xc1d12b42, 0x86ba1243, 0x6be4df43, 0x6d4cef43, 0xd18e0644, 0x1ab0b344, 0x6584a345, 0xe7c1a445,
            0x58cea445, 0xc5daa445, 0x21dda445, 0x3d3b5346, 0x13e55347, 0x1080d24a, 0x8e611e4b, 0x81518e4b,
            0x6c839e4b, 0xe2ad0a4c, 0xfbbc0a4c, 0x7f5b6e4c, 0x7244224e, 0x1300554e, 0x20690652, 0x5a48b652,
            0x75c5c752, 0x4335cc54, 0x340fd154, 0x87c07455, 0x087b2b56, 0x8a133a57, 0xac23c257, 0x70374959,
            0xfb63d45b, 0xb9a1685c, 0x180d765c, 0x674f645d, 0x04d3495e, 0x1de44b5e, 0x4ee8a362, 0x0ded1b63,
            0xc1b04b6d, 0x8d921581, 0x97b7ea82, 0x1cf83a8e, 0x91490bad, 0x09dc75ae, 0x9a6d79ae, 0xa26d79ae,
            0x0fd08fae, 0x0f3e3fb2, 0x4f944fb2, 0xcca448b8, 0x3ecd6ab8, 0xa9d5a5bc, 0x8d0119c1, 0x045997d5,
            0xca019dd9, 0x0d526c4d, 0xabf1ba44, 0x66b1ab55, 0x1165f462, 0x3ed7cbad, 0xa38fae6e, 0x3bd2cbad,
            0xd36f0547, 0x20df7840, 0x7a337742, 0x549f8e4b, 0x9062365c, 0xd399f562, 0x2b5274a1, 0x8edfa153,
            0x3bffb347, 0x7074bf58, 0xb74fcbad, 0x5b5a795b, 0x02fa29ce, 0x5a6738d4, 0xe8a1d23e, 0xef98c445,
            0x4b0f494c, 0xa2bc1e56, 0x7694ad63, 0xa4a800c3, 0x05fda6cd, 0x9f22175e, 0x364a795b, 0x536285d5,
            0xac44c9d4, 0x0b06254d, 0x150c2fd4, 0x32a50dcc, 0xfd79ce48, 0xf15cfa53, 0x66c01e60, 0x6bc26661,
            0xc03b47ae, 0x4dda1b81, 0x3285a4c1, 0x883ca96d, 0x35d60a4c, 0xdae09744, 0x2e314d61, 0x84e247cf,
            0x6c814552, 0x3a1cc658, 0x98d8f382, 0xe584cb5b, 0x15e86057, 0x7b01504e, 0xd852dd48, 0x56382f56,
            0x0a5df454, 0xa0d18d18, 0x2e89b148, 0xa79c114c, 0xcbdcd054, 0x5523bc43, 0xa9832640, 0x8a066144,
            0x3894c3bc, 0xab76bf58, 0x6a018ac1, 0xfebf4f43, 0x2f26c658, 0x31102f4e, 0x85e929d5, 0x2a1c175e,
            0xfc6c2cd1, 0x27b04b6d, 0xdf024650, 0x161748b8, 0x28be6580, 0x57be6580, 0x1cee677a, 0xaa6bb742,
            0x9a53964b, 0x0a5a2d4d, 0x2434c658, 0x9a494f57, 0x1ebb0e48, 0xf610b85d, 0x077ecf44, 0x085128bc,
            0x5ba17a18, 0x27ca1b42, 0xf8a00b56, 0xfcd4c257, 0xcf2fc15e, 0xd897e052, 0x4cada04f, 0x2f35f6d5,
            0x382ce8c9, 0xe523984b, 0x3f946846, 0x60c8be43, 0x41da6257, 0xde0be142, 0xae8a544b, 0xeff0c254,
            0x1e0f795b, 0xaeb28890, 0xca16acd9, 0x1e47ddd8, 0x8c8c4829, 0xd27dc747, 0xd53b1663, 0x4096b163,
            0x9c8dd958, 0xcb12f860, 0x9e79305c, 0x40c1a445, 0x4a90c2bc, 0x2c3a464d, 0x2727f23c, 0x30b04b6d,
            0x59024cb8, 0xa091e6ad, 0x31b04b6d, 0xc29d46a6, 0x63934fb2, 0xd9224dbe, 0x9f5910d8, 0x7f530a6b,
            0x752e9c95, 0x65453548, 0xa484be46, 0xce5a1b59, 0x710e0718, 0x46a13d18, 0xdaaf5318, 0xc4a8ff53,
            0x87abaa52, 0xb764cf51, 0xb2025d4a, 0x6d351e41, 0xc035c33e, 0xa432c162, 0x61ef34ae, 0xd16fddbc,
            0x0870e8c1, 0x3070e8c1, 0x9c71e8c1, 0xa4992363, 0x85a1f663, 0x4184e559, 0x18d96ed8, 0x17b8dbd5,
            0x60e7cd18, 0xe5ee104c, 0xab17ac62, 0x1e786e1b, 0x5d23b762, 0xf2388fae, 0x88270360, 0x9e5b3d80,
            0x7da518b2, 0xb5613b45, 0x1ad41f3e, 0xd550854a, 0x8617e9a9, 0x925b229c, 0xf2e92542, 0x47af0544,
            0x73b5a843, 0xb9b7a0ad, 0x03a748d0, 0x0a6ff862, 0x6694df62, 0x3bfac948, 0x8e098f4f, 0x746916c3,
            0x02f38e4f, 0x40bb1243, 0x6a54d162, 0x6008414b, 0xa513794c, 0x514aa343, 0x63781747, 0xdbb6795b,
            0xed065058, 0x42d24b46, 0x1518794c, 0x9b271681, 0x73e4ffad, 0x0654784f, 0x438dc945, 0x641846a6,
            0x2d1b0944, 0x94b59148, 0x8d369558, 0xa5a97662, 0x8b705b42, 0xce9204ae, 0x8d584450, 0x2df61555,
            0xeebff943, 0x2e75fb4d, 0x3ef8fc57, 0x9921135e, 0x8e31042e, 0xb5afad43, 0x89ecedd1, 0x9cfcc047,
            0x8fcd0f4c, 0xbe49f5ad, 0x146a8d45, 0x98669ab8, 0x98d9175e, 0xd1a8e46d, 0x839a3ab8, 0x40a0016c,
            0x6d27c257, 0x977fffad, 0x7baa5d5d, 0x1213be43, 0xb167e5a9, 0x640fe8ca, 0xbc9ea655, 0x0f820a4c,
            0x0f097059, 0x69ac957c, 0x366d8453, 0xb1ba2844, 0x8857f081, 0x70b5be63, 0xc545454b, 0xaf36ded1,
            0xb5a4b052, 0x21f062d1, 0x72ab89b2, 0x74a45318, 0x8312e6bc, 0xb916965f, 0x8aa7c858, 0xfe7effad,
        ]))

        (§ assoc this :textual-checkpoints MainNetParams'TEXTUAL_CHECKPOINTS)
        this
    )

    #_private
    #_static
    (def- #_"MainNetParams" MainNetParams'INSTANCE (MainNetParams.))

    #_public
    #_static
    (def #_"String[]" MainNetParams'TEXTUAL_CHECKPOINTS (into-array String
    [
        "AAAAAAAAB+EH4QfhAAAH4AEAAABjl7tqvU/FIcDT9gcbVlA4nwtFUbxAtOawZzBpAAAAAKzkcK7NqciBjI/ldojNKncrWleVSgDfBCCn3VRrbSxXaw5/Sf//AB0z8Bkv",
        "AAAAAAAAD8EPwQ/BAAAPwAEAAADfP83Sx8MZ9RsrnZCvqzAwqB2Ma+ZesNAJrTfwAAAAACwESaNKhvRgz6WuE7UFdFk1xwzfRY/OIdIOPzX5yaAdjnWUSf//AB0GrNq5",
        "AAAAAAAAF6EXoRehAAAXoAEAAADonWzAaUAKd30XT3NnHKobZMnLOuHdzm/xtehsAAAAAD8cUJA6NBIHHcqPHLc4IrfHw+6mjCGu3e+wRO81EvpnMVqrSf//AB1ffy8G",
        "AAAAAAAAH4EfgR+BAAAfgAEAAAAcYL1NItllvrX81+LuAq6qIdoXrrUiBRLemDJWAAAAAKut4Vhu9v71myuelA4ZqO3kP4eTuqb+uLQE8+CxjfkhsuLCSf//AB0pFg7j",
        "AAAAAAAAJ2EnYSdhAAAnYAEAAABGqWHkclp5E4ehRawBs45b5x4XYaqgtDMoSwqbAAAAALTV1vKUrdjXiTPqPUgmGGmaDGPvVaSoLzWx8iK3xMoSZ3zaSf//AB06PHGe",
        "AAAAAAAAL0EvQS9BAAAvQAEAAACEBXV8WKSX5CaMJjF7nEwm317Fjsj99uhjc4r6AAAAABvhLcOGl2UGckHYybNe0um9fV26bfiZMFaB2f8rNxSAOgrySf//AB0nOH0B",
        "AAAAAAAANyE3ITchAAA3IAEAAACSILqxEicC8TnZGcfxX9/p8FckbxdcatdcW8WKAAAAAEvnJo5A8+Y0mjJYV7kKVLj6Ul/9j/ODgf0w6gefxnUm+eoISv//AB0Usifw",
        "AAAAAAAAPwE/AT8BAAA/AAEAAACEwGnx0ildnoyPILwYNY1jLUALLFQP8DFmeQx/AAAAAOiv4/rCGnLDfU5qDhbuLSwqU96lkyYJaTm8IJmezWdu/eshSv//AB0sAszi",
        "AAAAAAAARuFG4UbhAABG4AEAAAD9pdvx0xs07by26iadZjBdkL97+LVOnWwpYrD/AAAAAK28IuIFDZQEvOwRV/f5ojcFS/6weEx11ir8PLW1uu5XhT5FSv//AB25x8ke",
        "AAAAAAAATsFOwU7BAABOwAEAAAAvgrh2cIRfqt3j/t0Nv1BA22K6KyXCPiyECMF0AAAAAO1z31AjyOj0d/uWX+TDy/5e40t9i1bD76Pz+cCydckTGFJqSv//AB3ZU5cE",
        "AAAAAAAAVqFWoVahAABWoAEAAAAin9TRvZzHe1UspvNuSaHkjGdwPF2/P6eEL9xnAAAAAGZsu6+oXMrRFQzwfmOzChP3du3xlBraNR1IelOBukZvsg+hSv//AB0GJxxm",
        "AAAAAAAAXoFegV6BAABegAEAAADMWpXIGkCsCDeXLbyq2mvPvJex7GJCYsBHb/DbAAAAAM5RkurS0BrKra+/IAxkYqN4q0lMod9qZ/oqjbLLUGH3DHPFSv//AB3B8ocA",
        "AAAAAAAAZmFmYWZhAABmYAEAAACsBE+FLo8osvJgV3Nhn8XcKfQicTbvieww/mCSAAAAAH+sbigSSrJl6CmsC6CyPQhLaDKza0QbkIv5vZli/8QtlFfsSv//AB3Nm/kq",
        "AAAAAAAAbkFuQW5BAABuQAEAAAALyHOUlLDHxaV1oJszrx5E/W6vcQZOjIkAp/H5AAAAADdPJYtimG1A8VllMhUVZ+MISrORF352dqsEbm4rfNWUy0kQS///AB3cT9YE",
        "AAAAAAAAdiF2IXYhAAB2IAEAAADmv3/X93kKY3hvqoeNDcf9jy/zZXMuRYYsZgdRAAAAAHANNC9lx7aDTf+2FTWKGJcBbwRIkTNyGQy+PSektTNVsVErS///AB2/sCUZ",
        "AAAAAAAAfgGs1C3SAAB+AAEAAABLA2DYNKMw7Hgz4w4fUj7gWgeTNh4ppzQhlk+YAAAAACe2SgIK8pTpA/7tk3aHBTNqIAkGEqBD9Hr0YqL15bVk+O46S2rYAB3TpDcH",
        "AAAAAAAAh1KPIu8gAACF4AEAAADOUzZxCACLCrZb56MIxIoEIWeq6nsqRTl+BDZeAAAAAED71QTWHLGhEIJrymjIHUFzaQjcvbP2UVS/r5ySz1DZxapLSyjEAB3+ZlwF",
        "AAAAAAAAkZmkySCQAACNwAEAAABYktUu5mb9Udk13yfunLPLcaMDAsC+/3mVeI0SAAAAABI/8VBwhXPOzYzAuO8REO+I8QPR9GREyfye8xg/SeKFr5ddS3G+AB3Rki4H",
        "AAAAAAAAnDAd9NKmAACVoAEAAACFilxtRYgzqoP3t+VtccYEy3EWXruBBLgvZN6NAAAAAOQIwRAptf27kuoO6436E4/6Oszg9p197r6xQAyFBC4Bcj9rS8OMAB0JvYvV",
        "AAAAAAAAqoNHCwIiAACdgAEAAAAaIxCXtqtiecgPJGdKLI7luahI4dRXFa2JtjWBAAAAAKgiuv5u2GAOP/zm1h0Q3xkn6v6bv2d8tExNIJ8UPGuo24x4S1dGZRzOIiEY",
        "AAAAAAAAvmyHarHKAAClYAEAAADnCfys/hFGQgTkzB2vSntj33KnQqWfTz7vloQwAAAAAABWa9XPFhrodgII7+bi7V7ZKY4LdK32GsS2u4/OLRurIOaES+WzQxxj7JoP",
        "AAAAAAAA3DRAqLy1AACtQAEAAADVXhtGjCJ5iXEnIDfWzAT9rHORPAAS0NdjDC4aAAAAAOq7qNFZRow8B/dQ23du37fM4u2Iq0TzBUvkToq3/g+geU+US29/OBxybZMS",
        "AAAAAAAA/+MWO9HLAAC1IAEAAAB0sfE3ZrOH9/bpE7QmobN2hQGrURvpzWzCCgwuAAAAAMHzQY7OI3TA/mkBu2E506clAApINgYlj7dWP5YemTVAoKOmS3UTOBwat3W4",
        "AAAAAAABI9gdtV3rAAC9AAEAAABVUxeUXAvmF4DxYzNSXjTs3IfwlYe24l/4JjIQAAAAAILT2J+G8f74uNmyAW9JnWDFnSCl8rRYYeO/CGV2cQT5an60SxURKhzFK+US",
        "AAAAAAABU8Zb6gtBAADE4AEAAABzkQWrX5ewFL+e88S/O5SY51fz1vhH3tRv9uYaAAAAAJTaTzK11MIXSRfGlZ6U4TmS6ig5c5ursTao8hscqvB1UtzCS6e8IByBlYEF",
        "AAAAAAABkV70dMN4AADMwAEAAABzQ8F6sjmLrNKzryUaZi7JdLbAO010YgFpIj8KAAAAAP1LgY2K8OcupHdUOpaCsyr9fUIXlpzbdBt0avYxCqcvtHPPS29UFhwF+4oC",
        "AAAAAAAB66jAzOGJAADUoAEAAAChpKuAo68wSmzShRxQOiDBWPhqRJdaUTxsQ9wGAAAAAM4DdGfpuItjzlXnWMf7MSwgVK8RgKssPtXqwdXN88sT6OzfS1PsExwAKkUF",
        "AAAAAAACUNgZQS8CAADcgAEAAABGy7ccvE9OZlfB8ooqhI7/kAfljEnM/4AW/kMJAAAAAMW9Vt6y4cOodVR1e6CC+h8KszLNFJOJ1/MS2NVV9c3wI/LzSyScFRyE42MA",
        "AAAAAAACric7YGodAADkYAEAAADpBN+TLkJyTO13QgCm1Seg1aF+BfvBdkMUskcIAAAAAGLtcb3OjIaURBNKOaF4p0mBbLm7wNHFqhwx4c5GMsJKSB0BTFxnDxxWg7AB",
        "AAAAAAADMQiRgEj1AADsQAEAAACTTCvVpFYYC0BDQaOA0g9R0IYrODEd602VBUUJAAAAACmaFwLknPabw9Cm7uJ1EMw8ylpCfh0ACyzK+QcRaq9IIsYSTGS6DhxUI8IE",
        "AAAAAAADuew03p6EAAD0IAEAAAA6WlncsAaw4UiyqiobivpJ8SzBiun3s+wsJwkBAAAAADRA95fGOcOU0tS3CRxB1QIXkXUSwHLdWnY8eXTGzKBGLk8jTEIxDRyYDQAB",
        "AAAAAAAEUsD4KRv9AAD8AAEAAAB3mRBUPOiZ5hS9pWBQ/9aiGOv/JQZ5m+MPquYJAAAAAE547xZxUzivsp41YiAUODrIlX/mG1ZpjCF6FO7PapRSmI0yTJPkChyl2HIE",
        "AAAAAAAFC+ocnh7zAAED4AEAAABOjlzzxOS49jqc+IvrLbq6GUkYIQGuTlz1StEAAAAAAJ8qI0ToESsNe9gIlBQQbuXxe7bNZAeIg+G2YfolGqxr7R08TPSjBRxNzSsC",
        "AAAAAAAGcd18PyutAAELwAEAAAD7V8cczSEbPeTMwuI7UKfNtyqrkeYHN7Oiv98DAAAAAIioitnfaJJeiA5dUrflDO8iWHHGi0CizQvKEITNQ2A384hATP1oARyusfgB",
        "AAAAAAAMB8kDIyyqAAEToAEAAADD6WaCS7mIy8rpGowIPm8ADfcBKSRt1oHRacEAAAAAAIXKGhu6Zhlug2n/7LzalLkMyfbryxZSk3HmsnB0OWijnkdOTFoMARzC4UAe",
        "AAAAAAATi2pVCXgAAAEbgAEAAABuuUVfO7THPxPwWyd0NoSO21akwS9qnUPR9wkAAAAAAEiIfxRoBMCVZJ3RAgadDm8U2Emkwiaa+C718mk4wDOmGxVbTBi6AByPS6Mb",
        "AAAAAAAeYVnHFS1UAAEjYAEAAABPNXbFSDLkdMOHdA9poStLbQ+1SDWX1/qouBEAAAAAAOQ4wJ3d+Vwy2ler4Em9KqKYX13FSuZO5Uwrn8MuTnvKT8tnTA6AABwRqw5P",
        "AAAAAAAuIBCUxPZNAAErQAEAAAAMLHyqT8JOZ3uNrJxMIRGYEYT3nF1HzLZW6HcAAAAAADzTVc2lDiLbmEP5ncM8q1TEw0P1d1kZkZqI0qOstTWCE/V2TJggaRtSQENM",
        "AAAAAABBTaleRTLoAAEzIAEAAAAlZmyAjIigoxs18ypRBJig75D2ZTq/LE9Hu0wAAAAAAAxuq8lWaFwsEaZxcX1OTJA15F0DjrkhHxnywMPxRSpvcRmHTObtWxuucMl/",
        "AAAAAABXPIQiUz9iAAE7AAEAAAAOhg3mXDWpTS4zW+fXmqu2493zkY5tZcYeWyMAAAAAAONqvCEnIp06lK4OIGegp1yrYWKdWy8BuSffQ7bAAloIl2+VTO1mRxv7EbsD",
        "AAAAAABzehv9C0l3AAFC4AEAAACT7yN15axxWGpjC1n+47CGMLk9SeWolSw6FSoAAAAAABA+E4IjPusGLerk7HrCivj8acYXn2aCEu372jArVFnn5EiiTKOyMRsHDdHI",
        "AAAAAACcCwa7161CAAFKwAEAAAAYu2Hy5/kJBwLEG10x8fl0i04a+YyQhOBQlQ4AAAAAAArXQ6PkzrrBgvhKUkTtzFqIxoUXiyHff/hsoJdImTapifOzTJ2OLxvHJJZv",
        "AAAAAADGcizpOqWNAAFSoAEAAACN8pQ3PhGo4sERrtXTpnOb0/zTY7SFu/P+LCwAAAAAAGOKxXywyaEdnE6m2j/R329FjWcT7Ik00IteEtdUebhr68u/TMp+HhusHmHS",
        "AAAAAAEIkam6YfY0AAFagAEAAADh30gW11VBqbrSQNM6ukmK6ZeqdJbifnUrqQ8AAAAAACDHJEysJCNUsN8EbEVwz6SQmJoqti5smpttkZ65j6jzJ6PMTGMyFRuA3aKW",
        "AAAAAAFnsxsL7bFwAAFiYAEAAAAc4v5GJY2z3zyrtqhu7k4ARQ3QE468HWBxBQMAAAAAALGcBXeoG0iIxmCRWbmxxJuqTw2MbxO7yaWFqtPGnA7vqD7ZTFZyDhuzuSCd",
        "AAAAAAHzSIpICAQtAAFqQAEAAABumKkpH8OkEjWXUUwyG9yx0g+ygjDmQu+ttgsAAAAAANaKSEb9lDLzLNfwpprjRq0Uvin0MuE2pITyu95WXMzbEnTlTCqLCRuVWmqp",
        "AAAAAALGiuyDfLOtAAFyIAEAAAAvM57vt+IeRLFZmxK3SNIwrK2425iKeJRQdgAAAAAAAP7NnzKGhchO/AA4XJp1+Iz4RdKW5I2Ta00HmYMK0VYfYyj1TNIcCBsMkObi",
        "AAAAAAO/G/yGVhusAAF6AAEAAACEIIeZFQWvEpVVTNBkT288n3B1KfgllqqgMQQAAAAAACiqr64Z2XrwiNMiuoDw3A8CUEq+Gh8m52ZSwRBwb40OElYBTVNZBRsC1GJ2",
        "AAAAAAU4Cq0i+3IeAAGB4AEAAAD56JBkoYAvTbuvRNqKp7TLA01rjlf4uFC4kgIAAAAAAJNpGsZYATB7pFLumTP7IhNBHlmmwGrXksjxewgYcrfRG/MQTUyGBBvh1Pog",
        "AAAAAAb1olFOzFrgAAGJwAEAAADd91CQvr4E/QC9XVSUWn53X/IaASN04oT+WgIAAAAAAHpxEA2jK0VPFeGGO23aFIyDD5LA6ZgGwQ9prGOS6jy5M1ohTcsEBBsk2gT4",
        "AAAAAAjrUYnT6V5sAAGRoAEAAABlHWfOi38ecTZB4glpgP105XtDQCquzJw4DgAAAAAAABST87fUh282dXEyCJyhQITFUHXXxa4fx7UMfHzLTIMSf64xTe6NAxvI2xyO",
        "AAAAAAsijirlaxLgAAGZgAEAAAAOpFxTktzl/dOPLErGEEBuLs8ml2TBa78QBQMAAAAAAB+2TsOI4Y1317Y5+F63s2rL6djntagB7QZyZUVj2ARuyylBTSn6AhuqgXZp",
        "AAAAAA3Hw+JhyZf6AAGhYAEAAAAi6PTZIB2swuWyr3tAauRsnHc1yE/xV4BkggAAAAAAADsWVAiBrukpas4xPzUaJeMtomg9TH+XAOeTxuaSr8HYQMxQTVKFAhs5IzHm",
        "AAAAABDnrS48ncEpAAGpQAEAAABOJQECIjzF1KnyO9RZ8dmmcQQBWSmy1syK8wAAAAAAAF5sBpLOm6f8Htf6nHUv6vCeEywzNMm6cF7aLHM+VdbHiABeTSbMARu5m1XJ",
        "AAAAABVJjeXJZ4UuAAGxIAEAAADu9Ez5w+BKEGyy3xS/gojNg7hei2czMafXTgAAAAAAABFxY2+JKb1awlsDJVEzV/ZNb72GbemXrE1P6F7mU9wqeCBqTc0tARvDXXY/",
        "AAAAABv37IPNI3JzAAG5AAEAAACWH5gseRQiSptSk/gQzI4C1FcXmmTP9D+7NwAAAAAAAOWKot7bLs8JHrB3lAe+ZHerymH/PYljo7c8vtDmbd8qA5x3TTHcABvvW21U",
        "AAAAACUfql1QEymxAAHA4AEAAAAv8ohrUL/oduWhcjQhj2TAnR4Yf/5ZZfQIgAAAAAAAAElAgSvR2+lo/Oed1Io1FCCTJWyMZrjt+lhRLfLvvEQccQCMTTnzABsay2jS",
        "AAAAAC1pxu0ZLTeuAAHIwAEAAADI2DEKu2nCXMXNN1rJTISIwPY7cdtEJAwdaQAAAAAAAO4A1DU45uhYzf/CTTZf+ophrOJVgxxfedWYV9th+niwFXebTb3LABt8jSBp",
        "AAAAADdPD9bcmy/0AAHQoAEAAAB19iO31C1znhGXB2FJl8JChF9CSsb8CjsVcQAAAAAAAEKihOUu5fWUpyoyUnLOrWnULP+0/Ajx71vtFMyNb5xtEO2rTay1ABvUDtpP",
        "AAAAAEJoI+HXgBG2AAHYgAEAAAA9A+9n6SMQ8fEWH89uNjG80lqT5eQitayEowAAAAAAAHCWFzCW5z2xc8SyGudru79lXrtb2WYukdpyEUTFTurajHm7TfqYABtYmLhU",
        "AAAAAE+Wj98/9B88AAHgYAEAAACXSksZfv5mthMtrzxYxrcfEpISkD7UkyBTLgAAAAAAAMd5iTUg08WipCJhx8CS8T5hurf7gPrOAG8H7U/2rVtz5FnITbOTahrmxhR4",
        "AAAAAGKCW50/mAYZAAHoQAEAAABNFN3lnjqvgymDGuYYf6pGUSXrx927xDXkMwAAAAAAAPKsZcG8icpZYbkeJtcPV5U8uAvDD09roLWB3nEWSIEhf0LUTfK5RBoalF1a",
        "AAAAAH/as/mBH3ZiAAHwIAEAAAATL2aG9zIfGmonitIhGPqRP3E+Dl/UC0v/KAAAAAAAAFB4Cs4JOIIEgOcbrugep4UTC8gp2hRS/bWJzFgWLwpm9J7eTSGUJhpFQ3Lb",
        "AAAAALQefiGP+OX+AAH4AAEAAADVoF/7eWfud4Z4fPa0j+ZNrwemFuEYU8f5HgAAAAAAAHmhgeO1687EXKlOfzCSyKj3L34b3Gt415bo3my4eJenIcfsTS+THRohHwoF",
        "AAAAAPhNq5KCvJBVAAH/4AEAAAAjYupMfkApQ+F7WuwrHqo61qpHgstMaZhuDgAAAAAAAJjY1qtpNn506DxHOfKO2yv3KZQ14pMjv2NeVvYXsSe9brj4TYUhExoLyjiL",
        "AAAAAWG2X3vudTCOAAIHwAEAAAC069TF2G2EdSVeCC24PEyE0aYjJUtXUyEKAAAAAAAAAHsOGnYqwwLFqEwJl4Rlz5ejh9cc+cPOTWZfXVncIjDa03gEThIqDBoCuZRI",
        "AAAAAgd0Jpp8J4p3AAIPoAEAAAA96H6SIrmh4lozEuOYB/Ocl4iDKvsfGyypAgAAAAAAAFtPgBPFjrDD9Abvtt7rIfpF/ZCmXtK/hiyElBCjLnAsIscUTs+7ChraDJcW",
        "AAAAAsNIQ2KTHCwRAAIXgAEAAACm2s1lZeANbPnchswuTipn5yI5c84iFEvVBAAAAAAAAJ2hK4JwdDtinLnXvrKRr/4jA/ow0xRerF5EztB/g36WndklTgTsCRql2r6K",
        "AAAAA4568Asa4obxAAIfYAEAAAAtJnC0MPYlp2pgsxXHCws0Qq9nv8uWrpHdCQAAAAAAACfx8m614tr8PBSy8Kext/FHqJjZJvH7VGT5PCP0UE80p182TuXhCBosiyag",
        "AAAABHFw4cEr+kswAAInQAEAAAAKXYjM0MVrm75MhKyuclCi1NxbqS9SeD3TBwAAAAAAACySAw5igb5Xvsd2sITcMW/r/LJIerluxxcIrzZTGVXpdq9JToZKCRod2gnt",
        "AAAABUprw7t3ffo+AAIvIAEAAADSRgUSvXLJuiZdImMAcIa1kIP2KBLd9VfdAwAAAAAAAObyH80swCvzJBXItN3SAM8ogjQDawFZivOgF6TUzi4x13FcTuNvCRoWqGlT",
        "AAAABiALqBnpgDLzAAI3AAEAAAAEdlPrXTB9zxKW5rFDpb0f9ZLDR4uHyt5rBwAAAAAAAMiW3XWBljdNYF3OLD6ME/g0Sawo1F/HNFUW11FluM+xDCNvTqWOCRqHj8OE",
        "AAAABvL7X0R+mhkXAAI+4AEAAAAwPla4OPbkCMpZTRG/HHYNIWL+nY3htxvrCAAAAAAAAPy77i4U+Lzixlo7w3Utr1lkWBDW2i83x8zth5Ch/JARaFKCTl3uCRoOcCKg",
        "AAAAB733nt1u769iAAJGwAEAAAAJX4QVGRlNwJoij6ar/fHoUXx91+SF2NiwAQAAAAAAABJbmEq55/zj1QA2CMl2Y5+RccWFa+eKzO/4dAGyq2RmA5SXTkttCxoExfRL",
        "AAAACG5gfCYS94FlAAJOoAEAAAAwfCgqsDrim0wjAIl5O/zJcrCaX21xOqobCAAAAAAAAOD0xYkK2PKCePrC5H16jhMbyyvoZYVMuEQHvKYmiom2FhmuTsrwDRoWLVAc",
        "AAAACP79cJpvSRE8AAJWgAEAAABXRhwPRJeSHLmbYJMdpuk9XbbUsLkkAo24BQAAAAAAANzBngmWFfbH3uV5Ibn+h/YmnIZttuByKXOAYZNz2qA9irvATpoRDhoDxfA8",
        "AAAACY5HuhbVBVwFAAJeYAEAAAAf79lak+p5Wjc/JGFumn0LZTqkP0BwaGp9AgAAAAAAAPXPYczT7AW2lY4zD1T7vUC0MVSV8xf9J2MTzoLTxmY/JOrUTrFhDxpRYTHJ",
        "AAAAChFZgmZAeLs+AAJmQAEAAACUJ/cMj+wJKwxiyMUhln9V9gLz5IYLSaMQCAAAAAAAAB2r9e2ixMAVCFmJswQQWEWnpRiVgr4pAjAERg1xlQhnK1nmTmiGDhpKDsil",
        "AAAACpwlFy5EWSkdAAJuIAEAAABg7Z7T1Yqlqsyzt3YVJX5x3p+Q6tCovDM4BwAAAAAAANFu2klbATzndp0N9uY2vlDa6LPMt+TLFqlJQWHv7t3YTcD4Trp2DhrnmPoE",
        "AAAACyeIcihEzkv/AAJ2AAEAAADEg4HEOx0uvThscJcSiapp6XT/KB/t0n8bAwAAAAAAAPzsAUUCW4rIEbSG/JHwf1o5ohcMLu4QZiON2kVFr3C2yN8JT9dpDRo1CZm1",
        "AAAAC73VXDIumXtpAAJ94AEAAACmS77xVScJJnHVjObyMbVAHYGDKTi6vDgHCwAAAAAAAOlTxivTggIx0puQOlthPcJsCIx1jzjl02blLi/e3xVkmIgbTz/UDBrwMAUO",
        "AAAADFr7Cx3r9hwYAAKFwAEAAACkmkpjgOn7AT64NAk6wxR2wJekP179y2QGAAAAAAAAAP0D8cC8X6ruMAajeJmA4tp7e7VsKB/M2VkpV04hazk2SQktTwspDBpqP8jm",
        "AAAADQDD92shJKLCAAKNoAEAAADEVRQMfQ6UxE2SR4wqglkM5HCaKDnfILUeAgAAAAAAAIDF6zgqmMVXOTTQlUNF41Jz7gJAJmgWAER/CytVTkiBX4o/T5wwDBqqr1mz",
        "AAAADaYn4I9tHzJ9AAKVgAEAAACW1DNxxihcn0Squo4M5sWH6A8lvBEbxOB1AgAAAAAAAM3n58PZtu3N0n69nzHusMHcYCtwflEcvElqVAIwzF0vAIRQTww1CxoGNrB5",
        "AAAADloKPAUfc8b1AAKdYAEAAADQvnrUsCSWVD2f1Pr4ThpOj37uDO6+/bB/CQAAAAAAAM4luTI2jCl6KmxqQgCcPh8KqmfiVME5nP97OfQI4IauUvViT4cyCxonLq60",
        "AAAADw4XATBzG8RtAAKlQAEAAAD1mgn8pFdHzWlsL+p4+TTld1I2NJ3hmhk/BQAAAAAAAF02L/fQ0eSSvHWa8uw4/tcYhScUjm8xpNa71eNTLgszG/ZzT35QChpQiMH5",
        "AAAAD9GKm05qR8mfAAKtIAEAAAD2Mh/cMirqRe0nn9Iq1leTS9KCFva057IXAgAAAAAAAHfoU9TLw51Oniu2LYCbHyq0JcA3+7Y0D/RPDpIK1EXeIf2GT+OhChpQgJaI",
        "AAAAEI8lntC9UcgKAAK1AAEAAABZI0tpHBTemiDAT8aDGaaM9JMjcNSsdx2cAwAAAAAAAHXvjFwT3zqD3uCFgRyZucyBn4+FjLpKUl0euFNzZfNYMk2aT/ceCxr60a6O",
        "AAAAEURwkTBm0hBWAAK84AEAAACw0l+csvrkIyh0w5uQUifOvi9sDzN4DD/lCgAAAAAAAIsgmncZxVK6S4NyzNFMUetb9Fi18GyH0Zk9YlP5pacwQV6qTwKuCRpdiCRi",
        "AAAAEhSzp2ra1Su2AALEwAEAAAC4B8LeyLc19xu6Exlvadwm0sdeqDGGK9e0BAAAAAAAAJBhxxlqAJuWFrDLwak+cMYzThvW7+J5CIUKsDTGWf7ylXm+T1+LChoiXXen",
        "AAAAEtPkexWmwmgDAALMoAEAAAAOVsA9yv1hZqT0M/wRg93KXSEvffu/NWfgBgAAAAAAAHuzpeREEX+2b6wH0wGNPrt8qLDKEavOcaQOrDQ+CtMQhQnRT9aYChrRBrot",
        "AAAAE5Ikrv8DV4yUAALUgAEAAABgqLa1IT1k1FXzrrDIMLzqOLP/OEoNEcBfBQAAAAAAAKcijpw/NlTmWMDTDHopVig40nBlHhfaZb+mpe4+Az4IRPfhT4q3CRpgkXRL",
        "AAAAFGGeB1erGaGZAALcYAEAAADoP3M4pxcBIDcMFEoOH4bEhEDBBuBNy2kbCAAAAAAAAFNVavLdhzXOWO+njASenf6QnHLa761w7Y0m669TbsVo8Sr0TzGUCRrNjfIK",
        "AAAAFTQWW0ADOWr9AALkQAEAAAAa5Cec2+NWDxvJVbhp2TO6impbC9TycAeSCQAAAAAAAJwfJZ2A9SLpm7f2CwGKjZbc4TA/3oFGB/udJk7KUA08zn0FUC79CBopvPmW",
        "AAAAFhRfPDePwG9uAALsIAEAAABB6bFBFgVuPvzw/1n0Ud7MckylhKa3HN2RBwAAAAAAAK1J//wVA6Cm1OtFEXe1ixsLmnO2OfqJzKF//X4x92IlWW8WUMk8CBorBXkf",
        "AAAAFwkeDBwPjXffAAL0AAEAAABJtKkDwmds89DuFLLZf0tTKM+1mKWhdKSdAQAAAAAAAKmblvkfiTWWyaVnF2BTlnbhBIieMMWhEzm2d1ncX8UK95onUF6oBxpA6qlO",
        "AAAAGBBlsJgRRBm8AAL74AEAAACryGtgxuPGIrHtB53M5GUrd/kwx7qI6DNDBwAAAAAAAFzIff2abwkijY+AnPqk7dMjm9ZPSqbfo4jp0SU2VwCtfy44UL7fBhrISt0+",
        "AAAAGTWxEEhUcQSWAAMDwAEAAAAgd13snTsmAw6NVYeXwd7zePNFxBWRZoBwBgAAAAAAAF9p3DIalr/1m5D5HHwIioy0Mp6vqQvXAc96m9ZQTcYtHedIUDg6BhoaJmL3",
        "AAAAGnlueBNyjGqcAAMLoAEAAADxMAVyLCW6TmMToi8xd/5fHCSs9IP1C3YEAwAAAAAAADx5cYOZfXdScyl5oKbjMjjNawr0xA7EYHrK+JA9lZFNs0NaUIvbBRoA5+c0",
        "AAAAG9GcmthZbdjQAAMTgAEAAACdb04J1XnJMBWoPpCB/ug6XIsbo8hlFrYfBAAAAAAAACU5kxe7XHxNrv6P4sTfrAzqfk6FkTzWZwMDdyQMrf6TpJBrUAh+BRqEKX33",
        "AAAAHUCr5swt9qOtAAMbYAEAAAAOv2o9GRg/8y1XLWbrxHEtdKsre8il8scvAgAAAAAAABeUG1JXau20Seou1gCnOZlXswxzeP9ML1f0Pc1AZN7PCOZ9UO91BRpFpYNz",
        "AAAAHrHeyAV5YSc0AAMjQAEAAABAZmBk3O8vEZQmYHidW1GZ5iRfvDi6Q208AQAAAAAAANfNnMW7CBMDtOb30L0LvjerUrWi3VgqqQ4bziAHWSLiYxyPUMUTBRoLaE5N",
        "AAAAID7w/0q0w+tEAAMrIAEAAACEAu3/yPyJMhG/gP38DabMJ9/9EKi5dlFmAQAAAAAAAHvvIIvSBR3lDrxUytZSfsnG6fpXIKLJ1rmh1lUQKZ2IEjmhUOv6BBolhGb6",
        "AAAAIdPAt1OPHJhgAAMzAAEAAAAL63cL6rTa61a2v+kslB1HkRAPoFYP+G7cAgAAAAAAAPgG0PwzKZZLrkwGcp6TuLOU1F3Wt4JkaXWywHxYCxtdJU6zUOrgBBqXcK0c",
        "AAAAI3D8CCdlC05fAAM64AEAAAATq9as/QRQZ7NbiW0sDnHluYjKSOxGVfqhAgAAAAAAANQbrFUPE8FvhfwF+W7JNRJHVh14heISWRWR7b5VfmSh9SPGUGL6BBqMTELu",
        "AAAAJQXwPTXDhACjAANCwAIAAAAxPP6YZ6jlPWT7RK6E2qfsj7lJ5hF8URf1AAAAAAAAABl/qnGZKjJp0IIx5S8o4aDy3kg4LNgKtRqq5z614rqxNATbUGuhBRomOKY5",
        "AAAAJmwAf/q9P+cfAANKoAEAAACPblqJbabQH2TbrMtrZR8l+axIM5IqucqZAgAAAAAAAC09O54ycjSjp8dTzItlFq538Jt1bF0CvcEpFWOs4q/BovfrULEpBRpX6ilq",
        "AAAAJ/J3eKXIz1D3AANSgAIAAAABRZOAGGYwZlN50BoxbvPxBg86LPd3uQh1AgAAAAAAALzgN4eDziYqEw119Dzzwzurc5+pUwsJ+JDVgr6ARRJt1y4AUbGmBRp1B5Gy",
        "AAAAKVc6LSc1FRwRAANaYAIAAAAbH93FOSRPWG/NfO3rBAHvv2/MUpQiWVmSAQAAAAAAAKY7Csuyrndi76Fs/hyUdggrElc5MqdWbxukEnHoaooGquoQUTwfBRomGdg6",
        "AAAAKuDYXV70w/Z4AANiQAEAAAB0fMxQfLC+i0WNqq+UwWj0ilVf2gmVqEyzAwAAAAAAABRg8vGFXXX8G+iq8htYsAT+yq4E/8aBucbP2mQfYiHXNnohUVyYBBojbQ3/",
        "AAAALJecaPrZYKPwAANqIAEAAACzrQE86vYXPV1BiJTXT+NSxWzIsEoxnlV2AAAAAAAAAK2LAZvcSpmHGAjlUShbA7ZaLT3IfXRkE/gsz1XgLbsplOgwUUvXAxoIBach",
        "AAAALqSBJ3xxQCqZAANyAAIAAAA7RsEWj0exJINl8W5+sX/z0g7DzVIyBFg6AAAAAAAAAC4B+s05egCjPETbDmhebyCCcbBpdbT3u32O/8ay+YpJGotBUfp1AxqiOdh6",
        "AAAAMOshluKShCFIAAN54AIAAAAzU7TKXCHZoH19IRxxk7aVgWVAAuZn96sbAQAAAAAAAPL2RBMH+xgPoT10EWBjnN1BWoWmBDPMkwMq5bpLx4sS2epOUW6BAhrKeVCM",
        "AAAANA/KxJsaP77MAAOBwAIAAABdlYLIwE/94xkZTJ0h0RYljq3MgLSP0nl1AgAAAAAAAD9CSF2KOy5Zk39VyYYdA1kJupx14DRVM/JLdZ6aCsr3mwxfUb4vAhqsfhrZ",
        "AAAAN6nk5ERfML0DAAOJoAIAAAAAtdqp/fl9ct41VWrFfomB/BW6gH/gb1R0AAAAAAAAADNrYZ0Eb5RiuhZPF7JFQBTvEDG3/WnZbaX8nL0zfFk3ltVuUZTeARobGMYL",
        "AAAAO+BasIUNWPGiAAORgAIAAACjLHUiLhYdG7zd5Ya2O01MT4kHDLgzWMW2AAAAAAAAAK5mqGpC6ZQ7ZnXyK0LXFF8BYbzSI3wGim3WOOFZb+C910l/UT2qARrazPpz",
        "AAAAQJs8dZBfNdApAAOZYAIAAAANsIJdf+Ui6vXdRtBYM9+/NS4SUweXL28yAQAAAAAAABsqQ5um7w9WRee0f7Vb7HNcdvueFJCBObOC9hVPuFhbS+qPUel/ARqqe+Tl",
        "AAAARdubuHv8LyGEAAOhQAIAAAAG0xnwlWIw3fYL/bp0yXP/ZCSRE1Z0hBBkAAAAAAAAAGfFE8jd5wD3Ca0oDZpjKeKdgNrievB4JELPLSNyKE6NYuigUWRhARoG14wH",
        "AAAAS5A5744UbeXgAAOpIAIAAABZRaZ2UpQ6X1IBwpWNV6Yxaay7pbHdBeEaAQAAAAAAAMQVh2dfNpqzbdKuLC0oArnPECnFYm3bzluL38N0NMKaTkqvUTcTARol+LMX",
        "AAAAUuOyUN2GANbtAAOxAAIAAABBCr6r8AfBJHlh0qzRMzk/r+qJrxnub7bZAAAAAAAAADfrE8EX9QmSiaQ6u9Whc/7wQEfbmAwMuExqGTDzucYUHjC+URXeABqMFDHt",
        "AAAAW/e2rO3bMUVEAAO44AIAAABXsaSPxeKYWXcGqFcGrESz7nUvDGdCbZURAAAAAAAAAPzO8HRUDoriCg9qFxl3JwrlqXrNON+E1NbYJ2d5pHIfje3OUU7JABroq+pP",
        "AAAAZfvBv1lJV2loAAPAwAIAAAAAATOj+83Z3UVyvRPuaE5JbdGPNpCpHpuVAAAAAAAAABEhIC2Z6rg2k3BxFgONOwCfOhA5to4O60uuuFykKaEX0/rdUSmkABoCIMgB",
        "AAAAckPqyEdtb+UEAAPIoAIAAABgqXEY9fKFjHPC/BwY23KMNf4kPkIea/iRAAAAAAAAAP598fQiaQ7fEf3dWvsPLTY040Kyx0sGDg9gbgI29y0yc3LtUWiJABr2oHhz",
        "AAAAgPBE6lomxjQnAAPQgAIAAAAmzJ9N+BjMCrhyPsO49PKhVuaftHPkRuFVAAAAAAAAAFG/m5KlGJnTl9fAp1tiV4HXoOk/8bTey9tBrIB//iE+y+D8UfLbchlwVoHM",
        "AAAAkn5c9io9/C99AAPYYAIAAADBZC/d504+FDryeR8KwyspNUcnYTIaGWpPAAAAAAAAAG1hClgMQacQYbiM42rd2qMyZcr1SUoe7bDVYbeXtIzY0nYKUjKHVBlIs5nQ",
        "AAAAqljeIvXX4fgVAAPgQAIAAABYIwxBtfqfi8hO52IzM3cCxgMoJxTnyCdTAAAAAAAAADh1tnsooz0WNQJmx8VhdQ+oRhYUvJMf4sdx18lRoEL9Z74YUldSQRk0RO1f",
        "AAAAyTb5Fqr47ML+AAPoIAIAAACX7rVSkZhpCkUal478RqfWOExWBYcrpuICAAAAAAAAACZt+4ZLsZe8wnMe31jhPrKk217aW2kZbfGAgDXUZRy+LLUmUpxnMRnQtVj1",
        "AAAA8gbLBpqIXmztAAPwAAIAAAAEFLb5LL5O9l6rOGRcB7XZvziVEDD/8ysgAAAAAAAAADxSdp5+Gl5BFl6OSTmLOnqTASbVjBjHsHOw7YKx0ppLyPQ0UiIiJhkRNGjN",
        "AAABJubv3Tndk1a0AAP34AIAAAAKM90ssmxG+APltlb4X3ZFy5FZP4kFcZkcAAAAAAAAAJwm+n3C0u+pTKFYGN/E+YGiyya3lPrXI/ykIP8M4c3Wgu5CUiDcHBlSx+6b",
        "AAABbMQtf9ALFvRRAAP/wAIAAADB/4TpX5pz12CzfkRAVrdIZ/zYo4LhPMEQAAAAAAAAADmYdBvx9oBrJryElvTvvM1Syjaye4J8LftvHwVecsOk2HZRUsqwFhkbRYB2",
        "AAABxaHL+NVHoUz/AAQHoAIAAADoHUz2iigStnsjLSd4bTeTg8yet2jbSbsLAAAAAAAAAJE1SXE8H/4K1acSmQz/coP+ODNPp1MO7xcyFtYOvWi9nINeUrYKEBlp4UEx",
        "AAACQ1UC6hrwW/WNAAQPgAIAAACPhaRB9cw7pd7dS+nZFiTvDtNnw3MJ/bsBAAAAAAAAAG7JA7pYje2+TKqKIqcQK1GlzMPAYxrdh99GQVjdxkEq4CdrUoX8ChlyPJP6",
        "AAAC+twK7X+2FztrAAQXYAIAAAA1cxzFmotPC0zH2yyV3ebxRrdqmc5qW+4EAAAAAAAAAFGUvhEXMIryB1ag6FKcDCOu4svzxBRLWYEcJgwfBNFAY0x5UvNnCBmTtj5x",
        "AAAD6rWvenKyMXmGAAQfQAIAAACsDY1USGpUoXzLTDAkKHrzydCFUFE78vICAAAAAAAAAKokpuJ8XW7yyzLGH5Gz2xplbbp8koaWC6KK/BcOCTCpa9aIUvsLBxkl15zS",
        "AAAFCNHimKfmYljJAAQnIAIAAABUFjK7kH+hlwj6cEphh4oUPXWh7P3DkFUEAAAAAAAAAG9DyVe/GGRD9XOHS1cohSqeNooOwSvIT6wGPdmdZEzbOMGYUkISBhkH1JlO",
        "AAAGVOtvey/80pQOAAQvAAIAAAA0mHeB65bRwhvbelQLBBYh/jUUv8DtBLcCAAAAAAAAALY2n76ecRwvbQw8sOzw7hRlerxUpre5FS0sWl+35DMBDiGnUm66BBnBgNK3",
        "AAAH/1t6zJkptGOSAAQ24AIAAADfcmfSNpovmr1d5j2K7S2+D65o3cadxYwDAAAAAAAAAPhaPQ0zPVLKuwrBNs1CMA28iE3BvPNX99H3d3XKWNo+WFu1UgyjAxmJ1R/W",
        "AAAKKbsJOIfFC1GEAAQ+wAIAAAA/VPbqGot5LQuRFHNPJ6UN33xeB1C8eakAAAAAAAAAADJ3SNw46mKUdoJEC3uGPBs+37NpUqZICKAs32SY1ijgvrnEUh8HAxlPXdfJ",
        "AAAMw6Su4LKwrErjAARGoAIAAACFcF4ulUEs9DkuVM0xVm7efLf1jIxUjt0BAAAAAAAAAIFj2Y/SNomyfmn93vY9LKpgDuFqgdsxcAjrjgVYn7widFvTUmZmAhkGG1Ph",
        "AAAQC71UHVphkj4dAAROgAIAAADgP0Ab19JISjI+zUtr+ZRaGjXeYaRCNVECAAAAAAAAAD6y3yI4LkP1tSfApriyMLzLk5RwQ7f5NXrT9lkfKJdJjmriUiz1ARmiymc1",
        "AAAUEZ4ZJqWngOInAARWYAIAAADwfcFacIKz/xtkQBANbOWnmdV4PhYHzFABAAAAAAAAAG6cdoXTGFMoIltzbAilUhwYcqO4aXk6LAviFEIJt1VYyOTxUm6jARlAIc26",
        "AAAY4DTsS2yFIG3GAAReQAIAAAC7sd2bA0Oh9qwHKXz2EnZUXK1tJz3YUZAAAAAAAAAAABHTtpH4Mq5+Z126IM8dCRM+zDPdicm76CtCnxt7fBKbT1sBU1NfARlEoVum",
        "AAAenV5ZFhaJCAWSAARmIAIAAADgYdTpsw4Pj43roethu8sLq5AnfZTTgwsAAAAAAAAAAHNuoPIB8WKYIFws2Vq9HY1JB6H8uFsPD8G6rfBoqeLyOYEQUyYgARmxDAjQ",
        "AAAlnIvscf0+S/mBAARuAAIAAAD9M61GTCYwmwz5WcXYnTL6Um3u/667T1oAAAAAAAAAAKMaMQbYsZ3TSGf0Udjf2VcvSzx+1irNj7tDD+3i9brlHBQhU7ECARnEQZUl",
        "AAAtZ7+ZYBB+PISnAAR14AIAAABIMc8GBdlAgDhBgYxqAsV4Wok+6Lo0aGsAAAAAAAAAAHRh3QIKzF7zCY8VulZBVJmhzbPwOcUE/3WAnd9YbU5cGMAwU5nbABkWcEB+",
        "AAA2ljJSEaMyaO0FAAR9wAIAAABeKZ5rt3eIXLOREy9n8//nCLDNmmwGPL8AAAAAAAAAALkftQx9tn66T1C7W5JL6xyPbgfCegMyTVhLJU1G0hBzzt0/U6qzABlkLE1Y",
        "AABBzvUssHCgSb9TAASFoAIAAAC6PytCCOwElbLjdDRlyuK0TY8cd4tEz2sAAAAAAAAAANKH5S6ARcBgwc7kfRzHVZx7irjbWAU5+1X8V5qZjqFO/g5QU4ydABkmwMGA",
        "AABOmwVOeMsHc2uJAASNgAIAAADcDIDt9Mu4Dsyj1XYt+uR37C/CTLBqaJgAAAAAAAAAAETbmnnhaJC1AjaIKUWqGwtnW+w1Hb433Eme8bZBdgjpJypgU2yJABkjpMw4",
        "AABdRsdNbDb1KtjbAASVYAIAAAAarq5w/eZlSZDo73f4MPqxlSWYgH1jzDYAAAAAAAAAACiEa2cQS2gGiskqmbA9Dzwg4Z9gwSF0hILuRl6+bz3UN9hwU1MwfBg7lmHj",
        "AABtguPJOmnD9J1AAASdQAIAAABmUzMXiUQto4/0BanzgHx9NAen4IW16Q4AAAAAAAAAAMVlK9IfJ6CHNRXFpTj8dB7mEgHXJBPBhW4JhnB842BN7nmAU0IoaRhr2iTz",
        "AACArwrQuiUdIFFfAASlIAIAAADcqCVUPO/WYrMZngKvoTxqrUsBiQGAAQQAAAAAAAAAAAGHdD1IHbUgFw8icB80oUSThERqVVdeLEbhg94otIVHAeaQU5qFXRixibXk",
        "AACWPeQvCcdpQdWbAAStAAIAAACys9IE+9H9pfG/qOg9b2e+cwfAWmTURBsAAAAAAAAAAM0Zs2jqdvVKYE1cUiLRkBEvNk3xpa83+8JMs/vTK5dkIAShU6KrURiCTR+s",
        "AACu7exs4xD7A/iuAAS04AIAAAAQRk0sLUuMJa1ZdBfAg3MNkZjuUjGl8j8AAAAAAAAAAGiejOiJWhvDUIQZ+cStIlPEBXjFUWuJ/y4QSpoKY8tTdMqvU9FfQRjdeDT7",
        "AADNxIZL2EwV/jmGAAS8wAIAAAArHIYnynCwrIPXi9SmmWqeG1E7RslCshsAAAAAAAAAAMWrKgOiWAzUWX2/FBR48LCfOo+izuaTtNPCRxNYYpzohr3BU+ZrPxjH6MFA",
        "AADtjmjE/SjRXGm9AATEoAIAAADpWcsIJjhutzPI2IbHsfh+ioRrNUcy1BkAAAAAAAAAAO1gHyh8+IQmcQ/clbfzVr6Wa6F/COOxRMSMdB/crB/rZNHSU6KuOhjH/Npj",
        "AAEP6WisrWA2CCybAATMgAIAAABLsmfKSHJrF7yozzRT4sfUd4ze+yS2ETcAAAAAAAAAANB1cGqQoX60u5AEz1yLxlvFL5WmftI0wbD1gw6LYM7RwFnkU2K6Nxi4XNGm",
        "AAE0F1bcWn2c11U6AATUYAIAAACiw5fpBhLcKlyaQObfcw79B20LbpkfLAkAAAAAAAAAAJ2aASe6Uu8icLpRGmEQBC6asItujpoOKkDubRXc8ugefqHzU1gcLhgmDweu",
        "AAFf0LZuDMI3wQVTAATcQAIAAACDMnWpkXDGHgeWeOz86a4oPJ3fZg0YziAAAAAAAAAAAJ147/j4n1VrTsLaJh9plJi5kePFJfC29+U7jbeV5TwMcK0DVO4VKBixqVjj",
        "AAGSHBls3JawQjhAAATkIAIAAADqk8Ja9r3BmT4lRpKN++40NuECrlN90xgAAAAAAAAAAONJaW0QOG0g/swxcTI5Y5Dja9+7gfoEI9AGaOK0HNIRMKQUVOnbJBhKVXAa",
        "AAHIzx1CaD2mEO5gAATsAAIAAAAPavk4Mgp++zVN+dqY8+XAod4HFaLRBxYAAAAAAAAAALq6UKIRa2UCK0N6nJEsg9GMOaFh2I1dJhARQTx5VwtzUIckVJO4Hxhp5XAr",
        "AAIIXQzQMYMX3DJQAATz4AIAAABfim6ucWDYDDzRcTKcq91Q9mEwUkTiyhoAAAAAAAAAAGNlYsg+8U5nM/D07mezkVzm5if3fxIYMMjo7wMZlm3SKs42VHNpHxhfVFYE",
        "AAJIizmTz/JAfUm/AAT7wAIAAAAPJXFbyppgcSKMToKQ3eOwGRK6nRgwRBAAAAAAAAAAAPmc3IyXtbFEHExxUy/soFPQADf2akeZtu6hkPYgfIJZ4cVIVMCNHhis0IKo",
        "AAKKh4BnqEMeRTn8AAUDoAIAAABryq6Of7GLJ3NZ5TWvkiCqj49tO3NgohoAAAAAAAAAAPhpvLQRDzvi3PmC/oX5D4hFa798Pp++VaYGBUfacUbbx4tZVDDDGxhLrvor",
        "AALTJWBx7kRjY3l1AAULgAIAAAAr27E4C0e1x8x7E5mTPdihs5xqhtVakgkAAAAAAAAAAJRyWd2c95lOzQxx18cFywd2EGSnYiZQElZA7f2dn14YJLZrVGFIGxhRGzza",
        "AAMdCeP85TvOJPIDAAUTYAIAAAD+31BVesiYSho2I3lIOvZK4kMuuaysMxEAAAAAAAAAAA2KxHtLwtB5Iczh5LrDq6xugBYSJ5yiroqMNMfqbCkFOU5+VHR7GxiFv4U5",
        "AANmZQTHJBTIcqplAAUbQAIAAACvJGyzrYOYeow2qZ0G7iROIGnKdkprxhgAAAAAAAAAAEqjhDBvu40xnz9VbmK220mLsKHT+k/dnJh/ckUWCCHXcAiRVHzdGxiXP4PJ",
        "AAOuvnpjW2Yg+9FGAAUjIAIAAAD5GNf87na5jTBRWxIHX81cw5YLIu06sRAAAAAAAAAAAKJQM880j/xFqgWWD6wicStgyihqdNDEHQBZijlxQyqylPSiVMoNGxh8Hgue",
        "AAP5Q90LP/fABJRQAAUrAAIAAAAravTkVTH3NGhn0jxHTncjDtrP4ewUGwMAAAAAAAAAAAz2K1twsw0W53aH90CPYQIWHsJwDt1bs2LA3wV/OJ3ZqQW0VC8BGRgFaH30",
        "AARJ40ILi2s9531gAAUy4AIAAABUx0Uw+/UR2daHbXfkXqth2AXTyCekvxAAAAAAAAAAAIVkvibj0bsg3IQLFalyFxBhHG6W/Ob16bbLXbrsMcxNUrDHVMCjGhjD2lhm",
        "AASVkTpGAVaKeJ0JAAU6wAIAAADcCuFcrYcxYvJ9sv8z2fviGTqkkuHp0QUAAAAAAAAAADORZ8K98E9ap6pWsauJJWGefYUeJYbXccUZQCxkDtXn39TYVIe7GBhknHpS",
        "AATnFNcvmhfCEIsUAAVCoAIAAAD4QZrnTwgYXJxMZzomI2kf6UfWS3gwng8AAAAAAAAAAGviTewuZJ+ALDtXrEvc2ilz0Ae5pCOcQAVwdqd+i0xz6WrqVDqNFxgyfc4g",
        "AAU8rl4badO1uBLFAAVKgAIAAADohgw1YB6WZa7pbDfWSj6alUtuw+HTNgAAAAAAAAAAAJggHsJXPRATg1XbaCCv2fx5jRdX2cn83yIU7LsQvCZHJZj8VMAuFxixFpaM",
        "AAWTpGZSBCtYHUPeAAVSYAIAAACo7EaE50E1m38zUaYbSRK7GcPret/JPgsAAAAAAAAAAN+76k321Ttgblny9CWJGm+V8jHBXT7EA9F1tdmbktOb+1UPVfKIFxiUXtM1",
        "AAXpTfXdPxpBx6liAAVaQAIAAABEaLzDhKHbwFL3iM4rjxRMHcjjIuJM0hIAAAAAAAAAAHTPj5EVdrg7q4Y4nUT4W+JX8oQ31qYqC/Jdx4tu6ZIVkcYgVXE8Fhg0fHpw",
        "AAZD91v1txqyGqYbAAViIAIAAAB0xRwcxTqvR4xkO7YS2mvReyaM2b3MxAAAAAAAAAAAAMzAomGKH5c9+sN4J0NbRjq9GMv9DygKkEMtPXhJejbMAvMzVfAXFxi3Kh3H",
        "AAabQ3fB6l1KDS6dAAVqAAIAAAA/mYFKNtKiBDsdS/YaQQ9xgo7KHey/VgAAAAAAAAAAALN2LtJ4rES7lT4kJiz+uVLQq+bTt/i3T9JOAJuWtsuWXWdGVd0TFxhkNued",
        "AAbyn0BqaMRnY/EsAAVx4AIAAAD2RpmBinoT4pBhSm1/93RvVJDm3MrRdRIAAAAAAAAAAEuJqkMTnRSvQtA85jDmCibXYY79jW3Vfn2mE1CimTZbAW1YVfWGFhhFIRcL",
        "AAdMHOWj80CPTV4vAAV5wAIAAABWsh5xyS6HtXpJujn24r5MuBNkDOhqgQMAAAAAAAAAAILMtOTaiINGA9Up/LXhxssWMKwdnEMw4QzSQhgoVx3isVtrVYsaFxgJPMyK",
        "AAejX6SPTLkyaECxAAWBoAMAAAD29DiiCRqzxKMc2pQxVQkbUg9XJDKVkg0AAAAAAAAAAHzG9cuYYQmV95kdCdPiN/nipIbtjwJbzlnj4M3cUvc3Ywl9VUMgFhi2Ml5r",
        "AAf+fN7K4F8UAv+UAAWJgAIAAAAGPC75AWvzKpBO6tYqfMEgz/o88kMZcgYAAAAAAAAAABi2Rh3rDU2fycZjoQFHQzKuqvd1DMewA/tx4ElOUD2MLp2PVY5BFhgmsH7a",
        "AAhZEkG11cDZSx+GAAWRYAMAAADEVA0hTsdntv2BMSH7YQNBAsw4/vKaHQMAAAAAAAAAAPd272QzhiykKFteshui+Sj+XFekHj9YlkOep5WBi2IfjnuhVciGFRgox3uT",
        "AAi2uXaQKvTZ+PGtAAWZQAMAAAB1PkcF7tLrq/Dj7GroyFUWlpRp7xOKLhQAAAAAAAAAANv05xtUiRP+8W4H00okNPbjrGfMdt4NeAXuVVw+tLcBvYSzVRUIFRingz3n",
        "AAkWlKuZ6iMxEO/QAAWhIAMAAADnlPPiXnH9CFZzKKtuau83Zm10erONegwAAAAAAAAAAHZHfpKkuUHl62wICqHNv7q1FFlwPkxkNjhO3yfEE/hzwtbFVQTdFBg6fjkM",
        "AAl3NgJIUTuzEvYHAAWpAAMAAACBWl5t1uTPvhf41vIgDfSapHFsxndIhQcAAAAAAAAAAP6nJYLyiWbEIybbqB8DsLiZ+pkphIOy0S/yW3dlqoP4J8fXVcRDFBiaEXGE",
        "AAnaslxFZ2oPdv/9AAWw4AMAAAB6aDb6o44WSorZWegzgtP03rmuEC0dzgUAAAAAAAAAAHzLZzcUwL2LXqKQ8ewJIinFp5b2aE3C2NfshA1FQ3I9w17pVcFNExgnIqOG",
        "AApDInpI0hyEKEPOAAW4wAMAAAAq86VtjVrbZTFxLkqqwp3ZWoV0/uwdxwcAAAAAAAAAAP5PNK63I/35bvFzoTOk2J4j01sw/q9znqdo6Jax+V/8bBn7VbqHEhjH1UZ/",
        "AAqv7nbV8gI4gQVWAAXAoAcAACBnp0LqRjXO6+s3Xmh8h2kFduYbFjRPzggAAAAAAAAAAOx90gednMp8jwoRnPuL430VF6vl3TCv0MKRTfo+8Jzmph4NVnIUEhhp7WAg",
        "AAsfb9PKyG915FuEAAXIgAMAAAD53Ve9nlz9+3dVCpNYy7pH64I2hPQzYggAAAAAAAAAANHq67w9uwfVnA9Laa+5lRjg5PxlEsHNNJWztuvLrCejz44fVhQPEhisoAWx",
        "AAuPEqIEXhjZL5S4AAXQYAMAAACAFfcaPPZS1o82T4h404hrPHb85O4EqRAAAAAAAAAAAFuabbGwhWZQ+jLvOayxrCx1haRssKUd374jDMf82FoGop8xVlSpERi5kRXr",
        "AAwBORlyRT6CKd6yAAXYQAMAAAAuPeiomStbNHwU14SM96JPLWKddFRHEQwAAAAAAAAAAFC7sDvw917FPxkr13125Kr6GWDoAVgG29U0GXgH+ugLVBRDVomyEBgVk5G5",
        "AAx593VzlH8jtrJaAAXgIAMAAAAd8AR5EiSXrsmLHjnhvf+uiZrMMp4DpQAAAAAAAAAAAHS7CaZQHNLKgrZmaLm472N/XgfLjwnI8WnyGL/wNEBNrsxTVnYeDxgcuacc",
        "AAz/UI/qgIbZgN+/AAXoAAQAAAD6czd/P1hFRda1NWOKpMwYw1kymz23sAMAAAAAAAAAAFIcelNdLVK8TQYGtH6yy+VDEXumqnd4De9k+zYzuSTmLMVkVk/mDRgbmM5N",
        "AA2QXhCcuWjDvZMgAAXv4AQAAABCUOD+y5YCqA4X4Ek7fhzNDP1lvcW8mAEAAAAAAAAAAFQt2ikzPQa5wHMP5SPZEzw5Yt6yFJIbTl9QVsVyqR7vqWd0VgnECxhMqn1Z",
        "AA47uLb+n9qZN5rSAAX3wAQAAADn3BPGQhTIArt8qQkINh9JExTc03nzYAoAAAAAAAAAAC4SBqkpKQ20aa6NvaSJFHQLVkKbjqulcxtzrRkoI1hDogaFVpGVChj2TOSo",
        "AA76M7POkqug+Z9NAAX/oAQAAAAHKZZL8pX2fjMkS4/MHTd+3Iy6+KVziQMAAAAAAAAAAKSFN4eizDLUmtQ5PfjBNPpmfmpaQcJ+wjCSqsN+dzFhKvGVVhuzCRhZxxSe",
        "AA/KDQ5jmSg3XpPsAAYHgAQAAAAZex89L6zCAW+MKtz3OioFPZF0GUfsuAQAAAAAAAAAADLy7iIjtSj6g5Q+8aIgDxvKKG1lW4AEriAH4zQlNwM6OWSnVvAoCRg6ZpfC",
        "ABCmKY/w5K9ccX99AAYPYAQAAADE/juFAwCo8NeGCeT0q8etEEIc7y5XXQcAAAAAAAAAAN17xvJ5b6zUu6ZM4I8ALN6/1Ga9wQD/uegKKCxXpIeROMS2VhShBxgC8+Oh",
        "ABGubW6S48XcALNeAAYXQAQAAAAgvLMxNKb+P5jwSIK6kkPHjWQH/NueTwcAAAAAAAAAAKqOJteTwad0SMWRI8hg+EKqq9ybNkMoXsmulA+kudEOyAvHVp+5Bhj0mtfn",
        "ABLaMjZMj0fVGWBNAAYfIAQAAADqsdQ60ilyN2qK707hr5NIfzorxtmkxAMAAAAAAAAAAAdmm8141IyLhH6c6nbSJ6VrVLyibtpcSvr9VSpQoK+0hBnaVqjwBhjZyz3h",
        "ABP8sJiJmTFclF8ZAAYnAAQAAABHPte37y/Ogowxj9XlhoNEpTVsnpO2BAQAAAAAAAAAAEQJyuW3svjxjqVfVYyb+nxfR3ihpTFypI/FfhctDtPSZMXrVsOkBhivm8HH",
        "ABUsJBbzwzhj/RTNAAYu4AQAAAD37yiBuKDLQVuoHoicebxfGwmBZ8lWRgMAAAAAAAAAAKSIaf6NZ3eCH6hVJROct30SxEDBYYLGN+lD3+p9k32qexb+VvSWBhhWKCct",
        "ABZeFeYwv+kd3mJ7AAY2wAQAAACJUWxLbjfVgA+fnjYJOiuNqEDXrOJFVgQAAAAAAAAAAJtNP14hQ/GkVCrywXZ4CgxX72aDphhfHF+Nih2UWbLkBVQPV0snBhhclofi",
        "ABeltF+z3kz9tZTwAAY+oAQAAADR7x73u97v/1ByQ7M+/tZHZYwwOKHmgQMAAAAAAAAAAETWTugwPNlatypt7HduiToghEoXJhzY1x2YAHP6aZITrskhV3YnBhhaaUYC",
        "ABjtTYrOHh0qfIZKAAZGgAEAACC8uMT/qxBBSnWtThC/67Ff5gIhu90AIQEAAAAAAAAAAO7KSzplx9PRqtr6XfVNa77PAZgw+qVEYJBCnVfp9e5DYsQyV/qoBRhCJKGr",
        "ABpRfLdgJt4nqRNjAAZOYAQAAADmLvKMuXk/T5zSpnpYwee1kxKbm+VWbwQAAAAAAAAAAGSfiOKI1oe8gZu13AlKjE939fRsL2osAVIllw97PFFXdsFEVzaEBRigCrKE",
        "ABu+78vXOVeKMGz1AAZWQAQAAAC7kyyQhvxEfu3SQkVNRZNvR/SRHikcvQEAAAAAAAAAAPrreBAfjCpsAEti4TRoZ1m3UmWvpBs/zI7c31XPADDj9oVXV6CbBRi2fCdV",
        "AB0mcOta9RlcQHkgAAZeIAEAACDNHXKw/agnsGcB2HlbfO3Wb/91M0h6wwEAAAAAAAAAAHO4pz6FxGfyz45cs3SgR4/MpfRnt7UwhSKVEaFATK6uQs5oV9Y/BRgO0kEv",
        "AB6mfdbrgpnwJCwPAAZmAAAAACBCLsOepCYOv0JCHb+GM1fEmFLawrQEGAUAAAAAAAAAAPnen2pzKIQ99/GjckUdhUzoQxvp3eaGMNlal3NweVcOMe56V/0mBRi+cadQ",
        "ACAtxfsiGV2z0xFqAAZt4AAAACDh2VuHjAFXFHz3IpMZ8BFDKffxiHj/SwMAAAAAAAAAAGA+JCR1kdW3pIFA/zuSI+PMFCTWoRZ0YDqTbhQyQcoHwmSNV2kmBRh4+yfw",
    ]))
)

;;;
 ; Utility class that holds all the registered NetworkParameters types used for Address auto discovery.
 ; By default only MainNetParams and TestNetParams are used.
 ;;
#_public
(§ class Networks
    ;;; Registered networks. ;;
    #_private
    #_static
    (def- #_"Set<? extends NetworkParameters>" Networks'NETWORKS (ImmutableSet/of TestNetParams'INSTANCE, MainNetParams'INSTANCE))

    #_public
    #_static
    (§ defn #_"Set<? extends NetworkParameters>" Networks'get []
        Networks'NETWORKS
    )

    #_public
    #_static
    (§ defn #_"void" Networks'register [#_"NetworkParameters" network]
        (Networks'register (Lists/newArrayList network))
        nil
    )

    #_public
    #_static
    (§ defn #_"void" Networks'register [#_"Collection<? extends NetworkParameters>" networks]
        (let [#_"ImmutableSet.Builder<NetworkParameters>" builder (ImmutableSet/builder)]
            (.. builder (addAll Networks'NETWORKS))
            (.. builder (addAll networks))
            (§ ass Networks'NETWORKS (.. builder (build)))
        )
        nil
    )

    #_public
    #_static
    (§ defn #_"void" Networks'unregister [#_"NetworkParameters" network]
        (when (.. Networks'NETWORKS (contains network))
            (let [#_"ImmutableSet.Builder<NetworkParameters>" builder (ImmutableSet/builder)]

                (doseq [#_"NetworkParameters" parameters Networks'NETWORKS]
                    (when (not (.. parameters (equals network)))
                        (.. builder (add parameters))
                    )
                )

                (§ ass Networks'NETWORKS (.. builder (build)))
            )
        )
        nil
    )
)

;;;
 ; Parameters for the testnet, a separate public instance of Bitcoin that has relaxed rules suitable for development
 ; and testing of applications and new Bitcoin versions.
 ;;
#_public
(§ class TestNetParams (§ extends NetworkParameters)
    #_public
    (§ constructor TestNetParams []
        (§ super )

        (§ assoc this :id NetworkParameters'ID_TESTNET)
        (§ assoc this :packet-magic 0x0b110907)
        (§ assoc this :interval NetworkParameters'INTERVAL)
        (§ assoc this :target-timespan NetworkParameters'TARGET_TIMESPAN)
        (§ assoc this :max-target (Utils'decodeCompactBits 0x1d00ffff))
        (§ assoc this :port 18333)
        (§ assoc this :address-header 111)
        (§ assoc this :p2sh-header 196)
        (§ assoc this :acceptable-address-codes (int-array [ (:address-header this), (:p2sh-header this) ]))
        (.. (:genesis-block this) (setTime 1296688602))
        (.. (:genesis-block this) (setDifficultyTarget 0x1d00ffff))
        (.. (:genesis-block this) (setNonce 414098458))
        (§ assoc this :spendable-coinbase-depth 100)
        (§ assoc this :subsidy-decrease-block-count 210000)
        (assert-state (.. (:genesis-block this) (getHashAsString) (equals "000000000933ea01ad0ee984209779baaec3ced90fa3f408719526f8d77f4943")))
        (§ assoc this :alert-signing-key (.. Utils'HEX (decode "04302390343f91cc401d56d68b123028bf52e5fca1939df127f63c6467cdf9c8e2c14b61104cf817d0b780da337893ecc4aaff1309e536162dabbdb45200ca2b0a")))

        (§ assoc this :dns-seeds (into-array String
        [
            "testnet-seed.bitcoin.jonasschnelli.ch", ;; Jonas Schnelli
            "testnet-seed.bluematt.me",              ;; Matt Corallo
            "testnet-seed.bitcoin.petertodd.org",    ;; Peter Todd
            "testnet-seed.bitcoin.schildbach.de",    ;; Andreas Schildbach
        ]))
        (§ assoc this :addr-seeds nil)
        (§ assoc this :bip32-header-pub 0x043587cf)
        (§ assoc this :bip32-header-priv 0x04358394)

        (§ assoc this :majority-enforce-block-upgrade 51)
        (§ assoc this :majority-reject-block-outdated 75)
        (§ assoc this :majority-window 100)

        (§ assoc this :textual-checkpoints TestNetParams'TEXTUAL_CHECKPOINTS)
        this
    )

    #_private
    #_static
    (def- #_"TestNetParams" TestNetParams'INSTANCE (TestNetParams.))

    #_private
    #_static
    (def- #_"Date" TestNetParams'TESTNET_DIFF_DATE (Date. 1329264000000)) ;; February 16th 2012

    #_override
    #_public
    #_throws #_[ "VerificationException", "BlockStoreException" ]
    (§ method #_"void" checkDifficultyTransitions [#_"StoredBlock" __storedPrev, #_"Block" __nextBlock, #_"BlockStore" __blockStore]
        (cond (and (not (.. this (isDifficultyTransitionPoint (.. __storedPrev (getHeight))))) (.. __nextBlock (getTime) (after TestNetParams'TESTNET_DIFF_DATE)))
            (do
                (let [#_"Block" prev (.. __storedPrev (getHeader))]

                    ;; After 15th February 2012 the rules on the testnet change to avoid people running up the difficulty
                    ;; and then leaving, making it too hard to mine a block.  On non-difficulty transition points, easy
                    ;; blocks are allowed if there has been a span of 20 minutes without one.
                    (let [#_"long" __timeDelta (- (.. __nextBlock (getTimeSeconds)) (.. prev (getTimeSeconds)))]
                        ;; There is an integer underflow bug in bitcoin-qt that means mindiff blocks are accepted when time
                        ;; goes backwards.
                        (when (and (<= 0 __timeDelta) (<= __timeDelta (* 2 NetworkParameters'TARGET_SPACING)))
                            ;; Walk backwards until we find a block that doesn't have the easiest proof of work, then check
                            ;; that difficulty is equal to that one.
                            (let [#_"StoredBlock" cursor __storedPrev]
                                (loop-when-recur [] (and (not (.. cursor (getHeader) (equals (:genesis-block this)))) (not= (rem (.. cursor (getHeight)) (:interval this)) 0) (.. cursor (getHeader) (getDifficultyTargetAsInteger) (equals (:max-target this)))) []
                                    (§ ass cursor (.. cursor (getPrev __blockStore)))
                                )
                                (let [#_"BigInteger" __cursorTarget (.. cursor (getHeader) (getDifficultyTargetAsInteger))
                                      #_"BigInteger" __newTarget (.. __nextBlock (getDifficultyTargetAsInteger))]
                                    (when (not (.. __cursorTarget (equals __newTarget)))
                                        (throw (VerificationException. (str "Testnet block transition that is not allowed: " (Long/toHexString (.. cursor (getHeader) (getDifficultyTarget))) " vs " (Long/toHexString (.. __nextBlock (getDifficultyTarget))))))
                                    )
                                )
                            )
                        )
                    )
                )
            )
            :else
            (do
                (.. super (checkDifficultyTransitions __storedPrev, __nextBlock, __blockStore))
            )
        )
        nil
    )

    #_public
    #_static
    (def #_"String[]" TestNetParams'TEXTUAL_CHECKPOINTS (into-array String
    [
        "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",
    ]))
)

#_(ns org.bitcoinj.script
    (:import [com.google.common.base Objects]
             [com.google.common.collect ImmutableMap Lists]
             [java.io ByteArrayInputStream ByteArrayOutputStream IOException]
             [java.math BigInteger]
             [java.security MessageDigest NoSuchAlgorithmException]
             [java.util ArrayList Arrays Collections HashMap List Map Stack]
             [org.slf4j LoggerFactory Logger]
             [org.spongycastle.crypto.digests RIPEMD160Digest]
    )
)

;; TODO: Redesign this entire API to be more type safe and organised.

;;;
 ; Programs embedded inside transactions that control redemption of payments.
 ;
 ; Bitcoin transactions don't specify what they do directly.  Instead
 ; <a href="https://en.bitcoin.it/wiki/Script">a small binary stack language</a> is used to define programs that
 ; when evaluated, return whether the transaction "accepts" or rejects the other transactions connected to it.
 ;
 ; In SPV mode, scripts are not run, because that would require all transactions to be available and lightweight
 ; clients don't have that data.  In full mode, this class is used to run the interpreted language.  It also has
 ; static methods for building scripts.
 ;;
#_public
(§ class Script
    ;;; Enumeration to encapsulate the type of this script. ;;
    #_public
    #_static
    #_enum
    (def ScriptType'values
    #{
        ;; Do NOT change the ordering of the following definitions because their ordinals are stored in databases.
        :ScriptType'NO_TYPE
        :ScriptType'P2PKH
        :ScriptType'PUB_KEY
        :ScriptType'P2SH
    })

    ;;; Flags to pass to {@link Script#correctlySpends(Transaction, long, Script, Set)}.
     ; Note currently only P2SH, DERSIG and NULLDUMMY are actually supported.
     ;;
    #_public
    #_static
    #_enum
    (def ScriptVerifyFlag'values
    #{
        :ScriptVerifyFlag'P2SH ;; Enable BIP16-style subscript evaluation.
        :ScriptVerifyFlag'STRICTENC ;; Passing a non-strict-DER signature or one with undefined hashtype to a checksig operation causes script failure.
        :ScriptVerifyFlag'DERSIG ;; Passing a non-strict-DER signature to a checksig operation causes script failure (softfork safe, BIP66 rule 1).
        :ScriptVerifyFlag'LOW_S ;; Passing a non-strict-DER signature or one with S > order/2 to a checksig operation causes script failure.
        :ScriptVerifyFlag'NULLDUMMY ;; Verify dummy stack item consumed by CHECKMULTISIG is of zero-length.
        :ScriptVerifyFlag'SIGPUSHONLY ;; Using a non-push operator in the scriptSig causes script failure (softfork safe, BIP62 rule 2).
        :ScriptVerifyFlag'MINIMALDATA ;; Require minimal encodings for all push operations.
        :ScriptVerifyFlag'DISCOURAGE_UPGRADABLE_NOPS ;; Discourage use of NOPs reserved for upgrades (NOP1-10).
        :ScriptVerifyFlag'CLEANSTACK ;; Require that only a single stack element remains after evaluation.
        :ScriptVerifyFlag'CHECKLOCKTIMEVERIFY ;; Enable CHECKLOCKTIMEVERIFY operation.
        :ScriptVerifyFlag'CHECKSEQUENCEVERIFY ;; Enable CHECKSEQUENCEVERIFY operation.
    })
    #_public
    #_static
    (def #_"EnumSet<ScriptVerifyFlag>" Script'ALL_VERIFY_FLAGS (EnumSet/allOf ScriptVerifyFlag))

    #_private
    #_static
    (def- #_"Logger" Script'log (LoggerFactory/getLogger Script))

    #_public
    #_static
    (def #_"long" Script'MAX_SCRIPT_ELEMENT_SIZE 520) ;; bytes
    #_private
    #_static
    (def- #_"int" Script'MAX_OPS_PER_SCRIPT 201)
    #_private
    #_static
    (def- #_"int" Script'MAX_STACK_SIZE 1000)
    #_private
    #_static
    (def- #_"int" Script'MAX_PUBKEYS_PER_MULTISIG 20)
    #_private
    #_static
    (def- #_"int" Script'MAX_SCRIPT_SIZE 10000)
    #_public
    #_static
    (def #_"int" Script'SIG_SIZE 75)
    ;;; Max number of sigops allowed in a standard p2sh redeem script. ;;
    #_public
    #_static
    (def #_"int" Script'MAX_P2SH_SIGOPS 15)

    ;; The program is a set of chunks where each element is either [opcode] or [data, data, data ...].
    #_protected
    (§ field #_"List<ScriptChunk>" :chunks)
    ;; Unfortunately, scripts are not ever re-serialized or canonicalized when used in signature hashing.
    ;; Thus we must preserve the exact bytes that we read off the wire, along with the parsed form.
    #_protected
    (§ field #_"byte[]" :program)

    ;; Creation time of the associated keys in seconds since the epoch.
    #_private
    (§ field- #_"long" :creation-time-seconds)

    ;;; Creates an empty script that serializes to nothing. ;;
    #_private
    (§ constructor- Script []
        (§ assoc this :chunks (Lists/newArrayList))
        this
    )

    ;; Used from ScriptBuilder.
    (§ constructor Script [#_"List<ScriptChunk>" chunks]
        (§ assoc this :chunks (Collections/unmodifiableList (ArrayList. #_"<>" chunks)))
        (§ assoc this :creation-time-seconds (Utils'currentTimeSeconds))
        this
    )

    ;;;
     ; Construct a Script that copies and wraps the programBytes array.
     ; The array is parsed and checked for syntactic validity.
     ;
     ; @param programBytes Array of program bytes from a transaction.
     ;;
    #_public
    #_throws #_[ "ScriptException" ]
    (§ constructor Script [#_"byte[]" __programBytes]
        (§ assoc this :program __programBytes)
        (.. this (parse __programBytes))
        (§ assoc this :creation-time-seconds 0)
        this
    )

    #_public
    #_throws #_[ "ScriptException" ]
    (§ constructor Script [#_"byte[]" __programBytes, #_"long" secs]
        (§ assoc this :program __programBytes)
        (.. this (parse __programBytes))
        (§ assoc this :creation-time-seconds secs)
        this
    )

    #_public
    (§ method #_"long" getCreationTimeSeconds []
        (:creation-time-seconds this)
    )

    #_public
    (§ method #_"void" setCreationTimeSeconds [#_"long" secs]
        (§ assoc this :creation-time-seconds secs)
        nil
    )

    ;;;
     ; Returns the program opcodes as a string, for example "[1234] DUP HASH160".
     ;;
    #_override
    #_public
    (§ method #_"String" toString []
        (.. Utils'SPACE_JOINER (join (:chunks this)))
    )

    ;;; Returns the serialized program as a newly created byte array. ;;
    #_public
    (§ method #_"byte[]" getProgram []
        ;; Don't round-trip as Bitcoin Core doesn't and it would introduce a mismatch.
        (if (some? (:program this))
            (Arrays/copyOf (:program this), (alength (:program this)))
            (let [#_"ByteArrayOutputStream" baos (ByteArrayOutputStream.)]
                (doseq [#_"ScriptChunk" chunk (:chunks this)]
                    (.. chunk (writeChunk baos))
                )
                (§ assoc this :program (.. baos (toByteArray)))
                (:program this)
            )
        )
    )

    ;;; Returns an immutable list of the scripts parsed form.  Each chunk is either an opcode or data element. ;;
    #_public
    (§ method #_"List<ScriptChunk>" getChunks []
        (Collections/unmodifiableList (:chunks this))
    )

    #_private
    #_static
    (def- #_"ScriptChunk[]" Script'STANDARD_TRANSACTION_SCRIPT_CHUNKS (into-array ScriptChunk
    [
        (ScriptChunk. ScriptOpCodes'OP_DUP, nil, 0)
        (ScriptChunk. ScriptOpCodes'OP_HASH160, nil, 1)
        (ScriptChunk. ScriptOpCodes'OP_EQUALVERIFY, nil, 23)
        (ScriptChunk. ScriptOpCodes'OP_CHECKSIG, nil, 24)
    ]))

    ;;;
     ; To run a script, first we parse it which breaks it up into chunks representing pushes of data
     ; or logical opcodes.  Then we can run the parsed chunks.
     ;
     ; The reason for this split, instead of just interpreting directly, is to make it easier
     ; to reach into a programs structure and pull out bits of data without having to run it.
     ; This is necessary to render the to/from addresses of transactions in a user interface.
     ; Bitcoin Core does something similar.
     ;;
    #_private
    #_throws #_[ "ScriptException" ]
    (§ method- #_"void" parse [#_"byte[]" program]
        (§ assoc this :chunks (ArrayList. #_"<>" 5)) ;; Common size.
        (let [#_"ByteArrayInputStream" bais (ByteArrayInputStream. program)
              #_"int" __initialSize (.. bais (available))]
            (while (< 0 (.. bais (available)))
                (let [#_"int" start (- __initialSize (.. bais (available)))
                      #_"int" opcode (.. bais (read))]

                    (let [#_"long" __dataToRead -1]
                        (cond (< -1 opcode ScriptOpCodes'OP_PUSHDATA1)
                            (do
                                ;; Read some bytes of data, where how many is the opcode value itself.
                                (§ ass __dataToRead opcode)
                            )
                            (= opcode ScriptOpCodes'OP_PUSHDATA1)
                            (do
                                (when (< (.. bais (available)) 1)
                                    (throw (ScriptException. :ScriptError'UNKNOWN_ERROR, "Unexpected end of script"))
                                )
                                (§ ass __dataToRead (.. bais (read)))
                            )
                            (= opcode ScriptOpCodes'OP_PUSHDATA2)
                            (do
                                ;; Read a short, then read that many bytes of data.
                                (when (< (.. bais (available)) 2)
                                    (throw (ScriptException. :ScriptError'UNKNOWN_ERROR, "Unexpected end of script"))
                                )
                                (§ ass __dataToRead (| (.. bais (read)) (<< (.. bais (read)) 8)))
                            )
                            (= opcode ScriptOpCodes'OP_PUSHDATA4)
                            (do
                                ;; Read a uint32, then read that many bytes of data.
                                ;; Though this is allowed, because its value cannot be > 520, it should never actually be used.
                                (when (< (.. bais (available)) 4)
                                    (throw (ScriptException. :ScriptError'UNKNOWN_ERROR, "Unexpected end of script"))
                                )
                                (§ ass __dataToRead (| (long (.. bais (read))) (<< (long (.. bais (read))) 8) (<< (long (.. bais (read))) 16) (<< (long (.. bais (read))) 24)))
                            )
                        )

                        (let [#_"ScriptChunk" chunk]
                            (cond (= __dataToRead -1)
                                (do
                                    (§ ass chunk (ScriptChunk. opcode, nil, start))
                                )
                                :else
                                (do
                                    (when (< (.. bais (available)) __dataToRead)
                                        (throw (ScriptException. :ScriptError'BAD_OPCODE, "Push of data element that is larger than remaining data"))
                                    )

                                    (let [#_"byte[]" data (byte-array (int __dataToRead))]
                                        (assert-state (or (= __dataToRead 0) (= (.. bais (read data, 0, (int __dataToRead))) __dataToRead)))
                                        (§ ass chunk (ScriptChunk. opcode, data, start))
                                    )
                                )
                            )
                            ;; Save some memory by eliminating redundant copies of the same chunk objects.
                            (doseq [#_"ScriptChunk" c Script'STANDARD_TRANSACTION_SCRIPT_CHUNKS]
                                (when (.. c (equals chunk))
                                    (§ ass chunk c)
                                )
                            )
                            (.. (:chunks this) (add chunk))
                        )
                    )
                )
            )
        )
        nil
    )

    ;;;
     ; Returns true if this script is of the form <pubkey> OP_CHECKSIG.  This form was originally intended for
     ; transactions where the peers talked to each other directly via TCP/IP, but has fallen out of favor with time
     ; due to that mode of operation being susceptible to man-in-the-middle attacks.  It is still used in coinbase
     ; outputs and can be useful more exotic types of transaction, but today most payments are to addresses.
     ;;
    #_public
    (§ method #_"boolean" isSentToRawPubKey []
        (and (= (.. (:chunks this) (size)) 2) (.. (:chunks this) (get 1) (equalsOpCode ScriptOpCodes'OP_CHECKSIG)) (not (.. (:chunks this) (get 0) (isOpCode))) (< 1 (alength (:data (.. (:chunks this) (get 0))))))
    )

    ;;;
     ; Returns true if this script is of the form DUP HASH160 <pubkey hash> EQUALVERIFY CHECKSIG, i.e. payment to an
     ; address like 1VayNert3x1KzbpzMGt2qdqrAThiRovi8.  This form was originally intended for the case where you wish
     ; to send somebody money with a written code because their node is offline, but over time has become the standard
     ; way to make payments due to the short and recognizable base58 form addresses come in.
     ;;
    #_public
    (§ method #_"boolean" isSentToAddress []
        (and (= (.. (:chunks this) (size)) 5) (.. (:chunks this) (get 0) (equalsOpCode ScriptOpCodes'OP_DUP)) (.. (:chunks this) (get 1) (equalsOpCode ScriptOpCodes'OP_HASH160)) (= (alength (:data (.. (:chunks this) (get 2)))) Address'LENGTH) (.. (:chunks this) (get 3) (equalsOpCode ScriptOpCodes'OP_EQUALVERIFY)) (.. (:chunks this) (get 4) (equalsOpCode ScriptOpCodes'OP_CHECKSIG)))
    )

    ;;;
     ; If a program matches the standard template DUP HASH160 &lt;pubkey hash&gt; EQUALVERIFY CHECKSIG,
     ; then this function retrieves the third element.
     ; In this case, this is useful for fetching the destination address of a transaction.
     ;
     ; If a program matches the standard template HASH160 &lt;script hash&gt; EQUAL,
     ; then this function retrieves the second element.
     ; In this case, this is useful for fetching the hash of the redeem script of a transaction.
     ;
     ; Otherwise it throws a ScriptException.
     ;
     ;;
    #_public
    #_throws #_[ "ScriptException" ]
    (§ method #_"byte[]" getPubKeyHash []
        (cond
            (.. this (isSentToAddress)) (.. (:chunks this) (get 2) :data)
            (.. this (isPayToScriptHash)) (.. (:chunks this) (get 1) :data)
            :else (throw (ScriptException. :ScriptError'UNKNOWN_ERROR, "Script not in the standard scriptPubKey form"))
        )
    )

    ;;;
     ; Returns the public key in this script.  If a script contains two constants and nothing else, it is assumed
     ; to be a scriptSig (input) for a pay-to-address output and the second constant is returned (the first is the
     ; signature).  If a script contains a constant and an OP_CHECKSIG opcode, the constant is returned as it is
     ; assumed to be a direct pay-to-key scriptPubKey (output) and the first constant is the public key.
     ;
     ; @throws ScriptException if the script is none of the named forms.
     ;;
    #_public
    #_throws #_[ "ScriptException" ]
    (§ method #_"byte[]" getPubKey []
        (when (not= (.. (:chunks this) (size)) 2)
            (throw (ScriptException. :ScriptError'UNKNOWN_ERROR, (str "Script not of right size, expecting 2 but got " (.. (:chunks this) (size)))))
        )

        (let [#_"ScriptChunk" chunk0 (.. (:chunks this) (get 0)) #_"byte[]" data0 (:data chunk0)
              #_"ScriptChunk" chunk1 (.. (:chunks this) (get 1)) #_"byte[]" data1 (:data chunk1)]

            (cond
                ;; If we have two large constants assume the input to a pay-to-address output.
                (and (some? data0) (< 2 (alength data0)) (some? data1) (< 2 (alength data1))) data1
                ;; A large constant followed by an OP_CHECKSIG is the key.
                (and (.. chunk1 (equalsOpCode ScriptOpCodes'OP_CHECKSIG)) (some? data0) (< 2 (alength data0))) data0
                :else (throw (ScriptException. :ScriptError'UNKNOWN_ERROR, (str "Script did not match expected form: " this)))
            )
        )
    )

    ;;;
     ; Retrieves the sender public key from a LOCKTIMEVERIFY transaction.
     ;
     ; @throws ScriptException
     ;;
    #_public
    #_throws #_[ "ScriptException" ]
    (§ method #_"byte[]" getCLTVPaymentChannelSenderPubKey []
        (if (.. this (isSentToCLTVPaymentChannel))
            (.. (:chunks this) (get 8) :data)
            (throw (ScriptException. :ScriptError'UNKNOWN_ERROR, (str "Script not a standard CHECKLOCKTIMVERIFY transaction: " this)))
        )
    )

    ;;;
     ; Retrieves the recipient public key from a LOCKTIMEVERIFY transaction.
     ;
     ; @throws ScriptException
     ;;
    #_public
    #_throws #_[ "ScriptException" ]
    (§ method #_"byte[]" getCLTVPaymentChannelRecipientPubKey []
        (if (.. this (isSentToCLTVPaymentChannel))
            (.. (:chunks this) (get 1) :data)
            (throw (ScriptException. :ScriptError'UNKNOWN_ERROR, (str "Script not a standard CHECKLOCKTIMVERIFY transaction: " this)))
        )
    )

    #_public
    (§ method #_"BigInteger" getCLTVPaymentChannelExpiry []
        (if (.. this (isSentToCLTVPaymentChannel))
            (Script'castToBigInteger (.. (:chunks this) (get 4) :data), 5, false)
            (throw (ScriptException. :ScriptError'UNKNOWN_ERROR, (str "Script not a standard CHECKLOCKTIMEVERIFY transaction: " this)))
        )
    )

    ;;;
     ; For 2-element [input] scripts assumes that the paid-to-address can be derived from the public key.
     ; The concept of a "from address" isn't well defined in Bitcoin and you should not assume the sender
     ; of a transaction can actually receive coins on it. This method may be removed in future.
     ;;
    #_deprecated
    #_public
    #_throws #_[ "ScriptException" ]
    (§ method #_"Address" getFromAddress [#_"NetworkParameters" params]
        (Address. params, (Utils'sha256hash160 (.. this (getPubKey))))
    )

    ;;;
     ; Gets the destination address from this script, if it's in the required form (see getPubKey).
     ;;
    #_public
    #_throws #_[ "ScriptException" ]
    (§ method #_"Address" getToAddress [#_"NetworkParameters" params]
        (.. this (getToAddress params, false))
    )

    ;;;
     ; Gets the destination address from this script, if it's in the required form (see getPubKey).
     ;
     ; @param forcePayToPubKey If true, allow payToPubKey to be casted to the corresponding address.
     ;                         This is useful if you prefer showing addresses rather than pubkeys.
     ;;
    #_public
    #_throws #_[ "ScriptException" ]
    (§ method #_"Address" getToAddress [#_"NetworkParameters" params, #_"boolean" force?]
        (cond
            (.. this (isSentToAddress))                (Address. params, (.. this (getPubKeyHash)))
            (.. this (isPayToScriptHash))              (Address'fromP2SHScript params, this)
            (and force? (.. this (isSentToRawPubKey))) (.. (ECKey'fromPublicOnly (.. this (getPubKey))) (toAddress params))
            :else (throw (ScriptException. :ScriptError'UNKNOWN_ERROR, "Cannot cast this script to a pay-to-address type"))
        )
    )

    ;;;
     ; Writes out the given byte buffer to the output stream with the correct opcode prefix.
     ; To write an integer call writeBytes(stream, Utils.reverseBytes(Utils.encodeMPI(val, false))).
     ;;
    #_public
    #_static
    (§ defn #_"void" Script'writeBytes [#_"ByteArrayOutputStream" baos, #_"byte[]" bytes]
        (let [n (alength bytes)]
            (cond
                (< n ScriptOpCodes'OP_PUSHDATA1)
                (do
                    (.. baos (write n))
                    (.. baos (write bytes))
                )
                (< n 256)
                (do
                    (.. baos (write ScriptOpCodes'OP_PUSHDATA1))
                    (.. baos (write n))
                    (.. baos (write bytes))
                )
                (< n 65536)
                (do
                    (.. baos (write ScriptOpCodes'OP_PUSHDATA2))
                    (.. baos (write (& 0xff n)))
                    (.. baos (write (& 0xff (>> n 8))))
                    (.. baos (write bytes))
                )
                :else
                (do
                    (throw (RuntimeException. "Unimplemented"))
                )
            )
        )
        nil
    )

    ;;; Creates a program that requires at least N of the given keys to sign, using OP_CHECKMULTISIG. ;;
    #_public
    #_static
    (§ defn #_"byte[]" Script'createMultiSigOutputScript [#_"int" threshold, #_"List<ECKey>" pubkeys]
        (assert-argument (< 0 threshold))
        (assert-argument (<= threshold (.. pubkeys (size))))
        (assert-argument (<= (.. pubkeys (size)) 16)) ;; That's the max we can represent with a single opcode.

        (when (< 3 (.. pubkeys (size)))
            (.. Script'log (warn "Creating a multi-signature output that is non-standard: {} pubkeys, should be <= 3", (.. pubkeys (size))))
        )

        (let [#_"ByteArrayOutputStream" baos (ByteArrayOutputStream.)]
            (.. baos (write (Script'encodeToOpN threshold)))
            (doseq [#_"ECKey" key pubkeys]
                (Script'writeBytes baos, (.. key (getPubKey)))
            )
            (.. baos (write (Script'encodeToOpN (.. pubkeys (size)))))
            (.. baos (write ScriptOpCodes'OP_CHECKMULTISIG))
            (.. baos (toByteArray))
        )
    )

    #_public
    #_static
    (§ defn #_"byte[]" Script'createInputScript [#_"byte[]" signature, #_"byte[]" pubkey]
        ;; TODO: Do this by creating a Script *first* then having the script reassemble itself into bytes.
        (let [#_"ByteArrayOutputStream" baos (ByteArrayOutputStream. (+ (alength signature) (alength pubkey) 2))]
            (Script'writeBytes baos, signature)
            (Script'writeBytes baos, pubkey)
            (.. baos (toByteArray))
        )
    )

    #_public
    #_static
    (§ defn #_"byte[]" Script'createInputScript [#_"byte[]" signature]
        ;; TODO: Do this by creating a Script *first* then having the script reassemble itself into bytes.
        (let [#_"ByteArrayOutputStream" baos (ByteArrayOutputStream. (+ (alength signature) 2))]
            (Script'writeBytes baos, signature)
            (.. baos (toByteArray))
        )
    )

    ;;;
     ; Creates an incomplete scriptSig that, once filled with signatures, can redeem output containing this scriptPubKey.
     ; Instead of the signatures resulting script has OP_0.
     ; Having incomplete input script allows to pass around partially signed tx.
     ; It is expected that this program later on will be updated with proper signatures.
     ;;
    #_public
    (§ method #_"Script" createEmptyInputScript [#_nilable #_"ECKey" key, #_nilable #_"Script" __redeemScript]
        (cond
            (.. this (isSentToAddress))
            (do
                (assert-argument (some? key), "Key required to create pay-to-address input script")
                (ScriptBuilder'createInputScript nil, key)
            )
            (.. this (isSentToRawPubKey))
                (ScriptBuilder'createInputScript nil)
            (.. this (isPayToScriptHash))
            (do
                (assert-argument (some? __redeemScript), "Redeem script required to create P2SH input script")
                (ScriptBuilder'createP2SHMultiSigInputScript nil, __redeemScript)
            )
            :else
                (throw (ScriptException. :ScriptError'UNKNOWN_ERROR, (str "Do not understand script type: " this)))
        )
    )

    ;;;
     ; Returns a copy of the given scriptSig with the signature inserted in the given position.
     ;;
    #_public
    (§ method #_"Script" getScriptSigWithSignature [#_"Script" __scriptSig, #_"byte[]" __sigBytes, #_"int" index]
        (let [#_"int" __sigsPrefixCount 0
              #_"int" __sigsSuffixCount 0]
            (cond (.. this (isPayToScriptHash))
                (do
                    (§ ass __sigsPrefixCount 1) ;; OP_0 <sig>* <redeemScript>
                    (§ ass __sigsSuffixCount 1)
                )
                (.. this (isSentToMultiSig))
                (do
                    (§ ass __sigsPrefixCount 1) ;; OP_0 <sig>*
                )
                (.. this (isSentToAddress))
                (do
                    (§ ass __sigsSuffixCount 1) ;; <sig> <pubkey>
                )
            )
            (ScriptBuilder'updateScriptWithSignature __scriptSig, __sigBytes, index, __sigsPrefixCount, __sigsSuffixCount)
        )
    )

    ;;;
     ; Returns the index where a signature by the key should be inserted.
     ; Only applicable to a P2SH scriptSig.
     ;;
    #_public
    (§ method #_"int" getSigInsertionIndex [#_"Sha256Hash" hash, #_"ECKey" __signingKey]
        ;; Iterate over existing signatures, skipping the initial OP_0, the final redeem script
        ;; and any placeholder OP_0 sigs.
        (let [#_"List<ScriptChunk>" __existingChunks (.. (:chunks this) (subList 1, (dec (.. (:chunks this) (size)))))
              #_"ScriptChunk" __redeemScriptChunk (.. (:chunks this) (get (dec (.. (:chunks this) (size)))))]
            (ensure some? (:data __redeemScriptChunk))
            (let [#_"Script" __redeemScript (Script. (:data __redeemScriptChunk))]

                (let [#_"int" __sigCount 0
                      #_"int" __myIndex (.. __redeemScript (findKeyInRedeem __signingKey))]
                    (doseq [#_"ScriptChunk" chunk __existingChunks]
                        (cond (= (:opcode chunk) ScriptOpCodes'OP_0)
                            (do
                                ;; OP_0, skip
                            )
                            :else
                            (do
                                (ensure some? (:data chunk))
                                (when (< __myIndex (.. __redeemScript (findSigInRedeem (:data chunk), hash)))
                                    (§ return __sigCount)
                                )
                                (§ ass __sigCount (inc __sigCount))
                            )
                        )
                    )
                    __sigCount
                )
            )
        )
    )

    #_private
    (§ method- #_"int" findKeyInRedeem [#_"ECKey" key]
        (assert-argument (.. (:chunks this) (get 0) (isOpCode))) ;; P2SH scriptSig

        (let [#_"int" __numKeys (Script'decodeFromOpN (.. (:chunks this) (get (- (.. (:chunks this) (size)) 2)) :opcode))]
            (loop-when-recur [#_"int" i 0] (< i __numKeys) [(inc i)]
                (when (Arrays/equals (.. (:chunks this) (get (+ 1 i)) :data), (.. key (getPubKey)))
                    (§ return i)
                )
            )

            (throw (IllegalStateException. (str "Could not find matching key " key " in script " this)))
        )
    )

    ;;;
     ; Returns a list of the keys required by this script, assuming a multi-sig script.
     ;
     ; @throws ScriptException if the script type is not understood or is pay to address or is P2SH (run this method on the "Redeem script" instead).
     ;;
    #_public
    (§ method #_"List<ECKey>" getPubKeys []
        (when (not (.. this (isSentToMultiSig)))
            (throw (ScriptException. :ScriptError'UNKNOWN_ERROR, "Only usable for multisig scripts."))
        )

        (let [#_"ArrayList<ECKey>" result (Lists/newArrayList)
              #_"int" n (Script'decodeFromOpN (.. (:chunks this) (get (- (.. (:chunks this) (size)) 2)) :opcode))]
            (loop-when-recur [#_"int" i 0] (< i n) [(inc i)]
                (.. result (add (ECKey'fromPublicOnly (.. (:chunks this) (get (inc i)) :data))))
            )
            result
        )
    )

    #_private
    (§ method- #_"int" findSigInRedeem [#_"byte[]" __signatureBytes, #_"Sha256Hash" hash]
        (assert-argument (.. (:chunks this) (get 0) (isOpCode))) ;; P2SH scriptSig

        (let [#_"int" n (Script'decodeFromOpN (.. (:chunks this) (get (- (.. (:chunks this) (size)) 2)) :opcode))
              #_"TransactionSignature" signature (TransactionSignature'decodeFromBitcoin __signatureBytes, true)]
            (loop-when-recur [#_"int" i 0] (< i n) [(inc i)]
                (when (.. (ECKey'fromPublicOnly (.. (:chunks this) (get (inc i)) :data)) (verify hash, signature))
                    (§ return i)
                )
            )

            (throw (IllegalStateException. (str "Could not find matching key for signature on " hash " sig " (.. Utils'HEX (encode __signatureBytes)))))
        )
    )

    #_private
    #_static
    #_throws #_[ "ScriptException" ]
    (§ defn- #_"int" Script'getSigOpCount [#_"List<ScriptChunk>" chunks, #_"boolean" accurate]
        (let [#_"int" __sigOps 0
              #_"int" __lastOpCode ScriptOpCodes'OP_INVALIDOPCODE]
            (doseq [#_"ScriptChunk" chunk chunks]
                (when (.. chunk (isOpCode))
                    (§ ass __sigOps
                        (condp =? (:opcode chunk)
                            [ScriptOpCodes'OP_CHECKSIG ScriptOpCodes'OP_CHECKSIGVERIFY]
                                (inc __sigOps)
                            [ScriptOpCodes'OP_CHECKMULTISIG ScriptOpCodes'OP_CHECKMULTISIGVERIFY]
                                (if (and accurate (<= ScriptOpCodes'OP_1 __lastOpCode ScriptOpCodes'OP_16))
                                    (+ __sigOps (Script'decodeFromOpN __lastOpCode))
                                    (+ __sigOps 20)
                                )
                            __sigOps
                        )
                    )
                    (§ ass __lastOpCode (:opcode chunk))
                )
            )
            __sigOps
        )
    )

    #_static
    (§ defn #_"int" Script'decodeFromOpN [#_"int" opcode]
        (assert-argument (or (= opcode ScriptOpCodes'OP_0) (= opcode ScriptOpCodes'OP_1NEGATE) (<= ScriptOpCodes'OP_1 opcode ScriptOpCodes'OP_16)), "decodeFromOpN called on non OP_N opcode")
        (condp = opcode ScriptOpCodes'OP_0 0 ScriptOpCodes'OP_1NEGATE -1 (- (inc opcode) ScriptOpCodes'OP_1))
    )

    #_static
    (§ defn #_"int" Script'encodeToOpN [#_"int" value]
        (assert-argument (<= -1 value 16), (str "encodeToOpN called for " value " which we cannot encode in an opcode."))
        (condp = value 0 ScriptOpCodes'OP_0 -1 ScriptOpCodes'OP_1NEGATE (+ (dec value) ScriptOpCodes'OP_1))
    )

    ;;;
     ; Gets the count of regular SigOps in the script program (counting multisig ops as 20).
     ;;
    #_public
    #_static
    #_throws #_[ "ScriptException" ]
    (§ defn #_"int" Script'getSigOpCount [#_"byte[]" program]
        (let [#_"Script" script (Script.)]
            (try
                (.. script (parse program))
                (catch ScriptException _
                    ;; Ignore errors and count up to the parse-able length.
                )
            )
            (Script'getSigOpCount (:chunks script), false)
        )
    )

    ;;;
     ; Gets the count of P2SH Sig Ops in the Script scriptSig.
     ;;
    #_public
    #_static
    #_throws #_[ "ScriptException" ]
    (§ defn #_"long" Script'getP2SHSigOpCount [#_"byte[]" __scriptSig]
        (let [#_"Script" script (Script.)]
            (try
                (.. script (parse __scriptSig))
                (catch ScriptException _
                    ;; Ignore errors and count up to the parse-able length.
                )
            )
            (loop-when-recur [#_"int" i (dec (.. (:chunks script) (size)))] (<= 0 i) [(dec i)]
                (when (not (.. (:chunks script) (get i) (isOpCode)))
                    (let [#_"Script" __subScript (Script.)]
                        (.. __subScript (parse (.. (:chunks script) (get i) :data)))
                        (§ return (Script'getSigOpCount (:chunks __subScript), true))
                    )
                )
            )
            0
        )
    )

    ;;;
     ; Returns number of signatures required to satisfy this script.
     ;;
    #_public
    (§ method #_"int" getNumberOfSignaturesRequiredToSpend []
        (cond
            ;; For N of M CHECKMULTISIG script we will need N signatures to spend.
            (.. this (isSentToMultiSig))
                (Script'decodeFromOpN (.. (:chunks this) (get 0) :opcode))
            ;; pay-to-address and pay-to-pubkey require single sig
            (or (.. this (isSentToAddress)) (.. this (isSentToRawPubKey)))
                1
            (.. this (isPayToScriptHash))
                (throw (IllegalStateException. "For P2SH number of signatures depends on redeem script"))
            :else
                (throw (IllegalStateException. "Unsupported script type"))
        )
    )

    ;;;
     ; Returns number of bytes required to spend this script.  It accepts optional ECKey and redeemScript
     ; that may be required for certain types of script to estimate target size.
     ;;
    #_public
    (§ method #_"int" getNumberOfBytesRequiredToSpend [#_nilable #_"ECKey" __pubKey, #_nilable #_"Script" __redeemScript]
        (cond (.. this (isPayToScriptHash))
            (do
                ;; scriptSig: <sig> [sig] [sig...] <redeemscript>
                (assert-argument (some? __redeemScript), "P2SH script requires redeemScript to be spent")
                (+ (* (.. __redeemScript (getNumberOfSignaturesRequiredToSpend)) Script'SIG_SIZE) (alength (.. __redeemScript (getProgram))))
            )
            (.. this (isSentToMultiSig))
            (do
                ;; scriptSig: OP_0 <sig> [sig] [sig...]
                (inc (* (.. this (getNumberOfSignaturesRequiredToSpend)) Script'SIG_SIZE))
            )
            (.. this (isSentToRawPubKey))
            (do
                ;; scriptSig: <sig>
                Script'SIG_SIZE
            )
            (.. this (isSentToAddress))
            (do
                ;; scriptSig: <sig> <pubkey>
                (let [#_"int" __uncompressedPubKeySize 65]
                    (+ Script'SIG_SIZE (if (some? __pubKey) (alength (.. __pubKey (getPubKey))) __uncompressedPubKeySize))
                )
            )
            :else
            (do
                (throw (IllegalStateException. "Unsupported script type"))
            )
        )
    )

    ;;;
     ; Whether or not this is a scriptPubKey representing a pay-to-script-hash output.  In such outputs, the logic
     ; that controls reclamation is not actually in the output at all.  Instead there's just a hash, and it's up to the
     ; spending input to provide a program matching that hash.  This rule is "soft enforced" by the network as it does
     ; not exist in Bitcoin Core.  It means blocks containing P2SH transactions that don't match
     ; correctly are considered valid, but won't be mined upon, so they'll be rapidly re-orgd out of the chain.  This
     ; logic is defined by <a href="https://github.com/bitcoin/bips/blob/master/bip-0016.mediawiki">BIP 16</a>.
     ;
     ; bitcoinj does not support creation of P2SH transactions today.  The goal of P2SH is to allow short addresses
     ; even for complex scripts (e.g. multi-sig outputs) so they are convenient to work with in things like QRcodes or
     ; with copy/paste, and also to minimize the size of the unspent output set (which improves performance of the
     ; Bitcoin system).
     ;;
    #_public
    (§ method #_"boolean" isPayToScriptHash []
        ;; We have to check against the serialized form because BIP16 defines a P2SH output using an exact byte
        ;; template, not the logical program structure.  Thus you can have two programs that look identical when
        ;; printed out but one is a P2SH script and the other isn't! :( ;; )
        (let [#_"byte[]" program (.. this (getProgram))]
            (and (= (alength program) 23) (= (& 0xff (aget program 0)) ScriptOpCodes'OP_HASH160) (= (& 0xff (aget program 1)) 0x14) (= (& 0xff (aget program 22)) ScriptOpCodes'OP_EQUAL))
        )
    )

    ;;;
     ; Returns whether this script matches the format used for multisig outputs: [n] [keys...] [m] CHECKMULTISIG.
     ;;
    #_public
    (§ method #_"boolean" isSentToMultiSig []
        (and (<= 4 (.. (:chunks this) (size)))
            (let [#_"ScriptChunk" chunk (.. (:chunks this) (get (dec (.. (:chunks this) (size)))))]
                ;; Must end in OP_CHECKMULTISIG[VERIFY].
                (and (.. chunk (isOpCode))
                    (or (.. chunk (equalsOpCode ScriptOpCodes'OP_CHECKMULTISIG)) (.. chunk (equalsOpCode ScriptOpCodes'OP_CHECKMULTISIGVERIFY)))
                    (try
                        ;; Second to last chunk must be an OP_N opcode and there should be that many data chunks (keys).
                        (let [#_"ScriptChunk" m (.. (:chunks this) (get (- (.. (:chunks this) (size)) 2)))]
                            (when' (.. m (isOpCode)) => false
                                (let [#_"int" n (Script'decodeFromOpN (:opcode m))]
                                    (when' (and (<= 1 n) (= (.. (:chunks this) (size)) (+ 3 n))) => false

                                        (loop-when-recur [#_"int" i 1] (< i (- (.. (:chunks this) (size)) 2)) [(inc i)]
                                            (when (.. (:chunks this) (get i) (isOpCode))
                                                (§ return false)
                                            )
                                        )

                                        ;; First chunk must be an OP_N opcode too.
                                        (<= 1 (Script'decodeFromOpN (.. (:chunks this) (get 0) :opcode)))
                                    )
                                )
                            )
                        )
                        (catch IllegalStateException _
                            false ;; Not an OP_N opcode.
                        )
                    )
                )
            )
        )
    )

    #_public
    (§ method #_"boolean" isSentToCLTVPaymentChannel []
        ;; Check that opcodes match the pre-determined format.
        ;; chunk[1] = recipient pubkey
        ;; chunk[4] = locktime
        ;; chunk[8] = sender pubkey
        (and (= (.. (:chunks this) (size)) 10)
             (.. (:chunks this) (get 0) (equalsOpCode ScriptOpCodes'OP_IF))
             (.. (:chunks this) (get 2) (equalsOpCode ScriptOpCodes'OP_CHECKSIGVERIFY))
             (.. (:chunks this) (get 3) (equalsOpCode ScriptOpCodes'OP_ELSE))
             (.. (:chunks this) (get 5) (equalsOpCode ScriptOpCodes'OP_CHECKLOCKTIMEVERIFY))
             (.. (:chunks this) (get 6) (equalsOpCode ScriptOpCodes'OP_DROP))
             (.. (:chunks this) (get 7) (equalsOpCode ScriptOpCodes'OP_ENDIF))
             (.. (:chunks this) (get 9) (equalsOpCode ScriptOpCodes'OP_CHECKSIG)))
    )

    #_private
    #_static
    (§ defn- #_"boolean" Script'equalsRange [#_"byte[]" a, #_"int" start, #_"byte[]" b]
        (and (<= (+ start (alength b)) (alength a))
            (loop-when-recur [#_"int" i 0] (< i (alength b)) [(inc i)]
                (when (not= (aget a (+ i start)) (aget b i))
                    (§ return false)
                )
            )
            true
        )
    )

    ;;;
     ; Returns the script bytes of inputScript with all instances of the specified script object removed.
     ;;
    #_public
    #_static
    (§ defn #_"byte[]" Script'removeAllInstancesOf [#_"byte[]" script, #_"byte[]" chunk]
        ;; We usually don't end up removing anything.
        (let [#_"ByteArrayOutputStream" baos (ByteArrayOutputStream. (alength script))]
            (loop-when [#_"int" i 0] (< i (alength script))
                (let [#_"boolean" skip? (Script'equalsRange script, i, chunk)
                      #_"int" opcode (& 0xff (aget script i)) i (inc i)
                      #_"int" m
                        (cond
                            (<= 0 opcode (dec ScriptOpCodes'OP_PUSHDATA1))
                                opcode
                            (= opcode ScriptOpCodes'OP_PUSHDATA1)
                                (inc (& 0xff (aget script i)))
                            (= opcode ScriptOpCodes'OP_PUSHDATA2)
                                (+ (| (& 0xff (aget script i))
                                  (<< (& 0xff (aget script (inc i))) 8)) 2)
                            (= opcode ScriptOpCodes'OP_PUSHDATA4)
                                (+ (| (& 0xff (aget script i))
                                  (<< (& 0xff (aget script (inc i))) 8)
                                  (<< (& 0xff (aget script (inc i))) 16)
                                  (<< (& 0xff (aget script (inc i))) 24)) 4)
                            :else
                                0
                        )]
                    (when-not skip?
                        (.. baos (write opcode))
                        (.. baos (write (Arrays/copyOfRange script, i, (+ i m))))
                    )
                    (recur (+ i m))
                )
            )
            (.. baos (toByteArray))
        )
    )

    ;;;
     ; Returns the script bytes of inputScript with all instances of the given op code removed.
     ;;
    #_public
    #_static
    (§ defn #_"byte[]" Script'removeAllInstancesOfOp [#_"byte[]" script, #_"int" opcode]
        (Script'removeAllInstancesOf script, (byte-array [ (byte opcode) ]))
    )

    #_private
    #_static
    (§ defn- #_"boolean" Script'castToBool [#_"byte[]" data]
        (loop-when-recur [#_"int" i 0] (< i (alength data)) [(inc i)]
            ;; "Can be negative zero" - Bitcoin Core (see OpenSSL's BN_bn2mpi)
            (when (not= (aget data i) 0)
                (§ return (or (not= i (dec (alength data))) (not= (& 0xff (aget data i)) 0x80)))
            )
        )
        false
    )

    ;;;
     ; Cast a script chunk to a BigInteger.
     ;
     ; @see #castToBigInteger(byte[], int) for values with different maximum sizes.
     ; @throws ScriptException if the chunk is longer than 4 bytes.
     ;;
    #_private
    #_static
    #_throws #_[ "ScriptException" ]
    (§ defn- #_"BigInteger" Script'castToBigInteger [#_"byte[]" chunk, #_"boolean" __requireMinimal]
        (Script'castToBigInteger chunk, 4, __requireMinimal)
    )

    ;;;
     ; Cast a script chunk to a BigInteger.  Normally you would want {@link #castToBigInteger(byte[])} instead, this
     ; is only for cases where the normal maximum length does not apply (i.e. CHECKLOCKTIMEVERIFY, CHECKSEQUENCEVERIFY).
     ;
     ; @param maxLength The maximum length in bytes.
     ; @param requireMinimal Check if the number is encoded with the minimum possible number of bytes.
     ; @throws ScriptException if the chunk is longer than the specified maximum.
     ;;
    #_private
    #_static
    #_throws #_[ "ScriptException" ]
    (§ defn- #_"BigInteger" Script'castToBigInteger [#_"byte[]" chunk, #_"int" __maxLength, #_"boolean" __requireMinimal]
        (when (< __maxLength (alength chunk))
            (throw (ScriptException. :ScriptError'UNKNOWN_ERROR, (str "Script attempted to use an integer larger than " __maxLength " bytes")))
        )

        (when (and __requireMinimal (< 0 (alength chunk)))
            ;; Check that the number is encoded with the minimum possible number of bytes.
            ;;
            ;; If the most-significant-byte - excluding the sign bit - is zero, then we're not minimal.
            ;; Note how this test also rejects the negative-zero encoding, 0x80.
            (when (= (& 0x7f (aget chunk (dec (alength chunk)))) 0)
                ;; One exception: if there's more than one byte and the most significant bit
                ;; of the second-most-significant-byte is set, it would conflict with the sign bit.
                ;; An example of this case is +-255, which encode to 0xff00 and 0xff80 respectively.
                ;; (big-endian)
                (when (or (<= (alength chunk) 1) (= (& 0x80 (aget chunk (- (alength chunk) 2))) 0))
                    (throw (ScriptException. :ScriptError'UNKNOWN_ERROR, "non-minimally encoded script number"))
                )
            )
        )

        (Utils'decodeMPI (Utils'reverseBytes chunk), false)
    )

    #_public
    (§ method #_"boolean" isOpReturn []
        (and (< 0 (.. (:chunks this) (size))) (.. (:chunks this) (get 0) (equalsOpCode ScriptOpCodes'OP_RETURN)))
    )

    ;;;
     ; Exposes the script interpreter.  Normally you should not use this directly, instead use
     ; {@link TransactionInput#verify(TransactionOutput)} or
     ; {@link Script#correctlySpends(Transaction, long, Script)}.
     ; This method is useful if you need more precise control or access to the final state of the stack.
     ; This interface is very likely to change in future.
     ;
     ; @deprecated Use {@link #executeScript(Transaction, long, Script, java.util.LinkedList, java.util.Set)}
     ; instead.
     ;;
    #_deprecated
    #_public
    #_static
    #_throws #_[ "ScriptException" ]
    (§ defn #_"void" Script'executeScript [#_nilable #_"Transaction" __txContainingThis, #_"long" index, #_"Script" script, #_"LinkedList<byte[]>" stack, #_"boolean" __enforceNullDummy]
        (let [#_"EnumSet<ScriptVerifyFlag>" flags (if __enforceNullDummy (EnumSet/of :ScriptVerifyFlag'NULLDUMMY) (EnumSet/noneOf ScriptVerifyFlag))]

            (Script'executeScript __txContainingThis, index, script, stack, flags)
        )
        nil
    )

    ;;;
     ; Exposes the script interpreter.  Normally you should not use this directly, instead use
     ; {@link TransactionInput#verify(TransactionOutput)} or {@link Script#correctlySpends(Transaction, long, Script)}.
     ; This method is useful if you need more precise control or access to the final state of the stack.
     ; This interface is very likely to change in future.
     ;;
    #_public
    #_static
    #_throws #_[ "ScriptException" ]
    (§ defn #_"void" Script'executeScript [#_nilable #_"Transaction" __txContainingThis, #_"long" index, #_"Script" script, #_"LinkedList<byte[]>" stack, #_"Set<ScriptVerifyFlag>" __verifyFlags]
        (let [#_"int" __opCount 0
              #_"int" __lastCodeSepLocation 0]

            (let [#_"LinkedList<byte[]>" altstack (LinkedList. #_"<>")
                  #_"LinkedList<Boolean>" __ifStack (LinkedList. #_"<>")]

                (doseq [#_"ScriptChunk" chunk (:chunks script)]
                    (let [#_"boolean" __shouldExecute (not (.. __ifStack (contains false)))
                          #_"int" opcode (:opcode chunk)]

                        ;; Check stack element size.
                        (when (and (some? (:data chunk)) (< Script'MAX_SCRIPT_ELEMENT_SIZE (alength (:data chunk))))
                            (throw (ScriptException. :ScriptError'PUSH_SIZE, "Attempted to push a data string larger than 520 bytes"))
                        )

                        ;; Note how OP_RESERVED does not count towards the opcode limit.
                        (when (< ScriptOpCodes'OP_16 opcode)
                            (§ ass __opCount (inc __opCount))
                            (when (< Script'MAX_OPS_PER_SCRIPT __opCount)
                                (throw (ScriptException. :ScriptError'OP_COUNT, "More script operations than is allowed"))
                            )
                        )

                        ;; Disabled opcodes.
                        (when (any = opcode ScriptOpCodes'OP_CAT ScriptOpCodes'OP_SUBSTR ScriptOpCodes'OP_LEFT ScriptOpCodes'OP_RIGHT ScriptOpCodes'OP_INVERT ScriptOpCodes'OP_AND ScriptOpCodes'OP_OR ScriptOpCodes'OP_XOR ScriptOpCodes'OP_2MUL ScriptOpCodes'OP_2DIV ScriptOpCodes'OP_MUL ScriptOpCodes'OP_DIV ScriptOpCodes'OP_MOD ScriptOpCodes'OP_LSHIFT ScriptOpCodes'OP_RSHIFT)
                            (throw (ScriptException. :ScriptError'DISABLED_OPCODE, "Script included a disabled Script Op."))
                        )

                        (cond (and __shouldExecute (<= ScriptOpCodes'OP_0 opcode ScriptOpCodes'OP_PUSHDATA4))
                            (do
                                ;; Check minimal push.
                                (when (and (.. __verifyFlags (contains :ScriptVerifyFlag'MINIMALDATA)) (not (.. chunk (isShortestPossiblePushData))))
                                    (throw (ScriptException. :ScriptError'MINIMALDATA, "Script included a not minimal push operation."))
                                )

                                (if (= opcode ScriptOpCodes'OP_0)
                                    (.. stack (add (byte-array 0)))
                                    (.. stack (add (:data chunk)))
                                )
                            )
                            (or __shouldExecute (<= ScriptOpCodes'OP_IF opcode ScriptOpCodes'OP_ENDIF))
                            (do
                                (condp =? opcode
                                    ScriptOpCodes'OP_IF
                                        (do
                                            (when (not __shouldExecute)
                                                (.. __ifStack (add false))
                                                (§ continue )
                                            )
                                            (when (< (.. stack (size)) 1)
                                                (throw (ScriptException. :ScriptError'UNBALANCED_CONDITIONAL, "Attempted OP_IF on an empty stack"))
                                            )
                                            (.. __ifStack (add (Script'castToBool (.. stack (pollLast)))))
                                            (§ continue )
                                        )
                                    ScriptOpCodes'OP_NOTIF
                                        (do
                                            (when (not __shouldExecute)
                                                (.. __ifStack (add false))
                                                (§ continue )
                                            )
                                            (when (< (.. stack (size)) 1)
                                                (throw (ScriptException. :ScriptError'UNBALANCED_CONDITIONAL, "Attempted OP_NOTIF on an empty stack"))
                                            )
                                            (.. __ifStack (add (not (Script'castToBool (.. stack (pollLast))))))
                                            (§ continue )
                                        )
                                    ScriptOpCodes'OP_ELSE
                                        (do
                                            (when (.. __ifStack (isEmpty))
                                                (throw (ScriptException. :ScriptError'UNBALANCED_CONDITIONAL, "Attempted OP_ELSE without OP_IF/NOTIF"))
                                            )
                                            (.. __ifStack (add (not (.. __ifStack (pollLast)))))
                                            (§ continue )
                                        )
                                    ScriptOpCodes'OP_ENDIF
                                        (do
                                            (when (.. __ifStack (isEmpty))
                                                (throw (ScriptException. :ScriptError'UNBALANCED_CONDITIONAL, "Attempted OP_ENDIF without OP_IF/NOTIF"))
                                            )
                                            (.. __ifStack (pollLast))
                                            (§ continue )
                                        )

                                    ;; OP_0 is no opcode
                                    ScriptOpCodes'OP_1NEGATE
                                        (do
                                            (.. stack (add (Utils'reverseBytes (Utils'encodeMPI (.. BigInteger/ONE (negate)), false))))
                                        )
                                   [ScriptOpCodes'OP_1
                                    ScriptOpCodes'OP_2
                                    ScriptOpCodes'OP_3
                                    ScriptOpCodes'OP_4
                                    ScriptOpCodes'OP_5
                                    ScriptOpCodes'OP_6
                                    ScriptOpCodes'OP_7
                                    ScriptOpCodes'OP_8
                                    ScriptOpCodes'OP_9
                                    ScriptOpCodes'OP_10
                                    ScriptOpCodes'OP_11
                                    ScriptOpCodes'OP_12
                                    ScriptOpCodes'OP_13
                                    ScriptOpCodes'OP_14
                                    ScriptOpCodes'OP_15
                                    ScriptOpCodes'OP_16]
                                        (do
                                            (.. stack (add (Utils'reverseBytes (Utils'encodeMPI (BigInteger/valueOf (Script'decodeFromOpN opcode)), false))))
                                        )

                                    ScriptOpCodes'OP_NOP
                                        (do
                                        )

                                    ScriptOpCodes'OP_VERIFY
                                        (do
                                            (when (< (.. stack (size)) 1)
                                                (throw (ScriptException. :ScriptError'INVALID_STACK_OPERATION, "Attempted OP_VERIFY on an empty stack"))
                                            )
                                            (when (not (Script'castToBool (.. stack (pollLast))))
                                                (throw (ScriptException. :ScriptError'VERIFY, "OP_VERIFY failed"))
                                            )
                                        )

                                    ScriptOpCodes'OP_RETURN
                                        (throw (ScriptException. :ScriptError'OP_RETURN, "Script called OP_RETURN"))

                                    ScriptOpCodes'OP_TOALTSTACK
                                        (do
                                            (when (< (.. stack (size)) 1)
                                                (throw (ScriptException. :ScriptError'INVALID_STACK_OPERATION, "Attempted OP_TOALTSTACK on an empty stack"))
                                            )
                                            (.. altstack (add (.. stack (pollLast))))
                                        )
                                    ScriptOpCodes'OP_FROMALTSTACK
                                        (do
                                            (when (< (.. altstack (size)) 1)
                                                (throw (ScriptException. :ScriptError'INVALID_ALTSTACK_OPERATION, "Attempted OP_FROMALTSTACK on an empty altstack"))
                                            )
                                            (.. stack (add (.. altstack (pollLast))))
                                        )

                                    ScriptOpCodes'OP_2DROP
                                        (do
                                            (when (< (.. stack (size)) 2)
                                                (throw (ScriptException. :ScriptError'INVALID_STACK_OPERATION, "Attempted OP_2DROP on a stack with size < 2"))
                                            )
                                            (.. stack (pollLast))
                                            (.. stack (pollLast))
                                        )
                                    ScriptOpCodes'OP_2DUP
                                        (do
                                            (when (< (.. stack (size)) 2)
                                                (throw (ScriptException. :ScriptError'INVALID_STACK_OPERATION, "Attempted OP_2DUP on a stack with size < 2"))
                                            )
                                            (let [#_"Iterator<byte[]>" it (.. stack (descendingIterator)) #_"byte[]" data2 (.. it (next))]
                                                (.. stack (add (.. it (next))))
                                                (.. stack (add data2))
                                            )
                                        )
                                    ScriptOpCodes'OP_3DUP
                                        (do
                                            (when (< (.. stack (size)) 3)
                                                (throw (ScriptException. :ScriptError'INVALID_STACK_OPERATION, "Attempted OP_3DUP on a stack with size < 3"))
                                            )
                                            (let [#_"Iterator<byte[]>" it (.. stack (descendingIterator)) #_"byte[]" data3 (.. it (next)) #_"byte[]" data2 (.. it (next))]
                                                (.. stack (add (.. it (next))))
                                                (.. stack (add data2))
                                                (.. stack (add data3))
                                            )
                                        )
                                    ScriptOpCodes'OP_2OVER
                                        (do
                                            (when (< (.. stack (size)) 4)
                                                (throw (ScriptException. :ScriptError'INVALID_STACK_OPERATION, "Attempted OP_2OVER on a stack with size < 4"))
                                            )
                                            (let [#_"Iterator<byte[]>" it (.. stack (descendingIterator))]
                                                (.. it (next))
                                                (.. it (next))
                                                (let [#_"byte[]" data2 (.. it (next))]
                                                    (.. stack (add (.. it (next))))
                                                    (.. stack (add data2))
                                                )
                                            )
                                        )
                                    ScriptOpCodes'OP_2ROT
                                        (do
                                            (when (< (.. stack (size)) 6)
                                                (throw (ScriptException. :ScriptError'INVALID_STACK_OPERATION, "Attempted OP_2ROT on a stack with size < 6"))
                                            )
                                            (let [#_"byte[]" data6 (.. stack (pollLast))
                                                  #_"byte[]" data5 (.. stack (pollLast))
                                                  #_"byte[]" data4 (.. stack (pollLast))
                                                  #_"byte[]" data3 (.. stack (pollLast))
                                                  #_"byte[]" data2 (.. stack (pollLast))
                                                  #_"byte[]" data1 (.. stack (pollLast))]
                                                (.. stack (add data3))
                                                (.. stack (add data4))
                                                (.. stack (add data5))
                                                (.. stack (add data6))
                                                (.. stack (add data1))
                                                (.. stack (add data2))
                                            )
                                        )
                                    ScriptOpCodes'OP_2SWAP
                                        (do
                                            (when (< (.. stack (size)) 4)
                                                (throw (ScriptException. :ScriptError'INVALID_STACK_OPERATION, "Attempted OP_2SWAP on a stack with size < 4"))
                                            )
                                            (let [#_"byte[]" data4 (.. stack (pollLast))
                                                  #_"byte[]" data3 (.. stack (pollLast))
                                                  #_"byte[]" data2 (.. stack (pollLast))
                                                  #_"byte[]" data1 (.. stack (pollLast))]
                                                (.. stack (add data3))
                                                (.. stack (add data4))
                                                (.. stack (add data1))
                                                (.. stack (add data2))
                                            )
                                        )

                                    ScriptOpCodes'OP_IFDUP
                                        (do
                                            (when (< (.. stack (size)) 1)
                                                (throw (ScriptException. :ScriptError'INVALID_STACK_OPERATION, "Attempted OP_IFDUP on an empty stack"))
                                            )
                                            (when (Script'castToBool (.. stack (getLast)))
                                                (.. stack (add (.. stack (getLast))))
                                            )
                                        )

                                    ScriptOpCodes'OP_DEPTH
                                        (do
                                            (.. stack (add (Utils'reverseBytes (Utils'encodeMPI (BigInteger/valueOf (.. stack (size))), false))))
                                        )

                                    ScriptOpCodes'OP_DROP
                                        (do
                                            (when (< (.. stack (size)) 1)
                                                (throw (ScriptException. :ScriptError'INVALID_STACK_OPERATION, "Attempted OP_DROP on an empty stack"))
                                            )
                                            (.. stack (pollLast))
                                        )
                                    ScriptOpCodes'OP_DUP
                                        (do
                                            (when (< (.. stack (size)) 1)
                                                (throw (ScriptException. :ScriptError'INVALID_STACK_OPERATION, "Attempted OP_DUP on an empty stack"))
                                            )
                                            (.. stack (add (.. stack (getLast))))
                                        )
                                    ScriptOpCodes'OP_NIP
                                        (do
                                            (when (< (.. stack (size)) 2)
                                                (throw (ScriptException. :ScriptError'INVALID_STACK_OPERATION, "Attempted OP_NIP on a stack with size < 2"))
                                            )
                                            (let [#_"byte[]" data (.. stack (pollLast))]
                                                (.. stack (pollLast))
                                                (.. stack (add data))
                                            )
                                        )
                                    ScriptOpCodes'OP_OVER
                                        (do
                                            (when (< (.. stack (size)) 2)
                                                (throw (ScriptException. :ScriptError'INVALID_STACK_OPERATION, "Attempted OP_OVER on a stack with size < 2"))
                                            )
                                            (let [#_"Iterator<byte[]>" it (.. stack (descendingIterator))]
                                                (.. it (next))
                                                (.. stack (add (.. it (next))))
                                            )
                                        )
                                   [ScriptOpCodes'OP_PICK
                                    ScriptOpCodes'OP_ROLL]
                                        (do
                                            (when (< (.. stack (size)) 1)
                                                (throw (ScriptException. :ScriptError'INVALID_STACK_OPERATION, "Attempted OP_PICK/OP_ROLL on an empty stack"))
                                            )
                                            (let [#_"long" n (.. (Script'castToBigInteger (.. stack (pollLast)), (.. __verifyFlags (contains :ScriptVerifyFlag'MINIMALDATA))) (longValue))]
                                                (when (not (< -1 n (.. stack (size))))
                                                    (throw (ScriptException. :ScriptError'INVALID_STACK_OPERATION, "OP_PICK/OP_ROLL attempted to get data deeper than stack size"))
                                                )
                                                (let [#_"Iterator<byte[]>" it (.. stack (descendingIterator))]
                                                    (dotimes [_ n]
                                                        (.. it (next))
                                                    )
                                                    (let [#_"byte[]" data (.. it (next))]
                                                        (when (= opcode ScriptOpCodes'OP_ROLL)
                                                            (.. it (remove))
                                                        )
                                                        (.. stack (add data))
                                                    )
                                                )
                                            )
                                        )
                                    ScriptOpCodes'OP_ROT
                                        (do
                                            (when (< (.. stack (size)) 3)
                                                (throw (ScriptException. :ScriptError'INVALID_STACK_OPERATION, "Attempted OP_ROT on a stack with size < 3"))
                                            )
                                            (let [#_"byte[]" data3 (.. stack (pollLast))
                                                  #_"byte[]" data2 (.. stack (pollLast))
                                                  #_"byte[]" data1 (.. stack (pollLast))]
                                                (.. stack (add data2))
                                                (.. stack (add data3))
                                                (.. stack (add data1))
                                            )
                                        )
                                   [ScriptOpCodes'OP_SWAP
                                    ScriptOpCodes'OP_TUCK]
                                        (do
                                            (when (< (.. stack (size)) 2)
                                                (throw (ScriptException. :ScriptError'INVALID_STACK_OPERATION, "Attempted OP_SWAP on a stack with size < 2"))
                                            )
                                            (let [#_"byte[]" data2 (.. stack (pollLast)) #_"byte[]" data1 (.. stack (pollLast))]
                                                (.. stack (add data2))
                                                (.. stack (add data1))
                                                (when (= opcode ScriptOpCodes'OP_TUCK)
                                                    (.. stack (add data2))
                                                )
                                            )
                                        )

                                    ScriptOpCodes'OP_SIZE
                                        (do
                                            (when (< (.. stack (size)) 1)
                                                (throw (ScriptException. :ScriptError'INVALID_STACK_OPERATION, "Attempted OP_SIZE on an empty stack"))
                                            )
                                            (.. stack (add (Utils'reverseBytes (Utils'encodeMPI (BigInteger/valueOf (alength (.. stack (getLast)))), false))))
                                        )
                                    ScriptOpCodes'OP_EQUAL
                                        (do
                                            (when (< (.. stack (size)) 2)
                                                (throw (ScriptException. :ScriptError'INVALID_STACK_OPERATION, "Attempted OP_EQUAL on a stack with size < 2"))
                                            )
                                            (.. stack (add (if (Arrays/equals (.. stack (pollLast)), (.. stack (pollLast))) (byte-array [ 1 ]) (byte-array 0))))
                                        )
                                    ScriptOpCodes'OP_EQUALVERIFY
                                        (do
                                            (when (< (.. stack (size)) 2)
                                                (throw (ScriptException. :ScriptError'INVALID_STACK_OPERATION, "Attempted OP_EQUALVERIFY on a stack with size < 2"))
                                            )
                                            (when (not (Arrays/equals (.. stack (pollLast)), (.. stack (pollLast))))
                                                (throw (ScriptException. :ScriptError'EQUALVERIFY, "OP_EQUALVERIFY: non-equal data"))
                                            )
                                        )

                                   [ScriptOpCodes'OP_1ADD
                                    ScriptOpCodes'OP_1SUB
                                    ScriptOpCodes'OP_NEGATE
                                    ScriptOpCodes'OP_ABS
                                    ScriptOpCodes'OP_NOT
                                    ScriptOpCodes'OP_0NOTEQUAL]
                                        (do
                                            (when (< (.. stack (size)) 1)
                                                (throw (ScriptException. :ScriptError'INVALID_STACK_OPERATION, "Attempted a numeric op on an empty stack"))
                                            )
                                            (let [#_"BigInteger" n (Script'castToBigInteger (.. stack (pollLast)), (.. __verifyFlags (contains :ScriptVerifyFlag'MINIMALDATA)))
                                                  n (condp = opcode
                                                        ScriptOpCodes'OP_1ADD      (.. n (add BigInteger/ONE))
                                                        ScriptOpCodes'OP_1SUB      (.. n (subtract BigInteger/ONE))
                                                        ScriptOpCodes'OP_NEGATE    (.. n (negate))
                                                        ScriptOpCodes'OP_ABS       (if (< (.. n (signum)) 0) (.. n (negate)) n)
                                                        ScriptOpCodes'OP_NOT       (if (.. n (equals BigInteger/ZERO)) BigInteger/ONE BigInteger/ZERO)
                                                        ScriptOpCodes'OP_0NOTEQUAL (if (.. n (equals BigInteger/ZERO)) BigInteger/ZERO BigInteger/ONE)
                                                        (throw (AssertionError. "Unreachable"))
                                                    )]
                                                (.. stack (add (Utils'reverseBytes (Utils'encodeMPI n, false))))
                                            )
                                        )
                                   [ScriptOpCodes'OP_ADD
                                    ScriptOpCodes'OP_SUB
                                    ScriptOpCodes'OP_BOOLAND
                                    ScriptOpCodes'OP_BOOLOR
                                    ScriptOpCodes'OP_NUMEQUAL
                                    ScriptOpCodes'OP_NUMNOTEQUAL
                                    ScriptOpCodes'OP_LESSTHAN
                                    ScriptOpCodes'OP_GREATERTHAN
                                    ScriptOpCodes'OP_LESSTHANOREQUAL
                                    ScriptOpCodes'OP_GREATERTHANOREQUAL
                                    ScriptOpCodes'OP_MIN
                                    ScriptOpCodes'OP_MAX]
                                        (do
                                            (when (< (.. stack (size)) 2)
                                                (throw (ScriptException. :ScriptError'INVALID_STACK_OPERATION, "Attempted a numeric op on a stack with size < 2"))
                                            )
                                            (let [#_"BigInteger" n2 (Script'castToBigInteger (.. stack (pollLast)), (.. __verifyFlags (contains :ScriptVerifyFlag'MINIMALDATA)))
                                                  #_"BigInteger" n1 (Script'castToBigInteger (.. stack (pollLast)), (.. __verifyFlags (contains :ScriptVerifyFlag'MINIMALDATA)))
                                                  #_"BigInteger" n
                                                    (condp = opcode
                                                        ScriptOpCodes'OP_ADD                (.. n1 (add n2))
                                                        ScriptOpCodes'OP_SUB                (.. n1 (subtract n2))
                                                        ScriptOpCodes'OP_BOOLAND            (if (and (not (.. n1 (equals BigInteger/ZERO))) (not (.. n2 (equals BigInteger/ZERO)))) BigInteger/ONE BigInteger/ZERO)
                                                        ScriptOpCodes'OP_BOOLOR             (if (or (not (.. n1 (equals BigInteger/ZERO))) (not (.. n2 (equals BigInteger/ZERO)))) BigInteger/ONE BigInteger/ZERO)
                                                        ScriptOpCodes'OP_NUMEQUAL           (if (.. n1 (equals n2)) BigInteger/ONE BigInteger/ZERO)
                                                        ScriptOpCodes'OP_NUMNOTEQUAL        (if (not (.. n1 (equals n2))) BigInteger/ONE BigInteger/ZERO)
                                                        ScriptOpCodes'OP_LESSTHAN           (if (< (.. n1 (compareTo n2)) 0) BigInteger/ONE BigInteger/ZERO)
                                                        ScriptOpCodes'OP_GREATERTHAN        (if (> (.. n1 (compareTo n2)) 0) BigInteger/ONE BigInteger/ZERO)
                                                        ScriptOpCodes'OP_LESSTHANOREQUAL    (if (<= (.. n1 (compareTo n2)) 0) BigInteger/ONE BigInteger/ZERO)
                                                        ScriptOpCodes'OP_GREATERTHANOREQUAL (if (>= (.. n1 (compareTo n2)) 0) BigInteger/ONE BigInteger/ZERO)
                                                        ScriptOpCodes'OP_MIN                (if (< (.. n1 (compareTo n2)) 0) n1 n2)
                                                        ScriptOpCodes'OP_MAX                (if (> (.. n1 (compareTo n2)) 0) n1 n2)
                                                        (throw (RuntimeException. "Opcode switched at runtime?"))
                                                    )]
                                                (.. stack (add (Utils'reverseBytes (Utils'encodeMPI n, false))))
                                            )
                                        )

                                    ScriptOpCodes'OP_NUMEQUALVERIFY
                                        (do
                                            (when (< (.. stack (size)) 2)
                                                (throw (ScriptException. :ScriptError'INVALID_STACK_OPERATION, "Attempted OP_NUMEQUALVERIFY on a stack with size < 2"))
                                            )
                                            (let [#_"BigInteger" n2 (Script'castToBigInteger (.. stack (pollLast)), (.. __verifyFlags (contains :ScriptVerifyFlag'MINIMALDATA)))
                                                  #_"BigInteger" n1 (Script'castToBigInteger (.. stack (pollLast)), (.. __verifyFlags (contains :ScriptVerifyFlag'MINIMALDATA)))]

                                                (when (not (.. n1 (equals n2)))
                                                    (throw (ScriptException. :ScriptError'NUMEQUALVERIFY, "OP_NUMEQUALVERIFY failed"))
                                                )
                                            )
                                        )

                                    ScriptOpCodes'OP_WITHIN
                                        (do
                                            (when (< (.. stack (size)) 3)
                                                (throw (ScriptException. :ScriptError'INVALID_STACK_OPERATION, "Attempted OP_WITHIN on a stack with size < 3"))
                                            )
                                            (let [#_"BigInteger" n3 (Script'castToBigInteger (.. stack (pollLast)), (.. __verifyFlags (contains :ScriptVerifyFlag'MINIMALDATA)))
                                                  #_"BigInteger" n2 (Script'castToBigInteger (.. stack (pollLast)), (.. __verifyFlags (contains :ScriptVerifyFlag'MINIMALDATA)))
                                                  #_"BigInteger" n1 (Script'castToBigInteger (.. stack (pollLast)), (.. __verifyFlags (contains :ScriptVerifyFlag'MINIMALDATA)))]
                                                (if (and (<= (.. n2 (compareTo n1)) 0) (< (.. n1 (compareTo n3)) 0))
                                                    (.. stack (add (Utils'reverseBytes (Utils'encodeMPI BigInteger/ONE, false))))
                                                    (.. stack (add (Utils'reverseBytes (Utils'encodeMPI BigInteger/ZERO, false))))
                                                )
                                            )
                                        )

                                    ScriptOpCodes'OP_RIPEMD160
                                        (do
                                            (when (< (.. stack (size)) 1)
                                                (throw (ScriptException. :ScriptError'INVALID_STACK_OPERATION, "Attempted OP_RIPEMD160 on an empty stack"))
                                            )
                                            (let [#_"RIPEMD160Digest" digest (RIPEMD160Digest.) #_"byte[]" __dataToHash (.. stack (pollLast))]
                                                (.. digest (update __dataToHash, 0, (alength __dataToHash)))
                                                (let [#_"byte[]" __ripmemdHash (byte-array 20)]
                                                    (.. digest (doFinal __ripmemdHash, 0))
                                                    (.. stack (add __ripmemdHash))
                                                )
                                            )
                                        )
                                    ScriptOpCodes'OP_SHA1
                                        (do
                                            (when (< (.. stack (size)) 1)
                                                (throw (ScriptException. :ScriptError'INVALID_STACK_OPERATION, "Attempted OP_SHA1 on an empty stack"))
                                            )
                                            (try
                                                (.. stack (add (.. (MessageDigest/getInstance "SHA-1") (digest (.. stack (pollLast))))))
                                                (catch NoSuchAlgorithmException e
                                                    (throw (RuntimeException. e)) ;; Cannot happen.
                                                )
                                            )
                                        )
                                    ScriptOpCodes'OP_SHA256
                                        (do
                                            (when (< (.. stack (size)) 1)
                                                (throw (ScriptException. :ScriptError'INVALID_STACK_OPERATION, "Attempted OP_SHA256 on an empty stack"))
                                            )
                                            (.. stack (add (Sha256Hash'hash (.. stack (pollLast)))))
                                        )
                                    ScriptOpCodes'OP_HASH160
                                        (do
                                            (when (< (.. stack (size)) 1)
                                                (throw (ScriptException. :ScriptError'INVALID_STACK_OPERATION, "Attempted OP_HASH160 on an empty stack"))
                                            )
                                            (.. stack (add (Utils'sha256hash160 (.. stack (pollLast)))))
                                        )
                                    ScriptOpCodes'OP_HASH256
                                        (do
                                            (when (< (.. stack (size)) 1)
                                                (throw (ScriptException. :ScriptError'INVALID_STACK_OPERATION, "Attempted OP_SHA256 on an empty stack"))
                                            )
                                            (.. stack (add (Sha256Hash'hashTwice (.. stack (pollLast)))))
                                        )

                                    ScriptOpCodes'OP_CODESEPARATOR
                                        (do
                                            (§ ass __lastCodeSepLocation (inc (.. chunk (getStartLocationInProgram))))
                                        )

                                   [ScriptOpCodes'OP_CHECKSIG
                                    ScriptOpCodes'OP_CHECKSIGVERIFY]
                                        (do
                                            (when (nil? __txContainingThis)
                                                (throw (IllegalStateException. "Script attempted signature check but no tx was provided"))
                                            )
                                            (Script'executeCheckSig __txContainingThis, (int index), script, stack, __lastCodeSepLocation, opcode, __verifyFlags)
                                        )
                                   [ScriptOpCodes'OP_CHECKMULTISIG
                                    ScriptOpCodes'OP_CHECKMULTISIGVERIFY]
                                        (do
                                            (when (nil? __txContainingThis)
                                                (throw (IllegalStateException. "Script attempted signature check but no tx was provided"))
                                            )
                                            (§ ass __opCount (Script'executeMultiSig __txContainingThis, (int index), script, stack, __opCount, __lastCodeSepLocation, opcode, __verifyFlags))
                                        )
                                    ScriptOpCodes'OP_CHECKLOCKTIMEVERIFY
                                        (if (not (.. __verifyFlags (contains :ScriptVerifyFlag'CHECKLOCKTIMEVERIFY)))
                                            ;; not enabled; treat as a NOP2
                                            (when (.. __verifyFlags (contains :ScriptVerifyFlag'DISCOURAGE_UPGRADABLE_NOPS))
                                                (throw (ScriptException. :ScriptError'DISCOURAGE_UPGRADABLE_NOPS, (str "Script used a reserved opcode " opcode)))
                                            )
                                            (Script'executeCheckLockTimeVerify __txContainingThis, (int index), stack, __verifyFlags)
                                        )
                                    ScriptOpCodes'OP_CHECKSEQUENCEVERIFY
                                        (if (not (.. __verifyFlags (contains :ScriptVerifyFlag'CHECKSEQUENCEVERIFY)))
                                            ;; not enabled; treat as a NOP3
                                            (when (.. __verifyFlags (contains :ScriptVerifyFlag'DISCOURAGE_UPGRADABLE_NOPS))
                                                (throw (ScriptException. :ScriptError'DISCOURAGE_UPGRADABLE_NOPS, (str "Script used a reserved opcode " opcode)))
                                            )
                                            (Script'executeCheckSequenceVerify __txContainingThis, (int index), stack, __verifyFlags)
                                        )

                                   [ScriptOpCodes'OP_NOP1
                                    ScriptOpCodes'OP_NOP4
                                    ScriptOpCodes'OP_NOP5
                                    ScriptOpCodes'OP_NOP6
                                    ScriptOpCodes'OP_NOP7
                                    ScriptOpCodes'OP_NOP8
                                    ScriptOpCodes'OP_NOP9
                                    ScriptOpCodes'OP_NOP10]
                                        (do
                                            (when (.. __verifyFlags (contains :ScriptVerifyFlag'DISCOURAGE_UPGRADABLE_NOPS))
                                                (throw (ScriptException. :ScriptError'DISCOURAGE_UPGRADABLE_NOPS, (str "Script used a reserved opcode " opcode)))
                                            )
                                        )

                                    (throw (ScriptException. :ScriptError'BAD_OPCODE, (str "Script used a reserved or disabled opcode: " opcode)))
                                )
                            )
                        )

                        (when (not (<= 0 (+ (.. stack (size)) (.. altstack (size))) Script'MAX_STACK_SIZE))
                            (throw (ScriptException. :ScriptError'STACK_SIZE, "Stack size exceeded range"))
                        )
                    )
                )

                (when (not (.. __ifStack (isEmpty)))
                    (throw (ScriptException. :ScriptError'UNBALANCED_CONDITIONAL, "OP_IF/OP_NOTIF without OP_ENDIF"))
                )
            )
        )
        nil
    )

    ;; This is more or less a direct translation of the code in Bitcoin Core.
    #_private
    #_static
    #_throws #_[ "ScriptException" ]
    (§ defn- #_"void" Script'executeCheckLockTimeVerify [#_"Transaction" tx, #_"int" index, #_"LinkedList<byte[]>" stack, #_"Set<ScriptVerifyFlag>" flags]
        (when (< (.. stack (size)) 1)
            (throw (ScriptException. :ScriptError'INVALID_STACK_OPERATION, "Attempted OP_CHECKLOCKTIMEVERIFY on a stack with size < 1"))
        )

        ;; Thus as a special case we tell CScriptNum to accept up to 5-byte bignums to avoid year 2038 issue.
        (let [#_"BigInteger" __nLockTime (Script'castToBigInteger (.. stack (getLast)), 5, (.. flags (contains :ScriptVerifyFlag'MINIMALDATA)))]
            (cond
                (< (.. __nLockTime (compareTo BigInteger/ZERO)) 0)
                    (throw (ScriptException. :ScriptError'NEGATIVE_LOCKTIME, "Negative locktime"))

                ;; There are two kinds of nLockTime, need to ensure we're comparing apples-to-apples.
                (not (or (and (< (.. tx (getLockTime)) Transaction'LOCKTIME_THRESHOLD) (< (.. __nLockTime (compareTo Transaction'LOCKTIME_THRESHOLD_BIG)) 0)) (and (<= Transaction'LOCKTIME_THRESHOLD (.. tx (getLockTime))) (<= 0 (.. __nLockTime (compareTo Transaction'LOCKTIME_THRESHOLD_BIG))))))
                    (throw (ScriptException. :ScriptError'UNSATISFIED_LOCKTIME, "Locktime requirement type mismatch"))

                ;; Now that we know we're comparing apples-to-apples, the comparison is a simple numeric one.
                (< 0 (.. __nLockTime (compareTo (BigInteger/valueOf (.. tx (getLockTime))))))
                    (throw (ScriptException. :ScriptError'UNSATISFIED_LOCKTIME, "Locktime requirement not satisfied"))

                ;; Finally the nLockTime feature can be disabled and thus CHECKLOCKTIMEVERIFY bypassed if every txin has been
                ;; finalized by setting nSequence to maxint.  The transaction would be allowed into the blockchain, making
                ;; the opcode ineffective.
                ;;
                ;; Testing if this vin is not final is sufficient to prevent this condition.  Alternatively we could test all
                ;; inputs, but testing just this input minimizes the data required to prove correct CHECKLOCKTIMEVERIFY execution.
                (not (.. tx (getInput index) (hasSequence)))
                    (throw (ScriptException. :ScriptError'UNSATISFIED_LOCKTIME, "Transaction contains a final transaction input for a CHECKLOCKTIMEVERIFY script."))
            )
        )
        nil
    )

    #_private
    #_static
    #_throws #_[ "ScriptException" ]
    (§ defn- #_"void" Script'executeCheckSequenceVerify [#_"Transaction" tx, #_"int" index, #_"LinkedList<byte[]>" stack, #_"Set<ScriptVerifyFlag>" flags]
        (if (< (.. stack (size)) 1)
            (throw (ScriptException. :ScriptError'INVALID_STACK_OPERATION, "Attempted OP_CHECKSEQUENCEVERIFY on a stack with size < 1"))
            ;; Note that elsewhere numeric opcodes are limited to operands in the range -2**31+1 to 2**31-1,
            ;; however it is legal for opcodes to produce results exceeding that range.  This limitation is
            ;; implemented by CScriptNum's default 4-byte limit.
            ;;
            ;; Thus as a special case we tell CScriptNum to accept up to 5-byte bignums, which are good until
            ;; 2**39-1, well beyond the 2**32-1 limit of the nSequence field itself.
            (let [#_"long" n (.. (Script'castToBigInteger (.. stack (getLast)), 5, (.. flags (contains :ScriptVerifyFlag'MINIMALDATA))) (longValue))]
                (cond
                    ;; In the rare event that the argument may be < 0 due to some arithmetic being done first,
                    ;; you can always use 0 MAX CHECKSEQUENCEVERIFY.
                    (< n 0)
                        (throw (ScriptException. :ScriptError'NEGATIVE_LOCKTIME, "Negative sequence"))

                    ;; To provide for future soft-fork extensibility, if the operand has the disabled lock-time
                    ;; flag set, CHECKSEQUENCEVERIFY behaves as a NOP.
                    (not= (& n Transaction'SEQUENCE_LOCKTIME_DISABLE_FLAG) 0)
                        nil

                    ;; Compare the specified sequence number with the input.
                    (not (Script'checkSequence n, tx, index))
                        (throw (ScriptException. :ScriptError'UNSATISFIED_LOCKTIME, "Unsatisfied CHECKLOCKTIMEVERIFY lock time"))
                )
            )
        )
        nil
    )

    #_private
    #_static
    (§ defn- #_"boolean" Script'checkSequence [#_"long" __nSequence, #_"Transaction" __txContainingThis, #_"int" index]
        ;; Relative lock times are supported by comparing the passed in operand to the sequence number of the input.
        (let [#_"long" __txToSequence (.. __txContainingThis (getInput index) (getSequenceNumber))]
            (and
                ;; Fail if the transaction's version number is not set high enough to trigger BIP 68 rules.
                (<= 2 (.. __txContainingThis (getVersion)))

                ;; Sequence numbers with their most significant bit set are not consensus constrained.  Testing
                ;; that the transaction's sequence number do not have this bit set prevents using this property
                ;; to get around a CHECKSEQUENCEVERIFY check.
                (= (& __txToSequence Transaction'SEQUENCE_LOCKTIME_DISABLE_FLAG) 0)

                ;; Mask off any bits that do not have consensus-enforced meaning before doing the integer comparisons.
                (let [#_"long" __nLockTimeMask (| Transaction'SEQUENCE_LOCKTIME_TYPE_FLAG Transaction'SEQUENCE_LOCKTIME_MASK)
                      #_"long" __txToSequenceMasked (& __txToSequence __nLockTimeMask)
                      #_"long" __nSequenceMasked (& __nSequence __nLockTimeMask)]
                    (and
                        ;; There are two kinds of nSequence: lock-by-blockheight and lock-by-blocktime, distinguished by
                        ;; whether nSequenceMasked < CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG.
                        ;;
                        ;; We want to compare apples to apples, so fail the script unless the type of nSequenceMasked
                        ;; being tested is the same as the nSequenceMasked in the transaction.
                        (or (and (< __txToSequenceMasked Transaction'SEQUENCE_LOCKTIME_TYPE_FLAG) (< __nSequenceMasked Transaction'SEQUENCE_LOCKTIME_TYPE_FLAG)) (and (<= Transaction'SEQUENCE_LOCKTIME_TYPE_FLAG __txToSequenceMasked) (<= Transaction'SEQUENCE_LOCKTIME_TYPE_FLAG __nSequenceMasked)))

                        ;; Now that we know we're comparing apples-to-apples, the comparison is a simple numeric one.
                        (<= __nSequenceMasked __txToSequenceMasked)
                    )
                )
            )
        )
    )

    #_private
    #_static
    #_throws #_[ "ScriptException" ]
    (§ defn- #_"void" Script'executeCheckSig [#_"Transaction" __txContainingThis, #_"int" index, #_"Script" script, #_"LinkedList<byte[]>" stack, #_"int" __lastCodeSepLocation, #_"int" opcode, #_"Set<ScriptVerifyFlag>" __verifyFlags]
        (let [#_"boolean" __requireCanonical (or (.. __verifyFlags (contains :ScriptVerifyFlag'STRICTENC)) (.. __verifyFlags (contains :ScriptVerifyFlag'DERSIG)) (.. __verifyFlags (contains :ScriptVerifyFlag'LOW_S)))]
            (when (< (.. stack (size)) 2)
                (throw (ScriptException. :ScriptError'INVALID_STACK_OPERATION, "Attempted OP_CHECKSIG(VERIFY) on a stack with size < 2"))
            )

            (let [#_"byte[]" __pubKey (.. stack (pollLast))
                  #_"byte[]" __sigBytes (.. stack (pollLast))]

                (let [#_"byte[]" prog (.. script (getProgram))
                      #_"byte[]" __connectedScript (Arrays/copyOfRange prog, __lastCodeSepLocation, (alength prog))]

                    (let [#_"ByteArrayOutputStream" baos (ByteArrayOutputStream. (inc (alength __sigBytes)))]
                        (Script'writeBytes baos, __sigBytes)
                        (§ ass __connectedScript (Script'removeAllInstancesOf __connectedScript, (.. baos (toByteArray))))

                        ;; TODO: Use int for indexes everywhere, we can't have that many inputs/outputs.
                        (let [#_"boolean" __sigValid false]
                            (try
                                (let [#_"TransactionSignature" sig (TransactionSignature'decodeFromBitcoin __sigBytes, __requireCanonical, (.. __verifyFlags (contains :ScriptVerifyFlag'LOW_S)))]

                                    ;; TODO: Should check hash type is known.
                                    (let [#_"Sha256Hash" hash (.. __txContainingThis (hashForSignature index, __connectedScript, (byte (:sighash-flags sig))))]
                                        (§ ass __sigValid (ECKey'verify (.. hash (getBytes)), sig, __pubKey))
                                    )
                                )
                                (catch Exception e
                                    ;; There is (at least) one exception that could be hit here (EOFException, if the sig is too short).
                                    ;; Because I can't verify there aren't more, we use a very generic Exception catch.

                                    ;; This RuntimeException occurs when signing as we run partial/invalid scripts to see if they need more
                                    ;; signing work to be done inside LocalTransactionSigner.signInputs().
                                    (when (not (.. e (getMessage) (contains "Reached past end of ASN.1 stream")))
                                        (.. Script'log (warn "Signature checking failed!", e))
                                    )
                                )
                            )

                            (cond (= opcode ScriptOpCodes'OP_CHECKSIG)
                                (do
                                    (.. stack (add (if __sigValid (byte-array [ 1 ]) (byte-array 0))))
                                )
                                (and (= opcode ScriptOpCodes'OP_CHECKSIGVERIFY) (not __sigValid))
                                (do
                                    (throw (ScriptException. :ScriptError'CHECKSIGVERIFY, "Script failed OP_CHECKSIGVERIFY"))
                                )
                            )
                        )
                    )
                )
            )
        )
        nil
    )

    #_private
    #_static
    #_throws #_[ "ScriptException" ]
    (§ defn- #_"int" Script'executeMultiSig [#_"Transaction" __txContainingThis, #_"int" index, #_"Script" script, #_"LinkedList<byte[]>" stack, #_"int" __opCount, #_"int" __lastCodeSepLocation, #_"int" opcode, #_"Set<ScriptVerifyFlag>" __verifyFlags]
        (let [#_"boolean" __requireCanonical (or (.. __verifyFlags (contains :ScriptVerifyFlag'STRICTENC)) (.. __verifyFlags (contains :ScriptVerifyFlag'DERSIG)) (.. __verifyFlags (contains :ScriptVerifyFlag'LOW_S)))]
            (when (< (.. stack (size)) 1)
                (throw (ScriptException. :ScriptError'INVALID_STACK_OPERATION, "Attempted OP_CHECKMULTISIG(VERIFY) on a stack with size < 2"))
            )

            (let [#_"int" __pubKeyCount (.. (Script'castToBigInteger (.. stack (pollLast)), (.. __verifyFlags (contains :ScriptVerifyFlag'MINIMALDATA))) (intValue))]
                (when (or (< __pubKeyCount 0) (< Script'MAX_PUBKEYS_PER_MULTISIG __pubKeyCount))
                    (throw (ScriptException. :ScriptError'PUBKEY_COUNT, "OP_CHECKMULTISIG(VERIFY) with pubkey count out of range"))
                )

                (§ ass __opCount (+ __opCount __pubKeyCount))
                (when (< Script'MAX_OPS_PER_SCRIPT __opCount)
                    (throw (ScriptException. :ScriptError'OP_COUNT, "Total op count > 201 during OP_CHECKMULTISIG(VERIFY)"))
                )
                (when (< (.. stack (size)) (inc __pubKeyCount))
                    (throw (ScriptException. :ScriptError'INVALID_STACK_OPERATION, "Attempted OP_CHECKMULTISIG(VERIFY) on a stack with size < num_of_pubkeys + 2"))
                )

                (let [#_"LinkedList<byte[]>" pubkeys (LinkedList. #_"<>")]
                    (loop-when-recur [#_"int" i 0] (< i __pubKeyCount) [(inc i)]
                        (.. pubkeys (add (.. stack (pollLast))))
                    )

                    (let [#_"int" __sigCount (.. (Script'castToBigInteger (.. stack (pollLast)), (.. __verifyFlags (contains :ScriptVerifyFlag'MINIMALDATA))) (intValue))]
                        (when (or (< __sigCount 0) (< __pubKeyCount __sigCount))
                            (throw (ScriptException. :ScriptError'SIG_COUNT, "OP_CHECKMULTISIG(VERIFY) with sig count out of range"))
                        )
                        (when (< (.. stack (size)) (inc __sigCount))
                            (throw (ScriptException. :ScriptError'INVALID_STACK_OPERATION, "Attempted OP_CHECKMULTISIG(VERIFY) on a stack with size < num_of_pubkeys + num_of_signatures + 3"))
                        )

                        (let [#_"LinkedList<byte[]>" sigs (LinkedList. #_"<>")]
                            (loop-when-recur [#_"int" i 0] (< i __sigCount) [(inc i)]
                                (.. sigs (add (.. stack (pollLast))))
                            )

                            (let [#_"byte[]" prog (.. script (getProgram))
                                  #_"byte[]" __connectedScript (Arrays/copyOfRange prog, __lastCodeSepLocation, (alength prog))]

                                (doseq [#_"byte[]" sig sigs]
                                    (let [#_"ByteArrayOutputStream" baos (ByteArrayOutputStream. (inc (alength sig)))]
                                        (Script'writeBytes baos, sig)
                                        (§ ass __connectedScript (Script'removeAllInstancesOf __connectedScript, (.. baos (toByteArray))))
                                    )
                                )

                                (let [#_"boolean" valid true]
                                    (while (< 0 (.. sigs (size)))
                                        (let [#_"byte[]" __pubKey (.. pubkeys (pollFirst))]
                                            ;; We could reasonably move this out of the loop, but because signature verification is significantly
                                            ;; more expensive than hashing, its not a big deal.
                                            (try
                                                (let [#_"TransactionSignature" sig (TransactionSignature'decodeFromBitcoin (.. sigs (getFirst)), __requireCanonical)
                                                      #_"Sha256Hash" hash (.. __txContainingThis (hashForSignature index, __connectedScript, (byte (:sighash-flags sig))))]
                                                    (when (ECKey'verify (.. hash (getBytes)), sig, __pubKey)
                                                        (.. sigs (pollFirst))
                                                    )
                                                )
                                                (catch Exception _
                                                    ;; There is (at least) one exception that could be hit here (EOFException, if the sig is too short).
                                                    ;; Because I can't verify there aren't more, we use a very generic Exception catch.
                                                )
                                            )

                                            (when (< (.. pubkeys (size)) (.. sigs (size)))
                                                (§ ass valid false)
                                                (§ break )
                                            )
                                        )
                                    )

                                    ;; We uselessly remove a stack object to emulate a Bitcoin Core bug.
                                    (let [#_"byte[]" __nullDummy (.. stack (pollLast))]
                                        (when (and (.. __verifyFlags (contains :ScriptVerifyFlag'NULLDUMMY)) (< 0 (alength __nullDummy)))
                                            (throw (ScriptException. :ScriptError'SIG_NULLFAIL, (str "OP_CHECKMULTISIG(VERIFY) with non-null nulldummy: " (Arrays/toString __nullDummy))))
                                        )

                                        (cond (= opcode ScriptOpCodes'OP_CHECKMULTISIG)
                                            (do
                                                (.. stack (add (if valid (byte-array [ 1 ]) (byte-array 0))))
                                            )
                                            (and (= opcode ScriptOpCodes'OP_CHECKMULTISIGVERIFY) (not valid))
                                            (do
                                                (throw (ScriptException. :ScriptError'SIG_NULLFAIL, "Script failed OP_CHECKMULTISIGVERIFY"))
                                            )
                                        )

                                        __opCount
                                    )
                                )
                            )
                        )
                    )
                )
            )
        )
    )

    ;;;
     ; Verifies that this script (interpreted as a scriptSig) correctly spends the given scriptPubKey, enabling all validation rules.
     ;
     ; @param txContainingThis The transaction in which this input scriptSig resides.
     ;                         Accessing txContainingThis from another thread while this method runs results in undefined behavior.
     ; @param scriptSigIndex The index in txContainingThis of the scriptSig (note: NOT the index of the scriptPubKey).
     ; @param scriptPubKey The connected scriptPubKey containing the conditions needed to claim the value.
     ; @deprecated Use {@link #correctlySpends(Transaction, long, Script, java.util.Set)}
     ;             instead so that verification flags do not change as new verification options are added.
     ;;
    #_deprecated
    #_public
    #_throws #_[ "ScriptException" ]
    (§ method #_"void" correctlySpends [#_"Transaction" __txContainingThis, #_"long" __scriptSigIndex, #_"Script" __scriptPubKey]
        (.. this (correctlySpends __txContainingThis, __scriptSigIndex, __scriptPubKey, Script'ALL_VERIFY_FLAGS))
        nil
    )

    ;;;
     ; Verifies that this script (interpreted as a scriptSig) correctly spends the given scriptPubKey.
     ;
     ; @param txContainingThis The transaction in which this input scriptSig resides.
     ;                         Accessing txContainingThis from another thread while this method runs results in undefined behavior.
     ; @param scriptSigIndex The index in txContainingThis of the scriptSig (note: NOT the index of the scriptPubKey).
     ; @param scriptPubKey The connected scriptPubKey containing the conditions needed to claim the value.
     ; @param verifyFlags Each flag enables one validation rule.  If in doubt, use {@link #correctlySpends(Transaction, long, Script)}
     ;                    which sets all flags.
     ;;
    #_public
    #_throws #_[ "ScriptException" ]
    (§ method #_"void" correctlySpends [#_"Transaction" __txContainingThis, #_"long" __scriptSigIndex, #_"Script" __scriptPubKey, #_"Set<ScriptVerifyFlag>" __verifyFlags]
        ;; Clone the transaction because executing the script involves editing it, and if we die, we'll leave
        ;; the tx half broken (also it's not so thread safe to work on it directly).
        (try
            (§ ass __txContainingThis (.. (:default-serializer (.. __txContainingThis (getParams))) (makeTransaction (.. __txContainingThis (bitcoinSerialize)))))
            (catch ProtocolException e
                (throw (RuntimeException. e)) ;; Should not happen unless we were given a totally broken transaction.
            )
        )

        (when (or (< Script'MAX_SCRIPT_SIZE (alength (.. this (getProgram)))) (< Script'MAX_SCRIPT_SIZE (alength (.. __scriptPubKey (getProgram)))))
            (throw (ScriptException. :ScriptError'SCRIPT_SIZE, "Script larger than 10,000 bytes"))
        )

        (let [#_"LinkedList<byte[]>" stack (LinkedList. #_"<>")
              #_"LinkedList<byte[]>" __p2shStack nil]

            (Script'executeScript __txContainingThis, __scriptSigIndex, this, stack, __verifyFlags)
            (when (.. __verifyFlags (contains :ScriptVerifyFlag'P2SH))
                (§ ass __p2shStack (LinkedList. #_"<>" stack))
            )
            (Script'executeScript __txContainingThis, __scriptSigIndex, __scriptPubKey, stack, __verifyFlags)

            (when (= (.. stack (size)) 0)
                (throw (ScriptException. :ScriptError'EVAL_FALSE, "Stack empty at end of script execution."))
            )

            (when (not (Script'castToBool (.. stack (pollLast))))
                (throw (ScriptException. :ScriptError'EVAL_FALSE, (str "Script resulted in a non-true stack: " stack)))
            )

            ;; P2SH is pay to script hash.  It means that the scriptPubKey has a special form which is a valid
            ;; program but it has "useless" form that if evaluated as a normal program always returns true.
            ;; Instead, miners recognize it as special based on its template - it provides a hash of the real scriptPubKey
            ;; and that must be provided by the input.  The goal of this bizarre arrangement is twofold:
            ;;
            ;; (1) You can sum up a large, complex script (like a CHECKMULTISIG script) with an address that's the same
            ;;     size as a regular address.  This means it doesn't overload scannable QR codes/NFC tags or become
            ;;     un-wieldy to copy/paste.
            ;; (2) It allows the working set to be smaller: nodes perform best when they can store as many unspent outputs
            ;;     in RAM as possible, so if the outputs are made smaller and the inputs get bigger, then it's better for
            ;;     overall scalability and performance.

            ;; TODO: Check if we can take out enforceP2SH if there's a checkpoint at the enforcement block.
            (when (and (.. __verifyFlags (contains :ScriptVerifyFlag'P2SH)) (.. __scriptPubKey (isPayToScriptHash)))
                (doseq [#_"ScriptChunk" chunk (:chunks this)]
                    (when (and (.. chunk (isOpCode)) (< ScriptOpCodes'OP_16 (:opcode chunk)))
                        (throw (ScriptException. :ScriptError'SIG_PUSHONLY, "Attempted to spend a P2SH scriptPubKey with a script that contained script ops"))
                    )
                )

                (let [#_"byte[]" __scriptPubKeyBytes (.. __p2shStack (pollLast))
                      #_"Script" __scriptPubKeyP2SH (Script. __scriptPubKeyBytes)]

                    (Script'executeScript __txContainingThis, __scriptSigIndex, __scriptPubKeyP2SH, __p2shStack, __verifyFlags)

                    (when (= (.. __p2shStack (size)) 0)
                        (throw (ScriptException. :ScriptError'EVAL_FALSE, "P2SH stack empty at end of script execution."))
                    )

                    (when (not (Script'castToBool (.. __p2shStack (pollLast))))
                        (throw (ScriptException. :ScriptError'EVAL_FALSE, "P2SH script execution resulted in a non-true stack"))
                    )
                )
            )
        )
        nil
    )

    ;; Utility that doesn't copy for internal use.
    #_private
    (§ method- #_"byte[]" getQuickProgram []
        (or (:program this) (.. this (getProgram)))
    )

    ;;;
     ; Get the {@link Script.ScriptType}.
     ;
     ; @return The script type.
     ;;
    #_public
    (§ method #_"ScriptType" getScriptType []
        (cond
            (.. this (isSentToAddress))   :ScriptType'P2PKH
            (.. this (isSentToRawPubKey)) :ScriptType'PUB_KEY
            (.. this (isPayToScriptHash)) :ScriptType'P2SH
            :else                         :ScriptType'NO_TYPE
        )
    )

    #_override
    #_public
    (§ method #_"boolean" equals [#_"Object" o]
        (cond
            (= this o) true
            (or (nil? o) (not= (getClass) (.. o (getClass)))) false
            :else (Arrays/equals (.. this (getQuickProgram)), (.. (cast Script o) (getQuickProgram)))
        )
    )

    #_override
    #_public
    (§ method #_"int" hashCode []
        (Arrays/hashCode (.. this (getQuickProgram)))
    )
)

;;;
 ; Tools for the construction of commonly used script types.  You don't normally need this as it's hidden
 ; behind convenience methods on {@link Transaction}, but they are useful when working with
 ; the protocol at a lower level.
 ;;
#_public
(§ class ScriptBuilder
    #_private
    (§ field- #_"List<ScriptChunk>" :chunks)

    ;;; Creates a fresh ScriptBuilder with an empty program. ;;
    #_public
    (§ constructor ScriptBuilder []
        (§ assoc this :chunks (Lists/newLinkedList))
        this
    )

    ;;; Creates a fresh ScriptBuilder with the given program as the starting point. ;;
    #_public
    (§ constructor ScriptBuilder [#_"Script" template]
        (§ assoc this :chunks (ArrayList. #_"<>" (.. template (getChunks))))
        this
    )

    ;;; Adds the given chunk to the end of the program. ;;
    #_public
    (§ method #_"ScriptBuilder" addChunk [#_"ScriptChunk" chunk]
        (.. this (addChunk (.. (:chunks this) (size)), chunk))
    )

    ;;; Adds the given chunk at the given index in the program. ;;
    #_public
    (§ method #_"ScriptBuilder" addChunk [#_"int" index, #_"ScriptChunk" chunk]
        (.. (:chunks this) (add index, chunk))
        this
    )

    ;;; Adds the given opcode to the end of the program. ;;
    #_public
    (§ method #_"ScriptBuilder" op [#_"int" opcode]
        (.. this (op (.. (:chunks this) (size)), opcode))
    )

    ;;; Adds the given opcode to the given index in the program. ;;
    #_public
    (§ method #_"ScriptBuilder" op [#_"int" index, #_"int" opcode]
        (assert-argument (< ScriptOpCodes'OP_PUSHDATA4 opcode))
        (.. this (addChunk index, (ScriptChunk. opcode, nil)))
    )

    ;;; Adds a copy of the given byte array as a data element (i.e. PUSHDATA) at the end of the program. ;;
    #_public
    (§ method #_"ScriptBuilder" data [#_"byte[]" data]
        (if (= (alength data) 0) (.. this (smallNum 0)) (.. this (data (.. (:chunks this) (size)), data)))
    )

    ;;; Adds a copy of the given byte array as a data element (i.e. PUSHDATA) at the given index in the program. ;;
    #_public
    (§ method #_"ScriptBuilder" data [#_"int" index, #_"byte[]" data]
        ;; implements BIP62
        (let [#_"int" n (alength data) #_"byte[]" copy (Arrays/copyOf data, n)
              #_"int" opcode
                (cond
                    (= n 0)     ScriptOpCodes'OP_0
                    (= n 1)     (let [#_"byte" b (aget data 0)] (if (<= 1 b 16) (Script'encodeToOpN b) 1))
                    (< n ScriptOpCodes'OP_PUSHDATA1) n
                    (< n 256)   ScriptOpCodes'OP_PUSHDATA1
                    (< n 65536) ScriptOpCodes'OP_PUSHDATA2
                    :else (throw (RuntimeException. "Unimplemented"))
                )]
            (.. this (addChunk index, (ScriptChunk. opcode, copy)))
        )
    )

    ;;;
     ; Adds the given number to the end of the program.
     ; Automatically uses shortest encoding possible.
     ;;
    #_public
    (§ method #_"ScriptBuilder" number [#_"long" num]
        (if (<= 0 num 16) (.. this (smallNum (int num))) (.. this (bigNum num)))
    )

    ;;;
     ; Adds the given number to the given index in the program.
     ; Automatically uses shortest encoding possible.
     ;;
    #_public
    (§ method #_"ScriptBuilder" number [#_"int" index, #_"long" num]
        (if (<= 0 num 16) (.. this (smallNum index, (int num))) (.. this (bigNum index, num)))
    )

    ;;;
     ; Adds the given number as a OP_N opcode to the end of the program.
     ; Only handles values 0-16 inclusive.
     ;
     ; @see #number(int)
     ;;
    #_public
    (§ method #_"ScriptBuilder" smallNum [#_"int" num]
        (.. this (smallNum (.. (:chunks this) (size)), num))
    )

    ;;; Adds the given number as a push data chunk.
     ; This is intended to use for negative numbers or values > 16, and although
     ; it will accept numbers in the range 0-16 inclusive, the encoding would be
     ; considered non-standard.
     ;
     ; @see #number(int)
     ;;
    #_protected
    (§ method #_"ScriptBuilder" bigNum [#_"long" num]
        (.. this (bigNum (.. (:chunks this) (size)), num))
    )

    ;;;
     ; Adds the given number as a OP_N opcode to the given index in the program.
     ; Only handles values 0-16 inclusive.
     ;
     ; @see #number(int)
     ;;
    #_public
    (§ method #_"ScriptBuilder" smallNum [#_"int" index, #_"int" num]
        (assert-argument (<= 0 num), "Cannot encode negative numbers with smallNum")
        (assert-argument (<= num 16), "Cannot encode numbers larger than 16 with smallNum")

        (.. this (addChunk index, (ScriptChunk. (Script'encodeToOpN num), nil)))
    )

    ;;;
     ; Adds the given number as a push data chunk to the given index in the program.
     ; This is intended to use for negative numbers or values > 16, and although
     ; it will accept numbers in the range 0-16 inclusive, the encoding would be
     ; considered non-standard.
     ;
     ; @see #number(int)
     ;;
    #_protected
    (§ method #_"ScriptBuilder" bigNum [#_"int" index, #_"long" num]
        (let [#_"byte[]" data]

            (cond (= num 0)
                (do
                    (§ ass data (byte-array 0))
                )
                :else
                (do
                    (let [#_"Stack<Byte>" result (Stack. #_"<>")
                          #_"boolean" neg (< num 0)
                          #_"long" absvalue (Math/abs num)]

                        (loop-when-recur [] (not= absvalue 0) []
                            (.. result (push (byte (& absvalue 0xff))))
                            (§ ass absvalue (>> absvalue 8))
                        )

                        (cond (not= (& (.. result (peek)) 0x80) 0)
                            (do
                                ;; The most significant byte is >= 0x80, so push an extra byte that
                                ;; contains just the sign of the value.
                                (.. result (push (byte (if neg 0x80 0))))
                            )
                            neg
                            (do
                                ;; The most significant byte is < 0x80 and the value is negative,
                                ;; set the sign bit so it is subtracted and interpreted as a
                                ;; negative when converting back to an integral.
                                (.. result (push (byte (| (.. result (pop)) 0x80))))
                            )
                        )

                        (§ ass data (byte-array (.. result (size))))
                        (loop-when-recur [#_"int" __byteIdx 0] (< __byteIdx (alength data)) [(inc __byteIdx)]
                            (aset data __byteIdx (.. result (get __byteIdx)))
                        )
                    )
                )
            )

            ;; At most the encoded value could take up to 8 bytes, so we don't need
            ;; to use OP_PUSHDATA opcodes.
            (.. this (addChunk index, (ScriptChunk. (alength data), data)))
        )
    )

    ;;; Creates a new immutable Script based on the state of the builder. ;;
    #_public
    (§ method #_"Script" build []
        (Script. (:chunks this))
    )

    ;;; Creates a scriptPubKey that encodes payment to the given address. ;;
    #_public
    #_static
    (§ defn #_"Script" ScriptBuilder'createOutputScript [#_"Address" to]
        (if (.. to (isP2SHAddress))
            ;; OP_HASH160 <scriptHash> OP_EQUAL
            (.. (ScriptBuilder.) (op ScriptOpCodes'OP_HASH160) (data (.. to (getHash160))) (op ScriptOpCodes'OP_EQUAL) (build))
            ;; OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG
            (.. (ScriptBuilder.) (op ScriptOpCodes'OP_DUP) (op ScriptOpCodes'OP_HASH160) (data (.. to (getHash160))) (op ScriptOpCodes'OP_EQUALVERIFY) (op ScriptOpCodes'OP_CHECKSIG) (build))
        )
    )

    ;;; Creates a scriptPubKey that encodes payment to the given raw public key. ;;
    #_public
    #_static
    (§ defn #_"Script" ScriptBuilder'createOutputScript [#_"ECKey" key]
        (.. (ScriptBuilder.) (data (.. key (getPubKey))) (op ScriptOpCodes'OP_CHECKSIG) (build))
    )

    ;;;
     ; Creates a scriptSig that can redeem a pay-to-address output.
     ; If given signature is null, incomplete scriptSig will be created with OP_0 instead of signature.
     ;;
    #_public
    #_static
    (§ defn #_"Script" ScriptBuilder'createInputScript [#_nilable #_"TransactionSignature" signature, #_"ECKey" __pubKey]
        (let [#_"byte[]" __pubkeyBytes (.. __pubKey (getPubKey))
              #_"byte[]" __sigBytes (if (some? signature) (.. signature (encodeToBitcoin)) (byte-array 0))]
            (.. (ScriptBuilder.) (data __sigBytes) (data __pubkeyBytes) (build))
        )
    )

    ;;;
     ; Creates a scriptSig that can redeem a pay-to-pubkey output.
     ; If given signature is null, incomplete scriptSig will be created with OP_0 instead of signature.
     ;;
    #_public
    #_static
    (§ defn #_"Script" ScriptBuilder'createInputScript [#_nilable #_"TransactionSignature" signature]
        (let [#_"byte[]" __sigBytes (if (some? signature) (.. signature (encodeToBitcoin)) (byte-array 0))]
            (.. (ScriptBuilder.) (data __sigBytes) (build))
        )
    )

    ;;; Creates a program that requires at least N of the given keys to sign, using OP_CHECKMULTISIG. ;;
    #_public
    #_static
    (§ defn #_"Script" ScriptBuilder'createMultiSigOutputScript [#_"int" threshold, #_"List<ECKey>" pubkeys]
        (assert-argument (< 0 threshold))
        (assert-argument (<= threshold (.. pubkeys (size))))
        (assert-argument (<= (.. pubkeys (size)) 16)) ;; That's the max we can represent with a single opcode.

        (let [#_"ScriptBuilder" builder (ScriptBuilder.)]
            (.. builder (smallNum threshold))
            (doseq [#_"ECKey" key pubkeys]
                (.. builder (data (.. key (getPubKey))))
            )
            (.. builder (smallNum (.. pubkeys (size))))
            (.. builder (op ScriptOpCodes'OP_CHECKMULTISIG))
            (.. builder (build))
        )
    )

    ;;; Create a program that satisfies an OP_CHECKMULTISIG program. ;;
    #_public
    #_static
    (§ defn #_"Script" ScriptBuilder'createMultiSigInputScript [#_"List<TransactionSignature>" signatures]
        (let [#_"List<byte[]>" sigs (ArrayList. #_"<>" (.. signatures (size)))]
            (doseq [#_"TransactionSignature" signature signatures]
                (.. sigs (add (.. signature (encodeToBitcoin))))
            )

            (ScriptBuilder'createMultiSigInputScriptBytes sigs, nil)
        )
    )

    ;;; Create a program that satisfies an OP_CHECKMULTISIG program. ;;
    #_public
    #_static
    (§ defn #_"Script" ScriptBuilder'createMultiSigInputScript [#_"TransactionSignature..." signatures]
        (ScriptBuilder'createMultiSigInputScript (Arrays/asList signatures))
    )

    ;;; Create a program that satisfies an OP_CHECKMULTISIG program, using pre-encoded signatures. ;;
    #_public
    #_static
    (§ defn #_"Script" ScriptBuilder'createMultiSigInputScriptBytes [#_"List<byte[]>" signatures]
        (ScriptBuilder'createMultiSigInputScriptBytes signatures, nil)
    )

    ;;;
     ; Create a program that satisfies a pay-to-script hashed OP_CHECKMULTISIG program.
     ; If given signature list is null, incomplete scriptSig will be created with OP_0 instead of signatures.
     ;;
    #_public
    #_static
    (§ defn #_"Script" ScriptBuilder'createP2SHMultiSigInputScript [#_nilable #_"List<TransactionSignature>" signatures, #_"Script" __multisigProgram]
        (let [#_"List<byte[]>" sigs (ArrayList. #_"<>")]
            (cond (nil? signatures)
                (do
                    ;; Create correct number of empty signatures.
                    (let [#_"int" __numSigs (.. __multisigProgram (getNumberOfSignaturesRequiredToSpend))]
                        (loop-when-recur [#_"int" i 0] (< i __numSigs) [(inc i)]
                            (.. sigs (add (byte-array 0)))
                        )
                    )
                )
                :else
                (do
                    (doseq [#_"TransactionSignature" signature signatures]
                        (.. sigs (add (.. signature (encodeToBitcoin))))
                    )
                )
            )
            (ScriptBuilder'createMultiSigInputScriptBytes sigs, (.. __multisigProgram (getProgram)))
        )
    )

    ;;;
     ; Create a program that satisfies an OP_CHECKMULTISIG program, using pre-encoded signatures.
     ; Optionally, appends the script program bytes if spending a P2SH output.
     ;;
    #_public
    #_static
    (§ defn #_"Script" ScriptBuilder'createMultiSigInputScriptBytes [#_"List<byte[]>" signatures, #_nilable #_"byte[]" __multisigProgramBytes]
        (assert-argument (<= (.. signatures (size)) 16))

        (let [#_"ScriptBuilder" builder (ScriptBuilder.)]
            (.. builder (smallNum 0)) ;; Work around a bug in CHECKMULTISIG that is now a required part of the protocol.
            (doseq [#_"byte[]" signature signatures]
                (.. builder (data signature))
            )
            (when (some? __multisigProgramBytes)
                (.. builder (data __multisigProgramBytes))
            )
            (.. builder (build))
        )
    )

    ;;;
     ; Returns a copy of the given scriptSig with the signature inserted in the given position.
     ;
     ; This function assumes that any missing sigs have OP_0 placeholders.  If given scriptSig
     ; already has all the signatures in place, IllegalArgumentException will be thrown.
     ;
     ; @param targetIndex Where to insert the signature.
     ; @param sigsPrefixCount How many items to copy verbatim (e.g. initial OP_0 for multisig).
     ; @param sigsSuffixCount How many items to copy verbatim at end (e.g. redeemScript for P2SH).
     ;;
    #_public
    #_static
    (§ defn #_"Script" ScriptBuilder'updateScriptWithSignature [#_"Script" __scriptSig, #_"byte[]" signature, #_"int" __targetIndex, #_"int" __sigsPrefixCount, #_"int" __sigsSuffixCount]
        (let [#_"List<ScriptChunk>" __inputChunks (.. __scriptSig (getChunks))
              #_"int" __totalChunks (.. __inputChunks (size))]

            ;; Check if we have a place to insert, otherwise just return given scriptSig unchanged.
            ;; We assume here that OP_0 placeholders always go after the sigs, so
            ;; to find if we have sigs missing, we can just check the chunk in latest sig position.
            (let [#_"boolean" __hasMissingSigs (.. __inputChunks (get (- __totalChunks __sigsSuffixCount 1)) (equalsOpCode ScriptOpCodes'OP_0))]
                (assert-argument __hasMissingSigs, "ScriptSig is already filled with signatures")

                ;; copy the prefix
                (let [#_"ScriptBuilder" builder (ScriptBuilder.)]
                    (doseq [#_"ScriptChunk" chunk (.. __inputChunks (subList 0, __sigsPrefixCount))]
                        (.. builder (addChunk chunk))
                    )

                    ;; Copy the sigs.
                    (let [#_"int" pos 0
                          #_"boolean" inserted false]
                        (doseq [#_"ScriptChunk" chunk (.. __inputChunks (subList __sigsPrefixCount, (- __totalChunks __sigsSuffixCount)))]
                            (when (= pos __targetIndex)
                                (§ ass inserted true)
                                (.. builder (data signature))
                                (§ ass pos (inc pos))
                            )
                            (when (not (.. chunk (equalsOpCode ScriptOpCodes'OP_0)))
                                (.. builder (addChunk chunk))
                                (§ ass pos (inc pos))
                            )
                        )

                        ;; Add OP_0's if needed, since we skipped them in the previous loop.
                        (loop-when-recur [] (< pos (- __totalChunks __sigsPrefixCount __sigsSuffixCount)) []
                            (cond (= pos __targetIndex)
                                (do
                                    (§ ass inserted true)
                                    (.. builder (data signature))
                                )
                                :else
                                (do
                                    (.. builder (addChunk (ScriptChunk. ScriptOpCodes'OP_0, nil)))
                                )
                            )
                            (§ ass pos (inc pos))
                        )

                        ;; Copy the suffix.
                        (doseq [#_"ScriptChunk" chunk (.. __inputChunks (subList (- __totalChunks __sigsSuffixCount), __totalChunks))]
                            (.. builder (addChunk chunk))
                        )

                        (assert-state inserted)
                        (.. builder (build))
                    )
                )
            )
        )
    )

    ;;;
     ; Creates a scriptPubKey that sends to the given script hash.  Read
     ; <a href="https://github.com/bitcoin/bips/blob/master/bip-0016.mediawiki">BIP 16</a>
     ; to learn more about this kind of script.
     ;;
    #_public
    #_static
    (§ defn #_"Script" ScriptBuilder'createP2SHOutputScript [#_"byte[]" hash]
        (assert-argument (= (alength hash) 20))

        (.. (ScriptBuilder.) (op ScriptOpCodes'OP_HASH160) (data hash) (op ScriptOpCodes'OP_EQUAL) (build))
    )

    ;;;
     ; Creates a scriptPubKey for the given redeem script.
     ;;
    #_public
    #_static
    (§ defn #_"Script" ScriptBuilder'createP2SHOutputScript [#_"Script" __redeemScript]
        (let [#_"byte[]" hash (Utils'sha256hash160 (.. __redeemScript (getProgram)))]
            (ScriptBuilder'createP2SHOutputScript hash)
        )
    )

    ;;;
     ; Creates a P2SH output script with given public keys and threshold.
     ; Given public keys will be placed in redeem script in the lexicographical sorting order.
     ;;
    #_public
    #_static
    (§ defn #_"Script" ScriptBuilder'createP2SHOutputScript [#_"int" threshold, #_"List<ECKey>" pubkeys]
        (let [#_"Script" __redeemScript (ScriptBuilder'createRedeemScript threshold, pubkeys)]
            (ScriptBuilder'createP2SHOutputScript __redeemScript)
        )
    )

    ;;;
     ; Creates redeem script with given public keys and threshold.
     ; Given public keys will be placed in redeem script in the lexicographical sorting order.
     ;;
    #_public
    #_static
    (§ defn #_"Script" ScriptBuilder'createRedeemScript [#_"int" threshold, #_"List<ECKey>" pubkeys]
        (let [pubkeys (ArrayList. #_"<>" pubkeys)]
            (Collections/sort pubkeys, ECKey'PUBKEY_COMPARATOR)
            (ScriptBuilder'createMultiSigOutputScript threshold, pubkeys)
        )
    )

    ;;;
     ; Creates a script of the form OP_RETURN [data].  This feature allows you to attach
     ; a small piece of data (like a hash of something stored elsewhere) to a zero valued
     ; output which can never be spent and thus does not pollute the ledger.
     ;;
    #_public
    #_static
    (§ defn #_"Script" ScriptBuilder'createOpReturnScript [#_"byte[]" data]
        (assert-argument (<= (alength data) 80))

        (.. (ScriptBuilder.) (op ScriptOpCodes'OP_RETURN) (data data) (build))
    )

    #_public
    #_static
    (§ defn #_"Script" ScriptBuilder'createCLTVPaymentChannelOutput [#_"BigInteger" time, #_"ECKey" from, #_"ECKey" to]
        (let [#_"byte[]" __timeBytes (Utils'reverseBytes (Utils'encodeMPI time, false))]
            (when (< 5 (alength __timeBytes))
                (throw (RuntimeException. "Time too large to encode as 5-byte int"))
            )

            (.. (ScriptBuilder.) (op ScriptOpCodes'OP_IF) (data (.. to (getPubKey))) (op ScriptOpCodes'OP_CHECKSIGVERIFY) (op ScriptOpCodes'OP_ELSE) (data __timeBytes) (op ScriptOpCodes'OP_CHECKLOCKTIMEVERIFY) (op ScriptOpCodes'OP_DROP) (op ScriptOpCodes'OP_ENDIF) (data (.. from (getPubKey))) (op ScriptOpCodes'OP_CHECKSIG) (build))
        )
    )

    #_public
    #_static
    (§ defn #_"Script" ScriptBuilder'createCLTVPaymentChannelRefund [#_"TransactionSignature" signature]
        (let [#_"ScriptBuilder" builder (ScriptBuilder.)]
            (.. builder (data (.. signature (encodeToBitcoin))))
            (.. builder (data (byte-array [ 0 ]))) ;; Use the CHECKLOCKTIMEVERIFY if branch.
            (.. builder (build))
        )
    )

    #_public
    #_static
    (§ defn #_"Script" ScriptBuilder'createCLTVPaymentChannelP2SHRefund [#_"TransactionSignature" signature, #_"Script" __redeemScript]
        (let [#_"ScriptBuilder" builder (ScriptBuilder.)]
            (.. builder (data (.. signature (encodeToBitcoin))))
            (.. builder (data (byte-array [ 0 ]))) ;; Use the CHECKLOCKTIMEVERIFY if branch.
            (.. builder (data (.. __redeemScript (getProgram))))
            (.. builder (build))
        )
    )

    #_public
    #_static
    (§ defn #_"Script" ScriptBuilder'createCLTVPaymentChannelP2SHInput [#_"byte[]" from, #_"byte[]" to, #_"Script" __redeemScript]
        (let [#_"ScriptBuilder" builder (ScriptBuilder.)]
            (.. builder (data from))
            (.. builder (data to))
            (.. builder (smallNum 1)) ;; Use the CHECKLOCKTIMEVERIFY if branch.
            (.. builder (data (.. __redeemScript (getProgram))))
            (.. builder (build))
        )
    )

    #_public
    #_static
    (§ defn #_"Script" ScriptBuilder'createCLTVPaymentChannelInput [#_"TransactionSignature" from, #_"TransactionSignature" to]
        (ScriptBuilder'createCLTVPaymentChannelInput (.. from (encodeToBitcoin)), (.. to (encodeToBitcoin)))
    )

    #_public
    #_static
    (§ defn #_"Script" ScriptBuilder'createCLTVPaymentChannelInput [#_"byte[]" from, #_"byte[]" to]
        (let [#_"ScriptBuilder" builder (ScriptBuilder.)]
            (.. builder (data from))
            (.. builder (data to))
            (.. builder (smallNum 1)) ;; Use the CHECKLOCKTIMEVERIFY if branch.
            (.. builder (build))
        )
    )
)

;;;
 ; A script element that is either a data push (signature, pubkey, etc.) or a non-push (logic, numeric, etc.) operation.
 ;;
#_public
(§ class ScriptChunk
    ;;; Operation to be executed.  Opcodes are defined in {@link ScriptOpCodes}. ;;
    #_public
    (§ field #_"int" :opcode)
    ;;;
     ; For push operations, this is the vector to be pushed on the stack.
     ; For {@link ScriptOpCodes#OP_0}, the vector is empty.
     ; Null for non-push operations.
     ;;
    #_nilable
    #_public
    (§ field #_"byte[]" :data)
    #_private
    (§ field- #_"int" :start-location-in-program)

    #_public
    (§ constructor ScriptChunk [#_"int" opcode, #_"byte[]" data]
        (§ this opcode, data, -1)
        this
    )

    #_public
    (§ constructor ScriptChunk [#_"int" opcode, #_"byte[]" data, #_"int" start]
        (§ assoc this :opcode opcode)
        (§ assoc this :data data)
        (§ assoc this :start-location-in-program start)
        this
    )

    #_public
    (§ method #_"boolean" equalsOpCode [#_"int" opcode]
        (= opcode (:opcode this))
    )

    ;;;
     ; If this chunk is a single byte of non-pushdata content (could be OP_RESERVED or some invalid Opcode).
     ;;
    #_public
    (§ method #_"boolean" isOpCode []
        (< ScriptOpCodes'OP_PUSHDATA4 (:opcode this))
    )

    ;;;
     ; Returns true if this chunk is pushdata content, including the single-byte pushdatas.
     ;;
    #_public
    (§ method #_"boolean" isPushData []
        (<= (:opcode this) ScriptOpCodes'OP_16)
    )

    #_public
    (§ method #_"int" getStartLocationInProgram []
        (assert-state (<= 0 (:start-location-in-program this)))

        (:start-location-in-program this)
    )

    ;;; If this chunk is an OP_N opcode returns the equivalent integer value. ;;
    #_public
    (§ method #_"int" decodeOpN []
        (assert-state (.. this (isOpCode)))

        (Script'decodeFromOpN (:opcode this))
    )

    ;;;
     ; Called on a pushdata chunk, returns true if it uses the smallest possible way (according to BIP62) to push the data.
     ;;
    #_public
    (§ method #_"boolean" isShortestPossiblePushData []
        (assert-state (.. this (isPushData)))

        (or (nil? (:data this)) ;; OP_N
            (let [op (:opcode this) al (alength (:data this))]
                (cond
                    (= al 0)
                        (= op ScriptOpCodes'OP_0)
                    (= al 1)
                        (let [#_"byte" b (aget (:data this) 0)]
                            (cond
                                (<= 0x01 b 0x10) (= op (dec (+ ScriptOpCodes'OP_1 b)))
                                (= (& b 0xff) 0x81) (= op ScriptOpCodes'OP_1NEGATE)
                                :else (§ recte? false)
                            )
                        )
                    (< al ScriptOpCodes'OP_PUSHDATA1)
                        (= op al)
                    (< al 256)
                        (= op ScriptOpCodes'OP_PUSHDATA1)
                    (< al 65536)
                        (= op ScriptOpCodes'OP_PUSHDATA2)
                    :else
                        ;; Can never be used, but implemented for completeness.
                        (= op ScriptOpCodes'OP_PUSHDATA4)
                )
            )
        )
    )

    #_public
    (§ method #_"void" writeChunk [#_"ByteArrayOutputStream" baos]
        (cond (.. this (isOpCode))
            (do
                (assert-state (nil? (:data this)))
                (.. baos (write (:opcode this)))
            )
            (some? (:data this))
            (do
                (cond (< (:opcode this) ScriptOpCodes'OP_PUSHDATA1)
                    (do
                        (assert-state (= (alength (:data this)) (:opcode this)))
                        (.. baos (write (:opcode this)))
                    )
                    (= (:opcode this) ScriptOpCodes'OP_PUSHDATA1)
                    (do
                        (assert-state (<= (alength (:data this)) 0xff))
                        (.. baos (write ScriptOpCodes'OP_PUSHDATA1))
                        (.. baos (write (alength (:data this))))
                    )
                    (= (:opcode this) ScriptOpCodes'OP_PUSHDATA2)
                    (do
                        (assert-state (<= (alength (:data this)) 0xffff))
                        (.. baos (write ScriptOpCodes'OP_PUSHDATA2))
                        (.. baos (write (& 0xff (alength (:data this)))))
                        (.. baos (write (& 0xff (>> (alength (:data this)) 8))))
                    )
                    (= (:opcode this) ScriptOpCodes'OP_PUSHDATA4)
                    (do
                        (assert-state (<= (alength (:data this)) Script'MAX_SCRIPT_ELEMENT_SIZE))
                        (.. baos (write ScriptOpCodes'OP_PUSHDATA4))
                        (Utils'uint32ToByteStreamLE (alength (:data this)), baos)
                    )
                    :else
                    (do
                        (throw (RuntimeException. "Unimplemented"))
                    )
                )
                (.. baos (write (:data this)))
            )
            :else
            (do
                (.. baos (write (:opcode this))) ;; smallNum
            )
        )
        nil
    )

    #_override
    #_public
    (§ method #_"String" toString []
        (cond (.. this (isOpCode))
                (str (ScriptOpCodes'getOpCodeName (:opcode this)))
            (some? (:data this)) ;; Data chunk.
                (str (ScriptOpCodes'getPushDataName (:opcode this)) "[" (.. Utils'HEX (encode (:data this))) "]")
            :else ;; Small num.
                (str (Script'decodeFromOpN (:opcode this)))
        )
    )

    #_override
    #_public
    (§ method #_"boolean" equals [#_"Object" o]
        (cond
            (= this o) true
            (or (nil? o) (not= (getClass) (.. o (getClass)))) false
            :else (let [#_"ScriptChunk" other (cast ScriptChunk o)]
                (and (= (:opcode this) (:opcode other)) (= (:start-location-in-program this) (:start-location-in-program other)) (Arrays/equals (:data this), (:data other)))
            )
        )
    )

    #_override
    #_public
    (§ method #_"int" hashCode []
        (Objects/hashCode (:opcode this), (:start-location-in-program this), (Arrays/hashCode (:data this)))
    )
)

#_public
#_static
#_enum
(def ScriptError'values
#{
    :ScriptError'OK
    :ScriptError'UNKNOWN_ERROR
    :ScriptError'EVAL_FALSE
    :ScriptError'OP_RETURN

    ;;; max sizes ;;
    :ScriptError'SCRIPT_SIZE
    :ScriptError'PUSH_SIZE
    :ScriptError'OP_COUNT
    :ScriptError'STACK_SIZE
    :ScriptError'SIG_COUNT
    :ScriptError'PUBKEY_COUNT

    ;;; failed verify operations ;;
    :ScriptError'VERIFY
    :ScriptError'EQUALVERIFY
    :ScriptError'CHECKMULTISIGVERIFY
    :ScriptError'CHECKSIGVERIFY
    :ScriptError'NUMEQUALVERIFY

    ;;; logical/format/canonical errors ;;
    :ScriptError'BAD_OPCODE
    :ScriptError'DISABLED_OPCODE
    :ScriptError'INVALID_STACK_OPERATION
    :ScriptError'INVALID_ALTSTACK_OPERATION
    :ScriptError'UNBALANCED_CONDITIONAL

    ;;; CHECKLOCKTIMEVERIFY and CHECKSEQUENCEVERIFY ;;
    :ScriptError'NEGATIVE_LOCKTIME
    :ScriptError'UNSATISFIED_LOCKTIME

    ;;; malleability ;;
    :ScriptError'SIG_HASHTYPE
    :ScriptError'SIG_DER
    :ScriptError'MINIMALDATA
    :ScriptError'SIG_PUSHONLY
    :ScriptError'SIG_HIGH_S
    :ScriptError'SIG_NULLDUMMY
    :ScriptError'PUBKEYTYPE
    :ScriptError'CLEANSTACK
    :ScriptError'MINIMALIF
    :ScriptError'SIG_NULLFAIL

    ;;; softfork safeness ;;
    :ScriptError'DISCOURAGE_UPGRADABLE_NOPS
    :ScriptError'DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM

    ;;; segregated witness ;;
    :ScriptError'WITNESS_PROGRAM_WRONG_LENGTH
    :ScriptError'WITNESS_PROGRAM_WITNESS_EMPTY
    :ScriptError'WITNESS_PROGRAM_MISMATCH
    :ScriptError'WITNESS_MALLEATED
    :ScriptError'WITNESS_MALLEATED_P2SH
    :ScriptError'WITNESS_UNEXPECTED
    :ScriptError'WITNESS_PUBKEYTYPE
})

;;;
 ; Various constants that define the assembly-like scripting language that forms part of the Bitcoin protocol.
 ; See {@link Script} for details.  Also provides a method to convert them to a string.
 ;;
#_public
(§ class ScriptOpCodes
    ;; push value
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_0 0x00) ;; push empty vector
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_FALSE ScriptOpCodes'OP_0)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_PUSHDATA1 0x4c)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_PUSHDATA2 0x4d)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_PUSHDATA4 0x4e)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_1NEGATE 0x4f)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_RESERVED 0x50)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_1 0x51)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_TRUE ScriptOpCodes'OP_1)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_2 0x52)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_3 0x53)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_4 0x54)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_5 0x55)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_6 0x56)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_7 0x57)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_8 0x58)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_9 0x59)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_10 0x5a)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_11 0x5b)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_12 0x5c)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_13 0x5d)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_14 0x5e)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_15 0x5f)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_16 0x60)

    ;; control
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_NOP 0x61)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_VER 0x62)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_IF 0x63)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_NOTIF 0x64)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_VERIF 0x65)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_VERNOTIF 0x66)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_ELSE 0x67)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_ENDIF 0x68)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_VERIFY 0x69)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_RETURN 0x6a)

    ;; stack ops
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_TOALTSTACK 0x6b)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_FROMALTSTACK 0x6c)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_2DROP 0x6d)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_2DUP 0x6e)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_3DUP 0x6f)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_2OVER 0x70)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_2ROT 0x71)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_2SWAP 0x72)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_IFDUP 0x73)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_DEPTH 0x74)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_DROP 0x75)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_DUP 0x76)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_NIP 0x77)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_OVER 0x78)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_PICK 0x79)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_ROLL 0x7a)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_ROT 0x7b)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_SWAP 0x7c)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_TUCK 0x7d)

    ;; splice ops
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_CAT 0x7e)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_SUBSTR 0x7f)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_LEFT 0x80)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_RIGHT 0x81)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_SIZE 0x82)

    ;; bit logic
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_INVERT 0x83)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_AND 0x84)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_OR 0x85)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_XOR 0x86)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_EQUAL 0x87)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_EQUALVERIFY 0x88)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_RESERVED1 0x89)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_RESERVED2 0x8a)

    ;; numeric
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_1ADD 0x8b)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_1SUB 0x8c)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_2MUL 0x8d)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_2DIV 0x8e)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_NEGATE 0x8f)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_ABS 0x90)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_NOT 0x91)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_0NOTEQUAL 0x92)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_ADD 0x93)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_SUB 0x94)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_MUL 0x95)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_DIV 0x96)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_MOD 0x97)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_LSHIFT 0x98)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_RSHIFT 0x99)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_BOOLAND 0x9a)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_BOOLOR 0x9b)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_NUMEQUAL 0x9c)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_NUMEQUALVERIFY 0x9d)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_NUMNOTEQUAL 0x9e)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_LESSTHAN 0x9f)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_GREATERTHAN 0xa0)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_LESSTHANOREQUAL 0xa1)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_GREATERTHANOREQUAL 0xa2)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_MIN 0xa3)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_MAX 0xa4)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_WITHIN 0xa5)

    ;; crypto
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_RIPEMD160 0xa6)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_SHA1 0xa7)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_SHA256 0xa8)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_HASH160 0xa9)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_HASH256 0xaa)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_CODESEPARATOR 0xab)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_CHECKSIG 0xac)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_CHECKSIGVERIFY 0xad)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_CHECKMULTISIG 0xae)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_CHECKMULTISIGVERIFY 0xaf)

    ;; block state
    ;;; Check lock time of the block.  Introduced in BIP 65, replacing OP_NOP2 ;;
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_CHECKLOCKTIMEVERIFY 0xb1)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_CHECKSEQUENCEVERIFY 0xb2)

    ;; expansion
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_NOP1 0xb0)
    ;;; Deprecated by BIP 65 ;;
    #_deprecated
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_NOP2 ScriptOpCodes'OP_CHECKLOCKTIMEVERIFY)
    ;;; Deprecated by BIP 112 ;;
    #_deprecated
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_NOP3 ScriptOpCodes'OP_CHECKSEQUENCEVERIFY)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_NOP4 0xb3)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_NOP5 0xb4)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_NOP6 0xb5)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_NOP7 0xb6)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_NOP8 0xb7)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_NOP9 0xb8)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_NOP10 0xb9)
    #_public
    #_static
    (def #_"int" ScriptOpCodes'OP_INVALIDOPCODE 0xff)

    #_private
    #_static
    (def- #_"Map<Integer, String>" ScriptOpCodes'OP_CODE_MAP (.. (ImmutableMap/builder #_"ImmutableMap<Integer, String>") (put ScriptOpCodes'OP_0, "0") (put ScriptOpCodes'OP_PUSHDATA1, "PUSHDATA1") (put ScriptOpCodes'OP_PUSHDATA2, "PUSHDATA2") (put ScriptOpCodes'OP_PUSHDATA4, "PUSHDATA4") (put ScriptOpCodes'OP_1NEGATE, "1NEGATE") (put ScriptOpCodes'OP_RESERVED, "RESERVED") (put ScriptOpCodes'OP_1, "1") (put ScriptOpCodes'OP_2, "2") (put ScriptOpCodes'OP_3, "3") (put ScriptOpCodes'OP_4, "4") (put ScriptOpCodes'OP_5, "5") (put ScriptOpCodes'OP_6, "6") (put ScriptOpCodes'OP_7, "7") (put ScriptOpCodes'OP_8, "8") (put ScriptOpCodes'OP_9, "9") (put ScriptOpCodes'OP_10, "10") (put ScriptOpCodes'OP_11, "11") (put ScriptOpCodes'OP_12, "12") (put ScriptOpCodes'OP_13, "13") (put ScriptOpCodes'OP_14, "14") (put ScriptOpCodes'OP_15, "15") (put ScriptOpCodes'OP_16, "16") (put ScriptOpCodes'OP_NOP, "NOP") (put ScriptOpCodes'OP_VER, "VER") (put ScriptOpCodes'OP_IF, "IF") (put ScriptOpCodes'OP_NOTIF, "NOTIF") (put ScriptOpCodes'OP_VERIF, "VERIF") (put ScriptOpCodes'OP_VERNOTIF, "VERNOTIF") (put ScriptOpCodes'OP_ELSE, "ELSE") (put ScriptOpCodes'OP_ENDIF, "ENDIF") (put ScriptOpCodes'OP_VERIFY, "VERIFY") (put ScriptOpCodes'OP_RETURN, "RETURN") (put ScriptOpCodes'OP_TOALTSTACK, "TOALTSTACK") (put ScriptOpCodes'OP_FROMALTSTACK, "FROMALTSTACK") (put ScriptOpCodes'OP_2DROP, "2DROP") (put ScriptOpCodes'OP_2DUP, "2DUP") (put ScriptOpCodes'OP_3DUP, "3DUP") (put ScriptOpCodes'OP_2OVER, "2OVER") (put ScriptOpCodes'OP_2ROT, "2ROT") (put ScriptOpCodes'OP_2SWAP, "2SWAP") (put ScriptOpCodes'OP_IFDUP, "IFDUP") (put ScriptOpCodes'OP_DEPTH, "DEPTH") (put ScriptOpCodes'OP_DROP, "DROP") (put ScriptOpCodes'OP_DUP, "DUP") (put ScriptOpCodes'OP_NIP, "NIP") (put ScriptOpCodes'OP_OVER, "OVER") (put ScriptOpCodes'OP_PICK, "PICK") (put ScriptOpCodes'OP_ROLL, "ROLL") (put ScriptOpCodes'OP_ROT, "ROT") (put ScriptOpCodes'OP_SWAP, "SWAP") (put ScriptOpCodes'OP_TUCK, "TUCK") (put ScriptOpCodes'OP_CAT, "CAT") (put ScriptOpCodes'OP_SUBSTR, "SUBSTR") (put ScriptOpCodes'OP_LEFT, "LEFT") (put ScriptOpCodes'OP_RIGHT, "RIGHT") (put ScriptOpCodes'OP_SIZE, "SIZE") (put ScriptOpCodes'OP_INVERT, "INVERT") (put ScriptOpCodes'OP_AND, "AND") (put ScriptOpCodes'OP_OR, "OR") (put ScriptOpCodes'OP_XOR, "XOR") (put ScriptOpCodes'OP_EQUAL, "EQUAL") (put ScriptOpCodes'OP_EQUALVERIFY, "EQUALVERIFY") (put ScriptOpCodes'OP_RESERVED1, "RESERVED1") (put ScriptOpCodes'OP_RESERVED2, "RESERVED2") (put ScriptOpCodes'OP_1ADD, "1ADD") (put ScriptOpCodes'OP_1SUB, "1SUB") (put ScriptOpCodes'OP_2MUL, "2MUL") (put ScriptOpCodes'OP_2DIV, "2DIV") (put ScriptOpCodes'OP_NEGATE, "NEGATE") (put ScriptOpCodes'OP_ABS, "ABS") (put ScriptOpCodes'OP_NOT, "NOT") (put ScriptOpCodes'OP_0NOTEQUAL, "0NOTEQUAL") (put ScriptOpCodes'OP_ADD, "ADD") (put ScriptOpCodes'OP_SUB, "SUB") (put ScriptOpCodes'OP_MUL, "MUL") (put ScriptOpCodes'OP_DIV, "DIV") (put ScriptOpCodes'OP_MOD, "MOD") (put ScriptOpCodes'OP_LSHIFT, "LSHIFT") (put ScriptOpCodes'OP_RSHIFT, "RSHIFT") (put ScriptOpCodes'OP_BOOLAND, "BOOLAND") (put ScriptOpCodes'OP_BOOLOR, "BOOLOR") (put ScriptOpCodes'OP_NUMEQUAL, "NUMEQUAL") (put ScriptOpCodes'OP_NUMEQUALVERIFY, "NUMEQUALVERIFY") (put ScriptOpCodes'OP_NUMNOTEQUAL, "NUMNOTEQUAL") (put ScriptOpCodes'OP_LESSTHAN, "LESSTHAN") (put ScriptOpCodes'OP_GREATERTHAN, "GREATERTHAN") (put ScriptOpCodes'OP_LESSTHANOREQUAL, "LESSTHANOREQUAL") (put ScriptOpCodes'OP_GREATERTHANOREQUAL, "GREATERTHANOREQUAL") (put ScriptOpCodes'OP_MIN, "MIN") (put ScriptOpCodes'OP_MAX, "MAX") (put ScriptOpCodes'OP_WITHIN, "WITHIN") (put ScriptOpCodes'OP_RIPEMD160, "RIPEMD160") (put ScriptOpCodes'OP_SHA1, "SHA1") (put ScriptOpCodes'OP_SHA256, "SHA256") (put ScriptOpCodes'OP_HASH160, "HASH160") (put ScriptOpCodes'OP_HASH256, "HASH256") (put ScriptOpCodes'OP_CODESEPARATOR, "CODESEPARATOR") (put ScriptOpCodes'OP_CHECKSIG, "CHECKSIG") (put ScriptOpCodes'OP_CHECKSIGVERIFY, "CHECKSIGVERIFY") (put ScriptOpCodes'OP_CHECKMULTISIG, "CHECKMULTISIG") (put ScriptOpCodes'OP_CHECKMULTISIGVERIFY, "CHECKMULTISIGVERIFY") (put ScriptOpCodes'OP_NOP1, "NOP1") (put ScriptOpCodes'OP_CHECKLOCKTIMEVERIFY, "CHECKLOCKTIMEVERIFY") (put ScriptOpCodes'OP_CHECKSEQUENCEVERIFY, "CHECKSEQUENCEVERIFY") (put ScriptOpCodes'OP_NOP4, "NOP4") (put ScriptOpCodes'OP_NOP5, "NOP5") (put ScriptOpCodes'OP_NOP6, "NOP6") (put ScriptOpCodes'OP_NOP7, "NOP7") (put ScriptOpCodes'OP_NOP8, "NOP8") (put ScriptOpCodes'OP_NOP9, "NOP9") (put ScriptOpCodes'OP_NOP10, "NOP10") (build)))

    #_private
    #_static
    (def- #_"Map<String, Integer>" ScriptOpCodes'OP_CODE_NAME_MAP (.. (ImmutableMap/builder #_"ImmutableMap<String, Integer>") (put "0", ScriptOpCodes'OP_0) (put "PUSHDATA1", ScriptOpCodes'OP_PUSHDATA1) (put "PUSHDATA2", ScriptOpCodes'OP_PUSHDATA2) (put "PUSHDATA4", ScriptOpCodes'OP_PUSHDATA4) (put "1NEGATE", ScriptOpCodes'OP_1NEGATE) (put "RESERVED", ScriptOpCodes'OP_RESERVED) (put "1", ScriptOpCodes'OP_1) (put "2", ScriptOpCodes'OP_2) (put "3", ScriptOpCodes'OP_3) (put "4", ScriptOpCodes'OP_4) (put "5", ScriptOpCodes'OP_5) (put "6", ScriptOpCodes'OP_6) (put "7", ScriptOpCodes'OP_7) (put "8", ScriptOpCodes'OP_8) (put "9", ScriptOpCodes'OP_9) (put "10", ScriptOpCodes'OP_10) (put "11", ScriptOpCodes'OP_11) (put "12", ScriptOpCodes'OP_12) (put "13", ScriptOpCodes'OP_13) (put "14", ScriptOpCodes'OP_14) (put "15", ScriptOpCodes'OP_15) (put "16", ScriptOpCodes'OP_16) (put "NOP", ScriptOpCodes'OP_NOP) (put "VER", ScriptOpCodes'OP_VER) (put "IF", ScriptOpCodes'OP_IF) (put "NOTIF", ScriptOpCodes'OP_NOTIF) (put "VERIF", ScriptOpCodes'OP_VERIF) (put "VERNOTIF", ScriptOpCodes'OP_VERNOTIF) (put "ELSE", ScriptOpCodes'OP_ELSE) (put "ENDIF", ScriptOpCodes'OP_ENDIF) (put "VERIFY", ScriptOpCodes'OP_VERIFY) (put "RETURN", ScriptOpCodes'OP_RETURN) (put "TOALTSTACK", ScriptOpCodes'OP_TOALTSTACK) (put "FROMALTSTACK", ScriptOpCodes'OP_FROMALTSTACK) (put "2DROP", ScriptOpCodes'OP_2DROP) (put "2DUP", ScriptOpCodes'OP_2DUP) (put "3DUP", ScriptOpCodes'OP_3DUP) (put "2OVER", ScriptOpCodes'OP_2OVER) (put "2ROT", ScriptOpCodes'OP_2ROT) (put "2SWAP", ScriptOpCodes'OP_2SWAP) (put "IFDUP", ScriptOpCodes'OP_IFDUP) (put "DEPTH", ScriptOpCodes'OP_DEPTH) (put "DROP", ScriptOpCodes'OP_DROP) (put "DUP", ScriptOpCodes'OP_DUP) (put "NIP", ScriptOpCodes'OP_NIP) (put "OVER", ScriptOpCodes'OP_OVER) (put "PICK", ScriptOpCodes'OP_PICK) (put "ROLL", ScriptOpCodes'OP_ROLL) (put "ROT", ScriptOpCodes'OP_ROT) (put "SWAP", ScriptOpCodes'OP_SWAP) (put "TUCK", ScriptOpCodes'OP_TUCK) (put "CAT", ScriptOpCodes'OP_CAT) (put "SUBSTR", ScriptOpCodes'OP_SUBSTR) (put "LEFT", ScriptOpCodes'OP_LEFT) (put "RIGHT", ScriptOpCodes'OP_RIGHT) (put "SIZE", ScriptOpCodes'OP_SIZE) (put "INVERT", ScriptOpCodes'OP_INVERT) (put "AND", ScriptOpCodes'OP_AND) (put "OR", ScriptOpCodes'OP_OR) (put "XOR", ScriptOpCodes'OP_XOR) (put "EQUAL", ScriptOpCodes'OP_EQUAL) (put "EQUALVERIFY", ScriptOpCodes'OP_EQUALVERIFY) (put "RESERVED1", ScriptOpCodes'OP_RESERVED1) (put "RESERVED2", ScriptOpCodes'OP_RESERVED2) (put "1ADD", ScriptOpCodes'OP_1ADD) (put "1SUB", ScriptOpCodes'OP_1SUB) (put "2MUL", ScriptOpCodes'OP_2MUL) (put "2DIV", ScriptOpCodes'OP_2DIV) (put "NEGATE", ScriptOpCodes'OP_NEGATE) (put "ABS", ScriptOpCodes'OP_ABS) (put "NOT", ScriptOpCodes'OP_NOT) (put "0NOTEQUAL", ScriptOpCodes'OP_0NOTEQUAL) (put "ADD", ScriptOpCodes'OP_ADD) (put "SUB", ScriptOpCodes'OP_SUB) (put "MUL", ScriptOpCodes'OP_MUL) (put "DIV", ScriptOpCodes'OP_DIV) (put "MOD", ScriptOpCodes'OP_MOD) (put "LSHIFT", ScriptOpCodes'OP_LSHIFT) (put "RSHIFT", ScriptOpCodes'OP_RSHIFT) (put "BOOLAND", ScriptOpCodes'OP_BOOLAND) (put "BOOLOR", ScriptOpCodes'OP_BOOLOR) (put "NUMEQUAL", ScriptOpCodes'OP_NUMEQUAL) (put "NUMEQUALVERIFY", ScriptOpCodes'OP_NUMEQUALVERIFY) (put "NUMNOTEQUAL", ScriptOpCodes'OP_NUMNOTEQUAL) (put "LESSTHAN", ScriptOpCodes'OP_LESSTHAN) (put "GREATERTHAN", ScriptOpCodes'OP_GREATERTHAN) (put "LESSTHANOREQUAL", ScriptOpCodes'OP_LESSTHANOREQUAL) (put "GREATERTHANOREQUAL", ScriptOpCodes'OP_GREATERTHANOREQUAL) (put "MIN", ScriptOpCodes'OP_MIN) (put "MAX", ScriptOpCodes'OP_MAX) (put "WITHIN", ScriptOpCodes'OP_WITHIN) (put "RIPEMD160", ScriptOpCodes'OP_RIPEMD160) (put "SHA1", ScriptOpCodes'OP_SHA1) (put "SHA256", ScriptOpCodes'OP_SHA256) (put "HASH160", ScriptOpCodes'OP_HASH160) (put "HASH256", ScriptOpCodes'OP_HASH256) (put "CODESEPARATOR", ScriptOpCodes'OP_CODESEPARATOR) (put "CHECKSIG", ScriptOpCodes'OP_CHECKSIG) (put "CHECKSIGVERIFY", ScriptOpCodes'OP_CHECKSIGVERIFY) (put "CHECKMULTISIG", ScriptOpCodes'OP_CHECKMULTISIG) (put "CHECKMULTISIGVERIFY", ScriptOpCodes'OP_CHECKMULTISIGVERIFY) (put "NOP1", ScriptOpCodes'OP_NOP1) (put "CHECKLOCKTIMEVERIFY", ScriptOpCodes'OP_CHECKLOCKTIMEVERIFY) (put "CHECKSEQUENCEVERIFY", ScriptOpCodes'OP_CHECKSEQUENCEVERIFY) (put "NOP2", ScriptOpCodes'OP_NOP2) (put "NOP3", ScriptOpCodes'OP_NOP3) (put "NOP4", ScriptOpCodes'OP_NOP4) (put "NOP5", ScriptOpCodes'OP_NOP5) (put "NOP6", ScriptOpCodes'OP_NOP6) (put "NOP7", ScriptOpCodes'OP_NOP7) (put "NOP8", ScriptOpCodes'OP_NOP8) (put "NOP9", ScriptOpCodes'OP_NOP9) (put "NOP10", ScriptOpCodes'OP_NOP10) (build)))

    ;;;
     ; Converts the given OpCode into a string (e.g. "0", "PUSHDATA", or "NON_OP(10)")
     ;;
    #_public
    #_static
    (§ defn #_"String" ScriptOpCodes'getOpCodeName [#_"int" code]
        (if (.. ScriptOpCodes'OP_CODE_MAP (containsKey code))
            (.. ScriptOpCodes'OP_CODE_MAP (get code))
            (str "NON_OP(" code ")")
        )
    )

    ;;;
     ; Converts the given pushdata OpCode into a string (e.g. "PUSHDATA2", or "PUSHDATA(23)")
     ;;
    #_public
    #_static
    (§ defn #_"String" ScriptOpCodes'getPushDataName [#_"int" code]
        (if (.. ScriptOpCodes'OP_CODE_MAP (containsKey code))
            (.. ScriptOpCodes'OP_CODE_MAP (get code))
            (str "PUSHDATA(" code ")")
        )
    )

    ;;;
     ; Converts the given OpCodeName into an int.
     ;;
    #_public
    #_static
    (§ defn #_"int" ScriptOpCodes'getOpCode [#_"String" name]
        (if (.. ScriptOpCodes'OP_CODE_NAME_MAP (containsKey name))
            (.. ScriptOpCodes'OP_CODE_NAME_MAP (get name))
            ScriptOpCodes'OP_INVALIDOPCODE
        )
    )
)

#_(ns org.bitcoinj.signers
    (:import [java.util EnumSet HashMap List Map]
             [org.slf4j LoggerFactory Logger]
    )
)

;;;
 ; This signer may be used as a template for creating custom multisig transaction signers.
 ;
 ; Concrete implementations have to implement {@link #getSignature(Sha256Hash, java.util.List)}
 ; method returning a signature and a public key of the keypair used to created that signature.
 ; It's up to custom implementation where to locate signatures: it may be a network connection,
 ; some local API or something else.
 ;;
#_public
#_abstract
(§ class CustomTransactionSigner (§ extends StatelessTransactionSigner)
    #_private
    #_static
    (def- #_"Logger" CustomTransactionSigner'log (LoggerFactory/getLogger CustomTransactionSigner))

    #_override
    #_public
    (§ method #_"boolean" isReady []
        true
    )

    #_override
    #_public
    (§ method #_"boolean" signInputs [#_"ProposedTransaction" __propTx, #_"KeyBag" bag]
        (let [#_"Transaction" tx (:partial-tx __propTx) #_"int" n (.. tx (getInputs) (size))]
            (loop-when-recur [#_"int" i 0] (< i n) [(inc i)]
                (let [#_"TransactionInput" in (.. tx (getInput i)) #_"TransactionOutput" out (.. in (getConnectedOutput))]
                    (when (some? out)
                        (let [#_"Script" outKey (.. out (getScriptPubKey))]
                            (when-not (.. outKey (isPayToScriptHash))
                                (.. CustomTransactionSigner'log (warn "CustomTransactionSigner works only with P2SH transactions"))
                                (§ return false)
                            )
                            (let [#_"Script" inSig (ensure some? (.. in (getScriptSig)))]
                                (try
                                    ;; We assume if its already signed, its hopefully got a SIGHASH type that will not invalidate when
                                    ;; we sign missing pieces (to check this would require either assuming any signatures are signing
                                    ;; standard output types or a way to get processed signatures out of script execution).
                                    (.. inSig (correctlySpends tx, i, outKey))
                                    (.. CustomTransactionSigner'log (warn "Input {} already correctly spends output, assuming SIGHASH type used will be safe and skipping signing.", i))
                                    (catch ScriptException _
                                        (let [#_"RedeemData" redeem (.. in (getConnectedRedeemData bag))]
                                            (if (nil? redeem)
                                                (.. CustomTransactionSigner'log (warn "No redeem data found for input {}", i))
                                                (let [#_"Sha256Hash" sigHash (.. tx (hashForSignature i, (:redeem-script redeem), SigHash'ALL, false))
                                                      #_"SignatureAndKey" sigKey (.. this (getSignature sigHash, (.. (:key-paths __propTx) (get outKey))))
                                                      #_"TransactionSignature" sig (TransactionSignature. (:sig sigKey), SigHash'ALL, false)
                                                      #_"int" x (.. inSig (getSigInsertionIndex sigHash, (:pub-key sigKey)))]
                                                    (.. in (setScriptSig (.. outKey (getScriptSigWithSignature inSig, (.. sig (encodeToBitcoin)), x))))
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                        )
                    )
                )
            )
            true
        )
    )

    #_protected
    #_abstract
    (§ method #_"SignatureAndKey" getSignature [#_"Sha256Hash" sighash, #_"List<ChildNumber>" __derivationPath])

    #_public
    (§ class SignatureAndKey
        #_public
        (§ field #_"ECDSASignature" :sig)
        #_public
        (§ field #_"ECKey" :pub-key)

        #_public
        (§ constructor SignatureAndKey [#_"ECDSASignature" sig, #_"ECKey" __pubKey]
            (§ assoc this :sig sig)
            (§ assoc this :pub-key __pubKey)
            this
        )
    )
)

;;;
 ; {@link TransactionSigner} implementation for signing inputs using keys from provided {@link KeyBag}.
 ;
 ; This signer doesn't create input scripts for tx inputs.  Instead it expects inputs to contain scripts with
 ; empty sigs and replaces one of the empty sigs with calculated signature.
 ;
 ; This signer is always implicitly added into every wallet and it is the first signer to be executed during tx
 ; completion.  As the first signer to create a signature, it stores derivation path of the signing key in a given
 ; {@link ProposedTransaction} object that will be also passed then to the next signer in chain.  This allows other
 ; signers to use correct signing key for P2SH inputs, because all the keys involved in a single P2SH address have
 ; the same derivation path.
 ;
 ; This signer always uses {@link Transaction.SigHash#ALL} signing mode.
 ;;
#_public
(§ class LocalTransactionSigner (§ extends StatelessTransactionSigner)
    #_private
    #_static
    (def- #_"Logger" LocalTransactionSigner'log (LoggerFactory/getLogger LocalTransactionSigner))

    ;;;
     ; Verify flags that are safe to use when testing if an input is already signed.
     ;;
    #_private
    #_static
    (def- #_"EnumSet<ScriptVerifyFlag>" LocalTransactionSigner'MINIMUM_VERIFY_FLAGS (EnumSet/of :ScriptVerifyFlag'P2SH, :ScriptVerifyFlag'NULLDUMMY))

    #_override
    #_public
    (§ method #_"boolean" isReady []
        true
    )

    #_override
    #_public
    (§ method #_"boolean" signInputs [#_"ProposedTransaction" __propTx, #_"KeyBag" bag]
        (let [#_"Transaction" tx (:partial-tx __propTx) #_"int" n (.. tx (getInputs) (size))]
            (loop-when-recur [#_"int" i 0] (< i n) [(inc i)]
                (let [#_"TransactionInput" in (.. tx (getInput i)) #_"TransactionOutput" out (.. in (getConnectedOutput))]
                    (if (nil? out)
                        (.. LocalTransactionSigner'log (warn "Missing connected output, assuming input {} is already signed.", i))
                        (let [#_"Script" inSig (.. in (getScriptSig)) #_"Script" outKey (.. out (getScriptPubKey))]
                            (try
                                ;; We assume if its already signed, its hopefully got a SIGHASH type that will not invalidate when
                                ;; we sign missing pieces (to check this would require either assuming any signatures are signing
                                ;; standard output types or a way to get processed signatures out of script execution).
                                (.. inSig (correctlySpends tx, i, outKey, LocalTransactionSigner'MINIMUM_VERIFY_FLAGS))
                                (.. LocalTransactionSigner'log (warn "Input {} already correctly spends output, assuming SIGHASH type used will be safe and skipping signing.", i))
                                (catch ScriptException _
                                    (let [#_"RedeemData" redeem (.. in (getConnectedRedeemData bag))]
                                        ;; For P2SH inputs we need to share derivation path of the signing key with other signers,
                                        ;; so that they use correct key to calculate their signatures.
                                        ;; Married keys all have the same derivation path, so we can safely just take first one here.
                                        (let [#_"ECKey" __pubKey (.. (:keys redeem) (get 0))]
                                            (when (instance? DeterministicKey __pubKey)
                                                (.. (:key-paths __propTx) (put outKey, (.. (cast DeterministicKey __pubKey) (getPath))))
                                            )
                                            ;; Locate private key in redeem data.  For pay-to-address and pay-to-key inputs RedeemData will always contain
                                            ;; only one key (with private bytes).  For P2SH inputs RedeemData will contain multiple keys, one of which MAY
                                            ;; have private bytes.
                                            (let [#_"ECKey" key (.. redeem (getFullKey))]
                                                (if (nil? key)
                                                    (.. LocalTransactionSigner'log (warn "No local key found for input {}", i))
                                                    ;; script here would be either a standard CHECKSIG program for pay-to-address or pay-to-pubkey inputs or
                                                    ;; a CHECKMULTISIG program for P2SH inputs.
                                                    (let [#_"byte[]" script (.. (:redeem-script redeem) (getProgram))]
                                                        ;; At this point we have incomplete inputScript with OP_0 in place of one or more signatures.  We already
                                                        ;; have calculated the signature using the local key and now need to insert it in the correct place
                                                        ;; within inputScript.  For pay-to-address and pay-to-key script there is only one signature and it always
                                                        ;; goes first in an inputScript (sigIndex = 0).  In P2SH input scripts we need to figure out our relative
                                                        ;; position relative to other signers.  Since we don't have that information at this point, and since
                                                        ;; we always run first, we have to depend on the other signers rearranging the signatures as needed.
                                                        ;; Therefore, always place as first signature.
                                                        (try
                                                            (let [#_"TransactionSignature" sig (.. tx (calculateSignature i, key, script, SigHash'ALL, false))]
                                                                (.. in (setScriptSig (.. outKey (getScriptSigWithSignature inSig, (.. sig (encodeToBitcoin)), 0))))
                                                            )
                                                            (catch MissingPrivateKeyException _
                                                                (.. LocalTransactionSigner'log (warn "No private key in keypair for input {}", i))
                                                            )
                                                        )
                                                    )
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                        )
                    )
                )
            )
            true
        )
    )
)

;;;
 ; This transaction signer resolves missing signatures in accordance with the given {@link Wallet.MissingSigsMode}.
 ; If missingSigsMode is USE_OP_ZERO this signer does nothing assuming missing signatures are already presented in scriptSigs as OP_0.
 ; In MissingSigsMode.THROW mode this signer will throw an exception.  It would be MissingSignatureException
 ; for P2SH or MissingPrivateKeyException for other transaction types.
 ;;
#_public
(§ class MissingSigResolutionSigner (§ extends StatelessTransactionSigner)
    #_private
    #_static
    (def- #_"Logger" MissingSigResolutionSigner'log (LoggerFactory/getLogger MissingSigResolutionSigner))

    #_public
    (§ field #_"MissingSigsMode" :missing-sigs-mode :MissingSigsMode'USE_DUMMY_SIG)

    #_public
    (§ constructor MissingSigResolutionSigner []
        this
    )

    #_public
    (§ constructor MissingSigResolutionSigner [#_"MissingSigsMode" __missingSigsMode]
        (§ assoc this :missing-sigs-mode __missingSigsMode)
        this
    )

    #_override
    #_public
    (§ method #_"boolean" isReady []
        true
    )

    #_override
    #_public
    (§ method #_"boolean" signInputs [#_"ProposedTransaction" __propTx, #_"KeyBag" bag]
        (when-not (= (:missing-sigs-mode this) :MissingSigsMode'USE_OP_ZERO)
            (let [#_"Transaction" tx (:partial-tx __propTx) #_"int" n (.. tx (getInputs) (size))
                  #_"byte[]" dummy (.. (TransactionSignature'dummy) (encodeToBitcoin))]
                (loop-when-recur [#_"int" i 0] (< i n) [(inc i)]
                    (let [#_"TransactionInput" in (.. tx (getInput i)) #_"TransactionOutput" out (.. in (getConnectedOutput))]
                        (if (nil? out)
                            (.. MissingSigResolutionSigner'log (warn "Missing connected output, assuming input {} is already signed.", i))
                            (let [#_"Script" inSig (.. in (getScriptSig)) #_"Script" outKey (.. out (getScriptPubKey))]
                                (if (or (.. outKey (isPayToScriptHash)) (.. outKey (isSentToMultiSig)))
                                    (let [#_"int" x (if (.. outKey (isPayToScriptHash)) 1 0) m (.. inSig (getChunks) (size))]
                                        ;; All chunks except the first one (OP_0) and the last (redeem script) are signatures.
                                        (loop-when-recur [#_"int" j 1] (< j (- m x)) [(inc j)]
                                            (when (.. inSig (getChunks) (get j) (equalsOpCode 0))
                                                (condp = (:missing-sigs-mode this)
                                                    :MissingSigsMode'THROW
                                                        (throw (MissingSignatureException.))
                                                    :MissingSigsMode'USE_DUMMY_SIG
                                                        (.. in (setScriptSig (.. outKey (getScriptSigWithSignature inSig, dummy, (dec j)))))
                                                    nil
                                                )
                                            )
                                        )
                                    )
                                    (when (.. inSig (getChunks) (get 0) (equalsOpCode 0))
                                        (condp = (:missing-sigs-mode this)
                                            :MissingSigsMode'THROW
                                                (throw (MissingPrivateKeyException.))
                                            :MissingSigsMode'USE_DUMMY_SIG
                                                (.. in (setScriptSig (.. outKey (getScriptSigWithSignature inSig, dummy, 0))))
                                            nil
                                        )
                                    )
                                )
                                ;; TODO: Handle non-P2SH multisig.
                            )
                        )
                    )
                )
            )
        )
        true
    )
)

;;;
 ; A signer that doesn't have any state to be serialized.
 ;;
#_public
#_abstract
(§ class StatelessTransactionSigner (§ implements TransactionSigner)
    #_override
    #_public
    (§ method #_"void" deserialize [#_"byte[]" data]
        nil
    )

    #_override
    #_public
    (§ method #_"byte[]" serialize []
        (byte-array 0)
    )
)

;;;
 ; Implementations of this interface are intended to sign inputs of the given transaction.
 ; Given transaction may already be partially signed or somehow altered by other signers.
 ;
 ; To make use of the signer, you need to add it into the wallet by calling
 ; {@link Wallet#addTransactionSigner(TransactionSigner)}.
 ; Signer will be serialized along with the wallet data.  In order for a wallet to recreate
 ; signer after deserialization, each signer should have no-args constructor.
 ;;
#_public
(§ interface TransactionSigner
    ;;;
     ; This class wraps transaction proposed to complete keeping a metadata that may be updated, used and effectively
     ; shared by transaction signers.
     ;;
    (§ class ProposedTransaction
        #_public
        (§ field #_"Transaction" :partial-tx)

        ;;;
         ; HD key paths used for each input to derive a signing key.  It's useful for multisig inputs only.
         ; The keys used to create a single P2SH address have the same derivation path, so to use a correct key each signer
         ; has to know a derivation path of signing keys used by previous signers.  For each input signers will use the
         ; same derivation path and we need to store only one key path per input.  As TransactionInput is mutable, inputs
         ; are identified by their scriptPubKeys (keys in this map).
         ;;
        #_public
        (§ field #_"Map<Script, List<ChildNumber>>" :key-paths)

        #_public
        (§ constructor ProposedTransaction [#_"Transaction" __partialTx]
            (§ assoc this :partial-tx __partialTx)
            (§ assoc this :key-paths (HashMap. #_"<>"))
            this
        )
    )

    (§ class MissingSignatureException (§ extends RuntimeException)
    )

    ;;;
     ; Returns true if this signer is ready to be used.
     ;;
    (§ method #_"boolean" isReady [])

    ;;;
     ; Returns byte array of data representing state of this signer.
     ; It's used to serialize/deserialize this signer.
     ;;
    (§ method #_"byte[]" serialize [])

    ;;;
     ; Uses given byte array of data to reconstruct internal state of this signer.
     ;;
    (§ method #_"void" deserialize [#_"byte[]" data])

    ;;;
     ; Signs given transaction's inputs.
     ; Returns true if signer is compatible with given transaction (can do something meaningful with it).
     ; Otherwise this method returns false.
     ;;
    (§ method #_"boolean" signInputs [#_"ProposedTransaction" __propTx, #_"KeyBag" bag])
)

#_(ns org.bitcoinj.store
    (:import [com.google.common.base Charsets Objects]
             [com.google.common.collect Lists]
             [java.io *]
             [java.nio *]
             [java.nio.channels *]
             [java.util LinkedHashMap Map]
             [java.util.concurrent.locks *]
             [org.slf4j LoggerFactory Logger]
    )
)

;;;
 ; An implementor of BlockStore saves StoredBlock objects to disk.  Different implementations store them in
 ; different ways.  An in-memory implementation (MemoryBlockStore) exists for unit testing but real apps will
 ; want to use implementations that save to disk.
 ;
 ; A BlockStore is a map of hashes to StoredBlock.  The hash is the double digest of the Bitcoin serialization
 ; of the block header, <b>not</b> the header with the extra data as well.
 ;
 ; BlockStores are thread safe.
 ;;
#_public
(§ interface BlockStore
    ;;;
     ; Saves the given block header+extra data.  The key isn't specified explicitly as it can be calculated
     ; from the StoredBlock directly.  Can throw if there is a problem with the underlying storage layer such
     ; as running out of disk space.
     ;;
    #_throws #_[ "BlockStoreException" ]
    (§ method #_"void" put [#_"StoredBlock" block])

    ;;;
     ; Returns the StoredBlock given a hash.  The returned values block.getHash() method will be equal to the
     ; parameter. If no such block is found, returns null.
     ;;
    #_throws #_[ "BlockStoreException" ]
    (§ method #_"StoredBlock" get [#_"Sha256Hash" hash])

    ;;;
     ; Returns the {@link StoredBlock} that represents the top of the chain of greatest total work.  Note that
     ; this can be arbitrarily expensive, you probably should use {@link BlockChain#getChainHead()}
     ; or perhaps {@link BlockChain#getBestChainHeight()} which will run in constant time and
     ; not take any heavyweight locks.
     ;;
    #_throws #_[ "BlockStoreException" ]
    (§ method #_"StoredBlock" getChainHead [])

    ;;;
     ; Sets the {@link StoredBlock} that represents the top of the chain of greatest total work.
     ;;
    #_throws #_[ "BlockStoreException" ]
    (§ method #_"void" setChainHead [#_"StoredBlock" __chainHead])

    ;;; Closes the store. ;;
    #_throws #_[ "BlockStoreException" ]
    (§ method #_"void" close [])

    ;;;
     ; Get the {@link NetworkParameters} of this store.
     ;
     ; @return the network params.
     ;;
    (§ method #_"NetworkParameters" getParams [])
)

;;;
 ; Thrown when something goes wrong with storing a block.  Examples: out of disk space.
 ;;
#_public
(§ class BlockStoreException (§ extends Exception)
    #_public
    (§ constructor BlockStoreException [#_"String" message]
        (§ super message)
        this
    )

    #_public
    (§ constructor BlockStoreException [#_"Throwable" t]
        (§ super t)
        this
    )

    #_public
    (§ constructor BlockStoreException [#_"String" message, #_"Throwable" t]
        (§ super message, t)
        this
    )
)

;;;
 ; Thrown by {@link SPVBlockStore} when the process cannot gain exclusive access to the chain file.
 ;;
#_public
(§ class ChainFileLockedException (§ extends BlockStoreException)
    #_public
    (§ constructor ChainFileLockedException [#_"String" message]
        (§ super message)
        this
    )

    #_public
    (§ constructor ChainFileLockedException [#_"Throwable" t]
        (§ super t)
        this
    )
)

;;;
 ; An implementor of FullPrunedBlockStore saves StoredBlock objects to some storage mechanism.
 ;
 ; In addition to keeping track of a chain using {@link StoredBlock}s, it should also keep track of
 ; a second copy of the chain which holds {@link StoredUndoableBlock}s.  In this way, an application can
 ; perform a headers-only initial sync and then use that information to more efficiently download a locally
 ; verified full copy of the block chain.
 ;
 ; A FullPrunedBlockStore should function well as a standard {@link BlockStore} and then be able to
 ; trivially switch to being used as a FullPrunedBlockStore.
 ;
 ; It should store the {@link StoredUndoableBlock}s of a number of recent blocks before verifiedHead.height
 ; and all those after verifiedHead.height.
 ; It is advisable to store any {@link StoredUndoableBlock} which has a height > verifiedHead.height - N.
 ; Because N determines the memory usage, it is recommended that N be customizable.  N should be chosen such
 ; that re-orgs beyond that point are vanishingly unlikely, e.g. a few thousand blocks is a reasonable choice.
 ;
 ; It must store the {@link StoredBlock} of all blocks.
 ;
 ; A FullPrunedBlockStore contains a map of hashes to [Full]StoredBlock.  The hash is the double digest of
 ; the Bitcoin serialization of the block header, <b>not</b> the header with the extra data as well.
 ;
 ; A FullPrunedBlockStore also contains a map of hash+index to UTXO.  Again, the hash is
 ; a standard Bitcoin double-SHA256 hash of the transaction.
 ;
 ; FullPrunedBlockStores are thread safe.
 ;;
#_public
(§ interface FullPrunedBlockStore (§ extends BlockStore)
    ;;;
     ; Saves the given {@link StoredUndoableBlock} and {@link StoredBlock}.  Calculates keys from the {@link StoredBlock}.
     ;
     ; Though not required for proper function of a FullPrunedBlockStore, any user of a FullPrunedBlockStore should ensure
     ; that a StoredUndoableBlock for each block up to the fully verified chain head has been added to this block store using
     ; this function (not put(StoredBlock)), so that the ability to perform reorgs is maintained.
     ;
     ; @throws BlockStoreException if there is a problem with the underlying storage layer, such as running out of disk space.
     ;;
    #_throws #_[ "BlockStoreException" ]
    (§ method #_"void" put [#_"StoredBlock" __storedBlock, #_"StoredUndoableBlock" __undoableBlock])

    ;;;
     ; Returns the StoredBlock that was added as a StoredUndoableBlock given a hash.  The returned values block.getHash()
     ; method will be equal to the parameter.  If no such block is found, returns null.
     ;;
    #_throws #_[ "BlockStoreException" ]
    (§ method #_"StoredBlock" getOnceUndoableStoredBlock [#_"Sha256Hash" hash])

    ;;;
     ; Returns a {@link StoredUndoableBlock} whose block.getHash() method will be equal to the parameter.  If no such
     ; block is found, returns null.  Note that this may return null more often than get(Sha256Hash hash) as not all
     ; {@link StoredBlock}s have a {@link StoredUndoableBlock} copy stored as well.
     ;;
    #_throws #_[ "BlockStoreException" ]
    (§ method #_"StoredUndoableBlock" getUndoBlock [#_"Sha256Hash" hash])

    ;;;
     ; Gets a {@link UTXO} with the given hash and index, or null if none is found.
     ;;
    #_throws #_[ "BlockStoreException" ]
    (§ method #_"UTXO" getTransactionOutput [#_"Sha256Hash" hash, #_"long" index])

    ;;;
     ; Adds a {@link UTXO} to the list of unspent TransactionOutputs.
     ;;
    #_throws #_[ "BlockStoreException" ]
    (§ method #_"void" addUnspentTransactionOutput [#_"UTXO" out])

    ;;;
     ; Removes a {@link UTXO} from the list of unspent TransactionOutputs.
     ; Note that the coinbase of the genesis block should NEVER be spendable and thus never in the list.
     ;
     ; @throws BlockStoreException if there is an underlying storage issue, or out was not in the list.
     ;;
    #_throws #_[ "BlockStoreException" ]
    (§ method #_"void" removeUnspentTransactionOutput [#_"UTXO" out])

    ;;;
     ; True if this store has any unspent outputs from a transaction with a hash equal to the first parameter.
     ;
     ; @param numOutputs The number of outputs the given transaction has.
     ;;
    #_throws #_[ "BlockStoreException" ]
    (§ method #_"boolean" hasUnspentOutputs [#_"Sha256Hash" hash, #_"int" __numOutputs])

    ;;;
     ; Returns the {@link StoredBlock} that represents the top of the chain of greatest total work that has
     ; been fully verified and the point in the chain at which the unspent transaction output set in this
     ; store represents.
     ;;
    #_throws #_[ "BlockStoreException" ]
    (§ method #_"StoredBlock" getVerifiedChainHead [])

    ;;;
     ; Sets the {@link StoredBlock} that represents the top of the chain of greatest total work that has been
     ; fully verified.  It should generally be set after a batch of updates to the transaction unspent output set,
     ; before a call to commitDatabaseBatchWrite.
     ;
     ; If chainHead has a greater height than the non-verified chain head (i.e. that set with
     ; {@link BlockStore#setChainHead}) the non-verified chain head should be set to the one set here.
     ; In this way a class using a FullPrunedBlockStore only in full-verification mode can ignore the regular
     ; {@link BlockStore} functions implemented as a part of a FullPrunedBlockStore.
     ;;
    #_throws #_[ "BlockStoreException" ]
    (§ method #_"void" setVerifiedChainHead [#_"StoredBlock" __chainHead])

    ;;;
     ; Begins/Commits/Aborts a database transaction.
     ;
     ; If abortDatabaseBatchWrite() is called by the same thread that called beginDatabaseBatchWrite(),
     ; any data writes between this call and abortDatabaseBatchWrite() made by the same thread
     ; should be discarded.
     ;
     ; Furthermore, any data written after a call to beginDatabaseBatchWrite() should not be readable
     ; by any other threads until commitDatabaseBatchWrite() has been called by this thread.
     ; Multiple calls to beginDatabaseBatchWrite() in any given thread should be ignored and treated as one call.
     ;;
    #_throws #_[ "BlockStoreException" ]
    (§ method #_"void" beginDatabaseBatchWrite [])

    #_throws #_[ "BlockStoreException" ]
    (§ method #_"void" commitDatabaseBatchWrite [])

    #_throws #_[ "BlockStoreException" ]
    (§ method #_"void" abortDatabaseBatchWrite [])
)

;;;
 ; Keeps {@link StoredBlock}s in memory.
 ;;
#_public
(§ class MemoryBlockStore (§ implements BlockStore)
    #_private
    (§ field- #_"LinkedHashMap<Sha256Hash, StoredBlock>" :block-map (LinkedHashMap. #_"<Sha256Hash, StoredBlock>"
        (§ anon
            #_override
            #_protected
            (§ method #_"boolean" removeEldestEntry [#_"Map.Entry<Sha256Hash, StoredBlock>" eldest]
                (< 5000 (.. (:block-map this) (size)))
            )
        )))
    #_private
    (§ field- #_"StoredBlock" :chain-head)
    #_private
    (§ field- #_"NetworkParameters" :params)

    #_public
    (§ constructor MemoryBlockStore [#_"NetworkParameters" params]
        ;; Insert the genesis block.
        (try
            (let [#_"Block" __genesisHeader (.. (:genesis-block params) (cloneAsHeader))
                  #_"StoredBlock" __storedGenesis (StoredBlock. __genesisHeader, (.. __genesisHeader (getWork)), 0)]
                (.. this (put __storedGenesis))
                (.. this (setChainHead __storedGenesis))
                (§ assoc this :params params)
            )
            (catch BlockStoreException e
                (throw (RuntimeException. e)) ;; Cannot happen.
            )
            (catch VerificationException e
                (throw (RuntimeException. e)) ;; Cannot happen.
            )
        )
        this
    )

    #_override
    #_public
    #_synchronized
    #_throws #_[ "BlockStoreException" ]
    (§ method #_"void" put [#_"StoredBlock" block]
        (when (nil? (:block-map this))
            (throw (BlockStoreException. "MemoryBlockStore is closed"))
        )

        (let [#_"Sha256Hash" hash (.. block (getHeader) (getHash))]
            (.. (:block-map this) (put hash, block))
        )
        nil
    )

    #_override
    #_public
    #_synchronized
    #_throws #_[ "BlockStoreException" ]
    (§ method #_"StoredBlock" get [#_"Sha256Hash" hash]
        (when (nil? (:block-map this))
            (throw (BlockStoreException. "MemoryBlockStore is closed"))
        )

        (.. (:block-map this) (get hash))
    )

    #_override
    #_public
    #_throws #_[ "BlockStoreException" ]
    (§ method #_"StoredBlock" getChainHead []
        (when (nil? (:block-map this))
            (throw (BlockStoreException. "MemoryBlockStore is closed"))
        )

        (:chain-head this)
    )

    #_override
    #_public
    #_throws #_[ "BlockStoreException" ]
    (§ method #_"void" setChainHead [#_"StoredBlock" __chainHead]
        (when (nil? (:block-map this))
            (throw (BlockStoreException. "MemoryBlockStore is closed"))
        )

        (§ assoc this :chain-head __chainHead)
        nil
    )

    #_override
    #_public
    (§ method #_"void" close []
        (§ assoc this :block-map nil)
        nil
    )

    #_override
    #_public
    (§ method #_"NetworkParameters" getParams []
        (:params this)
    )
)

;;;
 ; Used as a key for memory map (to avoid having to think about NetworkParameters,
 ; which is required for {@link TransactionOutPoint}.
 ;;
(§ class StoredTransactionOutPoint
    ;;; Hash of the transaction to which we refer. ;;
    (§ field #_"Sha256Hash" :hash)
    ;;; Which output of that transaction we are talking about. ;;
    (§ field #_"long" :index)

    (§ constructor StoredTransactionOutPoint [#_"Sha256Hash" hash, #_"long" index]
        (§ assoc this :hash hash)
        (§ assoc this :index index)
        this
    )

    (§ constructor StoredTransactionOutPoint [#_"UTXO" out]
        (§ assoc this :hash (.. out (getHash)))
        (§ assoc this :index (.. out (getIndex)))
        this
    )

    ;;;
     ; The hash of the transaction to which we refer.
     ;;
    (§ method #_"Sha256Hash" getHash []
        (:hash this)
    )

    ;;;
     ; The index of the output in transaction to which we refer.
     ;;
    (§ method #_"long" getIndex []
        (:index this)
    )

    #_override
    #_public
    (§ method #_"int" hashCode []
        (Objects/hashCode (.. this (getIndex)), (.. this (getHash)))
    )

    #_override
    #_public
    (§ method #_"String" toString []
        (str "Stored transaction out point: " (:hash this) ":" (:index this))
    )

    #_override
    #_public
    (§ method #_"boolean" equals [#_"Object" o]
        (cond
            (= this o) true
            (or (nil? o) (not= (getClass) (.. o (getClass)))) false
            :else (let [#_"StoredTransactionOutPoint" other (cast StoredTransactionOutPoint o)]
                (and (= (.. this (getIndex)) (.. other (getIndex))) (Objects/equal (.. this (getHash)), (.. other (getHash))))
            )
        )
    )
)

;;;
 ; A HashMap<KeyType, ValueType> that is DB transaction-aware.
 ; This class is not thread-safe.
 ;;
(§ class TransactionalHashMap #_"<KeyType, ValueType>"
    (§ field #_"ThreadLocal<HashMap<KeyType, ValueType>>" :temp-map)
    (§ field #_"ThreadLocal<HashSet<KeyType>>" :temp-set-removed)
    #_private
    (§ field- #_"ThreadLocal<Boolean>" :in-transaction)

    (§ field #_"HashMap<KeyType, ValueType>" :map)

    #_public
    (§ constructor TransactionalHashMap []
        (§ assoc this :temp-map (ThreadLocal. #_"<>"))
        (§ assoc this :temp-set-removed (ThreadLocal. #_"<>"))
        (§ assoc this :in-transaction (ThreadLocal. #_"<>"))
        (§ assoc this :map (HashMap. #_"<>"))
        this
    )

    #_public
    (§ method #_"void" beginDatabaseBatchWrite []
        (.. (:in-transaction this) (set true))
        nil
    )

    #_public
    (§ method #_"void" commitDatabaseBatchWrite []
        (when (some? (.. (:temp-set-removed this) (get)))
            (doseq [#_"KeyType" key (.. (:temp-set-removed this) (get))]
                (.. (:map this) (remove key))
            )
        )
        (when (some? (.. (:temp-map this) (get)))
            (doseq [#_"Map.Entry<KeyType, ValueType>" entry (.. (:temp-map this) (get) (entrySet))]
                (.. (:map this) (put (.. entry (getKey)), (.. entry (getValue))))
            )
        )
        (.. this (abortDatabaseBatchWrite))
        nil
    )

    #_public
    (§ method #_"void" abortDatabaseBatchWrite []
        (.. (:in-transaction this) (set false))
        (.. (:temp-set-removed this) (remove))
        (.. (:temp-map this) (remove))
        nil
    )

    #_nilable
    #_public
    (§ method #_"ValueType" get [#_"KeyType" key]
        (when (.. Boolean/TRUE (equals (.. (:in-transaction this) (get))))
            (when (some? (.. (:temp-map this) (get)))
                (let [#_"ValueType" value (.. (:temp-map this) (get) (get key))]
                    (when (some? value)
                        (§ return value)
                    )
                )
            )
            (when (and (some? (.. (:temp-set-removed this) (get))) (.. (:temp-set-removed this) (get) (contains key)))
                (§ return nil)
            )
        )
        (.. (:map this) (get key))
    )

    #_public
    (§ method #_"List<ValueType>" values []
        (let [#_"List<ValueType>" __valueTypes (ArrayList. #_"<>")]
            (doseq [#_"KeyType" __keyType (.. (:map this) (keySet))]
                (.. __valueTypes (add (.. this (get __keyType))))
            )
            __valueTypes
        )
    )

    #_public
    (§ method #_"void" put [#_"KeyType" key, #_"ValueType" value]
        (cond (.. Boolean/TRUE (equals (.. (:in-transaction this) (get))))
            (do
                (when (some? (.. (:temp-set-removed this) (get)))
                    (.. (:temp-set-removed this) (get) (remove key))
                )
                (when (nil? (.. (:temp-map this) (get)))
                    (.. (:temp-map this) (set (HashMap. #_"<KeyType, ValueType>")))
                )
                (.. (:temp-map this) (get) (put key, value))
            )
            :else
            (do
                (.. (:map this) (put key, value))
            )
        )
        nil
    )

    #_nilable
    #_public
    (§ method #_"ValueType" remove [#_"KeyType" key]
        (when' (.. Boolean/TRUE (equals (.. (:in-transaction this) (get)))) => (.. (:map this) (remove key))
            (let [#_"ValueType" __retVal (.. (:map this) (get key))]
                (when (some? __retVal)
                    (when (nil? (.. (:temp-set-removed this) (get)))
                        (.. (:temp-set-removed this) (set (HashSet. #_"<KeyType>")))
                    )
                    (.. (:temp-set-removed this) (get) (add key))
                )
                (when (some? (.. (:temp-map this) (get)))
                    (let [#_"ValueType" __tempVal (.. (:temp-map this) (get) (remove key))]
                        (when (some? __tempVal)
                            (§ return __tempVal)
                        )
                    )
                )
                __retVal
            )
        )
    )
)

;;;
 ; A Map with multiple key types that is DB per-thread-transaction-aware.
 ; However, this class is not thread-safe.
 ;
 ; @param <UniqueKeyType> Is a key that must be unique per object.
 ; @param <MultiKeyType> Is a key that can have multiple values.
 ;;
(§ class TransactionalMultiKeyHashMap #_"<UniqueKeyType, MultiKeyType, ValueType>"
    (§ field #_"TransactionalHashMap<UniqueKeyType, ValueType>" :map-values)
    (§ field #_"HashMap<MultiKeyType, Set<UniqueKeyType>>" :map-keys)

    #_public
    (§ constructor TransactionalMultiKeyHashMap []
        (§ assoc this :map-values (TransactionalHashMap. #_"<>"))
        (§ assoc this :map-keys (HashMap. #_"<>"))
        this
    )

    #_public
    (§ method #_"void" beginTransaction []
        (.. (:map-values this) (beginDatabaseBatchWrite))
        nil
    )

    #_public
    (§ method #_"void" commitTransaction []
        (.. (:map-values this) (commitDatabaseBatchWrite))
        nil
    )

    #_public
    (§ method #_"void" abortTransaction []
        (.. (:map-values this) (abortDatabaseBatchWrite))
        nil
    )

    #_nilable
    #_public
    (§ method #_"ValueType" get [#_"UniqueKeyType" key]
        (.. (:map-values this) (get key))
    )

    #_public
    (§ method #_"void" put [#_"UniqueKeyType" __uniqueKey, #_"MultiKeyType" __multiKey, #_"ValueType" value]
        (.. (:map-values this) (put __uniqueKey, value))
        (let [#_"Set<UniqueKeyType>" set (.. (:map-keys this) (get __multiKey))]
            (cond (nil? set)
                (do
                    (§ ass set (HashSet. #_"<>"))
                    (.. set (add __uniqueKey))
                    (.. (:map-keys this) (put __multiKey, set))
                )
                :else
                (do
                    (.. set (add __uniqueKey))
                )
            )
        )
        nil
    )

    #_nilable
    #_public
    (§ method #_"ValueType" removeByUniqueKey [#_"UniqueKeyType" key]
        (.. (:map-values this) (remove key))
    )

    #_public
    (§ method #_"void" removeByMultiKey [#_"MultiKeyType" key]
        (let [#_"Set<UniqueKeyType>" set (.. (:map-keys this) (remove key))]
            (when (some? set)
                (doseq [#_"UniqueKeyType" __uniqueKey set]
                    (.. this (removeByUniqueKey __uniqueKey))
                )
            )
        )
        nil
    )
)

;;;
 ; Keeps {@link StoredBlock}s, {@link StoredUndoableBlock}s and {@link UTXO}s in memory.
 ;;
#_public
(§ class MemoryFullPrunedBlockStore (§ implements FullPrunedBlockStore)
    #_protected
    #_static
    (§ class StoredBlockAndWasUndoableFlag
        #_public
        (§ field #_"StoredBlock" :block)
        #_public
        (§ field #_"boolean" :was-undoable)
        #_public
        (§ constructor StoredBlockAndWasUndoableFlag [#_"StoredBlock" block, #_"boolean" __wasUndoable]
            (§ assoc this :block block)
            (§ assoc this :was-undoable __wasUndoable)
            this
        )
    )
    #_private
    (§ field- #_"TransactionalHashMap<Sha256Hash, StoredBlockAndWasUndoableFlag>" :block-map)
    #_private
    (§ field- #_"TransactionalMultiKeyHashMap<Sha256Hash, Integer, StoredUndoableBlock>" :full-block-map)
    ;; TODO: Use something more suited to remove-heavy use?
    #_private
    (§ field- #_"TransactionalHashMap<StoredTransactionOutPoint, UTXO>" :transaction-output-map)
    #_private
    (§ field- #_"StoredBlock" :chain-head)
    #_private
    (§ field- #_"StoredBlock" :verified-chain-head)
    #_private
    (§ field- #_"int" :full-store-depth)
    #_private
    (§ field- #_"NetworkParameters" :params)

    ;;;
     ; Set up the MemoryFullPrunedBlockStore.
     ;
     ; @param params The network parameters of this block store - used to get genesis block.
     ; @param fullStoreDepth The depth of blocks to keep FullStoredBlocks instead of StoredBlocks.
     ;;
    #_public
    (§ constructor MemoryFullPrunedBlockStore [#_"NetworkParameters" params, #_"int" __fullStoreDepth]
        (§ assoc this :block-map (TransactionalHashMap. #_"<>"))
        (§ assoc this :full-block-map (TransactionalMultiKeyHashMap. #_"<>"))
        (§ assoc this :transaction-output-map (TransactionalHashMap. #_"<>"))
        (§ assoc this :full-store-depth (if (< 0 __fullStoreDepth) __fullStoreDepth 1))
        ;; Insert the genesis block.
        (try
            (let [#_"StoredBlock" __storedGenesisHeader (StoredBlock. (.. (:genesis-block params) (cloneAsHeader)), (.. (:genesis-block params) (getWork)), 0)]
                ;; The coinbase in the genesis block is not spendable.
                (let [#_"List<Transaction>" __genesisTransactions (Lists/newLinkedList)
                      #_"StoredUndoableBlock" __storedGenesis (StoredUndoableBlock. (.. (:genesis-block params) (getHash)), __genesisTransactions)]
                    (.. this (put __storedGenesisHeader, __storedGenesis))
                    (.. this (setChainHead __storedGenesisHeader))
                    (.. this (setVerifiedChainHead __storedGenesisHeader))
                    (§ assoc this :params params)
                )
            )
            (catch BlockStoreException e
                (throw (RuntimeException. e)) ;; Cannot happen.
            )
            (catch VerificationException e
                (throw (RuntimeException. e)) ;; Cannot happen.
            )
        )
        this
    )

    #_override
    #_public
    #_synchronized
    #_throws #_[ "BlockStoreException" ]
    (§ method #_"void" put [#_"StoredBlock" block]
        (ensure some? (:block-map this), "MemoryFullPrunedBlockStore is closed")
        (let [#_"Sha256Hash" hash (.. block (getHeader) (getHash))]
            (.. (:block-map this) (put hash, (StoredBlockAndWasUndoableFlag. block, false)))
        )
        nil
    )

    #_override
    #_public
    #_synchronized
    #_throws #_[ "BlockStoreException" ]
    (§ method #_"void" put [#_"StoredBlock" __storedBlock, #_"StoredUndoableBlock" __undoableBlock]
        (ensure some? (:block-map this), "MemoryFullPrunedBlockStore is closed")
        (let [#_"Sha256Hash" hash (.. __storedBlock (getHeader) (getHash))]
            (.. (:full-block-map this) (put hash, (.. __storedBlock (getHeight)), __undoableBlock))
            (.. (:block-map this) (put hash, (StoredBlockAndWasUndoableFlag. __storedBlock, true)))
        )
        nil
    )

    #_override
    #_nilable
    #_public
    #_synchronized
    #_throws #_[ "BlockStoreException" ]
    (§ method #_"StoredBlock" get [#_"Sha256Hash" hash]
        (ensure some? (:block-map this), "MemoryFullPrunedBlockStore is closed")
        (let [#_"StoredBlockAndWasUndoableFlag" __storedBlock (.. (:block-map this) (get hash))]
            (when (some? __storedBlock) (:block __storedBlock))
        )
    )

    #_override
    #_nilable
    #_public
    #_synchronized
    #_throws #_[ "BlockStoreException" ]
    (§ method #_"StoredBlock" getOnceUndoableStoredBlock [#_"Sha256Hash" hash]
        (ensure some? (:block-map this), "MemoryFullPrunedBlockStore is closed")
        (let [#_"StoredBlockAndWasUndoableFlag" __storedBlock (.. (:block-map this) (get hash))]
            (when (and (some? __storedBlock) (:was-undoable __storedBlock)) (:block __storedBlock))
        )
    )

    #_override
    #_nilable
    #_public
    #_synchronized
    #_throws #_[ "BlockStoreException" ]
    (§ method #_"StoredUndoableBlock" getUndoBlock [#_"Sha256Hash" hash]
        (ensure some? (:full-block-map this), "MemoryFullPrunedBlockStore is closed")
        (.. (:full-block-map this) (get hash))
    )

    #_override
    #_public
    #_synchronized
    #_throws #_[ "BlockStoreException" ]
    (§ method #_"StoredBlock" getChainHead []
        (ensure some? (:block-map this), "MemoryFullPrunedBlockStore is closed")
        (:chain-head this)
    )

    #_override
    #_public
    #_synchronized
    #_throws #_[ "BlockStoreException" ]
    (§ method #_"void" setChainHead [#_"StoredBlock" __chainHead]
        (ensure some? (:block-map this), "MemoryFullPrunedBlockStore is closed")
        (§ assoc this :chain-head __chainHead)
        nil
    )

    #_override
    #_public
    #_synchronized
    #_throws #_[ "BlockStoreException" ]
    (§ method #_"StoredBlock" getVerifiedChainHead []
        (ensure some? (:block-map this), "MemoryFullPrunedBlockStore is closed")
        (:verified-chain-head this)
    )

    #_override
    #_public
    #_synchronized
    #_throws #_[ "BlockStoreException" ]
    (§ method #_"void" setVerifiedChainHead [#_"StoredBlock" __chainHead]
        (ensure some? (:block-map this), "MemoryFullPrunedBlockStore is closed")
        (§ assoc this :verified-chain-head __chainHead)
        (when (< (.. (:chain-head this) (getHeight)) (.. __chainHead (getHeight)))
            (.. this (setChainHead __chainHead))
        )
        ;; Potential leak here if not all blocks get setChainHead'd.
        ;; Though the FullPrunedBlockStore allows for this, the current AbstractBlockChain will not do it.
        (.. (:full-block-map this) (removeByMultiKey (- (.. __chainHead (getHeight)) (:full-store-depth this))))
        nil
    )

    #_override
    #_public
    (§ method #_"void" close []
        (§ assoc this :block-map nil)
        (§ assoc this :full-block-map nil)
        (§ assoc this :transaction-output-map nil)
        nil
    )

    #_override
    #_nilable
    #_public
    #_synchronized
    #_throws #_[ "BlockStoreException" ]
    (§ method #_"UTXO" getTransactionOutput [#_"Sha256Hash" hash, #_"long" index]
        (ensure some? (:transaction-output-map this), "MemoryFullPrunedBlockStore is closed")
        (.. (:transaction-output-map this) (get (StoredTransactionOutPoint. hash, index)))
    )

    #_override
    #_public
    #_synchronized
    #_throws #_[ "BlockStoreException" ]
    (§ method #_"void" addUnspentTransactionOutput [#_"UTXO" out]
        (ensure some? (:transaction-output-map this), "MemoryFullPrunedBlockStore is closed")
        (.. (:transaction-output-map this) (put (StoredTransactionOutPoint. out), out))
        nil
    )

    #_override
    #_public
    #_synchronized
    #_throws #_[ "BlockStoreException" ]
    (§ method #_"void" removeUnspentTransactionOutput [#_"UTXO" out]
        (ensure some? (:transaction-output-map this), "MemoryFullPrunedBlockStore is closed")
        (when (nil? (.. (:transaction-output-map this) (remove (StoredTransactionOutPoint. out))))
            (throw (BlockStoreException. "Tried to remove a UTXO from MemoryFullPrunedBlockStore that it didn't have!"))
        )
        nil
    )

    #_override
    #_public
    #_synchronized
    #_throws #_[ "BlockStoreException" ]
    (§ method #_"void" beginDatabaseBatchWrite []
        (.. (:block-map this) (beginDatabaseBatchWrite))
        (.. (:full-block-map this) (beginTransaction))
        (.. (:transaction-output-map this) (beginDatabaseBatchWrite))
        nil
    )

    #_override
    #_public
    #_synchronized
    #_throws #_[ "BlockStoreException" ]
    (§ method #_"void" commitDatabaseBatchWrite []
        (.. (:block-map this) (commitDatabaseBatchWrite))
        (.. (:full-block-map this) (commitTransaction))
        (.. (:transaction-output-map this) (commitDatabaseBatchWrite))
        nil
    )

    #_override
    #_public
    #_synchronized
    #_throws #_[ "BlockStoreException" ]
    (§ method #_"void" abortDatabaseBatchWrite []
        (.. (:block-map this) (abortDatabaseBatchWrite))
        (.. (:full-block-map this) (abortTransaction))
        (.. (:transaction-output-map this) (abortDatabaseBatchWrite))
        nil
    )

    #_override
    #_public
    #_synchronized
    #_throws #_[ "BlockStoreException" ]
    (§ method #_"boolean" hasUnspentOutputs [#_"Sha256Hash" hash, #_"int" n]
        (loop-when [#_"int" i 0] (< i n) => false
            (or (some? (.. this (getTransactionOutput hash, i))) (recur (inc i)))
        )
    )

    #_override
    #_public
    (§ method #_"NetworkParameters" getParams []
        (:params this)
    )
)

;;;
 ; An SPVBlockStore holds a limited number of block headers in a memory mapped ring buffer.  With such a store,
 ; you may not be able to process very deep re-orgs and could be disconnected from the chain (requiring a replay),
 ; but as they are virtually unheard of this is not a significant risk.
 ;;
#_public
(§ class SPVBlockStore (§ implements BlockStore)
    #_private
    #_static
    (def- #_"Logger" SPVBlockStore'log (LoggerFactory/getLogger SPVBlockStore))

    ;;; The default number of headers that will be stored in the ring buffer. ;;
    #_public
    #_static
    (def #_"int" SPVBlockStore'DEFAULT_CAPACITY 5000)
    #_public
    #_static
    (def #_"String" SPVBlockStore'HEADER_MAGIC "SPVB")

    #_protected
    #_volatile
    (§ field #_"MappedByteBuffer" :buffer)
    #_protected
    (§ field #_"int" :capacity)
    #_protected
    (§ field #_"NetworkParameters" :params)

    #_protected
    (§ field #_"ReentrantLock" :lock (Threading'lock "SPVBlockStore"))

    ;; The entire ring-buffer is mmapped and accessing it should be as fast as accessing regular memory once it's
    ;; faulted in.  Unfortunately, in theory practice and theory are the same.  In practice they aren't.
    ;;
    ;; MMapping a file in Java does not give us a byte[] as you may expect but rather a ByteBuffer, and whilst on
    ;; the OpenJDK/Oracle JVM calls into the get() methods are compiled down to inlined native code on Android each
    ;; get() call is actually a full-blown JNI method under the hood, meaning it's unbelievably slow.  The caches
    ;; below let us stay in the JIT-compiled Java world without expensive JNI transitions and make a 10x difference!
    #_protected
    (§ field #_"LinkedHashMap<Sha256Hash, StoredBlock>" :block-cache (LinkedHashMap. #_"<Sha256Hash, StoredBlock>"
        (§ anon
            #_override
            #_protected
            (§ method #_"boolean" removeEldestEntry [#_"Map.Entry<Sha256Hash, StoredBlock>" entry]
                (< 2050 (.. this (size))) ;; Slightly more than the difficulty transition period.
            )
        )))

    ;; Use a separate cache to track get() misses.  This is to efficiently handle the case of an unconnected block
    ;; during chain download.  Each new block will do a get() on the unconnected block so if we haven't seen it yet
    ;; we must efficiently respond.
    ;;
    ;; We don't care about the value in this cache.  It is always notFoundMarker.  Unfortunately LinkedHashSet does
    ;; not provide the removeEldestEntry control.
    #_private
    #_static
    (def- #_"Object" SPVBlockStore'NOT_FOUND_MARKER (Object.))
    #_protected
    (§ field #_"LinkedHashMap<Sha256Hash, Object>" :not-found-cache (LinkedHashMap. #_"<Sha256Hash, Object>"
        (§ anon
            #_override
            #_protected
            (§ method #_"boolean" removeEldestEntry [#_"Map.Entry<Sha256Hash, Object>" entry]
                (< 100 (.. this (size))) ;; This was chosen arbitrarily.
            )
        )))

    ;; Used to stop other applications/processes from opening the store.
    #_protected
    (§ field #_"FileLock" :file-lock)
    #_protected
    (§ field #_"RandomAccessFile" :random-access-file)

    ;;;
     ; Creates and initializes an SPV block store that can hold {@link #DEFAULT_CAPACITY} blocks.
     ; Will create the given file if it's missing.  This operation will block on disk.
     ;
     ; @param file File to use for the block store.
     ; @throws BlockStoreException if something goes wrong.
     ;;
    #_public
    #_throws #_[ "BlockStoreException" ]
    (§ constructor SPVBlockStore [#_"NetworkParameters" params, #_"File" file]
        (§ this params, file, SPVBlockStore'DEFAULT_CAPACITY)
        this
    )

    ;;;
     ; Creates and initializes an SPV block store that can hold a given amount of blocks.
     ; Will create the given file if it's missing.  This operation will block on disk.
     ;
     ; @param file File to use for the block store.
     ; @param capacity Custom capacity.
     ; @throws BlockStoreException if something goes wrong.
     ;;
    #_public
    #_throws #_[ "BlockStoreException" ]
    (§ constructor SPVBlockStore [#_"NetworkParameters" params, #_"File" file, #_"int" capacity]
        (ensure some? file)
        (§ assoc this :params (ensure some? params))
        (assert-argument (< 0 capacity))

        (§ assoc this :capacity capacity)
        (try
            (let [#_"boolean" exists (.. file (exists))]
                ;; Set up the backing file.
                (§ assoc this :random-access-file (RandomAccessFile. file, "rw"))
                (let [#_"long" __fileSize (SPVBlockStore'getFileSize capacity)]
                    (cond (not exists)
                        (do
                            (.. SPVBlockStore'log (info (str "Creating new SPV block chain file " file)))
                            (.. (:random-access-file this) (setLength __fileSize))
                        )
                        (not= (.. (:random-access-file this) (length)) __fileSize)
                        (do
                            (throw (BlockStoreException. (str "File size on disk does not match expected size: " (.. (:random-access-file this) (length)) " vs " __fileSize)))
                        )
                    )

                    (let [#_"FileChannel" channel (.. (:random-access-file this) (getChannel))]
                        (§ assoc this :file-lock (.. channel (tryLock)))
                        (when (nil? (:file-lock this))
                            (throw (ChainFileLockedException. "Store file is already locked by another process"))
                        )

                        ;; Map it into memory read/write.  The kernel will take care of flushing writes to disk at the most
                        ;; efficient times, which may mean that until the map is deallocated the data on disk is randomly
                        ;; inconsistent.  However the only process accessing it is us, via this mapping, so our own view will
                        ;; always be correct.  Once we establish the mmap the underlying file and channel can go away.  Note
                        ;; that the details of mmapping vary between platforms.
                        (§ assoc this :buffer (.. channel (map FileChannel.MapMode/READ_WRITE, 0, __fileSize)))

                        ;; Check or initialize the header bytes to ensure we don't try to open some random file.
                        (let [#_"byte[]" header]
                            (cond exists
                                (do
                                    (§ ass header (byte-array 4))
                                    (.. (:buffer this) (get header))
                                    (when (not (.. (String. header, Charsets/US_ASCII) (equals SPVBlockStore'HEADER_MAGIC)))
                                        (throw (BlockStoreException. (str "Header bytes do not equal " SPVBlockStore'HEADER_MAGIC)))
                                    )
                                )
                                :else
                                (do
                                    (.. this (initNewStore params))
                                )
                            )
                        )
                    )
                )
            )
            (catch Exception e1
                (try
                    (when (some? (:random-access-file this))
                        (.. (:random-access-file this) (close))
                    )
                    (catch IOException e2
                        (throw (BlockStoreException. e2))
                    )
                )
                (throw (BlockStoreException. e1))
            )
        )
        this
    )

    #_private
    #_throws #_[ "Exception" ]
    (§ method- #_"void" initNewStore [#_"NetworkParameters" params]
        (let [#_"byte[]" header (.. SPVBlockStore'HEADER_MAGIC (getBytes "US-ASCII"))]
            (.. (:buffer this) (put header))
            ;; Insert the genesis block.
            (.. (:lock this) (lock))
            (try
                (.. this (setRingCursor (:buffer this), SPVBlockStore'FILE_PROLOGUE_BYTES))
                (finally
                    (.. (:lock this) (unlock))
                )
            )
            (let [#_"Block" genesis (.. (:genesis-block params) (cloneAsHeader))
                  #_"StoredBlock" __storedGenesis (StoredBlock. genesis, (.. genesis (getWork)), 0)]
                (.. this (put __storedGenesis))
                (.. this (setChainHead __storedGenesis))
            )
        )
        nil
    )

    ;;; Returns the size in bytes of the file that is used to store the chain with the current parameters. ;;
    #_public
    #_static
    (§ defn #_"int" SPVBlockStore'getFileSize [#_"int" capacity]
        (+ (* SPVBlockStore'RECORD_SIZE capacity) SPVBlockStore'FILE_PROLOGUE_BYTES) ;; extra kilobyte for stuff
    )

    #_override
    #_public
    #_throws #_[ "BlockStoreException" ]
    (§ method #_"void" put [#_"StoredBlock" block]
        (let [#_"MappedByteBuffer" buffer (:buffer this)]
            (when (nil? buffer)
                (throw (BlockStoreException. "Store closed"))
            )

            (.. (:lock this) (lock))
            (try
                (let [#_"int" cursor (.. this (getRingCursor buffer))]
                    ;; Wrapped around.
                    (when (= cursor (SPVBlockStore'getFileSize (:capacity this)))
                        (§ ass cursor SPVBlockStore'FILE_PROLOGUE_BYTES)
                    )
                    (.. buffer (position cursor))
                    (let [#_"Sha256Hash" hash (.. block (getHeader) (getHash))]
                        (.. (:not-found-cache this) (remove hash))
                        (.. buffer (put (.. hash (getBytes))))
                        (.. block (serializeCompact buffer))
                        (.. this (setRingCursor buffer, (.. buffer (position))))
                        (.. (:block-cache this) (put hash, block))
                    )
                )
                (finally
                    (.. (:lock this) (unlock))
                )
            )
        )
        nil
    )

    #_override
    #_nilable
    #_public
    #_throws #_[ "BlockStoreException" ]
    (§ method #_"StoredBlock" get [#_"Sha256Hash" hash]
        (let [#_"MappedByteBuffer" buffer (:buffer this)]
            (when (nil? buffer)
                (throw (BlockStoreException. "Store closed"))
            )

            (.. (:lock this) (lock))
            (try
                (let [#_"StoredBlock" __cacheHit (.. (:block-cache this) (get hash))]
                    (when (some? __cacheHit)
                        (§ return __cacheHit)
                    )
                    (when (some? (.. (:not-found-cache this) (get hash)))
                        (§ return nil)
                    )

                    ;; Starting from the current tip of the ring work backwards until we have either
                    ;; found the block or wrapped around.
                    (let [#_"int" i0 (.. this (getRingCursor buffer))
                          #_"int" i i0
                          #_"int" __fileSize (SPVBlockStore'getFileSize (:capacity this))
                          #_"byte[]" __targetHashBytes (.. hash (getBytes))
                          #_"byte[]" scratch (byte-array 32)]
                        (loop []
                            (§ ass i (- i SPVBlockStore'RECORD_SIZE))
                            ;; We hit the start, so wrap around.
                            (when (< i SPVBlockStore'FILE_PROLOGUE_BYTES)
                                (§ ass i (- __fileSize SPVBlockStore'RECORD_SIZE))
                            )
                            ;; Cursor is now at the start of the next record to check, so read the hash and compare it.
                            (.. buffer (position i))
                            (.. buffer (get scratch))
                            (when (Arrays/equals scratch, __targetHashBytes)
                                ;; Found the target.
                                (let [#_"StoredBlock" __storedBlock (StoredBlock'deserializeCompact (:params this), buffer)]
                                    (.. (:block-cache this) (put hash, __storedBlock))
                                    (§ return __storedBlock)
                                )
                            )
                            (§ recur-if (not= i i0))
                        )

                        ;; Not found.
                        (.. (:not-found-cache this) (put hash, SPVBlockStore'NOT_FOUND_MARKER))
                        (§ return nil)
                    )
                )
                (catch ProtocolException e
                    (throw (RuntimeException. e)) ;; Cannot happen.
                )
                (finally
                    (.. (:lock this) (unlock))
                )
            )
        )
    )

    #_protected
    (§ field #_"StoredBlock" :last-chain-head)

    #_override
    #_public
    #_throws #_[ "BlockStoreException" ]
    (§ method #_"StoredBlock" getChainHead []
        (let [#_"MappedByteBuffer" buffer (:buffer this)]
            (when (nil? buffer)
                (throw (BlockStoreException. "Store closed"))
            )

            (.. (:lock this) (lock))
            (try
                (when (nil? (:last-chain-head this))
                    (let [#_"byte[]" __headHash (byte-array 32)]
                        (.. buffer (position 8))
                        (.. buffer (get __headHash))
                        (let [#_"Sha256Hash" hash (Sha256Hash'wrap __headHash)
                              #_"StoredBlock" block (.. this (get hash))]
                            (when (nil? block)
                                (throw (BlockStoreException. (str "Corrupted block store: could not find chain head: " hash)))
                            )

                            (§ assoc this :last-chain-head block)
                        )
                    )
                )
                (:last-chain-head this)
                (finally
                    (.. (:lock this) (unlock))
                )
            )
        )
    )

    #_override
    #_public
    #_throws #_[ "BlockStoreException" ]
    (§ method #_"void" setChainHead [#_"StoredBlock" __chainHead]
        (let [#_"MappedByteBuffer" buffer (:buffer this)]
            (when (nil? buffer)
                (throw (BlockStoreException. "Store closed"))
            )

            (.. (:lock this) (lock))
            (try
                (§ assoc this :last-chain-head __chainHead)
                (let [#_"byte[]" __headHash (.. __chainHead (getHeader) (getHash) (getBytes))]
                    (.. buffer (position 8))
                    (.. buffer (put __headHash))
                )
                (finally
                    (.. (:lock this) (unlock))
                )
            )
        )
        nil
    )

    #_override
    #_public
    #_throws #_[ "BlockStoreException" ]
    (§ method #_"void" close []
        (try
            (.. (:buffer this) (force))
            (§ assoc this :buffer nil) ;; Allow it to be GCd and the underlying file mapping to go away.
            (.. (:random-access-file this) (close))
            (catch IOException e
                (throw (BlockStoreException. e))
            )
        )
        nil
    )

    #_override
    #_public
    (§ method #_"NetworkParameters" getParams []
        (:params this)
    )

    #_protected
    #_static
    (def #_"int" SPVBlockStore'RECORD_SIZE (+ 32 StoredBlock'COMPACT_SERIALIZED_SIZE)) ;; hash

    ;; File format:
    ;;   4 header bytes = "SPVB"
    ;;   4 cursor bytes, which indicate the offset from the first kb where the next block header should be written
    ;;   32 bytes for the hash of the chain head
    ;;
    ;; For each header (128 bytes)
    ;;   32 bytes hash of the header
    ;;   12 bytes of chain work
    ;;    4 bytes of height
    ;;   80 bytes of block header data
    #_protected
    #_static
    (def #_"int" SPVBlockStore'FILE_PROLOGUE_BYTES 1024)

    ;;; Returns the offset from the file start where the latest block should be written (end of prev block). ;;
    #_private
    (§ method- #_"int" getRingCursor [#_"ByteBuffer" buffer]
        (let [#_"int" c (.. buffer (getInt 4))]
            (assert-state (<= SPVBlockStore'FILE_PROLOGUE_BYTES c), "Integer overflow")
            c
        )
    )

    #_private
    (§ method- #_"void" setRingCursor [#_"ByteBuffer" buffer, #_"int" __newCursor]
        (assert-argument (<= 0 __newCursor))
        (.. buffer (putInt 4, __newCursor))
        nil
    )
)

#_(ns org.bitcoinj.utils
    (:import [com.google.common.base Objects]
             [com.google.common.math LongMath]
             [com.google.common.primitives Longs]
             [com.google.common.util.concurrent CycleDetectingLockFactory ListeningExecutorService MoreExecutors Uninterruptibles]
             [java.math BigDecimal BigInteger RoundingMode]
             [java.text DecimalFormatSymbols]
             [java.util ArrayList Arrays List Locale Stack]
             [java.util.concurrent Executor Executors ThreadFactory]
             [java.util.concurrent.locks ReentrantLock]
             [org.slf4j LoggerFactory Logger]
    )
)

;;;
 ; A {@link java.util.concurrent.ThreadFactory} that propagates a {@link Context}
 ; from the creating thread into the new thread.  This factory creates daemon threads.
 ;;
#_public
(§ class ContextPropagatingThreadFactory (§ implements ThreadFactory)
    #_private
    #_static
    (def- #_"Logger" ContextPropagatingThreadFactory'log (LoggerFactory/getLogger ContextPropagatingThreadFactory))

    #_private
    (§ field- #_"String" :name)
    #_private
    (§ field- #_"int" :priority)

    #_public
    (§ constructor ContextPropagatingThreadFactory [#_"String" name, #_"int" priority]
        (§ assoc this :name name)
        (§ assoc this :priority priority)
        this
    )

    #_public
    (§ constructor ContextPropagatingThreadFactory [#_"String" name]
        (§ this name, Thread/NORM_PRIORITY)
        this
    )

    #_override
    #_public
    (§ method #_"Thread" newThread [#_"Runnable" r]
        (let [#_"Context" context (Context'get)]
            (let [#_"Thread" thread (Thread. (Runnable.)
                (§ anon
                    #_override
                    #_public
                    (§ method #_"void" run []
                        (try
                            (Context'propagate context)
                            (.. r (run))
                            (catch Exception e
                                (.. ContextPropagatingThreadFactory'log (error "Exception in thread", e))
                                (Throwables/propagate e)
                            )
                        )
                        nil
                    )
                ), (:name this))]
                (.. thread (setPriority (:priority this)))
                (.. thread (setDaemon true))
                (let [#_"Thread.UncaughtExceptionHandler" handler Threading'UNCAUGHT_EXCEPTION_HANDLER]
                    (when (some? handler)
                        (.. thread (setUncaughtExceptionHandler handler))
                    )
                    thread
                )
            )
        )
    )
)

;;; Thread factory whose threads are marked as daemon and won't prevent process exit. ;;
#_public
(§ class DaemonThreadFactory (§ implements ThreadFactory)
    #_nilable
    #_private
    (§ field- #_"String" :name)

    #_public
    (§ constructor DaemonThreadFactory [#_nilable #_"String" name]
        (§ assoc this :name name)
        this
    )

    #_public
    (§ constructor DaemonThreadFactory []
        (§ this nil)
        this
    )

    #_override
    #_public
    (§ method #_"Thread" newThread [#_non-nil #_"Runnable" runnable]
        (let [#_"Thread" thread (.. (Executors/defaultThreadFactory) (newThread runnable))]
            (.. thread (setDaemon true))
            (when (some? (:name this))
                (.. thread (setName (:name this)))
            )
            thread
        )
    )
)

;;;
 ; An exchange rate is expressed as a ratio of a {@link Coin} and a {@link Fiat} amount.
 ;;
#_public
(§ class ExchangeRate
    #_public
    (§ field #_"Coin" :coin)
    #_public
    (§ field #_"Fiat" :fiat)

    ;;; Construct exchange rate.  This amount of coin is worth that amount of fiat. ;;
    #_public
    (§ constructor ExchangeRate [#_"Coin" coin, #_"Fiat" fiat]
        (assert-argument (.. coin (isPositive)))
        (assert-argument (.. fiat (isPositive)))
        (assert-argument (some? (:currency-code fiat)), "currency code required")

        (§ assoc this :coin coin)
        (§ assoc this :fiat fiat)
        this
    )

    ;;; Construct exchange rate.  One coin is worth this amount of fiat. ;;
    #_public
    (§ constructor ExchangeRate [#_"Fiat" fiat]
        (§ this Coin'COIN, fiat)
        this
    )

    ;;;
     ; Convert a coin amount to a fiat amount using this exchange rate.
     ;
     ; @throws ArithmeticException if the converted fiat amount is too high or too low.
     ;;
    #_public
    (§ method #_"Fiat" coinToFiat [#_"Coin" __convertCoin]
        ;; Use BigInteger because it's much easier to maintain full precision without overflowing.
        (let [#_"BigInteger" converted (.. (BigInteger/valueOf (:value __convertCoin)) (multiply (BigInteger/valueOf (-> this :fiat :value))) (divide (BigInteger/valueOf (-> this :coin :value))))]

            (when (or (< 0 (.. converted (compareTo (BigInteger/valueOf Long/MAX_VALUE)))) (< (.. converted (compareTo (BigInteger/valueOf Long/MIN_VALUE))) 0))
                (throw (ArithmeticException. "Overflow"))
            )

            (Fiat'valueOf (-> this :fiat :currency-code), (.. converted (longValue)))
        )
    )

    ;;;
     ; Convert a fiat amount to a coin amount using this exchange rate.
     ;
     ; @throws ArithmeticException if the converted coin amount is too high or too low.
     ;;
    #_public
    (§ method #_"Coin" fiatToCoin [#_"Fiat" __convertFiat]
        (assert-argument (.. (:currency-code __convertFiat) (equals (-> this :fiat :currency-code))), "Currency mismatch: %s vs %s", (:currency-code __convertFiat), (-> this :fiat :currency-code))

        ;; Use BigInteger because it's much easier to maintain full precision without overflowing.
        (let [#_"BigInteger" converted (.. (BigInteger/valueOf (:value __convertFiat)) (multiply (BigInteger/valueOf (-> this :coin :value))) (divide (BigInteger/valueOf (-> this :fiat :value))))]

            (when (or (< 0 (.. converted (compareTo (BigInteger/valueOf Long/MAX_VALUE)))) (< (.. converted (compareTo (BigInteger/valueOf Long/MIN_VALUE))) 0))
                (throw (ArithmeticException. "Overflow"))
            )

            (try
                (Coin'valueOf (.. converted (longValue)))
                (catch IllegalArgumentException e
                    (throw (ArithmeticException. (str "Overflow: " (.. e (getMessage)))))
                )
            )
        )
    )

    #_override
    #_public
    (§ method #_"boolean" equals [#_"Object" o]
        (cond
            (= this o) true
            (or (nil? o) (not= (getClass) (.. o (getClass)))) false
            :else (let [#_"ExchangeRate" other (cast ExchangeRate o)]
                (and (Objects/equal (:coin this), (:coin other)) (Objects/equal (:fiat this), (:fiat other)))
            )
        )
    )

    #_override
    #_public
    (§ method #_"int" hashCode []
        (Objects/hashCode (:coin this), (:fiat this))
    )
)

;;;
 ; Tracks successes and failures and calculates a time to retry the operation.
 ;
 ; The retries are exponentially backed off, up to a maximum interval.  On success the back off interval is reset.
 ;;
#_public
(§ class ExponentialBackoff (§ implements Comparable #_"<ExponentialBackoff>")
    #_public
    #_static
    (def #_"int" ExponentialBackoff'DEFAULT_INITIAL_MILLIS 100)
    #_public
    #_static
    (def #_"float" ExponentialBackoff'DEFAULT_MULTIPLIER 1.1)
    #_public
    #_static
    (def #_"int" ExponentialBackoff'DEFAULT_MAXIMUM_MILLIS (* 30 1000))

    #_private
    (§ field- #_"float" :backoff)
    #_private
    (§ field- #_"long" :retry-time)
    #_private
    (§ field- #_"BackoffParams" :params)

    ;;;
     ; Parameters to configure a particular kind of exponential backoff.
     ;;
    #_public
    #_static
    (§ class BackoffParams
        #_private
        (§ field- #_"float" :initial)
        #_private
        (§ field- #_"float" :multiplier)
        #_private
        (§ field- #_"float" :maximum)

        ;;;
         ; @param initialMillis The initial interval to wait, in milliseconds.
         ; @param multiplier The multiplier to apply on each failure.
         ; @param maximumMillis The maximum interval to wait, in milliseconds.
         ;;
        #_public
        (§ constructor BackoffParams [#_"long" __initialMillis, #_"float" multiplier, #_"long" __maximumMillis]
            (assert-argument (< 1.0 multiplier), "multiplier must be greater than 1.0")
            (assert-argument (<= __initialMillis __maximumMillis), "maximum must not be less than initial")

            (§ assoc this :initial __initialMillis)
            (§ assoc this :multiplier multiplier)
            (§ assoc this :maximum __maximumMillis)
            this
        )

        ;;;
         ; Construct params with default values.
         ;;
        #_public
        (§ constructor BackoffParams []
            (§ assoc this :initial ExponentialBackoff'DEFAULT_INITIAL_MILLIS)
            (§ assoc this :multiplier ExponentialBackoff'DEFAULT_MULTIPLIER)
            (§ assoc this :maximum ExponentialBackoff'DEFAULT_MAXIMUM_MILLIS)
            this
        )
    )

    #_public
    (§ constructor ExponentialBackoff [#_"BackoffParams" params]
        (§ assoc this :params params)
        (.. this (trackSuccess))
        this
    )

    ;;; Track a success - reset back off interval to the initial value. ;;
    #_public
    (§ method #_"void" trackSuccess []
        (§ assoc this :backoff (-> this :params :initial))
        (§ assoc this :retry-time (Utils'currentTimeMillis))
        nil
    )

    ;;; Track a failure - multiply the back off interval by the multiplier. ;;
    #_public
    (§ method #_"void" trackFailure []
        (§ assoc this :retry-time (+ (Utils'currentTimeMillis) (long (:backoff this))))
        (§ assoc this :backoff (min (* (:backoff this) (-> this :params :multiplier)), (-> this :params :maximum)))
        nil
    )

    ;;; Get the next time to retry, in milliseconds since the epoch. ;;
    #_public
    (§ method #_"long" getRetryTime []
        (:retry-time this)
    )

    #_override
    #_public
    (§ method #_"int" compareTo [#_"ExponentialBackoff" other]
        ;; Note that in this implementation compareTo() is not consistent with equals().
        (Longs/compare (:retry-time this), (:retry-time other))
    )

    #_override
    #_public
    (§ method #_"String" toString []
        (str "ExponentialBackoff retry=" (:retry-time this) " backoff=" (:backoff this))
    )
)

;;;
 ; Represents a monetary fiat value.  It was decided to not fold this into {@link Coin}
 ; because of type safety.  Fiat values always come with an attached currency code.
 ;
 ; This class is immutable.
 ;;
#_public
(§ class Fiat (§ implements Monetary, Comparable #_"<Fiat>")
    ;;;
     ; The absolute value of exponent of the value of a "smallest unit" in scientific notation.
     ; We picked 4 rather than 2, because in financial applications it's common to use sub-cent precision.
     ;;
    #_public
    #_static
    (def #_"int" Fiat'SMALLEST_UNIT_EXPONENT 4)

    ;;;
     ; The number of smallest units of this monetary value.
     ;;
    #_public
    (§ field #_"long" :value)
    #_public
    (§ field #_"String" :currency-code)

    #_private
    (§ constructor- Fiat [#_"String" code, #_"long" value]
        (§ assoc this :value value)
        (§ assoc this :currency-code code)
        this
    )

    #_public
    #_static
    (§ defn #_"Fiat" Fiat'valueOf [#_"String" code, #_"long" value]
        (Fiat. code, value)
    )

    #_override
    #_public
    (§ method #_"int" smallestUnitExponent []
        Fiat'SMALLEST_UNIT_EXPONENT
    )

    ;;;
     ; Returns the number of "smallest units" of this monetary value.
     ;;
    #_override
    #_public
    (§ method #_"long" getValue []
        (:value this)
    )

    #_public
    (§ method #_"String" getCurrencyCode []
        (:currency-code this)
    )

    ;;;
     ; Parses an amount expressed in the way humans are used to.
     ;
     ; This takes string in a format understood by {@link BigDecimal#BigDecimal(String)},
     ; for example "0", "1", "0.10", "1.23E3", "1234.5E-5".
     ;
     ; @throws IllegalArgumentException if you try to specify more than 4 digits after the comma, or a value out of range.
     ;;
    #_public
    #_static
    (§ defn #_"Fiat" Fiat'parseFiat [#_"String" code, #_"String" s]
        (try
            (let [#_"long" val (.. (BigDecimal. s) (movePointRight Fiat'SMALLEST_UNIT_EXPONENT) (longValueExact))]
                (Fiat'valueOf code, val)
            )
            (catch ArithmeticException e
                (throw (IllegalArgumentException. e))
            )
        )
    )

    ;;;
     ; Parses an amount expressed in the way humans are used to.  The amount is cut to 4 digits after the comma.
     ;
     ; This takes string in a format understood by {@link BigDecimal#BigDecimal(String)},
     ; for example "0", "1", "0.10", "1.23E3", "1234.5E-5".
     ;
     ; @throws IllegalArgumentException if you try to specify a value out of range.
     ;;
    #_public
    #_static
    (§ defn #_"Fiat" Fiat'parseFiatInexact [#_"String" code, #_"String" s]
        (try
            (let [#_"long" val (.. (BigDecimal. s) (movePointRight Fiat'SMALLEST_UNIT_EXPONENT) (longValue))]
                (Fiat'valueOf code, val)
            )
            (catch ArithmeticException e
                (throw (IllegalArgumentException. e))
            )
        )
    )

    #_public
    (§ method #_"Fiat" add [#_"Fiat" value]
        (assert-argument (.. (:currency-code value) (equals (:currency-code this))))

        (Fiat. (:currency-code this), (LongMath/checkedAdd (:value this), (:value value)))
    )

    #_public
    (§ method #_"Fiat" subtract [#_"Fiat" value]
        (assert-argument (.. (:currency-code value) (equals (:currency-code this))))

        (Fiat. (:currency-code this), (LongMath/checkedSubtract (:value this), (:value value)))
    )

    #_public
    (§ method #_"Fiat" multiply [#_"long" factor]
        (Fiat. (:currency-code this), (LongMath/checkedMultiply (:value this), factor))
    )

    #_public
    (§ method #_"Fiat" divide [#_"long" divisor]
        (Fiat. (:currency-code this), (quot (:value this) divisor))
    )

    #_public
    (§ method #_"Fiat[]" divideAndRemainder [#_"long" divisor]
        (into-array Fiat [ (Fiat. (:currency-code this), (quot (:value this) divisor)), (Fiat. (:currency-code this), (rem (:value this) divisor)) ])
    )

    #_public
    (§ method #_"long" divide [#_"Fiat" divisor]
        (assert-argument (.. (:currency-code divisor) (equals (:currency-code this))))

        (quot (:value this) (:value divisor))
    )

    ;;;
     ; Returns true if and only if this instance represents a monetary value greater than zero, otherwise false.
     ;;
    #_public
    (§ method #_"boolean" isPositive []
        (= (.. this (signum)) 1)
    )

    ;;;
     ; Returns true if and only if this instance represents a monetary value less than zero, otherwise false.
     ;;
    #_public
    (§ method #_"boolean" isNegative []
        (= (.. this (signum)) -1)
    )

    ;;;
     ; Returns true if and only if this instance represents zero monetary value, otherwise false.
     ;;
    #_public
    (§ method #_"boolean" isZero []
        (= (.. this (signum)) 0)
    )

    ;;;
     ; Returns true if the monetary value represented by this instance is greater than that of the given other Fiat,
     ; otherwise false.
     ;;
    #_public
    (§ method #_"boolean" isGreaterThan [#_"Fiat" other]
        (> (.. this (compareTo other)) 0)
    )

    ;;;
     ; Returns true if the monetary value represented by this instance is less than that of the given other Fiat,
     ; otherwise false.
     ;;
    #_public
    (§ method #_"boolean" isLessThan [#_"Fiat" other]
        (< (.. this (compareTo other)) 0)
    )

    #_override
    #_public
    (§ method #_"int" signum []
        (if (= (:value this) 0) 0 (if (< (:value this) 0) -1 1))
    )

    #_public
    (§ method #_"Fiat" negate []
        (Fiat. (:currency-code this), (- (:value this)))
    )

    ;;;
     ; Returns the number of "smallest units" of this monetary value.
     ; It's deprecated in favour of accessing {@link #value} directly.
     ;;
    #_public
    (§ method #_"long" longValue []
        (:value this)
    )

    #_private
    #_static
    (def- #_"MonetaryFormat" Fiat'FRIENDLY_FORMAT (.. MonetaryFormat'FIAT (postfixCode)))

    ;;;
     ; Returns the value as a 0.12 type string.
     ; More digits after the decimal place will be used if necessary, but two will always be present.
     ;;
    #_public
    (§ method #_"String" toFriendlyString []
        (.. Fiat'FRIENDLY_FORMAT (code 0, (:currency-code this)) (format this) (toString))
    )

    #_private
    #_static
    (def- #_"MonetaryFormat" Fiat'PLAIN_FORMAT (.. MonetaryFormat'FIAT (minDecimals 0) (repeatOptionalDecimals 1, 4) (noCode)))

    ;;;
     ; Returns the value as a plain string.  The result is unformatted with no trailing zeroes.
     ; For instance, a value of 150000 "smallest units" gives an output string of "0.0015".
     ;;
    #_public
    (§ method #_"String" toPlainString []
        (.. Fiat'PLAIN_FORMAT (format this) (toString))
    )

    #_override
    #_public
    (§ method #_"String" toString []
        (Long/toString (:value this))
    )

    #_override
    #_public
    (§ method #_"boolean" equals [#_"Object" o]
        (cond
            (= o this) true
            (or (nil? o) (not= (.. o (getClass)) (getClass))) false
            :else (let [#_"Fiat" other (cast Fiat o)]
                (and (= (:value this) (:value other)) (.. (:currency-code this) (equals (:currency-code other))))
            )
        )
    )

    #_override
    #_public
    (§ method #_"int" hashCode []
        (Objects/hashCode (:value this), (:currency-code this))
    )

    #_override
    #_public
    (§ method #_"int" compareTo [#_"Fiat" other]
        (if (.. (:currency-code this) (equals (:currency-code other))) (Longs/compare (:value this), (:value other)) (.. (:currency-code this) (compareTo (:currency-code other))))
    )
)

;;;
 ; A simple wrapper around a listener and an executor, with some utility methods.
 ;;
#_public
(§ class ListenerRegistration #_"<T>"
    #_public
    (§ field #_"T" :listener)
    #_public
    (§ field #_"Executor" :executor)

    #_public
    (§ constructor ListenerRegistration [#_"T" listener, #_"Executor" executor]
        (§ assoc this :listener (ensure some? listener))
        (§ assoc this :executor (ensure some? executor))
        this
    )

    ;;; Returns true if the listener was removed, else false. ;;
    #_public
    #_static
    (§ defn #_"<T> boolean" ListenerRegistration'removeFromList #_"<T>" [#_"T" listener, #_"List<? extends ListenerRegistration<T>>" list]
        (ensure some? listener)

        (let [#_"ListenerRegistration<T>" item nil]
            (doseq [#_"ListenerRegistration<T>" registration list]
                (when (= (:listener registration) listener)
                    (§ ass item registration)
                    (§ break )
                )
            )
            (and (some? item) (.. list (remove item)))
        )
    )
)

;;;
 ; Utility for formatting and parsing coin values to and from human readable form.
 ;
 ; MonetaryFormat instances are immutable.  Invoking a configuration method has no effect on the receiving instance;
 ; you must store and use the new instance it returns, instead.  Instances are thread safe, so they may be stored safely
 ; as static constants.
 ;;
#_public
(§ class MonetaryFormat
    ;;; Standard format for the BTC denomination. ;;
    #_public
    #_static
    (def #_"MonetaryFormat" MonetaryFormat'BTC (.. (MonetaryFormat.) (shift 0) (minDecimals 2) (repeatOptionalDecimals 2, 3)))
    ;;; Standard format for the mBTC denomination. ;;
    #_public
    #_static
    (def #_"MonetaryFormat" MonetaryFormat'MBTC (.. (MonetaryFormat.) (shift 3) (minDecimals 2) (optionalDecimals 2)))
    ;;; Standard format for the µBTC denomination. ;;
    #_public
    #_static
    (def #_"MonetaryFormat" MonetaryFormat'UBTC (.. (MonetaryFormat.) (shift 6) (minDecimals 0) (optionalDecimals 2)))
    ;;; Standard format for fiat amounts. ;;
    #_public
    #_static
    (def #_"MonetaryFormat" MonetaryFormat'FIAT (.. (MonetaryFormat.) (shift 0) (minDecimals 2) (repeatOptionalDecimals 2, 1)))
    ;;; Currency code for base 1 Bitcoin. ;;
    #_public
    #_static
    (def #_"String" MonetaryFormat'CODE_BTC "BTC")
    ;;; Currency code for base 1/1000 Bitcoin. ;;
    #_public
    #_static
    (def #_"String" MonetaryFormat'CODE_MBTC "mBTC")
    ;;; Currency code for base 1/1000000 Bitcoin. ;;
    #_public
    #_static
    (def #_"String" MonetaryFormat'CODE_UBTC "µBTC")

    #_public
    #_static
    (def #_"int" MonetaryFormat'MAX_DECIMALS 8)

    #_private
    (§ field- #_"char" :negative-sign)
    #_private
    (§ field- #_"char" :positive-sign)
    #_private
    (§ field- #_"char" :zero-digit)
    #_private
    (§ field- #_"char" :decimal-mark)
    #_private
    (§ field- #_"int" :min-decimals)
    #_private
    (§ field- #_"List<Integer>" :decimal-groups)
    #_private
    (§ field- #_"int" :shift)
    #_private
    (§ field- #_"RoundingMode" :rounding-mode)
    #_private
    (§ field- #_"String[]" :codes)
    #_private
    (§ field- #_"char" :code-separator)
    #_private
    (§ field- #_"boolean" :code-prefixed)

    #_private
    #_static
    (def- #_"String" MonetaryFormat'DECIMALS_PADDING "0000000000000000") ;; a few more than necessary for Bitcoin

    ;;;
     ; Set character to prefix negative values.
     ;;
    #_public
    (§ method #_"MonetaryFormat" negativeSign [#_"char" __negativeSign]
        (assert-argument (not (Character/isDigit __negativeSign)))
        (assert-argument (< 0 __negativeSign))

        (if (= __negativeSign (:negative-sign this)) this (MonetaryFormat. __negativeSign, (:positive-sign this), (:zero-digit this), (:decimal-mark this), (:min-decimals this), (:decimal-groups this), (:shift this), (:rounding-mode this), (:codes this), (:code-separator this), (:code-prefixed this)))
    )

    ;;;
     ; Set character to prefix positive values.  A zero value means no sign is used in this case.
     ; For parsing, a missing sign will always be interpreted as if the positive sign was used.
     ;;
    #_public
    (§ method #_"MonetaryFormat" positiveSign [#_"char" __positiveSign]
        (assert-argument (not (Character/isDigit __positiveSign)))

        (if (= __positiveSign (:positive-sign this)) this (MonetaryFormat. (:negative-sign this), __positiveSign, (:zero-digit this), (:decimal-mark this), (:min-decimals this), (:decimal-groups this), (:shift this), (:rounding-mode this), (:codes this), (:code-separator this), (:code-prefixed this)))
    )

    ;;;
     ; Set character range to use for representing digits.  It starts with the specified character representing zero.
     ;;
    #_public
    (§ method #_"MonetaryFormat" digits [#_"char" __zeroDigit]
        (if (= __zeroDigit (:zero-digit this)) this (MonetaryFormat. (:negative-sign this), (:positive-sign this), __zeroDigit, (:decimal-mark this), (:min-decimals this), (:decimal-groups this), (:shift this), (:rounding-mode this), (:codes this), (:code-separator this), (:code-prefixed this)))
    )

    ;;;
     ; Set character to use as the decimal mark.  If the formatted value does not have any decimals,
     ; no decimal mark is used either.
     ;;
    #_public
    (§ method #_"MonetaryFormat" decimalMark [#_"char" __decimalMark]
        (assert-argument (not (Character/isDigit __decimalMark)))
        (assert-argument (< 0 __decimalMark))

        (if (= __decimalMark (:decimal-mark this)) this (MonetaryFormat. (:negative-sign this), (:positive-sign this), (:zero-digit this), __decimalMark, (:min-decimals this), (:decimal-groups this), (:shift this), (:rounding-mode this), (:codes this), (:code-separator this), (:code-prefixed this)))
    )

    ;;;
     ; Set minimum number of decimals to use for formatting.  If the value precision exceeds all decimals specified
     ; (including additional decimals specified by {@link #optionalDecimals(int...)} or {@link #repeatOptionalDecimals(int, int)}),
     ; the value will be rounded.  This configuration is not relevant for parsing.
     ;;
    #_public
    (§ method #_"MonetaryFormat" minDecimals [#_"int" __minDecimals]
        (if (= __minDecimals (:min-decimals this)) this (MonetaryFormat. (:negative-sign this), (:positive-sign this), (:zero-digit this), (:decimal-mark this), __minDecimals, (:decimal-groups this), (:shift this), (:rounding-mode this), (:codes this), (:code-separator this), (:code-prefixed this)))
    )

    ;;;
     ; Set additional groups of decimals to use after the minimum decimals, if they are useful for expressing precision.
     ; Each value is a number of decimals in that group.  If the value precision exceeds all decimals specified
     ; (including minimum decimals), the value will be rounded.  This configuration is not relevant for parsing.
     ;
     ; For example, if you pass <tt>4,2</tt> it will add four decimals to your formatted string if needed, and then add
     ; another two decimals if needed.  At this point, rather than adding further decimals the value will be rounded.
     ;
     ; @param groups Any number numbers of decimals, one for each group.
     ;;
    #_public
    (§ method #_"MonetaryFormat" optionalDecimals [#_"int..." groups]
        (let [#_"List<Integer>" __decimalGroups (ArrayList. #_"<>" (alength groups))]
            (doseq [#_"int" group groups]
                (.. __decimalGroups (add group))
            )
            (MonetaryFormat. (:negative-sign this), (:positive-sign this), (:zero-digit this), (:decimal-mark this), (:min-decimals this), __decimalGroups, (:shift this), (:rounding-mode this), (:codes this), (:code-separator this), (:code-prefixed this))
        )
    )

    ;;;
     ; Set repeated additional groups of decimals to use after the minimum decimals, if they are useful for expressing
     ; precision.  If the value precision exceeds all decimals specified (including minimum decimals), the value will be
     ; rounded.  This configuration is not relevant for parsing.
     ;
     ; For example, if you pass <tt>1,8</tt> it will up to eight decimals to your formatted string if needed.
     ; After these have been used up, rather than adding further decimals the value will be rounded.
     ;
     ; @param decimals Value of the group to be repeated.
     ; @param repetitions Number of repetitions.
     ;;
    #_public
    (§ method #_"MonetaryFormat" repeatOptionalDecimals [#_"int" decimals, #_"int" repetitions]
        (assert-argument (<= 0 repetitions))

        (let [#_"List<Integer>" __decimalGroups (ArrayList. #_"<>" repetitions)]
            (loop-when-recur [#_"int" i 0] (< i repetitions) [(inc i)]
                (.. __decimalGroups (add decimals))
            )
            (MonetaryFormat. (:negative-sign this), (:positive-sign this), (:zero-digit this), (:decimal-mark this), (:min-decimals this), __decimalGroups, (:shift this), (:rounding-mode this), (:codes this), (:code-separator this), (:code-prefixed this))
        )
    )

    ;;;
     ; Set number of digits to shift the decimal separator to the right, coming from the standard BTC notation that was
     ; common pre-2014.  Note this will change the currency code if enabled.
     ;;
    #_public
    (§ method #_"MonetaryFormat" shift [#_"int" shift]
        (if (= shift (:shift this)) this (MonetaryFormat. (:negative-sign this), (:positive-sign this), (:zero-digit this), (:decimal-mark this), (:min-decimals this), (:decimal-groups this), shift, (:rounding-mode this), (:codes this), (:code-separator this), (:code-prefixed this)))
    )

    ;;;
     ; Set rounding mode to use when it becomes necessary.
     ;;
    #_public
    (§ method #_"MonetaryFormat" roundingMode [#_"RoundingMode" __roundingMode]
        (if (= __roundingMode (:rounding-mode this)) this (MonetaryFormat. (:negative-sign this), (:positive-sign this), (:zero-digit this), (:decimal-mark this), (:min-decimals this), (:decimal-groups this), (:shift this), __roundingMode, (:codes this), (:code-separator this), (:code-prefixed this)))
    )

    ;;;
     ; Don't display currency code when formatting.  This configuration is not relevant for parsing.
     ;;
    #_public
    (§ method #_"MonetaryFormat" noCode []
        (if (nil? (:codes this)) this (MonetaryFormat. (:negative-sign this), (:positive-sign this), (:zero-digit this), (:decimal-mark this), (:min-decimals this), (:decimal-groups this), (:shift this), (:rounding-mode this), nil, (:code-separator this), (:code-prefixed this)))
    )

    ;;;
     ; Configure currency code for given decimal separator shift.  This configuration is not relevant for parsing.
     ;
     ; @param codeShift Decimal separator shift, see {@link #shift}.
     ; @param code Currency code.
     ;;
    #_public
    (§ method #_"MonetaryFormat" code [#_"int" __codeShift, #_"String" code]
        (assert-argument (<= 0 __codeShift))

        (let [#_"String[]" codes (if (some? (:codes this)) (Arrays/copyOf (:codes this), (alength (:codes this))) (make-array String MonetaryFormat'MAX_DECIMALS))]

            (aset codes __codeShift code)
            (MonetaryFormat. (:negative-sign this), (:positive-sign this), (:zero-digit this), (:decimal-mark this), (:min-decimals this), (:decimal-groups this), (:shift this), (:rounding-mode this), codes, (:code-separator this), (:code-prefixed this))
        )
    )

    ;;;
     ; Separator between currency code and formatted value.  This configuration is not relevant for parsing.
     ;;
    #_public
    (§ method #_"MonetaryFormat" codeSeparator [#_"char" __codeSeparator]
        (assert-argument (not (Character/isDigit __codeSeparator)))
        (assert-argument (< 0 __codeSeparator))

        (if (= __codeSeparator (:code-separator this)) this (MonetaryFormat. (:negative-sign this), (:positive-sign this), (:zero-digit this), (:decimal-mark this), (:min-decimals this), (:decimal-groups this), (:shift this), (:rounding-mode this), (:codes this), __codeSeparator, (:code-prefixed this)))
    )

    ;;;
     ; Prefix formatted output by currency code.  This configuration is not relevant for parsing.
     ;;
    #_public
    (§ method #_"MonetaryFormat" prefixCode []
        (if (:code-prefixed this) this (MonetaryFormat. (:negative-sign this), (:positive-sign this), (:zero-digit this), (:decimal-mark this), (:min-decimals this), (:decimal-groups this), (:shift this), (:rounding-mode this), (:codes this), (:code-separator this), true))
    )

    ;;;
     ; Postfix formatted output with currency code.  This configuration is not relevant for parsing.
     ;;
    #_public
    (§ method #_"MonetaryFormat" postfixCode []
        (if (not (:code-prefixed this)) this (MonetaryFormat. (:negative-sign this), (:positive-sign this), (:zero-digit this), (:decimal-mark this), (:min-decimals this), (:decimal-groups this), (:shift this), (:rounding-mode this), (:codes this), (:code-separator this), false))
    )

    ;;;
     ; Configure this instance with values from a {@link Locale}.
     ;;
    #_public
    (§ method #_"MonetaryFormat" withLocale [#_"Locale" locale]
        (let [#_"DecimalFormatSymbols" dfs (DecimalFormatSymbols. locale)
              #_"char" __negativeSign (.. dfs (getMinusSign))
              #_"char" __zeroDigit (.. dfs (getZeroDigit))
              #_"char" __decimalMark (.. dfs (getMonetaryDecimalSeparator))]
            (MonetaryFormat. __negativeSign, (:positive-sign this), __zeroDigit, __decimalMark, (:min-decimals this), (:decimal-groups this), (:shift this), (:rounding-mode this), (:codes this), (:code-separator this), (:code-prefixed this))
        )
    )

    #_public
    (§ constructor MonetaryFormat []
        ;; defaults
        (§ assoc this :negative-sign \-)
        (§ assoc this :positive-sign 0) ;; none
        (§ assoc this :zero-digit \0)
        (§ assoc this :decimal-mark \.)
        (§ assoc this :min-decimals 2)
        (§ assoc this :decimal-groups nil)
        (§ assoc this :shift 0)
        (§ assoc this :rounding-mode RoundingMode/HALF_UP)
        (§ assoc this :codes (make-array String MonetaryFormat'MAX_DECIMALS))
        (aset (:codes this) 0 MonetaryFormat'CODE_BTC)
        (aset (:codes this) 3 MonetaryFormat'CODE_MBTC)
        (aset (:codes this) 6 MonetaryFormat'CODE_UBTC)
        (§ assoc this :code-separator \space)
        (§ assoc this :code-prefixed true)
        this
    )

    #_private
    (§ constructor- MonetaryFormat [#_"char" __negativeSign, #_"char" __positiveSign, #_"char" __zeroDigit, #_"char" __decimalMark, #_"int" __minDecimals, #_"List<Integer>" __decimalGroups, #_"int" shift, #_"RoundingMode" __roundingMode, #_"String[]" codes, #_"char" __codeSeparator, #_"boolean" __codePrefixed]
        (§ assoc this :negative-sign __negativeSign)
        (§ assoc this :positive-sign __positiveSign)
        (§ assoc this :zero-digit __zeroDigit)
        (§ assoc this :decimal-mark __decimalMark)
        (§ assoc this :min-decimals __minDecimals)
        (§ assoc this :decimal-groups __decimalGroups)
        (§ assoc this :shift shift)
        (§ assoc this :rounding-mode __roundingMode)
        (§ assoc this :codes codes)
        (§ assoc this :code-separator __codeSeparator)
        (§ assoc this :code-prefixed __codePrefixed)
        this
    )

    ;;;
     ; Format the given monetary value to a human readable form.
     ;;
    #_public
    (§ method #_"CharSequence" format [#_"Monetary" monetary]
        ;; preparation
        (let [#_"int" __maxDecimals (:min-decimals this)]
            (when (some? (:decimal-groups this))
                (doseq [#_"int" group (:decimal-groups this)]
                    (§ ass __maxDecimals (+ __maxDecimals group))
                )
            )
            (let [#_"int" __smallestUnitExponent (.. monetary (smallestUnitExponent))]
                (assert-state (<= __maxDecimals __smallestUnitExponent), "The maximum possible number of decimals (%s) cannot exceed %s.", __maxDecimals, __smallestUnitExponent)

                ;; rounding
                (let [#_"long" satoshis (Math/abs (.. monetary (getValue)))
                      #_"long" __precisionDivisor (LongMath/checkedPow 10, (- __smallestUnitExponent (:shift this) __maxDecimals))
                      satoshis (LongMath/checkedMultiply (LongMath/divide satoshis, __precisionDivisor, (:rounding-mode this)), __precisionDivisor)]

                    ;; shifting
                    (let [#_"long" __shiftDivisor (LongMath/checkedPow 10, (- __smallestUnitExponent (:shift this)))
                          #_"long" numbers (quot satoshis __shiftDivisor) #_"long" decimals (rem satoshis __shiftDivisor)]

                        ;; formatting
                        (let [#_"String" __decimalsStr (String/format Locale/US, (str "%0" (- __smallestUnitExponent (:shift this)) "d"), decimals)
                              #_"StringBuilder" sb (StringBuilder. __decimalsStr)]
                            (while (and (< (:min-decimals this) (.. sb (length))) (= (.. sb (charAt (dec (.. sb (length))))) \0))
                                (.. sb (setLength (dec (.. sb (length))))) ;; trim trailing zero
                            )
                            (let [#_"int" i (:min-decimals this)]
                                (when (some? (:decimal-groups this))
                                    (doseq [#_"int" group (:decimal-groups this)]
                                        (when (and (< i (.. sb (length))) (< (.. sb (length)) (+ i group)))
                                            (while (< (.. sb (length)) (+ i group))
                                                (.. sb (append "0"))
                                            )
                                            (§ break )
                                        )
                                        (§ ass i (+ i group))
                                    )
                                )
                                (when (< 0 (.. sb (length)))
                                    (.. sb (insert 0, (:decimal-mark this)))
                                )
                                (.. sb (insert 0, numbers))
                                (cond
                                    (< (.. monetary (getValue)) 0) (.. sb (insert 0, (:negative-sign this)))
                                    (not= (:positive-sign this) 0)    (.. sb (insert 0, (:positive-sign this)))
                                )
                                (when (some? (:codes this))
                                    (if (:code-prefixed this)
                                        (.. sb (insert 0, (:code-separator this)) (insert 0, (.. this (code))))
                                        (.. sb (append (:code-separator this)) (append (.. this (code))))
                                    )
                                )

                                ;; Convert to non-arabic digits.
                                (when (not= (:zero-digit this) \0)
                                    (let [#_"int" offset (- (:zero-digit this) \0)]
                                        (loop-when-recur [#_"int" d 0] (< d (.. sb (length))) [(inc d)]
                                            (let [#_"char" c (.. sb (charAt d))]
                                                (when (Character/isDigit c)
                                                    (.. sb (setCharAt d, (char (+ c offset))))
                                                )
                                            )
                                        )
                                    )
                                )
                                sb
                            )
                        )
                    )
                )
            )
        )
    )

    ;;;
     ; Parse a human readable coin value to a {@link Coin} instance.
     ;
     ; @throws NumberFormatException if the string cannot be parsed for some reason.
     ;;
    #_public
    #_throws #_[ "NumberFormatException" ]
    (§ method #_"Coin" parse [#_"String" s]
        (Coin'valueOf (.. this (parseValue s, Coin'SMALLEST_UNIT_EXPONENT)))
    )

    ;;;
     ; Parse a human readable fiat value to a {@link Fiat} instance.
     ;
     ; @throws NumberFormatException if the string cannot be parsed for some reason.
     ;;
    #_public
    #_throws #_[ "NumberFormatException" ]
    (§ method #_"Fiat" parseFiat [#_"String" code, #_"String" s]
        (Fiat'valueOf code, (.. this (parseValue s, Fiat'SMALLEST_UNIT_EXPONENT)))
    )

    #_private
    (§ method- #_"long" parseValue [#_"String" s, #_"int" __smallestUnitExponent]
        (assert-argument (<= __smallestUnitExponent (.. MonetaryFormat'DECIMALS_PADDING (length))))

        (when (.. s (isEmpty))
            (throw (NumberFormatException. "empty string"))
        )

        (let [#_"char" s0 (.. s (charAt 0)) s (if (any = s0 (:negative-sign this) (:positive-sign this)) (.. s (substring 1)) s)
              #_"int" i (.. s (indexOf (:decimal-mark this)))
              [#_"String" numbers #_"String" decimals]
                (when' (not= i -1) => [s MonetaryFormat'DECIMALS_PADDING]
                    (let [numbers (.. s (substring 0, i)) decimals (.. (str s MonetaryFormat'DECIMALS_PADDING) (substring (inc i)))]
                        (when-not (= (.. decimals (indexOf (:decimal-mark this))) -1)
                            (throw (NumberFormatException. "more than one decimal mark"))
                        )
                        [numbers decimals]
                    )
                )
              #_"String" satoshis (+ numbers (.. decimals (substring 0, (- __smallestUnitExponent (:shift this)))))]

            (doseq [#_"char" c (.. satoshis (toCharArray))]
                (when (not (Character/isDigit c))
                    (throw (NumberFormatException. (str "illegal character: " c)))
                )
            )

            ;; Non-arabic digits allowed here.
            (let [#_"long" value (Long/parseLong satoshis)]
                (if (= s0 (:negative-sign this)) (- value) value)
            )
        )
    )

    ;;;
     ; Get currency code that will be used for current shift.
     ;;
    #_public
    (§ method #_"String" code []
        (when (some? (:codes this))
            (or (aget (:codes this) (:shift this)) (throw (NumberFormatException. (str "missing code for shift: " (:shift this)))))
        )
    )
)

;;;
 ; Various threading related utilities.  Provides a wrapper around explicit lock creation that lets you control whether
 ; bitcoinj performs cycle detection or not.  Cycle detection is useful to detect bugs but comes with a small cost.
 ; Also provides a worker thread that is designed for event listeners to be dispatched on.
 ;;
#_public
(§ class Threading
    ;;;
     ; An executor with one thread that is intended for running event listeners on.  This ensures all event listener
     ; code runs without any locks being held.  It's intended for the API user to run things on.  Callbacks registered
     ; by bitcoinj internally shouldn't normally run here, although currently there are a few exceptions.
     ;;
    #_public
    #_static
    (def #_"Executor" Threading'USER_THREAD)

    ;;;
     ; A dummy executor that just invokes the runnable immediately.  Use this over
     ; {@link com.google.common.util.concurrent.MoreExecutors#sameThreadExecutor()} because the latter creates
     ; a new object each time in order to implement the more complex {@link ExecutorService} interface, which is
     ; overkill for our needs.
     ;;
    #_public
    #_static
    (def #_"Executor" Threading'SAME_THREAD)

    ;;;
     ; Put a dummy task into the queue and wait for it to be run.  Because it's single threaded, this means all
     ; tasks submitted before this point are now completed.  Usually you won't want to use this method - it's a
     ; convenience primarily used in unit testing.  If you want to wait for an event to be called the right thing
     ; to do is usually to create a {@link com.google.common.util.concurrent.SettableFuture} and then call set
     ; on it.  You can then either block on that future, compose it, add listeners to it and so on.
     ;;
    #_public
    #_static
    (§ defn #_"void" Threading'waitForUserCode []
        (let [#_"CountDownLatch" latch (CountDownLatch. 1)]
            (.. Threading'USER_THREAD (execute (Runnable.)
            (§ anon
                #_override
                #_public
                (§ method #_"void" run []
                    (.. latch (countDown))
                    nil
                )
            )))
            (Uninterruptibles/awaitUninterruptibly latch)
        )
        nil
    )

    ;;;
     ; An exception handler that will be invoked for any exceptions that occur in the user thread, and any unhandled
     ; exceptions that are caught whilst the framework is processing network traffic or doing other background tasks.
     ; The purpose of this is to allow you to report back unanticipated crashes from your users to a central collection
     ; center for analysis and debugging.  You should configure this <b>before</b> any bitcoinj library code is run,
     ; setting it after you started network traffic and other forms of processing may result in the change not taking effect.
     ;;
    #_nilable
    #_public
    #_static
    #_volatile
    (def #_"Thread.UncaughtExceptionHandler" Threading'UNCAUGHT_EXCEPTION_HANDLER)

    #_public
    #_static
    (§ class UserThread (§ extends Thread) (§ implements Executor)
        #_private
        #_static
        (def- #_"Logger" UserThread'log (LoggerFactory/getLogger UserThread))

        ;; 10,000 pending tasks is entirely arbitrary and may or may not be appropriate for the device we're running on.
        #_public
        #_static
        (def #_"int" UserThread'WARNING_THRESHOLD 10000)

        #_private
        (§ field- #_"LinkedBlockingQueue<Runnable>" :tasks)

        #_public
        (§ constructor UserThread []
            (§ super "bitcoinj user thread")

            (setDaemon true)
            (§ assoc this :tasks (LinkedBlockingQueue. #_"<>"))
            (.. this (start))
            this
        )

        #_suppress #_[ "InfiniteLoopStatement" ]
        #_override
        #_public
        (§ method #_"void" run []
            (loop []
                (let [#_"Runnable" task (Uninterruptibles/takeUninterruptibly (:tasks this))]
                    (try
                        (.. task (run))
                        (catch Throwable t
                            (.. UserThread'log (warn "Exception in user thread", t))
                            (let [#_"Thread.UncaughtExceptionHandler" handler Threading'UNCAUGHT_EXCEPTION_HANDLER]
                                (when (some? handler)
                                    (.. handler (uncaughtException this, t))
                                )
                            )
                        )
                    )
                )
            )
            nil
        )

        #_override
        #_public
        (§ method #_"void" execute [#_"Runnable" command]
            (let [#_"int" size (.. (:tasks this) (size))]
                (when (= size UserThread'WARNING_THRESHOLD)
                    (.. UserThread'log (warn (str "User thread has {} pending tasks, memory exhaustion may occur.\n" "If you see this message, check your memory consumption and see if it's problematic or excessively spikey.\n" "If it is, check for deadlocked or slow event handlers. If it isn't, try adjusting the constant \n" "UserThread.WARNING_THRESHOLD upwards until it's a suitable level for your app, or Integer.MAX_VALUE to disable."), size))
                )
                (Uninterruptibles/putUninterruptibly (:tasks this), command)
            )
            nil
        )
    )

    #_static
    (§ block
        ;; Default policy goes here.  If you want to change this, use one of the static methods before instantiating
        ;; any bitcoinj objects.  The policy change will take effect only on new objects from that point onwards.
        (Threading'throwOnLockCycles)

        (§ ass Threading'USER_THREAD (UserThread.))
        (§ ass Threading'SAME_THREAD (Executor.
        (§ anon
            #_override
            #_public
            (§ method #_"void" execute [#_non-nil #_"Runnable" runnable]
                (.. runnable (run))
                nil
            )
        )))
    )

    #_private
    #_static
    (def- #_"CycleDetectingLockFactory.Policy" Threading'POLICY)
    #_public
    #_static
    (def #_"CycleDetectingLockFactory" Threading'FACTORY)

    #_public
    #_static
    (§ defn #_"ReentrantLock" Threading'lock [#_"String" name]
        (.. Threading'FACTORY (newReentrantLock name))
    )

    #_public
    #_static
    (§ defn #_"void" Threading'warnOnLockCycles []
        (Threading'setPolicy CycleDetectingLockFactory.Policies/WARN)
        nil
    )

    #_public
    #_static
    (§ defn #_"void" Threading'throwOnLockCycles []
        (Threading'setPolicy CycleDetectingLockFactory.Policies/THROW)
        nil
    )

    #_public
    #_static
    (§ defn #_"void" Threading'ignoreLockCycles []
        (Threading'setPolicy CycleDetectingLockFactory.Policies/DISABLED)
        nil
    )

    #_public
    #_static
    (§ defn #_"void" Threading'setPolicy [#_"CycleDetectingLockFactory.Policy" policy]
        (§ ass Threading'POLICY policy)
        (§ ass Threading'FACTORY (CycleDetectingLockFactory/newInstance policy))
        nil
    )

    #_public
    #_static
    (§ defn #_"CycleDetectingLockFactory.Policy" Threading'getPolicy []
        Threading'POLICY
    )

    ;;; A caching thread pool that creates daemon threads, which won't keep the JVM alive waiting for more work. ;;
    #_public
    #_static
    (def #_"ListeningExecutorService" Threading'THREAD_POOL (MoreExecutors/listeningDecorator (Executors/newCachedThreadPool (ThreadFactory.)
        (§ anon
            #_override
            #_public
            (§ method #_"Thread" newThread [#_"Runnable" r]
                (let [#_"Thread" t (Thread. r)]
                    (.. t (setName "Threading.THREAD_POOL worker"))
                    (.. t (setDaemon true))
                    t
                )
            )
        ))))
)

;;;
 ; Caching counter for the block versions within a moving window.  This class is NOT thread safe
 ; (as if two threads are trying to use it concurrently, there's risk of getting versions out of sequence).
 ;
 ; @see NetworkParameters#getMajorityWindow()
 ;;
#_public
(§ class VersionTally
    ;;;
     ; Cache of version numbers.
     ;;
    #_private
    (§ field- #_"long[]" :version-window)

    ;;;
     ; Offset within the version window at which the next version will be written.
     ;;
    #_private
    (§ field- #_"int" :version-write-head 0)

    ;;;
     ; Number of versions written into the tally.  Until this matches the length
     ; of the version window, we do not have sufficient data to return values.
     ;;
    #_private
    (§ field- #_"int" :versions-stored 0)

    #_public
    (§ constructor VersionTally [#_"NetworkParameters" params]
        (§ assoc this :version-window (long-array (:majority-window params)))
        this
    )

    ;;;
     ; Add a new block version to the tally, and return the count for that version within the window.
     ;
     ; @param version The block version to add.
     ;;
    #_public
    (§ method #_"void" add [#_"long" version]
        (aset (:version-window this) (:version-write-head this) version)
        (§ update this :version-write-head inc)
        (when (= (:version-write-head this) (alength (:version-window this)))
            (§ assoc this :version-write-head 0)
        )
        (§ update this :versions-stored inc)
        nil
    )

    ;;;
     ; Get the count of blocks at or above the given version, within the window.
     ;
     ; @param version The block version to query.
     ; @return the count for the block version, or null if the window is not yet full.
     ;;
    #_public
    (§ method #_"Integer" getCountAtOrAbove [#_"long" version]
        (when-not (< (:versions-stored this) (alength (:version-window this)))
            (let [#_"int" count 0]
                (loop-when-recur [#_"int" i 0] (< i (alength (:version-window this))) [(inc i)]
                    (when (<= version (aget (:version-window this) i))
                        (§ ass count (inc count))
                    )
                )
                count
            )
        )
    )

    ;;;
     ; Initialize the version tally from the block store.  Note this does not search backwards past
     ; the start of the block store, so if starting from a checkpoint this may not fill the window.
     ;
     ; @param blockStore Block store to load blocks from.
     ; @param chainHead Current chain tip.
     ;;
    #_public
    #_throws #_[ "BlockStoreException" ]
    (§ method #_"void" initialize [#_"BlockStore" __blockStore, #_"StoredBlock" __chainHead]
        (let [#_"StoredBlock" __versionBlock __chainHead
              #_"Stack<Long>" versions (Stack. #_"<>")]

            ;; We don't know how many blocks back we can go, so load what we can first.
            (.. versions (push (.. __versionBlock (getHeader) (getVersion))))
            (loop-when-recur [#_"int" __headOffset 0] (< __headOffset (alength (:version-window this))) [(inc __headOffset)]
                (§ ass __versionBlock (.. __versionBlock (getPrev __blockStore)))
                (when (nil? __versionBlock)
                    (§ break )
                )
                (.. versions (push (.. __versionBlock (getHeader) (getVersion))))
            )

            ;; Replay the versions into the tally.
            (while (not (.. versions (isEmpty)))
                (.. this (add (.. versions (pop))))
            )
        )
        nil
    )

    ;;;
     ; Get the size of the version window.
     ;;
    #_public
    (§ method #_"int" size []
        (alength (:version-window this))
    )
)

#_(ns org.bitcoinj.wallet
    (:import [com.google.common.base Charsets MoreObjects Objects Splitter Stopwatch]
             [com.google.common.collect ImmutableList Iterators Lists PeekingIterator]
             [com.google.common.primitives *]
             [com.google.common.util.concurrent *]
             [com.google.protobuf ByteString CodedInputStream CodedOutputStream WireFormat]
             [java.io IOException InputStream OutputStream]
             [java.math BigInteger]
             [java.net InetAddress UnknownHostException]
             [java.security SecureRandom]
             [java.util ArrayList Collection Collections Date HashSet Iterator LinkedHashMap LinkedList List Map]
             [java.util.concurrent CopyOnWriteArrayList Executor]
             [java.util.concurrent.atomic *]
             [java.util.concurrent.locks ReentrantLock]
             [org.slf4j LoggerFactory Logger]
             [org.spongycastle.crypto.params KeyParameter]
    )
)

;;;
 ; Indicates that an attempt was made to upgrade a random wallet to deterministic, but there were no non-rotating
 ; random keys to use as source material for the seed.  Add a non-compromised key first!
 ;;
#_public
(§ class AllRandomKeysRotating (§ extends RuntimeException))

;;;
 ; This coin selector will select any transaction at all, regardless of where it came from or whether it was
 ; confirmed yet.  However immature coinbases will not be included (would be a protocol violation).
 ;;
#_public
(§ class AllowUnconfirmedCoinSelector (§ extends DefaultCoinSelector)
    #_override
    #_protected
    (§ method #_"boolean" shouldSelect [#_"Transaction" tx]
        true
    )

    #_private
    #_static
    (def- #_"AllowUnconfirmedCoinSelector" AllowUnconfirmedCoinSelector'INSTANCE)

    ;;; Returns a global static instance of the selector. ;;
    #_public
    #_static
    (§ defn #_"AllowUnconfirmedCoinSelector" AllowUnconfirmedCoinSelector'get []
        ;; This doesn't have to be thread safe as the object has no state, so discarded duplicates are harmless.
        (when (nil? AllowUnconfirmedCoinSelector'INSTANCE)
            (§ ass AllowUnconfirmedCoinSelector'INSTANCE (AllowUnconfirmedCoinSelector.))
        )
        AllowUnconfirmedCoinSelector'INSTANCE
    )
)

;;;
 ; A {@link KeyChain} that implements the simplest model possible: it can have keys imported into it, and just
 ; acts as a dumb bag of keys.  It will, left to its own devices, always return the same key for usage by the wallet,
 ; although it will automatically add one to itself if it's empty or if encryption is requested.
 ;;
#_public
(§ class BasicKeyChain (§ implements KeyChain)
    #_private
    (§ field- #_"ReentrantLock" :lock (Threading'lock "BasicKeyChain"))

    ;; Maps used to let us quickly look up a key given data we find in transcations or the block chain.
    #_private
    (§ field- #_"LinkedHashMap<ByteString, ECKey>" :hash-to-keys (LinkedHashMap. #_"<>"))
    #_private
    (§ field- #_"LinkedHashMap<ByteString, ECKey>" :pubkey-to-keys (LinkedHashMap. #_"<>"))
    #_private
    (§ field- #_"boolean" :is-watching)

    #_private
    (§ field- #_"CopyOnWriteArrayList<ListenerRegistration<KeyChainEventListener>>" :listeners (CopyOnWriteArrayList. #_"<>"))

    #_public
    (§ constructor BasicKeyChain []
        this
    )

    #_override
    #_public
    (§ method #_"ECKey" getKey [#_nilable #_"KeyPurpose" ignored]
        (.. (:lock this) (lock))
        (try
            (when (.. (:hash-to-keys this) (isEmpty))
                (let [#_"ECKey" key (ECKey.)]
                    (.. this (importKeyLocked key))
                    (.. this (queueOnKeysAdded (ImmutableList/of key)))
                )
            )
            (.. (:hash-to-keys this) (values) (iterator) (next))
            (finally
                (.. (:lock this) (unlock))
            )
        )
    )

    #_override
    #_public
    (§ method #_"List<ECKey>" getKeys [#_nilable #_"KeyPurpose" purpose, #_"int" __numberOfKeys]
        (assert-argument (< 0 __numberOfKeys))

        (.. (:lock this) (lock))
        (try
            (when (< (.. (:hash-to-keys this) (size)) __numberOfKeys)
                (let [#_"List<ECKey>" keys (ArrayList. #_"<>")]
                    (loop-when-recur [#_"int" i 0] (< i (- __numberOfKeys (.. (:hash-to-keys this) (size)))) [(inc i)]
                        (.. keys (add (ECKey.)))
                    )

                    (let [#_"ImmutableList<ECKey>" __immutableKeys (ImmutableList/copyOf keys)]
                        (.. this (importKeysLocked __immutableKeys))
                        (.. this (queueOnKeysAdded __immutableKeys))
                    )
                )
            )

            (let [#_"List<ECKey>" __keysToReturn (ArrayList. #_"<>")
                  #_"int" count 0]
                (loop-when-recur [] (and (.. (:hash-to-keys this) (values) (iterator) (hasNext)) (not= __numberOfKeys count)) []
                    (.. __keysToReturn (add (.. (:hash-to-keys this) (values) (iterator) (next))))
                    (§ ass count (inc count))
                )
                __keysToReturn
            )
            (finally
                (.. (:lock this) (unlock))
            )
        )
    )

    ;;; Returns a copy of the list of keys that this chain is managing. ;;
    #_public
    (§ method #_"List<ECKey>" getKeys []
        (.. (:lock this) (lock))
        (try
            (ArrayList. #_"<>" (.. (:hash-to-keys this) (values)))
            (finally
                (.. (:lock this) (unlock))
            )
        )
    )

    #_public
    (§ method #_"int" importKeys [#_"ECKey..." keys]
        (.. this (importKeys (ImmutableList/copyOf keys)))
    )

    #_public
    (§ method #_"int" importKeys [#_"List<? extends ECKey>" keys]
        (.. (:lock this) (lock))
        (try
            (let [#_"List<ECKey>" __actuallyAdded (ArrayList. #_"<>" (.. keys (size)))]
                (doseq [#_"ECKey" key keys]
                    (when (not (.. this (hasKey key)))
                        (.. __actuallyAdded (add key))
                        (.. this (importKeyLocked key))
                    )
                )
                (when (< 0 (.. __actuallyAdded (size)))
                    (.. this (queueOnKeysAdded __actuallyAdded))
                )
                (.. __actuallyAdded (size))
            )
            (finally
                (.. (:lock this) (unlock))
            )
        )
    )

    #_private
    (§ method- #_"void" importKeyLocked [#_"ECKey" key]
        (cond (.. (:hash-to-keys this) (isEmpty))
            (do
                (§ assoc this :is-watching (.. key (isWatching)))
            )
            :else
            (do
                (when (and (.. key (isWatching)) (not (:is-watching this)))
                    (throw (IllegalArgumentException. "Key is watching but chain is not"))
                )
                (when (and (not (.. key (isWatching))) (:is-watching this))
                    (throw (IllegalArgumentException. "Key is not watching but chain is"))
                )
            )
        )
        (let [#_"ECKey" __previousKey (.. (:pubkey-to-keys this) (put (ByteString/copyFrom (.. key (getPubKey))), key))]
            (.. (:hash-to-keys this) (put (ByteString/copyFrom (.. key (getPubKeyHash))), key))
            (assert-state (nil? __previousKey))
        )
        nil
    )

    #_private
    (§ method- #_"void" importKeysLocked [#_"List<ECKey>" keys]
        (doseq [#_"ECKey" key keys]
            (.. this (importKeyLocked key))
        )
        nil
    )

    ;;;
     ; Imports a key to the key chain.  If key is present in the key chain, ignore it.
     ;;
    #_public
    (§ method #_"void" importKey [#_"ECKey" key]
        (.. (:lock this) (lock))
        (try
            (when-not (.. this (hasKey key))
                (.. this (importKeyLocked key))
                (.. this (queueOnKeysAdded (ImmutableList/of key)))
            )
            (finally
                (.. (:lock this) (unlock))
            )
        )
        nil
    )

    #_public
    (§ method #_"ECKey" findKeyFromPubHash [#_"byte[]" __pubkeyHash]
        (.. (:lock this) (lock))
        (try
            (.. (:hash-to-keys this) (get (ByteString/copyFrom __pubkeyHash)))
            (finally
                (.. (:lock this) (unlock))
            )
        )
    )

    #_public
    (§ method #_"ECKey" findKeyFromPubKey [#_"byte[]" pubkey]
        (.. (:lock this) (lock))
        (try
            (.. (:pubkey-to-keys this) (get (ByteString/copyFrom pubkey)))
            (finally
                (.. (:lock this) (unlock))
            )
        )
    )

    #_override
    #_public
    (§ method #_"boolean" hasKey [#_"ECKey" key]
        (some? (.. this (findKeyFromPubKey (.. key (getPubKey)))))
    )

    #_override
    #_public
    (§ method #_"int" numKeys []
        (.. (:pubkey-to-keys this) (size))
    )

    ;;; Whether this basic key chain is empty, full of regular (usable for signing) keys, or full of watching keys. ;;
    #_public
    #_static
    #_enum
    (def KeyChainState'values
    #{
        :KeyChainState'EMPTY
        :KeyChainState'WATCHING
        :KeyChainState'REGULAR
    })

    ;;;
     ; Returns whether this chain consists of pubkey only (watching) keys, regular keys (usable for signing),
     ; or has no keys in it yet at all (thus we cannot tell).
     ;;
    #_public
    (§ method #_"KeyChainState" isWatching []
        (.. (:lock this) (lock))
        (try
            (if (.. (:hash-to-keys this) (isEmpty)) :KeyChainState'EMPTY (if (:is-watching this) :KeyChainState'WATCHING :KeyChainState'REGULAR))
            (finally
                (.. (:lock this) (unlock))
            )
        )
    )

    ;;;
     ; Removes the given key from the keychain.  Be very careful with this - losing a private key
     ; <b>destroys the money associated with it</b>.
     ;
     ; @return whether the key was removed or not.
     ;;
    #_public
    (§ method #_"boolean" removeKey [#_"ECKey" key]
        (.. (:lock this) (lock))
        (try
            (let [#_"boolean" a (some? (.. (:hash-to-keys this) (remove (ByteString/copyFrom (.. key (getPubKeyHash))))))
                  #_"boolean" b (some? (.. (:pubkey-to-keys this) (remove (ByteString/copyFrom (.. key (getPubKey))))))]
                (assert-state (= a b)) ;; Should be in both maps or neither.
                a
            )
            (finally
                (.. (:lock this) (unlock))
            )
        )
    )

    #_override
    #_public
    (§ method #_"long" getEarliestKeyCreationTime []
        (.. (:lock this) (lock))
        (try
            (let [#_"long" time Long/MAX_VALUE]
                (doseq [#_"ECKey" key (.. (:hash-to-keys this) (values))]
                    (§ ass time (min (.. key (getCreationTimeSeconds)), time))
                )
                time
            )
            (finally
                (.. (:lock this) (unlock))
            )
        )
    )

    #_public
    (§ method #_"List<ListenerRegistration<KeyChainEventListener>>" getListeners []
        (ArrayList. #_"<>" (:listeners this))
    )

    (§ method #_"Map<ECKey, Protos.Key.Builder>" serializeToEditableProtobufs []
        (let [#_"Map<ECKey, Protos.Key.Builder>" result (LinkedHashMap. #_"<>")]
            (doseq [#_"ECKey" __ecKey (.. (:hash-to-keys this) (values))]
                (let [#_"Protos.Key.Builder" __protoKey (BasicKeyChain'serializeEncryptableItem __ecKey)]
                    (.. __protoKey (setPublicKey (ByteString/copyFrom (.. __ecKey (getPubKey)))))
                    (.. result (put __ecKey, __protoKey))
                )
            )
            result
        )
    )

    #_override
    #_public
    (§ method #_"List<Protos.Key>" serializeToProtobuf []
        (let [#_"Collection<Protos.Key.Builder>" builders (.. this (serializeToEditableProtobufs) (values))
              #_"List<Protos.Key>" result (ArrayList. #_"<>" (.. builders (size)))]
            (doseq [#_"Protos.Key.Builder" builder builders]
                (.. result (add (.. builder (build))))
            )
            result
        )
    )

    #_static
    (§ defn #_"Protos.Key.Builder" BasicKeyChain'serializeEncryptableItem [#_"EncryptableItem" item]
        (let [#_"Protos.Key.Builder" proto (Protos.Key/newBuilder)]
            (.. proto (setCreationTimestamp (* (.. item (getCreationTimeSeconds)) 1000)))
            (let [#_"byte[]" secret (.. item (getSecretBytes))]
                ;; The secret might be missing in the case of a watching wallet, or a key for which the private key
                ;; is expected to be rederived on the fly from its parent.
                (when (some? secret)
                    (.. proto (setSecretBytes (ByteString/copyFrom secret)))
                )
                (.. proto (setType Protos.Key.Type/ORIGINAL))
            )
            proto
        )
    )

    ;;;
     ; Returns a new BasicKeyChain that contains all basic, ORIGINAL type keys extracted from the list.
     ; Unrecognised key types are ignored.
     ;;
    #_public
    #_static
    #_throws #_[ "UnreadableWalletException" ]
    (§ defn #_"BasicKeyChain" BasicKeyChain'fromProtobufUnencrypted [#_"List<Protos.Key>" keys]
        (let [#_"BasicKeyChain" chain (BasicKeyChain.)]
            (.. chain (deserializeFromProtobuf keys))
            chain
        )
    )

    #_private
    #_throws #_[ "UnreadableWalletException" ]
    (§ method- #_"void" deserializeFromProtobuf [#_"List<Protos.Key>" keys]
        (.. (:lock this) (lock))
        (try
            (assert-state (.. (:hash-to-keys this) (isEmpty)), "Tried to deserialize into a non-empty chain")
            (doseq [#_"Protos.Key" key keys]
                (when (= (.. key (getType)) Protos.Key.Type/ORIGINAL)
                    (let [#_"byte[]" priv (when (.. key (hasSecretBytes)) (.. key (getSecretBytes) (toByteArray)))]
                        (when (not (.. key (hasPublicKey)))
                            (throw (UnreadableWalletException. "Public key missing"))
                        )

                        (let [#_"byte[]" pub (.. key (getPublicKey) (toByteArray))
                              #_"ECKey" __ecKey (if (some? priv) (ECKey'fromPrivateAndPrecalculatedPublic priv, pub) (ECKey'fromPublicOnly pub))]
                            (.. __ecKey (setCreationTimeSeconds (quot (.. key (getCreationTimestamp)) 1000)))
                            (.. this (importKeyLocked __ecKey))
                        )
                    )
                )
            )
            (finally
                (.. (:lock this) (unlock))
            )
        )
        nil
    )

    #_override
    #_public
    (§ method #_"void" addEventListener [#_"KeyChainEventListener" listener]
        (.. this (addEventListener listener, Threading'USER_THREAD))
        nil
    )

    #_override
    #_public
    (§ method #_"void" addEventListener [#_"KeyChainEventListener" listener, #_"Executor" executor]
        (.. (:listeners this) (add (ListenerRegistration. #_"<>" listener, executor)))
        nil
    )

    #_override
    #_public
    (§ method #_"boolean" removeEventListener [#_"KeyChainEventListener" listener]
        (ListenerRegistration'removeFromList listener, (:listeners this))
    )

    #_private
    (§ method- #_"void" queueOnKeysAdded [#_"List<ECKey>" keys]
        (assert-state (.. (:lock this) (isHeldByCurrentThread)))

        (doseq [#_"ListenerRegistration<KeyChainEventListener>" registration (:listeners this)]
            (.. (:executor registration) (execute (Runnable.)
            (§ anon
                #_override
                #_public
                (§ method #_"void" run []
                    (.. (:listener registration) (onKeysAdded keys))
                    nil
                )
            )))
        )
        nil
    )

    #_override
    #_public
    (§ method #_"BloomFilter" getFilter [#_"int" size, #_"double" __falsePositiveRate, #_"long" tweak]
        (.. (:lock this) (lock))
        (try
            (let [#_"BloomFilter" filter (BloomFilter. size, __falsePositiveRate, tweak)]
                (doseq [#_"ECKey" key (.. (:hash-to-keys this) (values))]
                    (.. filter (insert key))
                )
                filter
            )
            (finally
                (.. (:lock this) (unlock))
            )
        )
    )

    #_override
    #_public
    (§ method #_"int" numBloomFilterEntries []
        (* (.. this (numKeys)) 2)
    )

    ;;; Returns the first ECKey created after the given UNIX time, or null if there is none. ;;
    #_nilable
    #_public
    (§ method #_"ECKey" findOldestKeyAfter [#_"long" __timeSecs]
        (.. (:lock this) (lock))
        (try
            (let [#_"ECKey" oldest nil]
                (doseq [#_"ECKey" key (.. (:hash-to-keys this) (values))]
                    (let [#_"long" __keyTime (.. key (getCreationTimeSeconds))]
                        (when (and (< __timeSecs __keyTime) (or (nil? oldest) (< __keyTime (.. oldest (getCreationTimeSeconds)))))
                            (§ ass oldest key)
                        )
                    )
                )
                oldest
            )
            (finally
                (.. (:lock this) (unlock))
            )
        )
    )

    ;;; Returns a list of all ECKeys created after the given UNIX time. ;;
    #_public
    (§ method #_"List<ECKey>" findKeysBefore [#_"long" __timeSecs]
        (.. (:lock this) (lock))
        (try
            (let [#_"List<ECKey>" results (Lists/newLinkedList)]
                (doseq [#_"ECKey" key (.. (:hash-to-keys this) (values))]
                    (let [#_"long" __keyTime (.. key (getCreationTimeSeconds))]
                        (when (< __keyTime __timeSecs)
                            (.. results (add key))
                        )
                    )
                )
                results
            )
            (finally
                (.. (:lock this) (unlock))
            )
        )
    )
)

;;;
 ; Represents the results of a {@link CoinSelector#select(Coin, java.util.List)} operation.
 ; A coin selection represents a list of spendable transaction outputs that sum together to give valueGathered.
 ; Different coin selections could be produced by different coin selectors from the same input set, according
 ; to their varying policies.
 ;;
#_public
(§ class CoinSelection
    #_public
    (§ field #_"Coin" :value-gathered)
    #_public
    (§ field #_"Collection<TransactionOutput>" :gathered)

    #_public
    (§ constructor CoinSelection [#_"Coin" __valueGathered, #_"Collection<TransactionOutput>" gathered]
        (§ assoc this :value-gathered __valueGathered)
        (§ assoc this :gathered gathered)
        this
    )
)

;;;
 ; A CoinSelector is responsible for picking some outputs to spend, from the list of all possible outputs.
 ; It allows you to customize the policies for creation of transactions to suit your needs.  The select operation
 ; may return a {@link CoinSelection} that has a valueGathered lower than the requested target, if there's not
 ; enough money in the wallet.
 ;;
#_public
(§ interface CoinSelector
    ;;;
     ; Creates a CoinSelection that tries to meet the target amount of value.  The candidates list is given to
     ; this call and can be edited freely.  See the docs for CoinSelection to learn more, or look a the implementation
     ; of {@link DefaultCoinSelector}.
     ;;
    (§ method #_"CoinSelection" select [#_"Coin" target, #_"List<TransactionOutput>" candidates])
)

;;;
 ; This class implements a {@link CoinSelector} which attempts to get the highest priority possible.
 ; This means that the transaction is the most likely to get confirmed.  Note that this means we may end up
 ; "spending" more priority than would be required to get the transaction we are creating confirmed.
 ;;
#_public
(§ class DefaultCoinSelector (§ implements CoinSelector)
    #_override
    #_public
    (§ method #_"CoinSelection" select [#_"Coin" target, #_"List<TransactionOutput>" candidates]
        (let [#_"ArrayList<TransactionOutput>" selected (ArrayList. #_"<>")]
            ;; Sort the inputs by age * value, so we get the highest "coindays" spent.
            ;; TODO: Consider changing the wallets internal format to track just outputs and keep them ordered.
            (let [#_"ArrayList<TransactionOutput>" __sortedOutputs (ArrayList. #_"<>" candidates)]
                ;; When calculating the wallet balance, we may be asked to select all possible coins, if so, avoid
                ;; sorting them in order to improve performance.
                ;; TODO: Take in network parameters when instanatiated, and then test against the current network.
                ;; Or just have a boolean parameter for "give me everything".
                (when (not (.. target (equals NetworkParameters'MAX_MONEY)))
                    (DefaultCoinSelector'sortOutputs __sortedOutputs)
                )
                ;; Now iterate over the sorted outputs until we have got as close to the target as possible or
                ;; a little bit over (excessive value will be change).
                (let [#_"long" total 0]
                    (doseq [#_"TransactionOutput" output __sortedOutputs]
                        (when (<= (:value target) total)
                            (§ break )
                        )
                        ;; Only pick chain-included transactions, or transactions that are ours and pending.
                        (when (.. this (shouldSelect (.. output (getParentTransaction))))
                            (.. selected (add output))
                            (§ ass total (+ total (:value (.. output (getValue)))))
                        )
                    )
                    ;; Total may be lower than the target here if the given candidates were insufficient to create
                    ;; the requested transaction.
                    (CoinSelection. (Coin'valueOf total), selected)
                )
            )
        )
    )

    #_testing
    #_static
    (§ defn #_"void" DefaultCoinSelector'sortOutputs [#_"ArrayList<TransactionOutput>" outputs]
        (Collections/sort outputs, (Comparator. #_"<TransactionOutput>")
        (§ anon
            #_override
            #_public
            (§ method #_"int" compare [#_"TransactionOutput" a, #_"TransactionOutput" b]
                (let [#_"int" prior1 (.. a (getParentTransactionDepthInBlocks))
                      #_"int" prior2 (.. b (getParentTransactionDepthInBlocks))
                      #_"Coin" coin1 (.. a (getValue))
                      #_"Coin" coin2 (.. b (getValue))
                      #_"BigInteger" depth1 (.. (BigInteger/valueOf (:value coin1)) (multiply (BigInteger/valueOf prior1)))
                      #_"BigInteger" depth2 (.. (BigInteger/valueOf (:value coin2)) (multiply (BigInteger/valueOf prior2)))
                      #_"int" c1 (.. depth2 (compareTo depth1))]
                    (when' (= c1 0) => c1
                        ;; The "coin * days" destroyed are equal, sort by value alone to get the lowest transaction size.
                        (let [#_"int" c2 (.. coin2 (compareTo coin1))]
                            (when' (= c2 0) => c2
                                ;; They are entirely equivalent (possibly pending) so sort by hash to ensure a total ordering.
                                (let [#_"BigInteger" hash1 (.. a (getParentTransactionHash) (toBigInteger))
                                      #_"BigInteger" hash2 (.. b (getParentTransactionHash) (toBigInteger))]
                                    (.. hash1 (compareTo hash2))
                                )
                            )
                        )
                    )
                )
            )
        ))
        nil
    )

    ;;; Sub-classes can override this to just customize whether transactions are usable, but keep age sorting. ;;
    #_protected
    (§ method #_"boolean" shouldSelect [#_"Transaction" tx]
        (or (nil? tx) (DefaultCoinSelector'isSelectable tx))
    )

    #_public
    #_static
    (§ defn #_"boolean" DefaultCoinSelector'isSelectable [#_"Transaction" tx]
        ;; Only pick chain-included transactions, or transactions that are ours and pending.
        (let [#_"TransactionConfidence" confidence (.. tx (getConfidence)) #_"ConfidenceType" type (.. confidence (getConfidenceType))]
            ;; TODO: The value 1 below dates from a time when transactions we broadcast *to* were counted, set to 0.
            (or (.. type (equals ConfidenceType'BUILDING)) (and (.. type (equals ConfidenceType'PENDING)) (.. confidence (getSource) (equals :ConfidenceSource'SELF)) (< 1 (.. confidence (numBroadcastPeers)))))
        )
    )
)

;;;
 ; Factory for creating keychains while de-serializing a wallet.
 ;;
#_public
(§ class KeyChainFactory
    ;;;
     ; Make a keychain (but not a watching one).
     ;
     ; @param key The protobuf for the root key.
     ; @param firstSubKey The protobuf for the first child key (normally the parent of the external subchain).
     ; @param seed The seed.
     ; @param isMarried Whether the keychain is leading in a marriage.
     ;;
    #_public
    (§ method #_"DeterministicKeyChain" makeKeyChain [#_"Protos.Key" key, #_"Protos.Key" __firstSubKey, #_"DeterministicSeed" seed, #_"boolean" married?]
        (if married? (MarriedKeyChain. seed) (DeterministicKeyChain. seed))
    )

    ;;;
     ; Make a watching keychain.
     ;
     ; isMarried and isFollowingKey must not be true at the same time.
     ;
     ; @param key The protobuf for the account key.
     ; @param firstSubKey The protobuf for the first child key (normally the parent of the external subchain).
     ; @param accountKey The account extended public key.
     ; @param isFollowingKey Whether the keychain is following in a marriage.
     ; @param isMarried Whether the keychain is leading in a marriage.
     ;;
    #_public
    #_throws #_[ "UnreadableWalletException" ]
    (§ method #_"DeterministicKeyChain" makeWatchingKeyChain [#_"Protos.Key" key, #_"Protos.Key" __firstSubKey, #_"DeterministicKey" __accountKey, #_"boolean" following?, #_"boolean" married?]
        (when (not (.. __accountKey (getPath) (equals DeterministicKeyChain'ACCOUNT_ZERO_PATH)))
            (throw (UnreadableWalletException. (str "Expecting account key but found key with path: " (HDUtils'formatPath (.. __accountKey (getPath))))))
        )

        (if married? (MarriedKeyChain. __accountKey) (DeterministicKeyChain. __accountKey, following?))
    )
)

;;;
 ; A RiskAnalysis represents an analysis of how likely it is that a transaction (and its dependencies)
 ; represents a possible double spending attack.  The wallet will create these to decide whether or not to accept
 ; a pending transaction.
 ;
 ; The intention here is that implementing classes can expose more information and detail about the result,
 ; for app developers.  The core code needs only to know whether it's OK or not.
 ;
 ; Currently, it only is concerned with whether a tx/dependency is non-final or not,
 ; and whether a tx/dependency violates the dust rules.  Outside of specialised protocols you should not encounter
 ; non-final transactions.
 ;;
#_public
(§ class RiskAnalysis
    #_private
    #_static
    (def- #_"Logger" RiskAnalysis'log (LoggerFactory/getLogger RiskAnalysis))

    ;;;
     ; Any standard output smaller than this value (in satoshis) will be considered risky, as it's most likely
     ; be rejected by the network.  This is usually the same as {@link Transaction#MIN_NONDUST_OUTPUT} but can
     ; be different when the fee is about to change in Bitcoin Core.
     ;;
    #_public
    #_static
    (def #_"Coin" RiskAnalysis'MIN_ANALYSIS_NONDUST_OUTPUT Transaction'MIN_NONDUST_OUTPUT)

    #_protected
    (§ field #_"Transaction" :tx)
    #_protected
    (§ field #_"List<Transaction>" :dependencies)
    #_nilable
    #_protected
    (§ field #_"Wallet" :wallet)

    #_private
    (§ field- #_"Transaction" :non-standard)
    #_protected
    (§ field #_"Transaction" :non-final)
    #_protected
    (§ field #_"boolean" :analyzed)

    #_private
    (§ constructor- RiskAnalysis [#_"Wallet" wallet, #_"Transaction" tx, #_"List<Transaction>" dependencies]
        (§ assoc this :tx tx)
        (§ assoc this :dependencies dependencies)
        (§ assoc this :wallet wallet)
        this
    )

    #_public
    #_static
    #_enum
    (def RiskAnalysisResult'values
    #{
        :RiskAnalysisResult'OK
        :RiskAnalysisResult'NON_FINAL
        :RiskAnalysisResult'NON_STANDARD
    })

    #_public
    (§ method #_"RiskAnalysisResult" analyze []
        (assert-state (not (:analyzed this)))
        (§ assoc this :analyzed true)

        (let [#_"RiskAnalysisResult" result (.. this (analyzeIsFinal))]
            (if (and (some? result) (not= result :RiskAnalysisResult'OK)) result (.. this (analyzeIsStandard)))
        )
    )

    #_nilable
    #_private
    (§ method- #_"RiskAnalysisResult" analyzeIsFinal []
        (cond
            ;; Transactions we create ourselves are, by definition, not at risk of double spending against us.
            (= (.. (:tx this) (getConfidence) (getSource)) :ConfidenceSource'SELF)
                :RiskAnalysisResult'OK

            ;; We consider transactions that opt into replace-by-fee at risk of double spending.
            (.. (:tx this) (isOptInFullRBF))
                (do
                    (§ assoc this :non-final (:tx this))
                    :RiskAnalysisResult'NON_FINAL
                )

            (some? (:wallet this))
                (let [#_"int" height (.. (:wallet this) (getLastBlockSeenHeight))
                      #_"long" time (.. (:wallet this) (getLastBlockSeenTimeSecs))
                      ;; If the transaction has a lock time specified in blocks, we consider that if the tx would become final
                      ;; in the next block, it is not risky (as it would confirm normally).
                      #_"int" __adjustedHeight (inc height)]

                    (if (not (.. (:tx this) (isFinal __adjustedHeight, time)))
                        (do
                            (§ assoc this :non-final (:tx this))
                            :RiskAnalysisResult'NON_FINAL
                        )
                        (do
                            (doseq [#_"Transaction" dep (:dependencies this)]
                                (when (not (.. dep (isFinal __adjustedHeight, time)))
                                    (§ assoc this :non-final dep)
                                    (§ return :RiskAnalysisResult'NON_FINAL)
                                )
                            )

                            :RiskAnalysisResult'OK
                        )
                    )
                )
        )
    )

    ;;;
     ; The reason a transaction is considered non-standard, returned by {@link #isStandard(Transaction)}.
     ;;
    #_public
    #_static
    #_enum
    (def RuleViolation'values
    #{
        :RuleViolation'NONE
        :RuleViolation'VERSION
        :RuleViolation'DUST
        :RuleViolation'SHORTEST_POSSIBLE_PUSHDATA
        :RuleViolation'NONEMPTY_STACK ;; Not yet implemented (for post 0.12)
        :RuleViolation'SIGNATURE_CANONICAL_ENCODING
    })

    ;;;
     ; Checks if a transaction is considered "standard" by Bitcoin Core's IsStandardTx and AreInputsStandard functions.
     ;
     ; Note that this method currently only implements a minimum of checks.  More to be added later.
     ;;
    #_public
    #_static
    (§ defn #_"RuleViolation" RiskAnalysis'isStandard [#_"Transaction" tx]
        ;; TODO: Finish this function off.
        (if-not (<= 1 (.. tx (getVersion)) 1)
            (do
                (.. RiskAnalysis'log (warn "TX considered non-standard due to unknown version number {}", (.. tx (getVersion))))
                :RuleViolation'VERSION
            )
            (let [#_"List<TransactionOutput>" outputs (.. tx (getOutputs))]
                (loop-when-recur [#_"int" i 0] (< i (.. outputs (size))) [(inc i)]
                    (let [#_"TransactionOutput" output (.. outputs (get i)) #_"RuleViolation" violation (RiskAnalysis'isOutputStandard output)]
                        (when (not= violation :RuleViolation'NONE)
                            (.. RiskAnalysis'log (warn "TX considered non-standard due to output {} violating rule {}", i, violation))
                            (§ return violation)
                        )
                    )
                )

                (let [#_"List<TransactionInput>" inputs (.. tx (getInputs))]
                    (loop-when-recur [#_"int" i 0] (< i (.. inputs (size))) [(inc i)]
                        (let [#_"TransactionInput" input (.. inputs (get i)) #_"RuleViolation" violation (RiskAnalysis'isInputStandard input)]
                            (when (not= violation :RuleViolation'NONE)
                                (.. RiskAnalysis'log (warn "TX considered non-standard due to input {} violating rule {}", i, violation))
                                (§ return violation)
                            )
                        )
                    )

                    :RuleViolation'NONE
                )
            )
        )
    )

    ;;;
     ; Checks the output to see if the script violates a standardness rule.  Not complete.
     ;;
    #_public
    #_static
    (§ defn #_"RuleViolation" RiskAnalysis'isOutputStandard [#_"TransactionOutput" output]
        (when' (<= 0 (.. output (getValue) (compareTo RiskAnalysis'MIN_ANALYSIS_NONDUST_OUTPUT))) => :RuleViolation'DUST
            (doseq [#_"ScriptChunk" chunk (.. output (getScriptPubKey) (getChunks))]
                (when (and (.. chunk (isPushData)) (not (.. chunk (isShortestPossiblePushData))))
                    (§ return :RuleViolation'SHORTEST_POSSIBLE_PUSHDATA)
                )
            )

            :RuleViolation'NONE
        )
    )

    ;;; Checks if the given input passes some of the AreInputsStandard checks.  Not complete. ;;
    #_public
    #_static
    (§ defn #_"RuleViolation" RiskAnalysis'isInputStandard [#_"TransactionInput" input]
        (doseq [#_"ScriptChunk" chunk (.. input (getScriptSig) (getChunks))]
            (when (and (some? (:data chunk)) (not (.. chunk (isShortestPossiblePushData))))
                (§ return :RuleViolation'SHORTEST_POSSIBLE_PUSHDATA)
            )

            (when (.. chunk (isPushData))
                (let [#_"ECDSASignature" signature]
                    (try
                        (§ ass signature (ECDSASignature'decodeFromDER (:data chunk)))
                        (catch IllegalArgumentException _
                            ;; Doesn't look like a signature.
                            (§ ass signature nil)
                        )
                    )
                    (when (some? signature)
                        (when (not (TransactionSignature'isEncodingCanonical (:data chunk)))
                            (§ return :RuleViolation'SIGNATURE_CANONICAL_ENCODING)
                        )
                        (when (not (.. signature (isCanonical)))
                            (§ return :RuleViolation'SIGNATURE_CANONICAL_ENCODING)
                        )
                    )
                )
            )
        )
        :RuleViolation'NONE
    )

    #_private
    (§ method- #_"RiskAnalysisResult" analyzeIsStandard []
        ;; The IsStandard rules don't apply on testnet, because they're just a safety mechanism and we don't
        ;; want to crush innovation with valueless test coins.
        (cond
            (and (some? (:wallet this)) (not= (-> this :wallet :params :id) NetworkParameters'ID_MAINNET))
            (do
                :RiskAnalysisResult'OK
            )
            (not= (RiskAnalysis'isStandard (:tx this)) :RuleViolation'NONE)
            (do
                (§ assoc this :non-standard (:tx this))
                :RiskAnalysisResult'NON_STANDARD
            )
            :else
            (do
                (doseq [#_"Transaction" dep (:dependencies this)]
                    (when (not= (RiskAnalysis'isStandard dep) :RuleViolation'NONE)
                        (§ assoc this :non-standard dep)
                        (§ return :RiskAnalysisResult'NON_STANDARD)
                    )
                )

                :RiskAnalysisResult'OK
            )
        )
    )

    ;;; Returns the transaction that was found to be non-standard, or null. ;;
    #_nilable
    #_public
    (§ method #_"Transaction" getNonStandard []
        (:non-standard this)
    )

    ;;; Returns the transaction that was found to be non-final, or null. ;;
    #_nilable
    #_public
    (§ method #_"Transaction" getNonFinal []
        (:non-final this)
    )

    #_override
    #_public
    (§ method #_"String" toString []
        (cond
            (not (:analyzed this)) (str "Pending risk analysis for " (.. (:tx this) (getHashAsString)))
            (some? (:non-final this)) (str "Risky due to non-finality of " (.. (:non-final this) (getHashAsString)))
            (some? (:non-standard this)) (str "Risky due to non-standard tx " (.. (:non-standard this) (getHashAsString)))
            :else "Non-risky"
        )
    )
)

;;;
 ; A deterministic key chain is a {@link KeyChain} that uses the
 ; <a href="https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki">BIP 32 standard</a>, as implemented by
 ; {@link DeterministicHierarchy}, to derive all the keys in the keychain from a master seed.
 ; This type of wallet is extremely convenient and flexible.  Although backing up full wallet files is always a good
 ; idea, to recover money only the root seed needs to be preserved and that is a number small enough that it can be
 ; written down on paper or, when represented using a BIP 39 {@link MnemonicCode},
 ; dictated over the phone (possibly even memorized).
 ;
 ; Deterministic key chains have other advantages: parts of the key tree can be selectively revealed to allow
 ; for auditing, and new public keys can be generated without access to the private keys, yielding a highly secure
 ; configuration for web servers which can accept payments into a wallet but not spend from them.  This does not work
 ; quite how you would expect due to a quirk of elliptic curve mathematics and the techniques used to deal with it.
 ; A watching wallet is not instantiated using the public part of the master key as you may imagine.  Instead, you
 ; need to take the account key (first child of the master key) and provide the public part of that to the watching
 ; wallet instead.  You can do this by calling {@link #getWatchingKey()} and then serializing it with
 ; {@link DeterministicKey#serializePubB58(NetworkParameters)}.  The resulting
 ; "xpub..." string encodes sufficient information about the account key to create a watching chain via
 ; {@link DeterministicKey#deserializeB58(DeterministicKey, String, NetworkParameters)}
 ; (with null as the first parameter) and then
 ; {@link DeterministicKeyChain#DeterministicKeyChain(DeterministicKey)}.
 ;
 ; This class builds on {@link DeterministicHierarchy} and {@link DeterministicKey}
 ; by adding support for serialization to and from protobufs, and encryption of parts of the key tree.  Internally it
 ; arranges itself as per the BIP 32 spec, with the seed being used to derive a master key, which is then used to derive
 ; an account key, the account key is used to derive two child keys called the <i>internal</i> and <i>external</i> parent
 ; keys (for change and handing out addresses respectively) and finally the actual leaf keys that users use hanging off
 ; the end.  The leaf keys are special in that they don't internally store the private part at all, instead choosing to
 ; rederive the private key from the parent when needed for signing.  This simplifies the design for encrypted key chains.
 ;
 ; The key chain manages a <i>lookahead zone</i>.  This zone is required because when scanning the chain, you don't
 ; know exactly which keys might receive payments.  The user may have handed out several addresses and received payments
 ; on them, but for latency reasons the block chain is requested from remote peers in bulk, meaning you must
 ; "look ahead" when calculating keys to put in the Bloom filter.  The default lookahead zone is 100 keys, meaning
 ; if the user hands out more than 100 addresses and receives payment on them before the chain is next scanned, some
 ; transactions might be missed.  100 is a reasonable choice for consumer wallets running on CPU constrained devices.
 ; For industrial wallets that are receiving keys all the time, a higher value is more appropriate.  Ideally DKC and
 ; the wallet would know how to adjust this value automatically, but that's not implemented at the moment.
 ;
 ; In fact the real size of the lookahead zone is larger than requested, by default, it's one third larger.  This
 ; is because the act of deriving new keys means recalculating the Bloom filters and this is an expensive operation.
 ; Thus, to ensure we don't have to recalculate on every single new key/address requested or seen we add more buffer
 ; space and only extend the lookahead zone when that buffer is exhausted.  For example with a lookahead zone of 100
 ; keys, you can request 33 keys before more keys will be calculated and the Bloom filter rebuilt and rebroadcast.
 ; But even when you are requesting the 33rd key, you will still be looking 100 keys ahead.
 ;
 ; @author Andreas Schildbach
 ;;
#_suppress #_[ "PublicStaticCollectionField" ]
#_public
(§ class DeterministicKeyChain (§ implements KeyChain)
    #_private
    #_static
    (def- #_"Logger" DeterministicKeyChain'log (LoggerFactory/getLogger DeterministicKeyChain))
    #_public
    #_static
    (def #_"String" DeterministicKeyChain'DEFAULT_PASSPHRASE_FOR_MNEMONIC "")

    #_protected
    (§ field #_"ReentrantLock" :lock (Threading'lock "DeterministicKeyChain"))

    #_private
    (§ field- #_"DeterministicHierarchy" :hierarchy)
    #_nilable
    #_private
    (§ field- #_"DeterministicKey" :root-key)
    #_nilable
    #_private
    (§ field- #_"DeterministicSeed" :seed)

    ;; Paths through the key tree.  External keys are ones that are communicated to other parties.  Internal keys are
    ;; keys created for change addresses, coinbases, mixing, etc - anything that isn't communicated.  The distinction
    ;; is somewhat arbitrary but can be useful for audits.  The first number is the "account number" but we don't use
    ;; that feature yet.  In future we might hand out different accounts for cases where we wish to hand payers
    ;; a payment request that can generate lots of addresses independently.
    ;; The account path may be overridden by subclasses.
    #_public
    #_static
    (def #_"ImmutableList<ChildNumber>" DeterministicKeyChain'ACCOUNT_ZERO_PATH (ImmutableList/of ChildNumber'ZERO_HARDENED))
    #_public
    #_static
    (def #_"ImmutableList<ChildNumber>" DeterministicKeyChain'EXTERNAL_SUBPATH (ImmutableList/of ChildNumber'ZERO))
    #_public
    #_static
    (def #_"ImmutableList<ChildNumber>" DeterministicKeyChain'INTERNAL_SUBPATH (ImmutableList/of ChildNumber'ONE))
    #_public
    #_static
    (def #_"ImmutableList<ChildNumber>" DeterministicKeyChain'EXTERNAL_PATH (HDUtils'concat DeterministicKeyChain'ACCOUNT_ZERO_PATH, DeterministicKeyChain'EXTERNAL_SUBPATH))
    #_public
    #_static
    (def #_"ImmutableList<ChildNumber>" DeterministicKeyChain'INTERNAL_PATH (HDUtils'concat DeterministicKeyChain'ACCOUNT_ZERO_PATH, DeterministicKeyChain'INTERNAL_SUBPATH))
    ;; m / 44' / 0' / 0'
    #_public
    #_static
    (def #_"ImmutableList<ChildNumber>" DeterministicKeyChain'BIP44_ACCOUNT_ZERO_PATH (ImmutableList/of (ChildNumber. 44, true), ChildNumber'ZERO_HARDENED, ChildNumber'ZERO_HARDENED))

    ;; We try to ensure we have at least this many keys ready and waiting to be handed out via getKey().  See docs
    ;; for getLookaheadSize() for more info on what this is for.  The -1 value means it hasn't been calculated yet.
    ;; For new chains it's set to whatever the default is, unless overridden by setLookaheadSize.  For deserialized
    ;; chains, it will be calculated on demand from the number of loaded keys.
    #_private
    #_static
    (def- #_"int" DeterministicKeyChain'LAZY_CALCULATE_LOOKAHEAD -1)
    #_protected
    (§ field #_"int" :lookahead-size 100)
    ;; The lookahead threshold causes us to batch up creation of new keys to minimize the frequency of Bloom filter
    ;; regenerations, which are expensive and will (in future) trigger chain download stalls/retries.  One third is
    ;; an efficiency tradeoff.
    #_protected
    (§ field #_"int" :lookahead-threshold (.. this (calcDefaultLookaheadThreshold)))

    #_private
    (§ method- #_"int" calcDefaultLookaheadThreshold []
        (quot (:lookahead-size this) 3)
    )

    ;; The parent keys for external keys (handed out to other people) and internal keys (used for change addresses).
    #_private
    (§ field- #_"DeterministicKey" :external-parent-key)
    #_private
    (§ field- #_"DeterministicKey" :internal-parent-key)
    ;; How many keys on each path have actually been used.  This may be fewer than the number that have been
    ;; deserialized or held in memory, because of the lookahead zone.
    #_private
    (§ field- #_"int" :issued-external-keys)
    #_private
    (§ field- #_"int" :issued-internal-keys)
    ;; A counter that is incremented each time a key in the lookahead threshold zone is marked as used and lookahead
    ;; is triggered.  The Wallet/KCG reads these counters and combines them so it can tell the Peer whether to throw
    ;; away the current block (and any future blocks in the same download batch) and restart chain sync once a new filter
    ;; has been calculated.  This field isn't persisted to the wallet as it's only relevant within a network session.
    #_private
    (§ field- #_"int" :key-lookahead-epoch)

    ;; We simplify by wrapping a basic key chain and that way we get some functionality like key lookup and event
    ;; listeners "for free".  All keys in the key tree appear here, even if they aren't meant to be used for
    ;; receiving money.
    #_private
    (§ field- #_"BasicKeyChain" :basic-key-chain)

    ;; If set this chain is following another chain in a married KeyChainGroup.
    #_private
    (§ field- #_"boolean" :is-following)

    ;; Holds a number of signatures required to spend.  It's the N from N-of-M CHECKMULTISIG script for P2SH transactions
    ;; and always 1 for other transaction types.
    #_protected
    (§ field #_"int" :sigs-required-to-spend 1)

    #_public
    #_static
    (§ class DeterministicKeyChainBuilder #_"<T extends DeterministicKeyChainBuilder<T>>"
        #_protected
        (§ field #_"SecureRandom" :random)
        #_protected
        (§ field #_"int" :bits 128)
        #_protected
        (§ field #_"String" :passphrase)
        #_protected
        (§ field #_"long" :seed-creation-time-secs)
        #_protected
        (§ field #_"byte[]" :entropy)
        #_protected
        (§ field #_"DeterministicSeed" :seed)
        #_protected
        (§ field #_"DeterministicKey" :watching-key)

        #_protected
        (§ constructor DeterministicKeyChainBuilder []
            this
        )

        #_suppress #_[ "unchecked" ]
        #_protected
        (§ method #_"T" self []
            (cast T this)
        )

        ;;;
         ; Creates a deterministic key chain starting from the given entropy.  All keys yielded by this chain will be the
         ; same if the starting entropy is the same.  You should provide the creation time in seconds since the UNIX epoch
         ; for the seed: this lets us know from what part of the chain we can expect to see derived keys appear.
         ;;
        #_public
        (§ method #_"T" entropy [#_"byte[]" entropy]
            (§ assoc this :entropy entropy)
            (.. this (self))
        )

        ;;;
         ; Creates a deterministic key chain starting from the given seed.  All keys yielded by this chain will be the same
         ; if the starting seed is the same.
         ;;
        #_public
        (§ method #_"T" seed [#_"DeterministicSeed" seed]
            (§ assoc this :seed seed)
            (.. this (self))
        )

        ;;;
         ; Generates a new key chain with entropy selected randomly from the given {@link java.security.SecureRandom} object
         ; and of the requested size in bits.  The derived seed is further protected with a user selected passphrase (see BIP 39).
         ;
         ; @param random The random number generator - use new SecureRandom().
         ; @param bits The number of bits of entropy to use when generating entropy.  Either 128 (default), 192 or 256.
         ;;
        #_public
        (§ method #_"T" random [#_"SecureRandom" random, #_"int" bits]
            (§ assoc this :random random)
            (§ assoc this :bits bits)
            (.. this (self))
        )

        ;;;
         ; Generates a new key chain with 128 bits of entropy selected randomly from the given {@link java.security.SecureRandom}
         ; object.  The derived seed is further protected with a user selected passphrase (see BIP 39).
         ;
         ; @param random The random number generator - use new SecureRandom().
         ;;
        #_public
        (§ method #_"T" random [#_"SecureRandom" random]
            (§ assoc this :random random)
            (.. this (self))
        )

        #_public
        (§ method #_"T" watchingKey [#_"DeterministicKey" __watchingKey]
            (§ assoc this :watching-key __watchingKey)
            (.. this (self))
        )

        #_public
        (§ method #_"T" seedCreationTimeSecs [#_"long" __seedCreationTimeSecs]
            (§ assoc this :seed-creation-time-secs __seedCreationTimeSecs)
            (.. this (self))
        )

        ;;;
         ; The passphrase to use with the generated mnemonic, or null if you would like to use the default empty string.
         ; Currently must be the empty string.
         ;;
        #_public
        (§ method #_"T" passphrase [#_"String" passphrase]
            ;; FIXME: support non-empty passphrase
            (§ assoc this :passphrase passphrase)
            (.. this (self))
        )

        #_public
        (§ method #_"DeterministicKeyChain" build []
            (assert-state (or (some? (:random this)) (some? (:entropy this)) (some? (:seed this)) (some? (:watching-key this))), "Must provide either entropy or random or seed or watchingKey")
            (assert-state (or (nil? (:passphrase this)) (nil? (:seed this))), "Passphrase must not be specified with seed")

            ;; Default passphrase to "" if not specified.
            (cond
                (some? (:random this))
                    (DeterministicKeyChain. (:random this), (:bits this), (.. this (getPassphrase)), (:seed-creation-time-secs this))
                (some? (:entropy this))
                    (DeterministicKeyChain. (:entropy this), (.. this (getPassphrase)), (:seed-creation-time-secs this))
                (some? (:seed this))
                    (do
                        (.. (:seed this) (setCreationTimeSeconds (:seed-creation-time-secs this)))
                        (DeterministicKeyChain. (:seed this))
                    )
                :else
                    (do
                        (.. (:watching-key this) (setCreationTimeSeconds (:seed-creation-time-secs this)))
                        (DeterministicKeyChain. (:watching-key this))
                    )
            )
        )

        #_protected
        (§ method #_"String" getPassphrase []
            (or (:passphrase this) DeterministicKeyChain'DEFAULT_PASSPHRASE_FOR_MNEMONIC)
        )
    )

    #_public
    #_static
    (§ defn #_"DeterministicKeyChainBuilder<?>" DeterministicKeyChain'builder []
        (DeterministicKeyChainBuilder.)
    )

    ;;;
     ; Generates a new key chain with entropy selected randomly from the given {@link java.security.SecureRandom}
     ; object and the default entropy size.
     ;;
    #_public
    (§ constructor DeterministicKeyChain [#_"SecureRandom" random]
        (§ this random, DeterministicSeed'DEFAULT_SEED_ENTROPY_BITS, DeterministicKeyChain'DEFAULT_PASSPHRASE_FOR_MNEMONIC, (Utils'currentTimeSeconds))
        this
    )

    ;;;
     ; Generates a new key chain with entropy selected randomly from the given {@link java.security.SecureRandom}
     ; object and of the requested size in bits.
     ;;
    #_public
    (§ constructor DeterministicKeyChain [#_"SecureRandom" random, #_"int" bits]
        (§ this random, bits, DeterministicKeyChain'DEFAULT_PASSPHRASE_FOR_MNEMONIC, (Utils'currentTimeSeconds))
        this
    )

    ;;;
     ; Generates a new key chain with entropy selected randomly from the given {@link java.security.SecureRandom}
     ; object and of the requested size in bits.  The derived seed is further protected with a user selected passphrase
     ; (see BIP 39).
     ;;
    #_public
    (§ constructor DeterministicKeyChain [#_"SecureRandom" random, #_"int" bits, #_"String" passphrase, #_"long" __seedCreationTimeSecs]
        (§ this (DeterministicSeed. random, bits, passphrase, __seedCreationTimeSecs))
        this
    )

    ;;;
     ; Creates a deterministic key chain starting from the given entropy.  All keys yielded by this chain will be the
     ; same if the starting seed is the same.  You should provide the creation time in seconds since the UNIX epoch
     ; for the seed: this lets us know from what part of the chain we can expect to see derived keys appear.
     ;;
    #_public
    (§ constructor DeterministicKeyChain [#_"byte[]" entropy, #_"String" passphrase, #_"long" __seedCreationTimeSecs]
        (§ this (DeterministicSeed. entropy, passphrase, __seedCreationTimeSecs))
        this
    )

    ;;;
     ; Creates a deterministic key chain that watches the given (public only) root key.  You can use this to calculate
     ; balances and generally follow along, but spending is not possible with such a chain.  Currently you can't use
     ; this method to watch an arbitrary fragment of some other tree, this limitation may be removed in future.
     ;;
    #_public
    (§ constructor DeterministicKeyChain [#_"DeterministicKey" __watchingKey]
        (assert-argument (.. __watchingKey (isPubKeyOnly)), "Private subtrees not currently supported: if you got this key from DKC.getWatchingKey() then use .dropPrivate().dropParent() on it first.")
        (assert-argument (= (.. __watchingKey (getPath) (size)) (.. this (getAccountPath) (size))), "You can only watch an account key currently")

        (§ assoc this :basic-key-chain (BasicKeyChain.))
        (§ assoc this :seed nil)
        (§ assoc this :root-key nil)
        (.. (:basic-key-chain this) (importKey __watchingKey))
        (§ assoc this :hierarchy (DeterministicHierarchy. __watchingKey))
        (.. this (initializeHierarchyUnencrypted __watchingKey))
        this
    )

    ;;;
     ; Creates a deterministic key chain with the given watch key.  If <code>isFollowing</code> flag is set then this
     ; keychain follows some other keychain.  In a married wallet following keychain represents "spouse's" keychain.
     ; Watch key has to be an account key.
     ;;
    #_protected
    (§ constructor DeterministicKeyChain [#_"DeterministicKey" __watchKey, #_"boolean" __isFollowing]
        (§ this __watchKey)
        (§ assoc this :is-following __isFollowing)
        this
    )

    ;;;
     ; Creates a deterministic key chain with the given watch key and that follows some other keychain.
     ; In a married wallet following keychain represents "spouse".
     ; Watch key has to be an account key.
     ;;
    #_public
    #_static
    (§ defn #_"DeterministicKeyChain" DeterministicKeyChain'watchAndFollow [#_"DeterministicKey" __watchKey]
        (DeterministicKeyChain. __watchKey, true)
    )

    ;;;
     ; Creates a key chain that watches the given account key.
     ;;
    #_public
    #_static
    (§ defn #_"DeterministicKeyChain" DeterministicKeyChain'watch [#_"DeterministicKey" __accountKey]
        (DeterministicKeyChain. __accountKey)
    )

    ;;;
     ; Creates a deterministic key chain starting from the given seed.  All keys yielded by this chain will be
     ; the same if the starting seed is the same.
     ;;
    #_protected
    (§ constructor DeterministicKeyChain [#_"DeterministicSeed" seed]
        (§ assoc this :seed seed)
        (§ assoc this :basic-key-chain (BasicKeyChain.))
        (§ assoc this :root-key (HDKeyDerivation'createMasterPrivateKey (ensure some? (.. seed (getSeedBytes)))))
        (.. (:root-key this) (setCreationTimeSeconds (.. seed (getCreationTimeSeconds))))
        (.. (:basic-key-chain this) (importKey (:root-key this)))
        (§ assoc this :hierarchy (DeterministicHierarchy. (:root-key this)))
        (loop-when-recur [#_"int" i 1] (<= i (.. this (getAccountPath) (size))) [(inc i)]
            (.. (:basic-key-chain this) (importKey (.. (:hierarchy this) (get (.. this (getAccountPath) (subList 0, i)), false, true))))
        )
        (.. this (initializeHierarchyUnencrypted (:root-key this)))
        this
    )

    ;;; Override in subclasses to use a different account derivation path. ;;
    #_protected
    (§ method #_"ImmutableList<ChildNumber>" getAccountPath []
        DeterministicKeyChain'ACCOUNT_ZERO_PATH
    )

    ;; Derives the account path keys and inserts them into the basic key chain.
    ;; This is important to preserve their order for serialization, amongst other things.
    #_private
    (§ method- #_"void" initializeHierarchyUnencrypted [#_"DeterministicKey" __baseKey]
        (§ assoc this :external-parent-key (.. (:hierarchy this) (deriveChild (.. this (getAccountPath)), false, false, ChildNumber'ZERO)))
        (§ assoc this :internal-parent-key (.. (:hierarchy this) (deriveChild (.. this (getAccountPath)), false, false, ChildNumber'ONE)))
        (.. (:basic-key-chain this) (importKey (:external-parent-key this)))
        (.. (:basic-key-chain this) (importKey (:internal-parent-key this)))
        nil
    )

    ;;; Returns a freshly derived key that has not been returned by this method before. ;;
    #_override
    #_public
    (§ method #_"DeterministicKey" getKey [#_"KeyPurpose" purpose]
        (.. this (getKeys purpose, 1) (get 0))
    )

    ;;; Returns freshly derived key/s that have not been returned by this method before. ;;
    #_override
    #_public
    (§ method #_"List<DeterministicKey>" getKeys [#_"KeyPurpose" purpose, #_"int" __numberOfKeys]
        (assert-argument (< 0 __numberOfKeys))
        (.. (:lock this) (lock))
        (try
            ;; Map both REFUND and RECEIVE_KEYS to the same branch for now.  Refunds are a feature of the BIP 70
            ;; payment protocol.  Later we may wish to map it to a different branch (in a new wallet version?).
            ;; This would allow a watching wallet to only be able to see inbound payments, but not change
            ;; (i.e. spends) or refunds.  Might be useful for auditing ...
            (let [[#_"int" index #_"DeterministicKey" __parentKey]
                    (condp =? purpose
                        [:KeyPurpose'RECEIVE_FUNDS :KeyPurpose'REFUND]
                            (do
                                (§ update this :issued-external-keys + __numberOfKeys)
                                [(:issued-external-keys this) (:external-parent-key this)]
                            )
                        [:KeyPurpose'AUTHENTICATION :KeyPurpose'CHANGE]
                            (do
                                (§ update this :issued-internal-keys + __numberOfKeys)
                                [(:issued-internal-keys this) (:internal-parent-key this)]
                            )
                        (throw (UnsupportedOperationException.))
                    )]
                ;; Optimization: potentially do a very quick key generation for just the number of keys we need if we
                ;; didn't already create them, ignoring the configured lookahead size.  This ensures we'll be able to
                ;; retrieve the keys in the following loop, but if we're totally fresh and didn't get a chance to
                ;; calculate the lookahead keys yet, this will not block waiting to calculate 100+ EC point multiplies.
                ;; On slow/crappy Android phones looking ahead 100 keys can take ~5 seconds but the OS will kill us
                ;; if we block for just one second on the UI thread.  Because UI threads may need an address in order
                ;; to render the screen, we need getKeys to be fast even if the wallet is totally brand new and lookahead
                ;; didn't happen yet.
                ;;
                ;; It's safe to do this because when a network thread tries to calculate a Bloom filter, we'll go ahead
                ;; and calculate the full lookahead zone there, so network requests will always use the right amount.
                (let [#_"List<DeterministicKey>" lookahead (.. this (maybeLookAhead __parentKey, index, 0, 0))]
                    (.. (:basic-key-chain this) (importKeys lookahead))
                    (let [#_"List<DeterministicKey>" keys (ArrayList. #_"<>" __numberOfKeys)]
                        (loop-when-recur [#_"int" i 0] (< i __numberOfKeys) [(inc i)]
                            (let [#_"ImmutableList<ChildNumber>" path (HDUtils'append (.. __parentKey (getPath)), (ChildNumber. (+ (- index __numberOfKeys) i), false))
                                  #_"DeterministicKey" k (.. (:hierarchy this) (get path, false, false))]
                                ;; Just a last minute sanity check before we hand the key out to the app for usage.  This isn't
                                ;; inspired by any real problem reports from bitcoinj users, but I've heard of cases via the grapevine
                                ;; of places that lost money due to bitflips causing addresses to not match keys.  Of course in an
                                ;; environment with flaky RAM there's no real way to always win: bitflips could be introduced at any
                                ;; other layer.  But as we're potentially retrieving from long term storage here, check anyway.
                                (.. this (checkForBitFlip k))
                                (.. keys (add k))
                            )
                        )
                        (§ return keys)
                    )
                )
            )
            (finally
                (.. (:lock this) (unlock))
            )
        )
    )

    #_private
    (§ method- #_"void" checkForBitFlip [#_"DeterministicKey" k]
        (let [#_"DeterministicKey" parent (ensure some? (.. k (getParent)))
              #_"byte[]" rederived (:key-bytes (HDKeyDerivation'deriveChildKeyBytesFromPublic parent, (.. k (getChildNumber)), :PublicDerivationMode'WITH_INVERSION))
              #_"byte[]" actual (.. k (getPubKey))]
            (when (not (Arrays/equals rederived, actual))
                (throw (IllegalStateException. (String/format Locale/US, "Bit-flip check failed: %s vs %s", (Arrays/toString rederived), (Arrays/toString actual))))
            )
        )
        nil
    )

    ;;;
     ; Mark the DeterministicKey as used.
     ; Also correct the issued{Internal|External}Keys counter, because all lower children seem to be requested already.
     ; If the counter was updated, we also might trigger lookahead.
     ;;
    #_public
    (§ method #_"DeterministicKey" markKeyAsUsed [#_"DeterministicKey" k]
        (let [#_"int" __numChildren (inc (.. k (getChildNumber) (i)))]

            (cond (= (.. k (getParent)) (:internal-parent-key this))
                (do
                    (when (< (:issued-internal-keys this) __numChildren)
                        (§ assoc this :issued-internal-keys __numChildren)
                        (.. this (maybeLookAhead))
                    )
                )
                (= (.. k (getParent)) (:external-parent-key this))
                (do
                    (when (< (:issued-external-keys this) __numChildren)
                        (§ assoc this :issued-external-keys __numChildren)
                        (.. this (maybeLookAhead))
                    )
                )
            )
            k
        )
    )

    #_public
    (§ method #_"DeterministicKey" findKeyFromPubHash [#_"byte[]" __pubkeyHash]
        (.. (:lock this) (lock))
        (try
            (cast DeterministicKey (.. (:basic-key-chain this) (findKeyFromPubHash __pubkeyHash)))
            (finally
                (.. (:lock this) (unlock))
            )
        )
    )

    #_public
    (§ method #_"DeterministicKey" findKeyFromPubKey [#_"byte[]" pubkey]
        (.. (:lock this) (lock))
        (try
            (cast DeterministicKey (.. (:basic-key-chain this) (findKeyFromPubKey pubkey)))
            (finally
                (.. (:lock this) (unlock))
            )
        )
    )

    ;;;
     ; Mark the DeterministicKeys as used, if they match the pubkeyHash.
     ; See {@link DeterministicKeyChain#markKeyAsUsed(DeterministicKey)} for more info on this.
     ;;
    #_nilable
    #_public
    (§ method #_"DeterministicKey" markPubHashAsUsed [#_"byte[]" __pubkeyHash]
        (.. (:lock this) (lock))
        (try
            (let [#_"DeterministicKey" k (cast DeterministicKey (.. (:basic-key-chain this) (findKeyFromPubHash __pubkeyHash)))]
                (when (some? k)
                    (.. this (markKeyAsUsed k))
                )
                k
            )
            (finally
                (.. (:lock this) (unlock))
            )
        )
    )

    ;;;
     ; Mark the DeterministicKeys as used, if they match the pubkey.
     ; See {@link DeterministicKeyChain#markKeyAsUsed(DeterministicKey)} for more info on this.
     ;;
    #_nilable
    #_public
    (§ method #_"DeterministicKey" markPubKeyAsUsed [#_"byte[]" pubkey]
        (.. (:lock this) (lock))
        (try
            (let [#_"DeterministicKey" k (cast DeterministicKey (.. (:basic-key-chain this) (findKeyFromPubKey pubkey)))]
                (when (some? k)
                    (.. this (markKeyAsUsed k))
                )
                k
            )
            (finally
                (.. (:lock this) (unlock))
            )
        )
    )

    #_override
    #_public
    (§ method #_"boolean" hasKey [#_"ECKey" key]
        (.. (:lock this) (lock))
        (try
            (.. (:basic-key-chain this) (hasKey key))
            (finally
                (.. (:lock this) (unlock))
            )
        )
    )

    ;;; Returns the deterministic key for the given absolute path in the hierarchy. ;;
    #_protected
    (§ method #_"DeterministicKey" getKeyByPath [#_"ChildNumber..." path]
        (.. this (getKeyByPath (ImmutableList/copyOf path)))
    )

    ;;; Returns the deterministic key for the given absolute path in the hierarchy. ;;
    #_protected
    (§ method #_"DeterministicKey" getKeyByPath [#_"List<ChildNumber>" path]
        (.. this (getKeyByPath path, false))
    )

    ;;; Returns the deterministic key for the given absolute path in the hierarchy, optionally creating it. ;;
    #_public
    (§ method #_"DeterministicKey" getKeyByPath [#_"List<ChildNumber>" path, #_"boolean" create]
        (.. (:hierarchy this) (get path, false, create))
    )

    ;;;
     ; An alias for <code>getKeyByPath(getAccountPath())</code>.
     ;
     ; Use this when you would like to create a watching key chain that follows this one, but can't spend money from it.
     ; The returned key can be serialized and then passed into {@link #watch(DeterministicKey)}
     ; on another system to watch the hierarchy.
     ;
     ; Note that the returned key is not pubkey only unless this key chain already is: the returned key can still
     ; be used for signing etc if the private key bytes are available.
     ;;
    #_public
    (§ method #_"DeterministicKey" getWatchingKey []
        (.. this (getKeyByPath (.. this (getAccountPath))))
    )

    ;;; Returns true if this chain is watch only, meaning it has public keys but no private key. ;;
    #_public
    (§ method #_"boolean" isWatching []
        (.. this (getWatchingKey) (isWatching))
    )

    #_override
    #_public
    (§ method #_"int" numKeys []
        ;; We need to return here the total number of keys including the lookahead zone, not the number
        ;; of keys we have issued via getKey/freshReceiveKey.
        (.. (:lock this) (lock))
        (try
            (.. this (maybeLookAhead))
            (.. (:basic-key-chain this) (numKeys))
            (finally
                (.. (:lock this) (unlock))
            )
        )
    )

    ;;;
     ; Returns number of leaf keys used including both internal and external paths.  This may be fewer
     ; than the number that have been deserialized or held in memory, because of the lookahead zone.
     ;;
    #_public
    (§ method #_"int" numLeafKeysIssued []
        (.. (:lock this) (lock))
        (try
            (+ (:issued-external-keys this) (:issued-internal-keys this))
            (finally
                (.. (:lock this) (unlock))
            )
        )
    )

    #_override
    #_public
    (§ method #_"long" getEarliestKeyCreationTime []
        (if (some? (:seed this)) (.. (:seed this) (getCreationTimeSeconds)) (.. this (getWatchingKey) (getCreationTimeSeconds)))
    )

    #_override
    #_public
    (§ method #_"void" addEventListener [#_"KeyChainEventListener" listener]
        (.. (:basic-key-chain this) (addEventListener listener))
        nil
    )

    #_override
    #_public
    (§ method #_"void" addEventListener [#_"KeyChainEventListener" listener, #_"Executor" executor]
        (.. (:basic-key-chain this) (addEventListener listener, executor))
        nil
    )

    #_override
    #_public
    (§ method #_"boolean" removeEventListener [#_"KeyChainEventListener" listener]
        (.. (:basic-key-chain this) (removeEventListener listener))
    )

    ;;; Returns a list of words that represent the seed or null if this chain is a watching chain. ;;
    #_nilable
    #_public
    (§ method #_"List<String>" getMnemonicCode []
        (.. (:lock this) (lock))
        (try
            (when (some? (:seed this))
                (.. (:seed this) (getMnemonicCode))
            )
            (finally
                (.. (:lock this) (unlock))
            )
        )
    )

    ;;;
     ; Return true if this keychain is following another keychain.
     ;;
    #_public
    (§ method #_"boolean" isFollowing []
        (:is-following this)
    )

    #_override
    #_public
    (§ method #_"List<Protos.Key>" serializeToProtobuf []
        (let [#_"List<Protos.Key>" result (Lists/newArrayList)]
            (.. (:lock this) (lock))
            (try
                (.. result (addAll (.. this (serializeMyselfToProtobuf))))
                (finally
                    (.. (:lock this) (unlock))
                )
            )
            result
        )
    )

    #_protected
    (§ method #_"List<Protos.Key>" serializeMyselfToProtobuf []
        ;; Most of the serialization work is delegated to the basic key chain, which will serialize the bulk of the
        ;; data (handling encryption along the way), and letting us patch it up with the extra data we care about.
        (let [#_"LinkedList<Protos.Key>" entries (Lists/newLinkedList)]
            (when (some? (:seed this))
                (let [#_"Protos.Key.Builder" __mnemonicEntry (BasicKeyChain'serializeEncryptableItem (:seed this))]
                    (.. __mnemonicEntry (setType Protos.Key.Type/DETERMINISTIC_MNEMONIC))
                    (DeterministicKeyChain'serializeSeedEncryptableItem (:seed this), __mnemonicEntry)
                    (.. entries (add (.. __mnemonicEntry (build))))
                )
            )
            (let [#_"Map<ECKey, Protos.Key.Builder>" keys (.. (:basic-key-chain this) (serializeToEditableProtobufs))]
                (doseq [#_"Map.Entry<ECKey, Protos.Key.Builder>" entry (.. keys (entrySet))]
                    (let [#_"DeterministicKey" key (cast DeterministicKey (.. entry (getKey)))
                          #_"Protos.Key.Builder" proto (.. entry (getValue))]
                        (.. proto (setType Protos.Key.Type/DETERMINISTIC_KEY))
                        (let [#_"Protos.DeterministicKey.Builder" __detKey (.. proto (getDeterministicKeyBuilder))]
                            (.. __detKey (setChainCode (ByteString/copyFrom (.. key (getChainCode)))))
                            (doseq [#_"ChildNumber" num (.. key (getPath))]
                                (.. __detKey (addPath (.. num (i))))
                            )
                            (cond (.. key (equals (:external-parent-key this)))
                                (do
                                    (.. __detKey (setIssuedSubkeys (:issued-external-keys this)))
                                    (.. __detKey (setLookaheadSize (:lookahead-size this)))
                                    (.. __detKey (setSigsRequiredToSpend (.. this (getSigsRequiredToSpend))))
                                )
                                (.. key (equals (:internal-parent-key this)))
                                (do
                                    (.. __detKey (setIssuedSubkeys (:issued-internal-keys this)))
                                    (.. __detKey (setLookaheadSize (:lookahead-size this)))
                                    (.. __detKey (setSigsRequiredToSpend (.. this (getSigsRequiredToSpend))))
                                )
                            )
                            ;; Flag the very first key of following keychain.
                            (when (and (.. entries (isEmpty)) (.. this (isFollowing)))
                                (.. __detKey (setIsFollowing true))
                            )
                            ;; HD keys inherit the timestamp of their parent if they have one, so no need to serialize it.
                            (when (some? (.. key (getParent)))
                                (.. proto (clearCreationTimestamp))
                            )
                            (.. entries (add (.. proto (build))))
                        )
                    )
                )
                entries
            )
        )
    )

    ;;;
     ; Returns all the key chains found in the given list of keys.  Typically there will only be one,
     ; but in the case of key rotation it can happen that there are multiple chains found.
     ;;
    #_public
    #_static
    #_throws #_[ "UnreadableWalletException" ]
    (§ defn #_"List<DeterministicKeyChain>" DeterministicKeyChain'fromProtobuf [#_"List<Protos.Key>" keys, #_"KeyChainFactory" factory]
        (let [#_"List<DeterministicKeyChain>" chains (Lists/newLinkedList)
              #_"DeterministicSeed" seed nil #_"DeterministicKeyChain" chain nil
              #_"int" __lookaheadSize -1 #_"int" __sigsRequiredToSpend 1]
            (loop-when-recur [#_"PeekingIterator<Protos.Key>" it (Iterators/peekingIterator (.. keys (iterator)))] (.. it (hasNext)) []
                (let [#_"Protos.Key" key (.. it (next)) #_"Protos.Key.Type" t (.. key (getType))]
                    (cond (= t Protos.Key.Type/DETERMINISTIC_MNEMONIC)
                        (do
                            (when (some? chain)
                                (assert-state (<= 0 __lookaheadSize))

                                (.. chain (setLookaheadSize __lookaheadSize))
                                (.. chain (setSigsRequiredToSpend __sigsRequiredToSpend))
                                (.. chain (maybeLookAhead))
                                (.. chains (add chain))
                                (§ ass chain nil)
                            )
                            (let [#_"long" timestamp (quot (.. key (getCreationTimestamp)) 1000)
                                  #_"String" passphrase DeterministicKeyChain'DEFAULT_PASSPHRASE_FOR_MNEMONIC] ;; FIXME: allow non-empty passphrase
                                (cond (.. key (hasSecretBytes))
                                    (do
                                        (when (.. key (hasEncryptedDeterministicSeed))
                                            (throw (UnreadableWalletException. (str "Malformed key proto: " key)))
                                        )

                                        (let [#_"byte[]" bytes (when (.. key (hasDeterministicSeed)) (.. key (getDeterministicSeed) (toByteArray)))]
                                            (§ ass seed (DeterministicSeed. (.. key (getSecretBytes) (toStringUtf8)), bytes, passphrase, timestamp))
                                        )
                                    )
                                    :else
                                    (do
                                        (throw (UnreadableWalletException. (str "Malformed key proto: " key)))
                                    )
                                )
                            )
                        )
                        (= t Protos.Key.Type/DETERMINISTIC_KEY)
                        (do
                            (when (not (.. key (hasDeterministicKey)))
                                (throw (UnreadableWalletException. (str "Deterministic key missing extra data: " key)))
                            )

                            (let [#_"byte[]" __chainCode (.. key (getDeterministicKey) (getChainCode) (toByteArray))]
                                ;; Deserialize the path through the tree.
                                (let [#_"LinkedList<ChildNumber>" path (Lists/newLinkedList)]
                                    (doseq [#_"int" i (.. key (getDeterministicKey) (getPathList))]
                                        (.. path (add (ChildNumber. i)))
                                    )

                                    ;; Deserialize the public key and path.
                                    (let [#_"LazyECPoint" pubkey (LazyECPoint. (.. ECKey'CURVE (getCurve)), (.. key (getPublicKey) (toByteArray)))
                                          #_"ImmutableList<ChildNumber>" __immutablePath (ImmutableList/copyOf path)]
                                        ;; Possibly create the chain, if we didn't already do so yet.
                                        (let [#_"boolean" watching? false #_"boolean" following? false]
                                            ;; Save previous chain if any if the key is marked as following.  Current key and the next ones
                                            ;; are to be placed in new following key chain.
                                            (when (.. key (getDeterministicKey) (getIsFollowing))
                                                (when (some? chain)
                                                    (assert-state (<= 0 __lookaheadSize))

                                                    (.. chain (setLookaheadSize __lookaheadSize))
                                                    (.. chain (setSigsRequiredToSpend __sigsRequiredToSpend))
                                                    (.. chain (maybeLookAhead))
                                                    (.. chains (add chain))
                                                    (§ ass chain nil)
                                                    (§ ass seed nil)
                                                )
                                                (§ ass following? true)
                                            )

                                            (when (nil? chain)
                                                ;; If this is not a following chain and previous was, this must be married.
                                                (let [#_"boolean" married? (and (not following?) (not (.. chains (isEmpty))) (.. chains (get (dec (.. chains (size)))) (isFollowing)))]
                                                    (cond (nil? seed)
                                                        (do
                                                            (let [#_"DeterministicKey" __accountKey (DeterministicKey. __immutablePath, __chainCode, pubkey, nil, nil)]
                                                                (.. __accountKey (setCreationTimeSeconds (quot (.. key (getCreationTimestamp)) 1000)))
                                                                (§ ass chain (.. factory (makeWatchingKeyChain key, (.. it (peek)), __accountKey, following?, married?)))
                                                                (§ ass watching? true)
                                                            )
                                                        )
                                                        :else
                                                        (do
                                                            (§ ass chain (.. factory (makeKeyChain key, (.. it (peek)), seed, married?)))
                                                            (§ assoc chain :lookahead-size DeterministicKeyChain'LAZY_CALCULATE_LOOKAHEAD)
                                                            ;; If the seed is encrypted, then the chain is incomplete at this point.  However, we will load
                                                            ;; it up below as we parse in the keys.  We just need to check at the end that we've loaded
                                                            ;; everything afterwards.
                                                        )
                                                    )
                                                )
                                            )
                                            ;; Find the parent key assuming this is not the root key, and not an account key for a watching chain.
                                            (let [#_"DeterministicKey" parent nil]
                                                (when (and (not (.. path (isEmpty))) (not watching?))
                                                    (let [#_"ChildNumber" index (.. path (removeLast))]
                                                        (§ ass parent (.. (:hierarchy chain) (get path, false, false)))
                                                        (.. path (add index))
                                                    )
                                                )
                                                (let [#_"DeterministicKey" detkey
                                                        (if (.. key (hasSecretBytes))
                                                            ;; Not encrypted: private key is available.
                                                            (let [#_"BigInteger" priv (BigInteger. 1, (.. key (getSecretBytes) (toByteArray)))]
                                                                (DeterministicKey. __immutablePath, __chainCode, pubkey, priv, parent)
                                                            )
                                                            ;; No secret key bytes and key is not encrypted: either a watching key or private key
                                                            ;; bytes will be rederived on the fly from the parent.
                                                            (DeterministicKey. __immutablePath, __chainCode, pubkey, nil, parent)
                                                        )]
                                                    (when (.. key (hasCreationTimestamp))
                                                        (.. detkey (setCreationTimeSeconds (quot (.. key (getCreationTimestamp)) 1000)))
                                                    )
                                                    (when (not watching?)
                                                        ;; If the non-encrypted case, the non-leaf keys (account, internal, external) have already
                                                        ;; been rederived and inserted at this point.  In the encrypted case though, we can't
                                                        ;; rederive and we must reinsert, potentially building the heirarchy object if need be.
                                                        (cond (= (.. path (size)) 0)
                                                            (do
                                                                ;; Master key.
                                                                (when (nil? (:root-key chain))
                                                                    (§ assoc chain :root-key detkey)
                                                                    (§ assoc chain :hierarchy (DeterministicHierarchy. detkey))
                                                                )
                                                            )
                                                            (= (.. path (size)) (inc (.. chain (getAccountPath) (size))))
                                                            (do
                                                                (cond (= (.. detkey (getChildNumber) (num)) 0)
                                                                    (do
                                                                        (§ assoc chain :external-parent-key detkey)
                                                                        (§ assoc chain :issued-external-keys (.. key (getDeterministicKey) (getIssuedSubkeys)))
                                                                        (§ ass __lookaheadSize (max __lookaheadSize, (.. key (getDeterministicKey) (getLookaheadSize))))
                                                                        (§ ass __sigsRequiredToSpend (.. key (getDeterministicKey) (getSigsRequiredToSpend)))
                                                                    )
                                                                    (= (.. detkey (getChildNumber) (num)) 1)
                                                                    (do
                                                                        (§ assoc chain :internal-parent-key detkey)
                                                                        (§ assoc chain :issued-internal-keys (.. key (getDeterministicKey) (getIssuedSubkeys)))
                                                                    )
                                                                )
                                                            )
                                                        )
                                                    )
                                                    (.. (:hierarchy chain) (putKey detkey))
                                                    (.. (:basic-key-chain chain) (importKey detkey))
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                        )
                    )
                )
            )
            (when (some? chain)
                (assert-state (<= 0 __lookaheadSize))

                (.. chain (setLookaheadSize __lookaheadSize))
                (.. chain (setSigsRequiredToSpend __sigsRequiredToSpend))
                (.. chain (maybeLookAhead))
                (.. chains (add chain))
            )
            chains
        )
    )

    #_override
    #_public
    (§ method #_"int" numBloomFilterEntries []
        (* (.. this (numKeys)) 2)
    )

    #_override
    #_public
    (§ method #_"BloomFilter" getFilter [#_"int" size, #_"double" __falsePositiveRate, #_"long" tweak]
        (.. (:lock this) (lock))
        (try
            (assert-argument (<= (.. this (numBloomFilterEntries)) size))
            (.. this (maybeLookAhead))
            (.. (:basic-key-chain this) (getFilter size, __falsePositiveRate, tweak))
            (finally
                (.. (:lock this) (unlock))
            )
        )
    )

    ;;;
     ; The number of public keys we should pre-generate on each path before they are requested by the app.  This is
     ; required so that when scanning through the chain given only a seed, we can give enough keys to the remote node
     ; via the Bloom filter such that we see transactions that are "from the future", for example transactions created
     ; by a different app that's sharing the same seed, or transactions we made before but we're replaying the chain
     ; given just the seed. The default is 100.
     ;;
    #_public
    (§ method #_"int" getLookaheadSize []
        (.. (:lock this) (lock))
        (try
            (:lookahead-size this)
            (finally
                (.. (:lock this) (unlock))
            )
        )
    )

    ;;;
     ; Sets a new lookahead size.  See {@link #getLookaheadSize()} for details on what this is.  Setting a new size
     ; that's larger than the current size will return immediately and the new size will only take effect next time
     ; a fresh filter is requested (e.g. due to a new peer being connected).  So you should set this before starting
     ; to sync the chain, if you want to modify it.  If you haven't modified the lookahead threshold manually then
     ; it will be automatically set to be a third of the new size.
     ;;
    #_public
    (§ method #_"void" setLookaheadSize [#_"int" n]
        (.. (:lock this) (lock))
        (try
            (let [#_"boolean" readjust? (= (:lookahead-threshold this) (.. this (calcDefaultLookaheadThreshold)))]
                (§ assoc this :lookahead-size n)
                (when readjust?
                    (§ assoc this :lookahead-threshold (.. this (calcDefaultLookaheadThreshold)))
                )
            )
            (finally
                (.. (:lock this) (unlock))
            )
        )
        nil
    )

    ;;;
     ; Sets the threshold for the key pre-generation.  This is used to avoid adding new keys and thus re-calculating
     ; Bloom filters every time a new key is calculated.  Without a lookahead threshold, every time we received
     ; a relevant transaction, we'd extend the lookahead zone and generate a new filter, which is inefficient.
     ;;
    #_public
    (§ method #_"void" setLookaheadThreshold [#_"int" n]
        (.. (:lock this) (lock))
        (try
            (when (<= (:lookahead-size this) n)
                (throw (IllegalArgumentException. "Threshold larger or equal to the lookaheadSize"))
            )

            (§ assoc this :lookahead-threshold n)
            (finally
                (.. (:lock this) (unlock))
            )
        )
        nil
    )

    ;;;
     ; Gets the threshold for the key pre-generation.  See {@link #setLookaheadThreshold(int)} for details on what
     ; this is.  The default is a third of the lookahead size (100 / 3 == 33).  If you don't modify it explicitly,
     ; then this value will always be one third of the lookahead size.
     ;;
    #_public
    (§ method #_"int" getLookaheadThreshold []
        (.. (:lock this) (lock))
        (try
            (if (< (:lookahead-threshold this) (:lookahead-size this)) (:lookahead-threshold this) 0)
            (finally
                (.. (:lock this) (unlock))
            )
        )
    )

    ;;;
     ; Pre-generate enough keys to reach the lookahead size.  You can call this if you need to explicitly invoke
     ; the lookahead procedure, but it's normally unnecessary as it will be done automatically when needed.
     ;;
    #_public
    (§ method #_"void" maybeLookAhead []
        (.. (:lock this) (lock))
        (try
            (let [#_"List<DeterministicKey>" keys (.. this (maybeLookAhead (:external-parent-key this), (:issued-external-keys this)))]
                (.. keys (addAll (.. this (maybeLookAhead (:internal-parent-key this), (:issued-internal-keys this)))))
                (when-not (.. keys (isEmpty))
                    (§ update this :key-lookahead-epoch inc)
                    ;; Batch add all keys at once so there's only one event listener invocation, as this will be listened to
                    ;; by the wallet and used to rebuild/broadcast the Bloom filter.  That's expensive so we don't want to do
                    ;; it more often than necessary.
                    (.. (:basic-key-chain this) (importKeys keys))
                )
            )
            (finally
                (.. (:lock this) (unlock))
            )
        )
        nil
    )

    #_private
    (§ method- #_"List<DeterministicKey>" maybeLookAhead [#_"DeterministicKey" parent, #_"int" issued]
        (assert-state (.. (:lock this) (isHeldByCurrentThread)))

        (.. this (maybeLookAhead parent, issued, (.. this (getLookaheadSize)), (.. this (getLookaheadThreshold))))
    )

    ;;;
     ; Pre-generate enough keys to reach the lookahead size, but only if there are more than the lookaheadThreshold
     ; to be generated, so that the Bloom filter does not have to be regenerated that often.
     ;
     ; The returned mutable list of keys must be inserted into the basic key chain.
     ;;
    #_private
    (§ method- #_"List<DeterministicKey>" maybeLookAhead [#_"DeterministicKey" parent, #_"int" issued, #_"int" __lookaheadSize, #_"int" __lookaheadThreshold]
        (assert-state (.. (:lock this) (isHeldByCurrentThread)))

        (let [#_"int" __numChildren (.. (:hierarchy this) (getNumChildren (.. parent (getPath))))
              #_"int" needed (- (+ issued __lookaheadSize __lookaheadThreshold) __numChildren)]

            (when' (< __lookaheadThreshold needed) => (ArrayList. #_"<>")
                (.. DeterministicKeyChain'log (info "{} keys needed for {} = {} issued + {} lookahead size + {} lookahead threshold - {} num children", needed, (.. parent (getPathAsString)), issued, __lookaheadSize, __lookaheadThreshold, __numChildren))

                (let [#_"List<DeterministicKey>" result (ArrayList. #_"<>" needed)
                      #_"Stopwatch" watch (Stopwatch/createStarted)
                      #_"int" n __numChildren]
                    (loop-when-recur [#_"int" i 0] (< i needed) [(inc i)]
                        (let [#_"DeterministicKey" key (.. (HDKeyDerivation'deriveThisOrNextChildKey parent, n) (dropPrivateBytes))]
                            (.. (:hierarchy this) (putKey key))
                            (.. result (add key))
                            (§ ass n (inc (.. key (getChildNumber) (num))))
                        )
                    )
                    (.. watch (stop))
                    (.. DeterministicKeyChain'log (info "Took {}", watch))
                    result
                )
            )
        )
    )

    ;;; Housekeeping call to call when lookahead might be needed.  Normally called automatically by KeychainGroup. ;;
    #_public
    (§ method #_"void" maybeLookAheadScripts []
        nil
    )

    ;;;
     ; Returns number of keys used on external path.  This may be fewer than the number that have been deserialized
     ; or held in memory, because of the lookahead zone.
     ;;
    #_public
    (§ method #_"int" getIssuedExternalKeys []
        (.. (:lock this) (lock))
        (try
            (:issued-external-keys this)
            (finally
                (.. (:lock this) (unlock))
            )
        )
    )

    ;;;
     ; Returns number of keys used on internal path.  This may be fewer than the number that have been deserialized
     ; or held in memory, because of the lookahead zone.
     ;;
    #_public
    (§ method #_"int" getIssuedInternalKeys []
        (.. (:lock this) (lock))
        (try
            (:issued-internal-keys this)
            (finally
                (.. (:lock this) (unlock))
            )
        )
    )

    ;;; Returns the seed or null if this chain is a watching chain. ;;
    #_nilable
    #_public
    (§ method #_"DeterministicSeed" getSeed []
        (.. (:lock this) (lock))
        (try
            (:seed this)
            (finally
                (.. (:lock this) (unlock))
            )
        )
    )

    ;; For internal usage only.
    (§ method #_"List<ECKey>" getKeys [#_"boolean" __includeLookahead, #_"boolean" __includeParents]
        (let [#_"List<ECKey>" keys (.. (:basic-key-chain this) (getKeys))]
            (when' (not __includeLookahead) => keys
                (let [#_"int" __treeSize (.. (:internal-parent-key this) (getPath) (size))
                      #_"List<ECKey>" __issuedKeys (LinkedList. #_"<>")]
                    (doseq [#_"ECKey" key keys]
                        (let [#_"DeterministicKey" detkey (cast DeterministicKey key)
                              #_"DeterministicKey" parent (.. detkey (getParent))]
                            (when (and (not __includeParents) (nil? parent))
                                (§ continue )
                            )
                            (when (and (not __includeParents) (<= (.. detkey (getPath) (size)) __treeSize))
                                (§ continue )
                            )
                            (when (and (.. (:internal-parent-key this) (equals parent)) (<= (:issued-internal-keys this) (.. detkey (getChildNumber) (i))))
                                (§ continue )
                            )
                            (when (and (.. (:external-parent-key this) (equals parent)) (<= (:issued-external-keys this) (.. detkey (getChildNumber) (i))))
                                (§ continue )
                            )
                            (.. __issuedKeys (add detkey))
                        )
                    )
                    __issuedKeys
                )
            )
        )
    )

    ;;;
     ; Returns only the external keys that have been issued by this chain, lookahead not included.
     ;;
    #_public
    (§ method #_"List<ECKey>" getIssuedReceiveKeys []
        (let [#_"List<ECKey>" keys (ArrayList. #_"<>" (.. this (getKeys false, false)))]
            (loop-when-recur [#_"Iterator<ECKey>" it (.. keys (iterator))] (.. it (hasNext)) []
                (let [#_"DeterministicKey" parent (.. (cast DeterministicKey (.. it (next))) (getParent))]
                    (when (or (nil? parent) (not (.. (:external-parent-key this) (equals parent))))
                        (.. it (remove))
                    )
                )
            )
            keys
        )
    )

    ;;;
     ; Returns leaf keys issued by this chain (including lookahead zone).
     ;;
    #_public
    (§ method #_"List<DeterministicKey>" getLeafKeys []
        (let [#_"ImmutableList.Builder<DeterministicKey>" keys (ImmutableList/builder)]
            (doseq [#_"ECKey" key (.. this (getKeys true, false))]
                (let [#_"DeterministicKey" __dKey (cast DeterministicKey key)]
                    (when (= (.. __dKey (getPath) (size)) (+ (.. this (getAccountPath) (size)) 2))
                        (.. keys (add __dKey))
                    )
                )
            )
            (.. keys (build))
        )
    )

    #_static
    (§ defn #_"void" DeterministicKeyChain'serializeSeedEncryptableItem [#_"DeterministicSeed" seed, #_"Protos.Key.Builder" proto]
        ;; The seed can be missing if we have not derived it yet from the mnemonic.
        ;; This will not normally happen once all the wallets are on the latest code that caches the seed.
        (let [#_"byte[]" secret (.. seed (getSeedBytes))]
            (when (some? secret)
                (.. proto (setDeterministicSeed (ByteString/copyFrom secret)))
            )
        )
        nil
    )

    ;;;
     ; Returns a counter that is incremented each time new keys are generated due to lookahead.
     ; Used by the network code to learn whether to discard the current block and await calculation
     ; of a new filter.
     ;;
    #_public
    (§ method #_"int" getKeyLookaheadEpoch []
        (.. (:lock this) (lock))
        (try
            (:key-lookahead-epoch this)
            (finally
                (.. (:lock this) (unlock))
            )
        )
    )

    ;;;
     ; Whether the keychain is married.  A keychain is married when it vends P2SH addresses from
     ; multiple keychains in a multisig relationship.
     ;
     ; @see MarriedKeyChain
     ;;
    #_public
    (§ method #_"boolean" isMarried []
        false
    )

    ;;; Get redeem data for a key.  Only applicable to married keychains. ;;
    #_public
    (§ method #_"RedeemData" getRedeemData [#_"DeterministicKey" __followedKey]
        (throw (UnsupportedOperationException.))
    )

    ;;; Create a new key and return the matching output script.  Only applicable to married keychains. ;;
    #_public
    (§ method #_"Script" freshOutputScript [#_"KeyPurpose" purpose]
        (throw (UnsupportedOperationException.))
    )

    #_public
    (§ method #_"String" toString [#_"boolean" __includePrivateKeys, #_"NetworkParameters" params]
        (let [#_"DeterministicKey" __watchingKey (.. this (getWatchingKey))
              #_"StringBuilder" sb (StringBuilder.)]
            (cond (some? (:seed this))
                (do
                    (when __includePrivateKeys
                        (let [#_"List<String>" words (.. (:seed this) (getMnemonicCode))]
                            (.. sb (append "Seed as words: ") (append (.. Utils'SPACE_JOINER (join words))) (append "\n"))
                            (.. sb (append "Seed as hex:   ") (append (.. (:seed this) (toHexString))) (append "\n"))
                        )
                    )
                    (.. sb (append "Seed birthday: ") (append (.. (:seed this) (getCreationTimeSeconds))) (append "  [") (append (Utils'dateTimeFormat (* (.. (:seed this) (getCreationTimeSeconds)) 1000))) (append "]\n"))
                )
                :else
                (do
                    (.. sb (append "Key birthday:  ") (append (.. __watchingKey (getCreationTimeSeconds))) (append "  [") (append (Utils'dateTimeFormat (* (.. __watchingKey (getCreationTimeSeconds)) 1000))) (append "]\n"))
                )
            )
            (.. sb (append "Key to watch:  ") (append (.. __watchingKey (serializePubB58 params))) (append "\n"))
            (.. this (formatAddresses __includePrivateKeys, params, sb))
            (.. sb (toString))
        )
    )

    #_protected
    (§ method #_"void" formatAddresses [#_"boolean" __includePrivateKeys, #_"NetworkParameters" params, #_"StringBuilder" builder]
        (doseq [#_"ECKey" key (.. this (getKeys false, true))]
            (.. key (formatKeyWithAddress __includePrivateKeys, builder, params))
        )
        nil
    )

    ;;; The number of signatures required to spend coins received by this keychain. ;;
    #_public
    (§ method #_"void" setSigsRequiredToSpend [#_"int" __sigsRequiredToSpend]
        (§ assoc this :sigs-required-to-spend __sigsRequiredToSpend)
        nil
    )

    ;;;
     ; Returns the number of signatures required to spend transactions for this KeyChain.
     ; It's the N from N-of-M CHECKMULTISIG script for P2SH transactions and always 1 for other transaction types.
     ;;
    #_public
    (§ method #_"int" getSigsRequiredToSpend []
        (:sigs-required-to-spend this)
    )

    ;;; Returns the redeem script by its hash or null if this keychain did not generate the script. ;;
    #_nilable
    #_public
    (§ method #_"RedeemData" findRedeemDataByScriptHash [#_"ByteString" bytes]
        nil
    )
)

;;;
 ; Holds the seed bytes for the BIP32 deterministic wallet algorithm, inside a {@link DeterministicKeyChain}.
 ; The purpose of this wrapper is to simplify the encryption code.
 ;;
#_public
(§ class DeterministicSeed (§ implements EncryptableItem)
    ;; It would take more than 10^12 years to brute-force a 128 bit seed using $1B worth of computing equipment.
    #_public
    #_static
    (def #_"int" DeterministicSeed'DEFAULT_SEED_ENTROPY_BITS 128)
    #_public
    #_static
    (def #_"int" DeterministicSeed'MAX_SEED_ENTROPY_BITS 512)

    #_nilable
    #_private
    (§ field- #_"byte[]" :seed)
    #_nilable
    #_private
    (§ field- #_"List<String>" :mnemonic-code)
    #_private
    (§ field- #_"long" :creation-time-seconds)

    #_public
    #_throws #_[ "UnreadableWalletException" ]
    (§ constructor DeterministicSeed [#_"String" __mnemonicCode, #_"byte[]" seed, #_"String" passphrase, #_"long" secs]
        (§ this (DeterministicSeed'decodeMnemonicCode __mnemonicCode), seed, passphrase, secs)
        this
    )

    #_public
    (§ constructor DeterministicSeed [#_"byte[]" seed, #_"List<String>" mnemonic, #_"long" secs]
        (§ assoc this :seed (ensure some? seed))
        (§ assoc this :mnemonic-code (ensure some? mnemonic))
        (§ assoc this :creation-time-seconds secs)
        this
    )

    ;;;
     ; Constructs a seed from a BIP 39 mnemonic code.
     ; See {@link MnemonicCode} for more details on this scheme.
     ;
     ; @param mnemonicCode A list of words.
     ; @param seed The derived seed, or pass null to derive it from mnemonicCode (slow).
     ; @param passphrase A user supplied passphrase, or an empty string if there is no passphrase.
     ; @param creationTimeSeconds When the seed was originally created, UNIX time.
     ;;
    #_public
    (§ constructor DeterministicSeed [#_"List<String>" __mnemonicCode, #_nilable #_"byte[]" seed, #_"String" passphrase, #_"long" secs]
        (§ this (or seed (MnemonicCode'toSeed __mnemonicCode, (ensure some? passphrase))), __mnemonicCode, secs)
        this
    )

    ;;;
     ; Constructs a seed from a BIP 39 mnemonic code.
     ; See {@link MnemonicCode} for more details on this scheme.
     ;
     ; @param random Entropy source.
     ; @param bits Number of bits, must be divisible by 32.
     ; @param passphrase A user supplied passphrase, or an empty string if there is no passphrase.
     ; @param creationTimeSeconds When the seed was originally created, UNIX time.
     ;;
    #_public
    (§ constructor DeterministicSeed [#_"SecureRandom" random, #_"int" bits, #_"String" passphrase, #_"long" secs]
        (§ this (DeterministicSeed'getEntropy random, bits), (ensure some? passphrase), secs)
        this
    )

    ;;;
     ; Constructs a seed from a BIP 39 mnemonic code.
     ; See {@link MnemonicCode} for more details on this scheme.
     ;
     ; @param entropy Entropy bits, length must be divisible by 32.
     ; @param passphrase A user supplied passphrase, or an empty string if there is no passphrase.
     ; @param creationTimeSeconds When the seed was originally created, UNIX time.
     ;;
    #_public
    (§ constructor DeterministicSeed [#_"byte[]" entropy, #_"String" passphrase, #_"long" secs]
        (assert-argument (= (rem (alength entropy) 4) 0), "entropy size in bits not divisible by 32")
        (assert-argument (<= DeterministicSeed'DEFAULT_SEED_ENTROPY_BITS (* (alength entropy) 8)), "entropy size too small")
        (ensure some? passphrase)

        (try
            (§ assoc this :mnemonic-code (.. MnemonicCode'INSTANCE (toMnemonic entropy)))
            (catch MnemonicLengthException e
                (throw (RuntimeException. e)) ;; Cannot happen.
            )
        )
        (§ assoc this :seed (MnemonicCode'toSeed (:mnemonic-code this), passphrase))
        (§ assoc this :creation-time-seconds secs)
        this
    )

    #_private
    #_static
    (§ defn- #_"byte[]" DeterministicSeed'getEntropy [#_"SecureRandom" random, #_"int" bits]
        (assert-argument (<= bits DeterministicSeed'MAX_SEED_ENTROPY_BITS), "requested entropy size too large")

        (let [#_"byte[]" seed (byte-array (quot bits 8))]
            (.. random (nextBytes seed))
            seed
        )
    )

    #_override
    #_public
    (§ method #_"String" toString []
        (str "DeterministicSeed " (.. this (toHexString)) " " (.. Utils'SPACE_JOINER (join (:mnemonic-code this))))
    )

    ;;; Returns the seed as hex or null if encrypted. ;;
    #_nilable
    #_public
    (§ method #_"String" toHexString []
        (when (some? (:seed this)) (.. Utils'HEX (encode (:seed this))))
    )

    #_nilable
    #_override
    #_public
    (§ method #_"byte[]" getSecretBytes []
        (.. this (getMnemonicAsBytes))
    )

    #_nilable
    #_public
    (§ method #_"byte[]" getSeedBytes []
        (:seed this)
    )

    #_override
    #_public
    (§ method #_"long" getCreationTimeSeconds []
        (:creation-time-seconds this)
    )

    #_public
    (§ method #_"void" setCreationTimeSeconds [#_"long" secs]
        (§ assoc this :creation-time-seconds secs)
        nil
    )

    #_private
    (§ method- #_"byte[]" getMnemonicAsBytes []
        (.. Utils'SPACE_JOINER (join (:mnemonic-code this)) (getBytes Charsets/UTF_8))
    )

    #_override
    #_public
    (§ method #_"boolean" equals [#_"Object" o]
        (cond
            (= this o) true
            (or (nil? o) (not= (getClass) (.. o (getClass)))) false
            :else (let [#_"DeterministicSeed" other (cast DeterministicSeed o)]
                (and (= (:creation-time-seconds this) (:creation-time-seconds other)) (Objects/equal (:mnemonic-code this), (:mnemonic-code other)))
            )
        )
    )

    #_override
    #_public
    (§ method #_"int" hashCode []
        (Objects/hashCode (:creation-time-seconds this), nil, (:mnemonic-code this))
    )

    ;;;
     ; Check if our mnemonic is a valid mnemonic phrase for our word list.
     ;
     ; @throws MnemonicException if check fails.
     ;;
    #_public
    #_throws #_[ "MnemonicException" ]
    (§ method #_"void" check []
        (when (some? (:mnemonic-code this))
            (.. MnemonicCode'INSTANCE (check (:mnemonic-code this)))
        )
        nil
    )

    #_throws #_[ "MnemonicException" ]
    (§ method #_"byte[]" getEntropyBytes []
        (.. MnemonicCode'INSTANCE (toEntropy (:mnemonic-code this)))
    )

    ;;; Get the mnemonic code, or null if unknown. ;;
    #_nilable
    #_public
    (§ method #_"List<String>" getMnemonicCode []
        (:mnemonic-code this)
    )

    #_private
    #_static
    (§ defn- #_"List<String>" DeterministicSeed'decodeMnemonicCode [#_"byte[]" __mnemonicCode]
        (DeterministicSeed'decodeMnemonicCode (Utils'toString __mnemonicCode, "UTF-8"))
    )

    #_private
    #_static
    (§ defn- #_"List<String>" DeterministicSeed'decodeMnemonicCode [#_"String" __mnemonicCode]
        (.. (Splitter/on " ") (splitToList __mnemonicCode))
    )
)

;;;
 ; Indicates that an attempt was made to use HD wallet features on a wallet that was deserialized from an old,
 ; pre-HD random wallet without calling upgradeToDeterministic() beforehand.
 ;;
#_public
(§ class DeterministicUpgradeRequiredException (§ extends RuntimeException))

;;;
 ; A filtering coin selector delegates to another coin selector, but won't select outputs spent by the given transactions.
 ;;
#_public
(§ class FilteringCoinSelector (§ implements CoinSelector)
    #_protected
    (§ field #_"CoinSelector" :delegate)
    #_protected
    (§ field #_"HashSet<TransactionOutPoint>" :spent (HashSet. #_"<>"))

    #_public
    (§ constructor FilteringCoinSelector [#_"CoinSelector" delegate]
        (§ assoc this :delegate delegate)
        this
    )

    #_public
    (§ method #_"void" excludeOutputsSpentBy [#_"Transaction" tx]
        (doseq [#_"TransactionInput" input (.. tx (getInputs))]
            (.. (:spent this) (add (:outpoint input)))
        )
        nil
    )

    #_override
    #_public
    (§ method #_"CoinSelection" select [#_"Coin" target, #_"List<TransactionOutput>" candidates]
        (let [#_"Iterator<TransactionOutput>" it (.. candidates (iterator))]
            (while (.. it (hasNext))
                (let [#_"TransactionOutput" output (.. it (next))]
                    (when (.. (:spent this) (contains (.. output (getOutPointFor))))
                        (.. it (remove))
                    )
                )
            )
            (.. (:delegate this) (select target, candidates))
        )
    )
)

;;;
 ; A KeyBag is simply an object that can map public keys, their 160-bit hashes and script hashes to ECKey
 ; and {@link RedeemData} objects.
 ;;
#_public
(§ interface KeyBag
    ;;;
     ; Locates a keypair from the keychain given the hash of the public key.  This is needed when finding out
     ; which key we need to use to redeem a transaction output.
     ;
     ; @return ECKey object or null if no such key was found.
     ;;
    #_nilable
    (§ method #_"ECKey" findKeyFromPubHash [#_"byte[]" __pubkeyHash])

    ;;;
     ; Locates a keypair from the keychain given the raw public key bytes.
     ;
     ; @return ECKey or null if no such key was found.
     ;;
    #_nilable
    (§ method #_"ECKey" findKeyFromPubKey [#_"byte[]" pubkey])

    ;;;
     ; Locates a redeem data (redeem script and keys) from the keychain given the hash of the script.
     ; This is needed when finding out which key and script we need to use to locally sign a P2SH transaction input.
     ; It is assumed that wallet should not have more than one private key for a single P2SH tx for security reasons.
     ;
     ; @return RedeemData object or null if no such data was found.
     ;;
    #_nilable
    (§ method #_"RedeemData" findRedeemDataFromScriptHash [#_"byte[]" __scriptHash])
)

;;;
 ; A KeyChain is a class that stores a collection of keys for a {@link Wallet}.  Key chains are expected
 ; to be able to look up keys given a hash (i.e. address) or pubkey bytes, and provide keys on request
 ; for a given purpose.  They can inform event listeners about new keys being added.
 ;
 ; However it is important to understand what this interface does <i>not</i> provide.  It cannot have keys
 ; imported into it, that you to use a method of a specific key chain instance, such as {@link BasicKeyChain}.
 ; The reason for these restrictions is to support key chains that may be handled by external hardware or software,
 ; or which are derived deterministically from a seed (and thus the notion of importing a key is meaningless).
 ;;
#_public
(§ interface KeyChain
    ;;; Returns true if the given key is in the chain. ;;
    (§ method #_"boolean" hasKey [#_"ECKey" key])

    #_static
    #_enum
    (def KeyPurpose'values
    #{
        :KeyPurpose'RECEIVE_FUNDS
        :KeyPurpose'CHANGE
        :KeyPurpose'REFUND
        :KeyPurpose'AUTHENTICATION
    })

    ;;;
     ; Obtains a number of key/s intended for the given purpose.
     ; The chain may create new key/s, derive, or re-use an old one.
     ;;
    (§ method #_"List<? extends ECKey>" getKeys [#_"KeyPurpose" purpose, #_"int" __numberOfKeys])

    ;;;
     ; Obtains a key intended for the given purpose.
     ; The chain may create a new key, derive one, or re-use an old one.
     ;;
    (§ method #_"ECKey" getKey [#_"KeyPurpose" purpose])

    ;;; Returns a list of keys serialized to the bitcoinj protobuf format. ;;
    (§ method #_"List<Protos.Key>" serializeToProtobuf [])

    ;;; Adds a listener for events that are run when keys are added, on the user thread. ;;
    (§ method #_"void" addEventListener [#_"KeyChainEventListener" listener])

    ;;; Adds a listener for events that are run when keys are added, on the given executor. ;;
    (§ method #_"void" addEventListener [#_"KeyChainEventListener" listener, #_"Executor" executor])

    ;;; Removes a listener for events that are run when keys are added. ;;
    (§ method #_"boolean" removeEventListener [#_"KeyChainEventListener" listener])

    ;;; Returns the number of keys this key chain manages. ;;
    (§ method #_"int" numKeys [])

    ;;;
     ; Returns the number of elements this chain wishes to insert into the Bloom filter.
     ; The size passed to {@link #getFilter(int, double, long)} should be at least this large.
     ;;
    (§ method #_"int" numBloomFilterEntries [])

    ;;;
     ; Returns the earliest creation time of keys in this chain, in seconds since the epoch.  This can return
     ; zero if at least one key does not have that data (was created before key timestamping was implemented).
     ; If there are no keys in the wallet, {@link Long#MAX_VALUE} is returned.
     ;;
    (§ method #_"long" getEarliestKeyCreationTime [])

    ;;;
     ; Gets a bloom filter that contains all of the public keys from this chain, and which will provide the given
     ; false-positive rate if it has size elements.  Keep in mind that you will get 2 elements in the bloom filter for
     ; each key in the key chain, for the public key and the hash of the public key (address form).  For this reason
     ; size should be <i>at least</i> 2x the result of {@link #numKeys()}.
     ;
     ; This is used to generate a {@link BloomFilter} which can be {@link BloomFilter#merge(BloomFilter)}d with
     ; another.  It could also be used if you have a specific target for the filter's size.
     ;
     ; See the docs for {@link BloomFilter#BloomFilter(int, double, long)} for a brief
     ; explanation of anonymity when using bloom filters, and for the meaning of these parameters.
     ;;
    (§ method #_"BloomFilter" getFilter [#_"int" size, #_"double" __falsePositiveRate, #_"long" tweak])
)

;;;
 ; A KeyChainGroup is used by the {@link Wallet} and manages: a {@link BasicKeyChain} object
 ; (which will normally be empty), and zero or more {@link DeterministicKeyChain}s.  A deterministic key chain will be
 ; created lazily/on demand when a fresh or current key is requested, possibly being initialized from the private key
 ; bytes of the earliest non rotating key in the basic key chain if one is available, or from a fresh random seed if not.
 ;
 ; If a key rotation time is set, it may be necessary to add a new DeterministicKeyChain with a fresh seed and
 ; also preserve the old one, so funds can be swept from the rotating keys.  In this case, there may be more than
 ; one deterministic chain.  The latest chain is called the active chain and is where new keys are served from.
 ;
 ; The wallet delegates most key management tasks to this class.  It is <b>not</b> thread safe and requires external
 ; locking, i.e. by the wallet lock.  The group then in turn delegates most operations to the key chain objects,
 ; combining their responses together when necessary.
 ;
 ; Deterministic key chains have a concept of a lookahead size and threshold.  Please see the discussion in the
 ; class docs for {@link DeterministicKeyChain} for more information on this topic.
 ;;
#_public
(§ class KeyChainGroup (§ implements KeyBag)
    #_private
    #_static
    (def- #_"Logger" KeyChainGroup'log (LoggerFactory/getLogger KeyChainGroup))

    #_private
    (§ field- #_"BasicKeyChain" :basic)
    #_private
    (§ field- #_"NetworkParameters" :params)
    #_protected
    (§ field #_"LinkedList<DeterministicKeyChain>" :chains)
    ;; currentKeys is used for normal, non-multisig/married wallets.
    ;; currentAddresses is used when we're handing out P2SH addresses.
    ;; They're mutually exclusive.
    #_private
    (§ field- #_"EnumMap<KeyPurpose, DeterministicKey>" :current-keys)
    #_private
    (§ field- #_"EnumMap<KeyPurpose, Address>" :current-addresses)

    #_private
    (§ field- #_"int" :lookahead-size -1)
    #_private
    (§ field- #_"int" :lookahead-threshold -1)

    ;;; Creates a keychain group with no basic chain, and a single, lazily created HD chain. ;;
    #_public
    (§ constructor KeyChainGroup [#_"NetworkParameters" params]
        (§ this params, nil, (ArrayList. #_"<DeterministicKeyChain>" 1), nil)
        this
    )

    ;;; Creates a keychain group with no basic chain, and an HD chain initialized from the given seed. ;;
    #_public
    (§ constructor KeyChainGroup [#_"NetworkParameters" params, #_"DeterministicSeed" seed]
        (§ this params, nil, (ImmutableList/of (DeterministicKeyChain. seed)), nil)
        this
    )

    ;;;
     ; Creates a keychain group with no basic chain, and an HD chain that is watching the given watching key.
     ; This HAS to be an account key as returned by {@link DeterministicKeyChain#getWatchingKey()}.
     ;;
    #_public
    (§ constructor KeyChainGroup [#_"NetworkParameters" params, #_"DeterministicKey" __watchKey]
        (§ this params, nil, (ImmutableList/of (DeterministicKeyChain'watch __watchKey)), nil)
        this
    )

    ;; Used for deserialization.
    #_private
    (§ constructor- KeyChainGroup [#_"NetworkParameters" params, #_nilable #_"BasicKeyChain" __basicKeyChain, #_"List<DeterministicKeyChain>" chains, #_nilable #_"EnumMap<KeyPurpose, DeterministicKey>" __currentKeys]
        (§ assoc this :params params)
        (§ assoc this :basic (or __basicKeyChain (BasicKeyChain.)))
        (§ assoc this :chains (LinkedList. #_"<>" (ensure some? chains)))
        (§ assoc this :current-keys (or __currentKeys (EnumMap. #_"<KeyPurpose, DeterministicKey>" KeyPurpose)))
        (§ assoc this :current-addresses (EnumMap. #_"<>" KeyPurpose))
        (.. this (maybeLookaheadScripts))

        (when (.. this (isMarried))
            (doseq [#_"Map.Entry<KeyPurpose, DeterministicKey>" entry (.. (:current-keys this) (entrySet))]
                (let [#_"Address" address (.. this (makeP2SHOutputScript (.. entry (getValue)), (.. this (getActiveKeyChain))) (getToAddress params))]
                    (.. (:current-addresses this) (put (.. entry (getKey)), address))
                )
            )
        )
        this
    )

    ;; This keeps married redeem data in sync with the number of keys issued.
    #_private
    (§ method- #_"void" maybeLookaheadScripts []
        (doseq [#_"DeterministicKeyChain" chain (:chains this)]
            (.. chain (maybeLookAheadScripts))
        )
        nil
    )

    ;;; Adds a new HD chain to the chains list, and make it the default chain (from which keys are issued). ;;
    #_public
    (§ method #_"void" createAndActivateNewHDChain []
        ;; We can't do auto upgrade here because we don't know the rotation time, if any.
        (let [#_"DeterministicKeyChain" chain (DeterministicKeyChain. (SecureRandom.))]
            (.. this (addAndActivateHDChain chain))
        )
        nil
    )

    ;;;
     ; Adds an HD chain to the chains list, and make it the default chain (from which keys are issued).
     ; Useful for adding a complex pre-configured keychain, such as a married wallet.
     ;;
    #_public
    (§ method #_"void" addAndActivateHDChain [#_"DeterministicKeyChain" chain]
        (.. KeyChainGroup'log (info "Creating and activating a new HD chain: {}", chain))
        (doseq [#_"ListenerRegistration<KeyChainEventListener>" registration (.. (:basic this) (getListeners))]
            (.. chain (addEventListener (:listener registration), (:executor registration)))
        )
        (when (<= 0 (:lookahead-size this))
            (.. chain (setLookaheadSize (:lookahead-size this)))
        )
        (when (<= 0 (:lookahead-threshold this))
            (.. chain (setLookaheadThreshold (:lookahead-threshold this)))
        )
        (.. (:chains this) (add chain))
        nil
    )

    ;;;
     ; Returns a key that hasn't been seen in a transaction yet, and which is suitable for displaying in a wallet
     ; user interface as "a convenient key to receive funds on" when the purpose parameter is
     ; {@link KeyChain.KeyPurpose#RECEIVE_FUNDS}.  The returned key is stable until it's actually seen in a pending
     ; or confirmed transaction, at which point this method will start returning a different key (for each purpose
     ; independently).
     ;
     ; This method is not supposed to be used for married keychains and will throw UnsupportedOperationException
     ; if the active chain is married.
     ; For married keychains use {@link #currentAddress(KeyChain.KeyPurpose)} to get a proper P2SH address.
     ;;
    #_public
    (§ method #_"DeterministicKey" currentKey [#_"KeyPurpose" purpose]
        (let [#_"DeterministicKeyChain" chain (.. this (getActiveKeyChain))]
            (when (.. chain (isMarried))
                (throw (UnsupportedOperationException. "Key is not suitable to receive coins for married keychains. Use freshAddress to get P2SH address instead."))
            )

            (let [#_"DeterministicKey" current (.. (:current-keys this) (get purpose))]
                (when (nil? current)
                    (§ ass current (.. this (freshKey purpose)))
                    (.. (:current-keys this) (put purpose, current))
                )
                current
            )
        )
    )

    ;;;
     ; Returns address for a {@link #currentKey(KeyChain.KeyPurpose)}.
     ;;
    #_public
    (§ method #_"Address" currentAddress [#_"KeyPurpose" purpose]
        (let [#_"DeterministicKeyChain" chain (.. this (getActiveKeyChain))]
            (if (.. chain (isMarried))
                (let [#_"Address" current (.. (:current-addresses this) (get purpose))]
                    (when (nil? current)
                        (§ ass current (.. this (freshAddress purpose)))
                        (.. (:current-addresses this) (put purpose, current))
                    )
                    current
                )
                (.. this (currentKey purpose) (toAddress (:params this)))
            )
        )
    )

    ;;;
     ; Returns a key that has not been returned by this method before (fresh).  You can think of this as being a newly
     ; created key, although the notion of "create" is not really valid for a {@link DeterministicKeyChain}.  When the
     ; parameter is {@link KeyChain.KeyPurpose#RECEIVE_FUNDS}, the returned key is suitable for being put into a receive
     ; coins wizard type UI.  You should use this when the user is definitely going to hand this key out to someone who
     ; wishes to send money.
     ;
     ; This method is not supposed to be used for married keychains and will throw UnsupportedOperationException if
     ; the active chain is married.
     ; For married keychains use {@link #freshAddress(KeyChain.KeyPurpose)} to get a proper P2SH address.
     ;;
    #_public
    (§ method #_"DeterministicKey" freshKey [#_"KeyPurpose" purpose]
        (.. this (freshKeys purpose, 1) (get 0))
    )

    ;;;
     ; Returns a key/s that have not been returned by this method before (fresh).  You can think of this as being newly
     ; created key/s, although the notion of "create" is not really valid for a {@link DeterministicKeyChain}.  When the
     ; parameter is {@link KeyChain.KeyPurpose#RECEIVE_FUNDS}, the returned key is suitable for being put into a receive
     ; coins wizard type UI.  You should use this when the user is definitely going to hand this key out to someone who
     ; wishes to send money.
     ;
     ; This method is not supposed to be used for married keychains and will throw UnsupportedOperationException if
     ; the active chain is married.
     ; For married keychains use {@link #freshAddress(KeyChain.KeyPurpose)} to get a proper P2SH address.
     ;;
    #_public
    (§ method #_"List<DeterministicKey>" freshKeys [#_"KeyPurpose" purpose, #_"int" __numberOfKeys]
        (let [#_"DeterministicKeyChain" chain (.. this (getActiveKeyChain))]
            (when (.. chain (isMarried))
                (throw (UnsupportedOperationException. "Key is not suitable to receive coins for married keychains. Use freshAddress to get P2SH address instead."))
            )

            (.. chain (getKeys purpose, __numberOfKeys)) ;; Always returns the next key along the key chain.
        )
    )

    ;;;
     ; Returns address for a {@link #freshKey(KeyChain.KeyPurpose)}.
     ;;
    #_public
    (§ method #_"Address" freshAddress [#_"KeyPurpose" purpose]
        (let [#_"DeterministicKeyChain" chain (.. this (getActiveKeyChain))]
            (when (.. chain (isMarried))
                (let [#_"Script" __outputScript (.. chain (freshOutputScript purpose))]
                    (assert-state (.. __outputScript (isPayToScriptHash))) ;; Only handle P2SH for now.
                    (let [#_"Address" __freshAddress (Address'fromP2SHScript (:params this), __outputScript)]
                        (.. this (maybeLookaheadScripts))
                        (.. (:current-addresses this) (put purpose, __freshAddress))
                        (§ return __freshAddress)
                    )
                )
            )

            (.. this (freshKey purpose) (toAddress (:params this)))
        )
    )

    ;;; Returns the key chain that's used for generation of fresh/current keys.  This is always the newest HD chain. ;;
    #_public
    (§ method #_"DeterministicKeyChain" getActiveKeyChain []
        (when (.. (:chains this) (isEmpty))
            (when (< 0 (.. (:basic this) (numKeys)))
                (.. KeyChainGroup'log (warn "No HD chain present but random keys are: you probably deserialized an old wallet."))
                ;; If called from the wallet (most likely) it'll try to upgrade us, as it knows the rotation time but not the password.
                (throw (DeterministicUpgradeRequiredException.))
            )
            ;; Otherwise we have no HD chains and no random keys: we are a new born!  So a random seed is fine.
            (.. this (createAndActivateNewHDChain))
        )
        (.. (:chains this) (get (dec (.. (:chains this) (size)))))
    )

    ;;;
     ; Sets the lookahead buffer size for ALL deterministic key chains as well as for following key chains if any exist.
     ; See {@link DeterministicKeyChain#setLookaheadSize(int)} for more information.
     ;;
    #_public
    (§ method #_"void" setLookaheadSize [#_"int" __lookaheadSize]
        (§ assoc this :lookahead-size __lookaheadSize)
        (doseq [#_"DeterministicKeyChain" chain (:chains this)]
            (.. chain (setLookaheadSize __lookaheadSize))
        )
        nil
    )

    ;;;
     ; Gets the current lookahead size being used for ALL deterministic key chains.
     ; See {@link DeterministicKeyChain#setLookaheadSize(int)} for more information.
     ;;
    #_public
    (§ method #_"int" getLookaheadSize []
        (if (= (:lookahead-size this) -1) (.. this (getActiveKeyChain) (getLookaheadSize)) (:lookahead-size this))
    )

    ;;;
     ; Sets the lookahead buffer threshold for ALL deterministic key chains.
     ; See {@link DeterministicKeyChain#setLookaheadThreshold(int)} for more information.
     ;;
    #_public
    (§ method #_"void" setLookaheadThreshold [#_"int" num]
        (doseq [#_"DeterministicKeyChain" chain (:chains this)]
            (.. chain (setLookaheadThreshold num))
        )
        nil
    )

    ;;;
     ; Gets the current lookahead threshold being used for ALL deterministic key chains.
     ; See {@link DeterministicKeyChain#setLookaheadThreshold(int)} for more information.
     ;;
    #_public
    (§ method #_"int" getLookaheadThreshold []
        (if (= (:lookahead-threshold this) -1) (.. this (getActiveKeyChain) (getLookaheadThreshold)) (:lookahead-threshold this))
    )

    ;;; Imports the given keys into the basic chain, creating it if necessary. ;;
    #_public
    (§ method #_"int" importKeys [#_"List<ECKey>" keys]
        (.. (:basic this) (importKeys keys))
    )

    ;;; Imports the given keys into the basic chain, creating it if necessary. ;;
    #_public
    (§ method #_"int" importKeys [#_"ECKey..." keys]
        (.. this (importKeys (ImmutableList/copyOf keys)))
    )

    #_override
    #_nilable
    #_public
    (§ method #_"RedeemData" findRedeemDataFromScriptHash [#_"byte[]" hash]
        ;; Iterate in reverse order, since the active keychain is the one most likely to have the hit.
        (loop-when [#_"Iterator<DeterministicKeyChain>" it (.. (:chains this) (descendingIterator))] (.. it (hasNext))
            (let [#_"RedeemData" redeem (.. it (next) (findRedeemDataByScriptHash (ByteString/copyFrom hash)))]
                (if (some? redeem) redeem (recur it))
            )
        )
    )

    #_public
    (§ method #_"void" markP2SHAddressAsUsed [#_"Address" address]
        (assert-argument (.. address (isP2SHAddress)))

        (let [#_"RedeemData" data (.. this (findRedeemDataFromScriptHash (.. address (getHash160))))]
            (when (some? data) ;; Else not our P2SH address.
                (doseq [#_"ECKey" key (:keys data) #_"DeterministicKeyChain" chain (:chains this)]
                    (let [#_"DeterministicKey" k (.. chain (findKeyFromPubKey (.. key (getPubKey))))]
                        (when (some? k)
                            (.. chain (markKeyAsUsed k))
                            (.. this (maybeMarkCurrentAddressAsUsed address))
                        )
                    )
                )
            )
        )
        nil
    )

    #_nilable
    #_override
    #_public
    (§ method #_"ECKey" findKeyFromPubHash [#_"byte[]" hash]
        (let [#_"ECKey" key (.. (:basic this) (findKeyFromPubHash hash))]
            (if (some? key)
                key
                (do
                    (doseq [#_"DeterministicKeyChain" chain (:chains this)]
                        (§ ass key (.. chain (findKeyFromPubHash hash)))
                        (when (some? key)
                            (§ return key)
                        )
                    )
                    nil
                )
            )
        )
    )

    ;;;
     ; Mark the DeterministicKeys as used, if they match the pubkeyHash.
     ; See {@link DeterministicKeyChain#markKeyAsUsed(DeterministicKey)} for more info on this.
     ;;
    #_public
    (§ method #_"void" markPubKeyHashAsUsed [#_"byte[]" __pubkeyHash]
        (doseq [#_"DeterministicKeyChain" chain (:chains this)]
            (let [#_"DeterministicKey" key (.. chain (markPubHashAsUsed __pubkeyHash))]
                (when (some? key)
                    (.. this (maybeMarkCurrentKeyAsUsed key))
                    (§ return nil)
                )
            )
        )
        nil
    )

    ;;; If the given P2SH address is "current", advance it to a new one. ;;
    #_private
    (§ method- #_"void" maybeMarkCurrentAddressAsUsed [#_"Address" address]
        (assert-argument (.. address (isP2SHAddress)))

        (doseq [#_"Map.Entry<KeyPurpose, Address>" entry (.. (:current-addresses this) (entrySet))]
            (when (and (some? (.. entry (getValue))) (.. entry (getValue) (equals address)))
                (.. KeyChainGroup'log (info "Marking P2SH address as used: {}", address))
                (.. (:current-addresses this) (put (.. entry (getKey)), (.. this (freshAddress (.. entry (getKey))))))
                (§ return nil)
            )
        )
        nil
    )

    ;;; If the given key is "current", advance the current key to a new one. ;;
    #_private
    (§ method- #_"void" maybeMarkCurrentKeyAsUsed [#_"DeterministicKey" key]
        ;; It's OK for currentKeys to be empty here: it means we're a married wallet and the key may be a part of a rotating chain.
        (doseq [#_"Map.Entry<KeyPurpose, DeterministicKey>" entry (.. (:current-keys this) (entrySet))]
            (when (and (some? (.. entry (getValue))) (.. entry (getValue) (equals key)))
                (.. KeyChainGroup'log (info "Marking key as used: {}", key))
                (.. (:current-keys this) (put (.. entry (getKey)), (.. this (freshKey (.. entry (getKey))))))
                (§ return nil)
            )
        )
        nil
    )

    #_public
    (§ method #_"boolean" hasKey [#_"ECKey" key]
        (if (.. (:basic this) (hasKey key))
            true
            (do
                (doseq [#_"DeterministicKeyChain" chain (:chains this)]
                    (when (.. chain (hasKey key))
                        (§ return true)
                    )
                )
                false
            )
        )
    )

    #_nilable
    #_override
    #_public
    (§ method #_"ECKey" findKeyFromPubKey [#_"byte[]" pubkey]
        (let [#_"ECKey" key (.. (:basic this) (findKeyFromPubKey pubkey))]
            (if (some? key)
                key
                (do
                    (doseq [#_"DeterministicKeyChain" chain (:chains this)]
                        (§ ass key (.. chain (findKeyFromPubKey pubkey)))
                        (when (some? key)
                            (§ return key)
                        )
                    )
                    nil
                )
            )
        )
    )

    ;;;
     ; Mark the DeterministicKeys as used, if they match the pubkey.
     ; See {@link DeterministicKeyChain#markKeyAsUsed(DeterministicKey)} for more info on this.
     ;;
    #_public
    (§ method #_"void" markPubKeyAsUsed [#_"byte[]" pubkey]
        (doseq [#_"DeterministicKeyChain" chain (:chains this)]
            (let [#_"DeterministicKey" key (.. chain (markPubKeyAsUsed pubkey))]
                (when (some? key)
                    (.. this (maybeMarkCurrentKeyAsUsed key))
                    (§ return nil)
                )
            )
        )
        nil
    )

    ;;; Returns the number of keys managed by this group, including the lookahead buffers. ;;
    #_public
    (§ method #_"int" numKeys []
        (let [#_"int" result (.. (:basic this) (numKeys))]
            (doseq [#_"DeterministicKeyChain" chain (:chains this)]
                (§ ass result (+ result (.. chain (numKeys))))
            )
            result
        )
    )

    ;;;
     ; Removes a key that was imported into the basic key chain.  You cannot remove deterministic keys.
     ;
     ; @throws IllegalArgumentException if the key is deterministic.
     ;;
    #_public
    (§ method #_"boolean" removeImportedKey [#_"ECKey" key]
        (ensure some? key)
        (assert-argument (not (instance? DeterministicKey key)))

        (.. (:basic this) (removeKey key))
    )

    ;;;
     ; Whether the active keychain is married.  A keychain is married when it vends P2SH addresses
     ; from multiple keychains in a multisig relationship.
     ;
     ; @see MarriedKeyChain
     ;;
    #_public
    (§ method #_"boolean" isMarried []
        (and (not (.. (:chains this) (isEmpty))) (.. this (getActiveKeyChain) (isMarried)))
    )

    ;;;
     ; Returns whether this chain has only watching keys (unencrypted keys with no private part).
     ; Mixed chains are forbidden.
     ;
     ; @throws IllegalStateException if there are no keys, or if there is a mix between watching and non-watching keys.
     ;;
    #_public
    (§ method #_"boolean" isWatching []
        (let [#_"KeyChainState" active
                    (cond
                        (.. (:chains this) (isEmpty))              :KeyChainState'EMPTY
                        (.. this (getActiveKeyChain) (isWatching)) :KeyChainState'WATCHING
                        :else                                      :KeyChainState'REGULAR
                    )
              #_"KeyChainState" basic (.. (:basic this) (isWatching))]
            (cond
                (= basic :KeyChainState'EMPTY)
                    (if (= active :KeyChainState'EMPTY)
                        (throw (IllegalStateException. "Empty key chain group: cannot answer isWatching() query"))
                        (= active :KeyChainState'WATCHING)
                    )
                (= active :KeyChainState'EMPTY)
                    (= basic :KeyChainState'WATCHING)
                (= active basic)
                    (= active :KeyChainState'WATCHING)
                :else
                    (throw (IllegalStateException. "Mix of watching and non-watching keys in wallet"))
            )
        )
    )

    ;;;
     ; Returns a list of the non-deterministic keys that have been imported into the wallet, or the empty list if none.
     ;;
    #_public
    (§ method #_"List<ECKey>" getImportedKeys []
        (.. (:basic this) (getKeys))
    )

    #_public
    (§ method #_"long" getEarliestKeyCreationTime []
        (let [#_"long" time (.. (:basic this) (getEarliestKeyCreationTime))] ;; Long.MAX_VALUE if empty.
            (doseq [#_"DeterministicKeyChain" chain (:chains this)]
                (§ ass time (min time, (.. chain (getEarliestKeyCreationTime))))
            )
            time
        )
    )

    #_public
    (§ method #_"int" getBloomFilterElementCount []
        (let [#_"int" result (.. (:basic this) (numBloomFilterEntries))]
            (doseq [#_"DeterministicKeyChain" chain (:chains this)]
                (§ ass result (+ result (.. chain (numBloomFilterEntries))))
            )
            result
        )
    )

    #_public
    (§ method #_"BloomFilter" getBloomFilter [#_"int" size, #_"double" __falsePositiveRate, #_"long" __nTweak]
        (let [#_"BloomFilter" filter (BloomFilter. size, __falsePositiveRate, __nTweak)]
            (when (< 0 (.. (:basic this) (numKeys)))
                (.. filter (merge (.. (:basic this) (getFilter size, __falsePositiveRate, __nTweak))))
            )

            (doseq [#_"DeterministicKeyChain" chain (:chains this)]
                (.. filter (merge (.. chain (getFilter size, __falsePositiveRate, __nTweak))))
            )
            filter
        )
    )

    #_private
    (§ method- #_"Script" makeP2SHOutputScript [#_"DeterministicKey" __followedKey, #_"DeterministicKeyChain" chain]
        (ScriptBuilder'createP2SHOutputScript (:redeem-script (.. chain (getRedeemData __followedKey))))
    )

    ;;; Adds a listener for events that are run when keys are added, on the user thread. ;;
    #_public
    (§ method #_"void" addEventListener [#_"KeyChainEventListener" listener]
        (.. this (addEventListener listener, Threading'USER_THREAD))
        nil
    )

    ;;; Adds a listener for events that are run when keys are added, on the given executor. ;;
    #_public
    (§ method #_"void" addEventListener [#_"KeyChainEventListener" listener, #_"Executor" executor]
        (ensure some? listener)
        (ensure some? executor)

        (.. (:basic this) (addEventListener listener, executor))
        (doseq [#_"DeterministicKeyChain" chain (:chains this)]
            (.. chain (addEventListener listener, executor))
        )
        nil
    )

    ;;; Removes a listener for events that are run when keys are added. ;;
    #_public
    (§ method #_"boolean" removeEventListener [#_"KeyChainEventListener" listener]
        (ensure some? listener)

        (doseq [#_"DeterministicKeyChain" chain (:chains this)]
            (.. chain (removeEventListener listener))
        )
        (.. (:basic this) (removeEventListener listener))
    )

    ;;; Returns a list of key protobufs obtained by merging the chains. ;;
    #_public
    (§ method #_"List<Protos.Key>" serializeToProtobuf []
        (let [#_"List<Protos.Key>" result (if (some? (:basic this)) (.. (:basic this) (serializeToProtobuf)) (Lists/newArrayList))]

            (doseq [#_"DeterministicKeyChain" chain (:chains this)]
                (let [#_"List<Protos.Key>" protos (.. chain (serializeToProtobuf))]
                    (.. result (addAll protos))
                )
            )
            result
        )
    )

    #_static
    #_throws #_[ "UnreadableWalletException" ]
    (§ defn #_"KeyChainGroup" KeyChainGroup'fromProtobufUnencrypted [#_"NetworkParameters" params, #_"List<Protos.Key>" keys]
        (KeyChainGroup'fromProtobufUnencrypted params, keys, (KeyChainFactory.))
    )

    #_public
    #_static
    #_throws #_[ "UnreadableWalletException" ]
    (§ defn #_"KeyChainGroup" KeyChainGroup'fromProtobufUnencrypted [#_"NetworkParameters" params, #_"List<Protos.Key>" keys, #_"KeyChainFactory" factory]
        (let [#_"BasicKeyChain" __basicKeyChain (BasicKeyChain'fromProtobufUnencrypted keys)
              #_"List<DeterministicKeyChain>" chains (DeterministicKeyChain'fromProtobuf keys, factory)
              #_"EnumMap<KeyPurpose, DeterministicKey>" __currentKeys nil]
            (when (not (.. chains (isEmpty)))
                (§ ass __currentKeys (KeyChainGroup'createCurrentKeysMap chains))
            )
            (KeyChainGroup'extractFollowingKeychains chains)
            (KeyChainGroup. params, __basicKeyChain, chains, __currentKeys)
        )
    )

    ;;;
     ; If the key chain contains only random keys and no deterministic key chains, this method will create a chain
     ; based on the oldest non-rotating private key (i.e. the seed is derived from the old wallet).
     ;
     ; @param keyRotationTimeSecs If non-zero, UNIX time for which keys created before this are assumed to be
     ;                            compromised or weak, those keys will not be used for deterministic upgrade.
     ; @throws IllegalStateException if there is already a deterministic key chain present or if there are
     ;                               no random keys (i.e. this is not an upgrade scenario).
     ; @throws IllegalArgumentException if the rotation time specified excludes all keys.
     ; @return the DeterministicKeyChain that was created by the upgrade.
     ;;
    #_public
    #_throws #_[ "AllRandomKeysRotating" ]
    (§ method #_"DeterministicKeyChain" upgradeToDeterministic [#_"long" __keyRotationTimeSecs]
        (assert-state (< 0 (.. (:basic this) (numKeys))))
        (assert-argument (<= 0 __keyRotationTimeSecs))

        ;; Subtract one because the key rotation time might have been set to the creation time of the first known
        ;; good key, in which case, that's the one we want to find.
        (let [#_"ECKey" __keyToUse (.. (:basic this) (findOldestKeyAfter (dec __keyRotationTimeSecs)))]
            (when (nil? __keyToUse)
                (throw (AllRandomKeysRotating.))
            )

            (if (.. (:chains this) (isEmpty))
                (.. KeyChainGroup'log (info "Auto-upgrading pre-HD wallet to HD!"))
                (.. KeyChainGroup'log (info "Wallet with existing HD chain is being re-upgraded due to change in key rotation time."))
            )

            (.. KeyChainGroup'log (info "Instantiating new HD chain using oldest non-rotating private key (address: {})", (.. __keyToUse (toAddress (:params this)))))
            (let [#_"byte[]" entropy (ensure some? (.. __keyToUse (getSecretBytes)))]
                ;; Private keys should be at least 128 bits long.
                (assert-state (<= (quot DeterministicSeed'DEFAULT_SEED_ENTROPY_BITS 8) (alength entropy)))
                ;; We reduce the entropy here to 128 bits because people like to write their seeds down on paper,
                ;; and 128 bits should be sufficient forever unless the laws of the universe change or ECC is broken;
                ;; in either case we all have bigger problems.
                (§ ass entropy (Arrays/copyOfRange entropy, 0, (quot DeterministicSeed'DEFAULT_SEED_ENTROPY_BITS 8))) ;; Final argument is exclusive range.
                (assert-state (= (alength entropy) (quot DeterministicSeed'DEFAULT_SEED_ENTROPY_BITS 8)))
                (let [#_"String" passphrase "" ;; FIXME: allow non-empty passphrase
                      #_"DeterministicKeyChain" chain (DeterministicKeyChain. entropy, passphrase, (.. __keyToUse (getCreationTimeSeconds)))]
                    (.. (:chains this) (add chain))
                    chain
                )
            )
        )
    )

    ;;; Returns true if the group contains random keys but no HD chains. ;;
    #_public
    (§ method #_"boolean" isDeterministicUpgradeRequired []
        (and (< 0 (.. (:basic this) (numKeys))) (.. (:chains this) (isEmpty)))
    )

    #_private
    #_static
    (§ defn- #_"EnumMap<KeyPurpose, DeterministicKey>" KeyChainGroup'createCurrentKeysMap [#_"List<DeterministicKeyChain>" chains]
        (let [#_"DeterministicKeyChain" __activeChain (.. chains (get (dec (.. chains (size)))))]

            (let [#_"EnumMap<KeyPurpose, DeterministicKey>" __currentKeys (EnumMap. #_"<>" KeyPurpose)]

                ;; Assuming that only RECEIVE and CHANGE keys are being used at the moment, we will treat the latest issued
                ;; external key as current RECEIVE key and latest issued internal key as CHANGE key.  This should be changed
                ;; as soon as other kinds of KeyPurpose are introduced.
                (when (< 0 (.. __activeChain (getIssuedExternalKeys)))
                    (let [#_"DeterministicKey" __currentExternalKey (.. __activeChain (getKeyByPath (HDUtils'append (HDUtils'concat (.. __activeChain (getAccountPath)), DeterministicKeyChain'EXTERNAL_SUBPATH), (ChildNumber. (dec (.. __activeChain (getIssuedExternalKeys)))))))]
                        (.. __currentKeys (put :KeyPurpose'RECEIVE_FUNDS, __currentExternalKey))
                    )
                )

                (when (< 0 (.. __activeChain (getIssuedInternalKeys)))
                    (let [#_"DeterministicKey" __currentInternalKey (.. __activeChain (getKeyByPath (HDUtils'append (HDUtils'concat (.. __activeChain (getAccountPath)), DeterministicKeyChain'INTERNAL_SUBPATH), (ChildNumber. (dec (.. __activeChain (getIssuedInternalKeys)))))))]
                        (.. __currentKeys (put :KeyPurpose'CHANGE, __currentInternalKey))
                    )
                )

                __currentKeys
            )
        )
    )

    #_private
    #_static
    (§ defn- #_"void" KeyChainGroup'extractFollowingKeychains [#_"List<DeterministicKeyChain>" chains]
        ;; Look for following key chains and map them to the watch keys of followed keychains.
        (let [#_"List<DeterministicKeyChain>" __followingChains (Lists/newArrayList)]
            (loop-when-recur [#_"Iterator<DeterministicKeyChain>" it (.. chains (iterator))] (.. it (hasNext)) []
                (let [#_"DeterministicKeyChain" chain (.. it (next))]
                    (cond (.. chain (isFollowing))
                        (do
                            (.. __followingChains (add chain))
                            (.. it (remove))
                        )
                        (not (.. __followingChains (isEmpty)))
                        (do
                            (when (not (instance? MarriedKeyChain chain))
                                (throw (IllegalStateException.))
                            )

                            (.. (cast MarriedKeyChain chain) (setFollowingKeyChains __followingChains))
                            (§ ass __followingChains (Lists/newArrayList))
                        )
                    )
                )
            )
        )
        nil
    )

    #_public
    (§ method #_"String" toString [#_"boolean" __includePrivateKeys]
        (let [#_"StringBuilder" sb (StringBuilder.)]
            (when (some? (:basic this))
                (let [#_"List<ECKey>" keys (.. (:basic this) (getKeys))]
                    (Collections/sort keys, ECKey'AGE_COMPARATOR)
                    (doseq [#_"ECKey" key keys]
                        (.. key (formatKeyWithAddress __includePrivateKeys, sb, (:params this)))
                    )
                )
            )
            (doseq [#_"DeterministicKeyChain" chain (:chains this)]
                (.. sb (append (.. chain (toString __includePrivateKeys, (:params this)))) (append "\n"))
            )
            (.. sb (toString))
        )
    )

    ;;; Returns a copy of the current list of chains. ;;
    #_public
    (§ method #_"List<DeterministicKeyChain>" getDeterministicKeyChains []
        (ArrayList. #_"<>" (:chains this))
    )

    ;;;
     ; Returns a counter that increases (by an arbitrary amount) each time new keys have been calculated
     ; due to lookahead and thus the Bloom filter that was previously calculated has become stale.
     ;;
    #_public
    (§ method #_"int" getCombinedKeyLookaheadEpochs []
        (let [#_"int" epoch 0]
            (doseq [#_"DeterministicKeyChain" chain (:chains this)]
                (§ ass epoch (+ epoch (.. chain (getKeyLookaheadEpoch))))
            )
            epoch
        )
    )
)

;;;
 ; A coin selector that takes all coins assigned to keys created before the given timestamp.
 ; Used as part of the implementation of {@link Wallet#setKeyRotationTime(java.util.Date)}.
 ;;
#_public
(§ class KeyTimeCoinSelector (§ implements CoinSelector)
    #_private
    #_static
    (def- #_"Logger" KeyTimeCoinSelector'log (LoggerFactory/getLogger KeyTimeCoinSelector))

    ;;; A number of inputs chosen to avoid hitting {@link Transaction#MAX_STANDARD_TX_SIZE}. ;;
    #_public
    #_static
    (def #_"int" KeyTimeCoinSelector'MAX_SIMULTANEOUS_INPUTS 600)

    #_private
    (§ field- #_"long" :unix-time-seconds)
    #_private
    (§ field- #_"Wallet" :wallet)
    #_private
    (§ field- #_"boolean" :ignore-pending)

    #_public
    (§ constructor KeyTimeCoinSelector [#_"Wallet" wallet, #_"long" secs, #_"boolean" __ignorePending]
        (§ assoc this :unix-time-seconds secs)
        (§ assoc this :wallet wallet)
        (§ assoc this :ignore-pending __ignorePending)
        this
    )

    #_override
    #_public
    (§ method #_"CoinSelection" select [#_"Coin" target, #_"List<TransactionOutput>" candidates]
        (try
            (let [#_"LinkedList<TransactionOutput>" gathered (Lists/newLinkedList)
                  #_"Coin" __valueGathered Coin'ZERO]
                (doseq [#_"TransactionOutput" output candidates]
                    (when (and (:ignore-pending this) (not (.. this (isConfirmed output))))
                        (§ continue )
                    )

                    ;; Find the key that controls output, assuming it's a regular pay-to-pubkey or pay-to-address output.
                    ;; We ignore any other kind of exotic output on the assumption we can't spend it ourselves.
                    (let [#_"Script" __scriptPubKey (.. output (getScriptPubKey))
                          #_"ECKey" __controllingKey]
                        (cond (.. __scriptPubKey (isSentToRawPubKey))
                            (do
                                (§ ass __controllingKey (.. (:wallet this) (findKeyFromPubKey (.. __scriptPubKey (getPubKey)))))
                            )
                            (.. __scriptPubKey (isSentToAddress))
                            (do
                                (§ ass __controllingKey (.. (:wallet this) (findKeyFromPubHash (.. __scriptPubKey (getPubKeyHash)))))
                            )
                            :else
                            (do
                                (.. KeyTimeCoinSelector'log (info "Skipping tx output {} because it's not of simple form.", output))
                                (§ continue )
                            )
                        )

                        (ensure some? __controllingKey, "Coin selector given output as candidate for which we lack the key")
                        (when (<= (:unix-time-seconds this) (.. __controllingKey (getCreationTimeSeconds)))
                            (§ continue )
                        )

                        ;; It's older than the cutoff time so select.
                        (§ ass __valueGathered (.. __valueGathered (add (.. output (getValue)))))
                        (.. gathered (push output))
                        (when (<= KeyTimeCoinSelector'MAX_SIMULTANEOUS_INPUTS (.. gathered (size)))
                            (.. KeyTimeCoinSelector'log (warn "Reached {} inputs, going further would yield a tx that is too large, stopping here.", (.. gathered (size))))
                            (§ break )
                        )
                    )
                )
                (CoinSelection. __valueGathered, gathered)
            )
            (catch ScriptException e
                (throw (RuntimeException. e)) ;; We should never have problems understanding scripts in our wallet.
            )
        )
    )

    #_private
    (§ method- #_"boolean" isConfirmed [#_"TransactionOutput" output]
        (.. output (getParentTransaction) (getConfidence) (getConfidenceType) (equals ConfidenceType'BUILDING))
    )
)

;;;
 ; A multi-signature keychain using synchronized HD keys (a.k.a HDM).
 ;
 ; This keychain keeps track of following keychains that follow the account key of this keychain.  You can get P2SH
 ; addresses to receive coins to from this chain.  The threshold - sigsRequiredToSpend specifies how many signatures
 ; required to spend transactions for this married keychain.  This value should not exceed the total number of keys
 ; involved (one followed key plus number of following keys), otherwise IllegalArgumentException will be thrown.
 ;
 ; IMPORTANT: As of Bitcoin Core 0.9 all multisig transactions which require more than 3 public keys are non-standard and
 ; such spends won't be processed by peers with default settings, essentially making such transactions almost nonspendable.
 ;
 ; This method will throw an IllegalStateException, if the keychain is already married or already has leaf keys issued.
 ;;
#_public
(§ class MarriedKeyChain (§ extends DeterministicKeyChain)
    ;; The map holds P2SH redeem script and corresponding ECKeys issued by this KeyChainGroup (including lookahead)
    ;; mapped to redeem script hashes.
    #_private
    (§ field- #_"LinkedHashMap<ByteString, RedeemData>" :married-keys-redeem-data (LinkedHashMap. #_"<>"))

    #_private
    (§ field- #_"List<DeterministicKeyChain>" :following-key-chains)

    ;;; Builds a {@link MarriedKeyChain}. ;;
    #_public
    #_static
    (§ class MarriedKeyChainBuilder #_"<T extends DeterministicKeyChainBuilder<T>>" (§ extends DeterministicKeyChainBuilder #_"<T>")
        #_private
        (§ field- #_"List<DeterministicKey>" :following-keys)
        #_private
        (§ field- #_"int" :threshold)

        #_protected
        (§ constructor MarriedKeyChainBuilder []
            this
        )

        #_public
        (§ method #_"T" followingKeys [#_"List<DeterministicKey>" __followingKeys]
            (§ assoc this :following-keys __followingKeys)
            (.. this (self))
        )

        #_public
        (§ method #_"T" followingKeys [#_"DeterministicKey" __followingKey, #_"DeterministicKey" __followingKeys ...]
            (§ assoc this :following-keys (Lists/asList __followingKey, __followingKeys))
            (.. this (self))
        )

        ;;;
         ; Threshold, or <code>((followingKeys.size() + 1) / 2 + 1)</code> (majority) if unspecified.
         ;
         ; IMPORTANT: As of Bitcoin Core 0.9 all multisig transactions which require more than 3 public keys are non-standard and
         ; such spends won't be processed by peers with default settings, essentially making such transactions almost nonspendable.
         ;;
        #_public
        (§ method #_"T" threshold [#_"int" threshold]
            (§ assoc this :threshold threshold)
            (.. this (self))
        )

        #_override
        #_public
        (§ method #_"MarriedKeyChain" build []
            (assert-state (or (some? (:random this)) (some? (:entropy this)) (some? (:seed this)) (some? (:watching-key this))), "Must provide either entropy or random or seed or watchingKey")
            (ensure some? (:following-keys this), "followingKeys must be provided")

            (let [#_"MarriedKeyChain" chain]
                (when (= (:threshold this) 0)
                    (§ assoc this :threshold (inc (quot (inc (.. (:following-keys this) (size))) 2)))
                )

                (cond (some? (:random this))
                    (do
                        (§ ass chain (MarriedKeyChain. (:random this), (:bits this), (.. this (getPassphrase)), (:seed-creation-time-secs this)))
                    )
                    (some? (:entropy this))
                    (do
                        (§ ass chain (MarriedKeyChain. (:entropy this), (.. this (getPassphrase)), (:seed-creation-time-secs this)))
                    )
                    (some? (:seed this))
                    (do
                        (.. (:seed this) (setCreationTimeSeconds (:seed-creation-time-secs this)))
                        (§ ass chain (MarriedKeyChain. (:seed this)))
                    )
                    :else
                    (do
                        (.. (:watching-key this) (setCreationTimeSeconds (:seed-creation-time-secs this)))
                        (§ ass chain (MarriedKeyChain. (:watching-key this)))
                    )
                )

                (.. chain (addFollowingAccountKeys (:following-keys this), (:threshold this)))
                chain
            )
        )
    )

    #_public
    #_static
    (§ defn #_"MarriedKeyChainBuilder<?>" MarriedKeyChain'builder []
        (MarriedKeyChainBuilder.)
    )

    ;; Protobuf deserialization constructors.
    (§ constructor MarriedKeyChain [#_"DeterministicKey" __accountKey]
        (§ super __accountKey, false)
        this
    )

    (§ constructor MarriedKeyChain [#_"DeterministicSeed" seed]
        (§ super seed)
        this
    )

    ;; Builder constructors.
    #_private
    (§ constructor- MarriedKeyChain [#_"SecureRandom" random, #_"int" bits, #_"String" passphrase, #_"long" __seedCreationTimeSecs]
        (§ super random, bits, passphrase, __seedCreationTimeSecs)
        this
    )

    #_private
    (§ constructor- MarriedKeyChain [#_"byte[]" entropy, #_"String" passphrase, #_"long" __seedCreationTimeSecs]
        (§ super entropy, passphrase, __seedCreationTimeSecs)
        this
    )

    (§ method #_"void" setFollowingKeyChains [#_"List<DeterministicKeyChain>" __followingKeyChains]
        (assert-argument (not (.. __followingKeyChains (isEmpty))))
        (§ assoc this :following-key-chains __followingKeyChains)
        nil
    )

    #_override
    #_public
    (§ method #_"boolean" isMarried []
        true
    )

    ;;; Create a new married key and return the matching output script. ;;
    #_override
    #_public
    (§ method #_"Script" freshOutputScript [#_"KeyPurpose" purpose]
        (let [#_"DeterministicKey" __followedKey (.. this (getKey purpose))
              #_"ImmutableList.Builder<ECKey>" keys (.. (ImmutableList/builder #_"ImmutableList<ECKey>") (add __followedKey))]
            (doseq [#_"DeterministicKeyChain" __keyChain (:following-key-chains this)]
                (let [#_"DeterministicKey" __followingKey (.. __keyChain (getKey purpose))]
                    (assert-state (.. __followedKey (getChildNumber) (equals (.. __followingKey (getChildNumber)))), "Following keychains should be in sync")
                    (.. keys (add __followingKey))
                )
            )
            (let [#_"List<ECKey>" __marriedKeys (.. keys (build))
                  #_"Script" __redeemScript (ScriptBuilder'createRedeemScript (:sigs-required-to-spend this), __marriedKeys)]
                (ScriptBuilder'createP2SHOutputScript __redeemScript)
            )
        )
    )

    #_private
    (§ method- #_"List<ECKey>" getMarriedKeysWithFollowed [#_"DeterministicKey" __followedKey]
        (let [#_"ImmutableList.Builder<ECKey>" keys (ImmutableList/builder)]
            (doseq [#_"DeterministicKeyChain" __keyChain (:following-key-chains this)]
                (.. __keyChain (maybeLookAhead))
                (.. keys (add (.. __keyChain (getKeyByPath (.. __followedKey (getPath))))))
            )
            (.. keys (add __followedKey))
            (.. keys (build))
        )
    )

    ;;; Get the redeem data for a key in this married chain. ;;
    #_override
    #_public
    (§ method #_"RedeemData" getRedeemData [#_"DeterministicKey" __followedKey]
        (let [#_"List<ECKey>" __marriedKeys (.. this (getMarriedKeysWithFollowed __followedKey))
              #_"Script" __redeemScript (ScriptBuilder'createRedeemScript (:sigs-required-to-spend this), __marriedKeys)]
            (RedeemData'of __marriedKeys, __redeemScript)
        )
    )

    #_private
    (§ method- #_"void" addFollowingAccountKeys [#_"List<DeterministicKey>" __followingAccountKeys, #_"int" __sigsRequiredToSpend]
        (assert-argument (<= __sigsRequiredToSpend (inc (.. __followingAccountKeys (size)))), "Multisig threshold can't exceed total number of keys")
        (assert-state (= (.. this (numLeafKeysIssued)) 0), "Active keychain already has keys in use")
        (assert-state (nil? (:following-key-chains this)))

        (let [#_"List<DeterministicKeyChain>" __followingKeyChains (Lists/newArrayList)]

            (doseq [#_"DeterministicKey" key __followingAccountKeys]
                (assert-argument (= (.. key (getPath) (size)) (.. this (getAccountPath) (size))), "Following keys have to be account keys")

                (let [#_"DeterministicKeyChain" chain (DeterministicKeyChain'watchAndFollow key)]
                    (when (<= 0 (:lookahead-size this))
                        (.. chain (setLookaheadSize (:lookahead-size this)))
                    )
                    (when (<= 0 (:lookahead-threshold this))
                        (.. chain (setLookaheadThreshold (:lookahead-threshold this)))
                    )
                    (.. __followingKeyChains (add chain))
                )
            )

            (§ assoc this :sigs-required-to-spend __sigsRequiredToSpend)
            (§ assoc this :following-key-chains __followingKeyChains)
        )
        nil
    )

    #_override
    #_public
    (§ method #_"void" setLookaheadSize [#_"int" __lookaheadSize]
        (.. (:lock this) (lock))
        (try
            (.. super (setLookaheadSize __lookaheadSize))

            (when (some? (:following-key-chains this))
                (doseq [#_"DeterministicKeyChain" __followingChain (:following-key-chains this)]
                    (.. __followingChain (setLookaheadSize __lookaheadSize))
                )
            )
            (finally
                (.. (:lock this) (unlock))
            )
        )
        nil
    )

    #_override
    #_public
    (§ method #_"List<Protos.Key>" serializeToProtobuf []
        (let [#_"List<Protos.Key>" result (Lists/newArrayList)]
            (.. (:lock this) (lock))
            (try
                (doseq [#_"DeterministicKeyChain" chain (:following-key-chains this)]
                    (.. result (addAll (.. chain (serializeMyselfToProtobuf))))
                )
                (.. result (addAll (.. this (serializeMyselfToProtobuf))))
                (finally
                    (.. (:lock this) (unlock))
                )
            )
            result
        )
    )

    #_override
    #_protected
    (§ method #_"void" formatAddresses [#_"boolean" __includePrivateKeys, #_"NetworkParameters" params, #_"StringBuilder" sb]
        (doseq [#_"DeterministicKeyChain" __followingChain (:following-key-chains this)]
            (.. sb (append "Following chain:  ") (append (.. __followingChain (getWatchingKey) (serializePubB58 params))) (append "\n"))
        )
        (.. sb (append "\n"))
        (doseq [#_"RedeemData" __redeemData (.. (:married-keys-redeem-data this) (values))]
            (.. this (formatScript (ScriptBuilder'createP2SHOutputScript (:redeem-script __redeemData)), sb, params))
        )
        nil
    )

    #_private
    (§ method- #_"void" formatScript [#_"Script" script, #_"StringBuilder" sb, #_"NetworkParameters" params]
        (.. sb (append "  addr:") (append (.. script (getToAddress params))))
        (.. sb (append "  hash160:") (append (.. Utils'HEX (encode (.. script (getPubKeyHash))))))
        (when (< 0 (.. script (getCreationTimeSeconds)))
            (.. sb (append "  creationTimeSeconds:") (append (.. script (getCreationTimeSeconds))))
        )
        (.. sb (append "\n"))
        nil
    )

    #_override
    #_public
    (§ method #_"void" maybeLookAheadScripts []
        (.. super (maybeLookAheadScripts))

        (let [#_"int" __numLeafKeys (.. this (getLeafKeys) (size))]
            (assert-state (<= (.. (:married-keys-redeem-data this) (size)) __numLeafKeys), "Number of scripts is greater than number of leaf keys")

            (when (not= (.. (:married-keys-redeem-data this) (size)) __numLeafKeys)
                (.. this (maybeLookAhead))
                (doseq [#_"DeterministicKey" __followedKey (.. this (getLeafKeys))]
                    (let [#_"RedeemData" __redeemData (.. this (getRedeemData __followedKey))
                          #_"Script" __scriptPubKey (ScriptBuilder'createP2SHOutputScript (:redeem-script __redeemData))]
                        (.. (:married-keys-redeem-data this) (put (ByteString/copyFrom (.. __scriptPubKey (getPubKeyHash))), __redeemData))
                    )
                )
            )
        )
        nil
    )

    #_nilable
    #_override
    #_public
    (§ method #_"RedeemData" findRedeemDataByScriptHash [#_"ByteString" bytes]
        (.. (:married-keys-redeem-data this) (get bytes))
    )

    #_override
    #_public
    (§ method #_"BloomFilter" getFilter [#_"int" size, #_"double" __falsePositiveRate, #_"long" tweak]
        (.. (:lock this) (lock))
        (let [#_"BloomFilter" filter]
            (try
                (§ ass filter (BloomFilter. size, __falsePositiveRate, tweak))
                (doseq [#_"Map.Entry<ByteString, RedeemData>" entry (.. (:married-keys-redeem-data this) (entrySet))]
                    (.. filter (insert (.. entry (getKey) (toByteArray))))
                    (.. filter (insert (.. entry (getValue) :redeem-script (getProgram))))
                )
                (finally
                    (.. (:lock this) (unlock))
                )
            )
            filter
        )
    )

    #_override
    #_public
    (§ method #_"int" numBloomFilterEntries []
        (.. this (maybeLookAhead))
        (* (.. this (getLeafKeys) (size)) 2)
    )
)

;;;
 ; This class aggregates data required to spend transaction output.
 ;
 ; For pay-to-address and pay-to-pubkey transactions it will have only a single key and CHECKSIG program as redeemScript.
 ; For multisignature transactions there will be multiple keys one of which will be a full key and the rest are watch only,
 ; redeem script will be a CHECKMULTISIG program.  Keys will be sorted in the same order they appear in
 ; a program (lexicographical order).
 ;;
#_public
(§ class RedeemData
    #_public
    (§ field #_"Script" :redeem-script)
    #_public
    (§ field #_"List<ECKey>" :keys)

    #_private
    (§ constructor- RedeemData [#_"List<ECKey>" keys, #_"Script" __redeemScript]
        (§ assoc this :redeem-script __redeemScript)
        (let [#_"List<ECKey>" __sortedKeys (ArrayList. #_"<>" keys)]
            (Collections/sort __sortedKeys, ECKey'PUBKEY_COMPARATOR)
            (§ assoc this :keys __sortedKeys)
            this
        )
    )

    #_public
    #_static
    (§ defn #_"RedeemData" RedeemData'of [#_"List<ECKey>" keys, #_"Script" __redeemScript]
        (RedeemData. keys, __redeemScript)
    )

    ;;;
     ; Creates RedeemData for pay-to-address or pay-to-pubkey input.  Provided key is a single private key
     ; needed to spend such inputs and provided program should be a proper CHECKSIG program.
     ;;
    #_public
    #_static
    (§ defn #_"RedeemData" RedeemData'of [#_"ECKey" key, #_"Script" program]
        (assert-argument (or (.. program (isSentToAddress)) (.. program (isSentToRawPubKey))))

        (when (some? key) (RedeemData. (Collections/singletonList key), program))
    )

    ;;;
     ; Returns the first key that has private bytes.
     ;;
    #_public
    (§ method #_"ECKey" getFullKey []
        (doseq [#_"ECKey" key (:keys this)]
            (when (.. key (hasPrivKey))
                (§ return key)
            )
        )
        nil
    )
)

;;;
 ; A SendRequest gives the wallet information about precisely how to send money to a recipient or set of recipients.
 ; Static methods are provided to help you create SendRequests and there are a few helper methods on the wallet that
 ; just simplify the most common use cases.  You may wish to customize a SendRequest if you want to attach a fee or
 ; modify the change address.
 ;;
#_public
(§ class SendRequest
    ;;;
     ; A transaction, probably incomplete, that describes the outline of what you want to do.  This typically
     ; will mean it has some outputs to the intended destinations, but no inputs or change address (and therefore
     ; no fees) - the wallet will calculate all that for you and update tx later.
     ;
     ; Be careful when adding outputs that you check the min output value
     ; ({@link TransactionOutput#getMinNonDustValue(Coin)}) to avoid the whole transaction being rejected
     ; because one output is dust.
     ;
     ; If there are already inputs to the transaction, make sure their out point has a connected output,
     ; otherwise their value will be added to fee.  Also ensure they are either signed or are spendable by
     ; a wallet key, otherwise the behavior of {@link Wallet#completeTx(Wallet.SendRequest)} is undefined
     ; (likely RuntimeException).
     ;;
    #_public
    (§ field #_"Transaction" :tx)

    ;;;
     ; When emptyWallet is set, all coins selected by the coin selector are sent to the first output in tx
     ; (its value is ignored and set to {@link Wallet#getBalance()} - the fees required
     ; for the transaction).  Any additional outputs are removed.
     ;;
    #_public
    (§ field #_"boolean" :empty-wallet false)

    ;;;
     ; "Change" means the difference between the value gathered by a transactions inputs (the size of which you
     ; don't really control as it depends on who sent you money), and the value being sent somewhere else.  The
     ; change address should be selected from this wallet, normally.  <b>If null this will be chosen for you.</b>
     ;;
    #_public
    (§ field #_"Address" :change-address nil)

    ;;;
     ; A transaction can have a fee attached, which is defined as the difference between the input values
     ; and output values.  Any value taken in that is not provided to an output can be claimed by a miner.  This
     ; is how mining is incentivized in later years of the Bitcoin system when inflation drops.  It also provides
     ; a way for people to prioritize their transactions over others and is used as a way to make denial of service
     ; attacks expensive.
     ;
     ; This is a dynamic fee (in satoshis) which will be added to the transaction for each kilobyte in size
     ; including the first.  This is useful as as miners usually sort pending transactions by their fee per unit size
     ; when choosing which transactions to add to a block.  Note that, to keep this equivalent to Bitcoin Core
     ; definition, a kilobyte is defined as 1000 bytes, not 1024.
     ;;
    #_public
    (§ field #_"Coin" :fee-per-kb (.. (Context'get) (getFeePerKb)))

    ;;;
     ; Requires that there be enough fee for a default Bitcoin Core to at least relay the transaction.
     ; (i.e. ensure the transaction will not be outright rejected by the network).  Defaults to true,
     ; you should only set this to false if you know what you're doing.
     ;
     ; Note that this does not enforce certain fee rules that only apply to transactions which are larger
     ; than 26,000 bytes.  If you get a transaction which is that large, you should set a feePerKb of at least
     ; {@link Transaction#REFERENCE_DEFAULT_MIN_TX_FEE}.
     ;;
    #_public
    (§ field #_"boolean" :ensure-min-required-fee (.. (Context'get) (isEnsureMinRequiredFee)))

    ;;;
     ; If true (the default), the inputs will be signed.
     ;;
    #_public
    (§ field #_"boolean" :sign-inputs true)

    ;;;
     ; If not null, the {@link CoinSelector} to use instead of the wallets default.
     ; Coin selectors are responsible for choosing which transaction outputs (coins) in a wallet to use given
     ; the desired send value amount.
     ;;
    #_public
    (§ field #_"CoinSelector" :coin-selector nil)

    ;;;
     ; If true (the default), the outputs will be shuffled during completion to randomize the location
     ; of the change output, if any.  This is normally what you want for privacy reasons but in unit tests
     ; it can be annoying, so it can be disabled here.
     ;;
    #_public
    (§ field #_"boolean" :shuffle-outputs true)

    ;;;
     ; Specifies what to do with missing signatures left after completing this request.  Default strategy is
     ; to throw an exception on missing signature ({@link MissingSigsMode#THROW}).
     ;
     ; @see MissingSigsMode
     ;;
    #_public
    (§ field #_"MissingSigsMode" :missing-sigs-mode :MissingSigsMode'THROW)

    ;;;
     ; If not null, this exchange rate is recorded with the transaction during completion.
     ;;
    #_public
    (§ field #_"ExchangeRate" :exchange-rate nil)

    ;;;
     ; If not null, this memo is recorded with the transaction during completion.  It can be used to record
     ; the memo of the payment request that initiated the transaction.
     ;;
    #_public
    (§ field #_"String" :memo nil)

    ;;;
     ; If false (default value), tx fee is paid by the sender.  If true, tx fee is paid by the recipient/s.
     ; If there is more than one recipient, the tx fee is split equally between them regardless of output
     ; value and size.
     ;;
    #_public
    (§ field #_"boolean" :recipients-pay-fees false)

    ;; Tracks if this has been passed to wallet.completeTx already: just a safety check.
    (§ field #_"boolean" :completed)

    #_private
    (§ constructor- SendRequest []
        this
    )

    ;;;
     ; Creates a new SendRequest to the given address for the given value.
     ;
     ; Be very careful when value is smaller than {@link Transaction#MIN_NONDUST_OUTPUT} as the transaction
     ; will likely be rejected by the network in this case.
     ;;
    #_public
    #_static
    (§ defn #_"SendRequest" SendRequest'to [#_"Address" destination, #_"Coin" value]
        (let [#_"SendRequest" req (SendRequest.)
              #_"NetworkParameters" parameters (.. destination (getParameters))]

            (ensure some? parameters, "Address is for an unknown network")

            (§ assoc req :tx (Transaction. parameters))
            (.. (:tx req) (addOutput value, destination))
            req
        )
    )

    ;;;
     ; Creates a new SendRequest to the given pubkey for the given value.
     ;
     ; Be careful to check the output's value is reasonable using
     ; {@link TransactionOutput#getMinNonDustValue(Coin)} afterwards or you risk having the transaction
     ; rejected by the network.  Note that using {@link SendRequest#to(Address, Coin)} will result
     ; in a smaller output, and thus the ability to use a smaller output value without rejection.
     ;;
    #_public
    #_static
    (§ defn #_"SendRequest" SendRequest'to [#_"NetworkParameters" params, #_"ECKey" destination, #_"Coin" value]
        (let [#_"SendRequest" req (SendRequest.)]
            (§ assoc req :tx (Transaction. params))
            (.. (:tx req) (addOutput value, destination))
            req
        )
    )

    ;;; Simply wraps a pre-built incomplete transaction provided by you. ;;
    #_public
    #_static
    (§ defn #_"SendRequest" SendRequest'forTx [#_"Transaction" tx]
        (let [#_"SendRequest" req (SendRequest.)]
            (§ assoc req :tx tx)
            req
        )
    )

    #_public
    #_static
    (§ defn #_"SendRequest" SendRequest'emptyWallet [#_"Address" destination]
        (let [#_"SendRequest" req (SendRequest.)
              #_"NetworkParameters" parameters (.. destination (getParameters))]

            (ensure some? parameters, "Address is for an unknown network")

            (§ assoc req :tx (Transaction. parameters))
            (.. (:tx req) (addOutput Coin'ZERO, destination))
            (§ assoc req :empty-wallet true)
            req
        )
    )

    ;;;
     ; Construct a SendRequest for a CPFP (child-pays-for-parent) transaction.  The resulting transaction is
     ; already completed, so you should directly proceed to signing and broadcasting/committing the transaction.
     ; CPFP is currently only supported by a few miners, so use with care.
     ;;
    #_public
    #_static
    (§ defn #_"SendRequest" SendRequest'childPaysForParent [#_"Wallet" wallet, #_"Transaction" parent, #_"Coin" __feeRaise]
        (let [#_"TransactionOutput" __outputToSpend nil]
            (doseq [#_"TransactionOutput" output (.. parent (getOutputs))]
                (when (and (.. output (isMine wallet)) (.. output (isAvailableForSpending)) (.. output (getValue) (isGreaterThan __feeRaise)))
                    (§ ass __outputToSpend output)
                    (§ break )
                )
            )
            ;; TODO: Spend another confirmed output of own wallet if needed.
            (ensure some? __outputToSpend, "Can't find adequately sized output that spends to us")

            (let [#_"Transaction" tx (Transaction. (.. parent (getParams)))]
                (.. tx (addInput __outputToSpend))
                (.. tx (addOutput (.. __outputToSpend (getValue) (subtract __feeRaise)), (.. wallet (freshAddress :KeyPurpose'CHANGE))))
                (.. tx (setPurpose :TransactionPurpose'RAISE_FEE))
                (let [#_"SendRequest" req (SendRequest'forTx tx)]
                    (§ assoc req :completed true)
                    req
                )
            )
        )
    )

    #_public
    #_static
    (§ defn #_"SendRequest" SendRequest'toCLTVPaymentChannel [#_"NetworkParameters" params, #_"Date" __releaseTime, #_"ECKey" from, #_"ECKey" to, #_"Coin" value]
        (let [#_"long" time (quot (.. __releaseTime (getTime)) 1000)]

            (assert-argument (<= Transaction'LOCKTIME_THRESHOLD time), "Release time was too small")

            (SendRequest'toCLTVPaymentChannel params, (BigInteger/valueOf time), from, to, value)
        )
    )

    #_public
    #_static
    (§ defn #_"SendRequest" SendRequest'toCLTVPaymentChannel [#_"NetworkParameters" params, #_"int" __releaseBlock, #_"ECKey" from, #_"ECKey" to, #_"Coin" value]
        (assert-argument (< -1 __releaseBlock Transaction'LOCKTIME_THRESHOLD), "Block number was too large")

        (SendRequest'toCLTVPaymentChannel params, (BigInteger/valueOf __releaseBlock), from, to, value)
    )

    #_public
    #_static
    (§ defn #_"SendRequest" SendRequest'toCLTVPaymentChannel [#_"NetworkParameters" params, #_"BigInteger" time, #_"ECKey" from, #_"ECKey" to, #_"Coin" value]
        (let [#_"SendRequest" req (SendRequest.)
              #_"Script" output (ScriptBuilder'createCLTVPaymentChannelOutput time, from, to)]
            (§ assoc req :tx (Transaction. params))
            (.. (:tx req) (addOutput value, output))
            req
        )
    )

    #_override
    #_public
    (§ method #_"String" toString []
        ;; Print only the user-settable fields.
        (let [#_"MoreObjects.ToStringHelper" helper (.. (MoreObjects/toStringHelper this) (omitNullValues))]
            (.. helper (add "emptyWallet", (:empty-wallet this)))
            (.. helper (add "changeAddress", (:change-address this)))
            (.. helper (add "feePerKb", (:fee-per-kb this)))
            (.. helper (add "ensureMinRequiredFee", (:ensure-min-required-fee this)))
            (.. helper (add "signInputs", (:sign-inputs this)))
            (.. helper (add "coinSelector", (:coin-selector this)))
            (.. helper (add "shuffleOutputs", (:shuffle-outputs this)))
            (.. helper (add "recipientsPayFees", (:recipients-pay-fees this)))
            (.. helper (toString))
        )
    )
)

;;;
 ; Thrown by the {@link WalletSerializer} when the serialized protocol buffer is either corrupted,
 ; internally inconsistent or appears to be from the future.
 ;;
#_public
(§ class UnreadableWalletException (§ extends Exception)
    #_public
    (§ constructor UnreadableWalletException [#_"String" s]
        (§ super s)
        this
    )

    #_public
    (§ constructor UnreadableWalletException [#_"String" s, #_"Throwable" t]
        (§ super s, t)
        this
    )
)

;; To do list:
;;
;; - Take all wallet-relevant data out of Transaction and put it into WalletTransaction.  Make Transaction immutable.
;; - Only store relevant transaction outputs, don't bother storing the rest of the data.  Big RAM saving.
;; - Split block chain and tx output tracking into a superclass that doesn't have any key or spending related code.
;; - Simplify how transactions are tracked and stored: in particular, have the wallet maintain positioning information
;;   for transactions independent of the transactions themselves, so the timeline can be walked without having to
;;   process and sort every single transaction.
;; - Split data persistence out into a backend class and make the wallet transactional, so we can store a wallet
;;   in a database not just in RAM.
;; - Make clearing of transactions able to only rewind the wallet a certain distance instead of all blocks.
;; - Make it scale:
;;     - eliminate all the algorithms with quadratic complexity (or worse).
;;     - don't require everything to be held in RAM at once.
;;     - consider allowing eviction of no longer re-orgable transactions or keys that were used up.
;;
;; Finally, find more ways to break the class up and decompose it.  Currently every time we move code out, other code
;; fills up the lines saved!

;;;
 ; A Wallet stores keys and a record of transactions that send and receive value from those keys.  Using these,
 ; it is able to create new transactions that spend the recorded transactions, and this is the fundamental operation
 ; of the Bitcoin protocol.
 ;
 ; To learn more about this class, read <b><a href="https://bitcoinj.github.io/working-with-the-wallet">working with the wallet.</a></b>
 ;
 ; To fill up a Wallet with transactions, you need to use it in combination with a {@link BlockChain} and various
 ; other objects, see the <a href="https://bitcoinj.github.io/getting-started">Getting started</a> tutorial
 ; on the website to learn more about how to set everything up.
 ;
 ; Wallets can be serialized using protocol buffers.  You need to save the wallet whenever it changes, there is an
 ; auto-save feature that simplifies this for you although you're still responsible for manually triggering a save when
 ; your app is about to quit because the auto-save feature waits a moment before actually committing to disk to avoid IO
 ; thrashing when the wallet is changing very fast (e.g. due to a block chain sync).  See
 ; {@link Wallet#autosaveToFile(java.io.File, long, java.util.concurrent.TimeUnit, WalletFiles.Listener)}
 ; for more information about this.
 ;;
#_public
(§ class Wallet (§ implements NewBestBlockListener, TransactionReceivedInBlockListener, PeerFilterProvider, KeyBag, TransactionBag, ReorganizeListener)
    #_private
    #_static
    (def- #_"Logger" Wallet'log (LoggerFactory/getLogger Wallet))
    #_private
    #_static
    (def- #_"int" Wallet'MINIMUM_BLOOM_DATA_LENGTH 8)

    ;; Ordering: lock > keyChainGroupLock.  KeyChainGroup is protected separately to allow fast querying of current receive
    ;; address even if the wallet itself is busy e.g. saving or processing a big reorg.  Useful for reducing UI latency.
    #_protected
    (§ field #_"ReentrantLock" :lock (Threading'lock "wallet"))
    #_protected
    (§ field #_"ReentrantLock" :key-chain-group-lock (Threading'lock "wallet-keychaingroup"))

    ;; The various pools below give quick access to wallet-relevant transactions by the state they're in:
    ;;
    ;; Pending:  Transactions that didn't make it into the best chain yet.  Pending transactions can be killed if a
    ;;           double spend against them appears in the best chain, in which case they move to the dead pool.
    ;;           If a double spend appears in the pending state as well, we update the confidence type
    ;;           of all txns in conflict to IN_CONFLICT and wait for the miners to resolve the race.
    ;; Unspent:  Transactions that appeared in the best chain and have outputs we can spend.  Note that we store the
    ;;           entire transaction in memory even though for spending purposes we only really need the outputs, the
    ;;           reason being that this simplifies handling of re-orgs.  It would be worth fixing this in future.
    ;; Spent:    Transactions that appeared in the best chain but don't have any spendable outputs.  They're stored
    ;;           here for history browsing/auditing reasons only and in future will probably be flushed out to some
    ;;           other kind of cold storage or just removed.
    ;; Dead:     Transactions that we believe will never confirm get moved here, out of pending.  Note that Bitcoin
    ;;           Core has no notion of dead-ness: the assumption is that double spends won't happen so there's no
    ;;           need to notify the user about them.  We take a more pessimistic approach and try to track the fact
    ;;           that transactions have been double spent so applications can do something intelligent (cancel orders,
    ;;           show to the user in the UI, etc).  A transaction can leave dead and move into spent/unspent if there
    ;;           is a re-org to a chain that doesn't include the double spend.

    #_private
    (§ field- #_"Map<Sha256Hash, Transaction>" :pending)
    #_private
    (§ field- #_"Map<Sha256Hash, Transaction>" :unspent)
    #_private
    (§ field- #_"Map<Sha256Hash, Transaction>" :spent)
    #_private
    (§ field- #_"Map<Sha256Hash, Transaction>" :dead)

    ;; All transactions together.
    #_protected
    (§ field #_"Map<Sha256Hash, Transaction>" :transactions)

    ;; All the TransactionOutput objects that we could spend (ignoring whether we have the private key or not).
    ;; Used to speed up various calculations.
    #_protected
    (§ field #_"HashSet<TransactionOutput>" :my-unspents (Sets/newHashSet))

    ;; Transactions that were dropped by the risk analysis system.  These are not in any pools and not serialized
    ;; to disk.  We have to keep them around because if we ignore a tx because we think it will never confirm, but
    ;; then it actually does confirm and does so within the same network session, remote peers will not resend us
    ;; the tx data along with the Bloom filtered block, as they know we already received it once before
    ;; (so it would be wasteful to repeat).  Thus we keep them around here for a while.  If we drop our network
    ;; connections then the remote peers will forget that we were sent the tx data previously and send it again
    ;; when relaying a filtered merkleblock.
    #_private
    (§ field- #_"LinkedHashMap<Sha256Hash, Transaction>" :risk-dropped (LinkedHashMap. #_"<Sha256Hash, Transaction>"
        (§ anon
            #_override
            #_protected
            (§ method #_"boolean" removeEldestEntry [#_"Map.Entry<Sha256Hash, Transaction>" eldest]
                (< 1000 (.. this (size)))
            )
        )))

    ;; The key chain group is not thread safe, and generally the whole hierarchy of objects should not be mutated
    ;; outside the wallet lock.  So don't expose this object directly via any accessors!
    #_private
    (§ field- #_"KeyChainGroup" :key-chain-group)

    #_protected
    (§ field #_"Context" :context)
    #_protected
    (§ field #_"NetworkParameters" :params)

    #_nilable
    #_private
    (§ field- #_"Sha256Hash" :last-block-seen-hash)
    #_private
    (§ field- #_"int" :last-block-seen-height)
    #_private
    (§ field- #_"long" :last-block-seen-time-secs)

    #_private
    (§ field- #_"CopyOnWriteArrayList<ListenerRegistration<WalletChangeEventListener>>" :change-listeners (CopyOnWriteArrayList. #_"<>"))
    #_private
    (§ field- #_"CopyOnWriteArrayList<ListenerRegistration<WalletCoinsReceivedEventListener>>" :coins-received-listeners (CopyOnWriteArrayList. #_"<>"))
    #_private
    (§ field- #_"CopyOnWriteArrayList<ListenerRegistration<WalletCoinsSentEventListener>>" :coins-sent-listeners (CopyOnWriteArrayList. #_"<>"))
    #_private
    (§ field- #_"CopyOnWriteArrayList<ListenerRegistration<WalletReorganizeEventListener>>" :reorganize-listeners (CopyOnWriteArrayList. #_"<>"))
    #_private
    (§ field- #_"CopyOnWriteArrayList<ListenerRegistration<TransactionConfidenceEventListener>>" :transaction-confidence-listeners (CopyOnWriteArrayList. #_"<>"))

    ;; A listener that relays confidence changes from the transaction confidence object to the wallet event listener,
    ;; as a convenience to API users so they don't have to register on every transaction themselves.
    #_private
    (§ field- #_"TransactionConfidenceListener" :tx-confidence-listener)

    ;; If a TX hash appears in this set then notifyNewBestBlock will ignore it, as its confidence was already set up
    ;; in receive() via Transaction.setBlockAppearance().  As the BlockChain always calls notifyNewBestBlock even if
    ;; it sent transactions to the wallet, without this we'd double count.
    #_private
    (§ field- #_"HashSet<Sha256Hash>" :ignore-next-new-block)
    ;; Whether or not to ignore pending transactions that are considered risky by the configured risk analyzer.
    #_private
    (§ field- #_"boolean" :accept-risky-transactions)

    ;; Stuff for notifying transaction objects that we changed their confidences.  The purpose of this is to avoid
    ;; spuriously sending lots of repeated notifications to listeners that API users aren't really interested in as
    ;; a side effect of how the code is written (e.g. during re-orgs confidence data gets adjusted multiple times).
    #_private
    (§ field- #_"int" :on-wallet-changed-suppressions)
    #_private
    (§ field- #_"boolean" :inside-reorg)
    #_private
    (§ field- #_"Map<Transaction, ConfidenceChangeReason>" :confidence-changed)
    #_protected
    #_volatile
    (§ field #_"WalletFiles" :v-file-manager)
    ;; Object that is used to send transactions asynchronously when the wallet requires it.
    #_protected
    #_volatile
    (§ field #_"TransactionBroadcaster" :v-transaction-broadcaster)
    ;; UNIX time in seconds.  Money controlled by keys created before this time will be automatically respent to
    ;; a key that was created after it.  Useful when you believe some keys have been compromised.
    #_private
    #_volatile
    (§ field- #_"long" :v-key-rotation-timestamp)

    #_protected
    (§ field #_"CoinSelector" :coin-selector (DefaultCoinSelector.))

    ;; User-provided description that may help people keep track of what a wallet is for.
    #_private
    (§ field- #_"String" :description)

    ;; Objects that perform transaction signing.  Applied subsequently one after another.
    #_private
    (§ field- #_"List<TransactionSigner>" :signers)

    ;;;
     ; Creates a new, empty wallet with a randomly chosen seed and no transactions.  Make sure to provide for
     ; sufficient backup!  Any keys will be derived from the seed.  If you want to restore a wallet from disk
     ; instead, see {@link #loadFromFile}.
     ;;
    #_public
    (§ constructor Wallet [#_"NetworkParameters" params]
        (§ this (Context'getOrCreate params))
        this
    )

    ;;;
     ; Creates a new, empty wallet with a randomly chosen seed and no transactions.  Make sure to provide for
     ; sufficient backup!  Any keys will be derived from the seed.  If you want to restore a wallet from disk
     ; instead, see {@link #loadFromFile}.
     ;;
    #_public
    (§ constructor Wallet [#_"Context" context]
        (§ this context, (KeyChainGroup. (.. context (getParams))))
        this
    )

    #_public
    #_static
    (§ defn #_"Wallet" Wallet'fromSeed [#_"NetworkParameters" params, #_"DeterministicSeed" seed]
        (Wallet. params, (KeyChainGroup. params, seed))
    )

    ;;;
     ; Creates a wallet that tracks payments to and from the HD key hierarchy rooted by the given watching key.
     ; A watching key corresponds to account zero in the recommended BIP32 key hierarchy.
     ;;
    #_public
    #_static
    (§ defn #_"Wallet" Wallet'fromWatchingKey [#_"NetworkParameters" params, #_"DeterministicKey" __watchKey]
        (Wallet. params, (KeyChainGroup. params, __watchKey))
    )

    ;;;
     ; Creates a wallet that tracks payments to and from the HD key hierarchy rooted by the given watching key.
     ; A watching key corresponds to account zero in the recommended BIP32 key hierarchy.  The key is specified
     ; in base58 notation and the creation time of the key.  If you don't know the creation time, you can pass
     ; {@link DeterministicHierarchy#BIP32_STANDARDISATION_TIME_SECS}.
     ;;
    #_public
    #_static
    (§ defn #_"Wallet" Wallet'fromWatchingKeyB58 [#_"NetworkParameters" params, #_"String" __watchKeyB58, #_"long" secs]
        (let [#_"DeterministicKey" __watchKey (DeterministicKey'deserializeB58 nil, __watchKeyB58, params)]
            (.. __watchKey (setCreationTimeSeconds secs))
            (Wallet'fromWatchingKey params, __watchKey)
        )
    )

    ;;;
     ; Creates a wallet containing a given set of keys.  All further keys will be derived from the oldest key.
     ;;
    #_public
    #_static
    (§ defn #_"Wallet" Wallet'fromKeys [#_"NetworkParameters" params, #_"List<ECKey>" keys]
        (doseq [#_"ECKey" key keys]
            (assert-argument (not (instance? DeterministicKey key)))
        )

        (let [#_"KeyChainGroup" group (KeyChainGroup. params)]
            (.. group (importKeys keys))
            (Wallet. params, group)
        )
    )

    #_public
    (§ constructor Wallet [#_"NetworkParameters" params, #_"KeyChainGroup" group]
        (§ this (Context'getOrCreate params), group)
        this
    )

    #_private
    (§ constructor- Wallet [#_"Context" context, #_"KeyChainGroup" group]
        (§ assoc this :context context)
        (§ assoc this :params (.. context (getParams)))
        (§ assoc this :key-chain-group (ensure some? group))
        ;; If this keyChainGroup was created fresh just now (new wallet), make HD so a backup can be made immediately
        ;; without having to call current/freshReceiveKey.  If there are already keys in the chain of any kind then
        ;; we're probably being deserialized so leave things alone: the API user can upgrade later.
        (when (= (.. (:key-chain-group this) (numKeys)) 0)
            (.. (:key-chain-group this) (createAndActivateNewHDChain))
        )
        (§ assoc this :unspent (HashMap. #_"<>"))
        (§ assoc this :spent (HashMap. #_"<>"))
        (§ assoc this :pending (HashMap. #_"<>"))
        (§ assoc this :dead (HashMap. #_"<>"))
        (§ assoc this :transactions (HashMap. #_"<>"))
        ;; Use a linked hash map to ensure ordering of event listeners is correct.
        (§ assoc this :confidence-changed (LinkedHashMap. #_"<>"))
        (§ assoc this :signers (ArrayList. #_"<>"))
        (.. this (addTransactionSigner (LocalTransactionSigner.)))
        (.. this (createTransientState))
        this
    )

    #_private
    (§ method- #_"void" createTransientState []
        (§ assoc this :ignore-next-new-block (HashSet. #_"<>"))
        (§ assoc this :tx-confidence-listener (TransactionConfidenceListener.)
        (§ anon
            #_override
            #_public
            (§ method #_"void" onConfidenceChanged [#_"TransactionConfidence" confidence, #_"ConfidenceChangeReason" reason]
                ;; This will run on the user code thread so we shouldn't do anything too complicated here.
                ;; We only want to queue a wallet changed event and auto-save if the number of peers announcing
                ;; the transaction has changed, as that confidence change is made by the networking code which
                ;; doesn't necessarily know at that point which wallets contain which transactions, so it's up
                ;; to us to listen for that.  Other types of confidence changes (type, etc.) are triggered by us,
                ;; so we'll queue up a wallet change event in other parts of the code.
                (when (= reason :ConfidenceChangeReason'SEEN_PEERS)
                    (.. (:lock this) (lock))
                    (try
                        (.. this (checkBalanceFuturesLocked nil))
                        (let [#_"Transaction" tx (.. this (getTransaction (.. confidence (getTransactionHash))))]
                            (.. this (queueOnTransactionConfidenceChanged tx))
                            (.. this (maybeQueueOnWalletChanged))
                        )
                        (finally
                            (.. (:lock this) (unlock))
                        )
                    )
                )
                nil
            )
        ))
        (§ assoc this :accept-risky-transactions false)
        nil
    )

    ;;;
     ; Gets the active keychain via {@link KeyChainGroup#getActiveKeyChain()}.
     ;;
    #_public
    (§ method #_"DeterministicKeyChain" getActiveKeyChain []
        (.. (:key-chain-group this) (getActiveKeyChain))
    )

    ;;;
     ; Adds given transaction signer to the list of signers.  It will be added to the end of the signers list,
     ; so if this wallet already has some signers added, given signer will be executed after all of them.
     ;
     ; Transaction signer should be fully initialized before adding to the wallet, otherwise
     ; {@link IllegalStateException} will be thrown.
     ;;
    #_public
    (§ method #_"void" addTransactionSigner [#_"TransactionSigner" signer]
        (.. (:lock this) (lock))
        (try
            (if (.. signer (isReady))
                (.. (:signers this) (add signer))
                (throw (IllegalStateException. (str "Signer instance is not ready to be added into Wallet: " (.. signer (getClass)))))
            )
            (finally
                (.. (:lock this) (unlock))
            )
        )
        nil
    )

    #_public
    (§ method #_"List<TransactionSigner>" getTransactionSigners []
        (.. (:lock this) (lock))
        (try
            (ImmutableList/copyOf (:signers this))
            (finally
                (.. (:lock this) (unlock))
            )
        )
    )

    ;;;
     ; Returns a key that hasn't been seen in a transaction yet, and which is suitable for displaying
     ; in a wallet user interface as "a convenient key to receive funds on" when the purpose parameter
     ; is {@link KeyChain.KeyPurpose#RECEIVE_FUNDS}.  The returned key is stable
     ; until it's actually seen in a pending or confirmed transaction, at which point this method will
     ; start returning a different key (for each purpose independently).
     ;;
    #_public
    (§ method #_"DeterministicKey" currentKey [#_"KeyPurpose" purpose]
        (.. (:key-chain-group-lock this) (lock))
        (try
            (.. this (maybeUpgradeToHD))
            (.. (:key-chain-group this) (currentKey purpose))
            (finally
                (.. (:key-chain-group-lock this) (unlock))
            )
        )
    )

    ;;;
     ; An alias for calling {@link #currentKey(KeyChain.KeyPurpose)} with
     ; {@link KeyChain.KeyPurpose#RECEIVE_FUNDS} as the parameter.
     ;;
    #_public
    (§ method #_"DeterministicKey" currentReceiveKey []
        (.. this (currentKey :KeyPurpose'RECEIVE_FUNDS))
    )

    ;;;
     ; Returns address for a {@link #currentKey(KeyChain.KeyPurpose)}.
     ;;
    #_public
    (§ method #_"Address" currentAddress [#_"KeyPurpose" purpose]
        (.. (:key-chain-group-lock this) (lock))
        (try
            (.. this (maybeUpgradeToHD))
            (.. (:key-chain-group this) (currentAddress purpose))
            (finally
                (.. (:key-chain-group-lock this) (unlock))
            )
        )
    )

    ;;;
     ; An alias for calling {@link #currentAddress(KeyChain.KeyPurpose)} with
     ; {@link KeyChain.KeyPurpose#RECEIVE_FUNDS} as the parameter.
     ;;
    #_public
    (§ method #_"Address" currentReceiveAddress []
        (.. this (currentAddress :KeyPurpose'RECEIVE_FUNDS))
    )

    ;;;
     ; Returns a key that has not been returned by this method before (fresh).  You can think of this
     ; as being a newly created key, although the notion of "create" is not really valid for a
     ; {@link DeterministicKeyChain}.  When the parameter is {@link KeyChain.KeyPurpose#RECEIVE_FUNDS}
     ; the returned key is suitable for being put into a receive coins wizard type UI.  You should use
     ; this when the user is definitely going to hand this key out to someone who wishes to send money.
     ;;
    #_public
    (§ method #_"DeterministicKey" freshKey [#_"KeyPurpose" purpose]
        (.. this (freshKeys purpose, 1) (get 0))
    )

    ;;;
     ; Returns a key/s that has not been returned by this method before (fresh).  You can think of this
     ; as being a newly created key/s, although the notion of "create" is not really valid for a
     ; {@link DeterministicKeyChain}.  When the parameter is {@link KeyChain.KeyPurpose#RECEIVE_FUNDS}
     ; the returned key is suitable for being put into a receive coins wizard type UI. You should use
     ; this when the user is definitely going to hand this key/s out to someone who wishes to send money.
     ;;
    #_public
    (§ method #_"List<DeterministicKey>" freshKeys [#_"KeyPurpose" purpose, #_"int" __numberOfKeys]
        (let [#_"List<DeterministicKey>" keys]
            (.. (:key-chain-group-lock this) (lock))
            (try
                (.. this (maybeUpgradeToHD))
                (§ ass keys (.. (:key-chain-group this) (freshKeys purpose, __numberOfKeys)))
                (finally
                    (.. (:key-chain-group-lock this) (unlock))
                )
            )
            ;; Do we really need an immediate hard save?  Arguably all this is doing is saving the 'current' key
            ;; and that's not quite so important, so we could coalesce for more performance.
            (.. this (saveNow))
            keys
        )
    )

    ;;;
     ; An alias for calling {@link #freshKey(KeyChain.KeyPurpose)} with
     ; {@link KeyChain.KeyPurpose#RECEIVE_FUNDS} as the parameter.
     ;;
    #_public
    (§ method #_"DeterministicKey" freshReceiveKey []
        (.. this (freshKey :KeyPurpose'RECEIVE_FUNDS))
    )

    ;;;
     ; Returns address for a {@link #freshKey(KeyChain.KeyPurpose)}.
     ;;
    #_public
    (§ method #_"Address" freshAddress [#_"KeyPurpose" purpose]
        (let [#_"Address" key]
            (.. (:key-chain-group-lock this) (lock))
            (try
                (§ ass key (.. (:key-chain-group this) (freshAddress purpose)))
                (finally
                    (.. (:key-chain-group-lock this) (unlock))
                )
            )
            (.. this (saveNow))
            key
        )
    )

    ;;;
     ; An alias for calling {@link #freshAddress(KeyChain.KeyPurpose)} with
     ; {@link KeyChain.KeyPurpose#RECEIVE_FUNDS} as the parameter.
     ;;
    #_public
    (§ method #_"Address" freshReceiveAddress []
        (.. this (freshAddress :KeyPurpose'RECEIVE_FUNDS))
    )

    ;;;
     ; Returns only the keys that have been issued by {@link #freshReceiveKey()}, {@link #freshReceiveAddress()},
     ; {@link #currentReceiveKey()} or {@link #currentReceiveAddress()}.
     ;;
    #_public
    (§ method #_"List<ECKey>" getIssuedReceiveKeys []
        (.. (:key-chain-group-lock this) (lock))
        (try
            (.. (:key-chain-group this) (getActiveKeyChain) (getIssuedReceiveKeys))
            (finally
                (.. (:key-chain-group-lock this) (unlock))
            )
        )
    )

    ;;;
     ; Returns only the addresses that have been issued by {@link #freshReceiveKey()}, {@link #freshReceiveAddress()},
     ; {@link #currentReceiveKey()} or {@link #currentReceiveAddress()}.
     ;;
    #_public
    (§ method #_"List<Address>" getIssuedReceiveAddresses []
        (let [#_"List<ECKey>" keys (.. this (getIssuedReceiveKeys))
              #_"List<Address>" addresses (ArrayList. #_"<>" (.. keys (size)))]
            (doseq [#_"ECKey" key keys]
                (.. addresses (add (.. key (toAddress (.. this (getParams))))))
            )
            addresses
        )
    )

    ;;;
     ; Upgrades the wallet to be deterministic (BIP32).  You should call this, possibly providing the users encryption
     ; key, after loading a wallet produced by previous versions of bitcoinj.  If the wallet is encrypted the key
     ; <b>must</b> be provided, due to the way the seed is derived deterministically from private key bytes: failing
     ; to do this will result in an exception being thrown.  For non-encrypted wallets, the upgrade will be done for
     ; you automatically the first time a new key is requested (this happens when spending due to the change address).
     ;;
    #_public
    (§ method #_"void" upgradeToDeterministic []
        (.. (:key-chain-group-lock this) (lock))
        (try
            (.. (:key-chain-group this) (upgradeToDeterministic (:v-key-rotation-timestamp this)))
            (finally
                (.. (:key-chain-group-lock this) (unlock))
            )
        )
        nil
    )

    ;;;
     ; Returns true if the wallet contains random keys and no HD chains, in which case you should call
     ; {@link #upgradeToDeterministic()} before attempting to do anything that would require a new address or key.
     ;;
    #_public
    (§ method #_"boolean" isDeterministicUpgradeRequired []
        (.. (:key-chain-group-lock this) (lock))
        (try
            (.. (:key-chain-group this) (isDeterministicUpgradeRequired))
            (finally
                (.. (:key-chain-group-lock this) (unlock))
            )
        )
    )

    #_private
    (§ method- #_"void" maybeUpgradeToHD []
        (assert-state (.. (:key-chain-group-lock this) (isHeldByCurrentThread)))
        (when (.. (:key-chain-group this) (isDeterministicUpgradeRequired))
            (.. Wallet'log (info "Upgrade to HD wallets is required, attempting to do so."))
            (.. this (upgradeToDeterministic))
        )
        nil
    )

    ;;;
     ; Removes the given key from the basicKeyChain.  Be very careful with this - losing a private key
     ; <b>destroys the money associated with it</b>.
     ;
     ; @return whether the key was removed or not.
     ;;
    #_public
    (§ method #_"boolean" removeKey [#_"ECKey" key]
        (.. (:key-chain-group-lock this) (lock))
        (try
            (.. (:key-chain-group this) (removeImportedKey key))
            (finally
                (.. (:key-chain-group-lock this) (unlock))
            )
        )
    )

    ;;;
     ; Returns the number of keys in the key chain group, including lookahead keys.
     ;;
    #_public
    (§ method #_"int" getKeyChainGroupSize []
        (.. (:key-chain-group-lock this) (lock))
        (try
            (.. (:key-chain-group this) (numKeys))
            (finally
                (.. (:key-chain-group-lock this) (unlock))
            )
        )
    )

    #_testing
    #_public
    (§ method #_"int" getKeyChainGroupCombinedKeyLookaheadEpochs []
        (.. (:key-chain-group-lock this) (lock))
        (try
            (.. (:key-chain-group this) (getCombinedKeyLookaheadEpochs))
            (finally
                (.. (:key-chain-group-lock this) (unlock))
            )
        )
    )

    ;;;
     ; Returns a list of the non-deterministic keys that have been imported into the wallet, or the empty list if none.
     ;;
    #_public
    (§ method #_"List<ECKey>" getImportedKeys []
        (.. (:key-chain-group-lock this) (lock))
        (try
            (.. (:key-chain-group this) (getImportedKeys))
            (finally
                (.. (:key-chain-group-lock this) (unlock))
            )
        )
    )

    ;;; Returns the address used for change outputs.  Note: this will probably go away in future. ;;
    #_public
    (§ method #_"Address" currentChangeAddress []
        (.. this (currentAddress :KeyPurpose'CHANGE))
    )

    ;;;
     ; Imports the given ECKey to the wallet.
     ;
     ; If the wallet is configured to auto save to a file, triggers a save immediately.  Runs the onKeysAdded event
     ; handler.  If the key already exists in the wallet, does nothing and returns false.
     ;;
    #_public
    (§ method #_"boolean" importKey [#_"ECKey" key]
        (= (.. this (importKeys (Lists/newArrayList key))) 1)
    )

    ;;;
     ; Imports the given keys to the wallet.
     ; If {@link Wallet#autosaveToFile(java.io.File, long, java.util.concurrent.TimeUnit, WalletFiles.Listener)}
     ; has been called, triggers an auto save bypassing the normal coalescing delay and event handlers.
     ; Returns the number of keys added, after duplicates are ignored.  The onKeyAdded event will be called
     ; for each key in the list that was not already present.
     ;;
    #_public
    (§ method #_"int" importKeys [#_"List<ECKey>" keys]
        ;; API usage check.
        (.. this (checkNoDeterministicKeys keys))
        (let [#_"int" result]
            (.. (:key-chain-group-lock this) (lock))
            (try
                (§ ass result (.. (:key-chain-group this) (importKeys keys)))
                (finally
                    (.. (:key-chain-group-lock this) (unlock))
                )
            )
            (.. this (saveNow))
            result
        )
    )

    #_private
    (§ method- #_"void" checkNoDeterministicKeys [#_"List<ECKey>" keys]
        ;; Watch out for someone doing wallet.importKey(wallet.freshReceiveKey()); or equivalent: we never tested this.
        (doseq [#_"ECKey" key keys]
            (when (instance? DeterministicKey key)
                (throw (IllegalArgumentException. "Cannot import HD keys back into the wallet"))
            )
        )
        nil
    )

    ;;;
     ; Add a pre-configured keychain to the wallet.  Useful for setting up a complex keychain,
     ; such as for a married wallet.  For example:
     ;
     ; <pre>
     ; MarriedKeyChain chain = MarriedKeyChain.builder()
     ;     .random(SecureRandom.())
     ;     .followingKeys(followingKeys)
     ;     .threshold(2).build();
     ; wallet.addAndActivateHDChain(chain);
     ; </pre>
     ;;
    #_public
    (§ method #_"void" addAndActivateHDChain [#_"DeterministicKeyChain" chain]
        (.. (:key-chain-group-lock this) (lock))
        (try
            (.. (:key-chain-group this) (addAndActivateHDChain chain))
            (finally
                (.. (:key-chain-group-lock this) (unlock))
            )
        )
        nil
    )

    ;;; See {@link DeterministicKeyChain#setLookaheadSize(int)} for more info on this. ;;
    #_public
    (§ method #_"void" setKeyChainGroupLookaheadSize [#_"int" __lookaheadSize]
        (.. (:key-chain-group-lock this) (lock))
        (try
            (.. (:key-chain-group this) (setLookaheadSize __lookaheadSize))
            (finally
                (.. (:key-chain-group-lock this) (unlock))
            )
        )
        nil
    )

    ;;; See {@link DeterministicKeyChain#setLookaheadSize(int)} for more info on this. ;;
    #_public
    (§ method #_"int" getKeyChainGroupLookaheadSize []
        (.. (:key-chain-group-lock this) (lock))
        (try
            (.. (:key-chain-group this) (getLookaheadSize))
            (finally
                (.. (:key-chain-group-lock this) (unlock))
            )
        )
    )

    ;;; See {@link DeterministicKeyChain#setLookaheadThreshold(int)} for more info on this. ;;
    #_public
    (§ method #_"void" setKeyChainGroupLookaheadThreshold [#_"int" num]
        (.. (:key-chain-group-lock this) (lock))
        (try
            (.. this (maybeUpgradeToHD))
            (.. (:key-chain-group this) (setLookaheadThreshold num))
            (finally
                (.. (:key-chain-group-lock this) (unlock))
            )
        )
        nil
    )

    ;;; See {@link DeterministicKeyChain#setLookaheadThreshold(int)} for more info on this. ;;
    #_public
    (§ method #_"int" getKeyChainGroupLookaheadThreshold []
        (.. (:key-chain-group-lock this) (lock))
        (try
            (.. this (maybeUpgradeToHD))
            (.. (:key-chain-group this) (getLookaheadThreshold))
            (finally
                (.. (:key-chain-group-lock this) (unlock))
            )
        )
    )

    ;;;
     ; Returns a public-only DeterministicKey that can be used to set up a watching wallet: that is, a wallet that
     ; can import transactions from the block chain just as the normal wallet can, but which cannot spend.  Watching
     ; wallets are very useful for things like web servers that accept payments.  This key corresponds to the account
     ; zero key in the recommended BIP32 hierarchy.
     ;;
    #_public
    (§ method #_"DeterministicKey" getWatchingKey []
        (.. (:key-chain-group-lock this) (lock))
        (try
            (.. this (maybeUpgradeToHD))
            (.. (:key-chain-group this) (getActiveKeyChain) (getWatchingKey))
            (finally
                (.. (:key-chain-group-lock this) (unlock))
            )
        )
    )

    ;;;
     ; Returns whether this wallet consists entirely of watching keys (unencrypted keys with no private part).
     ; Mixed wallets are forbidden.
     ;
     ; @throws IllegalStateException if there are no keys, or if there is a mix between watching and non-watching keys.
     ;;
    #_public
    (§ method #_"boolean" isWatching []
        (.. (:key-chain-group-lock this) (lock))
        (try
            (.. this (maybeUpgradeToHD))
            (.. (:key-chain-group this) (isWatching))
            (finally
                (.. (:key-chain-group-lock this) (unlock))
            )
        )
    )

    ;;;
     ; Locates a keypair from the basicKeyChain given the hash of the public key.  This is needed when finding out
     ; which key we need to use to redeem a transaction output.
     ;
     ; @return ECKey object or null if no such key was found.
     ;;
    #_override
    #_nilable
    #_public
    (§ method #_"ECKey" findKeyFromPubHash [#_"byte[]" __pubkeyHash]
        (.. (:key-chain-group-lock this) (lock))
        (try
            (.. (:key-chain-group this) (findKeyFromPubHash __pubkeyHash))
            (finally
                (.. (:key-chain-group-lock this) (unlock))
            )
        )
    )

    ;;; Returns true if the given key is in the wallet, false otherwise.  Currently an O(N) operation. ;;
    #_public
    (§ method #_"boolean" hasKey [#_"ECKey" key]
        (.. (:key-chain-group-lock this) (lock))
        (try
            (.. (:key-chain-group this) (hasKey key))
            (finally
                (.. (:key-chain-group-lock this) (unlock))
            )
        )
    )

    ;;; {@inheritDoc} ;;
    #_override
    #_public
    (§ method #_"boolean" isPubKeyHashMine [#_"byte[]" __pubkeyHash]
        (some? (.. this (findKeyFromPubHash __pubkeyHash)))
    )

    ;;;
     ; Locates a keypair from the basicKeyChain given the raw public key bytes.
     ;
     ; @return ECKey or null if no such key was found.
     ;;
    #_override
    #_nilable
    #_public
    (§ method #_"ECKey" findKeyFromPubKey [#_"byte[]" pubkey]
        (.. (:key-chain-group-lock this) (lock))
        (try
            (.. (:key-chain-group this) (findKeyFromPubKey pubkey))
            (finally
                (.. (:key-chain-group-lock this) (unlock))
            )
        )
    )

    ;;; {@inheritDoc} ;;
    #_override
    #_public
    (§ method #_"boolean" isPubKeyMine [#_"byte[]" pubkey]
        (some? (.. this (findKeyFromPubKey pubkey)))
    )

    ;;;
     ; Locates a redeem data (redeem script and keys) from the keyChainGroup given the hash of the script.
     ;
     ; @return RedeemData object or null if no such data was found.
     ;;
    #_nilable
    #_override
    #_public
    (§ method #_"RedeemData" findRedeemDataFromScriptHash [#_"byte[]" __payToScriptHash]
        (.. (:key-chain-group-lock this) (lock))
        (try
            (.. (:key-chain-group this) (findRedeemDataFromScriptHash __payToScriptHash))
            (finally
                (.. (:key-chain-group-lock this) (unlock))
            )
        )
    )

    ;;; {@inheritDoc} ;;
    #_override
    #_public
    (§ method #_"boolean" isPayToScriptHashMine [#_"byte[]" __payToScriptHash]
        (some? (.. this (findRedeemDataFromScriptHash __payToScriptHash)))
    )

    ;;;
     ; Marks all keys used in the transaction output as used in the wallet.
     ; See {@link DeterministicKeyChain#markKeyAsUsed(DeterministicKey)} for more info on this.
     ;;
    #_private
    (§ method- #_"void" markKeysAsUsed [#_"Transaction" tx]
        (.. (:key-chain-group-lock this) (lock))
        (try
            (doseq [#_"TransactionOutput" o (.. tx (getOutputs))]
                (try
                    (let [#_"Script" script (.. o (getScriptPubKey))]
                        (cond (.. script (isSentToRawPubKey))
                            (do
                                (let [#_"byte[]" pubkey (.. script (getPubKey))]
                                    (.. (:key-chain-group this) (markPubKeyAsUsed pubkey))
                                )
                            )
                            (.. script (isSentToAddress))
                            (do
                                (let [#_"byte[]" __pubkeyHash (.. script (getPubKeyHash))]
                                    (.. (:key-chain-group this) (markPubKeyHashAsUsed __pubkeyHash))
                                )
                            )
                            (.. script (isPayToScriptHash))
                            (do
                                (let [#_"Address" a (Address'fromP2SHScript (.. tx (getParams)), script)]
                                    (.. (:key-chain-group this) (markP2SHAddressAsUsed a))
                                )
                            )
                        )
                    )
                    (catch ScriptException e
                        ;; Just means we didn't understand the output of this transaction: ignore it.
                        (.. Wallet'log (warn "Could not parse tx output script: {}", (.. e (toString))))
                    )
                )
            )
            (finally
                (.. (:key-chain-group-lock this) (unlock))
            )
        )
        nil
    )

    ;;;
     ; Returns the immutable seed for the current active HD chain.
     ;
     ; @throws ECKey.MissingPrivateKeyException if the seed is unavailable (watching wallet).
     ;;
    #_public
    (§ method #_"DeterministicSeed" getKeyChainSeed []
        (.. (:key-chain-group-lock this) (lock))
        (try
            (let [#_"DeterministicSeed" seed (.. (:key-chain-group this) (getActiveKeyChain) (getSeed))]
                (when (nil? seed)
                    (throw (MissingPrivateKeyException.))
                )
                seed
            )
            (finally
                (.. (:key-chain-group-lock this) (unlock))
            )
        )
    )

    ;;;
     ; Returns a key for the given HD path, assuming it's already been derived.  You normally shouldn't use this:
     ; use currentReceiveKey/freshReceiveKey instead.
     ;;
    #_public
    (§ method #_"DeterministicKey" getKeyByPath [#_"List<ChildNumber>" path]
        (.. (:key-chain-group-lock this) (lock))
        (try
            (.. this (maybeUpgradeToHD))
            (.. (:key-chain-group this) (getActiveKeyChain) (getKeyByPath path, false))
            (finally
                (.. (:key-chain-group-lock this) (unlock))
            )
        )
    )

    ;; TODO: Make this package private once the classes finish moving around.
    ;;; Internal use only. ;;
    #_public
    (§ method #_"List<Protos.Key>" serializeKeyChainGroupToProtobuf []
        (.. (:key-chain-group-lock this) (lock))
        (try
            (.. (:key-chain-group this) (serializeToProtobuf))
            (finally
                (.. (:key-chain-group-lock this) (unlock))
            )
        )
    )

    ;;; Saves the wallet first to the given temp file, then renames to the dest file. ;;
    #_public
    #_throws #_[ "IOException" ]
    (§ method #_"void" saveToFile [#_"File" temp, #_"File" __destFile]
        (let [#_"FileOutputStream" stream nil]
            (.. (:lock this) (lock))
            (try
                (§ ass stream (FileOutputStream. temp))
                (.. this (saveToFileStream stream))
                ;; Attempt to force the bits to hit the disk.  In reality the OS or hard disk itself may still decide
                ;; to not write through to physical media for at least a few seconds, but this is the best we can do.
                (.. stream (flush))
                (.. stream (getFD) (sync))
                (.. stream (close))
                (§ ass stream nil)
                (when-not (.. temp (renameTo __destFile))
                    (throw (IOException. (str "Failed to rename " temp " to " __destFile)))
                )
                (catch RuntimeException e
                    (.. Wallet'log (error "Failed whilst saving wallet", e))
                    (throw e)
                )
                (finally
                    (.. (:lock this) (unlock))
                    (when (some? stream)
                        (.. stream (close))
                    )
                    (when (.. temp (exists))
                        (.. Wallet'log (warn "Temp file still exists after failed save."))
                    )
                )
            )
        )
        nil
    )

    ;;;
     ; Uses protobuf serialization to save the wallet to the given file.  To learn more about this file format,
     ; see {@link WalletSerializer}.  Writes out first to a temporary file in the same directory and then renames
     ; once written.
     ;;
    #_public
    #_throws #_[ "IOException" ]
    (§ method #_"void" saveToFile [#_"File" f]
        (let [#_"File" directory (.. f (getAbsoluteFile) (getParentFile))
              #_"File" temp (File/createTempFile "wallet", nil, directory)]
            (.. this (saveToFile temp, f))
        )
        nil
    )

    ;;;
     ; Whether or not the wallet will ignore pending transactions that fail the selected {@link RiskAnalysis}.
     ; By default, if a transaction is considered risky then it won't enter the wallet and won't trigger any event
     ; listeners.  If you set this property to true, then all transactions will be allowed in regardless of risk.
     ; For example, the default {@link RiskAnalysis} checks for non-finality of transactions.
     ;
     ; Note that this property is not serialized.  You have to set it each time a Wallet object is constructed,
     ; even if it's loaded from a protocol buffer.
     ;;
    #_public
    (§ method #_"void" setAcceptRiskyTransactions [#_"boolean" __acceptRiskyTransactions]
        (.. (:lock this) (lock))
        (try
            (§ assoc this :accept-risky-transactions __acceptRiskyTransactions)
            (finally
                (.. (:lock this) (unlock))
            )
        )
        nil
    )

    ;;;
     ; See {@link Wallet#setAcceptRiskyTransactions(boolean)} for an explanation of this property.
     ;;
    #_public
    (§ method #_"boolean" isAcceptRiskyTransactions []
        (.. (:lock this) (lock))
        (try
            (:accept-risky-transactions this)
            (finally
                (.. (:lock this) (unlock))
            )
        )
    )

    ;;;
     ; Sets up the wallet to auto-save itself to the given file, using temp files with atomic renames to ensure
     ; consistency.  After connecting to a file, you no longer need to save the wallet manually, it will do it
     ; whenever necessary.  Protocol buffer serialization will be used.
     ;
     ; If delayTime is set, a background thread will be created and the wallet will only be saved to disk
     ; every so many time units.  If no changes have occurred for the given time period, nothing will be written.
     ; In this way disk IO can be rate limited.  It's a good idea to set this as otherwise the wallet can change very
     ; frequently, e.g. if there are a lot of transactions in it or during block sync, and there will be a lot of redundant
     ; writes.  Note that when a new key is added, that always results in an immediate save regardless of delayTime.
     ; <b>You should still save the wallet manually when your program is about to shut down as the JVM will not
     ; wait for the background thread.</b>
     ;
     ; An event listener can be provided.  If a delay >0 was specified, it will be called on a background thread
     ; with the wallet locked when an auto-save occurs.  If delay is zero or you do something that always triggers
     ; an immediate save, like adding a key, the event listener will be invoked on the calling threads.
     ;
     ; @param f The destination file to save to.
     ; @param delayTime How many time units to wait until saving the wallet on a background thread.
     ; @param timeUnit The unit of measurement for delayTime.
     ; @param eventListener Callback to be informed when the auto-save thread does things, or null.
     ;;
    #_public
    (§ method #_"WalletFiles" autosaveToFile [#_"File" f, #_"long" __delayTime, #_"TimeUnit" __timeUnit, #_nilable #_"WalletFilesListener" __eventListener]
        (.. (:lock this) (lock))
        (try
            (assert-state (nil? (:v-file-manager this)), "Already auto saving this wallet.")
            (let [#_"WalletFiles" manager (WalletFiles. this, f, __delayTime, __timeUnit)]
                (when (some? __eventListener)
                    (.. manager (setListener __eventListener))
                )
                (§ assoc this :v-file-manager manager)
                manager
            )
            (finally
                (.. (:lock this) (unlock))
            )
        )
    )

    ;;;
     ; Disables auto-saving, after it had been enabled with
     ; {@link Wallet#autosaveToFile(java.io.File, long, java.util.concurrent.TimeUnit, WalletFiles.Listener)}
     ; before.  This method blocks until finished.
     ;;
    #_public
    (§ method #_"void" shutdownAutosaveAndWait []
        (.. (:lock this) (lock))
        (try
            (let [#_"WalletFiles" files (:v-file-manager this)]
                (§ assoc this :v-file-manager nil)
                (assert-state (some? files), "Auto saving not enabled.")
                (.. files (shutdownAndWait))
            )
            (finally
                (.. (:lock this) (unlock))
            )
        )
        nil
    )

    ;;; Requests an asynchronous save on a background thread. ;;
    #_protected
    (§ method #_"void" saveLater []
        (let [#_"WalletFiles" files (:v-file-manager this)]
            (when (some? files)
                (.. files (saveLater))
            )
        )
        nil
    )

    ;;; If auto saving is enabled, do an immediate sync write to disk ignoring any delays. ;;
    #_protected
    (§ method #_"void" saveNow []
        (let [#_"WalletFiles" files (:v-file-manager this)]
            (when (some? files)
                (try
                    (.. files (saveNow)) ;; This calls back into saveToFile().
                    (catch IOException e
                        ;; Can't really do much at this point, just let the API user know.
                        (.. Wallet'log (error "Failed to save wallet to disk!", e))
                        (let [#_"Thread.UncaughtExceptionHandler" handler Threading'UNCAUGHT_EXCEPTION_HANDLER]
                            (when (some? handler)
                                (.. handler (uncaughtException (Thread/currentThread), e))
                            )
                        )
                    )
                )
            )
        )
        nil
    )

    ;;;
     ; Uses protobuf serialization to save the wallet to the given file stream.
     ; To learn more about this file format, see {@link WalletSerializer}.
     ;;
    #_public
    #_throws #_[ "IOException" ]
    (§ method #_"void" saveToFileStream [#_"OutputStream" stream]
        (.. (:lock this) (lock))
        (try
            (.. (WalletSerializer.) (writeWallet this, stream))
            (finally
                (.. (:lock this) (unlock))
            )
        )
        nil
    )

    ;;; Returns the parameters this wallet was created with. ;;
    #_public
    (§ method #_"NetworkParameters" getParams []
        (:params this)
    )

    ;;; Returns the API context that this wallet was created with. ;;
    #_public
    (§ method #_"Context" getContext []
        (:context this)
    )

    ;;;
     ; Returns a wallet deserialized from the given file.
     ;
     ; @param file The wallet file to be read.
     ;;
    #_public
    #_static
    #_throws #_[ "UnreadableWalletException" ]
    (§ defn #_"Wallet" Wallet'loadFromFile [#_"File" file]
        (try
            (let [#_"FileInputStream" stream nil]
                (try
                    (§ ass stream (FileInputStream. file))
                    (Wallet'loadFromFileStream stream)
                    (finally
                        (when (some? stream)
                            (.. stream (close))
                        )
                    )
                )
            )
            (catch IOException e
                (throw (UnreadableWalletException. "Could not open file", e))
            )
        )
    )

    ;;;
     ; Returns if this wallet is structurally consistent, so e.g. no duplicate transactions.
     ; First inconsistency and a dump of the wallet will be logged.
     ;;
    #_public
    (§ method #_"boolean" isConsistent []
        (try
            (.. this (isConsistentOrThrow))
            true
            (catch IllegalStateException e1
                (.. Wallet'log (error (.. e1 (getMessage))))
                (try
                    (.. Wallet'log (error (.. this (toString))))
                    (catch RuntimeException e2
                        (.. Wallet'log (error "Printing inconsistent wallet failed", e2))
                    )
                )
                false
            )
        )
    )

    ;;;
     ; Variant of {@link Wallet#isConsistent()} that throws an {@link IllegalStateException} describing
     ; the first inconsistency.
     ;;
    #_public
    #_throws #_[ "IllegalStateException" ]
    (§ method #_"void" isConsistentOrThrow []
        (.. (:lock this) (lock))
        (try
            (let [#_"Set<Transaction>" transactions (.. this (getTransactions true))]

                (let [#_"Set<Sha256Hash>" hashes (HashSet. #_"<>")]
                    (doseq [#_"Transaction" tx transactions]
                        (.. hashes (add (.. tx (getHash))))
                    )

                    (let [#_"int" size1 (.. transactions (size))]
                        (when (not= size1 (.. hashes (size)))
                            (throw (IllegalStateException. "Two transactions with same hash"))
                        )

                        (let [#_"int" size2 (+ (.. (:unspent this) (size)) (.. (:spent this) (size)) (.. (:pending this) (size)) (.. (:dead this) (size)))]
                            (when (not= size1 size2)
                                (throw (IllegalStateException. (str "Inconsistent wallet sizes: " size1 ", " size2)))
                            )

                            (doseq [#_"Transaction" tx (.. (:unspent this) (values))]
                                (when (not (.. this (isTxConsistent tx, false)))
                                    (throw (IllegalStateException. (str "Inconsistent unspent tx: " (.. tx (getHashAsString)))))
                                )
                            )

                            (doseq [#_"Transaction" tx (.. (:spent this) (values))]
                                (when (not (.. this (isTxConsistent tx, true)))
                                    (throw (IllegalStateException. (str "Inconsistent spent tx: " (.. tx (getHashAsString)))))
                                )
                            )
                        )
                    )
                )
            )
            (finally
                (.. (:lock this) (unlock))
            )
        )
        nil
    )

    ;; If isSpent, check that all my outputs spent, otherwise check that there at least one unspent.
    #_testing
    (§ method #_"boolean" isTxConsistent [#_"Transaction" tx, #_"boolean" __isSpent]
        (let [#_"boolean" __isActuallySpent true]
            (doseq [#_"TransactionOutput" o (.. tx (getOutputs))]
                (cond (.. o (isAvailableForSpending))
                    (do
                        (when (.. o (isMine this))
                            (§ ass __isActuallySpent false)
                        )
                        (when (some? (.. o (getSpentBy)))
                            (.. Wallet'log (error "isAvailableForSpending != spentBy"))
                            (§ return false)
                        )
                    )
                    :else
                    (do
                        (when (nil? (.. o (getSpentBy)))
                            (.. Wallet'log (error "isAvailableForSpending != spentBy"))
                            (§ return false)
                        )
                    )
                )
            )
            (= __isActuallySpent __isSpent)
        )
    )

    ;;; Returns a wallet deserialized from the given input stream. ;;
    #_public
    #_static
    #_throws #_[ "UnreadableWalletException" ]
    (§ defn #_"Wallet" Wallet'loadFromFileStream [#_"InputStream" stream]
        (let [#_"Wallet" wallet (.. (WalletSerializer.) (readWallet stream))]
            (when (not (.. wallet (isConsistent)))
                (.. Wallet'log (error "Loaded an inconsistent wallet"))
            )
            wallet
        )
    )

    ;;;
     ; Called by the {@link BlockChain} when we receive a new filtered block that contains a transactions previously
     ; received by a call to {@link #receivePending}.
     ;
     ; This is necessary for the internal book-keeping Wallet does.  When a transaction is received that sends us
     ; coins it is added to a pool so we can use it later to create spends.  When a transaction is received that
     ; consumes outputs they are marked as spent so they won't be used in future.
     ;
     ; A transaction that spends our own coins can be received either because a spend we created was accepted by
     ; the network and thus made it into a block, or because our keys are being shared between multiple instances
     ; and some other node spent the coins instead.  We still have to know about that to avoid accidentally trying
     ; to double spend.
     ;
     ; A transaction may be received multiple times if is included into blocks in parallel chains.  The blockType
     ; parameter describes whether the containing block is on the main/best chain or whether it's on a presently
     ; inactive side chain.  We must still record these transactions and the blocks they appear in because a future
     ; block might change which chain is best causing a reorganize.  A re-org can totally change our balance!
     ;;
    #_override
    #_public
    #_throws #_[ "VerificationException" ]
    (§ method #_"boolean" notifyTransactionIsInBlock [#_"Sha256Hash" __txHash, #_"StoredBlock" block, #_"NewBlockType" __blockType, #_"int" __relativityOffset]
        (.. (:lock this) (lock))
        (try
            (let [#_"Transaction" tx (.. (:transactions this) (get __txHash))]
                (when (nil? tx)
                    (§ ass tx (.. (:risk-dropped this) (get __txHash)))
                    (cond (some? tx)
                        (do
                            ;; If this happens our risk analysis is probably wrong and should be improved.
                            (.. Wallet'log (info "Risk analysis dropped tx {} but was included in block anyway", (.. tx (getHash))))
                        )
                        :else
                        (do
                            ;; False positive that was broadcast to us and ignored by us because it was irrelevant to our keys.
                            (§ return false)
                        )
                    )
                )
                (.. this (receive tx, block, __blockType, __relativityOffset))
                true
            )
            (finally
                (.. (:lock this) (unlock))
            )
        )
    )

    ;;;
     ; Called when we have found a transaction (via network broadcast or otherwise) that is relevant to this wallet
     ; and want to record it.  Note that we <b>cannot verify these transactions at all</b>, they may spend fictional
     ; coins or be otherwise invalid.  They are useful to inform the user about coins they can expect to receive soon,
     ; and if you trust the sender of the transaction you can choose to assume they are in fact valid and will not
     ; be double spent as an optimization.
     ;
     ; This is the same as {@link Wallet#receivePending(Transaction, java.util.List)} but allows you to override the
     ; {@link Wallet#isPendingTransactionRelevant(Transaction)} sanity-check to keep track of transactions that are not
     ; spendable or spend our coins.  This can be useful when you want to keep track of transaction confidence on
     ; arbitrary transactions.  Note that transactions added in this way will still be relayed to peers and appear in
     ; transaction lists like any other pending transaction (even when not relevant).
     ;;
    #_public
    #_throws #_[ "VerificationException" ]
    (§ method #_"void" receivePending [#_"Transaction" tx, #_nilable #_"List<Transaction>" dependencies, #_"boolean" relevant?]
        ;; Can run in a peer thread.  This method will only be called if a prior call to isPendingTransactionRelevant returned true,
        ;; so we already know by this point that it sends coins to or from our wallet, or is a double spend against one of our
        ;; other pending transactions.
        (.. (:lock this) (lock))
        (try
            (.. tx (verify))
            ;; Ignore it if we already know about this transaction.  Receiving a pending transaction never moves it between pools.
            (if-not (.. this (getContainingPools tx) (equals (EnumSet/noneOf PoolType)))
                (.. Wallet'log (debug (str "Received tx we already saw in a block or created ourselves: " (.. tx (getHashAsString)))))
                ;; Repeat the check of relevancy here, even though the caller may have already done so - this is to avoid
                ;; race conditions where receivePending may be being called in parallel.
                (when (or relevant? (.. this (isPendingTransactionRelevant tx)))
                    (if (and (.. this (isTransactionRisky tx, dependencies)) (not (:accept-risky-transactions this)))
                        (do
                            ;; isTransactionRisky already logged the reason.
                            (.. (:risk-dropped this) (put (.. tx (getHash)), tx))
                            (.. Wallet'log (warn "There are now {} risk dropped transactions being kept in memory", (.. (:risk-dropped this) (size))))
                        )
                        (let [#_"Coin" earned (.. tx (getValueSentToMe this)) #_"Coin" spent (.. tx (getValueSentFromMe this))]
                            (when (.. Wallet'log (isInfoEnabled))
                                (.. Wallet'log (info (String/format Locale/US, "Received a pending transaction %s that spends %s from our own wallet, and sends us %s", (.. tx (getHashAsString)), (.. spent (toFriendlyString)), (.. earned (toFriendlyString)))))
                            )
                            (when (.. tx (getConfidence) (getSource) (equals :ConfidenceSource'UNKNOWN))
                                (.. Wallet'log (warn "Wallet received transaction with an unknown source. Consider tagging it!"))
                            )
                            ;; If this tx spends any of our unspent outputs, mark them as spent now, then add to the pending pool.
                            ;; This ensures that if some other client that has our keys broadcasts a spend we stay in sync.
                            ;; Also updates the timestamp on the transaction and registers/runs event listeners.
                            (.. this (commitTx tx))
                        )
                    )
                )
            )
            (finally
                (.. (:lock this) (unlock))
            )
        )
        ;; maybeRotateKeys() will ignore pending transactions, so we don't bother calling it here (see the comments
        ;; in that function for an explanation of why).
        nil
    )

    ;;;
     ; Given a transaction and an optional list of dependencies (recursive/flattened), returns true if the given
     ; transaction would be rejected by the analyzer, or false otherwise.  The result of this call is independent
     ; of the value of {@link #isAcceptRiskyTransactions()}.  Risky transactions yield a logged warning.  If you
     ; want to know the reason why a transaction is risky, create an instance of {@link RiskAnalysis} yourself
     ; and use it directly.
     ;;
    #_public
    (§ method #_"boolean" isTransactionRisky [#_"Transaction" tx, #_nilable #_"List<Transaction>" dependencies]
        (.. (:lock this) (lock))
        (try
            (when (nil? dependencies)
                (§ ass dependencies (ImmutableList/of))
            )
            (let [#_"RiskAnalysis" analysis (RiskAnalysis. this, tx, dependencies)]
                (if (not= (.. analysis (analyze)) :RiskAnalysisResult'OK)
                    (do
                        (.. Wallet'log (warn "Pending transaction was considered risky: {}\n{}", analysis, tx))
                        true
                    )
                    false
                )
            )
            (finally
                (.. (:lock this) (unlock))
            )
        )
    )

    ;;;
     ; Called when we have found a transaction (via network broadcast or otherwise) that is relevant to this wallet
     ; and want to record it.  Note that we <b>cannot verify these transactions at all</b>, they may spend fictional
     ; coins or be otherwise invalid.  They are useful to inform the user about coins they can expect to receive soon,
     ; and if you trust the sender of the transaction you can choose to assume they are in fact valid and will not
     ; be double spent as an optimization.
     ;
     ; Before this method is called, {@link Wallet#isPendingTransactionRelevant(Transaction)} should have been
     ; called to decide whether the wallet cares about the transaction - if it does, then this method expects the
     ; transaction and any dependencies it has which are still in the memory pool.
     ;;
    #_public
    #_throws #_[ "VerificationException" ]
    (§ method #_"void" receivePending [#_"Transaction" tx, #_nilable #_"List<Transaction>" dependencies]
        (.. this (receivePending tx, dependencies, false))
        nil
    )

    ;;;
     ; This method is used by a {@link Peer} to find out if a transaction that has been announced is interesting,
     ; that is, whether we should bother downloading its dependencies and exploring the transaction to decide how
     ; risky it is.  If this method returns true then {@link Wallet#receivePending(Transaction, java.util.List)}
     ; will soon be called with the transactions dependencies as well.
     ;;
    #_public
    #_throws #_[ "ScriptException" ]
    (§ method #_"boolean" isPendingTransactionRelevant [#_"Transaction" tx]
        (.. (:lock this) (lock))
        (try
            ;; Ignore it if we already know about this transaction.  Receiving a pending transaction never moves it
            ;; between pools.
            (let [#_"EnumSet<PoolType>" pools (.. this (getContainingPools tx))]
                (cond
                    (not (.. pools (equals (EnumSet/noneOf PoolType))))
                        (do
                            (.. Wallet'log (debug (str "Received tx we already saw in a block or created ourselves: " (.. tx (getHashAsString)))))
                            false
                        )
                    ;; We only care about transactions that:
                    ;;   - Send us coins.
                    ;;   - Spend our coins.
                    ;;   - Double spend a tx in our wallet.
                    (not (.. this (isTransactionRelevant tx)))
                        (do
                            (.. Wallet'log (debug "Received tx that isn't relevant to this wallet, discarding."))
                            false
                        )
                    :else
                        true
                )
            )
            (finally
                (.. (:lock this) (unlock))
            )
        )
    )

    ;;;
     ; Returns true if the given transaction sends coins to any of our keys, or has inputs spending any of our outputs,
     ; and also returns true if tx has inputs that are spending outputs which are
     ; not ours but which are spent by pending transactions.
     ;
     ; Note that if the tx has inputs containing one of our keys, but the connected transaction is not in the wallet,
     ; it will not be considered relevant.
     ;;
    #_public
    #_throws #_[ "ScriptException" ]
    (§ method #_"boolean" isTransactionRelevant [#_"Transaction" tx]
        (.. (:lock this) (lock))
        (try
            (or (< 0 (.. tx (getValueSentFromMe this) (signum))) (< 0 (.. tx (getValueSentToMe this) (signum))) (not (.. this (findDoubleSpendsAgainst tx, (:transactions this)) (isEmpty))))
            (finally
                (.. (:lock this) (unlock))
            )
        )
    )

    ;;;
     ; Finds transactions in the specified candidates that double spend "tx".  Not a general check, but it can work even
     ; if the double spent inputs are not ours.
     ;
     ; @return the set of transactions that double spend "tx".
     ;;
    #_private
    (§ method- #_"Set<Transaction>" findDoubleSpendsAgainst [#_"Transaction" tx, #_"Map<Sha256Hash, Transaction>" candidates]
        (assert-state (.. (:lock this) (isHeldByCurrentThread)))

        (if (.. tx (isCoinBase))
            (Sets/newHashSet)

            ;; Compile a set of outpoints that are spent by tx.
            (let [#_"HashSet<TransactionOutPoint>" outpoints (HashSet. #_"<>")]
                (doseq [#_"TransactionInput" input (.. tx (getInputs))]
                    (.. outpoints (add (:outpoint input)))
                )

                ;; Now for each pending transaction, see if it shares any outpoints with this tx.
                (let [#_"Set<Transaction>" __doubleSpendTxns (Sets/newHashSet)]
                    (doseq [#_"Transaction" t (.. candidates (values))]
                        (when-not (.. t (equals tx))
                            (doseq [#_"TransactionInput" input (.. t (getInputs))]
                                ;; This relies on the fact that TransactionOutPoint equality is defined at the protocol not object
                                ;; level - outpoints from two different inputs that point to the same output compare the same.
                                (let [#_"TransactionOutPoint" outpoint (:outpoint input)]
                                    ;; If does, it's a double spend against the candidates, which makes it relevant.
                                    (when (.. outpoints (contains outpoint))
                                        (.. __doubleSpendTxns (add t))
                                    )
                                )
                            )
                        )
                    )
                    __doubleSpendTxns
                )
            )
        )
    )

    ;;;
     ; Adds to txSet all the txns in txPool spending outputs of txns in txSet,
     ; and all txns spending the outputs of those txns, recursively.
     ;;
    (§ method #_"void" addTransactionsDependingOn [#_"Set<Transaction>" __txSet, #_"Set<Transaction>" __txPool]
        (let [#_"Map<Sha256Hash, Transaction>" __txQueue (LinkedHashMap. #_"<>")]
            (doseq [#_"Transaction" tx __txSet]
                (.. __txQueue (put (.. tx (getHash)), tx))
            )

            (while (not (.. __txQueue (isEmpty)))
                (let [#_"Transaction" tx (.. __txQueue (remove (.. __txQueue (keySet) (iterator) (next))))]
                    (doseq [#_"Transaction" __anotherTx __txPool]
                        (when (.. __anotherTx (equals tx))
                            (§ continue )
                        )

                        (doseq [#_"TransactionInput" input (.. __anotherTx (getInputs))]
                            (when (.. (:outpoint input) (getHash) (equals (.. tx (getHash))))
                                (when (nil? (.. __txQueue (get (.. __anotherTx (getHash)))))
                                    (.. __txQueue (put (.. __anotherTx (getHash)), __anotherTx))
                                    (.. __txSet (add __anotherTx))
                                )
                            )
                        )
                    )
                )
            )
        )
        nil
    )

    ;;;
     ; Called by the {@link BlockChain} when we receive a new block that sends coins to one of our addresses or
     ; spends coins from one of our addresses (note that a single transaction can do both).
     ;
     ; This is necessary for the internal book-keeping Wallet does.  When a transaction is received that sends us
     ; coins it is added to a pool so we can use it later to create spends.  When a transaction is received that
     ; consumes outputs they are marked as spent so they won't be used in future.
     ;
     ; A transaction that spends our own coins can be received either because a spend we created was accepted by
     ; the network and thus made it into a block, or because our keys are being shared between multiple instances
     ; and some other node spent the coins instead.  We still have to know about that to avoid accidentally trying
     ; to double spend.
     ;
     ; A transaction may be received multiple times if is included into blocks in parallel chains.  The blockType
     ; parameter describes whether the containing block is on the main/best chain or whether it's on a presently
     ; inactive side chain.  We must still record these transactions and the blocks they appear in because a future
     ; block might change which chain is best causing a reorganize.  A re-org can totally change our balance!
     ;;
    #_override
    #_public
    #_throws #_[ "VerificationException" ]
    (§ method #_"void" receiveFromBlock [#_"Transaction" tx, #_"StoredBlock" block, #_"NewBlockType" __blockType, #_"int" __relativityOffset]
        (.. (:lock this) (lock))
        (try
            (when (.. this (isTransactionRelevant tx))
                (.. this (receive tx, block, __blockType, __relativityOffset))
            )
            (finally
                (.. (:lock this) (unlock))
            )
        )
        nil
    )

    ;; Whether to do a saveNow or saveLater when we are notified of the next best block.
    #_private
    (§ field- #_"boolean" :hard-save-on-next-block false)

    #_private
    #_throws #_[ "VerificationException" ]
    (§ method- #_"void" receive [#_"Transaction" tx, #_"StoredBlock" block, #_"NewBlockType" __blockType, #_"int" __relativityOffset]
        ;; Runs in a peer thread.
        (assert-state (.. (:lock this) (isHeldByCurrentThread)))

        (let [#_"Coin" __prevBalance (.. this (getBalance))
              #_"Sha256Hash" __txHash (.. tx (getHash))
              #_"boolean" __bestChain (= __blockType :NewBlockType'BEST_CHAIN)
              #_"boolean" __sideChain (= __blockType :NewBlockType'SIDE_CHAIN)]

            (let [#_"Coin" spent (.. tx (getValueSentFromMe this))
                  #_"Coin" earned (.. tx (getValueSentToMe this))
                  #_"Coin" __valueDifference (.. earned (subtract spent))]

                (.. Wallet'log (info "Received tx{} for {}: {} [{}] in block {}", (if __sideChain " on a side chain" ""), (.. __valueDifference (toFriendlyString)), (.. tx (getHashAsString)), __relativityOffset, (if (some? block) (.. block (getHeader) (getHash)) "(unit test)")))

                ;; Inform the key chains that the issued keys were observed in a transaction, so they know to
                ;; calculate more keys for the next Bloom filters.
                (.. this (markKeysAsUsed tx))

                (§ update this :on-wallet-changed-suppressions inc)

                ;; If this transaction is already in the wallet, we may need to move it into a different pool.
                ;; At the very least we need to ensure we're manipulating the canonical object rather than a duplicate.
                (let [#_"Transaction" tmp (.. (:transactions this) (get (.. tx (getHash))))]
                    (when (some? tmp)
                        (§ ass tx tmp)
                    )
                )

                (let [#_"boolean" __wasPending (some? (.. (:pending this) (remove __txHash)))]
                    (when __wasPending
                        (.. Wallet'log (info "  <-pending"))
                    )

                    (cond __bestChain
                        (do
                            (let [#_"boolean" __wasDead (some? (.. (:dead this) (remove __txHash)))]
                                (when __wasDead
                                    (.. Wallet'log (info "  <-dead"))
                                )
                                (when __wasPending
                                    ;; Was pending and is now confirmed.  Disconnect the outputs in case we spent any already:
                                    ;; they will be re-connected by processTxFromBestChain below.
                                    (doseq [#_"TransactionOutput" output (.. tx (getOutputs))]
                                        (let [#_"TransactionInput" __spentBy (.. output (getSpentBy))]
                                            (when (some? __spentBy)
                                                (assert-state (.. (:my-unspents this) (add output)))
                                                (.. __spentBy (disconnect))
                                            )
                                        )
                                    )
                                )
                                (.. this (processTxFromBestChain tx, (or __wasPending __wasDead)))
                            )
                        )
                        :else
                        (do
                            (assert-state __sideChain)
                            ;; Transactions that appear in a side chain will have that appearance recorded below - we assume
                            ;; that some miners are also trying to include the transaction into the current best chain too,
                            ;; so let's treat it as pending, except we don't need to do any risk analysis on it.
                            (cond __wasPending
                                (do
                                    ;; Just put it back in without touching the connections or confidence.
                                    (.. this (addWalletTransaction :PoolType'PENDING, tx))
                                    (.. Wallet'log (info "  ->pending"))
                                )
                                :else
                                (do
                                    ;; Ignore the case where a tx appears on a side chain at the same time as the best chain
                                    ;; (this is quite normal and expected).
                                    (let [#_"Sha256Hash" hash (.. tx (getHash))]
                                        (when (and (not (.. (:unspent this) (containsKey hash))) (not (.. (:spent this) (containsKey hash))) (not (.. (:dead this) (containsKey hash))))
                                            ;; Otherwise put it (possibly back) into pending.
                                            ;; Committing it updates the spent flags and inserts into the pool as well.
                                            (.. this (commitTx tx))
                                        )
                                    )
                                )
                            )
                        )
                    )

                    (when (some? block)
                        ;; Mark the tx as appearing in this block so we can find it later after a re-org.  This also tells
                        ;; the tx confidence object about the block and sets its depth appropriately.
                        (.. tx (setBlockAppearance block, __bestChain, __relativityOffset))
                        (when __bestChain
                            ;; Don't notify this tx of work done in notifyNewBestBlock which will be called immediately
                            ;; after this method has been called by BlockChain for all relevant transactions.  Otherwise
                            ;; we'd double count.
                            (.. (:ignore-next-new-block this) (add __txHash))

                            ;; When a tx is received from the best chain, if other txns that spend this tx are IN_CONFLICT,
                            ;; change its confidence to PENDING (Unless they are also spending other txns IN_CONFLICT).
                            ;; Consider dependency chains.
                            (let [#_"Set<Transaction>" __currentTxDependencies (Sets/newHashSet tx)]
                                (.. this (addTransactionsDependingOn __currentTxDependencies, (.. this (getTransactions true))))
                                (.. __currentTxDependencies (remove tx))
                                (let [#_"List<Transaction>" __currentTxDependenciesSorted (.. this (sortTxnsByDependency __currentTxDependencies))]
                                    (doseq [#_"Transaction" __txDependency __currentTxDependenciesSorted]
                                        (when (.. __txDependency (getConfidence) (getConfidenceType) (equals ConfidenceType'IN_CONFLICT))
                                            (when (.. this (isNotSpendingTxnsInConfidenceType __txDependency, ConfidenceType'IN_CONFLICT))
                                                (.. __txDependency (getConfidence) (setConfidenceType ConfidenceType'PENDING))
                                                (.. (:confidence-changed this) (put __txDependency, :ConfidenceChangeReason'TYPE))
                                            )
                                        )
                                    )
                                )
                            )
                        )
                    )

                    (§ update this :on-wallet-changed-suppressions dec)

                    ;; Side chains don't affect confidence.
                    (cond __bestChain
                        (do
                            ;; notifyNewBestBlock will be invoked next and will then call maybeQueueOnWalletChanged for us.
                            (.. (:confidence-changed this) (put tx, :ConfidenceChangeReason'TYPE))
                        )
                        :else
                        (do
                            (.. this (maybeQueueOnWalletChanged))
                        )
                    )

                    ;; Inform anyone interested that we have received or sent coins but only if:
                    ;;  - This is not due to a re-org.
                    ;;  - The coins appeared on the best chain.
                    ;;  - We did in fact receive some new money.
                    ;;  - We have not already informed the user about the coins when we received the tx broadcast,
                    ;;    or for our own spends.  If users want to know when a broadcast tx becomes confirmed,
                    ;;    they need to use tx confidence listeners.
                    (when (and (not (:inside-reorg this)) __bestChain)
                        (let [#_"Coin" __newBalance (.. this (getBalance))] ;; This is slow.
                            (.. Wallet'log (info (str "Balance is now: " (.. __newBalance (toFriendlyString)))))
                            (when (not __wasPending)
                                (let [#_"int" diff (.. __valueDifference (signum))]
                                    ;; We pick one callback based on the value difference, though a tx can of course both
                                    ;; send and receive coins from the wallet.
                                    (cond
                                        (< 0 diff) (.. this (queueOnCoinsReceived tx, __prevBalance, __newBalance))
                                        (< diff 0) (.. this (queueOnCoinsSent tx, __prevBalance, __newBalance))
                                    )
                                )
                            )
                            (.. this (checkBalanceFuturesLocked __newBalance))
                        )
                    )

                    (.. this (informConfidenceListenersIfNotReorganizing))
                    (.. this (isConsistentOrThrow))
                    ;; Optimization for the case where a block has tons of relevant transactions.
                    (.. this (saveLater))
                    (§ assoc this :hard-save-on-next-block true)
                )
            )
        )
        nil
    )

    ;;; Finds if tx is NOT spending other txns which are in the specified confidence type. ;;
    #_private
    (§ method- #_"boolean" isNotSpendingTxnsInConfidenceType [#_"Transaction" tx, #_"ConfidenceType" type]
        (doseq [#_"TransactionInput" in (.. tx (getInputs))]
            (let [#_"Transaction" tx' (.. this (getTransaction (.. (:outpoint in) (getHash))))]
                (when (and (some? tx') (.. tx' (getConfidence) (getConfidenceType) (equals type)))
                    (§ return false)
                )
            )
        )
        true
    )

    ;;;
     ; Creates and returns a new List with the same txns as inputSet, but txns are sorted by depencency
     ; (a topological sort).  If tx B spends tx A, then tx A should be before tx B on the returned List.
     ; Several invocations to this method with the same inputSet could result in lists with txns in different
     ; order, as there is no guarantee on the order of the returned txns besides what was already stated.
     ;;
    (§ method #_"List<Transaction>" sortTxnsByDependency [#_"Set<Transaction>" __inputSet]
        (let [#_"ArrayList<Transaction>" result (ArrayList. #_"<>" __inputSet)]
            (loop-when-recur [#_"int" i 0] (< i (dec (.. result (size)))) [(inc i)]
                (loop []
                    (let [#_"boolean" spends? false]
                        (loop-when-recur [#_"int" j (inc i)] (< j (.. result (size))) [(inc j)]
                            (when (.. this (spends (.. result (get i)), (.. result (get j))))
                                (let [#_"Transaction" __transactionAtI (.. result (remove i))]
                                    (.. result (add j, __transactionAtI))
                                    (§ ass spends? true)
                                    (§ break )
                                )
                            )
                        )
                        (§ recur-if spends?)
                    )
                )
            )
            result
        )
    )

    ;;; Finds whether txA spends txB. ;;
    (§ method #_"boolean" spends [#_"Transaction" a, #_"Transaction" b]
        (some? (some #(.. (:outpoint %) (getHash) (equals (.. b (getHash)))) (.. a (getInputs))))
    )

    #_private
    (§ method- #_"void" informConfidenceListenersIfNotReorganizing []
        (when-not (:inside-reorg this)
            (doseq [#_"Map.Entry<Transaction, ConfidenceChangeReason>" entry (.. (:confidence-changed this) (entrySet))]
                (let [#_"Transaction" tx (.. entry (getKey))]
                    (.. tx (getConfidence) (queueListeners (.. entry (getValue))))
                    (.. this (queueOnTransactionConfidenceChanged tx))
                )
            )
            (.. (:confidence-changed this) (clear))
        )
        nil
    )

    ;;;
     ; Called by the {@link BlockChain} when a new block on the best chain is seen, AFTER relevant wallet
     ; transactions are extracted and sent to us UNLESS the new block caused a re-org, in which case this will
     ; not be called (the {@link Wallet#reorganize(StoredBlock, java.util.List, java.util.List)} method will
     ; call this one in that case).
     ;
     ; Used to update confidence data in each transaction and last seen block hash.  Triggers auto saving.
     ; Invokes the onWalletChanged event listener if there were any affected transactions.
     ;;
    #_override
    #_public
    #_throws #_[ "VerificationException" ]
    (§ method #_"void" notifyNewBestBlock [#_"StoredBlock" block]
        ;; Check to see if this block has been seen before.
        (let [#_"Sha256Hash" __newBlockHash (.. block (getHeader) (getHash))]
            (when-not (.. __newBlockHash (equals (.. this (getLastBlockSeenHash))))
                (.. (:lock this) (lock))
                (try
                    ;; Store the new block hash.
                    (.. this (setLastBlockSeenHash __newBlockHash))
                    (.. this (setLastBlockSeenHeight (.. block (getHeight))))
                    (.. this (setLastBlockSeenTimeSecs (.. block (getHeader) (getTimeSeconds))))
                    ;; Notify all the BUILDING transactions of the new block.
                    ;; This is so that they can update their depth.
                    (let [#_"Set<Transaction>" transactions (.. this (getTransactions true))]
                        (doseq [#_"Transaction" tx transactions]
                            (cond (.. (:ignore-next-new-block this) (contains (.. tx (getHash))))
                                (do
                                    ;; tx was already processed in receive() due to it appearing in this block, so we don't want
                                    ;; to increment the tx confidence depth twice, it'd result in miscounting.
                                    (.. (:ignore-next-new-block this) (remove (.. tx (getHash))))
                                )
                                :else
                                (do
                                    (let [#_"TransactionConfidence" confidence (.. tx (getConfidence))]
                                        (when (= (.. confidence (getConfidenceType)) ConfidenceType'BUILDING)
                                            ;; Erase the set of seen peers once the tx is so deep that it seems unlikely to ever go
                                            ;; pending again.  We could clear this data the moment a tx is seen in the block chain,
                                            ;; but in cases where the chain re-orgs, this would mean that wallets would perceive a
                                            ;; newly pending tx has zero confidence at all, which would not be right: we expect it to
                                            ;; be included once again.  We could have a separate was-in-chain-and-now-isn't confidence
                                            ;; type, but this way is backwards compatible with existing software, and the new state
                                            ;; probably wouldn't mean anything different to just remembering peers anyway.
                                            (when (< (.. (:context this) (getEventHorizon)) (.. confidence (incrementDepthInBlocks)))
                                                (.. confidence (clearBroadcastBy))
                                            )
                                            (.. (:confidence-changed this) (put tx, :ConfidenceChangeReason'DEPTH))
                                        )
                                    )
                                )
                            )
                        )

                        (.. this (informConfidenceListenersIfNotReorganizing))
                        (.. this (maybeQueueOnWalletChanged))

                        (cond (:hard-save-on-next-block this)
                            (do
                                (.. this (saveNow))
                                (§ assoc this :hard-save-on-next-block false)
                            )
                            :else
                            (do
                                ;; Coalesce writes to avoid throttling on disk access when catching up with the chain.
                                (.. this (saveLater))
                            )
                        )
                    )
                    (finally
                        (.. (:lock this) (unlock))
                    )
                )
            )
        )
        nil
    )

    ;;;
     ; Handle when a transaction becomes newly active on the best chain, either due to receiving a new block or a
     ; re-org.  Places the tx into the right pool, handles coinbase transactions, handles double-spends and so on.
     ;;
    #_private
    #_throws #_[ "VerificationException" ]
    (§ method- #_"void" processTxFromBestChain [#_"Transaction" tx, #_"boolean" __forceAddToPool]
        (assert-state (.. (:lock this) (isHeldByCurrentThread)))
        (assert-state (not (.. (:pending this) (containsKey (.. tx (getHash))))))

        ;; This TX may spend our existing outputs even though it was not pending.  This can happen in unit tests,
        ;; if keys are moved between wallets, if we're catching up to the chain given only a set of keys,
        ;; or if a dead coinbase transaction has moved back onto the main chain.
        (let [#_"boolean" __isDeadCoinbase (and (.. tx (isCoinBase)) (.. (:dead this) (containsKey (.. tx (getHash)))))]
            (when __isDeadCoinbase
                ;; There is a dead coinbase tx being received on the best chain.  A coinbase tx is made dead when it moves
                ;; to a side chain but it can be switched back on a reorg and resurrected back to spent or unspent.
                ;; So take it out of the dead pool.  Note that we don't resurrect dependent transactions here, even though
                ;; we could.  Bitcoin Core nodes on the network have deleted the dependent transactions from their mempools
                ;; entirely by this point.  We could and maybe should rebroadcast them so the network remembers and tries
                ;; to confirm them again.  But this is a deeply unusual edge case that due to the maturity rule should never
                ;; happen in practice, thus for simplicities sake we ignore it here.
                (.. Wallet'log (info "  coinbase tx <-dead: confidence {}", (.. tx (getHashAsString)), (.. tx (getConfidence) (getConfidenceType) (name))))
                (.. (:dead this) (remove (.. tx (getHash))))
            )

            ;; Update tx and other unspent/pending transactions by connecting inputs/outputs.
            (.. this (updateForSpends tx, true))

            ;; Now make sure it ends up in the right pool.  Also, handle the case where this TX is double-spending
            ;; against our pending transactions.  Note that a tx may double spend our pending transactions and also
            ;; send us money/spend our money.
            (let [#_"boolean" __hasOutputsToMe (< 0 (.. tx (getValueSentToMe this) (signum)))
                  #_"boolean" __hasOutputsFromMe false]
                (cond __hasOutputsToMe
                    (do
                        ;; Needs to go into either unspent or spent (if the outputs were already spent by a pending tx).
                        (cond (.. tx (isEveryOwnedOutputSpent this))
                            (do
                                (.. Wallet'log (info "  tx {} ->spent (by pending)", (.. tx (getHashAsString))))
                                (.. this (addWalletTransaction :PoolType'SPENT, tx))
                            )
                            :else
                            (do
                                (.. Wallet'log (info "  tx {} ->unspent", (.. tx (getHashAsString))))
                                (.. this (addWalletTransaction :PoolType'UNSPENT, tx))
                            )
                        )
                    )
                    (< 0 (.. tx (getValueSentFromMe this) (signum)))
                    (do
                        (§ ass __hasOutputsFromMe true)
                        ;; Didn't send us any money, but did spend some.  Keep it around for record keeping purposes.
                        (.. Wallet'log (info "  tx {} ->spent", (.. tx (getHashAsString))))
                        (.. this (addWalletTransaction :PoolType'SPENT, tx))
                    )
                    __forceAddToPool
                    (do
                        ;; Was manually added to pending, so we should keep it to notify the user of confidence information.
                        (.. Wallet'log (info "  tx {} ->spent (manually added)", (.. tx (getHashAsString))))
                        (.. this (addWalletTransaction :PoolType'SPENT, tx))
                    )
                )

                ;; Kill txns in conflict with this tx.
                (let [#_"Set<Transaction>" __doubleSpendTxns (.. this (findDoubleSpendsAgainst tx, (:pending this)))]
                    (when (not (.. __doubleSpendTxns (isEmpty)))
                        ;; No need to addTransactionsDependingOn(doubleSpendTxns), because killTxns() already kills dependencies.
                        (.. this (killTxns __doubleSpendTxns, tx))
                    )
                    (when (and (not __hasOutputsToMe) (not __hasOutputsFromMe) (not __forceAddToPool) (not (.. this (findDoubleSpendsAgainst tx, (:transactions this)) (isEmpty))))
                        ;; Disconnect irrelevant inputs (otherwise might cause protobuf serialization issue).
                        (doseq [#_"TransactionInput" input (.. tx (getInputs))]
                            (let [#_"TransactionOutput" output (.. input (getConnectedOutput))]
                                (when (and (some? output) (not (.. output (isMine this))))
                                    (.. input (disconnect))
                                )
                            )
                        )
                    )
                )
            )
        )
        nil
    )

    ;;;
     ; Updates the wallet by checking if this TX spends any of our outputs, and marking them as spent if so.
     ; If fromChain is true, also checks to see if any pending transaction spends outputs of this transaction and marks
     ; the spent flags appropriately.
     ;
     ; It can be called in two contexts.  One is when we receive a transaction on the best chain but it wasn't pending,
     ; this most commonly happens when we have a set of keys but the wallet transactions were wiped and we are catching
     ; up with the block chain.  It can also happen if a block includes a transaction we never saw at broadcast time.
     ; If this tx double spends, it takes precedence over our pending transactions and the pending tx goes dead.
     ;
     ; The other context it can be called is from {@link Wallet#receivePending(Transaction, java.util.List)},
     ; i.e. we saw a tx be broadcast or one was submitted directly that spends our own coins.  If this tx double spends,
     ; it does NOT take precedence because the winner will be resolved by the miners - we assume that our version will
     ; win, if we are wrong then when a block appears the tx will go dead.
     ;
     ; @param tx The transaction which is being updated.
     ; @param fromChain If true, the tx appeared on the current best chain, if false it was pending.
     ;;
    #_private
    #_throws #_[ "VerificationException" ]
    (§ method- #_"void" updateForSpends [#_"Transaction" tx, #_"boolean" __fromChain]
        (assert-state (.. (:lock this) (isHeldByCurrentThread)))
        (when __fromChain
            (assert-state (not (.. (:pending this) (containsKey (.. tx (getHash))))))
        )

        (doseq [#_"TransactionInput" input (.. tx (getInputs))]
            (let [#_"ConnectionResult" result (.. input (connect (:unspent this), :ConnectionMode'ABORT_ON_CONFLICT))]
                (when (= result :ConnectionResult'NO_SUCH_TX)
                    ;; Not found in the unspent map.  Try again with the spent map.
                    (§ ass result (.. input (connect (:spent this), :ConnectionMode'ABORT_ON_CONFLICT)))
                    (when (= result :ConnectionResult'NO_SUCH_TX)
                        ;; Not found in the unspent and spent maps.  Try again with the pending map.
                        (§ ass result (.. input (connect (:pending this), :ConnectionMode'ABORT_ON_CONFLICT)))
                        (when (= result :ConnectionResult'NO_SUCH_TX)
                            ;; Doesn't spend any of our outputs or is coinbase.
                            (§ continue )
                        )
                    )
                )

                (let [#_"TransactionOutput" output (ensure some? (.. input (getConnectedOutput)))]
                    (cond (= result :ConnectionResult'ALREADY_SPENT)
                        (do
                            (cond __fromChain
                                (do
                                    ;; Can be:
                                    ;; (1) We already marked this output as spent when we saw the pending transaction (most likely).
                                    ;;     Now it's being confirmed of course, we cannot mark it as spent again.
                                    ;; (2) A double spend from chain: this will be handled later by findDoubleSpendsAgainst()/killTxns().
                                    ;;
                                    ;; In any case, nothing to do here.
                                )
                                :else
                                (do
                                    ;; We saw two pending transactions that double spend each other.  We don't know which will win.
                                    ;; This can happen in the case of bad network nodes that mutate transactions.  Do a hex dump
                                    ;; so the exact nature of the mutation can be examined.
                                    (.. Wallet'log (warn "Saw two pending transactions double spend each other"))
                                    (.. Wallet'log (warn "  offending input is input {}", (.. tx (getInputs) (indexOf input))))
                                    (.. Wallet'log (warn "{}: {}", (.. tx (getHash)), (.. Utils'HEX (encode (.. tx (unsafeBitcoinSerialize))))))
                                    (let [#_"Transaction" other (.. output (getSpentBy) (getParentTransaction))]
                                        (.. Wallet'log (warn "{}: {}", (.. other (getHash)), (.. Utils'HEX (encode (.. other (unsafeBitcoinSerialize))))))
                                    )
                                )
                            )
                        )
                        (= result :ConnectionResult'SUCCESS)
                        (do
                            ;; Otherwise we saw a transaction spend our coins, but we didn't try and spend them ourselves yet.
                            ;; The outputs are already marked as spent by the connect call above, so check if there are any more for
                            ;; us to use.  Move if not.
                            (let [#_"Transaction" connected (ensure some? (.. input (getConnectedTransaction)))]
                                (.. Wallet'log (info "  marked {} as spent by {}", (:outpoint input), (.. tx (getHashAsString))))
                                (.. this (maybeMovePool connected, "prevtx"))
                                ;; Just because it's connected, doesn't mean it's actually ours: sometimes we have total visibility.
                                (when (.. output (isMine this))
                                    (assert-state (.. (:my-unspents this) (remove output)))
                                )
                            )
                        )
                    )
                )
            )
        )

        ;; Now check each output and see if there is a pending transaction which spends it.  This shouldn't normally
        ;; ever occur because we expect transactions to arrive in temporal order, but this assumption can be violated
        ;; when we receive a pending transaction from the mempool that is relevant to us, which spends coins that we
        ;; didn't see arrive on the best chain yet.  For instance, because of a chain replay or because of our keys were
        ;; used by another wallet somewhere else.  Also, unconfirmed transactions can arrive from the mempool in more
        ;; or less random order.
        (doseq [#_"Transaction" __pendingTx (.. (:pending this) (values)) #_"TransactionInput" input (.. __pendingTx (getInputs))]
            (let [#_"ConnectionResult" result (.. input (connect tx, :ConnectionMode'ABORT_ON_CONFLICT))]
                (when __fromChain
                    ;; This TX is supposed to have just appeared on the best chain, so its outputs should not be marked
                    ;; as spent yet.  If they are, it means something is happening out of order.
                    (assert-state (not= result :ConnectionResult'ALREADY_SPENT))
                )
                (when (= result :ConnectionResult'SUCCESS)
                    (.. Wallet'log (info "Connected pending tx input {}:{}", (.. __pendingTx (getHashAsString)), (.. __pendingTx (getInputs) (indexOf input))))
                    ;; The unspents map might not have it if we never saw this tx until it was included in the chain
                    ;; and thus becomes spent the moment we become aware of it.
                    (when (.. (:my-unspents this) (remove (.. input (getConnectedOutput))))
                        (.. Wallet'log (info "Removed from UNSPENTS: {}", (.. input (getConnectedOutput))))
                    )
                )
            )
        )
        (cond (not __fromChain)
            (do
                (.. this (maybeMovePool tx, "pendingtx"))
            )
            :else
            (do
                ;; If the transactions outputs are now all spent, it will be moved into the spent pool by the
                ;; processTxFromBestChain method.
            )
        )
        nil
    )

    ;; Updates the wallet when a double spend occurs.  overridingTx can be null for the case of coinbases.
    #_private
    (§ method- #_"void" killTxns [#_"Set<Transaction>" __txnsToKill, #_nilable #_"Transaction" __overridingTx]
        (let [#_"LinkedList<Transaction>" work (LinkedList. #_"<>" __txnsToKill)]
            (while (not (.. work (isEmpty)))
                (let [#_"Transaction" tx (.. work (poll))]
                    (.. Wallet'log (warn "TX {} killed{}", (.. tx (getHashAsString)), (if (some? __overridingTx) (str " by " (.. __overridingTx (getHashAsString))) "")))
                    (.. Wallet'log (warn "Disconnecting each input and moving connected transactions."))
                    ;; TX could be pending (finney attack), or in unspent/spent (coinbase killed by reorg).
                    (.. (:pending this) (remove (.. tx (getHash))))
                    (.. (:unspent this) (remove (.. tx (getHash))))
                    (.. (:spent this) (remove (.. tx (getHash))))
                    (.. this (addWalletTransaction :PoolType'DEAD, tx))
                    (doseq [#_"TransactionInput" dead (.. tx (getInputs))]
                        (let [#_"Transaction" connected (.. dead (getConnectedTransaction))]
                            (when (some? connected)
                                (when (and (not= (.. connected (getConfidence) (getConfidenceType)) ConfidenceType'DEAD) (some? (.. dead (getConnectedOutput) (getSpentBy))) (.. dead (getConnectedOutput) (getSpentBy) (equals dead)))
                                    (assert-state (.. (:my-unspents this) (add (.. dead (getConnectedOutput)))))
                                    (.. Wallet'log (info "Added to UNSPENTS: {} in {}", (.. dead (getConnectedOutput)), (.. dead (getConnectedOutput) (getParentTransaction) (getHash))))
                                )
                                (.. dead (disconnect))
                                (.. this (maybeMovePool connected, "kill"))
                            )
                        )
                    )
                    (.. tx (getConfidence) (setOverridingTransaction __overridingTx))
                    (.. (:confidence-changed this) (put tx, :ConfidenceChangeReason'TYPE))
                    ;; Now kill any transactions we have that depended on this one.
                    (doseq [#_"TransactionOutput" __deadOutput (.. tx (getOutputs))]
                        (when (.. (:my-unspents this) (remove __deadOutput))
                            (.. Wallet'log (info "XX Removed from UNSPENTS: {}", __deadOutput))
                        )
                        (let [#_"TransactionInput" connected (.. __deadOutput (getSpentBy))]
                            (when (some? connected)
                                (let [#_"Transaction" parent (.. connected (getParentTransaction))]
                                    (.. Wallet'log (info "This death invalidated dependent tx {}", (.. parent (getHash))))
                                    (.. work (push parent))
                                )
                            )
                        )
                    )
                )
            )
            (when (some? __overridingTx)
                (.. Wallet'log (warn "Now attempting to connect the inputs of the overriding transaction."))
                (doseq [#_"TransactionInput" input (.. __overridingTx (getInputs))]
                    (let [#_"ConnectionResult" result (.. input (connect (:unspent this), :ConnectionMode'DISCONNECT_ON_CONFLICT))]
                        (if (= result :ConnectionResult'SUCCESS)
                            (do
                                (.. this (maybeMovePool (.. input (getConnectedTransaction)), "kill"))
                                (.. (:my-unspents this) (remove (.. input (getConnectedOutput))))
                                (.. Wallet'log (info "Removing from UNSPENTS: {}", (.. input (getConnectedOutput))))
                            )
                            (let [result (.. input (connect (:spent this), :ConnectionMode'DISCONNECT_ON_CONFLICT))]
                                (when (= result :ConnectionResult'SUCCESS)
                                    (.. this (maybeMovePool (.. input (getConnectedTransaction)), "kill"))
                                    (.. (:my-unspents this) (remove (.. input (getConnectedOutput))))
                                    (.. Wallet'log (info "Removing from UNSPENTS: {}", (.. input (getConnectedOutput))))
                                )
                            )
                        )
                    )
                )
            )
        )
        nil
    )

    ;;;
     ; If the transactions outputs are all marked as spent, and it's in the unspent map, move it.
     ; If the owned transactions outputs are not all marked as spent, and it's in the spent map, move it.
     ;;
    #_private
    (§ method- #_"void" maybeMovePool [#_"Transaction" tx, #_"String" context]
        (assert-state (.. (:lock this) (isHeldByCurrentThread)))

        (cond (.. tx (isEveryOwnedOutputSpent this))
            (do
                ;; There's nothing left I can spend in this transaction.
                (when (some? (.. (:unspent this) (remove (.. tx (getHash)))))
                    (when (.. Wallet'log (isInfoEnabled))
                        (.. Wallet'log (info "  {} {} <-unspent ->spent", (.. tx (getHashAsString)), context))
                    )
                    (.. (:spent this) (put (.. tx (getHash)), tx))
                )
            )
            :else
            (do
                (when (some? (.. (:spent this) (remove (.. tx (getHash)))))
                    (when (.. Wallet'log (isInfoEnabled))
                        (.. Wallet'log (info "  {} {} <-spent ->unspent", (.. tx (getHashAsString)), context))
                    )
                    (.. (:unspent this) (put (.. tx (getHash)), tx))
                )
            )
        )
        nil
    )

    ;;;
     ; Calls {@link Wallet#commitTx} if tx is not already in the pending pool.
     ;
     ; @return true if the tx was added to the wallet, or false if it was already in the pending pool.
     ;;
    #_public
    #_throws #_[ "VerificationException" ]
    (§ method #_"boolean" maybeCommitTx [#_"Transaction" tx]
        (.. tx (verify))
        (.. (:lock this) (lock))
        (try
            (when' (not (.. (:pending this) (containsKey (.. tx (getHash))))) => false
                (.. Wallet'log (info "commitTx of {}", (.. tx (getHashAsString))))
                (let [#_"Coin" balance (.. this (getBalance))]
                    (.. tx (setUpdateTime (Utils'now)))
                    ;; Put any outputs that are sending money back to us into the unspents map, and calculate their total value.
                    (let [#_"Coin" earned (reduce #(if (.. %2 (isMine this)) (.. %1 (add (.. %2 (getValue)))) %1) Coin'ZERO (.. tx (getOutputs)))]
                        ;; Mark the outputs we're spending as spent so we won't try and use them in future creations.  This will also
                        ;; move any transactions that are now fully spent to the spent map so we can skip them when creating future
                        ;; spends.
                        (.. this (updateForSpends tx, false))

                        (let [#_"Set<Transaction>" __doubleSpendPendingTxns (.. this (findDoubleSpendsAgainst tx, (:pending this)))
                              #_"Set<Transaction>" __doubleSpendUnspentTxns (.. this (findDoubleSpendsAgainst tx, (:unspent this)))
                              #_"Set<Transaction>" __doubleSpendSpentTxns (.. this (findDoubleSpendsAgainst tx, (:spent this)))]

                            (cond (or (not (.. __doubleSpendUnspentTxns (isEmpty))) (not (.. __doubleSpendSpentTxns (isEmpty))) (not (.. this (isNotSpendingTxnsInConfidenceType tx, ConfidenceType'DEAD))))
                                (do
                                    ;; tx is a double spend against a tx already in the best chain or spends outputs of a DEAD tx.
                                    ;; Add tx to the dead pool and schedule confidence listener notifications.
                                    (.. Wallet'log (info "->dead: {}", (.. tx (getHashAsString))))
                                    (.. tx (getConfidence) (setConfidenceType ConfidenceType'DEAD))
                                    (.. (:confidence-changed this) (put tx, :ConfidenceChangeReason'TYPE))
                                    (.. this (addWalletTransaction :PoolType'DEAD, tx))
                                )
                                (or (not (.. __doubleSpendPendingTxns (isEmpty))) (not (.. this (isNotSpendingTxnsInConfidenceType tx, ConfidenceType'IN_CONFLICT))))
                                (do
                                    ;; tx is a double spend against a pending tx or spends outputs of a tx already IN_CONFLICT.
                                    ;; Add tx to the pending pool.  Update the confidence type of tx, the txns in conflict with tx
                                    ;; and all their dependencies to IN_CONFLICT and schedule confidence listener notifications.
                                    (.. Wallet'log (info "->pending (IN_CONFLICT): {}", (.. tx (getHashAsString))))
                                    (.. this (addWalletTransaction :PoolType'PENDING, tx))
                                    (.. __doubleSpendPendingTxns (add tx))
                                    (.. this (addTransactionsDependingOn __doubleSpendPendingTxns, (.. this (getTransactions true))))
                                    (doseq [#_"Transaction" __doubleSpendTx __doubleSpendPendingTxns]
                                        (.. __doubleSpendTx (getConfidence) (setConfidenceType ConfidenceType'IN_CONFLICT))
                                        (.. (:confidence-changed this) (put __doubleSpendTx, :ConfidenceChangeReason'TYPE))
                                    )
                                )
                                :else
                                (do
                                    ;; No conflict detected.
                                    ;; Add to the pending pool and schedule confidence listener notifications.
                                    (.. Wallet'log (info "->pending: {}", (.. tx (getHashAsString))))
                                    (.. tx (getConfidence) (setConfidenceType ConfidenceType'PENDING))
                                    (.. (:confidence-changed this) (put tx, :ConfidenceChangeReason'TYPE))
                                    (.. this (addWalletTransaction :PoolType'PENDING, tx))
                                )
                            )
                            (when (.. Wallet'log (isInfoEnabled))
                                (.. Wallet'log (info "Estimated balance is now: {}", (.. this (getBalance :BalanceType'ESTIMATED) (toFriendlyString))))
                            )

                            ;; Mark any keys used in the outputs as "used", this allows wallet UI's to auto-advance the current key
                            ;; they are showing to the user in qr codes etc.
                            (.. this (markKeysAsUsed tx))
                            (try
                                (let [#_"Coin" spent (.. tx (getValueSentFromMe this))
                                      #_"Coin" __newBalance (.. balance (add earned) (subtract spent))]
                                    (when (< 0 (.. earned (signum)))
                                        (.. this (checkBalanceFuturesLocked nil))
                                        (.. this (queueOnCoinsReceived tx, balance, __newBalance))
                                    )
                                    (when (< 0 (.. spent (signum)))
                                        (.. this (queueOnCoinsSent tx, balance, __newBalance))
                                    )

                                    (.. this (maybeQueueOnWalletChanged))
                                )
                                (catch ScriptException e
                                    ;; Cannot happen as we just created this transaction ourselves.
                                    (throw (RuntimeException. e))
                                )
                            )

                            (.. this (isConsistentOrThrow))
                            (.. this (informConfidenceListenersIfNotReorganizing))
                            (.. this (saveNow))
                        )
                    )
                )
                true
            )
            (finally
                (.. (:lock this) (unlock))
            )
        )
    )

    ;;;
     ; Updates the wallet with the given transaction: puts it into the pending pool, sets the spent flags
     ; and runs the onCoinsSent/onCoinsReceived event listener.  Used in two situations:
     ;
     ; <ol>
     ;     <li>When we have just successfully transmitted the tx we created to the network.</li>
     ;     <li>When we receive a pending transaction that didn't appear in the chain yet, and we did not create it.</li>
     ; </ol>
     ;
     ; Triggers an auto save.
     ;;
    #_public
    #_throws #_[ "VerificationException" ]
    (§ method #_"void" commitTx [#_"Transaction" tx]
        (assert-argument (.. this (maybeCommitTx tx)), "commitTx called on the same transaction twice")
        nil
    )

    ;;;
     ; Adds an event listener object.  Methods on this object are called when something interesting happens,
     ; like receiving money.  Runs the listener methods in the user thread.
     ;;
    #_public
    (§ method #_"void" addChangeEventListener [#_"WalletChangeEventListener" listener]
        (.. this (addChangeEventListener Threading'USER_THREAD, listener))
        nil
    )

    ;;;
     ; Adds an event listener object.  Methods on this object are called when something interesting happens,
     ; like receiving money.  The listener is executed by the given executor.
     ;;
    #_public
    (§ method #_"void" addChangeEventListener [#_"Executor" executor, #_"WalletChangeEventListener" listener]
        ;; This is thread safe, so we don't need to take the lock.
        (.. (:change-listeners this) (add (ListenerRegistration. #_"<>" listener, executor)))
        nil
    )

    ;;;
     ; Adds an event listener object called when coins are received.
     ; Runs the listener methods in the user thread.
     ;;
    #_public
    (§ method #_"void" addCoinsReceivedEventListener [#_"WalletCoinsReceivedEventListener" listener]
        (.. this (addCoinsReceivedEventListener Threading'USER_THREAD, listener))
        nil
    )

    ;;;
     ; Adds an event listener object called when coins are received.
     ; The listener is executed by the given executor.
     ;;
    #_public
    (§ method #_"void" addCoinsReceivedEventListener [#_"Executor" executor, #_"WalletCoinsReceivedEventListener" listener]
        ;; This is thread safe, so we don't need to take the lock.
        (.. (:coins-received-listeners this) (add (ListenerRegistration. #_"<>" listener, executor)))
        nil
    )

    ;;;
     ; Adds an event listener object called when coins are sent.
     ; Runs the listener methods in the user thread.
     ;;
    #_public
    (§ method #_"void" addCoinsSentEventListener [#_"WalletCoinsSentEventListener" listener]
        (.. this (addCoinsSentEventListener Threading'USER_THREAD, listener))
        nil
    )

    ;;;
     ; Adds an event listener object called when coins are sent.
     ; The listener is executed by the given executor.
     ;;
    #_public
    (§ method #_"void" addCoinsSentEventListener [#_"Executor" executor, #_"WalletCoinsSentEventListener" listener]
        ;; This is thread safe, so we don't need to take the lock.
        (.. (:coins-sent-listeners this) (add (ListenerRegistration. #_"<>" listener, executor)))
        nil
    )

    ;;;
     ; Adds an event listener object.  Methods on this object are called when keys are
     ; added.  The listener is executed in the user thread.
     ;;
    #_public
    (§ method #_"void" addKeyChainEventListener [#_"KeyChainEventListener" listener]
        (.. (:key-chain-group this) (addEventListener listener, Threading'USER_THREAD))
        nil
    )

    ;;;
     ; Adds an event listener object.  Methods on this object are called when keys are
     ; added.  The listener is executed by the given executor.
     ;;
    #_public
    (§ method #_"void" addKeyChainEventListener [#_"Executor" executor, #_"KeyChainEventListener" listener]
        (.. (:key-chain-group this) (addEventListener listener, executor))
        nil
    )

    ;;;
     ; Adds an event listener object.  Methods on this object are called when something interesting happens,
     ; like receiving money.  Runs the listener methods in the user thread.
     ;;
    #_public
    (§ method #_"void" addReorganizeEventListener [#_"WalletReorganizeEventListener" listener]
        (.. this (addReorganizeEventListener Threading'USER_THREAD, listener))
        nil
    )

    ;;;
     ; Adds an event listener object.  Methods on this object are called when something interesting happens,
     ; like receiving money.  The listener is executed by the given executor.
     ;;
    #_public
    (§ method #_"void" addReorganizeEventListener [#_"Executor" executor, #_"WalletReorganizeEventListener" listener]
        ;; This is thread safe, so we don't need to take the lock.
        (.. (:reorganize-listeners this) (add (ListenerRegistration. #_"<>" listener, executor)))
        nil
    )

    ;;;
     ; Adds an event listener object.  Methods on this object are called when confidence
     ; of a transaction changes.  Runs the listener methods in the user thread.
     ;;
    #_public
    (§ method #_"void" addTransactionConfidenceEventListener [#_"TransactionConfidenceEventListener" listener]
        (.. this (addTransactionConfidenceEventListener Threading'USER_THREAD, listener))
        nil
    )

    ;;;
     ; Adds an event listener object.  Methods on this object are called when confidence
     ; of a transaction changes.  The listener is executed by the given executor.
     ;;
    #_public
    (§ method #_"void" addTransactionConfidenceEventListener [#_"Executor" executor, #_"TransactionConfidenceEventListener" listener]
        ;; This is thread safe, so we don't need to take the lock.
        (.. (:transaction-confidence-listeners this) (add (ListenerRegistration. #_"<>" listener, executor)))
        nil
    )

    ;;;
     ; Removes the given event listener object.  Returns true if the listener was removed,
     ; false if that listener was never added.
     ;;
    #_public
    (§ method #_"boolean" removeChangeEventListener [#_"WalletChangeEventListener" listener]
        (ListenerRegistration'removeFromList listener, (:change-listeners this))
    )

    ;;;
     ; Removes the given event listener object.  Returns true if the listener was removed,
     ; false if that listener was never added.
     ;;
    #_public
    (§ method #_"boolean" removeCoinsReceivedEventListener [#_"WalletCoinsReceivedEventListener" listener]
        (ListenerRegistration'removeFromList listener, (:coins-received-listeners this))
    )

    ;;;
     ; Removes the given event listener object.  Returns true if the listener was removed,
     ; false if that listener was never added.
     ;;
    #_public
    (§ method #_"boolean" removeCoinsSentEventListener [#_"WalletCoinsSentEventListener" listener]
        (ListenerRegistration'removeFromList listener, (:coins-sent-listeners this))
    )

    ;;;
     ; Removes the given event listener object.  Returns true if the listener was removed,
     ; false if that listener was never added.
     ;;
    #_public
    (§ method #_"boolean" removeKeyChainEventListener [#_"KeyChainEventListener" listener]
        (.. (:key-chain-group this) (removeEventListener listener))
    )

    ;;;
     ; Removes the given event listener object.  Returns true if the listener was removed,
     ; false if that listener was never added.
     ;;
    #_public
    (§ method #_"boolean" removeReorganizeEventListener [#_"WalletReorganizeEventListener" listener]
        (ListenerRegistration'removeFromList listener, (:reorganize-listeners this))
    )

    ;;;
     ; Removes the given event listener object.  Returns true if the listener was removed,
     ; false if that listener was never added.
     ;;
    #_public
    (§ method #_"boolean" removeTransactionConfidenceEventListener [#_"TransactionConfidenceEventListener" listener]
        (ListenerRegistration'removeFromList listener, (:transaction-confidence-listeners this))
    )

    #_private
    (§ method- #_"void" queueOnTransactionConfidenceChanged [#_"Transaction" tx]
        (assert-state (.. (:lock this) (isHeldByCurrentThread)))

        (doseq [#_"ListenerRegistration<TransactionConfidenceEventListener>" registration (:transaction-confidence-listeners this)]
            (cond (= (:executor registration) Threading'SAME_THREAD)
                (do
                    (.. (:listener registration) (onTransactionConfidenceChanged this, tx))
                )
                :else
                (do
                    (.. (:executor registration) (execute (Runnable.)
                    (§ anon
                        #_override
                        #_public
                        (§ method #_"void" run []
                            (.. (:listener registration) (onTransactionConfidenceChanged (§ dhis Wallet), tx))
                            nil
                        )
                    )))
                )
            )
        )
        nil
    )

    #_protected
    (§ method #_"void" maybeQueueOnWalletChanged []
        ;; Don't invoke the callback in some circumstances, e.g. whilst we are re-organizing or fiddling
        ;; with transactions due to a new block arriving.  It will be called later instead.
        (assert-state (.. (:lock this) (isHeldByCurrentThread)))
        (assert-state (<= 0 (:on-wallet-changed-suppressions this)))

        (when-not (< 0 (:on-wallet-changed-suppressions this))
            (doseq [#_"ListenerRegistration<WalletChangeEventListener>" registration (:change-listeners this)]
                (.. (:executor registration) (execute (Runnable.)
                (§ anon
                    #_override
                    #_public
                    (§ method #_"void" run []
                        (.. (:listener registration) (onWalletChanged (§ dhis Wallet)))
                        nil
                    )
                )))
            )
        )
        nil
    )

    #_protected
    (§ method #_"void" queueOnCoinsReceived [#_"Transaction" tx, #_"Coin" balance, #_"Coin" __newBalance]
        (assert-state (.. (:lock this) (isHeldByCurrentThread)))

        (doseq [#_"ListenerRegistration<WalletCoinsReceivedEventListener>" registration (:coins-received-listeners this)]
            (.. (:executor registration) (execute (Runnable.)
            (§ anon
                #_override
                #_public
                (§ method #_"void" run []
                    (.. (:listener registration) (onCoinsReceived (§ dhis Wallet), tx, balance, __newBalance))
                    nil
                )
            )))
        )
        nil
    )

    #_protected
    (§ method #_"void" queueOnCoinsSent [#_"Transaction" tx, #_"Coin" __prevBalance, #_"Coin" __newBalance]
        (assert-state (.. (:lock this) (isHeldByCurrentThread)))

        (doseq [#_"ListenerRegistration<WalletCoinsSentEventListener>" registration (:coins-sent-listeners this)]
            (.. (:executor registration) (execute (Runnable.)
            (§ anon
                #_override
                #_public
                (§ method #_"void" run []
                    (.. (:listener registration) (onCoinsSent (§ dhis Wallet), tx, __prevBalance, __newBalance))
                    nil
                )
            )))
        )
        nil
    )

    #_protected
    (§ method #_"void" queueOnReorganize []
        (assert-state (.. (:lock this) (isHeldByCurrentThread)))
        (assert-state (:inside-reorg this))

        (doseq [#_"ListenerRegistration<WalletReorganizeEventListener>" registration (:reorganize-listeners this)]
            (.. (:executor registration) (execute (Runnable.)
            (§ anon
                #_override
                #_public
                (§ method #_"void" run []
                    (.. (:listener registration) (onReorganize (§ dhis Wallet)))
                    nil
                )
            )))
        )
        nil
    )

    ;;;
     ; Returns a set of all transactions in the wallet.
     ;
     ; @param includeDead If true, transactions that were overridden by a double spend are included.
     ;;
    #_public
    (§ method #_"Set<Transaction>" getTransactions [#_"boolean" __includeDead]
        (.. (:lock this) (lock))
        (try
            (let [#_"Set<Transaction>" all (HashSet. #_"<>")]
                (.. all (addAll (.. (:unspent this) (values))))
                (.. all (addAll (.. (:spent this) (values))))
                (.. all (addAll (.. (:pending this) (values))))
                (when __includeDead
                    (.. all (addAll (.. (:dead this) (values))))
                )
                all
            )
            (finally
                (.. (:lock this) (unlock))
            )
        )
    )

    ;;;
     ; Returns a set of all WalletTransactions in the wallet.
     ;;
    #_public
    (§ method #_"Iterable<WalletTransaction>" getWalletTransactions []
        (.. (:lock this) (lock))
        (try
            (let [#_"Set<WalletTransaction>" all (HashSet. #_"<>")]
                (Wallet'addWalletTransactionsToSet all, :PoolType'UNSPENT, (.. (:unspent this) (values)))
                (Wallet'addWalletTransactionsToSet all, :PoolType'SPENT, (.. (:spent this) (values)))
                (Wallet'addWalletTransactionsToSet all, :PoolType'DEAD, (.. (:dead this) (values)))
                (Wallet'addWalletTransactionsToSet all, :PoolType'PENDING, (.. (:pending this) (values)))
                all
            )
            (finally
                (.. (:lock this) (unlock))
            )
        )
    )

    #_private
    #_static
    (§ defn- #_"void" Wallet'addWalletTransactionsToSet [#_"Set<WalletTransaction>" txns, #_"PoolType" __poolType, #_"Collection<Transaction>" pool]
        (doseq [#_"Transaction" tx pool]
            (.. txns (add (WalletTransaction. __poolType, tx)))
        )
        nil
    )

    ;;;
     ; Adds a transaction that has been associated with a particular wallet pool.  This is intended for usage
     ; by deserialization code, such as the {@link WalletSerializer} class.  It isn't normally useful for
     ; applications.  It does not trigger auto saving.
     ;;
    #_public
    (§ method #_"void" addWalletTransaction [#_"WalletTransaction" wtx]
        (.. (:lock this) (lock))
        (try
            (.. this (addWalletTransaction (.. wtx (getPool)), (.. wtx (getTransaction))))
            (finally
                (.. (:lock this) (unlock))
            )
        )
        nil
    )

    ;;;
     ; Adds the given transaction to the given pools and registers a confidence change listener on it.
     ;;
    #_private
    (§ method- #_"void" addWalletTransaction [#_"PoolType" pool, #_"Transaction" tx]
        (assert-state (.. (:lock this) (isHeldByCurrentThread)))

        (.. (:transactions this) (put (.. tx (getHash)), tx))
        (condp = pool
            :PoolType'UNSPENT (assert-state (nil? (.. (:unspent this) (put (.. tx (getHash)), tx))))
            :PoolType'SPENT   (assert-state (nil? (.. (:spent this) (put (.. tx (getHash)), tx))))
            :PoolType'PENDING (assert-state (nil? (.. (:pending this) (put (.. tx (getHash)), tx))))
            :PoolType'DEAD    (assert-state (nil? (.. (:dead this) (put (.. tx (getHash)), tx))))
            (throw (RuntimeException. (str "Unknown wallet transaction type " pool)))
        )

        (when (any = pool :PoolType'UNSPENT :PoolType'PENDING)
            (doseq [#_"TransactionOutput" output (.. tx (getOutputs))]
                (when (and (.. output (isAvailableForSpending)) (.. output (isMine this)))
                    (.. (:my-unspents this) (add output))
                )
            )
        )
        ;; This is safe even if the listener has been added before, as TransactionConfidence ignores duplicate
        ;; registration requests.  That makes the code in the wallet simpler.
        (.. tx (getConfidence) (addEventListener Threading'SAME_THREAD, (:tx-confidence-listener this)))
        nil
    )

    ;;;
     ; Returns all non-dead, active transactions ordered by recency.
     ;;
    #_public
    (§ method #_"List<Transaction>" getTransactionsByTime []
        (.. this (getRecentTransactions 0, false))
    )

    ;;;
     ; Returns an list of N transactions, ordered by increasing age.  Transactions on side chains are not included.
     ; Dead transactions (overridden by double spends) are optionally included.
     ;
     ; Note: the current implementation is O(num transactions in wallet).  Regardless of how many transactions are
     ; requested, the cost is always the same.  In future, requesting smaller numbers of transactions may be faster
     ; depending on how the wallet is implemented (e.g. if backed by a database).
     ;;
    #_public
    (§ method #_"List<Transaction>" getRecentTransactions [#_"int" n, #_"boolean" __includeDead]
        (.. (:lock this) (lock))
        (try
            (assert-argument (<= 0 n))

            ;; Firstly, put all transactions into an array.
            (let [#_"int" size (+ (.. (:unspent this) (size)) (.. (:spent this) (size)) (.. (:pending this) (size)))
                  n (if (or (< size n) (= n 0)) size n)
                  #_"ArrayList<Transaction>" all (ArrayList. #_"<>" (.. this (getTransactions __includeDead)))]
                ;; Order by update time.
                (Collections/sort all, Transaction'SORT_TX_BY_UPDATE_TIME)
                (when (not= n (.. all (size)))
                    (.. all (subList n, (.. all (size))) (clear))
                )
                all
            )
            (finally
                (.. (:lock this) (unlock))
            )
        )
    )

    ;;;
     ; Returns a transaction object given its hash, if it exists in this wallet, or null otherwise.
     ;;
    #_nilable
    #_public
    (§ method #_"Transaction" getTransaction [#_"Sha256Hash" hash]
        (.. (:lock this) (lock))
        (try
            (.. (:transactions this) (get hash))
            (finally
                (.. (:lock this) (unlock))
            )
        )
    )

    ;;; {@inheritDoc} ;;
    #_override
    #_public
    (§ method #_"Map<Sha256Hash, Transaction>" getTransactionPool [#_"PoolType" pool]
        (.. (:lock this) (lock))
        (try
            (condp = pool
                :PoolType'UNSPENT (:unspent this)
                :PoolType'SPENT   (:spent this)
                :PoolType'PENDING (:pending this)
                :PoolType'DEAD    (:dead this)
                (throw (RuntimeException. (str "Unknown wallet transaction type " pool)))
            )
            (finally
                (.. (:lock this) (unlock))
            )
        )
    )

    ;;;
     ; Prepares the wallet for a blockchain replay.  Removes all transactions (as they would
     ; get in the way of the replay) and makes the wallet think it has never seen a block.
     ;;
    #_public
    (§ method #_"void" reset []
        (.. (:lock this) (lock))
        (try
            (.. this (clearTransactions))
            (§ assoc this :last-block-seen-hash nil)
            (§ assoc this :last-block-seen-height -1) ;; Magic value for 'never'.
            (§ assoc this :last-block-seen-time-secs 0)
            (.. this (saveLater))
            (.. this (maybeQueueOnWalletChanged))
            (finally
                (.. (:lock this) (unlock))
            )
        )
        nil
    )

    ;;;
     ; Deletes transactions which appeared above the given block height from the wallet, but does not touch the keys.
     ; This is useful if you have some keys and wish to replay the block chain into the wallet in order to pick them up.
     ; Triggers auto saving.
     ;;
    #_public
    (§ method #_"void" clearTransactions [#_"int" __fromHeight]
        (.. (:lock this) (lock))
        (try
            (cond (= __fromHeight 0)
                (do
                    (.. this (clearTransactions))
                    (.. this (saveLater))
                )
                :else
                (do
                    (throw (UnsupportedOperationException.))
                )
            )
            (finally
                (.. (:lock this) (unlock))
            )
        )
        nil
    )

    #_private
    (§ method- #_"void" clearTransactions []
        (.. (:unspent this) (clear))
        (.. (:spent this) (clear))
        (.. (:pending this) (clear))
        (.. (:dead this) (clear))
        (.. (:transactions this) (clear))
        (.. (:my-unspents this) (clear))
        nil
    )

    ;;;
     ; Clean up the wallet.  Currently, it only removes risky pending transaction from the wallet and only
     ; if their outputs have not been spent.
     ;;
    #_public
    (§ method #_"void" cleanup []
        (.. (:lock this) (lock))
        (try
            (let [#_"boolean" dirty false]
                (loop-when-recur [#_"Iterator<Transaction>" it (.. (:pending this) (values) (iterator))] (.. it (hasNext)) []
                    (let [#_"Transaction" tx (.. it (next))]
                        (when (and (.. this (isTransactionRisky tx, nil)) (not (:accept-risky-transactions this)))
                            (.. Wallet'log (debug "Found risky transaction {} in wallet during cleanup.", (.. tx (getHashAsString))))
                            (if (.. tx (isAnyOutputSpent))
                                (.. Wallet'log (info "Cannot remove transaction {} from pending pool during cleanup, as it's already spent partially.", (.. tx (getHashAsString))))
                                (do
                                    ;; Sync myUnspents with the change.
                                    (doseq [#_"TransactionInput" input (.. tx (getInputs))]
                                        (let [#_"TransactionOutput" output (.. input (getConnectedOutput))]
                                            (when (some? output)
                                                (when (.. output (isMine this))
                                                    (assert-state (.. (:my-unspents this) (add output)))
                                                )
                                                (.. input (disconnect))
                                            )
                                        )
                                    )
                                    (doseq [#_"TransactionOutput" output (.. tx (getOutputs))]
                                        (.. (:my-unspents this) (remove output))
                                    )

                                    (.. it (remove))
                                    (.. (:transactions this) (remove (.. tx (getHash))))
                                    (§ ass dirty true)
                                    (.. Wallet'log (info "Removed transaction {} from pending pool during cleanup.", (.. tx (getHashAsString))))
                                )
                            )
                        )
                    )
                )
                (when dirty
                    (.. this (isConsistentOrThrow))
                    (.. this (saveLater))
                    (when (.. Wallet'log (isInfoEnabled))
                        (.. Wallet'log (info "Estimated balance is now: {}", (.. this (getBalance :BalanceType'ESTIMATED) (toFriendlyString))))
                    )
                )
            )
            (finally
                (.. (:lock this) (unlock))
            )
        )
        nil
    )

    (§ method #_"EnumSet<PoolType>" getContainingPools [#_"Transaction" tx]
        (.. (:lock this) (lock))
        (try
            (let [#_"EnumSet<PoolType>" result (EnumSet/noneOf PoolType)
                  #_"Sha256Hash" __txHash (.. tx (getHash))]
                (when (.. (:unspent this) (containsKey __txHash))
                    (.. result (add :PoolType'UNSPENT))
                )
                (when (.. (:spent this) (containsKey __txHash))
                    (.. result (add :PoolType'SPENT))
                )
                (when (.. (:pending this) (containsKey __txHash))
                    (.. result (add :PoolType'PENDING))
                )
                (when (.. (:dead this) (containsKey __txHash))
                    (.. result (add :PoolType'DEAD))
                )
                result
            )
            (finally
                (.. (:lock this) (unlock))
            )
        )
    )

    ;;; Returns a copy of the internal unspent outputs list. ;;
    #_public
    (§ method #_"List<TransactionOutput>" getUnspents []
        (.. (:lock this) (lock))
        (try
            (ArrayList. #_"<>" (:my-unspents this))
            (finally
                (.. (:lock this) (unlock))
            )
        )
    )

    #_override
    #_public
    (§ method #_"String" toString []
        (.. this (toString false, true, nil))
    )

    ;;;
     ; Formats the wallet as a human readable piece of text.  Intended for debugging, the format is
     ; not meant to be stable or human readable.
     ;
     ; @param includePrivateKeys Whether raw private key data should be included.
     ; @param includeTransactions Whether to print transaction data.
     ; @param chain If set, will be used to estimate lock times for block timelocked transactions.
     ;;
    #_public
    (§ method #_"String" toString [#_"boolean" __includePrivateKeys, #_"boolean" __includeTransactions, #_nilable #_"AbstractBlockChain" chain]
        (.. (:lock this) (lock))
        (.. (:key-chain-group-lock this) (lock))
        (try
            (let [#_"StringBuilder" sb (StringBuilder.)
                  #_"Coin" __estimatedBalance (.. this (getBalance :BalanceType'ESTIMATED))
                  #_"Coin" __availableBalance (.. this (getBalance :BalanceType'AVAILABLE_SPENDABLE))]
                (.. sb (append "Wallet containing ") (append (.. __estimatedBalance (toFriendlyString))) (append " (spendable: ") (append (.. __availableBalance (toFriendlyString))) (append ") in:\n"))
                (.. sb (append "  ") (append (.. (:pending this) (size))) (append " pending transactions\n"))
                (.. sb (append "  ") (append (.. (:unspent this) (size))) (append " unspent transactions\n"))
                (.. sb (append "  ") (append (.. (:spent this) (size))) (append " spent transactions\n"))
                (.. sb (append "  ") (append (.. (:dead this) (size))) (append " dead transactions\n"))
                (let [#_"Date" __lastBlockSeenTime (.. this (getLastBlockSeenTime))]
                    (.. sb (append "Last seen best block: ") (append (.. this (getLastBlockSeenHeight))) (append " (") (append (if (some? __lastBlockSeenTime) (Utils'dateTimeFormat __lastBlockSeenTime) "time unknown")) (append "): ") (append (.. this (getLastBlockSeenHash))) (append "\n"))
                    (when (.. this (isWatching))
                        (.. sb (append "Wallet is watching.\n"))
                    )

                    ;; Do the keys.
                    (.. sb (append "\nKeys:\n"))
                    (.. sb (append "Earliest creation time: ") (append (Utils'dateTimeFormat (* (.. this (getEarliestKeyCreationTime)) 1000))) (append "\n"))
                    (let [#_"Date" __keyRotationTime (.. this (getKeyRotationTime))]
                        (when (some? __keyRotationTime)
                            (.. sb (append "Key rotation time:      ") (append (Utils'dateTimeFormat __keyRotationTime)) (append "\n"))
                        )
                        (.. sb (append (.. (:key-chain-group this) (toString __includePrivateKeys))))

                        (when __includeTransactions
                            ;; Print the transactions themselves.
                            (when (< 0 (.. (:pending this) (size)))
                                (.. sb (append "\n>>> PENDING:\n"))
                                (.. this (toStringHelper sb, (:pending this), chain, Transaction'SORT_TX_BY_UPDATE_TIME))
                            )
                            (when (< 0 (.. (:unspent this) (size)))
                                (.. sb (append "\n>>> UNSPENT:\n"))
                                (.. this (toStringHelper sb, (:unspent this), chain, Transaction'SORT_TX_BY_HEIGHT))
                            )
                            (when (< 0 (.. (:spent this) (size)))
                                (.. sb (append "\n>>> SPENT:\n"))
                                (.. this (toStringHelper sb, (:spent this), chain, Transaction'SORT_TX_BY_HEIGHT))
                            )
                            (when (< 0 (.. (:dead this) (size)))
                                (.. sb (append "\n>>> DEAD:\n"))
                                (.. this (toStringHelper sb, (:dead this), chain, Transaction'SORT_TX_BY_UPDATE_TIME))
                            )
                        )
                        (§ return (.. sb (toString)))
                    )
                )
            )
            (finally
                (.. (:key-chain-group-lock this) (unlock))
                (.. (:lock this) (unlock))
            )
        )
    )

    #_private
    (§ method- #_"void" toStringHelper [#_"StringBuilder" sb, #_"Map<Sha256Hash, Transaction>" __transactionMap, #_nilable #_"AbstractBlockChain" chain, #_nilable #_"Comparator<Transaction>" __sortOrder]
        (assert-state (.. (:lock this) (isHeldByCurrentThread)))

        (let [#_"Collection<Transaction>" txns]
            (cond (some? __sortOrder)
                (do
                    (§ ass txns (TreeSet. #_"<>" __sortOrder))
                    (.. txns (addAll (.. __transactionMap (values))))
                )
                :else
                (do
                    (§ ass txns (.. __transactionMap (values)))
                )
            )

            (doseq [#_"Transaction" tx txns]
                (try
                    (.. sb (append (.. tx (getValue this) (toFriendlyString))))
                    (.. sb (append " total value (sends "))
                    (.. sb (append (.. tx (getValueSentFromMe this) (toFriendlyString))))
                    (.. sb (append " and receives "))
                    (.. sb (append (.. tx (getValueSentToMe this) (toFriendlyString))))
                    (.. sb (append ")\n"))
                    (catch ScriptException _
                        ;; Ignore and don't print this line.
                    )
                )
                (when (.. tx (hasConfidence))
                    (.. sb (append "  confidence: ") (append (.. tx (getConfidence))) (append "\n"))
                )
                (.. sb (append (.. tx (toString chain))))
            )
        )
        nil
    )

    ;;;
     ; Returns an immutable view of the transactions currently waiting for network confirmations.
     ;;
    #_public
    (§ method #_"Collection<Transaction>" getPendingTransactions []
        (.. (:lock this) (lock))
        (try
            (Collections/unmodifiableCollection (.. (:pending this) (values)))
            (finally
                (.. (:lock this) (unlock))
            )
        )
    )

    ;;;
     ; Returns the earliest creation time of keys or watched scripts in this wallet, in seconds since the epoch,
     ; i.e. the min of {@link ECKey#getCreationTimeSeconds()}.  This can return zero if at least
     ; one key does not have that data (was created before key timestamping was implemented).
     ;
     ; This method is most often used in conjunction with {@link PeerGroup#setFastCatchupTimeSecs(long)} in order to
     ; optimize chain download for new users of wallet apps.  Backwards compatibility notice: if you get zero from this
     ; method, you can instead use the time of the first release of your software, as it's guaranteed no users will
     ; have wallets pre-dating this time.
     ;
     ; If there are no keys in the wallet, the current time is returned.
     ;;
    #_override
    #_public
    (§ method #_"long" getEarliestKeyCreationTime []
        (.. (:key-chain-group-lock this) (lock))
        (try
            (let [#_"long" __earliestTime (.. (:key-chain-group this) (getEarliestKeyCreationTime))]
                (if (= __earliestTime Long/MAX_VALUE) (Utils'currentTimeSeconds) __earliestTime)
            )
            (finally
                (.. (:key-chain-group-lock this) (unlock))
            )
        )
    )

    ;;; Returns the hash of the last seen best-chain block, or null if the wallet is too old to store this data. ;;
    #_nilable
    #_public
    (§ method #_"Sha256Hash" getLastBlockSeenHash []
        (.. (:lock this) (lock))
        (try
            (:last-block-seen-hash this)
            (finally
                (.. (:lock this) (unlock))
            )
        )
    )

    #_public
    (§ method #_"void" setLastBlockSeenHash [#_nilable #_"Sha256Hash" __lastBlockSeenHash]
        (.. (:lock this) (lock))
        (try
            (§ assoc this :last-block-seen-hash __lastBlockSeenHash)
            (finally
                (.. (:lock this) (unlock))
            )
        )
        nil
    )

    #_public
    (§ method #_"void" setLastBlockSeenHeight [#_"int" __lastBlockSeenHeight]
        (.. (:lock this) (lock))
        (try
            (§ assoc this :last-block-seen-height __lastBlockSeenHeight)
            (finally
                (.. (:lock this) (unlock))
            )
        )
        nil
    )

    #_public
    (§ method #_"void" setLastBlockSeenTimeSecs [#_"long" __timeSecs]
        (.. (:lock this) (lock))
        (try
            (§ assoc this :last-block-seen-time-secs __timeSecs)
            (finally
                (.. (:lock this) (unlock))
            )
        )
        nil
    )

    ;;;
     ; Returns the UNIX time in seconds since the epoch extracted from the last best seen block header.  This timestamp
     ; is <b>not</b> the local time at which the block was first observed by this application but rather what the block
     ; (i.e. miner) self declares.  It is allowed to have some significant drift from the real time at which the block
     ; was found, although most miners do use accurate times.  If this wallet is old and does not have a recorded
     ; time then this method returns zero.
     ;;
    #_public
    (§ method #_"long" getLastBlockSeenTimeSecs []
        (.. (:lock this) (lock))
        (try
            (:last-block-seen-time-secs this)
            (finally
                (.. (:lock this) (unlock))
            )
        )
    )

    ;;;
     ; Returns a {@link Date} representing the time extracted from the last best seen block header.  This timestamp
     ; is <b>not</b> the local time at which the block was first observed by this application but rather what the block
     ; (i.e. miner) self declares.  It is allowed to have some significant drift from the real time at which the block
     ; was found, although most miners do use accurate times.  If this wallet is old and does not have a recorded
     ; time then this method returns null.
     ;;
    #_nilable
    #_public
    (§ method #_"Date" getLastBlockSeenTime []
        (let [#_"long" secs (.. this (getLastBlockSeenTimeSecs))]
            (if (= secs 0) nil (Date. (* secs 1000)))
        )
    )

    ;;;
     ; Returns the height of the last seen best-chain block.  Can be 0 if a wallet is brand new or -1 if the wallet
     ; is old and doesn't have that data.
     ;;
    #_public
    (§ method #_"int" getLastBlockSeenHeight []
        (.. (:lock this) (lock))
        (try
            (:last-block-seen-height this)
            (finally
                (.. (:lock this) (unlock))
            )
        )
    )

    ;;;
     ; Set the description of the wallet.
     ; This is a Unicode encoding string typically entered by the user as descriptive text for the wallet.
     ;;
    #_public
    (§ method #_"void" setDescription [#_"String" description]
        (§ assoc this :description description)
        nil
    )

    ;;;
     ; Get the description of the wallet.  See {@link Wallet#setDescription(String)}.
     ;;
    #_public
    (§ method #_"String" getDescription []
        (:description this)
    )

    ;;;
     ; It's possible to calculate a wallets balance from multiple points of view.  This enum selects which
     ; {@link #getBalance(BalanceType)} should use.
     ;
     ; Consider a real-world example: you buy a snack costing $5 but you only have a $10 bill.  At the start
     ; you have $10 viewed from every possible angle.  After you order the snack you hand over your $10 bill.
     ; From the perspective of your wallet you have zero dollars (AVAILABLE).  But you know in a few seconds the
     ; shopkeeper will give you back $5 change so most people in practice would say they have $5 (ESTIMATED).
     ;
     ; The fact that the wallet can track transactions which are not spendable by itself ("watching wallets")
     ; adds another type of balance to the mix.  Although the wallet won't do this by default, advanced use cases
     ; that override the relevancy checks can end up with a mix of spendable and unspendable transactions.
     ;;
    #_public
    #_static
    #_enum
    (def BalanceType'values
    #{
        ;;;
         ; Balance calculated assuming all pending transactions are in fact included into the best chain by miners.
         ; This includes the value of immature coinbase transactions.
         ;;
        :BalanceType'ESTIMATED

        ;;;
         ; Balance that could be safely used to create new spends, if we had all the needed private keys.  This is
         ; whatever the default coin selector would make available, which by default means transaction outputs with at
         ; least 1 confirmation and pending transactions created by our own wallet which have been propagated across
         ; the network.  Whether we <i>actually</i> have the private keys or not is irrelevant for this balance type.
         ;;
        :BalanceType'AVAILABLE

        ;;; Same as ESTIMATED but only for outputs we have the private keys for and can sign ourselves. ;;
        :BalanceType'ESTIMATED_SPENDABLE
        ;;; Same as AVAILABLE but only for outputs we have the private keys for and can sign ourselves. ;;
        :BalanceType'AVAILABLE_SPENDABLE
    })

    ;;;
     ; Returns the AVAILABLE balance of this wallet.
     ; See {@link BalanceType#AVAILABLE} for details on what this means.
     ;;
    #_public
    (§ method #_"Coin" getBalance []
        (.. this (getBalance :BalanceType'AVAILABLE))
    )

    ;;;
     ; Returns the balance of this wallet as calculated by the provided balanceType.
     ;;
    #_public
    (§ method #_"Coin" getBalance [#_"BalanceType" __balanceType]
        (.. (:lock this) (lock))
        (try
            (cond (any = __balanceType :BalanceType'AVAILABLE :BalanceType'AVAILABLE_SPENDABLE)
                (do
                    (let [#_"List<TransactionOutput>" candidates (.. this (calculateAllSpendCandidates true, (= __balanceType :BalanceType'AVAILABLE_SPENDABLE)))
                          #_"CoinSelection" selection (.. (:coin-selector this) (select NetworkParameters'MAX_MONEY, candidates))]
                        (§ return (:value-gathered selection))
                    )
                )
                (any = __balanceType :BalanceType'ESTIMATED :BalanceType'ESTIMATED_SPENDABLE)
                (do
                    (let [#_"List<TransactionOutput>" all (.. this (calculateAllSpendCandidates false, (= __balanceType :BalanceType'ESTIMATED_SPENDABLE)))
                          #_"Coin" value Coin'ZERO]
                        (doseq [#_"TransactionOutput" out all]
                            (§ ass value (.. value (add (.. out (getValue)))))
                        )
                        (§ return value)
                    )
                )
                :else
                (do
                    (throw (AssertionError. "Unknown balance type")) ;; Unreachable.
                )
            )
            (finally
                (.. (:lock this) (unlock))
            )
        )
    )

    ;;;
     ; Returns the balance that would be considered spendable by the given coin selector, including watched outputs
     ; (i.e. balance includes outputs we don't have the private keys for).  Just asks it to select as many coins as
     ; possible and returns the total.
     ;;
    #_public
    (§ method #_"Coin" getBalance [#_"CoinSelector" selector]
        (.. (:lock this) (lock))
        (try
            (ensure some? selector)

            (let [#_"List<TransactionOutput>" candidates (.. this (calculateAllSpendCandidates true, false))
                  #_"CoinSelection" selection (.. selector (select (.. (:params this) (getMaxMoney)), candidates))]
                (:value-gathered selection)
            )
            (finally
                (.. (:lock this) (unlock))
            )
        )
    )

    #_private
    #_static
    (§ class- BalanceFutureRequest
        #_public
        (§ field #_"SettableFuture<Coin>" :future)
        #_public
        (§ field #_"Coin" :value)
        #_public
        (§ field #_"BalanceType" :type)
    )
    #_private
    (§ field- #_"List<BalanceFutureRequest>" :balance-future-requests (Lists/newLinkedList))

    ;;;
     ; Returns a future that will complete when the balance of the given type has become equal or larger to the
     ; given value.  If the wallet already has a large enough balance the future is returned in a pre-completed state.
     ; Note that this method is not blocking, if you want to actually wait immediately, you have to call .get() on
     ; the result.
     ;
     ; Also note that by the time the future completes, the wallet may have changed yet again if something else
     ; is going on in parallel, so you should treat the returned balance as advisory and be prepared for sending
     ; money to fail!  Finally please be aware that any listeners on the future will run either on the calling thread
     ; if it completes immediately, or eventually on a background thread if the balance is not yet at the right
     ; level.  If you do something that means you know the balance should be sufficient to trigger the future,
     ; you can use {@link Threading#waitForUserCode()} to block until the future had a
     ; chance to be updated.
     ;;
    #_public
    (§ method #_"ListenableFuture<Coin>" getBalanceFuture [#_"Coin" value, #_"BalanceType" type]
        (.. (:lock this) (lock))
        (try
            (let [#_"SettableFuture<Coin>" future (SettableFuture/create)
                  #_"Coin" current (.. this (getBalance type))]
                (cond (<= 0 (.. current (compareTo value)))
                    (do
                        ;; Already have enough.
                        (.. future (set current))
                    )
                    :else
                    (do
                        ;; Will be checked later in checkBalanceFutures.  We don't just add an event listener for ourselves
                        ;; here so that running getBalanceFuture().get() in the user code thread works - generally we must
                        ;; avoid giving the user back futures that require the user code thread to be free.
                        (let [#_"BalanceFutureRequest" req (BalanceFutureRequest.)]
                            (§ assoc req :future future)
                            (§ assoc req :value value)
                            (§ assoc req :type type)
                            (.. (:balance-future-requests this) (add req))
                        )
                    )
                )
                future
            )
            (finally
                (.. (:lock this) (unlock))
            )
        )
    )

    ;; Runs any balance futures in the user code thread.
    #_suppress #_[ "FieldAccessNotGuarded" ]
    #_private
    (§ method- #_"void" checkBalanceFuturesLocked [#_nilable #_"Coin" avail]
        (assert-state (.. (:lock this) (isHeldByCurrentThread)))

        (let [#_"ListIterator<BalanceFutureRequest>" it (.. (:balance-future-requests this) (listIterator))]
            (while (.. it (hasNext))
                (let [#_"BalanceFutureRequest" req (.. it (next))
                      #_"Coin" val (.. this (getBalance (:type req)))] ;; This could be slow for lots of futures.
                    (when (< (.. val (compareTo (:value req))) 0)
                        (§ continue )
                    )
                    ;; Found one that's finished.
                    (.. it (remove))
                    (let [#_"Coin" v val]
                        ;; Don't run any user-provided future listeners with our lock held.
                        (.. Threading'USER_THREAD (execute (Runnable.)
                        (§ anon
                            #_override
                            #_public
                            (§ method #_"void" run []
                                (.. (:future req) (set v))
                                nil
                            )
                        )))
                    )
                )
            )
        )
        nil
    )

    ;;;
     ; Returns the amount of bitcoin ever received via output.  <b>This is not the balance!</b>  If an output
     ; spends from a transaction whose inputs are also to our wallet, the input amounts are deducted from the
     ; outputs contribution, with a minimum of zero contribution.  The idea behind this is we avoid double
     ; counting money sent to us.
     ;
     ; @return the total amount of satoshis received, regardless of whether it was spent or not.
     ;;
    #_public
    (§ method #_"Coin" getTotalReceived []
        (let [#_"Coin" total Coin'ZERO]

            ;; Include outputs to us if they were not just change outputs, i.e. the inputs to us summed to less
            ;; than the outputs to us.
            (doseq [#_"Transaction" tx (.. (:transactions this) (values))]
                (let [#_"Coin" __txTotal Coin'ZERO]
                    (doseq [#_"TransactionOutput" output (.. tx (getOutputs))]
                        (when (.. output (isMine this))
                            (§ ass __txTotal (.. __txTotal (add (.. output (getValue)))))
                        )
                    )
                    (doseq [#_"TransactionInput" in (.. tx (getInputs))]
                        (let [#_"TransactionOutput" __prevOut (.. in (getConnectedOutput))]
                            (when (and (some? __prevOut) (.. __prevOut (isMine this)))
                                (§ ass __txTotal (.. __txTotal (subtract (.. __prevOut (getValue)))))
                            )
                        )
                    )
                    (when (.. __txTotal (isPositive))
                        (§ ass total (.. total (add __txTotal)))
                    )
                )
            )
            total
        )
    )

    ;;;
     ; Returns the amount of bitcoin ever sent via output.  If an output is sent to our own wallet, because of
     ; change or rotating keys or whatever, we do not count it.  If the wallet was involved in a shared transaction,
     ; i.e. there is some input to the transaction that we don't have the key for, then we multiply the sum of
     ; the output values by the proportion of satoshi coming in to our inputs.  Essentially we treat inputs as
     ; pooling into the transaction, becoming fungible and being equally distributed to all outputs.
     ;
     ; @return the total amount of satoshis sent by us.
     ;;
    #_public
    (§ method #_"Coin" getTotalSent []
        (let [#_"Coin" total Coin'ZERO]

            (doseq [#_"Transaction" tx (.. (:transactions this) (values))]
                ;; Count spent outputs to only if they were not to us.  This means we don't count change outputs.
                (let [#_"Coin" __txOutputTotal Coin'ZERO]
                    (doseq [#_"TransactionOutput" out (.. tx (getOutputs))]
                        (when (not (.. out (isMine this)))
                            (§ ass __txOutputTotal (.. __txOutputTotal (add (.. out (getValue)))))
                        )
                    )

                    ;; Count the input values to us
                    (let [#_"Coin" __txOwnedInputsTotal Coin'ZERO]
                        (doseq [#_"TransactionInput" in (.. tx (getInputs))]
                            (let [#_"TransactionOutput" out (.. in (getConnectedOutput))]
                                (when (and (some? out) (.. out (isMine this)))
                                    (§ ass __txOwnedInputsTotal (.. __txOwnedInputsTotal (add (.. out (getValue)))))
                                )
                            )
                        )

                        ;; If there is an input that isn't from us, i.e. this is a shared transaction.
                        (let [#_"Coin" __txInputsTotal (.. tx (getInputSum))]
                            (when (not= __txOwnedInputsTotal __txInputsTotal)
                                ;; Multiply our output total by the appropriate proportion to account for the inputs that we don't own.
                                (let [#_"BigInteger" n (.. (BigInteger. (.. __txOutputTotal (toString))) (multiply (BigInteger. (.. __txOwnedInputsTotal (toString)))) (divide (BigInteger. (.. __txInputsTotal (toString)))))]
                                    (§ ass __txOutputTotal (Coin'valueOf (.. n (longValue))))
                                )
                            )
                            (§ ass total (.. total (add __txOutputTotal)))
                        )
                    )
                )
            )
            total
        )
    )

    ;;; A SendResult is returned to you as part of sending coins to a recipient. ;;
    #_public
    #_static
    (§ class SendResult
        ;;; The Bitcoin transaction message that moves the money. ;;
        #_public
        (§ field #_"Transaction" :tx)
        ;;;
         ; A future that will complete once the tx message has been successfully broadcast to the network.
         ; This is just the result of calling broadcast.future().
         ;;
        #_public
        (§ field #_"ListenableFuture<Transaction>" :broadcast-complete)
        ;;; The broadcast object returned by the linked TransactionBroadcaster. ;;
        #_public
        (§ field #_"TransactionBroadcast" :broadcast)
    )

    ;;;
     ; Enumerates possible resolutions for missing signatures.
     ;;
    #_public
    #_static
    #_enum
    (def MissingSigsMode'values
    #{
        ;;; Input script will have OP_0 instead of missing signatures. ;;
        :MissingSigsMode'USE_OP_ZERO
        ;;;
         ; Missing signatures will be replaced by dummy sigs.  This is useful when you'd like to know the
         ; fee for a transaction without knowing the user's password, as fee depends on size.
         ;;
        :MissingSigsMode'USE_DUMMY_SIG
        ;;;
         ; If signature is missing, {@link TransactionSigner.MissingSignatureException}
         ; will be thrown for P2SH and {@link ECKey.MissingPrivateKeyException} for other tx types.
         ;;
        :MissingSigsMode'THROW
    })

    ;;;
     ; Statelessly creates a transaction that sends the given value to address.  The change is sent to
     ; {@link Wallet#currentChangeAddress()}, so you must have added at least one key.
     ;
     ; If you just want to send money quickly, you probably want
     ; {@link Wallet#sendCoins(TransactionBroadcaster, Address, Coin)} instead.  That will create the sending
     ; transaction, commit to the wallet and broadcast it to the network all in one go.  This method is lower
     ; level and lets you see the proposed transaction before anything is done with it.
     ;
     ; This is a helper method that is equivalent to using {@link SendRequest#to(Address, Coin)}
     ; followed by {@link Wallet#completeTx(Wallet.SendRequest)} and returning the requests transaction object.
     ; Note that this means a fee may be automatically added if required, if you want more control over the process,
     ; just do those two steps yourself.
     ;
     ; IMPORTANT: This method does NOT update the wallet.  If you call createSend again you may get two transactions
     ; that spend the same coins.  You have to call {@link Wallet#commitTx(Transaction)} on the created transaction to
     ; prevent this, but that should only occur once the transaction has been accepted by the network.  This implies
     ; you cannot have more than one outstanding sending tx at once.
     ;
     ; You MUST ensure that the value is not smaller than {@link Transaction#MIN_NONDUST_OUTPUT} or the transaction
     ; will almost certainly be rejected by the network as dust.
     ;
     ; @param address The Bitcoin address to send the money to.
     ; @param value How much currency to send.
     ; @return either the created Transaction or null if there are insufficient coins.
     ; @throws InsufficientMoneyException if the request could not be completed due to not enough balance.
     ; @throws DustySendRequested if the resultant transaction would violate the dust rules.
     ; @throws CouldNotAdjustDownwards if emptying the wallet was requested and the output can't be shrunk for fees without violating a protocol rule.
     ; @throws ExceededMaxTransactionSize if the resultant transaction is too big for Bitcoin to process.
     ; @throws MultipleOpReturnRequested if there is more than one OP_RETURN output for the resultant transaction.
     ;;
    #_public
    #_throws #_[ "InsufficientMoneyException" ]
    (§ method #_"Transaction" createSend [#_"Address" address, #_"Coin" value]
        (let [#_"SendRequest" request (SendRequest'to address, value)]
            (.. this (completeTx request))
            (:tx request)
        )
    )

    ;;;
     ; Sends coins to the given address but does not broadcast the resulting pending transaction.  It is still
     ; stored in the wallet, so when the wallet is added to a {@link PeerGroup} or {@link Peer} the transaction
     ; will be announced to the network.  The given {@link SendRequest} is completed first using
     ; {@link Wallet#completeTx(Wallet.SendRequest)} to make it valid.
     ;
     ; @return the Transaction that was created.
     ; @throws InsufficientMoneyException if the request could not be completed due to not enough balance.
     ; @throws IllegalArgumentException if you try and complete the same SendRequest twice.
     ; @throws DustySendRequested if the resultant transaction would violate the dust rules.
     ; @throws CouldNotAdjustDownwards if emptying the wallet was requested and the output can't be shrunk for fees without violating a protocol rule.
     ; @throws ExceededMaxTransactionSize if the resultant transaction is too big for Bitcoin to process.
     ; @throws MultipleOpReturnRequested if there is more than one OP_RETURN output for the resultant transaction.
     ;;
    #_public
    #_throws #_[ "InsufficientMoneyException" ]
    (§ method #_"Transaction" sendCoinsOffline [#_"SendRequest" request]
        (.. (:lock this) (lock))
        (try
            (.. this (completeTx request))
            (.. this (commitTx (:tx request)))
            (:tx request)
            (finally
                (.. (:lock this) (unlock))
            )
        )
    )

    ;;;
     ; Sends coins to the given address, via the given {@link PeerGroup}.  Change is returned to
     ; {@link Wallet#currentChangeAddress()}.  Note that a fee may be automatically added if one may be required
     ; for the transaction to be confirmed.
     ;
     ; The returned object provides both the transaction, and a future that can be used to learn when the broadcast
     ; is complete.  Complete means, if the PeerGroup is limited to only one connection, when it was written out to
     ; the socket.  Otherwise when the transaction is written out and we heard it back from a different peer.
     ;
     ; Note that the sending transaction is committed to the wallet immediately, not when the transaction is
     ; successfully broadcast.  This means that even if the network hasn't heard about your transaction you won't be
     ; able to spend those same coins again.
     ;
     ; You MUST ensure that value is not smaller than {@link Transaction#MIN_NONDUST_OUTPUT} or the transaction will
     ; almost certainly be rejected by the network as dust.
     ;
     ; @param broadcaster A {@link TransactionBroadcaster} to use to send the transactions out.
     ; @param to Which address to send coins to.
     ; @param value How much value to send.
     ; @return an object containing the transaction that was created, and a future for the broadcast of it.
     ; @throws InsufficientMoneyException if the request could not be completed due to not enough balance.
     ; @throws DustySendRequested if the resultant transaction would violate the dust rules.
     ; @throws CouldNotAdjustDownwards if emptying the wallet was requested and the output can't be shrunk for fees without violating a protocol rule.
     ; @throws ExceededMaxTransactionSize if the resultant transaction is too big for Bitcoin to process.
     ; @throws MultipleOpReturnRequested if there is more than one OP_RETURN output for the resultant transaction.
     ;;
    #_public
    #_throws #_[ "InsufficientMoneyException" ]
    (§ method #_"SendResult" sendCoins [#_"TransactionBroadcaster" broadcaster, #_"Address" to, #_"Coin" value]
        (let [#_"SendRequest" request (SendRequest'to to, value)]
            (.. this (sendCoins broadcaster, request))
        )
    )

    ;;;
     ; Sends coins according to the given request, via the given {@link TransactionBroadcaster}.
     ;
     ; The returned object provides both the transaction, and a future that can be used to learn when the broadcast
     ; is complete.  Complete means, if the PeerGroup is limited to only one connection, when it was written out to
     ; the socket.  Otherwise when the transaction is written out and we heard it back from a different peer.
     ;
     ; Note that the sending transaction is committed to the wallet immediately, not when the transaction is
     ; successfully broadcast.  This means that even if the network hasn't heard about your transaction you won't be
     ; able to spend those same coins again.
     ;
     ; @param broadcaster The target to use for broadcast.
     ; @param request The SendRequest that describes what to do, get one using static methods on SendRequest itself.
     ; @return an object containing the transaction that was created, and a future for the broadcast of it.
     ; @throws InsufficientMoneyException if the request could not be completed due to not enough balance.
     ; @throws IllegalArgumentException if you try and complete the same SendRequest twice.
     ; @throws DustySendRequested if the resultant transaction would violate the dust rules.
     ; @throws CouldNotAdjustDownwards if emptying the wallet was requested and the output can't be shrunk for fees without violating a protocol rule.
     ; @throws ExceededMaxTransactionSize if the resultant transaction is too big for Bitcoin to process.
     ; @throws MultipleOpReturnRequested if there is more than one OP_RETURN output for the resultant transaction.
     ;;
    #_public
    #_throws #_[ "InsufficientMoneyException" ]
    (§ method #_"SendResult" sendCoins [#_"TransactionBroadcaster" broadcaster, #_"SendRequest" request]
        ;; Should not be locked here, as we're going to call into the broadcaster and that might want to hold its
        ;; own lock.  sendCoinsOffline handles everything that needs to be locked.
        (assert-state (not (.. (:lock this) (isHeldByCurrentThread))))

        ;; Commit the TX to the wallet immediately so the spent coins won't be reused.
        ;; TODO: We should probably allow the request to specify tx commit only after the network has accepted it.
        (let [#_"Transaction" tx (.. this (sendCoinsOffline request))
              #_"SendResult" result (SendResult.)]
            (§ assoc result :tx tx)
            ;; The tx has been committed to the pending pool by this point (via sendCoinsOffline -> commitTx), so it has
            ;; a txConfidenceListener registered.  Once the tx is broadcast the peers will update the memory pool with the
            ;; count of seen peers, the memory pool will update the transaction confidence object, that will invoke the
            ;; txConfidenceListener which will in turn invoke the wallets event listener onTransactionConfidenceChanged
            ;; method.
            (§ assoc result :broadcast (.. broadcaster (broadcastTransaction tx)))
            (§ assoc result :broadcast-complete (.. (:broadcast result) (future)))
            result
        )
    )

    ;;;
     ; Satisfies the given {@link SendRequest} using the default transaction broadcaster configured either via
     ; {@link PeerGroup#addWallet(Wallet)} or directly with {@link #setTransactionBroadcaster(TransactionBroadcaster)}.
     ;
     ; @param request The SendRequest that describes what to do, get one using static methods on SendRequest itself.
     ; @return an object containing the transaction that was created, and a future for the broadcast of it.
     ; @throws IllegalStateException if no transaction broadcaster has been configured.
     ; @throws InsufficientMoneyException if the request could not be completed due to not enough balance.
     ; @throws IllegalArgumentException if you try and complete the same SendRequest twice.
     ; @throws DustySendRequested if the resultant transaction would violate the dust rules.
     ; @throws CouldNotAdjustDownwards if emptying the wallet was requested and the output can't be shrunk for fees without violating a protocol rule.
     ; @throws ExceededMaxTransactionSize if the resultant transaction is too big for Bitcoin to process.
     ; @throws MultipleOpReturnRequested if there is more than one OP_RETURN output for the resultant transaction.
     ;;
    #_public
    #_throws #_[ "InsufficientMoneyException" ]
    (§ method #_"SendResult" sendCoins [#_"SendRequest" request]
        (let [#_"TransactionBroadcaster" broadcaster (:v-transaction-broadcaster this)]
            (assert-state (some? broadcaster), "No transaction broadcaster is configured")
            (.. this (sendCoins broadcaster, request))
        )
    )

    ;;;
     ; Sends coins to the given address, via the given {@link Peer}.  Change is returned to {@link Wallet#currentChangeAddress()}.
     ; If an exception is thrown by {@link Peer#sendMessage(Message)} the transaction is still committed, so the pending
     ; transaction must be broadcast <b>by you</b> at some other time.  Note that a fee may be automatically added
     ; if one may be required for the transaction to be confirmed.
     ;
     ; @return the {@link Transaction} that was created or null if there was insufficient balance to send the coins.
     ; @throws InsufficientMoneyException if the request could not be completed due to not enough balance.
     ; @throws IllegalArgumentException if you try and complete the same SendRequest twice.
     ; @throws DustySendRequested if the resultant transaction would violate the dust rules.
     ; @throws CouldNotAdjustDownwards if emptying the wallet was requested and the output can't be shrunk for fees without violating a protocol rule.
     ; @throws ExceededMaxTransactionSize if the resultant transaction is too big for Bitcoin to process.
     ; @throws MultipleOpReturnRequested if there is more than one OP_RETURN output for the resultant transaction.
     ;;
    #_public
    #_throws #_[ "InsufficientMoneyException" ]
    (§ method #_"Transaction" sendCoins [#_"Peer" peer, #_"SendRequest" request]
        (let [#_"Transaction" tx (.. this (sendCoinsOffline request))]
            (.. peer (sendMessage tx))
            tx
        )
    )

    ;;;
     ; Class of exceptions thrown in {@link Wallet#completeTx(SendRequest)}.
     ;;
    #_public
    #_static
    (§ class CompletionException (§ extends RuntimeException))

    ;;;
     ; Thrown if the resultant transaction would violate the dust rules (an output that's too small to be worthwhile).
     ;;
    #_public
    #_static
    (§ class DustySendRequested (§ extends CompletionException))

    ;;;
     ; Thrown if there is more than one OP_RETURN output for the resultant transaction.
     ;;
    #_public
    #_static
    (§ class MultipleOpReturnRequested (§ extends CompletionException))

    ;;;
     ; Thrown when we were trying to empty the wallet, and the total amount of money we were trying to empty after
     ; being reduced for the fee was smaller than the min payment.
     ; Note that the missing field will be null in this case.
     ;;
    #_public
    #_static
    (§ class CouldNotAdjustDownwards (§ extends CompletionException))

    ;;;
     ; Thrown if the resultant transaction is too big for Bitcoin to process.  Try breaking up the amounts of value.
     ;;
    #_public
    #_static
    (§ class ExceededMaxTransactionSize (§ extends CompletionException))

    ;;;
     ; Given a spend request containing an incomplete transaction, makes it valid by adding outputs and signed inputs
     ; according to the instructions in the request.  The transaction in the request is modified by this method.
     ;
     ; @param req A SendRequest that contains the incomplete transaction and details for how to make it valid.
     ; @throws InsufficientMoneyException if the request could not be completed due to not enough balance.
     ; @throws IllegalArgumentException if you try and complete the same SendRequest twice.
     ; @throws DustySendRequested if the resultant transaction would violate the dust rules.
     ; @throws CouldNotAdjustDownwards if emptying the wallet was requested and the output can't be shrunk for fees without violating a protocol rule.
     ; @throws ExceededMaxTransactionSize if the resultant transaction is too big for Bitcoin to process.
     ; @throws MultipleOpReturnRequested if there is more than one OP_RETURN output for the resultant transaction.
     ;;
    #_public
    #_throws #_[ "InsufficientMoneyException" ]
    (§ method #_"void" completeTx [#_"SendRequest" req]
        (.. (:lock this) (lock))
        (try
            (assert-argument (not (:completed req)), "Given SendRequest has already been completed.")

            ;; Calculate the amount of value we need to import.
            (let [#_"Coin" value Coin'ZERO]
                (doseq [#_"TransactionOutput" output (.. (:tx req) (getOutputs))]
                    (§ ass value (.. value (add (.. output (getValue)))))
                )

                (.. Wallet'log (info "Completing send tx with {} outputs totalling {} and a fee of {}/kB", (.. (:tx req) (getOutputs) (size)), (.. value (toFriendlyString)), (.. (:fee-per-kb req) (toFriendlyString))))

                ;; If any inputs have already been added, we don't need to get their value from wallet.
                (let [#_"Coin" __totalInput Coin'ZERO]
                    (doseq [#_"TransactionInput" input (.. (:tx req) (getInputs))]
                        (if (some? (.. input (getConnectedOutput)))
                            (§ ass __totalInput (.. __totalInput (add (.. input (getConnectedOutput) (getValue)))))
                            (.. Wallet'log (warn "SendRequest transaction already has inputs but we don't know how much they are worth - they will be added to fee."))
                        )
                    )
                    (§ ass value (.. value (subtract __totalInput)))

                    (let [#_"List<TransactionInput>" __originalInputs (ArrayList. #_"<>" (.. (:tx req) (getInputs)))]

                        ;; Check for dusty sends and the OP_RETURN limit.
                        (when (and (:ensure-min-required-fee req) (not (:empty-wallet req))) ;; Min fee checking is handled later for emptyWallet.
                            (let [#_"int" __opReturnCount 0]
                                (doseq [#_"TransactionOutput" output (.. (:tx req) (getOutputs))]
                                    (when (.. output (isDust))
                                        (throw (DustySendRequested.))
                                    )
                                    (when (.. output (getScriptPubKey) (isOpReturn))
                                        (§ ass __opReturnCount (inc __opReturnCount))
                                    )
                                )
                                (when (< 1 __opReturnCount) ;; Only 1 OP_RETURN per transaction allowed.
                                    (throw (MultipleOpReturnRequested.))
                                )
                            )
                        )

                        ;; Calculate a list of ALL potential candidates for spending and then ask a coin selector to provide us
                        ;; with the actual outputs that'll be used to gather the required amount of value.  In this way, users
                        ;; can customize coin selection policies.  The call below will ignore immature coinbases and outputs
                        ;; we don't have the keys for.
                        (let [#_"List<TransactionOutput>" candidates (.. this (calculateAllSpendCandidates true, (= (:missing-sigs-mode req) :MissingSigsMode'THROW)))]

                            (let [#_"CoinSelection" __bestCoinSelection
                                  #_"TransactionOutput" __bestChangeOutput nil
                                  #_"List<Coin>" __updatedOutputValues nil]
                                (cond (not (:empty-wallet req))
                                    (do
                                        ;; This can throw InsufficientMoneyException.
                                        (let [#_"FeeCalculation" __feeCalculation (.. this (calculateFee req, value, __originalInputs, (:ensure-min-required-fee req), candidates))]
                                            (§ ass __bestCoinSelection (:best-coin-selection __feeCalculation))
                                            (§ ass __bestChangeOutput (:best-change-output __feeCalculation))
                                            (§ ass __updatedOutputValues (:updated-output-values __feeCalculation))
                                        )
                                    )
                                    :else
                                    (do
                                        ;; We're being asked to empty the wallet.  What this means is ensuring "tx" has only a single output
                                        ;; of the total value we can currently spend as determined by the selector, and then subtracting the fee.
                                        (assert-state (= (.. (:tx req) (getOutputs) (size)) 1), "Empty wallet TX must have a single output only.")

                                        (let [#_"CoinSelector" selector (or (:coin-selector req) (:coin-selector this))]
                                            (§ ass __bestCoinSelection (.. selector (select (.. (:params this) (getMaxMoney)), candidates)))
                                            (§ ass candidates nil) ;; Selector took ownership and might have changed candidates.  Don't access again.
                                            (.. (:tx req) (getOutput 0) (setValue (:value-gathered __bestCoinSelection)))
                                            (.. Wallet'log (info "  emptying {}", (.. (:value-gathered __bestCoinSelection) (toFriendlyString))))
                                        )
                                    )
                                )

                                (doseq [#_"TransactionOutput" output (:gathered __bestCoinSelection)]
                                    (.. (:tx req) (addInput output))
                                )

                                (when (:empty-wallet req)
                                    (let [#_"Coin" __feePerKb (or (:fee-per-kb req) Coin'ZERO)]
                                        (when (not (.. this (adjustOutputDownwardsForFee (:tx req), __bestCoinSelection, __feePerKb, (:ensure-min-required-fee req))))
                                            (throw (CouldNotAdjustDownwards.))
                                        )
                                    )
                                )

                                (when (some? __updatedOutputValues)
                                    (loop-when-recur [#_"int" i 0] (< i (.. __updatedOutputValues (size))) [(inc i)]
                                        (.. (:tx req) (getOutput i) (setValue (.. __updatedOutputValues (get i))))
                                    )
                                )

                                (when (some? __bestChangeOutput)
                                    (.. (:tx req) (addOutput __bestChangeOutput))
                                    (.. Wallet'log (info "  with {} change", (.. __bestChangeOutput (getValue) (toFriendlyString))))
                                )

                                ;; Now shuffle the outputs to obfuscate which is the change.
                                (when (:shuffle-outputs req)
                                    (.. (:tx req) (shuffleOutputs))
                                )

                                ;; Now sign the inputs, thus proving that we are entitled to redeem the connected outputs.
                                (when (:sign-inputs req)
                                    (.. this (signTransaction req))
                                )

                                ;; Check size.
                                (let [#_"int" size (alength (.. (:tx req) (unsafeBitcoinSerialize)))]
                                    (when (< Transaction'MAX_STANDARD_TX_SIZE size)
                                        (throw (ExceededMaxTransactionSize.))
                                    )

                                    ;; Label the transaction as being self created.  We can use this later to spend its change output even before
                                    ;; the transaction is confirmed.  We deliberately won't bother notifying listeners here as there's not much
                                    ;; point - the user isn't interested in a confidence transition they made themselves.
                                    (.. (:tx req) (getConfidence) (setSource :ConfidenceSource'SELF))
                                    ;; Label the transaction as being a user requested payment.  This can be used to render GUI wallet
                                    ;; transaction lists more appropriately, especially when the wallet starts to generate transactions itself
                                    ;; for internal purposes.
                                    (.. (:tx req) (setPurpose :TransactionPurpose'USER_PAYMENT))
                                    ;; Record the exchange rate that was valid when the transaction was completed.
                                    (.. (:tx req) (setExchangeRate (:exchange-rate req)))
                                    (.. (:tx req) (setMemo (:memo req)))
                                    (§ assoc req :completed true)
                                    (.. Wallet'log (info "  completed: {}", (:tx req)))
                                )
                            )
                        )
                    )
                )
            )
            (finally
                (.. (:lock this) (unlock))
            )
        )
        nil
    )

    ;;;
     ; Given a send request containing transaction, attempts to sign it's inputs.  This method expects
     ; the transaction to have all necessary inputs connected or they will be ignored.
     ;
     ; Actual signing is done by pluggable {@link #signers} and it's not guaranteed that
     ; the transaction will be complete in the end.
     ;;
    #_public
    (§ method #_"void" signTransaction [#_"SendRequest" req]
        (.. (:lock this) (lock))
        (try
            (let [#_"Transaction" tx (:tx req) #_"List<TransactionInput>" inputs (.. tx (getInputs)) #_"List<TransactionOutput>" outputs (.. tx (getOutputs))]
                (assert-state (and (< 0 (.. inputs (size))) (< 0 (.. outputs (size)))))

                (let [#_"int" n (.. tx (getInputs) (size))]
                    (loop-when-recur [#_"int" i 0] (< i n) [(inc i)]
                        (let [#_"TransactionInput" in (.. tx (getInput i)) #_"TransactionOutput" out (.. in (getConnectedOutput))]
                            (when (some? out) ;; Else missing connected output, assuming already signed.
                                (let [#_"Script" inSig (.. in (getScriptSig)) #_"Script" outKey (.. out (getScriptPubKey))]
                                    (try
                                        ;; We assume if its already signed, its hopefully got a SIGHASH type that will not invalidate when
                                        ;; we sign missing pieces (to check this would require either assuming any signatures are signing
                                        ;; standard output types or a way to get processed signatures out of script execution).
                                        (.. inSig (correctlySpends tx, i, outKey))
                                        (.. Wallet'log (warn "Input {} already correctly spends output, assuming SIGHASH type used will be safe and skipping signing.", i))
                                        (catch ScriptException e
                                            (.. Wallet'log (debug "Input contained an incorrect signature", e))
                                            (let [#_"RedeemData" redeem (.. in (getConnectedRedeemData this))]
                                                (ensure some? redeem, "Transaction exists in wallet that we cannot redeem: %s", (.. (:outpoint in) (getHash)))
                                                (.. in (setScriptSig (.. outKey (createEmptyInputScript (.. (:keys redeem) (get 0)), (:redeem-script redeem)))))
                                            )
                                        )
                                    )
                                )
                            )
                        )
                    )

                    (let [#_"ProposedTransaction" proposal (ProposedTransaction. tx)]
                        (doseq [#_"TransactionSigner" signer (:signers this)]
                            (when-not (.. signer (signInputs proposal, this))
                                (.. Wallet'log (info "{} returned false for the tx", (.. signer (getClass) (getName))))
                            )
                        )
                        ;; Resolve missing sigs if any.
                        (.. (MissingSigResolutionSigner. (:missing-sigs-mode req)) (signInputs proposal, this))
                    )
                )
            )
            (finally
                (.. (:lock this) (unlock))
            )
        )
        nil
    )

    ;;; Reduce the value of the first output of a transaction to pay the given feePerKb as appropriate for its size. ;;
    #_private
    (§ method- #_"boolean" adjustOutputDownwardsForFee [#_"Transaction" tx, #_"CoinSelection" __coinSelection, #_"Coin" __feePerKb, #_"boolean" __ensureMinRequiredFee]
        (let [#_"int" size (+ (alength (.. tx (unsafeBitcoinSerialize))) (.. this (estimateBytesForSigning __coinSelection)))
              #_"Coin" fee (.. __feePerKb (multiply size) (divide 1000))]
            (when (and __ensureMinRequiredFee (< (.. fee (compareTo Transaction'REFERENCE_DEFAULT_MIN_TX_FEE)) 0))
                (§ ass fee Transaction'REFERENCE_DEFAULT_MIN_TX_FEE)
            )
            (let [#_"TransactionOutput" output (.. tx (getOutput 0))]
                (.. output (setValue (.. output (getValue) (subtract fee))))
                (not (.. output (isDust)))
            )
        )
    )

    ;;;
     ; Returns a list of the outputs that can potentially be spent, i.e. that we have the keys for and are unspent
     ; according to our knowledge of the block chain.
     ;;
    #_public
    (§ method #_"List<TransactionOutput>" calculateAllSpendCandidates []
        (.. this (calculateAllSpendCandidates true, true))
    )

    ;;;
     ; Returns a list of all outputs that are being tracked by this wallet taking into account the flags.
     ;
     ; @param excludeImmatureCoinbases Whether to ignore coinbase outputs that we will be able to spend in future once they mature.
     ; @param excludeUnsignable Whether to ignore outputs that we are tracking but don't have the keys to sign for.
     ;;
    #_public
    (§ method #_"List<TransactionOutput>" calculateAllSpendCandidates [#_"boolean" __excludeImmatureCoinbases, #_"boolean" __excludeUnsignable]
        (.. (:lock this) (lock))
        (try
            (let [#_"List<TransactionOutput>" candidates (ArrayList. #_"<>" (.. (:my-unspents this) (size)))]
                (doseq [#_"TransactionOutput" output (:my-unspents this)]
                    (when (or (not __excludeUnsignable) (.. this (canSignFor (.. output (getScriptPubKey)))))
                        (let [#_"Transaction" transaction (ensure some? (.. output (getParentTransaction)))]
                            (when (or (not __excludeImmatureCoinbases) (.. transaction (isMature)))
                                (.. candidates (add output))
                            )
                        )
                    )
                )
                candidates
            )
            (finally
                (.. (:lock this) (unlock))
            )
        )
    )

    ;;;
     ; Returns true if this wallet has at least one of the private keys needed to sign for this scriptPubKey.
     ; Returns false if the form of the script is not known or if the script is OP_RETURN.
     ;;
    #_public
    (§ method #_"boolean" canSignFor [#_"Script" script]
        (cond
            (.. script (isSentToRawPubKey))
                (let [#_"ECKey" key (.. this (findKeyFromPubKey (.. script (getPubKey))))]
                    (and (some? key) (.. key (hasPrivKey)))
                )
            (.. script (isPayToScriptHash))
                (let [#_"RedeemData" data (.. this (findRedeemDataFromScriptHash (.. script (getPubKeyHash))))]
                    (and (some? data) (.. this (canSignFor (:redeem-script data))))
                )
            (.. script (isSentToAddress))
                (let [#_"ECKey" key (.. this (findKeyFromPubHash (.. script (getPubKeyHash))))]
                    (and (some? key) (.. key (hasPrivKey)))
                )
            (.. script (isSentToMultiSig))
                (do
                    (doseq [#_"ECKey" pubkey (.. script (getPubKeys))]
                        (let [#_"ECKey" key (.. this (findKeyFromPubKey (.. pubkey (getPubKey))))]
                            (when (and (some? key) (.. key (hasPrivKey)))
                                (§ return true)
                            )
                        )
                    )
                    false
                )
            (.. script (isSentToCLTVPaymentChannel))
                ;; Any script for which we are the recipient or sender counts.
                (let [#_"byte[]" sender (.. script (getCLTVPaymentChannelSenderPubKey))
                      #_"ECKey" __senderKey (.. this (findKeyFromPubKey sender))]
                    (or (and (some? __senderKey) (.. __senderKey (hasPrivKey)))
                        (let [#_"byte[]" recipient (.. script (getCLTVPaymentChannelRecipientPubKey))
                              #_"ECKey" __recipientKey (.. this (findKeyFromPubKey (§ recte? recipient)))]
                            (and (some? __recipientKey) (.. __recipientKey (hasPrivKey)))
                        )
                    )
                )
            :else
                false
        )
    )

    ;;; Returns the {@link CoinSelector} object which controls which outputs can be spent by this wallet. ;;
    #_public
    (§ method #_"CoinSelector" getCoinSelector []
        (.. (:lock this) (lock))
        (try
            (:coin-selector this)
            (finally
                (.. (:lock this) (unlock))
            )
        )
    )

    ;;;
     ; A coin selector is responsible for choosing which outputs to spend when creating transactions.  The default
     ; selector implements a policy of spending transactions that appeared in the best chain and pending transactions
     ; that were created by this wallet, but not others.  You can override the coin selector for any given send
     ; operation by changing {@link SendRequest#coinSelector}.
     ;;
    #_public
    (§ method #_"void" setCoinSelector [#_"CoinSelector" __coinSelector]
        (.. (:lock this) (lock))
        (try
            (§ assoc this :coin-selector (ensure some? __coinSelector))
            (finally
                (.. (:lock this) (unlock))
            )
        )
        nil
    )

    ;;;
     ; Convenience wrapper for <tt>setCoinSelector(Wallet.AllowUnconfirmedCoinSelector.get())</tt>.  If this method
     ; is called on the wallet then transactions will be used for spending regardless of their confidence.  This can
     ; be dangerous - only use this if you absolutely know what you're doing!
     ;;
    #_public
    (§ method #_"void" allowSpendingUnconfirmedTransactions []
        (.. this (setCoinSelector (AllowUnconfirmedCoinSelector'get)))
        nil
    )

    ;;;
     ; A custom {@link TransactionOutput} that is free standing.  This contains all the information
     ; required for spending without actually having all the linked data (i.e parent tx).
     ;
     ;;
    #_private
    (§ class- FreeStandingTransactionOutput (§ extends TransactionOutput)
        #_private
        (§ field- #_"UTXO" :output)
        #_private
        (§ field- #_"int" :chain-height)

        ;;;
         ; Construct a free standing Transaction Output.
         ;
         ; @param params The network parameters.
         ; @param output The stored output (free standing).
         ;;
        #_public
        (§ constructor FreeStandingTransactionOutput [#_"NetworkParameters" params, #_"UTXO" output, #_"int" __chainHeight]
            (§ super params, nil, (.. output (getValue)), (.. output (getScript) (getProgram)))

            (§ assoc this :output output)
            (§ assoc this :chain-height __chainHeight)
            this
        )

        ;;;
         ; Get the {@link UTXO}.
         ;
         ; @return the stored output.
         ;;
        #_public
        (§ method #_"UTXO" getUTXO []
            (:output this)
        )

        ;;;
         ; Get the depth within the chain of the parent tx, depth is 1 if the output height is the height
         ; of the latest block.
         ;
         ; @return the depth.
         ;;
        #_override
        #_public
        (§ method #_"int" getParentTransactionDepthInBlocks []
            (inc (- (:chain-height this) (.. (:output this) (getHeight))))
        )

        #_override
        #_public
        (§ method #_"int" getIndex []
            (int (.. (:output this) (getIndex)))
        )

        #_override
        #_public
        (§ method #_"Sha256Hash" getParentTransactionHash []
            (.. (:output this) (getHash))
        )
    )

    #_private
    #_static
    (§ class- TxOffsetPair (§ implements Comparable #_"<TxOffsetPair>")
        #_public
        (§ field #_"Transaction" :tx)
        #_public
        (§ field #_"int" :offset)

        #_public
        (§ constructor TxOffsetPair [#_"Transaction" tx, #_"int" offset]
            (§ assoc this :tx tx)
            (§ assoc this :offset offset)
            this
        )

        #_override
        #_public
        (§ method #_"int" compareTo [#_"TxOffsetPair" o]
            ;; Note that in this implementation compareTo() is not consistent with equals().
            (Ints/compare (:offset this), (:offset o))
        )
    )

    ;;;
     ; Don't call this directly.  It's not intended for API users.
     ;
     ; Called by the {@link BlockChain} when the best chain (representing total work done) has changed.
     ; This can cause the number of confirmations of a transaction to go higher, lower, drop to zero and
     ; can even result in a transaction going dead (will never confirm) due to a double spend.
     ;
     ; The oldBlocks/newBlocks lists are ordered height-wise from top first to bottom last.
     ;;
    #_override
    #_public
    #_throws #_[ "VerificationException" ]
    (§ method #_"void" reorganize [#_"StoredBlock" __splitPoint, #_"List<StoredBlock>" __oldBlocks, #_"List<StoredBlock>" __newBlocks]
        (.. (:lock this) (lock))
        (try
            ;; This runs on any peer thread with the block chain locked.
            ;;
            ;; The reorganize functionality of the wallet is tested in ChainSplitTest.java
            ;;
            ;; receive() has been called on the block that is triggering the re-org before this is called,
            ;; with type of SIDE_CHAIN.
            ;;
            ;; Note that this code assumes blocks are not invalid - if blocks contain duplicated transactions,
            ;; transactions that double spend etc then we can calculate the incorrect result.  This could open up
            ;; obscure DoS attacks if someone successfully mines a throwaway invalid block and feeds it to us, just
            ;; to try and corrupt the internal data structures.  We should try harder to avoid this but it's tricky
            ;; because there are so many ways the block can be invalid.

            ;; Avoid spuriously informing the user of wallet/tx confidence changes whilst we're re-organizing.
            (assert-state (= (.. (:confidence-changed this) (size)) 0))
            (assert-state (not (:inside-reorg this)))
            (§ assoc this :inside-reorg true)
            (assert-state (= (:on-wallet-changed-suppressions this) 0))
            (§ update this :on-wallet-changed-suppressions inc)

            ;; Map block hash to transactions that appear in it.  We ensure that the map values are sorted according
            ;; to their relative position within those blocks.
            (let [#_"ArrayListMultimap<Sha256Hash, TxOffsetPair>" __mapBlockTx (ArrayListMultimap/create)]
                (doseq [#_"Transaction" tx (.. this (getTransactions true))]
                    (let [#_"Map<Sha256Hash, Integer>" __appearsIn (.. tx (getAppearsInHashes))]
                        (when (nil? __appearsIn)
                            (§ continue ) ;; Pending.
                        )
                        (doseq [#_"Map.Entry<Sha256Hash, Integer>" block (.. __appearsIn (entrySet))]
                            (.. __mapBlockTx (put (.. block (getKey)), (TxOffsetPair. tx, (.. block (getValue)))))
                        )
                    )
                )
                (doseq [#_"Sha256Hash" __blockHash (.. __mapBlockTx (keySet))]
                    (Collections/sort (.. __mapBlockTx (get __blockHash)))
                )

                (let [#_"List<Sha256Hash>" __oldBlockHashes (ArrayList. #_"<>" (.. __oldBlocks (size)))]
                    (.. Wallet'log (info "Old part of chain (top to bottom):"))
                    (doseq [#_"StoredBlock" b __oldBlocks]
                        (.. Wallet'log (info "  {}", (.. b (getHeader) (getHashAsString))))
                        (.. __oldBlockHashes (add (.. b (getHeader) (getHash))))
                    )
                    (.. Wallet'log (info "New part of chain (top to bottom):"))
                    (doseq [#_"StoredBlock" b __newBlocks]
                        (.. Wallet'log (info "  {}", (.. b (getHeader) (getHashAsString))))
                    )

                    (Collections/reverse __newBlocks) ;; Need bottom-to-top but we get top-to-bottom.

                    ;; For each block in the old chain, disconnect the transactions in reverse order.
                    (let [#_"LinkedList<Transaction>" __oldChainTxns (Lists/newLinkedList)]
                        (doseq [#_"Sha256Hash" __blockHash __oldBlockHashes]
                            (doseq [#_"TxOffsetPair" pair (.. __mapBlockTx (get __blockHash))]
                                (let [#_"Transaction" tx (:tx pair)
                                      #_"Sha256Hash" __txHash (.. tx (getHash))]
                                    (cond (.. tx (isCoinBase))
                                        (do
                                            ;; All the transactions that we have in our wallet which spent this coinbase are now invalid
                                            ;; and will never confirm.  Hopefully this should never happen - that's the point of the maturity
                                            ;; rule that forbids spending of coinbase transactions for 100 blocks.
                                            ;;
                                            ;; This could be recursive, although of course because we don't have the full transaction
                                            ;; graph we can never reliably kill all transactions we might have that were rooted in
                                            ;; this coinbase tx.  Some can just go pending forever, like the Bitcoin Core.  However we
                                            ;; can do our best.
                                            (.. Wallet'log (warn "Coinbase killed by re-org: {}", (.. tx (getHashAsString))))
                                            (.. this (killTxns (ImmutableSet/of tx), nil))
                                        )
                                        :else
                                        (do
                                            (doseq [#_"TransactionOutput" output (.. tx (getOutputs))]
                                                (let [#_"TransactionInput" input (.. output (getSpentBy))]
                                                    (when (some? input)
                                                        (when (.. output (isMine this))
                                                            (assert-state (.. (:my-unspents this) (add output)))
                                                        )
                                                        (.. input (disconnect))
                                                    )
                                                )
                                            )
                                            (.. __oldChainTxns (add tx))
                                            (.. (:unspent this) (remove __txHash))
                                            (.. (:spent this) (remove __txHash))
                                            (assert-state (not (.. (:pending this) (containsKey __txHash))))
                                            (assert-state (not (.. (:dead this) (containsKey __txHash))))
                                        )
                                    )
                                )
                            )
                        )

                        ;; Put all the disconnected transactions back into the pending pool and re-connect them.
                        (doseq [#_"Transaction" tx __oldChainTxns]
                            ;; Coinbase transactions on the old part of the chain are dead for good and won't come back unless
                            ;; there's another re-org.
                            (when (.. tx (isCoinBase))
                                (§ continue )
                            )
                            (.. Wallet'log (info "  ->pending {}", (.. tx (getHash))))

                            (.. tx (getConfidence) (setConfidenceType ConfidenceType'PENDING)) ;; Wipe height/depth/work data.
                            (.. (:confidence-changed this) (put tx, :ConfidenceChangeReason'TYPE))
                            (.. this (addWalletTransaction :PoolType'PENDING, tx))
                            (.. this (updateForSpends tx, false))
                        )

                        ;; Note that dead transactions stay dead.  Consider a chain that Finney attacks T1 and replaces it with
                        ;; T2, so we move T1 into the dead pool.  If there's now a re-org to a chain that doesn't include T2, it
                        ;; doesn't matter - the miners deleted T1 from their mempool, will resurrect T2 and put that into the
                        ;; mempool and so T1 is still seen as a losing double spend.

                        ;; The old blocks have contributed to the depth for all the transactions in the
                        ;; wallet that are in blocks up to and including the chain split block.
                        ;; The total depth is calculated here and then subtracted from the appropriate transactions.
                        (let [#_"int" __depthToSubtract (.. __oldBlocks (size))]
                            (.. Wallet'log (info (str "depthToSubtract = " __depthToSubtract)))
                            ;; Remove depthToSubtract from all transactions in the wallet except for pending.
                            (.. this (subtractDepth __depthToSubtract, (.. (:spent this) (values))))
                            (.. this (subtractDepth __depthToSubtract, (.. (:unspent this) (values))))
                            (.. this (subtractDepth __depthToSubtract, (.. (:dead this) (values))))

                            ;; The effective last seen block is now the split point so set the lastSeenBlockHash.
                            (.. this (setLastBlockSeenHash (.. __splitPoint (getHeader) (getHash))))

                            ;; For each block in the new chain, work forwards calling receive() and notifyNewBestBlock().
                            ;; This will pull them back out of the pending pool, or if the tx didn't appear in the old chain
                            ;; and does appear in the new chain, will treat it as such and possibly kill pending transactions
                            ;; that conflict.
                            (doseq [#_"StoredBlock" block __newBlocks]
                                (.. Wallet'log (info "Replaying block {}", (.. block (getHeader) (getHashAsString))))
                                (doseq [#_"TxOffsetPair" pair (.. __mapBlockTx (get (.. block (getHeader) (getHash))))]
                                    (.. Wallet'log (info "  tx {}", (.. (:tx pair) (getHash))))
                                    (try
                                        (.. this (receive (:tx pair), block, :NewBlockType'BEST_CHAIN, (:offset pair)))
                                        (catch ScriptException e
                                            (throw (RuntimeException. e)) ;; Cannot happen as these blocks were already verified.
                                        )
                                    )
                                )
                                (.. this (notifyNewBestBlock block))
                            )
                            (.. this (isConsistentOrThrow))
                            (let [#_"Coin" balance (.. this (getBalance))]
                                (.. Wallet'log (info "post-reorg balance is {}", (.. balance (toFriendlyString))))
                                ;; Inform event listeners that a re-org took place.
                                (.. this (queueOnReorganize))
                                (§ assoc this :inside-reorg false)
                                (§ update this :on-wallet-changed-suppressions dec)
                                (.. this (maybeQueueOnWalletChanged))
                                (.. this (checkBalanceFuturesLocked balance))
                                (.. this (informConfidenceListenersIfNotReorganizing))
                                (.. this (saveLater))
                            )
                        )
                    )
                )
            )
            (finally
                (.. (:lock this) (unlock))
            )
        )
        nil
    )

    ;;;
     ; Subtract the supplied depth from the given transactions.
     ;;
    #_private
    (§ method- #_"void" subtractDepth [#_"int" __depthToSubtract, #_"Collection<Transaction>" transactions]
        (doseq [#_"Transaction" tx transactions]
            (when (= (.. tx (getConfidence) (getConfidenceType)) ConfidenceType'BUILDING)
                (.. tx (getConfidence) (setDepthInBlocks (- (.. tx (getConfidence) (getDepthInBlocks)) __depthToSubtract)))
                (.. (:confidence-changed this) (put tx, :ConfidenceChangeReason'DEPTH))
            )
        )
        nil
    )

    #_private
    (§ field- #_"ArrayList<TransactionOutPoint>" :bloom-out-points (Lists/newArrayList))
    ;; Used to track whether we must automatically begin/end a filter calculation and calc outpoints/take the locks.
    #_private
    (§ field- #_"AtomicInteger" :bloom-filter-guard (AtomicInteger. 0))

    #_override
    #_public
    (§ method #_"void" beginBloomFilterCalculation []
        (when-not (< 1 (.. (:bloom-filter-guard this) (incrementAndGet)))
            (.. (:lock this) (lock))
            (.. (:key-chain-group-lock this) (lock))
            ;; noinspection FieldAccessNotGuarded
            (.. this (calcBloomOutPointsLocked))
        )
        nil
    )

    #_private
    (§ method- #_"void" calcBloomOutPointsLocked []
        ;; TODO: This could be done once and then kept up to date.
        (.. (:bloom-out-points this) (clear))
        (let [#_"Set<Transaction>" all (HashSet. #_"<>")]
            (.. all (addAll (.. (:unspent this) (values))))
            (.. all (addAll (.. (:spent this) (values))))
            (.. all (addAll (.. (:pending this) (values))))

            (doseq [#_"Transaction" tx all #_"TransactionOutput" out (.. tx (getOutputs))]
                (try
                    (when (.. this (isTxOutputBloomFilterable out))
                        (.. (:bloom-out-points this) (add (.. out (getOutPointFor))))
                    )
                    (catch ScriptException e
                        ;; If it is ours, we parsed the script correctly, so this shouldn't happen.
                        (throw (RuntimeException. e))
                    )
                )
            )
        )
        nil
    )

    #_override
    #_public
    (§ method #_"void" endBloomFilterCalculation []
        (when-not (< 0 (.. (:bloom-filter-guard this) (decrementAndGet)))
            (.. (:bloom-out-points this) (clear))
            (.. (:key-chain-group-lock this) (unlock))
            (.. (:lock this) (unlock))
        )
        nil
    )

    ;;;
     ; Returns the number of distinct data items (note: NOT keys) that will be inserted into a bloom filter,
     ; when it is constructed.
     ;;
    #_override
    #_public
    (§ method #_"int" getBloomFilterElementCount []
        (.. this (beginBloomFilterCalculation))
        (try
            (+ (.. (:bloom-out-points this) (size)) (.. (:key-chain-group this) (getBloomFilterElementCount)))
            (finally
                (.. this (endBloomFilterCalculation))
            )
        )
    )

    ;;;
     ; Gets a bloom filter that contains all of the public keys from this wallet, and which will provide the given
     ; false-positive rate.  See the docs for {@link BloomFilter} for a brief explanation of anonymity when using filters.
     ;;
    #_public
    (§ method #_"BloomFilter" getBloomFilter [#_"double" __falsePositiveRate]
        (.. this (beginBloomFilterCalculation))
        (try
            (.. this (getBloomFilter (.. this (getBloomFilterElementCount)), __falsePositiveRate, (long (* (Math/random) Long/MAX_VALUE))))
            (finally
                (.. this (endBloomFilterCalculation))
            )
        )
    )

    ;;;
     ; Gets a bloom filter that contains all of the public keys from this wallet, and which will provide the given
     ; false-positive rate if it has size elements.  Keep in mind that you will get 2 elements in the bloom filter for
     ; each key in the wallet, for the public key and the hash of the public key (address form).
     ;
     ; This is used to generate a BloomFilter which can be {@link BloomFilter#merge(BloomFilter)}d with another.
     ; It could also be used if you have a specific target for the filter's size.
     ;
     ; See the docs for {@link BloomFilter(int, double)} for a brief explanation of anonymity when using bloom filters.
     ;;
    #_override
    #_public
    (§ method #_"BloomFilter" getBloomFilter [#_"int" size, #_"double" __falsePositiveRate, #_"long" __nTweak]
        (.. this (beginBloomFilterCalculation))
        (try
            (let [#_"BloomFilter" filter (.. (:key-chain-group this) (getBloomFilter size, __falsePositiveRate, __nTweak))]
                (doseq [#_"TransactionOutPoint" point (:bloom-out-points this)]
                    (.. filter (insert (.. point (unsafeBitcoinSerialize))))
                )
                filter
            )
            (finally
                (.. this (endBloomFilterCalculation))
            )
        )
    )

    ;; Returns true if the output is one that won't be selected by a data element matching in the scriptSig.
    #_private
    (§ method- #_"boolean" isTxOutputBloomFilterable [#_"TransactionOutput" out]
        (let [#_"Script" script (.. out (getScriptPubKey))
              #_"boolean" __isScriptTypeSupported (or (.. script (isSentToRawPubKey)) (.. script (isPayToScriptHash)))]
            (and __isScriptTypeSupported (.. (:my-unspents this) (contains out)))
        )
    )

    ;;;
     ; Used by {@link Peer} to decide whether or not to discard this block and any blocks building upon it, in case
     ; the Bloom filter used to request them may be exhausted, that is, not have sufficient keys in the deterministic
     ; sequence within it to reliably find relevant transactions.
     ;;
    #_public
    (§ method #_"boolean" checkForFilterExhaustion [#_"FilteredBlock" block]
        (.. (:key-chain-group-lock this) (lock))
        (try
            (let [#_"int" epoch (.. (:key-chain-group this) (getCombinedKeyLookaheadEpochs))]
                (doseq [#_"Transaction" tx (.. block (getAssociatedTransactions) (values))]
                    (.. this (markKeysAsUsed tx))
                )
                (let [#_"int" epoch' (.. (:key-chain-group this) (getCombinedKeyLookaheadEpochs))]
                    (assert-state (<= epoch epoch'))
                    ;; If the key lookahead epoch has advanced, there was a call to importKeys and the PeerGroup already has a
                    ;; pending request to recalculate the filter queued up on another thread.  The calling Peer should abandon
                    ;; block at this point and await a new filter before restarting the download.
                    (< epoch epoch')
                )
            )
            (finally
                (.. (:key-chain-group-lock this) (unlock))
            )
        )
    )

    #_private
    #_static
    (§ class- FeeCalculation
        ;; Selected UTXOs to spend.
        #_public
        (§ field #_"CoinSelection" :best-coin-selection)
        ;; Change output (may be null if no change).
        #_public
        (§ field #_"TransactionOutput" :best-change-output)
        ;; List of output values adjusted downwards when recipients pay fees (may be null if no adjustment needed).
        #_public
        (§ field #_"List<Coin>" :updated-output-values)
    )

    #_private
    #_throws #_[ "InsufficientMoneyException" ]
    (§ method- #_"FeeCalculation" calculateFee [#_"SendRequest" req, #_"Coin" value, #_"List<TransactionInput>" __originalInputs, #_"boolean" __needAtLeastReferenceFee, #_"List<TransactionOutput>" candidates]
        (assert-state (.. (:lock this) (isHeldByCurrentThread)))
        (let [#_"FeeCalculation" result
              #_"Coin" fee Coin'ZERO]
            (loop []
                (§ ass result (FeeCalculation.))
                (let [#_"Transaction" tx (Transaction. (:params this))]
                    (.. this (addSuppliedInputs tx, (.. (:tx req) (getInputs))))

                    (let [#_"Coin" __valueNeeded value]
                        (when (not (:recipients-pay-fees req))
                            (§ ass __valueNeeded (.. __valueNeeded (add fee)))
                        )
                        (when (:recipients-pay-fees req)
                            (§ assoc result :updated-output-values (ArrayList. #_"<Coin>"))
                        )

                        (loop-when-recur [#_"int" i 0] (< i (.. (:tx req) (getOutputs) (size))) [(inc i)]
                            (let [#_"TransactionOutput" output (TransactionOutput. (:params this), tx, (.. (:tx req) (getOutputs) (get i) (bitcoinSerialize)), 0)]
                                (when (:recipients-pay-fees req)
                                    ;; Subtract fee equally from each selected recipient.
                                    (.. output (setValue (.. output (getValue) (subtract (.. fee (divide (.. (:tx req) (getOutputs) (size))))))))
                                    ;; First receiver pays the remainder not divisible by output count.
                                    (when (= i 0)
                                        ;; Subtract fee equally from each selected recipient.
                                        (.. output (setValue (.. output (getValue) (subtract (aget (.. fee (divideAndRemainder (.. (:tx req) (getOutputs) (size)))) 1)))))
                                    )
                                    (.. (:updated-output-values result) (add (.. output (getValue))))
                                    (when (.. output (getMinNonDustValue) (isGreaterThan (.. output (getValue))))
                                        (throw (CouldNotAdjustDownwards.))
                                    )
                                )
                                (.. tx (addOutput output))
                            )
                        )

                        (let [#_"CoinSelector" selector (or (:coin-selector req) (:coin-selector this))]
                            ;; selector is allowed to modify candidates list.
                            (let [#_"CoinSelection" selection (.. selector (select __valueNeeded, (LinkedList. #_"<>" candidates)))]
                                (§ assoc result :best-coin-selection selection)
                                ;; Can we afford this?
                                (when (< (.. (:value-gathered selection) (compareTo __valueNeeded)) 0)
                                    (let [#_"Coin" __valueMissing (.. __valueNeeded (subtract (:value-gathered selection)))]
                                        (throw (InsufficientMoneyException. __valueMissing))
                                    )
                                )

                                (let [#_"Coin" change (.. (:value-gathered selection) (subtract __valueNeeded))]
                                    (when (.. change (isGreaterThan Coin'ZERO))
                                        ;; The value of the inputs is greater than what we want to send.  Just like in real life then,
                                        ;; we need to take back some coins ... this is called "change".  Add another output that sends the change
                                        ;; back to us.  The address comes either from the request or currentChangeAddress() as a default.
                                        (let [#_"Address" __changeAddress (:change-address req)]
                                            (when (nil? __changeAddress)
                                                (§ ass __changeAddress (.. this (currentChangeAddress)))
                                            )

                                            (let [#_"TransactionOutput" __changeOutput (TransactionOutput. (:params this), tx, change, __changeAddress)]
                                                (when (and (:recipients-pay-fees req) (.. __changeOutput (isDust)))
                                                    ;; We do not move dust-change to fees, because the sender would end up paying more than requested.
                                                    ;; This would be against the purpose of the all-inclusive feature.
                                                    ;; So instead we raise the change and deduct from the first recipient.
                                                    (let [#_"Coin" __missingToNotBeDust (.. __changeOutput (getMinNonDustValue) (subtract (.. __changeOutput (getValue))))]
                                                        (.. __changeOutput (setValue (.. __changeOutput (getValue) (add __missingToNotBeDust))))
                                                        (let [#_"TransactionOutput" __firstOutput (.. tx (getOutputs) (get 0))]
                                                            (.. __firstOutput (setValue (.. __firstOutput (getValue) (subtract __missingToNotBeDust))))
                                                            (.. (:updated-output-values result) (set 0, (.. __firstOutput (getValue))))
                                                            (when (.. __firstOutput (isDust))
                                                                (throw (CouldNotAdjustDownwards.))
                                                            )
                                                        )
                                                    )
                                                )

                                                (cond (.. __changeOutput (isDust))
                                                    (do
                                                        ;; Never create dust outputs; if we would, just add the dust to the fee.
                                                        ;; Oscar comment: This seems like a way to make the condition below "if (!fee.isLessThan(feeNeeded))" to become true.
                                                        ;; This is a non-easy to understand way to do that.
                                                        ;; Maybe there are other effects I am missing.
                                                        (§ ass fee (.. fee (add (.. __changeOutput (getValue)))))
                                                    )
                                                    :else
                                                    (do
                                                        (.. tx (addOutput __changeOutput))
                                                        (§ assoc result :best-change-output __changeOutput)
                                                    )
                                                )
                                            )
                                        )
                                    )

                                    (doseq [#_"TransactionOutput" __selectedOutput (:gathered selection)]
                                        (let [#_"TransactionInput" input (.. tx (addInput __selectedOutput))]
                                            ;; If the scriptBytes don't default to none, our size calculations will be thrown off.
                                            (assert-state (= (alength (.. input (getScriptBytes))) 0))
                                        )
                                    )

                                    (let [#_"int" size (+ (alength (.. tx (unsafeBitcoinSerialize))) (.. this (estimateBytesForSigning selection)))]

                                        (let [#_"Coin" __feePerKb (:fee-per-kb req)]
                                            (when (and __needAtLeastReferenceFee (< (.. __feePerKb (compareTo Transaction'REFERENCE_DEFAULT_MIN_TX_FEE)) 0))
                                                (§ ass __feePerKb Transaction'REFERENCE_DEFAULT_MIN_TX_FEE)
                                            )

                                            (let [#_"Coin" __feeNeeded (.. __feePerKb (multiply size) (divide 1000))]

                                                (when (not (.. fee (isLessThan __feeNeeded)))
                                                    ;; Done, enough fee included.
                                                    (§ break )
                                                )

                                                ;; Include more fee and try again.
                                                (§ ass fee __feeNeeded)
                                            )
                                        )
                                    )
                                )
                            )
                        )
                    )
                )
            )
            result
        )
    )

    #_private
    (§ method- #_"void" addSuppliedInputs [#_"Transaction" tx, #_"List<TransactionInput>" __originalInputs]
        (doseq [#_"TransactionInput" input __originalInputs]
            (.. tx (addInput (TransactionInput. (:params this), tx, (.. input (bitcoinSerialize)))))
        )
        nil
    )

    #_private
    (§ method- #_"int" estimateBytesForSigning [#_"CoinSelection" selection]
        (let [#_"int" size 0]
            (doseq [#_"TransactionOutput" output (:gathered selection)]
                (try
                    (let [#_"Script" script (.. output (getScriptPubKey))
                          #_"ECKey" key nil
                          #_"Script" __redeemScript nil]
                        (cond (.. script (isSentToAddress))
                            (do
                                (§ ass key (.. this (findKeyFromPubHash (.. script (getPubKeyHash)))))
                                (ensure some? key, "Coin selection includes unspendable outputs")
                            )
                            (.. script (isPayToScriptHash))
                            (do
                                (§ ass __redeemScript (.. this (findRedeemDataFromScriptHash (.. script (getPubKeyHash))) :redeem-script))
                                (ensure some? __redeemScript, "Coin selection includes unspendable outputs")
                            )
                        )
                        (§ ass size (+ size (.. script (getNumberOfBytesRequiredToSpend key, __redeemScript))))
                    )
                    (catch ScriptException e
                        ;; If this happens it means an output script in a wallet tx could not be understood.  That
                        ;; should never happen, if it does it means the wallet has got into an inconsistent state.
                        (throw (IllegalStateException. e))
                    )
                )
            )
            size
        )
    )

    ;; Wallet maintenance transactions.  These transactions may not be directly connected to a payment the user is
    ;; making.  They may be instead key rotation transactions for when old keys are suspected to be compromised,
    ;; de/re-fragmentation transactions for when our output sizes are inappropriate or suboptimal, privacy transactions
    ;; and so on.  Because these transactions may require user intervention in some way (e.g. entering their password)
    ;; the wallet application is expected to poll the Wallet class to get SendRequests.  Ideally security systems like
    ;; hardware wallets or risk analysis providers are programmed to auto-approve transactions that send from our own
    ;; keys back to our own keys.

    ;;;
     ; Specifies that the given {@link TransactionBroadcaster}, typically a {@link PeerGroup}, should be used for
     ; sending transactions to the Bitcoin network by default.  Some sendCoins methods let you specify a broadcaster
     ; explicitly, in that case, they don't use this broadcaster.  If null is specified then the wallet won't attempt
     ; to broadcast transactions itself.
     ;
     ; You don't normally need to call this.  A {@link PeerGroup} will automatically set itself as the wallets
     ; broadcaster when you use {@link PeerGroup#addWallet(Wallet)}.  A wallet can use the broadcaster when you ask
     ; it to send money, but in future also at other times to implement various features that may require asynchronous
     ; re-organisation of the wallet contents on the block chain.  For instance, in future the wallet may choose to
     ; optimise itself to reduce fees or improve privacy.
     ;;
    #_public
    (§ method #_"void" setTransactionBroadcaster [#_nilable #_"TransactionBroadcaster" broadcaster]
        (let [#_"Transaction[]" __toBroadcast (make-array Transaction 0)]
            (.. (:lock this) (lock))
            (try
                (when (= (:v-transaction-broadcaster this) broadcaster)
                    (§ return nil)
                )
                (§ assoc this :v-transaction-broadcaster broadcaster)
                (when (nil? broadcaster)
                    (§ return nil)
                )
                (§ ass __toBroadcast (.. (:pending this) (values) (toArray __toBroadcast)))
                (finally
                    (.. (:lock this) (unlock))
                )
            )
            ;; Now use it to upload any pending transactions we have that are marked as not being seen by any peers yet.
            ;; Don't hold the wallet lock whilst doing this, so if the broadcaster accesses the wallet at some point there
            ;; is no inversion.
            (doseq [#_"Transaction" tx __toBroadcast]
                (let [#_"ConfidenceType" type (.. tx (getConfidence) (getConfidenceType))]
                    (assert-state (any = type ConfidenceType'PENDING ConfidenceType'IN_CONFLICT), "Expected PENDING or IN_CONFLICT, was %s.", type)
                    ;; Re-broadcast even if it's marked as already seen for two reasons:
                    ;; 1. Old wallets may have transactions marked as broadcast by 1 peer when
                    ;;    in reality the network never saw it, due to bugs.
                    ;; 2. It can't really hurt.
                    (.. Wallet'log (info "New broadcaster so uploading waiting tx {}", (.. tx (getHash))))
                    (.. broadcaster (broadcastTransaction tx))
                )
            )
        )
        nil
    )

    ;;;
     ; When a key rotation time is set, and money controlled by keys created before the given timestamp T will be
     ; automatically respent to any key that was created after T.  This can be used to recover from a situation where
     ; a set of keys is believed to be compromised.  Once the time is set transactions will be created and broadcast
     ; immediately.  New coins that come in after calling this method will be automatically respent immediately.
     ; The rotation time is persisted to the wallet. You can stop key rotation by calling this method again with zero
     ; as the argument.
     ;;
    #_public
    (§ method #_"void" setKeyRotationTime [#_"Date" time]
        (.. this (setKeyRotationTime (quot (.. time (getTime)) 1000)))
        nil
    )

    ;;;
     ; Returns the key rotation time, or null if unconfigured.
     ; See {@link #setKeyRotationTime(Date)} for a description of the field.
     ;;
    #_public
    #_nilable
    (§ method #_"Date" getKeyRotationTime []
        (let [#_"long" stamp (:v-key-rotation-timestamp this)]
            (when (not= stamp 0) (Date. (* stamp 1000)))
        )
    )

    ;;;
     ; When a key rotation time is set, any money controlled by keys created before the given timestamp T will be
     ; automatically respent to any key that was created after T.  This can be used to recover from a situation where
     ; a set of keys is believed to be compromised.  You can stop key rotation by calling this method again with zero
     ; as the argument.  Once set up, calling {@link #doMaintenance(boolean)} will create and possibly send rotation
     ; transactions: but it won't be done automatically (because you might have to ask for the users password).
     ;
     ; The given time cannot be in the future.
     ;;
    #_public
    (§ method #_"void" setKeyRotationTime [#_"long" secs]
        (assert-argument (<= secs (Utils'currentTimeSeconds)), "Given time (%s) cannot be in the future.", (Utils'dateTimeFormat (* secs 1000)))
        (§ assoc this :v-key-rotation-timestamp secs)
        (.. this (saveNow))
        nil
    )

    ;;; Returns whether the keys creation time is before the key rotation time, if one was set. ;;
    #_public
    (§ method #_"boolean" isKeyRotating [#_"ECKey" key]
        (let [#_"long" time (:v-key-rotation-timestamp this)]
            (and (not= time 0) (< (.. key (getCreationTimeSeconds)) time))
        )
    )

    ;;;
     ; A wallet app should call this from time to time in order to let the wallet craft and send transactions needed
     ; to re-organise coins internally.  A good time to call this would be after receiving coins for an unencrypted
     ; wallet, or after sending money for an encrypted wallet.  If you have an encrypted wallet and just want to know
     ; if some maintenance needs doing, call this method with andSend set to false and look at the returned list of
     ; transactions.  Maintenance might also include internal changes that involve some processing or work but
     ; which don't require making transactions - these will happen automatically unless the password is required
     ; in which case an exception will be thrown.
     ;
     ; @param signAndSend If true, send the transactions via the tx broadcaster and return them, if false just return them.
     ; @return a list of transactions that the wallet just made/will make for internal maintenance.  Might be empty.
     ;;
    #_public
    (§ method #_"ListenableFuture<List<Transaction>>" doMaintenance [#_"boolean" __signAndSend]
        (let [#_"List<Transaction>" txns]
            (.. (:lock this) (lock))
            (.. (:key-chain-group-lock this) (lock))
            (try
                (§ ass txns (.. this (maybeRotateKeys __signAndSend)))
                (when (not __signAndSend)
                    (§ return (Futures/immediateFuture txns))
                )
                (finally
                    (.. (:key-chain-group-lock this) (unlock))
                    (.. (:lock this) (unlock))
                )
            )
            (assert-state (not (.. (:lock this) (isHeldByCurrentThread))))
            (let [#_"ArrayList<ListenableFuture<Transaction>>" futures (ArrayList. #_"<>" (.. txns (size)))
                  #_"TransactionBroadcaster" broadcaster (:v-transaction-broadcaster this)]
                (doseq [#_"Transaction" tx txns]
                    (try
                        (let [#_"ListenableFuture<Transaction>" future (.. broadcaster (broadcastTransaction tx) (future))]
                            (.. futures (add future))
                            (Futures/addCallback future, (FutureCallback. #_"<Transaction>")
                            (§ anon
                                #_override
                                #_public
                                (§ method #_"void" onSuccess [#_"Transaction" transaction]
                                    (.. Wallet'log (info "Successfully broadcast key rotation tx: {}", transaction))
                                    nil
                                )

                                #_override
                                #_public
                                (§ method #_"void" onFailure [#_"Throwable" throwable]
                                    (.. Wallet'log (error "Failed to broadcast key rotation tx", throwable))
                                    nil
                                )
                            ))
                        )
                        (catch Exception e
                            (.. Wallet'log (error "Failed to broadcast rekey tx", e))
                        )
                    )
                )
                (Futures/allAsList futures)
            )
        )
    )

    ;; Checks to see if any coins are controlled by rotating keys and if so, spends them.
    #_private
    (§ method- #_"List<Transaction>" maybeRotateKeys [#_"boolean" sign?]
        (assert-state (.. (:lock this) (isHeldByCurrentThread)))
        (assert-state (.. (:key-chain-group-lock this) (isHeldByCurrentThread)))

        (let [#_"List<Transaction>" results (Lists/newLinkedList)
              ;; TODO: Handle chain replays here.
              #_"long" stamp (:v-key-rotation-timestamp this)]
            (when' (not= stamp 0) => results ;; Nothing to do.
                ;; We might have to create a new HD hierarchy if the previous ones are now rotating.
                (let [#_"boolean" __allChainsRotating true]
                    (doseq [#_"DeterministicKeyChain" chain (.. (:key-chain-group this) (getDeterministicKeyChains))]
                        (when (<= stamp (.. chain (getEarliestKeyCreationTime)))
                            (§ ass __allChainsRotating false)
                            (§ break )
                        )
                    )
                    (when __allChainsRotating
                        (try
                            (cond (.. (:key-chain-group this) (getImportedKeys) (isEmpty))
                                (do
                                    (.. Wallet'log (info "All HD chains are currently rotating and we have no random keys, creating fresh HD chain ..."))
                                    (.. (:key-chain-group this) (createAndActivateNewHDChain))
                                )
                                :else
                                (do
                                    (.. Wallet'log (info "All HD chains are currently rotating, attempting to create a new one from the next oldest non-rotating key material ..."))
                                    (.. (:key-chain-group this) (upgradeToDeterministic stamp))
                                    (.. Wallet'log (info " ... upgraded to HD again, based on next best oldest key."))
                                )
                            )
                            (catch AllRandomKeysRotating _
                                (.. Wallet'log (info " ... no non-rotating random keys available, generating entirely new HD tree: backup required after this."))
                                (.. (:key-chain-group this) (createAndActivateNewHDChain))
                            )
                        )
                        (.. this (saveNow))
                    )
                    ;; Because transactions are size limited, we might not be able to re-key the entire wallet in one go.  So loop
                    ;; around here until we no longer produce transactions with the max number of inputs.  That means we're fully
                    ;; done, at least for now (we may still get more transactions later and this method will be reinvoked).
                    (loop []
                        (let [#_"Transaction" tx (.. this (rekeyOneBatch stamp, results, sign?))]
                            (when (some? tx)
                                (.. results (add tx))
                            )
                            (§ recur-if (and (some? tx) (= (.. tx (getInputs) (size)) KeyTimeCoinSelector'MAX_SIMULTANEOUS_INPUTS)))
                        )
                    )
                    results
                )
            )
        )
    )

    #_nilable
    #_private
    (§ method- #_"Transaction" rekeyOneBatch [#_"long" __timeSecs, #_"List<Transaction>" others, #_"boolean" sign]
        (.. (:lock this) (lock))
        (try
            ;; Build the transaction using some custom logic for our special needs.  Last parameter to
            ;; KeyTimeCoinSelector is whether to ignore pending transactions or not.
            ;;
            ;; We ignore pending outputs because trying to rotate these is basically racing an attacker, and
            ;; we're quite likely to lose and create stuck double spends.  Also, some users who have 0.9 wallets
            ;; have already got stuck double spends in their wallet due to the Bloom-filtering block reordering
            ;; bug that was fixed in 0.10, thus, making a re-key transaction depend on those would cause it to
            ;; never confirm at all.
            (let [#_"CoinSelector" __keyTimeSelector (KeyTimeCoinSelector. this, __timeSecs, true)
                  #_"FilteringCoinSelector" selector (FilteringCoinSelector. __keyTimeSelector)]
                (doseq [#_"Transaction" other others]
                    (.. selector (excludeOutputsSpentBy other))
                )
                ;; TODO: Make this use the standard SendRequest.
                (let [#_"CoinSelection" __toMove (.. selector (select Coin'ZERO, (.. this (calculateAllSpendCandidates))))]
                    (when (.. (:value-gathered __toMove) (equals Coin'ZERO))
                        (§ return nil) ;; Nothing to do.
                    )

                    (.. this (maybeUpgradeToHD))
                    (let [#_"Transaction" __rekeyTx (Transaction. (:params this))]
                        (doseq [#_"TransactionOutput" output (:gathered __toMove)]
                            (.. __rekeyTx (addInput output))
                        )
                        ;; When not signing, don't waste addresses.
                        (.. __rekeyTx (addOutput (:value-gathered __toMove), (if sign (.. this (freshReceiveAddress)) (.. this (currentReceiveAddress)))))
                        (when (not (.. this (adjustOutputDownwardsForFee __rekeyTx, __toMove, Transaction'DEFAULT_TX_FEE, true)))
                            (.. Wallet'log (error "Failed to adjust rekey tx for fees."))
                            (§ return nil)
                        )

                        (.. __rekeyTx (getConfidence) (setSource :ConfidenceSource'SELF))
                        (.. __rekeyTx (setPurpose :TransactionPurpose'KEY_ROTATION))
                        (let [#_"SendRequest" req (SendRequest'forTx __rekeyTx)]
                            (when sign
                                (.. this (signTransaction req))
                            )
                            ;; KeyTimeCoinSelector should never select enough inputs to push us oversize.
                            (assert-state (< (alength (.. __rekeyTx (unsafeBitcoinSerialize))) Transaction'MAX_STANDARD_TX_SIZE))
                            (§ return __rekeyTx)
                        )
                    )
                )
            )
            (catch VerificationException e
                (throw (RuntimeException. e)) ;; Cannot happen.
            )
            (finally
                (.. (:lock this) (unlock))
            )
        )
    )
)

;;;
 ; A class that handles atomic and optionally delayed writing of the wallet file to disk.  In future: backups too.
 ; It can be useful to delay writing of a wallet file to disk on slow devices where disk and serialization overhead
 ; can come to dominate the chain processing speed, i.e. on Android phones.  By coalescing writes and doing
 ; serialization and disk IO on a background thread performance can be improved.
 ;;
#_public
(§ class WalletFiles
    #_private
    #_static
    (def- #_"Logger" WalletFiles'log (LoggerFactory/getLogger WalletFiles))

    #_private
    (§ field- #_"Wallet" :wallet)
    #_private
    (§ field- #_"ScheduledThreadPoolExecutor" :executor)
    #_private
    (§ field- #_"File" :file)
    #_private
    (§ field- #_"AtomicBoolean" :save-pending)
    #_private
    (§ field- #_"long" :delay)
    #_private
    (§ field- #_"TimeUnit" :delay-time-unit)
    #_private
    (§ field- #_"Callable<Void>" :saver)

    #_private
    #_volatile
    (§ field- #_"WalletFilesListener" :v-listener)

    ;;;
     ; Implementors can do pre/post treatment of the wallet file.  Useful for adjusting permissions and other things.
     ;;
    #_public
    (§ interface WalletFilesListener
        ;;;
         ; Called on the auto-save thread when a new temporary file is created but before the wallet data is saved
         ; to it.  If you want to do something here like adjust permissions, go ahead and do so.
         ;;
        (§ method #_"void" onBeforeAutoSave [#_"File" __tempFile])

        ;;;
         ; Called on the auto-save thread after the newly created temporary file has been filled with data and renamed.
         ;;
        (§ method #_"void" onAfterAutoSave [#_"File" __newlySavedFile])
    )

    ;;;
     ; Initialize atomic and optionally delayed writing of the wallet file to disk.  Note the initial wallet state isn't
     ; saved automatically.  The {@link Wallet} calls {@link #saveNow()} or {@link #saveLater()} as wallet state changes,
     ; depending on the urgency of the changes.
     ;;
    #_public
    (§ constructor WalletFiles [#_"Wallet" wallet, #_"File" file, #_"long" delay, #_"TimeUnit" __delayTimeUnit]
        ;; An executor that starts up threads when needed and shuts them down later.
        (§ assoc this :executor (ScheduledThreadPoolExecutor. 1, (ContextPropagatingThreadFactory. "Wallet autosave thread", Thread/MIN_PRIORITY)))
        (.. (:executor this) (setKeepAliveTime 5, TimeUnit/SECONDS))
        (.. (:executor this) (allowCoreThreadTimeOut true))
        (.. (:executor this) (setExecuteExistingDelayedTasksAfterShutdownPolicy false))
        (§ assoc this :wallet (ensure some? wallet))
        ;; File must only be accessed from the auto-save executor from now on, to avoid simultaneous access.
        (§ assoc this :file (ensure some? file))
        (§ assoc this :save-pending (AtomicBoolean.))
        (§ assoc this :delay delay)
        (§ assoc this :delay-time-unit (ensure some? __delayTimeUnit))

        (§ assoc this :saver (Callable. #_"<Void>"
        (§ anon
            #_override
            #_public
            #_throws #_[ "Exception" ]
            (§ method #_"Void" call []
                ;; Runs in an auto save thread, unless some other scheduled request already beat us to it.
                (when (.. (:save-pending this) (getAndSet false))
                    (let [#_"Date" time (.. wallet (getLastBlockSeenTime))]
                        (.. WalletFiles'log (info "Background saving wallet; last seen block is height {}, date {}, hash {}", (.. wallet (getLastBlockSeenHeight)), (if (some? time) (Utils'dateTimeFormat time) "unknown"), (.. wallet (getLastBlockSeenHash))))
                        (.. this (saveNowInternal))
                    )
                )
                nil
            )
        )))
        this
    )

    ;;;
     ; The given listener will be called on the autosave thread before and after the wallet is saved to disk.
     ;;
    #_public
    (§ method #_"void" setListener [#_non-nil #_"WalletFilesListener" listener]
        (§ assoc this :v-listener (ensure some? listener))
        nil
    )

    ;;; Actually write the wallet file to disk, using an atomic rename when possible.  Runs on the current thread. ;;
    #_public
    #_throws #_[ "IOException" ]
    (§ method #_"void" saveNow []
        ;; Can be called by any thread. However the wallet is locked whilst saving, so we can have two saves
        ;; in flight, but they will serialize (using different temp files).
        (let [#_"Date" __lastBlockSeenTime (.. (:wallet this) (getLastBlockSeenTime))]
            (.. WalletFiles'log (info "Saving wallet; last seen block is height {}, date {}, hash {}", (.. (:wallet this) (getLastBlockSeenHeight)), (if (some? __lastBlockSeenTime) (Utils'dateTimeFormat __lastBlockSeenTime) "unknown"), (.. (:wallet this) (getLastBlockSeenHash))))
            (.. this (saveNowInternal))
        )
        nil
    )

    #_private
    #_throws #_[ "IOException" ]
    (§ method- #_"void" saveNowInternal []
        (let [#_"Stopwatch" watch (Stopwatch/createStarted)
              #_"File" directory (.. (:file this) (getAbsoluteFile) (getParentFile))
              #_"File" temp (File/createTempFile "wallet", nil, directory)
              #_"WalletFilesListener" listener (:v-listener this)]
            (when (some? listener)
                (.. listener (onBeforeAutoSave temp))
            )
            (.. (:wallet this) (saveToFile temp, (:file this)))
            (when (some? listener)
                (.. listener (onAfterAutoSave (:file this)))
            )
            (.. watch (stop))
            (.. WalletFiles'log (info "Save completed in {}", watch))
        )
        nil
    )

    ;;; Queues up a save in the background.  Useful for not very important wallet changes. ;;
    #_public
    (§ method #_"void" saveLater []
        (when-not (.. (:save-pending this) (getAndSet true)) ;; Else already pending.
            (.. (:executor this) (schedule (:saver this), (:delay this), (:delay-time-unit this)))
        )
        nil
    )

    ;;; Shut down auto-saving. ;;
    #_public
    (§ method #_"void" shutdownAndWait []
        (.. (:executor this) (shutdown))
        (try
            (.. (:executor this) (awaitTermination Long/MAX_VALUE, TimeUnit/DAYS)) ;; forever
            (catch InterruptedException e
                (throw (RuntimeException. e))
            )
        )
        nil
    )
)

;;;
 ; Serialize and de-serialize a wallet to a byte stream containing a
 ; <a href="https://developers.google.com/protocol-buffers/docs/overview">protocol buffer</a>.  Protocol buffers are
 ; a data interchange format developed by Google with an efficient binary representation, a type safe specification
 ; language and compilers that generate code to work with those data structures for many languages.  Protocol buffers
 ; can have their format evolved over time: conceptually they represent data using (tag, length, value) tuples.  The
 ; format is defined by the <tt>wallet.proto</tt> file in the bitcoinj source distribution.
 ;
 ; This class is used through its static methods.  The most common operations are writeWallet and readWallet, which do
 ; the obvious operations on Output/InputStreams.  You can use a {@link java.io.ByteArrayInputStream} and equivalent
 ; {@link java.io.ByteArrayOutputStream} if you'd like byte arrays instead.  The protocol buffer can also be manipulated
 ; in its object form if you'd like to modify the flattened data structure before serialization to binary.
 ;
 ; You can extend the wallet format with additional fields specific to your application if you want, but make sure
 ; to either put the extra data in the provided extension areas, or select tag numbers that are unlikely to be used
 ; by anyone else.
 ;
 ; @author Miron Cuperman
 ; @author Andreas Schildbach
 ;;
#_public
(§ class WalletSerializer
    #_private
    #_static
    (def- #_"Logger" WalletSerializer'log (LoggerFactory/getLogger WalletSerializer))

    ;; Used for de-serialization.
    #_protected
    (§ field #_"Map<ByteString, Transaction>" :tx-map (HashMap. #_"<>"))

    #_public
    (§ constructor WalletSerializer []
        this
    )

    ;;;
     ; Formats the given wallet (transactions and keys) to the given output stream in protocol buffer format.
     ;
     ; Equivalent to <tt>walletToProto(wallet).writeTo(output)</tt>.
     ;;
    #_public
    #_throws #_[ "IOException" ]
    (§ method #_"void" writeWallet [#_"Wallet" wallet, #_"OutputStream" stream]
        (let [#_"Protos.Wallet" proto (.. this (walletToProto wallet))
              #_"CodedOutputStream" cos (CodedOutputStream/newInstance stream, CodedOutputStream/DEFAULT_BUFFER_SIZE)]
            (.. proto (writeTo cos))
            (.. cos (flush))
        )
        nil
    )

    ;;;
     ; Converts the given wallet to the object representation of the protocol buffers.  This can be modified,
     ; or additional data fields set, before serialization takes place.
     ;;
    #_public
    (§ method #_"Protos.Wallet" walletToProto [#_"Wallet" wallet]
        (let [#_"Protos.Wallet.Builder" builder (Protos.Wallet/newBuilder)]
            (.. builder (setNetworkIdentifier (-> wallet :params :id)))
            (when (some? (.. wallet (getDescription)))
                (.. builder (setDescription (.. wallet (getDescription))))
            )

            (doseq [#_"WalletTransaction" wtx (.. wallet (getWalletTransactions))]
                (let [#_"Protos.Transaction" __txProto (WalletSerializer'makeTxProto wtx)]
                    (.. builder (addTransaction __txProto))
                )
            )

            (.. builder (addAllKey (.. wallet (serializeKeyChainGroupToProtobuf))))

            ;; Populate the lastSeenBlockHash field.
            (let [#_"Sha256Hash" __lastSeenBlockHash (.. wallet (getLastBlockSeenHash))]
                (when (some? __lastSeenBlockHash)
                    (.. builder (setLastSeenBlockHash (WalletSerializer'hashToByteString __lastSeenBlockHash)))
                    (.. builder (setLastSeenBlockHeight (.. wallet (getLastBlockSeenHeight))))
                )
                (when (< 0 (.. wallet (getLastBlockSeenTimeSecs)))
                    (.. builder (setLastSeenBlockTimeSecs (.. wallet (getLastBlockSeenTimeSecs))))
                )

                (when (some? (.. wallet (getKeyRotationTime)))
                    (let [#_"long" __timeSecs (quot (.. wallet (getKeyRotationTime) (getTime)) 1000)]
                        (.. builder (setKeyRotationTime __timeSecs))
                    )
                )

                (doseq [#_"TransactionSigner" signer (.. wallet (getTransactionSigners))]
                    ;; Do not serialize LocalTransactionSigner as it's being added implicitly.
                    (when-not (instance? LocalTransactionSigner signer)
                        (let [#_"Protos.TransactionSigner.Builder" __protoSigner (Protos.TransactionSigner/newBuilder)]
                            (.. __protoSigner (setClassName (.. signer (getClass) (getName))))
                            (.. __protoSigner (setData (ByteString/copyFrom (.. signer (serialize)))))
                            (.. builder (addTransactionSigners __protoSigner))
                        )
                    )
                )

                (.. builder (build))
            )
        )
    )

    #_private
    #_static
    (§ defn- #_"Protos.Transaction" WalletSerializer'makeTxProto [#_"WalletTransaction" wtx]
        (let [#_"Transaction" tx (.. wtx (getTransaction))
              #_"Protos.Transaction.Builder" __txBuilder (Protos.Transaction/newBuilder)]

            (.. __txBuilder (setPool (WalletSerializer'getProtoPool wtx)) (setHash (WalletSerializer'hashToByteString (.. tx (getHash)))) (setVersion (int (.. tx (getVersion)))))

            (when (some? (.. tx (getUpdateTime)))
                (.. __txBuilder (setUpdatedAt (.. tx (getUpdateTime) (getTime))))
            )

            (when (< 0 (.. tx (getLockTime)))
                (.. __txBuilder (setLockTime (int (.. tx (getLockTime)))))
            )

            ;; Handle inputs.
            (doseq [#_"TransactionInput" input (.. tx (getInputs))]
                (let [#_"Protos.TransactionInput.Builder" __inputBuilder (.. (Protos.TransactionInput/newBuilder) (setScriptBytes (ByteString/copyFrom (.. input (getScriptBytes)))) (setTransactionOutPointHash (WalletSerializer'hashToByteString (.. (:outpoint input) (getHash)))) (setTransactionOutPointIndex (int (.. (:outpoint input) (getIndex)))))]
                    (when (.. input (hasSequence))
                        (.. __inputBuilder (setSequence (int (.. input (getSequenceNumber)))))
                    )
                    (when (some? (.. input (getValue)))
                        (.. __inputBuilder (setValue (:value (.. input (getValue)))))
                    )
                    (.. __txBuilder (addTransactionInput __inputBuilder))
                )
            )

            ;; Handle outputs.
            (doseq [#_"TransactionOutput" output (.. tx (getOutputs))]
                (let [#_"Protos.TransactionOutput.Builder" __outputBuilder (.. (Protos.TransactionOutput/newBuilder) (setScriptBytes (ByteString/copyFrom (.. output (getScriptBytes)))) (setValue (:value (.. output (getValue)))))
                      #_"TransactionInput" __spentBy (.. output (getSpentBy))]
                    (when (some? __spentBy)
                        (let [#_"Sha256Hash" __spendingHash (.. __spentBy (getParentTransaction) (getHash))
                              #_"int" __spentByTransactionIndex (.. __spentBy (getParentTransaction) (getInputs) (indexOf __spentBy))]
                            (.. __outputBuilder (setSpentByTransactionHash (WalletSerializer'hashToByteString __spendingHash)) (setSpentByTransactionIndex __spentByTransactionIndex))
                        )
                    )
                    (.. __txBuilder (addTransactionOutput __outputBuilder))
                )
            )

            ;; Handle which blocks tx was seen in.
            (let [#_"Map<Sha256Hash, Integer>" __appearsInHashes (.. tx (getAppearsInHashes))]
                (when (some? __appearsInHashes)
                    (doseq [#_"Map.Entry<Sha256Hash, Integer>" entry (.. __appearsInHashes (entrySet))]
                        (.. __txBuilder (addBlockHash (WalletSerializer'hashToByteString (.. entry (getKey)))))
                        (.. __txBuilder (addBlockRelativityOffsets (.. entry (getValue))))
                    )
                )

                (when (.. tx (hasConfidence))
                    (let [#_"TransactionConfidence" confidence (.. tx (getConfidence))
                          #_"Protos.TransactionConfidence.Builder" __confidenceBuilder (Protos.TransactionConfidence/newBuilder)]
                        (WalletSerializer'writeConfidence __txBuilder, confidence, __confidenceBuilder)
                    )
                )

                (let [#_"Protos.TransactionPurpose" purpose
                        (condp = (.. tx (getPurpose))
                            :TransactionPurpose'UNKNOWN                   Protos.Transaction.Purpose/UNKNOWN
                            :TransactionPurpose'USER_PAYMENT              Protos.Transaction.Purpose/USER_PAYMENT
                            :TransactionPurpose'KEY_ROTATION              Protos.Transaction.Purpose/KEY_ROTATION
                            :TransactionPurpose'ASSURANCE_CONTRACT_CLAIM  Protos.Transaction.Purpose/ASSURANCE_CONTRACT_CLAIM
                            :TransactionPurpose'ASSURANCE_CONTRACT_PLEDGE Protos.Transaction.Purpose/ASSURANCE_CONTRACT_PLEDGE
                            :TransactionPurpose'ASSURANCE_CONTRACT_STUB   Protos.Transaction.Purpose/ASSURANCE_CONTRACT_STUB
                            :TransactionPurpose'RAISE_FEE                 Protos.Transaction.Purpose/RAISE_FEE
                            (throw (RuntimeException. "New tx purpose serialization not implemented."))
                        )]
                    (.. __txBuilder (setPurpose purpose))

                    (let [#_"ExchangeRate" __exchangeRate (.. tx (getExchangeRate))]
                        (when (some? __exchangeRate)
                            (let [#_"Protos.ExchangeRate.Builder" __exchangeRateBuilder (.. (Protos.ExchangeRate/newBuilder) (setCoinValue (.. (:coin __exchangeRate) :value)) (setFiatValue (.. (:fiat __exchangeRate) :value)) (setFiatCurrencyCode (.. (:fiat __exchangeRate) :currency-code)))]
                                (.. __txBuilder (setExchangeRate __exchangeRateBuilder))
                            )
                        )

                        (when (some? (.. tx (getMemo)))
                            (.. __txBuilder (setMemo (.. tx (getMemo))))
                        )

                        (.. __txBuilder (build))
                    )
                )
            )
        )
    )

    #_private
    #_static
    (§ defn- #_"Protos.Transaction.Pool" WalletSerializer'getProtoPool [#_"WalletTransaction" wtx]
        (condp = (.. wtx (getPool))
            :PoolType'UNSPENT Protos.Transaction.Pool/UNSPENT
            :PoolType'SPENT   Protos.Transaction.Pool/SPENT
            :PoolType'DEAD    Protos.Transaction.Pool/DEAD
            :PoolType'PENDING Protos.Transaction.Pool/PENDING
            (throw (RuntimeException. "Unreachable"))
        )
    )

    #_private
    #_static
    (§ defn- #_"void" WalletSerializer'writeConfidence [#_"Protos.Transaction.Builder" __txBuilder, #_"TransactionConfidence" confidence, #_"Protos.TransactionConfidence.Builder" __confidenceBuilder]
        (§ sync confidence
            (.. __confidenceBuilder (setType (Protos.TransactionConfidence.Type/valueOf (:value (.. confidence (getConfidenceType))))))
            (when (= (.. confidence (getConfidenceType)) ConfidenceType'BUILDING)
                (.. __confidenceBuilder (setAppearedAtHeight (.. confidence (getAppearedAtChainHeight))))
                (.. __confidenceBuilder (setDepth (.. confidence (getDepthInBlocks))))
            )
            (when (= (.. confidence (getConfidenceType)) ConfidenceType'DEAD)
                ;; Copy in the overriding transaction, if available.
                ;; (A dead coinbase transaction has no overriding transaction).
                (when (some? (.. confidence (getOverridingTransaction)))
                    (let [#_"Sha256Hash" __overridingHash (.. confidence (getOverridingTransaction) (getHash))]
                        (.. __confidenceBuilder (setOverridingTransaction (WalletSerializer'hashToByteString __overridingHash)))
                    )
                )
            )
            (condp = (.. confidence (getSource))
                :ConfidenceSource'SELF        (.. __confidenceBuilder (setSource Protos.TransactionConfidence.Source/SOURCE_SELF))
                :ConfidenceSource'NETWORK     (.. __confidenceBuilder (setSource Protos.TransactionConfidence.Source/SOURCE_NETWORK))
                #_":ConfidenceSource'UNKNOWN" (.. __confidenceBuilder (setSource Protos.TransactionConfidence.Source/SOURCE_UNKNOWN))
            )
        )

        (doseq [#_"PeerAddress" address (.. confidence (getBroadcastBy))]
            (let [#_"Protos.PeerAddress" proto (.. (Protos.PeerAddress/newBuilder) (setIpAddress (ByteString/copyFrom (.. address (getAddr) (getAddress)))) (setPort (.. address (getPort))) (setServices (.. address (getServices) (longValue))) (build))]
                (.. __confidenceBuilder (addBroadcastBy proto))
            )
        )
        (let [#_"Date" __lastBroadcastedAt (.. confidence (getLastBroadcastedAt))]
            (when (some? __lastBroadcastedAt)
                (.. __confidenceBuilder (setLastBroadcastedAt (.. __lastBroadcastedAt (getTime))))
            )
            (.. __txBuilder (setConfidence __confidenceBuilder))
        )
        nil
    )

    #_public
    #_static
    (§ defn #_"ByteString" WalletSerializer'hashToByteString [#_"Sha256Hash" hash]
        (ByteString/copyFrom (.. hash (getBytes)))
    )

    #_public
    #_static
    (§ defn #_"Sha256Hash" WalletSerializer'byteStringToHash [#_"ByteString" bs]
        (Sha256Hash'wrap (.. bs (toByteArray)))
    )

    ;;;
     ; Loads wallet data from the given protocol buffer and inserts it into the given Wallet object.
     ; This is primarily useful when you wish to pre-register extension objects.  Note that if loading
     ; fails the provided Wallet object may be in an indeterminate state and should be thrown away.
     ;
     ; A wallet can be unreadable for various reasons, such as inability to open the file, corrupt data,
     ; internally inconsistent data and so on.  You should always handle
     ; {@link UnreadableWalletException} and communicate failure to the user in an appropriate manner.
     ;
     ; @throws UnreadableWalletException in various error conditions (see description).
     ;;
    #_public
    #_throws #_[ "UnreadableWalletException" ]
    (§ method #_"Wallet" readWallet [#_"InputStream" input]
        (.. this (readWallet input, false))
    )

    ;;;
     ; Loads wallet data from the given protocol buffer and inserts it into the given Wallet object.
     ; This is primarily useful when you wish to pre-register extension objects.  Note that if loading
     ; fails the provided Wallet object may be in an indeterminate state and should be thrown away.  Do not
     ; simply call this method again on the same Wallet object with {@code forceReset} set {@code true}.
     ; It won't work.
     ;
     ; If {@code forceReset} is {@code true}, then no transactions are loaded from the wallet, and
     ; it is configured to replay transactions from the blockchain (as if the wallet had been loaded and
     ; {@link Wallet.reset} had been called immediately thereafter).
     ;
     ; A wallet can be unreadable for various reasons, such as inability to open the file, corrupt data,
     ; internally inconsistent data and so on. You should always handle
     ; {@link UnreadableWalletException} and communicate failure to the user in an appropriate manner.
     ;
     ; @throws UnreadableWalletException in various error conditions (see description).
     ;;
    #_public
    #_throws #_[ "UnreadableWalletException" ]
    (§ method #_"Wallet" readWallet [#_"InputStream" input, #_"boolean" __forceReset]
        (try
            (let [#_"Protos.Wallet" proto (WalletSerializer'parseToProto input)
                  #_"String" id (.. proto (getNetworkIdentifier))
                  #_"NetworkParameters" params (NetworkParameters'fromID id)]
                (when (nil? params)
                    (throw (UnreadableWalletException. (str "Unknown network parameters ID " id)))
                )

                (.. this (readWallet params, proto, __forceReset))
            )
            (catch IOException e
                (throw (UnreadableWalletException. "Could not parse input stream to protobuf", e))
            )
            (catch IllegalStateException e
                (throw (UnreadableWalletException. "Could not parse input stream to protobuf", e))
            )
            (catch IllegalArgumentException e
                (throw (UnreadableWalletException. "Could not parse input stream to protobuf", e))
            )
        )
    )

    ;;;
     ; Loads wallet data from the given protocol buffer and inserts it into the given Wallet object.
     ; This is primarily useful when you wish to pre-register extension objects.  Note that if loading
     ; fails, the provided Wallet object may be in an indeterminate state and should be thrown away.
     ;
     ; A wallet can be unreadable for various reasons, such as inability to open the file, corrupt
     ; data, internally inconsistent data and so on.  You should always handle
     ; {@link UnreadableWalletException} and communicate failure to the user in an appropriate manner.
     ;
     ; @throws UnreadableWalletException in various error conditions (see description).
     ;;
    #_public
    #_throws #_[ "UnreadableWalletException" ]
    (§ method #_"Wallet" readWallet [#_"NetworkParameters" params, #_"Protos.Wallet" proto]
        (.. this (readWallet params, proto, false))
    )

    ;;;
     ; Loads wallet data from the given protocol buffer and inserts it into the given Wallet object.
     ; This is primarily useful when you wish to pre-register extension objects.  Note that if loading
     ; fails, the provided Wallet object may be in an indeterminate state and should be thrown away.
     ; Do not simply call this method again on the same Wallet object with {@code forceReset} set to true.
     ; It won't work.
     ;
     ; If {@code forceReset} is {@code true}, then no transactions are loaded from the wallet, and it is
     ; configured to replay transactions from the blockchain (as if the wallet had been loaded and
     ; {@link Wallet.reset} had been called immediately thereafter).
     ;
     ; A wallet can be unreadable for various reasons, such as inability to open the file, corrupt data,
     ; internally inconsistent data and so on.  You should always handle {@link UnreadableWalletException}
     ; and communicate failure to the user in an appropriate manner.
     ;
     ; @throws UnreadableWalletException in various error conditions (see description).
     ;;
    #_public
    #_throws #_[ "UnreadableWalletException" ]
    (§ method #_"Wallet" readWallet [#_"NetworkParameters" params, #_"Protos.Wallet" proto, #_"boolean" __forceReset]
        (when-not (= (.. proto (getNetworkIdentifier)) (:id params))
            (throw (UnreadableWalletException. "Mismatched network ID"))
        )

        (let [#_"Wallet" wallet (Wallet. params, (KeyChainGroup'fromProtobufUnencrypted params, (.. proto (getKeyList)), (KeyChainFactory.)))]
            (when (.. proto (hasDescription))
                (.. wallet (setDescription (.. proto (getDescription))))
            )

            (cond __forceReset
                (do
                    ;; Should mirror Wallet.reset().
                    (.. wallet (setLastBlockSeenHash nil))
                    (.. wallet (setLastBlockSeenHeight -1))
                    (.. wallet (setLastBlockSeenTimeSecs 0))
                )
                :else
                (do
                    ;; Read all transactions and insert into the txMap.
                    (doseq [#_"Protos.Transaction" __txProto (.. proto (getTransactionList))]
                        (.. this (readTransaction __txProto, (.. wallet (getParams))))
                    )

                    ;; Update transaction outputs to point to inputs that spend them.
                    (doseq [#_"Protos.Transaction" __txProto (.. proto (getTransactionList))]
                        (let [#_"WalletTransaction" wtx (.. this (connectTransactionOutputs params, __txProto))]
                            (.. wallet (addWalletTransaction wtx))
                        )
                    )

                    ;; Update the lastBlockSeenHash.
                    (if (not (.. proto (hasLastSeenBlockHash)))
                        (.. wallet (setLastBlockSeenHash nil))
                        (.. wallet (setLastBlockSeenHash (WalletSerializer'byteStringToHash (.. proto (getLastSeenBlockHash)))))
                    )

                    (if (not (.. proto (hasLastSeenBlockHeight)))
                        (.. wallet (setLastBlockSeenHeight -1))
                        (.. wallet (setLastBlockSeenHeight (.. proto (getLastSeenBlockHeight))))
                    )

                    ;; Will default to zero if not present.
                    (.. wallet (setLastBlockSeenTimeSecs (.. proto (getLastSeenBlockTimeSecs))))

                    (when (.. proto (hasKeyRotationTime))
                        (.. wallet (setKeyRotationTime (Date. (* (.. proto (getKeyRotationTime)) 1000))))
                    )
                )
            )

            (doseq [#_"Protos.TransactionSigner" __signerProto (.. proto (getTransactionSignersList))]
                (try
                    (let [#_"Class" __signerClass (Class/forName (.. __signerProto (getClassName)))
                          #_"TransactionSigner" signer (cast TransactionSigner (.. __signerClass (newInstance)))]
                        (.. signer (deserialize (.. __signerProto (getData) (toByteArray))))
                        (.. wallet (addTransactionSigner signer))
                    )
                    (catch Exception e
                        (throw (UnreadableWalletException. (str "Unable to deserialize TransactionSigner instance: " (.. __signerProto (getClassName))), e))
                    )
                )
            )

            ;; Make sure the object can be re-used to read another wallet without corruption.
            (.. (:tx-map this) (clear))

            wallet
        )
    )

    ;;;
     ; Returns the loaded protocol buffer from the given byte stream.  You normally want
     ; {@link Wallet#loadFromFile(java.io.File)} instead - this method is designed for
     ; low level work involving the wallet file format itself.
     ;;
    #_public
    #_static
    #_throws #_[ "IOException" ]
    (§ defn #_"Protos.Wallet" WalletSerializer'parseToProto [#_"InputStream" input]
        (Protos.Wallet/parseFrom (CodedInputStream/newInstance input))
    )

    #_private
    #_throws #_[ "UnreadableWalletException" ]
    (§ method- #_"void" readTransaction [#_"Protos.Transaction" __txProto, #_"NetworkParameters" params]
        (let [#_"Transaction" tx (Transaction. params)]

            (.. tx (setVersion (.. __txProto (getVersion))))

            (when (.. __txProto (hasUpdatedAt))
                (.. tx (setUpdateTime (Date. (.. __txProto (getUpdatedAt)))))
            )

            (doseq [#_"Protos.TransactionOutput" __outputProto (.. __txProto (getTransactionOutputList))]
                (let [#_"Coin" value (Coin'valueOf (.. __outputProto (getValue)))
                      #_"byte[]" script (.. __outputProto (getScriptBytes) (toByteArray))
                      #_"TransactionOutput" output (TransactionOutput. params, tx, value, script)]
                    (.. tx (addOutput output))
                )
            )

            (doseq [#_"Protos.TransactionInput" __inputProto (.. __txProto (getTransactionInputList))]
                (let [#_"byte[]" script (.. __inputProto (getScriptBytes) (toByteArray))
                      #_"TransactionOutPoint" outpoint (TransactionOutPoint. params, (& 0xffffffff (.. __inputProto (getTransactionOutPointIndex))), (WalletSerializer'byteStringToHash (.. __inputProto (getTransactionOutPointHash))))
                      #_"Coin" value (when (.. __inputProto (hasValue)) (Coin'valueOf (.. __inputProto (getValue))))
                      #_"TransactionInput" input (TransactionInput. params, tx, script, outpoint, value)]
                    (when (.. __inputProto (hasSequence))
                        (.. input (setSequenceNumber (& 0xffffffff (.. __inputProto (getSequence)))))
                    )
                    (.. tx (addInput input))
                )
            )

            (loop-when-recur [#_"int" i 0] (< i (.. __txProto (getBlockHashCount))) [(inc i)]
                (let [#_"ByteString" __blockHash (.. __txProto (getBlockHash i))
                      #_"int" __relativityOffset 0]
                    (when (< 0 (.. __txProto (getBlockRelativityOffsetsCount)))
                        (§ ass __relativityOffset (.. __txProto (getBlockRelativityOffsets i)))
                    )
                    (.. tx (addBlockAppearance (WalletSerializer'byteStringToHash __blockHash), __relativityOffset))
                )
            )

            (when (.. __txProto (hasLockTime))
                (.. tx (setLockTime (& 0xffffffff (.. __txProto (getLockTime)))))
            )

            (cond (.. __txProto (hasPurpose))
                (do
                    (condp = (.. __txProto (getPurpose))
                        Protos.Transaction.Purpose/UNKNOWN                   (.. tx (setPurpose :TransactionPurpose'UNKNOWN))
                        Protos.Transaction.Purpose/USER_PAYMENT              (.. tx (setPurpose :TransactionPurpose'USER_PAYMENT))
                        Protos.Transaction.Purpose/KEY_ROTATION              (.. tx (setPurpose :TransactionPurpose'KEY_ROTATION))
                        Protos.Transaction.Purpose/ASSURANCE_CONTRACT_CLAIM  (.. tx (setPurpose :TransactionPurpose'ASSURANCE_CONTRACT_CLAIM))
                        Protos.Transaction.Purpose/ASSURANCE_CONTRACT_PLEDGE (.. tx (setPurpose :TransactionPurpose'ASSURANCE_CONTRACT_PLEDGE))
                        Protos.Transaction.Purpose/ASSURANCE_CONTRACT_STUB   (.. tx (setPurpose :TransactionPurpose'ASSURANCE_CONTRACT_STUB))
                        Protos.Transaction.Purpose/RAISE_FEE                 (.. tx (setPurpose :TransactionPurpose'RAISE_FEE))
                        (throw (RuntimeException. "New purpose serialization not implemented."))
                    )
                )
                :else
                (do
                    ;; Old wallet: assume a user payment as that's the only reason a new tx would have been created back then.
                    (.. tx (setPurpose :TransactionPurpose'USER_PAYMENT))
                )
            )

            (when (.. __txProto (hasExchangeRate))
                (let [#_"Protos.ExchangeRate" __exchangeRateProto (.. __txProto (getExchangeRate))]
                    (.. tx (setExchangeRate (ExchangeRate. (Coin'valueOf (.. __exchangeRateProto (getCoinValue))), (Fiat'valueOf (.. __exchangeRateProto (getFiatCurrencyCode)), (.. __exchangeRateProto (getFiatValue))))))
                )
            )

            (when (.. __txProto (hasMemo))
                (.. tx (setMemo (.. __txProto (getMemo))))
            )

            ;; Transaction should now be complete.
            (let [#_"Sha256Hash" __protoHash (WalletSerializer'byteStringToHash (.. __txProto (getHash)))]
                (when (not (.. tx (getHash) (equals __protoHash)))
                    (throw (UnreadableWalletException. (String/format Locale/US, "Transaction did not deserialize completely: %s vs %s", (.. tx (getHash)), __protoHash)))
                )
                (when (.. (:tx-map this) (containsKey (.. __txProto (getHash))))
                    (throw (UnreadableWalletException. (str "Wallet contained duplicate transaction " (WalletSerializer'byteStringToHash (.. __txProto (getHash))))))
                )
                (.. (:tx-map this) (put (.. __txProto (getHash)), tx))
            )
        )
        nil
    )

    #_private
    #_throws #_[ "UnreadableWalletException" ]
    (§ method- #_"WalletTransaction" connectTransactionOutputs [#_"NetworkParameters" params, #_"org.bitcoinj.wallet.Protos.Transaction" __txProto]
        (let [#_"Transaction" tx (.. (:tx-map this) (get (.. __txProto (getHash))))
              #_"PoolType" pool
                (condp =? (.. __txProto (getPool))
                    Protos.Transaction.Pool/DEAD    :PoolType'DEAD
                    Protos.Transaction.Pool/PENDING :PoolType'PENDING
                    Protos.Transaction.Pool/SPENT   :PoolType'SPENT
                    Protos.Transaction.Pool/UNSPENT :PoolType'UNSPENT
                    ;; Upgrade old wallets: inactive pool has been merged with the pending pool.
                    ;; Remove this some time after 0.9 is old and everyone has upgraded.
                    ;; There should not be any spent outputs in this tx as old wallets would not allow them to be spent in this state.
                    [Protos.Transaction.Pool/INACTIVE Protos.Transaction.Pool/PENDING_INACTIVE] :PoolType'PENDING
                    (throw (UnreadableWalletException. (str "Unknown transaction pool: " (.. __txProto (getPool)))))
                )]

            (loop-when-recur [#_"int" i 0] (< i (.. tx (getOutputs) (size))) [(inc i)]
                (let [#_"TransactionOutput" output (.. tx (getOutputs) (get i))
                      #_"Protos.TransactionOutput" __transactionOutput (.. __txProto (getTransactionOutput i))]
                    (when (.. __transactionOutput (hasSpentByTransactionHash))
                        (let [#_"ByteString" __spentByTransactionHash (.. __transactionOutput (getSpentByTransactionHash))
                              #_"Transaction" __spendingTx (.. (:tx-map this) (get __spentByTransactionHash))]
                            (when (nil? __spendingTx)
                                (throw (UnreadableWalletException. (String/format Locale/US, "Could not connect %s to %s", (.. tx (getHashAsString)), (WalletSerializer'byteStringToHash __spentByTransactionHash))))
                            )

                            (let [#_"int" __spendingIndex (.. __transactionOutput (getSpentByTransactionIndex))
                                  #_"TransactionInput" input (ensure some? (.. __spendingTx (getInput __spendingIndex)))]
                                (.. input (connect output))
                            )
                        )
                    )
                )
            )

            (when (.. __txProto (hasConfidence))
                (let [#_"Protos.TransactionConfidence" __confidenceProto (.. __txProto (getConfidence))
                      #_"TransactionConfidence" confidence (.. tx (getConfidence))]
                    (.. this (readConfidence params, tx, __confidenceProto, confidence))
                )
            )

            (WalletTransaction. pool, tx)
        )
    )

    #_private
    #_throws #_[ "UnreadableWalletException" ]
    (§ method- #_"void" readConfidence [#_"NetworkParameters" params, #_"Transaction" tx, #_"Protos.TransactionConfidence" __confidenceProto, #_"TransactionConfidence" confidence]
        ;; We are lenient here because tx confidence is not an essential part of the wallet.
        ;; If the tx has an unknown type of confidence, ignore.
        (if-not (.. __confidenceProto (hasType))
            (.. WalletSerializer'log (warn "Unknown confidence type for tx {}", (.. tx (getHashAsString))))
            (let [#_"ConfidenceType" type
                    (condp = (.. __confidenceProto (getType))
                        Protos.TransactionConfidence.ConfidenceType/BUILDING          ConfidenceType'BUILDING
                        Protos.TransactionConfidence.ConfidenceType/DEAD              ConfidenceType'DEAD
                        ;; These two are equivalent (must be able to read old wallets).
                        Protos.TransactionConfidence.ConfidenceType/NOT_IN_BEST_CHAIN ConfidenceType'PENDING
                        Protos.TransactionConfidence.ConfidenceType/PENDING           ConfidenceType'PENDING
                        Protos.TransactionConfidence.ConfidenceType/IN_CONFLICT       ConfidenceType'IN_CONFLICT
                        #_"Protos.TransactionConfidence.ConfidenceType/UNKNOWN"       ConfidenceType'UNKNOWN
                    )]
                (.. confidence (setConfidenceType type))
                (when (.. __confidenceProto (hasAppearedAtHeight))
                    (when (not= (.. confidence (getConfidenceType)) ConfidenceType'BUILDING)
                        (.. WalletSerializer'log (warn "Have appearedAtHeight but not BUILDING for tx {}", (.. tx (getHashAsString))))
                        (§ return nil)
                    )
                    (.. confidence (setAppearedAtChainHeight (.. __confidenceProto (getAppearedAtHeight))))
                )

                (when (.. __confidenceProto (hasDepth))
                    (when (not= (.. confidence (getConfidenceType)) ConfidenceType'BUILDING)
                        (.. WalletSerializer'log (warn "Have depth but not BUILDING for tx {}", (.. tx (getHashAsString))))
                        (§ return nil)
                    )
                    (.. confidence (setDepthInBlocks (.. __confidenceProto (getDepth))))
                )

                (when (.. __confidenceProto (hasOverridingTransaction))
                    (when (not= (.. confidence (getConfidenceType)) ConfidenceType'DEAD)
                        (.. WalletSerializer'log (warn "Have overridingTransaction but not OVERRIDDEN for tx {}", (.. tx (getHashAsString))))
                        (§ return nil)
                    )
                    (let [#_"Transaction" __overridingTransaction (.. (:tx-map this) (get (.. __confidenceProto (getOverridingTransaction))))]
                        (when (nil? __overridingTransaction)
                            (.. WalletSerializer'log (warn "Have overridingTransaction that is not in wallet for tx {}", (.. tx (getHashAsString))))
                            (§ return nil)
                        )
                        (.. confidence (setOverridingTransaction __overridingTransaction))
                    )
                )

                (doseq [#_"Protos.PeerAddress" proto (.. __confidenceProto (getBroadcastByList))]
                    (let [#_"InetAddress" ip]
                        (try
                            (§ ass ip (InetAddress/getByAddress (.. proto (getIpAddress) (toByteArray))))
                            (catch UnknownHostException e
                                (throw (UnreadableWalletException. "Peer IP address does not have the right length", e))
                            )
                        )

                        (let [#_"int" port (.. proto (getPort))
                              #_"BigInteger" services (BigInteger/valueOf (.. proto (getServices)))
                              #_"PeerAddress" address (PeerAddress. params, ip, port, ProtocolVersion'CURRENT, services)]
                            (.. confidence (markBroadcastBy address))
                        )
                    )
                )

                (when (.. __confidenceProto (hasLastBroadcastedAt))
                    (.. confidence (setLastBroadcastedAt (Date. (.. __confidenceProto (getLastBroadcastedAt)))))
                )

                (condp = (.. __confidenceProto (getSource))
                    Protos.TransactionConfidence.Source/SOURCE_SELF        (.. confidence (setSource :ConfidenceSource'SELF))
                    Protos.TransactionConfidence.Source/SOURCE_NETWORK     (.. confidence (setSource :ConfidenceSource'NETWORK))
                    #_"Protos.TransactionConfidence.Source/SOURCE_UNKNOWN" (.. confidence (setSource :ConfidenceSource'UNKNOWN))
                )
            )
        )
        nil
    )

    ;;;
     ; Cheap test to see if input stream is a wallet.  This checks for a magic value at the beginning of the stream.
     ;
     ; @param is Input stream to test.
     ; @return true if input stream is a wallet.
     ;;
    #_public
    #_static
    (§ defn #_"boolean" WalletSerializer'isWallet [#_"InputStream" is]
        (try
            (let [#_"CodedInputStream" cis (CodedInputStream/newInstance is)
                  #_"int" field (WireFormat/getTagFieldNumber (.. cis (readTag)))]
                (if (= field 1) ;; network_identifier
                    (some? (NetworkParameters'fromID (.. cis (readString))))
                    false
                )
            )
            (catch IOException _
                false
            )
        )
    )
)

;;;
 ; Stores data about a transaction that is only relevant to the {@link Wallet} class.
 ;;
#_public
(§ class WalletTransaction
    #_public
    #_static
    #_enum
    (def PoolType'values
    #{
        :PoolType'UNSPENT ;; unspent in best chain
        :PoolType'SPENT ;; spent in best chain
        :PoolType'DEAD ;; double-spend in alt chain
        :PoolType'PENDING ;; a pending tx we would like to go into the best chain
    })
    #_private
    (§ field- #_"Transaction" :transaction)
    #_private
    (§ field- #_"PoolType" :pool)

    #_public
    (§ constructor WalletTransaction [#_"PoolType" pool, #_"Transaction" transaction]
        (§ assoc this :pool (ensure some? pool))
        (§ assoc this :transaction transaction)
        this
    )

    #_public
    (§ method #_"Transaction" getTransaction []
        (:transaction this)
    )

    #_public
    (§ method #_"PoolType" getPool []
        (:pool this)
    )
)

#_(ns org.bitcoinj.wallet.listeners
    (:import [java.util List]
    )
)

#_public
(§ interface KeyChainEventListener
    ;;;
     ; Called whenever a new key is added to the key chain, whether that be via an explicit addition or due to some
     ; other automatic derivation.  See the documentation for your {@link KeyChain} implementation for details on
     ; what can trigger this event.
     ;;
    (§ method #_"void" onKeysAdded [#_"List<ECKey>" keys])
)

;;;
 ; Implementors are called when the contents of the wallet changes, for instance due to receiving/sending money
 ; or a block chain re-organize.
 ;;
#_public
(§ interface WalletChangeEventListener
    ;;;
     ; Designed for GUI applications to refresh their transaction lists.  This callback is invoked in the following
     ; situations:
     ;
     ; <ol>
     ;     <li>A new block is received (and thus building transactions got more confidence).</li>
     ;     <li>A pending transaction is received.</li>
     ;     <li>A pending transaction changes confidence due to some non-new-block related event,
     ;     such as being announced by more peers or by  a double-spend conflict being observed.</li>
     ;     <li>A re-organize occurs. Call occurs only if the re-org modified any of our transactions.</li>
     ;     <li>A new spend is committed to the wallet.</li>
     ;     <li>The wallet is reset and all transactions removed.<li>
     ; </ol>
     ;
     ; When this is called you can refresh the UI contents from the wallet contents.  It's more efficient to use
     ; this rather than onTransactionConfidenceChanged() + onReorganize() because you only get one callback per block
     ; rather than one per transaction per block.  Note that this is <b>not</b> called when a key is added.
     ;;
    (§ method #_"void" onWalletChanged [#_"Wallet" wallet])
)

;;;
 ; Implementors are called when the contents of the wallet changes, for instance due to receiving/sending money
 ; or a block chain re-organize.
 ;;
#_public
(§ interface WalletCoinsReceivedEventListener
    ;;;
     ; This is called when a transaction is seen that sends coins <b>to</b> this wallet, either because it was
     ; broadcast across the network or because a block was received.  If a transaction is seen when it was broadcast,
     ; onCoinsReceived won't be called again when a block containing it is received.  If you want to know when such
     ; a transaction receives its first confirmation, register a {@link TransactionConfidence} event listener using
     ; the object retrieved via {@link Transaction#getConfidence()}.  It's safe to modify the
     ; wallet in this callback, for example, by spending the transaction just received.
     ;
     ; @param wallet The wallet object that received the coins.
     ; @param tx The transaction which sent us the coins.
     ; @param prevBalance Balance before the coins were received.
     ; @param newBalance This is the 'estimated' balance.
     ;;
    (§ method #_"void" onCoinsReceived [#_"Wallet" wallet, #_"Transaction" tx, #_"Coin" __prevBalance, #_"Coin" __newBalance])
)

;;;
 ; Implementors are called when the contents of the wallet changes, for instance due to receiving/sending money
 ; or a block chain re-organize.
 ;;
#_public
(§ interface WalletCoinsSentEventListener
    ;;;
     ; This is called when a transaction is seen that sends coins <b>from</b> this wallet, either because it
     ; was broadcast across the network or because a block was received.  This may at first glance seem useless,
     ; because in the common case you already know about such transactions because you created them with the
     ; Wallets createSend/sendCoins methods.  However when you have a wallet containing only keys, and you wish
     ; to replay the block chain to fill it with transactions, it's useful to find out when a transaction is
     ; discovered that sends coins from the wallet.
     ;
     ; It's safe to modify the wallet from inside this callback, but if you're replaying the block chain you should
     ; be careful to avoid such modifications.  Otherwise your changes may be overridden by new data from the chain.
     ;
     ; @param wallet The wallet object that this callback relates to (that sent the coins).
     ; @param tx The transaction that sent the coins to someone else.
     ; @param prevBalance The wallets balance before this transaction was seen.
     ; @param newBalance The wallets balance after this transaction was seen.  This is the 'estimated' balance.
     ;;
    (§ method #_"void" onCoinsSent [#_"Wallet" wallet, #_"Transaction" tx, #_"Coin" __prevBalance, #_"Coin" __newBalance])
)

;;;
 ; Implementors are called when the wallet is reorganized.
 ;;
#_public
(§ interface WalletReorganizeEventListener
    ;; TODO: Finish onReorganize to be more useful.
    ;;;
     ; This is called when a block is received that triggers a block chain re-organization.
     ;
     ; A re-organize means that the consensus (chain) of the network has diverged and now changed from
     ; what we believed it was previously.  Usually this won't matter because the new consensus will include
     ; all our old transactions assuming we are playing by the rules.  However it's theoretically possible
     ; for our balance to change in arbitrary ways, most likely, we could lose some money we thought we had.
     ;
     ; It is safe to use methods of wallet whilst inside this callback.
     ;;
    (§ method #_"void" onReorganize [#_"Wallet" wallet])
)
