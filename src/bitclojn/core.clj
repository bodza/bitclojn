(ns bitclojn.core)

(defmacro § [& _])
(defmacro ß [& _])

(defmacro def- [s i] `(def ~(vary-meta s assoc :private true) ~i))

(defmacro when' [y & w]
    (let [[_ & w] (if (= '=> (first w)) (rest w) (cons nil w))]
        `(if ~y (do ~@w) ~_)))
(defmacro let-when [x y & w]
    (let [[_ & w] (if (= '=> (first w)) (rest w) (cons nil w))]
        `(let [~@x] (if ~y (do ~@w) ~_))))

(defn -main [& args]
    )

#_(ns org.bitcoinj.core #_"AbstractBlockChain"
    (:import [java.util *]
             [java.util.concurrent *]
             [java.util.concurrent.locks *])
    (:import [com.google.common.base *]
             [com.google.common.collect *]
             [com.google.common.util.concurrent *]
             [org.slf4j *])
   (:require [org.bitcoinj.core.listeners *]
             [org.bitcoinj.store *]
             [org.bitcoinj.utils *]
             [org.bitcoinj.wallet Wallet]))

;;;
 ; <p>An AbstractBlockChain holds a series of {@link Block} objects, links them together, and knows how to verify that
 ; the chain follows the rules of the {@link NetworkParameters} for this chain.</p>
 ;
 ; <p>It can be connected to a {@link Wallet}, and also {@link TransactionReceivedInBlockListener}s that can receive
 ; transactions and notifications of re-organizations.</p>
 ;
 ; <p>An AbstractBlockChain implementation must be connected to a {@link BlockStore} implementation.  The chain object
 ; by itself doesn't store any data, that's delegated to the store.  Which store you use is a decision best made by
 ; reading the getting started guide, but briefly, fully validating block chains need fully validating stores.  In
 ; the lightweight SPV mode, a {@link org.bitcoinj.store.SPVBlockStore} is the right choice.</p>
 ;
 ; <p>This class implements an abstract class which makes it simple to create a BlockChain that does/doesn't do
 ; full verification.  It verifies headers and is implements most of what is required to implement SPV mode, but
 ; also provides callback hooks which can be used to do full verification.</p>
 ;
 ; <p>There are two subclasses of AbstractBlockChain that are useful: {@link BlockChain}, which is the simplest
 ; class and implements <i>simplified payment verification</i>.  This is a lightweight and efficient mode that
 ; does not verify the contents of blocks, just their headers.  A {@link FullPrunedBlockChain} paired with a
 ; {@link org.bitcoinj.store.H2FullPrunedBlockStore} implements full verification, which is equivalent to
 ; Bitcoin Core.  To learn more about the alternative security models, please consult the articles on the
 ; website.</p>
 ;
 ; <b>Theory</b>
 ;
 ; <p>The 'chain' is actually a tree although in normal operation it operates mostly as a list of {@link Block}s.
 ; When multiple new head blocks are found simultaneously, there are multiple stories of the economy competing to become
 ; the one true consensus.  This can happen naturally when two miners solve a block within a few seconds of each other,
 ; or it can happen when the chain is under attack.</p>
 ;
 ; <p>A reference to the head block of the best known chain is stored.  If you can reach the genesis block by repeatedly
 ; walking through the prevBlock pointers, then we say this is a full chain.  If you cannot reach the genesis block
 ; we say it is an orphan chain.  Orphan chains can occur when blocks are solved and received during the initial block
 ; chain download, or if we connect to a peer that doesn't send us blocks in order.</p>
 ;
 ; <p>A reorganize occurs when the blocks that make up the best known chain changes.  Note that simply adding a
 ; new block to the top of the best chain isn't as reorganize, but that a reorganize is always triggered by adding
 ; a new block that connects to some other (non best head) block.  By "best" we mean the chain representing the largest
 ; amount of work done.</p>
 ;
 ; <p>Every so often the block chain passes a difficulty transition point.  At that time, all the blocks in the last
 ; 2016 blocks are examined and a new difficulty target is calculated from them.</p>
 ;;
#_public
#_abstract
(§ class #_"AbstractBlockChain"
    #_private
    #_static
    (§ def- #_"Logger" (§ name log) (LoggerFactory/getLogger (§ klass #_"AbstractBlockChain")))

    #_protected
    (§ field #_"ReentrantLock" (§ name lock) (Threading/lock "blockchain"))

    ;;; Keeps a map of block hashes to StoredBlocks. ;;
    #_private
    (§ field- #_"BlockStore" (§ name blockStore))

    ;;;
     ; Tracks the top of the best known chain.
     ;
     ; Following this one down to the genesis block produces the story of the economy from the creation of Bitcoin
     ; until the present day.  The chain head can change if a new set of blocks is received that results in a chain of
     ; greater work than the one obtained by following this one down.  In that case a reorganize is triggered,
     ; potentially invalidating transactions in our wallet.
     ;;
    #_protected
    (§ field #_"StoredBlock" (§ name chainHead))

    ;; TODO: Scrap this and use a proper read/write for all of the block chain objects.
    ;; The chainHead field is read/written synchronized with this object rather than BlockChain.  However writing is
    ;; also guaranteed to happen whilst BlockChain is synchronized (see setChainHead).  The goal of this is to let
    ;; clients quickly access the chain head even whilst the block chain is downloading and thus the BlockChain is
    ;; locked most of the time.
    #_private
    (§ field- #_"Object" (§ name chainHeadLock) (§ new #_"Object"))

    #_protected
    (§ field #_"NetworkParameters" (§ name params))
    #_private
    (§ field- #_"CopyOnWriteArrayList<ListenerRegistration<NewBestBlockListener>>" (§ name newBestBlockListeners))
    #_private
    (§ field- #_"CopyOnWriteArrayList<ListenerRegistration<ReorganizeListener>>" (§ name reorganizeListeners))
    #_private
    (§ field- #_"CopyOnWriteArrayList<ListenerRegistration<TransactionReceivedInBlockListener>>" (§ name transactionReceivedListeners))

    ;; Holds a block header and, optionally, a list of tx hashes or block's transactions.
    (§ class #_"OrphanBlock"
        (§ field #_"Block" (§ name block))
        (§ field #_"List<Sha256Hash>" (§ name filteredTxHashes))
        (§ field #_"Map<Sha256Hash, Transaction>" (§ name filteredTxn))

        (§ constructor #_"OrphanBlock" [#_"Block" (§ name block), #_nilable #_"List<Sha256Hash>" (§ name filteredTxHashes), #_nilable #_"Map<Sha256Hash, Transaction>" (§ name filteredTxn)])
        (§ block
            (§ var #_"boolean" (§ name filtered) (§ expr filteredTxHashes != nil && filteredTxn != nil))
            (Preconditions/checkArgument (§ expr (§ expr (.. block transactions) == nil && filtered) || (§ expr (.. block transactions) != nil && (§ not filtered))))
            (§ ass (§ name (.. this block)) block)
            (§ ass (§ name (.. this filteredTxHashes)) filteredTxHashes)
            (§ ass (§ name (.. this filteredTxn)) filteredTxn)
            this
        )
    )
    ;; Holds blocks that we have received but can't plug into the chain yet, e.g. because they were created whilst we
    ;; were downloading the block chain.
    #_private
    (§ field- #_"LinkedHashMap<Sha256Hash, OrphanBlock>" (§ name orphanBlocks) (§ new #_"LinkedHashMap<>"))

    ;;; False positive estimation uses a double exponential moving average. ;;
    #_public
    #_static
    (§ def #_"double" (§ name FP_ESTIMATOR_ALPHA) 0.0001)
    ;;; False positive estimation uses a double exponential moving average. ;;
    #_public
    #_static
    (§ def #_"double" (§ name FP_ESTIMATOR_BETA) 0.01)

    #_private
    (§ field- #_"double" (§ name falsePositiveRate))
    #_private
    (§ field- #_"double" (§ name falsePositiveTrend))
    #_private
    (§ field- #_"double" (§ name previousFalsePositiveRate))

    #_private
    (§ field- #_"VersionTally" (§ name versionTally))

    ;;; See {@link #AbstractBlockChain(Context, List, BlockStore)} ;;
    #_public
    (§ constructor #_"AbstractBlockChain" [#_"NetworkParameters" (§ name params), #_"List<? extends Wallet>" (§ name transactionReceivedListeners), #_"BlockStore" (§ name blockStore)])
        (§ throws #_"BlockStoreException")
    (§ block
        (§ this (Context/getOrCreate params), transactionReceivedListeners, blockStore)
        this
    )

    ;;;
     ; Constructs a BlockChain connected to the given list of listeners (e.g. wallets) and a store.
     ;;
    #_public
    (§ constructor #_"AbstractBlockChain" [#_"Context" (§ name context), #_"List<? extends Wallet>" (§ name wallets), #_"BlockStore" (§ name blockStore)])
        (§ throws #_"BlockStoreException")
    (§ block
        (§ ass (§ name (.. this blockStore)) blockStore)
        (§ ass (§ name chainHead) (.. blockStore (getChainHead)))
        (.. log (info "chain head is at height {}:\n{}", (.. chainHead (getHeight)), (.. chainHead (getHeader))))
        (§ ass (§ name (.. this params)) (.. context (getParams)))

        (§ ass (§ name (.. this newBestBlockListeners)) (§ new #_"CopyOnWriteArrayList<>"))
        (§ ass (§ name (.. this reorganizeListeners)) (§ new #_"CopyOnWriteArrayList<>"))
        (§ ass (§ name (.. this transactionReceivedListeners)) (§ new #_"CopyOnWriteArrayList<>"))
        (§ for (§ var #_"NewBestBlockListener" (§ name l)) :for wallets)
        (§ block
            (addNewBestBlockListener Threading/SAME_THREAD, l)
        )
        (§ for (§ var #_"ReorganizeListener" (§ name l)) :for wallets)
        (§ block
            (addReorganizeListener Threading/SAME_THREAD, l)
        )
        (§ for (§ var #_"TransactionReceivedInBlockListener" (§ name l)) :for wallets)
        (§ block
            (addTransactionReceivedListener Threading/SAME_THREAD, l)
        )

        (§ ass (§ name (.. this versionTally)) (§ new #_"VersionTally" (.. context (getParams))))
        (.. this versionTally (initialize blockStore, chainHead))
        this
    )

    ;;;
     ; Add a wallet to the BlockChain.  Note that the wallet will be unaffected by any blocks received while it
     ; was not part of this BlockChain.  This method is useful if the wallet has just been created, and its keys
     ; have never been in use, or if the wallet has been loaded along with the BlockChain.  Note that adding
     ; multiple wallets is not well tested!
     ;;
    #_public
    (§ method #_"void" (§ fn addWallet) [#_"Wallet" (§ name wallet)])
    (§ block
        (addNewBestBlockListener Threading/SAME_THREAD, wallet)
        (addReorganizeListener Threading/SAME_THREAD, wallet)
        (addTransactionReceivedListener Threading/SAME_THREAD, wallet)

        (§ var #_"int" (§ name walletHeight) (.. wallet (getLastBlockSeenHeight)))
        (§ var #_"int" (§ name chainHeight) (getBestChainHeight))
        (§ if (§ expr walletHeight != chainHeight))
        (§ block
            (.. log (warn "Wallet/chain height mismatch: {} vs {}", walletHeight, chainHeight))
            (.. log (warn "Hashes: {} vs {}", (.. wallet (getLastBlockSeenHash)), (.. (getChainHead) (getHeader) (getHash))))

            ;; This special case happens when the VM crashes because of a transaction received.  It causes the updated
            ;; block store to persist, but not the wallet.  In order to fix the issue, we roll back the block store to
            ;; the wallet height to make it look like as if the block has never been received.
            (§ if (§ expr 0 < walletHeight && walletHeight < chainHeight))
            (§ block
                (§ try )
                (§ block
                    (rollbackBlockStore walletHeight)
                    (.. log (info "Rolled back block store to height {}.", walletHeight))
                )
                (§ catch #_"BlockStoreException" (§ name _))
                (§ block
                    (.. log (warn "Rollback of block store failed, continuing with mismatched heights. This can happen due to a replay."))
                )
            )
        )
        nil
    )

    ;;; Removes a wallet from the chain. ;;
    #_public
    (§ method #_"void" (§ fn removeWallet) [#_"Wallet" (§ name wallet)])
    (§ block
        (removeNewBestBlockListener wallet)
        (removeReorganizeListener wallet)
        (removeTransactionReceivedListener wallet)
        nil
    )

    ;;; Replaced with more specific listener methods: use them instead. ;;
    #_deprecated
    #_suppress(§ opt "deprecation")
    #_public
    (§ method #_"void" (§ fn addListener) [#_"BlockChainListener" (§ name listener)])
    (§ block
        (addListener listener, Threading/USER_THREAD)
        nil
    )

    ;;; Replaced with more specific listener methods: use them instead. ;;
    #_deprecated
    #_public
    (§ method #_"void" (§ fn addListener) [#_"BlockChainListener" (§ name listener), #_"Executor" (§ name executor)])
    (§ block
        (addReorganizeListener executor, listener)
        (addNewBestBlockListener executor, listener)
        (addTransactionReceivedListener executor, listener)
        nil
    )

    #_deprecated
    #_public
    (§ method #_"void" (§ fn removeListener) [#_"BlockChainListener" (§ name listener)])
    (§ block
        (removeReorganizeListener listener)
        (removeNewBestBlockListener listener)
        (removeTransactionReceivedListener listener)
        nil
    )

    ;;;
     ; Adds a {@link NewBestBlockListener} listener to the chain.
     ;;
    #_public
    (§ method #_"void" (§ fn addNewBestBlockListener) [#_"NewBestBlockListener" (§ name listener)])
    (§ block
        (addNewBestBlockListener Threading/USER_THREAD, listener)
        nil
    )

    ;;;
     ; Adds a {@link NewBestBlockListener} listener to the chain.
     ;;
    #_public
    (§ method #_"void" (§ fn addNewBestBlockListener) [#_"Executor" (§ name executor), #_"NewBestBlockListener" (§ name listener)])
    (§ block
        (.. newBestBlockListeners (add (§ new #_"ListenerRegistration<>" listener, executor)))
        nil
    )

    ;;;
     ; Adds a generic {@link ReorganizeListener} listener to the chain.
     ;;
    #_public
    (§ method #_"void" (§ fn addReorganizeListener) [#_"ReorganizeListener" (§ name listener)])
    (§ block
        (addReorganizeListener Threading/USER_THREAD, listener)
        nil
    )

    ;;;
     ; Adds a generic {@link ReorganizeListener} listener to the chain.
     ;;
    #_public
    (§ method #_"void" (§ fn addReorganizeListener) [#_"Executor" (§ name executor), #_"ReorganizeListener" (§ name listener)])
    (§ block
        (.. reorganizeListeners (add (§ new #_"ListenerRegistration<>" listener, executor)))
        nil
    )

    ;;;
     ; Adds a generic {@link TransactionReceivedInBlockListener} listener to the chain.
     ;;
    #_public
    (§ method #_"void" (§ fn addTransactionReceivedListener) [#_"TransactionReceivedInBlockListener" (§ name listener)])
    (§ block
        (addTransactionReceivedListener Threading/USER_THREAD, listener)
        nil
    )

    ;;;
     ; Adds a generic {@link TransactionReceivedInBlockListener} listener to the chain.
     ;;
    #_public
    (§ method #_"void" (§ fn addTransactionReceivedListener) [#_"Executor" (§ name executor), #_"TransactionReceivedInBlockListener" (§ name listener)])
    (§ block
        (.. transactionReceivedListeners (add (§ new #_"ListenerRegistration<>" listener, executor)))
        nil
    )

    ;;;
     ; Removes the given {@link NewBestBlockListener} from the chain.
     ;;
    #_public
    (§ method #_"void" (§ fn removeNewBestBlockListener) [#_"NewBestBlockListener" (§ name listener)])
    (§ block
        (ListenerRegistration/removeFromList listener, newBestBlockListeners)
        nil
    )

    ;;;
     ; Removes the given {@link ReorganizeListener} from the chain.
     ;;
    #_public
    (§ method #_"void" (§ fn removeReorganizeListener) [#_"ReorganizeListener" (§ name listener)])
    (§ block
        (ListenerRegistration/removeFromList listener, reorganizeListeners)
        nil
    )

    ;;;
     ; Removes the given {@link TransactionReceivedInBlockListener} from the chain.
     ;;
    #_public
    (§ method #_"void" (§ fn removeTransactionReceivedListener) [#_"TransactionReceivedInBlockListener" (§ name listener)])
    (§ block
        (ListenerRegistration/removeFromList listener, transactionReceivedListeners)
        nil
    )

    ;;;
     ; Returns the {@link BlockStore} the chain was constructed with.  You can use this to iterate over the chain.
     ;;
    #_public
    (§ method #_"BlockStore" (§ fn getBlockStore) [])
    (§ block
        blockStore
    )

    ;;;
     ; Adds/updates the given {@link Block} with the block store.
     ; This version is used when the transactions have not been verified.
     ; @param storedPrev The {@link StoredBlock} which immediately precedes block.
     ; @param block The {@link Block} to add/update.
     ; @return the newly created {@link StoredBlock}
     ;;
    #_protected
    #_abstract
    (§ method #_"StoredBlock" (§ fn addToBlockStore) [#_"StoredBlock" (§ name storedPrev), #_"Block" (§ name block)])
        (§ throws #_"BlockStoreException", #_"VerificationException")

    ;;;
     ; Adds/updates the given {@link StoredBlock} with the block store.
     ; This version is used when the transactions have already been verified to properly spend txOutputChanges.
     ; @param storedPrev The {@link StoredBlock} which immediately precedes block.
     ; @param header The {@link StoredBlock} to add/update.
     ; @param txOutputChanges The total sum of all changes made by this block to the set of open transaction outputs
     ;                        (from a call to connectTransactions), if in fully verifying mode (null otherwise).
     ; @return the newly created {@link StoredBlock}
     ;;
    #_protected
    #_abstract
    (§ method #_"StoredBlock" (§ fn addToBlockStore) [#_"StoredBlock" (§ name storedPrev), #_"Block" (§ name header), #_nilable #_"TransactionOutputChanges" (§ name txOutputChanges)])
        (§ throws #_"BlockStoreException", #_"VerificationException")

    ;;;
     ; Rollback the block store to a given height.  This is currently only supported by {@link BlockChain} instances.
     ;
     ; @throws BlockStoreException
     ;             if the operation fails or is unsupported.
     ;;
    #_protected
    #_abstract
    (§ method #_"void" (§ fn rollbackBlockStore) [#_"int" (§ name height)])
        (§ throws #_"BlockStoreException")

    ;;;
     ; Called before setting chain head in memory.
     ; Should write the new head to block store and then commit any database transactions
     ; that were started by disconnectTransactions/connectTransactions.
     ;;
    #_protected
    #_abstract
    (§ method #_"void" (§ fn doSetChainHead) [#_"StoredBlock" (§ name chainHead)])
        (§ throws #_"BlockStoreException")

    ;;;
     ; Called if we (possibly) previously called disconnectTransaction/connectTransactions,
     ; but will not be calling preSetChainHead as a block failed verification.
     ; Can be used to abort database transactions that were started by
     ; disconnectTransactions/connectTransactions.
     ;;
    #_protected
    #_abstract
    (§ method #_"void" (§ fn notSettingChainHead) [])
        (§ throws #_"BlockStoreException")

    ;;;
     ; For a standard BlockChain, this should return blockStore.get(hash),
     ; for a FullPrunedBlockChain blockStore.getOnceUndoableStoredBlock(hash)
     ;;
    #_protected
    #_abstract
    (§ method #_"StoredBlock" (§ fn getStoredBlockInCurrentScope) [#_"Sha256Hash" (§ name hash)])
        (§ throws #_"BlockStoreException")

    ;;;
     ; Processes a received block and tries to add it to the chain.  If there's something wrong with the block an
     ; exception is thrown.  If the block is OK but cannot be connected to the chain at this time, returns false.
     ; If the block can be connected to the chain, returns true.
     ; Accessing block's transactions in another thread while this method runs may result in undefined behavior.
     ;;
    #_public
    (§ method #_"boolean" (§ fn add) [#_"Block" (§ name block)])
        (§ throws #_"VerificationException", #_"PrunedException")
    (§ block
        (§ try )
        (§ block
            (§ return (add block, true, nil, nil))
        )
        (§ catch #_"BlockStoreException" (§ name e))
        (§ block
            ;; TODO: Figure out a better way to propagate this exception to the user.
            (§ throw (§ new #_"RuntimeException" e))
        )
        (§ catch #_"VerificationException" (§ name e))
        (§ block
            (§ try )
            (§ block
                (notSettingChainHead)
            )
            (§ catch #_"BlockStoreException" (§ name e1))
            (§ block
                (§ throw (§ new #_"RuntimeException" e1))
            )
            (§ throw (§ new #_"VerificationException" (§ expr "Could not verify block:\n" + block), e))
        )
    )

    ;;;
     ; Processes a received block and tries to add it to the chain.  If there's something wrong with the block an
     ; exception is thrown.  If the block is OK but cannot be connected to the chain at this time, returns false.
     ; If the block can be connected to the chain, returns true.
     ;;
    #_public
    (§ method #_"boolean" (§ fn add) [#_"FilteredBlock" (§ name block)])
        (§ throws #_"VerificationException", #_"PrunedException")
    (§ block
        (§ try )
        (§ block
            ;; The block has a list of hashes of transactions that matched the Bloom filter, and a list of associated
            ;; Transaction objects.  There may be fewer Transaction objects than hashes, this is expected.  It can happen
            ;; in the case where we were already around to witness the initial broadcast, so we downloaded the
            ;; transaction and sent it to the wallet before this point (the wallet may have thrown it away if it was
            ;; a false positive, as expected in any Bloom filtering scheme).  The filteredTxn list here will usually
            ;; only be full of data when we are catching up to the head of the chain and thus haven't witnessed any
            ;; of the transactions.
            (§ return (add (.. block (getBlockHeader)), true, (.. block (getTransactionHashes)), (.. block (getAssociatedTransactions))))
        )
        (§ catch #_"BlockStoreException" (§ name e))
        (§ block
            ;; TODO: Figure out a better way to propagate this exception to the user.
            (§ throw (§ new #_"RuntimeException" e))
        )
        (§ catch #_"VerificationException" (§ name e))
        (§ block
            (§ try )
            (§ block
                (notSettingChainHead)
            )
            (§ catch #_"BlockStoreException" (§ name e1))
            (§ block
                (§ throw (§ new #_"RuntimeException" e1))
            )
            (§ throw (§ new #_"VerificationException" (§ expr "Could not verify block " + (.. block (getHash)) + "\n" + block), e))
        )
    )

    ;;;
     ; Whether or not we are maintaining a set of unspent outputs and are verifying all transactions.
     ; Also indicates that all calls to add() should provide a block containing transactions
     ;;
    #_protected
    #_abstract
    (§ method #_"boolean" (§ fn shouldVerifyTransactions) [])

    ;;;
     ; Connect each transaction in block.transactions, verifying them as we go and removing spent outputs
     ; If an error is encountered in a transaction, no changes should be made to the underlying BlockStore
     ; and a VerificationException should be thrown.
     ; Only called if shouldVerifyTransactions().
     ; @throws VerificationException if an attempt was made to spend an already-spent output, or if a transaction incorrectly solved an output script.
     ; @throws BlockStoreException if the block store had an underlying error.
     ; @return The full set of all changes made to the set of open transaction outputs.
     ;;
    #_protected
    #_abstract
    (§ method #_"TransactionOutputChanges" (§ fn connectTransactions) [#_"int" (§ name height), #_"Block" (§ name block)])
        (§ throws #_"VerificationException", #_"BlockStoreException")

    ;;;
     ; Load newBlock from BlockStore and connect its transactions, returning changes to the set of unspent transactions.
     ; If an error is encountered in a transaction, no changes should be made to the underlying BlockStore.
     ; Only called if shouldVerifyTransactions().
     ; @throws PrunedException if newBlock does not exist as a {@link StoredUndoableBlock} in the block store.
     ; @throws VerificationException if an attempt was made to spend an already-spent output, or if a transaction incorrectly solved an output script.
     ; @throws BlockStoreException if the block store had an underlying error or newBlock does not exist in the block store at all.
     ; @return The full set of all changes made to the set of open transaction outputs.
     ;;
    #_protected
    #_abstract
    (§ method #_"TransactionOutputChanges" (§ fn connectTransactions) [#_"StoredBlock" (§ name newBlock)])
        (§ throws #_"VerificationException", #_"BlockStoreException", #_"PrunedException")

    ;; filteredTxHashList contains all transactions, filteredTxn just a subset
    #_private
    (§ method- #_"boolean" (§ fn add) [#_"Block" (§ name block), #_"boolean" (§ name tryConnecting), #_nilable #_"List<Sha256Hash>" (§ name filteredTxHashList), #_nilable #_"Map<Sha256Hash, Transaction>" (§ name filteredTxn)])
        (§ throws #_"BlockStoreException", #_"VerificationException", #_"PrunedException")
    (§ block
        ;; TODO: Use read/write locks to ensure that during chain download properties are still low latency.
        (.. lock (lock))
        (§ try )
        (§ block
            ;; Quick check for duplicates to avoid an expensive check further down (in findSplit).
            ;; This can happen a lot when connecting orphan transactions due to the dumb brute force algorithm we use.
            (§ if (.. block (equals (.. (getChainHead) (getHeader)))))
            (§ block
                (§ return true)
            )
            (§ if (§ expr tryConnecting && (.. orphanBlocks (containsKey (.. block (getHash))))))
            (§ block
                (§ return false)
            )

            ;; If we want to verify transactions (i.e. we are running with full blocks), verify that block has transactions.
            (§ if (§ expr (shouldVerifyTransactions) && (.. block transactions) == nil))
            (§ block
                (§ throw (§ new #_"VerificationException" "Got a block header while running in full-block mode"))
            )

            ;; Check for already-seen block, but only for full pruned mode, where the DB is
            ;; more likely able to handle these queries quickly.
            (§ if (§ expr (shouldVerifyTransactions) && (.. blockStore (get (.. block (getHash)))) != nil))
            (§ block
                (§ return true)
            )

            (§ var #_"StoredBlock" (§ name storedPrev))
            (§ var #_"int" (§ name height))
            (§ var #_"EnumSet<Block.VerifyFlag>" (§ name flags))

            ;; Prove the block is internally valid: hash is lower than target, etc.  This only checks the block contents
            ;; if there is a tx sending or receiving coins using an address in one of our wallets.  And those transactions
            ;; are only lightly verified: presence in a valid connecting block is taken as proof of validity.  See the
            ;; article here for more details: https://bitcoinj.github.io/security-model
            (§ try )
            (§ block
                (.. block (verifyHeader))
                (§ ass (§ name storedPrev) (getStoredBlockInCurrentScope (.. block (getPrevBlockHash))))
                (§ if (some? storedPrev))
                (§ block
                    (§ ass (§ name height) (+ (.. storedPrev (getHeight)) 1))
                )
                (§ else )
                (§ block
                    (§ ass (§ name height) Block/BLOCK_HEIGHT_UNKNOWN)
                )
                (§ ass (§ name flags) (.. params (getBlockVerificationFlags block, versionTally, height)))
                (§ if (shouldVerifyTransactions))
                (§ block
                    (.. block (verifyTransactions height, flags))
                )
            )
            (§ catch #_"VerificationException" (§ name e))
            (§ block
                (.. log (error "Failed to verify block: ", e))
                (.. log (error (.. block (getHashAsString))))
                (§ throw e)
            )

            ;; Try linking it to a place in the currently known blocks.

            (§ if (nil? storedPrev))
            (§ block
                ;; We can't find the previous block.  Probably we are still in the process of downloading the chain and
                ;; a block was solved whilst we were doing it.  We put it to one side and try to connect it later when we
                ;; have more blocks.
                (Preconditions/checkState tryConnecting, "bug in tryConnectingOrphans")
                (.. log (warn "Block does not connect: {} prev {}", (.. block (getHashAsString)), (.. block (getPrevBlockHash))))
                (.. orphanBlocks (put (.. block (getHash)), (§ new #_"OrphanBlock" block, filteredTxHashList, filteredTxn)))
                (§ return false)
            )

            (Preconditions/checkState (.. lock (isHeldByCurrentThread)))
            ;; It connects to somewhere on the chain.  Not necessarily the top of the best known chain.
            (.. params (checkDifficultyTransitions storedPrev, block, blockStore))
            (connectBlock block, storedPrev, (shouldVerifyTransactions), filteredTxHashList, filteredTxn)

            (§ if tryConnecting)
            (§ block
                (tryConnectingOrphans)
            )

            (§ return true)
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    ;;;
     ; Returns the hashes of the currently stored orphan blocks and then deletes them from this objects storage.
     ; Used by Peer when a filter exhaustion event has occurred and thus any orphan blocks that have been downloaded
     ; might be inaccurate/incomplete.
     ;;
    #_public
    (§ method #_"Set<Sha256Hash>" (§ fn drainOrphanBlocks) [])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ var #_"Set<Sha256Hash>" (§ name hashes) (§ new #_"HashSet<>" (.. orphanBlocks (keySet))))
            (.. orphanBlocks (clear))
            (§ return hashes)
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    ;; expensiveChecks enables checks that require looking at blocks further back in the chain
    ;; than the previous one when connecting (e.g. median timestamp check)
    ;; It could be exposed, but for now we just set it to shouldVerifyTransactions()
    #_private
    (§ method- #_"void" (§ fn connectBlock) [#_"Block" (§ name block), #_"StoredBlock" (§ name storedPrev), #_"boolean" (§ name expensiveChecks), #_nilable #_"List<Sha256Hash>" (§ name filteredTxHashList), #_nilable #_"Map<Sha256Hash, Transaction>" (§ name filteredTxn)])
        (§ throws #_"BlockStoreException", #_"VerificationException", #_"PrunedException")
    (§ block
        (Preconditions/checkState (.. lock (isHeldByCurrentThread)))
        (§ var #_"boolean" (§ name filtered) (§ expr filteredTxHashList != nil && filteredTxn != nil))
        ;; Check that we aren't connecting a block that fails a checkpoint check.
        (§ if (§ not (.. params (passesCheckpoint (§ expr (.. storedPrev (getHeight)) + 1), (.. block (getHash))))))
        (§ block
            (§ throw (§ new #_"VerificationException" (§ expr "Block failed checkpoint lockin at " + (+ (.. storedPrev (getHeight)) 1))))
        )
        (§ if (shouldVerifyTransactions))
        (§ block
            (Preconditions/checkNotNull (.. block transactions))
            (§ for (§ var #_"Transaction" (§ name tx)) :for (.. block transactions))
            (§ block
                (§ if (§ not (.. tx (isFinal (§ expr (.. storedPrev (getHeight)) + 1), (.. block (getTimeSeconds))))))
                (§ block
                    (§ throw (§ new #_"VerificationException" "Block contains non-final transaction"))
                )
            )
        )

        (§ var #_"StoredBlock" (§ name head) (getChainHead))
        (§ if (.. storedPrev (equals head)))
        (§ block
            (§ if (§ expr filtered && 0 < (.. filteredTxn (size))))
            (§ block
                (.. log (debug "Block {} connects to top of best chain with {} transaction(s) of which we were sent {}", (.. block (getHashAsString)), (.. filteredTxHashList (size)), (.. filteredTxn (size))))
                (§ for (§ var #_"Sha256Hash" (§ name hash)) :for filteredTxHashList)
                (§ block
                    (.. log (debug "  matched tx {}", hash))
                )
            )
            (§ if (§ expr expensiveChecks && (.. block (getTimeSeconds)) <= (getMedianTimestampOfRecentBlocks head, blockStore)))
            (§ block
                (§ throw (§ new #_"VerificationException" "Block's timestamp is too early"))
            )

            ;; BIP 66 & 65: Enforce block version 3/4 once they are a supermajority of blocks.
            ;; NOTE: This requires 1,000 blocks since the last checkpoint (on main net, less on test) in order to be applied.
            ;; It is also limited to stopping addition of new v2/3 blocks to the tip of the chain.
            (§ if (§ expr (.. block (getVersion)) == Block/BLOCK_VERSION_BIP34 || (.. block (getVersion)) == Block/BLOCK_VERSION_BIP66))
            (§ block
                (§ var #_"Integer" (§ name count) (.. versionTally (getCountAtOrAbove (+ (.. block (getVersion)) 1))))
                (§ if (§ expr count != nil && (.. params (getMajorityRejectBlockOutdated)) <= count))
                (§ block
                    (§ throw (§ new #_"VerificationException.BlockVersionOutOfDate" (.. block (getVersion))))
                )
            )

            ;; This block connects to the best known block, it is a normal continuation of the system.
            (§ var #_"TransactionOutputChanges" (§ name txOutChanges) nil)
            (§ if (shouldVerifyTransactions))
            (§ block
                (§ ass (§ name txOutChanges) (connectTransactions (§ expr (.. storedPrev (getHeight)) + 1), block))
            )
            (§ var #_"StoredBlock" (§ name newStoredBlock) (addToBlockStore storedPrev, (if (nil? (.. block transactions)) block (.. block (cloneAsHeader))), txOutChanges))
            (.. versionTally (add (.. block (getVersion))))
            (setChainHead newStoredBlock)
            (.. log (debug "Chain is now {} blocks high, running listeners", (.. newStoredBlock (getHeight))))
            (informListenersForNewBlock block, NewBlockType/BEST_CHAIN, filteredTxHashList, filteredTxn, newStoredBlock)
        )
        (§ else )
        (§ block
            ;; This block connects to somewhere other than the top of the best known chain.  We treat these differently.
            ;;
            ;; Note that we send the transactions to the wallet FIRST, even if we're about to re-organize this block
            ;; to become the new best chain head.  This simplifies handling of the re-org in the Wallet class.
            (§ var #_"StoredBlock" (§ name newBlock) (.. storedPrev (build block)))
            (§ var #_"boolean" (§ name haveNewBestChain) (.. newBlock (moreWorkThan head)))
            (§ if haveNewBestChain)
            (§ block
                (.. log (info "Block is causing a re-organize"))
            )
            (§ else )
            (§ block
                (§ var #_"StoredBlock" (§ name splitPoint) (findSplit newBlock, head, blockStore))
                (§ if (§ expr splitPoint != nil && (.. splitPoint (equals newBlock))))
                (§ block
                    ;; newStoredBlock is a part of the same chain, there's no fork.  This happens when we receive a block
                    ;; that we already saw and linked into the chain previously, which isn't the chain head.
                    ;; Re-processing it is confusing for the wallet so just skip.
                    (.. log (warn "Saw duplicated block in main chain at height {}: {}", (.. newBlock (getHeight)), (.. newBlock (getHeader) (getHash))))
                    (§ return nil)
                )

                (§ if (nil? splitPoint))
                (§ block
                    ;; This should absolutely never happen.
                    ;; (lets not write the full block to disk to keep any bugs which allow this to happen from writing unreasonable amounts of data to disk)
                    (§ throw (§ new #_"VerificationException" "Block forks the chain but splitPoint is nil"))
                )
                (§ else )
                (§ block
                    ;; We aren't actually spending any transactions (yet) because we are on a fork.
                    (addToBlockStore storedPrev, block)
                    (§ var #_"int" (§ name splitPointHeight) (.. splitPoint (getHeight)))
                    (§ var #_"String" (§ name splitPointHash) (.. splitPoint (getHeader) (getHashAsString)))
                    (.. log (info "Block forks the chain at height {}/block {}, but it did not cause a reorganize:\n{}", splitPointHeight, splitPointHash, (.. newBlock (getHeader) (getHashAsString))))
                )
            )

            ;; We may not have any transactions if we received only a header, which can happen during fast catchup.
            ;; If we do, send them to the wallet but state that they are on a side chain so it knows not to try and
            ;; spend them until they become activated.
            (§ if (§ expr (.. block transactions) != nil || filtered))
            (§ block
                (informListenersForNewBlock block, NewBlockType/SIDE_CHAIN, filteredTxHashList, filteredTxn, newBlock)
            )

            (§ if haveNewBestChain)
            (§ block
                (handleNewBestChain storedPrev, newBlock, block, expensiveChecks)
            )
        )
        nil
    )

    #_private
    (§ method- #_"void" (§ fn informListenersForNewBlock) [#_"Block" (§ name block), #_"NewBlockType" (§ name newBlockType), #_nilable #_"List<Sha256Hash>" (§ name filteredTxHashList), #_nilable #_"Map<Sha256Hash, Transaction>" (§ name filteredTxn), #_"StoredBlock" (§ name newStoredBlock)])
        (§ throws #_"VerificationException")
    (§ block
        ;; Notify the listeners of the new block, so the depth and workDone of stored transactions can be updated
        ;; (in the case of the listener being a wallet).  Wallets need to know how deep each transaction is, so
        ;; coinbases aren't used before maturity.
        (§ var #_"boolean" (§ name first) true)
        (§ var #_"Set<Sha256Hash>" (§ name falsePositives) (Sets/newHashSet))
        (§ if (some? filteredTxHashList))
        (§ block
            (.. falsePositives (addAll filteredTxHashList))
        )

        (§ for (§ var ListenerRegistration<TransactionReceivedInBlockListener> registration) :for transactionReceivedListeners)
        (§ block
            (§ if (== (.. registration executor) Threading/SAME_THREAD))
            (§ block
                (informListenerForNewTransactions block, newBlockType, filteredTxHashList, filteredTxn, newStoredBlock, first, (.. registration listener), falsePositives)
            )
            (§ else )
            (§ block
                ;; Listener wants to be run on some other thread, so marshal it across here.
                (§ var #_"boolean" (§ name notFirst) (§ not first))
                (.. registration executor (execute (§ new #_"Runnable")
                (§ anon
                    #_override
                    #_public
                    (§ method #_"void" (§ fn run) [])
                    (§ block
                        (§ try )
                        (§ block
                            ;; We can't do false-positive handling when executing on another thread.
                            (§ var #_"Set<Sha256Hash>" (§ name ignoredFalsePositives) (Sets/newHashSet))
                            (informListenerForNewTransactions block, newBlockType, filteredTxHashList, filteredTxn, newStoredBlock, notFirst, (.. registration listener), ignoredFalsePositives)
                        )
                        (§ catch #_"VerificationException" (§ name e))
                        (§ block
                            (.. log (error "Block chain listener threw exception: ", e))
                            ;; Don't attempt to relay this back to the original peer thread if this was an async listener invocation.
                            ;; TODO: Make exception reporting a global feature and use it here.
                        )
                        nil
                    )
                )))
            )
            (§ ass (§ name first) false)
        )

        (§ for (§ var ListenerRegistration<NewBestBlockListener> registration) :for newBestBlockListeners)
        (§ block
            (§ if (== (.. registration executor) Threading/SAME_THREAD))
            (§ block
                (§ if (§ expr newBlockType == NewBlockType/BEST_CHAIN))
                (§ block
                    (.. registration listener (notifyNewBestBlock newStoredBlock))
                )
            )
            (§ else )
            (§ block
                ;; Listener wants to be run on some other thread, so marshal it across here.
                (.. registration executor (execute (§ new #_"Runnable")
                (§ anon
                    #_override
                    #_public
                    (§ method #_"void" (§ fn run) [])
                    (§ block
                        (§ try )
                        (§ block
                            (§ if (§ expr newBlockType == NewBlockType/BEST_CHAIN))
                            (§ block
                                (.. registration listener (notifyNewBestBlock newStoredBlock))
                            )
                        )
                        (§ catch #_"VerificationException" (§ name e))
                        (§ block
                            (.. log (error "Block chain listener threw exception: ", e))
                            ;; Don't attempt to relay this back to the original peer thread if this was an async listener invocation.
                            ;; TODO: Make exception reporting a global feature and use it here.
                        )
                        nil
                    )
                )))
            )
            (§ ass (§ name first) false)
        )

        (trackFalsePositives (.. falsePositives (size)))
        nil
    )

    #_private
    #_static
    (§ defn- #_"void" (§ fn informListenerForNewTransactions) [#_"Block" (§ name block), #_"NewBlockType" (§ name newBlockType), #_nilable #_"List<Sha256Hash>" (§ name filteredTxHashList), #_nilable #_"Map<Sha256Hash, Transaction>" (§ name filteredTxn), #_"StoredBlock" (§ name newStoredBlock), #_"boolean" (§ name first), #_"TransactionReceivedInBlockListener" (§ name listener), #_"Set<Sha256Hash>" (§ name falsePositives)])
        (§ throws #_"VerificationException")
    (§ block
        (§ if (!= (.. block transactions) nil))
        (§ block
            ;; If this is not the first wallet, ask for the transactions to be duplicated before being given
            ;; to the wallet when relevant.  This ensures that if we have two connected wallets and a tx that
            ;; is relevant to both of them, they don't end up accidentally sharing the same object (which can
            ;; result in temporary in-memory corruption during re-orgs).  See bug 257.  We only duplicate in
            ;; the case of multiple wallets to avoid an unnecessary efficiency hit in the common case.
            (sendTransactionsToListener newStoredBlock, newBlockType, listener, 0, (.. block transactions), (§ not first), falsePositives)
        )
        (§ elseif (some? filteredTxHashList))
        (§ block
            (Preconditions/checkNotNull filteredTxn)
            ;; We must send transactions to listeners in the order they appeared in the block - thus we iterate over the
            ;; set of hashes and call sendTransactionsToListener with individual txn when they have not already been
            ;; seen in loose broadcasts - otherwise notifyTransactionIsInBlock on the hash.
            (§ var #_"int" (§ name relativityOffset) 0)
            (§ for (§ var #_"Sha256Hash" (§ name hash)) :for filteredTxHashList)
            (§ block
                (§ var #_"Transaction" (§ name tx) (.. filteredTxn (get hash)))
                (§ if (some? tx))
                (§ block
                    (sendTransactionsToListener newStoredBlock, newBlockType, listener, relativityOffset, (Collections/singletonList tx), (§ not first), falsePositives)
                )
                (§ elseif (.. listener (notifyTransactionIsInBlock hash, newStoredBlock, newBlockType, relativityOffset)))
                (§ block
                    (.. falsePositives (remove hash))
                )
                (§ ass (§ name relativityOffset) (+ relativityOffset 1))
            )
        )
        nil
    )

    ;;;
     ; Gets the median timestamp of the last 11 blocks.
     ;;
    #_private
    #_static
    (§ defn- #_"long" (§ fn getMedianTimestampOfRecentBlocks) [#_"StoredBlock" (§ name storedBlock), #_"BlockStore" (§ name store)])
        (§ throws #_"BlockStoreException")
    (§ block
        (§ var #_"long[]" (§ name timestamps) (§ new #_"long[]" (§ count 11)))
        (§ var #_"int" (§ name unused) 9)
        (§ ass (§ name (§ ai timestamps 10)) (.. storedBlock (getHeader) (getTimeSeconds)))
        (§ for (§ var ) :for (§ expr 0 <= unused && (§ ass (§ name storedBlock) (.. storedBlock (getPrev store))) != nil) :for (§ ass (§ name unused) (- unused 1)))
        (§ block
            (§ ass (§ name (§ ai timestamps unused)) (.. storedBlock (getHeader) (getTimeSeconds)))
        )

        (Arrays/sort timestamps, (§ expr unused + 1), 11)
        (§ ai timestamps (§ expr unused + (- 11 unused) / 2))
    )

    ;;;
     ; Disconnect each transaction in the block (after reading it from the block store).
     ; Only called if shouldVerifyTransactions().
     ; @throws PrunedException if block does not exist as a {@link StoredUndoableBlock} in the block store.
     ; @throws BlockStoreException if the block store had an underlying error or block does not exist in the block store at all.
     ;;
    #_protected
    #_abstract
    (§ method #_"void" (§ fn disconnectTransactions) [#_"StoredBlock" (§ name block)])
        (§ throws #_"PrunedException", #_"BlockStoreException")

    ;;;
     ; Called as part of connecting a block when the new block results in a different chain having higher total work.
     ;
     ; if (shouldVerifyTransactions)
     ;     either newChainHead needs to be in the block store as a FullStoredBlock, or (block != null && block.transactions != null)
     ;;
    #_private
    (§ method- #_"void" (§ fn handleNewBestChain) [#_"StoredBlock" (§ name storedPrev), #_"StoredBlock" (§ name newChainHead), #_"Block" (§ name block), #_"boolean" (§ name expensiveChecks)])
        (§ throws #_"BlockStoreException", #_"VerificationException", #_"PrunedException")
    (§ block
        (Preconditions/checkState (.. lock (isHeldByCurrentThread)))

        ;; This chain has overtaken the one we currently believe is best.  Reorganize is required.
        ;;
        ;; Firstly, calculate the block at which the chain diverged.  We only need to examine the
        ;; chain from beyond this block to find differences.

        (§ var #_"StoredBlock" (§ name head) (getChainHead))
        (§ var #_"StoredBlock" (§ name splitPoint) (findSplit newChainHead, head, blockStore))
        (.. log (info "Re-organize after split at height {}", (.. splitPoint (getHeight))))
        (.. log (info "Old chain head: {}", (.. head (getHeader) (getHashAsString))))
        (.. log (info "New chain head: {}", (.. newChainHead (getHeader) (getHashAsString))))
        (.. log (info "Split at block: {}", (.. splitPoint (getHeader) (getHashAsString))))

        ;; Then build a list of all blocks in the old part of the chain and the new part.
        (§ var #_"LinkedList<StoredBlock>" (§ name oldBlocks) (getPartialChain head, splitPoint, blockStore))
        (§ var #_"LinkedList<StoredBlock>" (§ name newBlocks) (getPartialChain newChainHead, splitPoint, blockStore))

        ;; Disconnect each transaction in the previous main chain that is no longer in the new main chain.
        (§ var #_"StoredBlock" (§ name storedNewHead) splitPoint)
        (§ if (shouldVerifyTransactions))
        (§ block
            (§ for (§ var #_"StoredBlock" (§ name oldBlock)) :for oldBlocks)
            (§ block
                (§ try )
                (§ block
                    (disconnectTransactions oldBlock)
                )
                (§ catch #_"PrunedException" (§ name e))
                (§ block
                    ;; We threw away the data we need to re-org this deep!  We need to go back to a peer with full
                    ;; block contents and ask them for the relevant data then rebuild the indexs.  Or we could just
                    ;; give up and ask the human operator to help get us unstuck (e.g. rescan from the genesis block).
                    ;; TODO: retry adding this block when we get a block with hash e.getHash()
                    (§ throw e)
                )
            )

            (§ var #_"StoredBlock" (§ name cursor))
            ;; Walk in ascending chronological order.
            (§ for (§ var #_"Iterator<StoredBlock>" (§ name it) (.. newBlocks (descendingIterator))) :for (.. it (hasNext)) :for (§ expr ))
            (§ block
                (§ ass (§ name cursor) (.. it (next)))
                (§ var #_"Block" (§ name cursorBlock) (.. cursor (getHeader)))
                (§ if (§ expr expensiveChecks && (.. cursorBlock (getTimeSeconds)) <= (getMedianTimestampOfRecentBlocks (.. cursor (getPrev blockStore)), blockStore)))
                (§ block
                    (§ throw (§ new #_"VerificationException" "Block's timestamp is too early during reorg"))
                )
                (§ var #_"TransactionOutputChanges" (§ name txOutChanges))
                (§ if (§ expr cursor != newChainHead || block == nil))
                (§ block
                    (§ ass (§ name txOutChanges) (connectTransactions cursor))
                )
                (§ else )
                (§ block
                    (§ ass (§ name txOutChanges) (connectTransactions (.. newChainHead (getHeight)), block))
                )
                (§ ass (§ name storedNewHead) (addToBlockStore storedNewHead, (.. cursorBlock (cloneAsHeader)), txOutChanges))
            )
        )
        (§ else )
        (§ block
            ;; (Finally) write block to block store.
            (§ ass (§ name storedNewHead) (addToBlockStore storedPrev, (.. newChainHead (getHeader))))
        )

        ;; Now inform the listeners.  This is necessary so the set of currently active transactions (that we can spend)
        ;; can be updated to take into account the re-organize.  We might also have received new coins we didn't have
        ;; before and our previous spends might have been undone.
        (§ for (§ var ListenerRegistration<ReorganizeListener> registration) :for reorganizeListeners)
        (§ block
            (§ if (== (.. registration executor) Threading/SAME_THREAD))
            (§ block
                ;; Short circuit the executor so we can propagate any exceptions.
                ;; TODO: Do we really need to do this or should it be irrelevant?
                (.. registration listener (reorganize splitPoint, oldBlocks, newBlocks))
            )
            (§ else )
            (§ block
                (.. registration executor (execute (§ new #_"Runnable")
                (§ anon
                    #_override
                    #_public
                    (§ method #_"void" (§ fn run) [])
                    (§ block
                        (§ try )
                        (§ block
                            (.. registration listener (reorganize splitPoint, oldBlocks, newBlocks))
                        )
                        (§ catch #_"VerificationException" (§ name e))
                        (§ block
                            (.. log (error "Block chain listener threw exception during reorg", e))
                        )
                        nil
                    )
                )))
            )
        )

        ;; Update the pointer to the best known block.
        (setChainHead storedNewHead)
        nil
    )

    ;;;
     ; Returns the set of contiguous blocks between 'higher' and 'lower'.  Higher is included, lower is not.
     ;;
    #_private
    #_static
    (§ defn- #_"LinkedList<StoredBlock>" (§ fn getPartialChain) [#_"StoredBlock" (§ name higher), #_"StoredBlock" (§ name lower), #_"BlockStore" (§ name store)])
        (§ throws #_"BlockStoreException")
    (§ block
        (Preconditions/checkArgument (§ expr (.. lower (getHeight)) < (.. higher (getHeight))), "higher and lower are reversed")
        (§ var #_"LinkedList<StoredBlock>" (§ name results) (§ new #_"LinkedList<>"))
        (§ var #_"StoredBlock" (§ name cursor) higher)
        (§ while true)
        (§ block
            (.. results (add cursor))
            (§ ass (§ name cursor) (Preconditions/checkNotNull (.. cursor (getPrev store)), "Ran off the end of the chain"))
            (§ if (.. cursor (equals lower)))
            (§ block
                (§ break )
            )
        )
        results
    )

    ;;;
     ; Locates the point in the chain at which newStoredBlock and chainHead diverge.  Returns null if no split point was
     ; found (i.e. they are not part of the same chain).  Returns newChainHead or chainHead if they don't actually diverge
     ; but are part of the same chain.
     ;;
    #_private
    #_static
    (§ defn- #_"StoredBlock" (§ fn findSplit) [#_"StoredBlock" (§ name newChainHead), #_"StoredBlock" (§ name oldChainHead), #_"BlockStore" (§ name store)])
        (§ throws #_"BlockStoreException")
    (§ block
        (§ var #_"StoredBlock" (§ name currentChainCursor) oldChainHead)
        (§ var #_"StoredBlock" (§ name newChainCursor) newChainHead)
        ;; Loop until we find the block both chains have in common.  Example:
        ;;
        ;;    A -> B -> C -> D
        ;;         \--> E -> F -> G
        ;;
        ;; findSplit will return block B.  oldChainHead = D and newChainHead = G.
        (§ while (§ not (.. currentChainCursor (equals newChainCursor))))
        (§ block
            (§ if (< (.. newChainCursor (getHeight)) (.. currentChainCursor (getHeight))))
            (§ block
                (§ ass (§ name currentChainCursor) (.. currentChainCursor (getPrev store)))
                (Preconditions/checkNotNull currentChainCursor, "Attempt to follow an orphan chain")
            )
            (§ else )
            (§ block
                (§ ass (§ name newChainCursor) (.. newChainCursor (getPrev store)))
                (Preconditions/checkNotNull newChainCursor, "Attempt to follow an orphan chain")
            )
        )
        currentChainCursor
    )

    ;;;
     ; @return the height of the best known chain, convenience for <tt>getChainHead().getHeight()</tt>
     ;;
    #_public
    (§ method #_"int" (§ fn getBestChainHeight) [])
    (§ block
        (.. (getChainHead) (getHeight))
    )

    #_public
    (§ enum #_"NewBlockType"
        (§ item BEST_CHAIN)
        (§ item SIDE_CHAIN)
    )

    #_private
    #_static
    (§ defn- #_"void" (§ fn sendTransactionsToListener) [#_"StoredBlock" (§ name block), #_"NewBlockType" (§ name blockType), #_"TransactionReceivedInBlockListener" (§ name listener), #_"int" (§ name relativityOffset), #_"List<Transaction>" (§ name transactions), #_"boolean" (§ name clone), #_"Set<Sha256Hash>" (§ name falsePositives)])
        (§ throws #_"VerificationException")
    (§ block
        (§ for (§ var #_"Transaction" (§ name tx)) :for transactions)
        (§ block
            (§ try )
            (§ block
                (.. falsePositives (remove (.. tx (getHash))))
                (§ if clone)
                (§ block
                    (§ ass (§ name tx) (.. tx params (getDefaultSerializer) (makeTransaction (.. tx (bitcoinSerialize)))))
                )
                (.. listener (receiveFromBlock tx, block, blockType, relativityOffset))
                (§ ass (§ name relativityOffset) (+ relativityOffset 1))
            )
            (§ catch #_"ScriptException" (§ name e))
            (§ block
                ;; We don't want scripts we don't understand to break the block chain so just note that this tx was
                ;; not scanned here and continue.
                (.. log (warn (§ expr "Failed to parse a script: " + e)))
            )
            (§ catch #_"ProtocolException" (§ name e))
            (§ block
                ;; Failed to duplicate tx, should never happen.
                (§ throw (§ new #_"RuntimeException" e))
            )
        )
        nil
    )

    #_protected
    (§ method #_"void" (§ fn setChainHead) [#_"StoredBlock" (§ name chainHead)])
        (§ throws #_"BlockStoreException")
    (§ block
        (doSetChainHead chainHead)
        (§ sync chainHeadLock)
        (§ block
            (§ ass (§ name (.. this chainHead)) chainHead)
        )
        nil
    )

    ;;;
     ; For each block in orphanBlocks, see if we can now fit it on top of the chain and if so, do so.
     ;;
    #_private
    (§ method- #_"void" (§ fn tryConnectingOrphans) [])
        (§ throws #_"VerificationException", #_"BlockStoreException", #_"PrunedException")
    (§ block
        (Preconditions/checkState (.. lock (isHeldByCurrentThread)))

        ;; For each block in our orphan list, try and fit it onto the head of the chain.  If we succeed remove it
        ;; from the list and keep going.  If we changed the head of the list at the end of the round try again until
        ;; we can't fit anything else on the top.
        ;;
        ;; This algorithm is kind of crappy, we should do a topo-sort then just connect them in order, but for small
        ;; numbers of orphan blocks it does OK.

        (§ var #_"int" (§ name blocksConnectedThisRound))
        (§ do )
        (§ block
            (§ ass (§ name blocksConnectedThisRound) 0)
            (§ var #_"Iterator<OrphanBlock>" (§ name iter) (.. orphanBlocks (values) (iterator)))
            (§ while (.. iter (hasNext)))
            (§ block
                (§ var #_"OrphanBlock" (§ name orphanBlock) (.. iter (next)))
                ;; Look up the blocks previous.
                (§ var #_"StoredBlock" (§ name prev) (getStoredBlockInCurrentScope (.. orphanBlock block (getPrevBlockHash))))
                (§ if (nil? prev))
                (§ block
                    ;; This is still an unconnected/orphan block.
                    (.. log (debug "Orphan block {} is not connectable right now", (.. orphanBlock block (getHash))))
                    (§ continue )
                )
                ;; Otherwise we can connect it now.
                ;; False here ensures we don't recurse infinitely downwards when connecting huge chains.
                (.. log (info "Connected orphan {}", (.. orphanBlock block (getHash))))
                (add (.. orphanBlock block), false, (.. orphanBlock filteredTxHashes), (.. orphanBlock filteredTxn))
                (.. iter (remove))
                (§ ass (§ name blocksConnectedThisRound) (+ blocksConnectedThisRound 1))
            )
            (§ if (< 0 blocksConnectedThisRound))
            (§ block
                (.. log (info "Connected {} orphan blocks.", blocksConnectedThisRound))
            )
        )
        (§ again (< 0 blocksConnectedThisRound))
        nil
    )

    ;;;
     ; Returns the block at the head of the current best chain.  This is the block which represents the greatest
     ; amount of cumulative work done.
     ;;
    #_public
    (§ method #_"StoredBlock" (§ fn getChainHead) [])
    (§ block
        (§ sync chainHeadLock)
        (§ block
            (§ return chainHead)
        )
    )

    ;;;
     ; An orphan block is one that does not connect to the chain anywhere (i.e. we can't find its parent, therefore
     ; it's an orphan).  Typically this occurs when we are downloading the chain and didn't reach the head yet, and/or
     ; if a block is solved whilst we are downloading.  It's possible that we see a small amount of orphan blocks which
     ; chain together, this method tries walking backwards through the known orphan blocks to find the bottom-most.
     ;
     ; @return from or one of from's parents, or null if "from" does not identify an orphan block
     ;;
    #_nilable
    #_public
    (§ method #_"Block" (§ fn getOrphanRoot) [#_"Sha256Hash" (§ name from)])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ var #_"OrphanBlock" (§ name cursor) (.. orphanBlocks (get from)))
            (§ if (nil? cursor))
            (§ block
                (§ return nil)
            )
            (§ var #_"OrphanBlock" (§ name tmp))
            (§ while (!= (§ ass (§ name tmp) (.. orphanBlocks (get (.. cursor block (getPrevBlockHash))))) nil))
            (§ block
                (§ ass (§ name cursor) tmp)
            )
            (§ return (.. cursor block))
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    ;;; Returns true if the given block is currently in the orphan blocks list. ;;
    #_public
    (§ method #_"boolean" (§ fn isOrphan) [#_"Sha256Hash" (§ name block)])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ return (.. orphanBlocks (containsKey block)))
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    ;;;
     ; Returns an estimate of when the given block will be reached, assuming a perfect 10 minute average for each
     ; block.  This is useful for turning transaction lock times into human readable times.  Note that a height in
     ; the past will still be estimated, even though the time of solving is actually known (we won't scan backwards
     ; through the chain to obtain the right answer).
     ;;
    #_public
    (§ method #_"Date" (§ fn estimateBlockTime) [#_"int" (§ name height)])
    (§ block
        (§ sync chainHeadLock)
        (§ block
            (§ var #_"long" (§ name offset) (§ expr height - (.. chainHead (getHeight))))
            (§ var #_"long" (§ name headTime) (.. chainHead (getHeader) (getTimeSeconds)))
            (§ var #_"long" (§ name estimated) (+ (* headTime 1000) (* 1000 60 10 offset)))
            (§ return (§ new #_"Date" estimated))
        )
    )

    ;;;
     ; Returns a future that completes when the block chain has reached the given height.  Yields the
     ; {@link StoredBlock} of the block that reaches that height first.  The future completes on a peer thread.
     ;;
    #_public
    (§ method #_"ListenableFuture<StoredBlock>" (§ fn getHeightFuture) [#_"int" (§ name height)])
    (§ block
        (§ var #_"SettableFuture<StoredBlock>" (§ name result) (SettableFuture/create))
        (addNewBestBlockListener Threading/SAME_THREAD, (§ new #_"NewBestBlockListener")
        (§ anon
            #_override
            #_public
            (§ method #_"void" (§ fn notifyNewBestBlock) [#_"StoredBlock" (§ name block)])
                (§ throws #_"VerificationException")
            (§ block
                (§ if (§ expr height <= (.. block (getHeight))))
                (§ block
                    (removeNewBestBlockListener this)
                    (.. result (set block))
                )
                nil
            )
        ))
        result
    )

    ;;;
     ; The false positive rate is the average over all blockchain transactions of:
     ;
     ; - 1.0 if the transaction was false-positive (was irrelevant to all listeners)
     ; - 0.0 if the transaction was relevant or filtered out
     ;;
    #_public
    (§ method #_"double" (§ fn getFalsePositiveRate) [])
    (§ block
        falsePositiveRate
    )

    ;;
     ; We completed handling of a filtered block.  Update false-positive estimate based
     ; on the total number of transactions in the original block.
     ;
     ; count includes filtered transactions, transactions that were passed in and were relevant
     ; and transactions that were false positives (i.e. includes all transactions in the block).
     ;;
    #_protected
    (§ method #_"void" (§ fn trackFilteredTransactions) [#_"int" (§ name count)])
    (§ block
        ;; Track non-false-positives in batch.  Each non-false-positive counts as 0.0 towards the estimate.
        ;;
        ;; This is slightly off because we are applying false positive tracking before non-FP tracking,
        ;; which counts FP as if they came at the beginning of the block.  Assuming uniform FP
        ;; spread in a block, this will somewhat underestimate the FP rate (5% for 1000 tx block).
        (§ var #_"double" (§ name alphaDecay) (Math/pow (§ expr 1 - FP_ESTIMATOR_ALPHA), count))

        ;; new_rate = alpha_decay * new_rate
        (§ ass (§ name falsePositiveRate) (* alphaDecay falsePositiveRate))

        (§ var #_"double" (§ name betaDecay) (Math/pow (§ expr 1 - FP_ESTIMATOR_BETA), count))

        ;; trend = beta * (new_rate - old_rate) + beta_decay * trend
        (§ ass (§ name falsePositiveTrend) (§ expr FP_ESTIMATOR_BETA * count * (- falsePositiveRate previousFalsePositiveRate) + betaDecay * falsePositiveTrend))

        ;; new_rate += alpha_decay * trend
        (§ ass (§ name falsePositiveRate) (§ expr falsePositiveRate + (* alphaDecay falsePositiveTrend)))

        ;; stash new_rate in old_rate
        (§ ass (§ name previousFalsePositiveRate) falsePositiveRate)
        nil
    )

    ;;; Irrelevant transactions were received.  Update false-positive estimate. ;;
    (§ method #_"void" (§ fn trackFalsePositives) [#_"int" (§ name count)])
    (§ block
        ;; Track false positives in batch by adding alpha to the false positive estimate once per count.
        ;; Each false positive counts as 1.0 towards the estimate.
        (§ ass (§ name falsePositiveRate) (§ expr falsePositiveRate + (* FP_ESTIMATOR_ALPHA count)))
        (§ if (< 0 count))
        (§ block
            (.. log (debug "{} false positives, current rate = {} trend = {}", count, falsePositiveRate, falsePositiveTrend))
        )
        nil
    )

    ;;; Resets estimates of false positives.  Used when the filter is sent to the peer. ;;
    #_public
    (§ method #_"void" (§ fn resetFalsePositiveEstimate) [])
    (§ block
        (§ ass (§ name falsePositiveRate) 0)
        (§ ass (§ name falsePositiveTrend) 0)
        (§ ass (§ name previousFalsePositiveRate) 0)
        nil
    )

    #_protected
    (§ method #_"VersionTally" (§ fn getVersionTally) [])
    (§ block
        versionTally
    )
)

#_(ns org.bitcoinj.core #_"Address"
    (:import [java.io IOException ObjectInputStream ObjectOutputStream])
    (:import [com.google.common.base Preconditions])
   (:require [org.bitcoinj.params Networks]
             [org.bitcoinj.script Script]))

;;;
 ; <p>A Bitcoin address looks like 1MsScoe2fTJoq4ZPdQgqyhgWeoNamYPevy and is derived from an elliptic curve public key
 ; plus a set of network parameters.  Not to be confused with a {@link PeerAddress} or {@link AddressMessage}
 ; which are about network (TCP) addresses.</p>
 ;
 ; <p>A standard address is built by taking the RIPE-MD160 hash of the public key bytes, with a version prefix and a
 ; checksum suffix, then encoding it textually as base58.  The version prefix is used to both denote the network for
 ; which the address is valid (see {@link NetworkParameters}, and also to indicate how the bytes inside the address
 ; should be interpreted.  Whilst almost all addresses today are hashes of public keys, another (currently unsupported
 ; type) can contain a hash of a script instead.</p>
 ;;
#_public
(§ class #_"Address" (§ extends #_"VersionedChecksummedBytes")
    ;;;
     ; An address is a RIPEMD160 hash of a public key, therefore is always 160 bits or 20 bytes.
     ;;
    #_public
    #_static
    (§ def #_"int" (§ name LENGTH) 20)

    #_private
    #_transient
    (§ field- #_"NetworkParameters" (§ name params))

    ;;;
     ; Construct an address from parameters, the address version, and the hash160 form.  Example:
     ;
     ; <pre>new Address(MainNetParams.get(), NetworkParameters.getAddressHeader(), Hex.decode("4a22c3c4cbb31e4d03b15550636762bda0baf85a"));</pre>
     ;;
    #_public
    (§ constructor #_"Address" [#_"NetworkParameters" (§ name params), #_"int" (§ name version), #_"byte[]" (§ name hash160)])
        (§ throws #_"WrongNetworkException")
    (§ block
        (§ super version, hash160)

        (Preconditions/checkNotNull params)
        (Preconditions/checkArgument (== (.. hash160 length) 20), "Addresses are 160-bit hashes, so you must provide 20 bytes")
        (§ if (§ not (isAcceptableVersion params, version)))
        (§ block
            (§ throw (§ new #_"WrongNetworkException" version, (.. params (getAcceptableAddressCodes))))
        )
        (§ ass (§ name (.. this params)) params)
        this
    )

    ;;; Returns an Address that represents the given P2SH script hash. ;;
    #_public
    #_static
    (§ defn #_"Address" (§ fn fromP2SHHash) [#_"NetworkParameters" (§ name params), #_"byte[]" (§ name hash160)])
    (§ block
        (§ try )
        (§ block
            (§ return (§ new #_"Address" params, (.. params (getP2SHHeader)), hash160))
        )
        (§ catch #_"WrongNetworkException" (§ name e))
        (§ block
            (§ throw (§ new #_"RuntimeException" e)) ;; Cannot happen.
        )
    )

    ;;; Returns an Address that represents the script hash extracted from the given scriptPubKey. ;;
    #_public
    #_static
    (§ defn #_"Address" (§ fn fromP2SHScript) [#_"NetworkParameters" (§ name params), #_"Script" (§ name scriptPubKey)])
    (§ block
        (Preconditions/checkArgument (.. scriptPubKey (isPayToScriptHash)), "Not a P2SH script")
        (fromP2SHHash params, (.. scriptPubKey (getPubKeyHash)))
    )

    ;;;
     ; Construct an address from its Base58 representation.
     ; @param params
     ;            The expected NetworkParameters or null if you don't want validation.
     ; @param base58
     ;            The textual form of the address, such as "17kzeh4N8g49GFvdDzSf8PjaPfyoD1MndL".
     ; @throws AddressFormatException
     ;             if the given base58 doesn't parse or the checksum is invalid
     ; @throws WrongNetworkException
     ;             if the given address is valid but for a different chain (e.g. testnet vs. mainnet)
     ;;
    #_public
    #_static
    (§ defn #_"Address" (§ fn fromBase58) [#_nilable #_"NetworkParameters" (§ name params), #_"String" (§ name base58)])
        (§ throws #_"AddressFormatException")
    (§ block
        (§ new #_"Address" params, base58)
    )

    ;;;
     ; Construct an address from parameters and the hash160 form.  Example:
     ;
     ; <pre>new Address(MainNetParams.get(), Hex.decode("4a22c3c4cbb31e4d03b15550636762bda0baf85a"));</pre>
     ;;
    #_public
    (§ constructor #_"Address" [#_"NetworkParameters" (§ name params), #_"byte[]" (§ name hash160)])
    (§ block
        (§ super (.. params (getAddressHeader)), hash160)

        (Preconditions/checkArgument (== (.. hash160 length) 20), "Addresses are 160-bit hashes, so you must provide 20 bytes")
        (§ ass (§ name (.. this params)) params)
        this
    )

    ;;; @deprecated Use {@link #fromBase58(NetworkParameters, String)} ;;
    #_deprecated
    #_public
    (§ constructor #_"Address" [#_nilable #_"NetworkParameters" (§ name params), #_"String" (§ name address)])
        (§ throws #_"AddressFormatException")
    (§ block
        (§ super address)

        (§ if (some? params))
        (§ block
            (§ if (§ not (isAcceptableVersion params, version)))
            (§ block
                (§ throw (§ new #_"WrongNetworkException" version, (.. params (getAcceptableAddressCodes))))
            )
            (§ ass (§ name (.. this params)) params)
        )
        (§ else )
        (§ block
            (§ var #_"NetworkParameters" (§ name paramsFound) nil)
            (§ for (§ var #_"NetworkParameters" (§ name p)) :for (Networks/get))
            (§ block
                (§ if (isAcceptableVersion p, version))
                (§ block
                    (§ ass (§ name paramsFound) p)
                    (§ break )
                )
            )
            (§ if (nil? paramsFound))
            (§ block
                (§ throw (§ new #_"AddressFormatException" (§ expr "No network found for " + address)))
            )

            (§ ass (§ name (.. this params)) paramsFound)
        )
        this
    )

    ;;; The (big endian) 20 byte hash that is the core of a Bitcoin address. ;;
    #_public
    (§ method #_"byte[]" (§ fn getHash160) [])
    (§ block
        bytes
    )

    ;;;
     ; Returns true if this address is a Pay-To-Script-Hash (P2SH) address.
     ; See also https://github.com/bitcoin/bips/blob/master/bip-0013.mediawiki: Address Format for pay-to-script-hash
     ;;
    #_public
    (§ method #_"boolean" (§ fn isP2SHAddress) [])
    (§ block
        (§ var #_"NetworkParameters" (§ name parameters) (getParameters))
        (§ expr parameters != nil && (.. this version) == (.. parameters p2shHeader))
    )

    ;;;
     ; Examines the version byte of the address and attempts to find a matching NetworkParameters.  If you aren't sure
     ; which network the address is intended for (e.g. it was provided by a user), you can use this to decide if it is
     ; compatible with the current wallet.  You should be able to handle a null response from this method.  Note that
     ; the parameters returned is not necessarily the same as the one the Address was created with.
     ;
     ; @return a NetworkParameters representing the network the address is intended for
     ;;
    #_public
    (§ method #_"NetworkParameters" (§ fn getParameters) [])
    (§ block
        params
    )

    ;;;
     ; Given an address, examines the version byte and attempts to find a matching NetworkParameters.  If you aren't sure
     ; which network the address is intended for (e.g. it was provided by a user), you can use this to decide if it is
     ; compatible with the current wallet.
     ; @return a NetworkParameters of the address
     ; @throws AddressFormatException if the string wasn't of a known version
     ;;
    #_public
    #_static
    (§ defn #_"NetworkParameters" (§ fn getParametersFromAddress) [#_"String" (§ name address)])
        (§ throws #_"AddressFormatException")
    (§ block
        (§ try )
        (§ block
            (§ return (.. (Address/fromBase58 nil, address) (getParameters)))
        )
        (§ catch #_"WrongNetworkException" (§ name e))
        (§ block
            (§ throw (§ new #_"RuntimeException" e)) ;; Cannot happen.
        )
    )

    ;;;
     ; Check if a given address version is valid given the NetworkParameters.
     ;;
    #_private
    #_static
    (§ defn- #_"boolean" (§ fn isAcceptableVersion) [#_"NetworkParameters" (§ name params), #_"int" (§ name version)])
    (§ block
        (§ for (§ var #_"int" (§ name v)) :for (.. params (getAcceptableAddressCodes)))
        (§ block
            (§ if (§ expr version == v))
            (§ block
                (§ return true)
            )
        )
        false
    )

    ;;;
     ; This implementation narrows the return type to <code>Address</code>.
     ;;
    #_override
    #_public
    (§ method #_"Address" (§ fn clone) [])
        (§ throws #_"CloneNotSupportedException")
    (§ block
        (§ cast #_"Address" (.. super (clone)))
    )

    ;; Java serialization

    #_private
    (§ method- #_"void" (§ fn writeObject) [#_"ObjectOutputStream" (§ name out)])
        (§ throws #_"IOException")
    (§ block
        (.. out (defaultWriteObject))
        (.. out (writeUTF (.. params id)))
        nil
    )

    #_private
    (§ method- #_"void" (§ fn readObject) [#_"ObjectInputStream" (§ name in)])
        (§ throws #_"IOException", #_"ClassNotFoundException")
    (§ block
        (.. in (defaultReadObject))
        (§ ass (§ name params) (NetworkParameters/fromID (.. in (readUTF))))
        nil
    )
)

#_(ns org.bitcoinj.core #_"AddressFormatException")

#_public
(§ class #_"AddressFormatException" (§ extends #_"IllegalArgumentException")
    #_public
    (§ constructor #_"AddressFormatException" [])
    (§ block
        (§ super)
        this
    )

    #_public
    (§ constructor #_"AddressFormatException" [#_"String" (§ name message)])
    (§ block
        (§ super message)
        this
    )
)

#_(ns org.bitcoinj.core #_"AddressMessage"
    (:import [java.io IOException OutputStream]
             [java.util ArrayList Collections List]))

;;;
 ; <p>Represents an "addr" message on the P2P network, which contains broadcast IP addresses of other peers.  This is
 ; one of the ways peers can find each other without using the DNS or IRC discovery mechanisms.  However storing and
 ; using addr messages is not presently implemented.</p>
 ;
 ; <p>Instances of this class are not safe for use by multiple threads.</p>
 ;;
#_public
(§ class #_"AddressMessage" (§ extends #_"Message")
    #_private
    #_static
    (§ def- #_"long" (§ name MAX_ADDRESSES) 1024)

    #_private
    (§ field- #_"List<PeerAddress>" (§ name addresses))

    ;;;
     ; Contruct a new 'addr' message.
     ; @param params NetworkParameters object.
     ; @param offset The location of the first payload byte within the array.
     ; @param parseRetain Whether to retain the backing byte array for quick reserialization.
     ; If true and the backing byte array is invalidated due to modification of a field, then
     ; the cached bytes may be repopulated and retained if the message is serialized again in the future.
     ; @param length The length of message if known.  Usually this is provided when deserializing of the wire
     ; as the length will be provided as part of the header.  Set to Message.UNKNOWN_LENGTH, if not known.
     ; @throws ProtocolException
     ;;
    (§ constructor #_"AddressMessage" [#_"NetworkParameters" (§ name params), #_"byte[]" (§ name payload), #_"int" (§ name offset), #_"MessageSerializer" (§ name setSerializer), #_"int" (§ name length)])
        (§ throws #_"ProtocolException")
    (§ block
        (§ super params, payload, offset, setSerializer, length)
        this
    )

    ;;;
     ; Contruct a new 'addr' message.
     ; @param params NetworkParameters object.
     ; @param serializer The serializer to use for this block.
     ; @param length The length of message if known.  Usually this is provided when deserializing of the wire
     ; as the length will be provided as part of the header.  Set to Message.UNKNOWN_LENGTH, if not known.
     ; @throws ProtocolException
     ;;
    (§ constructor #_"AddressMessage" [#_"NetworkParameters" (§ name params), #_"byte[]" (§ name payload), #_"MessageSerializer" (§ name serializer), #_"int" (§ name length)])
        (§ throws #_"ProtocolException")
    (§ block
        (§ super params, payload, 0, serializer, length)
        this
    )

    (§ constructor #_"AddressMessage" [#_"NetworkParameters" (§ name params), #_"byte[]" (§ name payload), #_"int" (§ name offset)])
        (§ throws #_"ProtocolException")
    (§ block
        (§ super params, payload, offset, (.. params (getDefaultSerializer)), UNKNOWN_LENGTH)
        this
    )

    (§ constructor #_"AddressMessage" [#_"NetworkParameters" (§ name params), #_"byte[]" (§ name payload)])
        (§ throws #_"ProtocolException")
    (§ block
        (§ super params, payload, 0, (.. params (getDefaultSerializer)), UNKNOWN_LENGTH)
        this
    )

    #_override
    #_protected
    (§ method #_"void" (§ fn parse) [])
        (§ throws #_"ProtocolException")
    (§ block
        (§ var #_"long" (§ name numAddresses) (readVarInt))
        ;; Guard against ultra large messages that will crash us.
        (§ if (< MAX_ADDRESSES numAddresses))
        (§ block
            (§ throw (§ new #_"ProtocolException" "Address message too large."))
        )
        (§ ass (§ name addresses) (§ new #_"ArrayList<>" (§ cast #_"int" numAddresses)))
        (§ for (§ var #_"int" (§ name i) 0) :for (< i numAddresses) :for (§ ass (§ name i) (+ i 1)))
        (§ block
            (§ var #_"PeerAddress" (§ name addr) (§ new #_"PeerAddress" params, payload, cursor, protocolVersion, this, serializer))
            (.. addresses (add addr))
            (§ ass (§ name cursor) (§ expr cursor + (.. addr (getMessageSize))))
        )
        (§ ass (§ name length) (.. (§ new #_"VarInt" (.. addresses (size))) (getSizeInBytes)))
        ;; The 4 byte difference is the uint32 timestamp that was introduced in version 31402.
        (§ ass (§ name length) (+ length (* (.. addresses (size)) (if (< 31402 protocolVersion) PeerAddress/MESSAGE_SIZE (- PeerAddress/MESSAGE_SIZE 4)))))
        nil
    )

    #_override
    #_protected
    (§ method #_"void" (§ fn bitcoinSerializeToStream) [#_"OutputStream" (§ name stream)])
        (§ throws #_"IOException")
    (§ block
        (§ if (some? addresses))
        (§ block
            (.. stream (write (.. (§ new #_"VarInt" (.. addresses (size))) (encode))))
            (§ for (§ var #_"PeerAddress" (§ name addr)) :for addresses)
            (§ block
                (.. addr (bitcoinSerialize stream))
            )
        )
        nil
    )

    ;;;
     ; @return An unmodifiableList view of the backing List of addresses.  Addresses contained within the list may be safely modified.
     ;;
    #_public
    (§ method #_"List<PeerAddress>" (§ fn getAddresses) [])
    (§ block
        (Collections/unmodifiableList addresses)
    )

    #_public
    (§ method #_"void" (§ fn addAddress) [#_"PeerAddress" (§ name address)])
    (§ block
        (unCache)
        (.. address (setParent this))
        (.. addresses (add address))
        (§ if (§ expr length == UNKNOWN_LENGTH))
        (§ block
            (getMessageSize)
        )
        (§ else )
        (§ block
            (§ ass (§ name length) (§ expr length + (.. address (getMessageSize))))
        )
        nil
    )

    #_public
    (§ method #_"void" (§ fn removeAddress) [#_"int" (§ name index)])
    (§ block
        (unCache)
        (§ var #_"PeerAddress" (§ name address) (.. addresses (remove index)))
        (.. address (setParent nil))
        (§ if (§ expr length == UNKNOWN_LENGTH))
        (§ block
            (getMessageSize)
        )
        (§ else )
        (§ block
            (§ ass (§ name length) (§ expr length - (.. address (getMessageSize))))
        )
        nil
    )

    #_override
    #_public
    (§ method #_"String" (§ fn toString) [])
    (§ block
        (§ expr "addr: " + (.. Utils/SPACE_JOINER (join addresses)))
    )
)

#_(ns org.bitcoinj.core #_"AlertMessage"
    (:import [java.util Date HashSet Set]))

;;;
 ; Alerts are signed messages that are broadcast on the peer-to-peer network if they match a hard-coded signing key.
 ; The private keys are held by a small group of core Bitcoin developers, and alerts may be broadcast in the event of
 ; an available upgrade or a serious network problem.  Alerts have an expiration time, data that specifies what
 ; set of software versions it matches and the ability to cancel them by broadcasting another type of alert.
 ;
 ; The right course of action on receiving an alert is usually to either ensure a human will see it (display on screen,
 ; log, email), or if you decide to use alerts for notifications that are specific to your app in some way, to parse it.
 ; For example, you could treat it as an upgrade notification specific to your app.  Satoshi designed alerts to ensure
 ; that software upgrades could be distributed independently of a hard-coded website, in order to allow everything to
 ; be purely peer-to-peer.  You don't have to use this of course, and indeed it often makes more sense not to.
 ;
 ; <p>Before doing anything with an alert, you should check {@link AlertMessage#isSignatureValid()}.</p>
 ;
 ; <p>Instances of this class are not safe for use by multiple threads.</p>
 ;;
#_public
(§ class #_"AlertMessage" (§ extends #_"Message")
    #_private
    (§ field- #_"byte[]" (§ name content))
    #_private
    (§ field- #_"byte[]" (§ name signature))

    ;; See the getters for documentation of what each field means.
    #_private
    (§ field- #_"long" (§ name version) 1)
    #_private
    (§ field- #_"Date" (§ name relayUntil))
    #_private
    (§ field- #_"Date" (§ name expiration))
    #_private
    (§ field- #_"long" (§ name id))
    #_private
    (§ field- #_"long" (§ name cancel))
    #_private
    (§ field- #_"long" (§ name minVer))
    #_private
    (§ field- #_"long" (§ name maxVer))
    #_private
    (§ field- #_"long" (§ name priority))
    #_private
    (§ field- #_"String" (§ name comment))
    #_private
    (§ field- #_"String" (§ name statusBar))
    #_private
    (§ field- #_"String" (§ name reserved))

    ;; Chosen arbitrarily to avoid memory blowups.
    #_private
    #_static
    (§ def- #_"long" (§ name MAX_SET_SIZE) 100)

    #_public
    (§ constructor #_"AlertMessage" [#_"NetworkParameters" (§ name params), #_"byte[]" (§ name payloadBytes)])
        (§ throws #_"ProtocolException")
    (§ block
        (§ super params, payloadBytes, 0)
        this
    )

    #_override
    #_public
    (§ method #_"String" (§ fn toString) [])
    (§ block
        (§ expr "ALERT: " + (getStatusBar))
    )

    #_override
    #_protected
    (§ method #_"void" (§ fn parse) [])
        (§ throws #_"ProtocolException")
    (§ block
        ;; Alerts are formatted in two levels.  The top level contains two byte arrays: a signature, and a serialized
        ;; data structure containing the actual alert data.
        (§ var #_"int" (§ name startPos) cursor)
        (§ ass (§ name content) (readByteArray))
        (§ ass (§ name signature) (readByteArray))
        ;; Now we need to parse out the contents of the embedded structure.  Rewind back to the start of the message.
        (§ ass (§ name cursor) startPos)
        (readVarInt) ;; Skip the length field on the content array.
        ;; We're inside the embedded structure.
        (§ ass (§ name version) (readUint32))
        ;; Read the timestamps.  Bitcoin uses seconds since the epoch.
        (§ ass (§ name relayUntil) (§ new #_"Date" (* (.. (readUint64) (longValue)) 1000)))
        (§ ass (§ name expiration) (§ new #_"Date" (* (.. (readUint64) (longValue)) 1000)))
        (§ ass (§ name id) (readUint32))
        (§ ass (§ name cancel) (readUint32))
        ;; Sets are serialized as <len><item><item><item>....
        (§ var #_"long" (§ name cancelSetSize) (readVarInt))
        (§ if (§ expr cancelSetSize < 0 || MAX_SET_SIZE < cancelSetSize))
        (§ block
            (§ throw (§ new #_"ProtocolException" (§ expr "Bad cancel set size: " + cancelSetSize)))
        )
        ;; Using a hashset here is very inefficient given that this will normally be only one item.  But Java doesn't
        ;; make it easy to do better.  What we really want is just an array-backed set.
        (§ var #_"Set<Long>" (§ name cancelSet) (§ new #_"HashSet<>" (§ cast #_"int" cancelSetSize)))
        (§ for (§ var #_"long" (§ name i) 0) :for (< i cancelSetSize) :for (§ ass (§ name i) (+ i 1)))
        (§ block
            (.. cancelSet (add (readUint32)))
        )
        (§ ass (§ name minVer) (readUint32))
        (§ ass (§ name maxVer) (readUint32))
        ;; Read the subver matching set.
        (§ var #_"long" (§ name subverSetSize) (readVarInt))
        (§ if (§ expr subverSetSize < 0 || MAX_SET_SIZE < subverSetSize))
        (§ block
            (§ throw (§ new #_"ProtocolException" (§ expr "Bad subver set size: " + subverSetSize)))
        )
        (§ var #_"Set<String>" (§ name matchingSubVers) (§ new #_"HashSet<>" (§ cast #_"int" subverSetSize)))
        (§ for (§ var #_"long" (§ name i) 0) :for (< i subverSetSize) :for (§ ass (§ name i) (+ i 1)))
        (§ block
            (.. matchingSubVers (add (readStr)))
        )
        (§ ass (§ name priority) (readUint32))
        (§ ass (§ name comment) (readStr))
        (§ ass (§ name statusBar) (readStr))
        (§ ass (§ name reserved) (readStr))

        (§ ass (§ name length) (- cursor offset))
        nil
    )

    ;;;
     ; Returns true if the digital signature attached to the message verifies.  Don't do anything with the alert if it
     ; doesn't verify, because that would allow arbitrary attackers to spam your users.
     ;;
    #_public
    (§ method #_"boolean" (§ fn isSignatureValid) [])
    (§ block
        (ECKey/verify (Sha256Hash/hashTwice content), signature, (.. params (getAlertSigningKey)))
    )

    ;;;
     ; The time at which the alert should stop being broadcast across the network.  Note that you can still receive
     ; the alert after this time from other nodes if the alert still applies to them or to you.
     ;;
    #_public
    (§ method #_"Date" (§ fn getRelayUntil) [])
    (§ block
        relayUntil
    )

    #_public
    (§ method #_"void" (§ fn setRelayUntil) [#_"Date" (§ name relayUntil)])
    (§ block
        (§ ass (§ name (.. this relayUntil)) relayUntil)
        nil
    )

    ;;;
     ; The time at which the alert ceases to be relevant.  It should not be presented to the user or app administrator
     ; after this time.
     ;;
    #_public
    (§ method #_"Date" (§ fn getExpiration) [])
    (§ block
        expiration
    )

    #_public
    (§ method #_"void" (§ fn setExpiration) [#_"Date" (§ name expiration)])
    (§ block
        (§ ass (§ name (.. this expiration)) expiration)
        nil
    )

    ;;;
     ; The numeric identifier of this alert.  Each alert should have a unique ID, but the signer can choose any number.
     ; If an alert is broadcast with a cancel field higher than this ID, this alert is considered cancelled.
     ; @return uint32
     ;;
    #_public
    (§ method #_"long" (§ fn getId) [])
    (§ block
        id
    )

    #_public
    (§ method #_"void" (§ fn setId) [#_"long" (§ name id)])
    (§ block
        (§ ass (§ name (.. this id)) id)
        nil
    )

    ;;;
     ; A marker that results in any alerts with an ID lower than this value to be considered cancelled.
     ; @return uint32
     ;;
    #_public
    (§ method #_"long" (§ fn getCancel) [])
    (§ block
        cancel
    )

    #_public
    (§ method #_"void" (§ fn setCancel) [#_"long" (§ name cancel)])
    (§ block
        (§ ass (§ name (.. this cancel)) cancel)
        nil
    )

    ;;;
     ; The inclusive lower bound on software versions that are considered for the purposes of this alert.  Bitcoin Core
     ; compares this against a protocol version field, but as long as the subVer field is used to restrict it your
     ; alerts could use any version numbers.
     ; @return uint32
     ;;
    #_public
    (§ method #_"long" (§ fn getMinVer) [])
    (§ block
        minVer
    )

    #_public
    (§ method #_"void" (§ fn setMinVer) [#_"long" (§ name minVer)])
    (§ block
        (§ ass (§ name (.. this minVer)) minVer)
        nil
    )

    ;;;
     ; The inclusive upper bound on software versions considered for the purposes of this alert.  Bitcoin Core
     ; compares this against a protocol version field, but as long as the subVer field is used to restrict it your
     ; alerts could use any version numbers.
     ;;
    #_public
    (§ method #_"long" (§ fn getMaxVer) [])
    (§ block
        maxVer
    )

    #_public
    (§ method #_"void" (§ fn setMaxVer) [#_"long" (§ name maxVer)])
    (§ block
        (§ ass (§ name (.. this maxVer)) maxVer)
        nil
    )

    ;;;
     ; Provides an integer ordering amongst simultaneously active alerts.
     ; @return uint32
     ;;
    #_public
    (§ method #_"long" (§ fn getPriority) [])
    (§ block
        priority
    )

    #_public
    (§ method #_"void" (§ fn setPriority) [#_"long" (§ name priority)])
    (§ block
        (§ ass (§ name (.. this priority)) priority)
        nil
    )

    ;;;
     ; This field is unused.  It is presumably intended for the author of the alert to provide a justification for it
     ; visible to protocol developers but not users.
     ;;
    #_public
    (§ method #_"String" (§ fn getComment) [])
    (§ block
        comment
    )

    #_public
    (§ method #_"void" (§ fn setComment) [#_"String" (§ name comment)])
    (§ block
        (§ ass (§ name (.. this comment)) comment)
        nil
    )

    ;;;
     ; A string that is intended to display in the status bar of Bitcoin Core's GUI client.  It contains the user-visible
     ; message.  English only.
     ;;
    #_public
    (§ method #_"String" (§ fn getStatusBar) [])
    (§ block
        statusBar
    )

    #_public
    (§ method #_"void" (§ fn setStatusBar) [#_"String" (§ name statusBar)])
    (§ block
        (§ ass (§ name (.. this statusBar)) statusBar)
        nil
    )

    ;;;
     ; This field is never used.
     ;;
    #_public
    (§ method #_"String" (§ fn getReserved) [])
    (§ block
        reserved
    )

    #_public
    (§ method #_"void" (§ fn setReserved) [#_"String" (§ name reserved)])
    (§ block
        (§ ass (§ name (.. this reserved)) reserved)
        nil
    )

    #_public
    (§ method #_"long" (§ fn getVersion) [])
    (§ block
        version
    )
)

#_(ns org.bitcoinj.core #_"Base58"
    (:import [java.math BigInteger]
             [java.util Arrays]))

;;;
 ; Base58 is a way to encode Bitcoin addresses (or arbitrary data) as alphanumeric strings.
 ;
 ; Note that this is not the same base58 as used by Flickr, which you may find referenced around the Internet.
 ;
 ; You may want to consider working with {@link VersionedChecksummedBytes} instead, which
 ; adds support for testing the prefix and suffix bytes commonly found in addresses.
 ;
 ; Satoshi explains: why base-58 instead of standard base-64 encoding?
 ; <ul>
 ; <li>Don't want 0OIl characters that look the same in some fonts and
 ;     could be used to create visually identical looking account numbers.</li>
 ; <li>A string with non-alphanumeric characters is not as easily accepted as an account number.</li>
 ; <li>E-mail usually won't line-break if there's no punctuation to break at.</li>
 ; <li>Doubleclicking selects the whole number as one word if it's all alphanumeric.</li>
 ; </ul>
 ;
 ; However, note that the encoding/decoding runs in O(n&sup2;) time, so it is not useful for large data.
 ;
 ; The basic idea of the encoding is to treat the data bytes as a large number represented using
 ; base-256 digits, convert the number to be represented using base-58 digits, preserve the exact
 ; number of leading zeros (which are otherwise lost during the mathematical operations on the
 ; numbers), and finally represent the resulting base-58 digits as alphanumeric ASCII characters.
 ;;
#_public
(§ class #_"Base58"
    #_public
    #_static
    (§ def #_"char[]" (§ name ALPHABET) (.. "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz" (toCharArray)))
    #_private
    #_static
    (§ def- #_"char" (§ name ENCODED_ZERO) (§ ai ALPHABET 0))
    #_private
    #_static
    (§ def- #_"int[]" (§ name INDEXES) (§ new #_"int[]" (§ count 128)))
    #_static
    (§ block
        (Arrays/fill INDEXES, -1)
        (§ for (§ var #_"int" (§ name i) 0) :for (§ expr i < (.. ALPHABET length)) :for (§ ass (§ name i) (+ i 1)))
        (§ block
            (§ ass (§ name INDEXES[ALPHABET[i]]) i)
        )
    )

    ;;;
     ; Encodes the given bytes as a base58 string (no checksum is appended).
     ;
     ; @param input the bytes to encode
     ; @return the base58-encoded string
     ;;
    #_public
    #_static
    (§ defn #_"String" (§ fn encode) [#_"byte[]" (§ name input)])
    (§ block
        (§ if (== (.. input length) 0))
        (§ block
            (§ return "")
        )

        ;; Count leading zeros.
        (§ var #_"int" (§ name zeros) 0)
        (§ while (§ expr zeros < (.. input length) && (§ ai input zeros) == 0))
        (§ block
            (§ ass (§ name zeros) (+ zeros 1))
        )

        ;; Convert base-256 digits to base-58 digits (plus conversion to ASCII characters).
        (§ ass (§ name input) (Arrays/copyOf input, (.. input length))) ;; since we modify it in-place
        (§ var #_"char[]" (§ name encoded) (§ new #_"char[]" (§ count (.. input length) * 2))) ;; upper bound
        (§ var #_"int" (§ name outputStart) (.. encoded length))
        (§ for (§ var #_"int" (§ name inputStart) zeros) :for (§ expr inputStart < (.. input length)) :for (§ expr ))
        (§ block
            (§ ass (§ name outputStart) (- outputStart 1))
            (§ ass (§ name (§ ai encoded outputStart)) (§ ai ALPHABET (divmod input, inputStart, 256, 58)))
            (§ if (§ expr (§ ai input inputStart) == 0))
            (§ block
                (§ ass (§ name inputStart) (+ inputStart 1)) ;; optimization - skip leading zeros
            )
        )
        ;; Preserve exactly as many leading encoded zeros in output as there were leading zeros in input.
        (§ while (§ expr outputStart < (.. encoded length) && (§ ai encoded outputStart) == ENCODED_ZERO))
        (§ block
            (§ ass (§ name outputStart) (+ outputStart 1))
        )
        (§ for (§ var ) :for (< 0 zeros) :for (§ ass (§ name zeros) (- zeros 1)))
        (§ block
            (§ ass (§ name outputStart) (- outputStart 1))
            (§ ass (§ name (§ ai encoded outputStart)) ENCODED_ZERO)
        )

        ;; Return encoded string (including encoded leading zeros).
        (§ new #_"String" encoded, outputStart, (§ expr (.. encoded length) - outputStart))
    )

    ;;;
     ; Decodes the given base58 string into the original data bytes.
     ;
     ; @param input the base58-encoded string to decode
     ; @return the decoded data bytes
     ; @throws AddressFormatException if the given string is not a valid base58 string
     ;;
    #_public
    #_static
    (§ defn #_"byte[]" (§ fn decode) [#_"String" (§ name input)])
        (§ throws #_"AddressFormatException")
    (§ block
        (§ if (== (.. input (length)) 0))
        (§ block
            (§ return (§ new #_"byte[]" (§ count 0)))
        )

        ;; Convert the base58-encoded ASCII chars to a base58 byte sequence (base58 digits).
        (§ var #_"byte[]" (§ name input58) (§ new #_"byte[]" (§ count (.. input (length)))))
        (§ for (§ var #_"int" (§ name i) 0) :for (§ expr i < (.. input (length))) :for (§ ass (§ name i) (+ i 1)))
        (§ block
            (§ var #_"char" (§ name c) (.. input (charAt i)))
            (§ var #_"int" (§ name digit) (if (< c 128) (§ ai INDEXES c) -1))
            (§ if (< digit 0))
            (§ block
                (§ throw (§ new #_"AddressFormatException" (§ expr "Illegal character " + c + " at position " + i)))
            )
            (§ ass (§ name (§ ai input58 i)) (§ cast #_"byte" digit))
        )
        ;; Count leading zeros.
        (§ var #_"int" (§ name zeros) 0)
        (§ while (§ expr zeros < (.. input58 length) && (§ ai input58 zeros) == 0))
        (§ block
            (§ ass (§ name zeros) (+ zeros 1))
        )
        ;; Convert base-58 digits to base-256 digits.
        (§ var #_"byte[]" (§ name decoded) (§ new #_"byte[]" (§ count (.. input (length)))))
        (§ var #_"int" (§ name outputStart) (.. decoded length))
        (§ for (§ var #_"int" (§ name inputStart) zeros) :for (§ expr inputStart < (.. input58 length)) :for (§ expr ))
        (§ block
            (§ ass (§ name outputStart) (- outputStart 1))
            (§ ass (§ name (§ ai decoded outputStart)) (divmod input58, inputStart, 58, 256))
            (§ if (§ expr (§ ai input58 inputStart) == 0))
            (§ block
                (§ ass (§ name inputStart) (+ inputStart 1)) ;; optimization - skip leading zeros
            )
        )
        ;; Ignore extra leading zeroes that were added during the calculation.
        (§ while (§ expr outputStart < (.. decoded length) && (§ ai decoded outputStart) == 0))
        (§ block
            (§ ass (§ name outputStart) (+ outputStart 1))
        )

        ;; Return decoded data (including original number of leading zeros).
        (Arrays/copyOfRange decoded, (§ expr outputStart - zeros), (.. decoded length))
    )

    #_public
    #_static
    (§ defn #_"BigInteger" (§ fn decodeToBigInteger) [#_"String" (§ name input)])
        (§ throws #_"AddressFormatException")
    (§ block
        (§ new #_"BigInteger" 1, (decode input))
    )

    ;;;
     ; Decodes the given base58 string into the original data bytes, using the checksum in the
     ; last 4 bytes of the decoded data to verify that the rest are correct.  The checksum is
     ; removed from the returned data.
     ;
     ; @param input the base58-encoded string to decode (which should include the checksum)
     ; @throws AddressFormatException if the input is not base 58 or the checksum does not validate
     ;;
    #_public
    #_static
    (§ defn #_"byte[]" (§ fn decodeChecked) [#_"String" (§ name input)])
        (§ throws #_"AddressFormatException")
    (§ block
        (§ var #_"byte[]" (§ name decoded) (decode input))
        (§ if (< (.. decoded length) 4))
        (§ block
            (§ throw (§ new #_"AddressFormatException" "Input too short"))
        )
        (§ var #_"byte[]" (§ name data) (Arrays/copyOfRange decoded, 0, (§ expr (.. decoded length) - 4)))
        (§ var #_"byte[]" (§ name checksum) (Arrays/copyOfRange decoded, (§ expr (.. decoded length) - 4), (.. decoded length)))
        (§ var #_"byte[]" (§ name actualChecksum) (Arrays/copyOfRange (Sha256Hash/hashTwice data), 0, 4))
        (§ if (§ not (Arrays/equals checksum, actualChecksum)))
        (§ block
            (§ throw (§ new #_"AddressFormatException" "Checksum does not validate"))
        )
        data
    )

    ;;;
     ; Divides a number, represented as an array of bytes each containing a single digit
     ; in the specified base, by the given divisor.  The given number is modified in-place
     ; to contain the quotient, and the return value is the remainder.
     ;
     ; @param number the number to divide
     ; @param firstDigit the index within the array of the first non-zero digit
     ;        (this is used for optimization by skipping the leading zeros)
     ; @param base the base in which the number's digits are represented (up to 256)
     ; @param divisor the number to divide by (up to 256)
     ; @return the remainder of the division operation
     ;;
    #_private
    #_static
    (§ defn- #_"byte" (§ fn divmod) [#_"byte[]" (§ name number), #_"int" (§ name firstDigit), #_"int" (§ name base), #_"int" (§ name divisor)])
    (§ block
        ;; This is just long division which accounts for the base of the input digits.
        (§ var #_"int" (§ name remainder) 0)
        (§ for (§ var #_"int" (§ name i) firstDigit) :for (§ expr i < (.. number length)) :for (§ ass (§ name i) (+ i 1)))
        (§ block
            (§ var #_"int" (§ name digit) (& (§ cast #_"int" (§ ai number i)) 0xff))
            (§ var #_"int" (§ name temp) (§ expr remainder * base + digit))
            (§ ass (§ name (§ ai number i)) (§ cast #_"byte" (/ temp divisor)))
            (§ ass (§ name remainder) (§ expr temp % divisor))
        )
        (§ cast #_"byte" remainder)
    )
)

#_(ns org.bitcoinj.core #_"BitcoinSerializer"
    (:import [java.io IOException OutputStream]
             [java.nio BufferUnderflowException ByteBuffer]
             [java.util HashMap Map])
    (:import [org.slf4j Logger LoggerFactory])
    (:import #_static [org.bitcoinj.core.Utils *]))

;;;
 ; <p>Methods to serialize and de-serialize messages to the Bitcoin network format as defined in
 ; <a href="https://en.bitcoin.it/wiki/Protocol_specification">the protocol specification</a>.</p>
 ;
 ; <p>To be able to serialize and deserialize new Message subclasses the following criteria needs to be met.</p>
 ;
 ; <ul>
 ; <li>The proper Class instance needs to be mapped to its message name in the names variable below.</li>
 ; <li>There needs to be a constructor matching: NetworkParameters params, byte[] payload.</li>
 ; <li>Message.bitcoinSerializeToStream() needs to be properly subclassed.</li>
 ; </ul>
 ;;
#_public
(§ class #_"BitcoinSerializer" (§ extends #_"MessageSerializer")
    #_private
    #_static
    (§ def- #_"Logger" (§ name log) (LoggerFactory/getLogger (§ klass #_"BitcoinSerializer")))
    #_private
    #_static
    (§ def- #_"int" (§ name COMMAND_LEN) 12)

    #_private
    #_static
    (§ def- #_"Map<Class<? extends Message>, String>" (§ name names) (§ new #_"HashMap<>"))
    #_static
    (§ block
        (.. names (put (§ klass #_"VersionMessage"), "version"))
        (.. names (put (§ klass #_"InventoryMessage"), "inv"))
        (.. names (put (§ klass #_"Block"), "block"))
        (.. names (put (§ klass #_"GetDataMessage"), "getdata"))
        (.. names (put (§ klass #_"Transaction"), "tx"))
        (.. names (put (§ klass #_"AddressMessage"), "addr"))
        (.. names (put (§ klass #_"Ping"), "ping"))
        (.. names (put (§ klass #_"Pong"), "pong"))
        (.. names (put (§ klass #_"VersionAck"), "verack"))
        (.. names (put (§ klass #_"GetBlocksMessage"), "getblocks"))
        (.. names (put (§ klass #_"GetHeadersMessage"), "getheaders"))
        (.. names (put (§ klass #_"GetAddrMessage"), "getaddr"))
        (.. names (put (§ klass #_"HeadersMessage"), "headers"))
        (.. names (put (§ klass #_"BloomFilter"), "filterload"))
        (.. names (put (§ klass #_"FilteredBlock"), "merkleblock"))
        (.. names (put (§ klass #_"NotFoundMessage"), "notfound"))
        (.. names (put (§ klass #_"MemoryPoolMessage"), "mempool"))
        (.. names (put (§ klass #_"RejectMessage"), "reject"))
    )

    #_private
    (§ field- #_"NetworkParameters" (§ name params))
    #_private
    (§ field- #_"boolean" (§ name parseRetain))

    ;;;
     ; Constructs a BitcoinSerializer with the given behavior.
     ;
     ; @param params           networkParams used to create Messages instances and termining packetMagic
     ; @param parseRetain      retain the backing byte array of a message for fast reserialization
     ;;
    #_public
    (§ constructor #_"BitcoinSerializer" [#_"NetworkParameters" (§ name params), #_"boolean" (§ name parseRetain)])
    (§ block
        (§ ass (§ name (.. this params)) params)
        (§ ass (§ name (.. this parseRetain)) parseRetain)
        this
    )

    ;;;
     ; Writes message to to the output stream.
     ;;
    #_override
    #_public
    (§ method #_"void" (§ fn serialize) [#_"String" (§ name name), #_"byte[]" (§ name message), #_"OutputStream" (§ name out)])
        (§ throws #_"IOException")
    (§ block
        (§ var #_"byte[]" (§ name header) (§ new #_"byte[]" (§ count 4 + COMMAND_LEN + 4 + 4))) ;; checksum
        (uint32ToByteArrayBE (.. params (getPacketMagic)), header, 0)

        ;; The header array is initialized to zero by Java so we don't have to worry
        ;; about NULL terminating the string here.
        (§ for (§ var #_"int" (§ name i) 0) :for (§ expr i < (.. name (length)) && i < COMMAND_LEN) :for (§ ass (§ name i) (+ i 1)))
        (§ block
            (§ ass (§ name (§ ai header (§ expr 4 + i))) (§ cast #_"byte" (& (.. name (codePointAt i)) 0xff)))
        )

        (Utils/uint32ToByteArrayLE (.. message length), header, (+ 4 COMMAND_LEN))

        (§ var #_"byte[]" (§ name hash) (Sha256Hash/hashTwice message))
        (System/arraycopy hash, 0, header, (§ expr 4 + COMMAND_LEN + 4), 4)
        (.. out (write header))
        (.. out (write message))

        (§ if (.. log (isDebugEnabled)))
        (§ block
            (.. log (debug "Sending {} message: {}", name, (§ expr (.. HEX (encode header)) + (.. HEX (encode message)))))
        )
        nil
    )

    ;;;
     ; Writes message to to the output stream.
     ;;
    #_override
    #_public
    (§ method #_"void" (§ fn serialize) [#_"Message" (§ name message), #_"OutputStream" (§ name out)])
        (§ throws #_"IOException")
    (§ block
        (§ var #_"String" (§ name name) (.. names (get (.. message (getClass)))))
        (§ if (nil? name))
        (§ block
            (§ throw (§ new #_"Error" (§ expr "BitcoinSerializer doesn't currently know how to serialize " + (.. message (getClass)))))
        )

        (serialize name, (.. message (bitcoinSerialize)), out)
        nil
    )

    ;;;
     ; Reads a message from the given ByteBuffer and returns it.
     ;;
    #_override
    #_public
    (§ method #_"Message" (§ fn deserialize) [#_"ByteBuffer" (§ name in)])
        (§ throws #_"ProtocolException", #_"IOException")
    (§ block
        ;; A Bitcoin protocol message has the following format:
        ;;
        ;;   - 4 byte magic number: 0xfabfb5da for the testnet or
        ;;                          0xf9beb4d9 for production
        ;;   - 12 byte command in ASCII
        ;;   - 4 byte payload size
        ;;   - 4 byte checksum
        ;;   - Payload data
        ;;
        ;; The checksum is the first 4 bytes of a SHA256 hash of the message payload. It isn't
        ;; present for all messages, notably, the first one on a connection.
        ;;
        ;; Bitcoin Core ignores garbage before the magic header bytes. We have to do the same because
        ;; sometimes it sends us stuff that isn't part of any message.
        (seekPastMagicBytes in)
        (§ var #_"BitcoinPacketHeader" (§ name header) (§ new #_"BitcoinPacketHeader" in))
        ;; Now try to read the whole message.
        (deserializePayload header, in)
    )

    ;;;
     ; Deserializes only the header in case packet meta data is needed before decoding
     ; the payload.  This method assumes you have already called seekPastMagicBytes().
     ;;
    #_override
    #_public
    (§ method #_"BitcoinPacketHeader" (§ fn deserializeHeader) [#_"ByteBuffer" (§ name in)])
        (§ throws #_"ProtocolException", #_"IOException")
    (§ block
        (§ new #_"BitcoinPacketHeader" in)
    )

    ;;;
     ; Deserialize payload only.  You must provide a header, typically obtained by calling
     ; {@link BitcoinSerializer#deserializeHeader}.
     ;;
    #_override
    #_public
    (§ method #_"Message" (§ fn deserializePayload) [#_"BitcoinPacketHeader" (§ name header), #_"ByteBuffer" (§ name in)])
        (§ throws #_"ProtocolException", #_"BufferUnderflowException")
    (§ block
        (§ var #_"byte[]" (§ name payloadBytes) (§ new #_"byte[]" (§ count (.. header size))))
        (.. in (get payloadBytes, 0, (.. header size)))

        ;; Verify the checksum.
        (§ var #_"byte[]" (§ name hash))
        (§ ass (§ name hash) (Sha256Hash/hashTwice payloadBytes))
        (§ if (§ expr header.checksum[0] != (§ ai hash 0) || header.checksum[1] != (§ ai hash 1) || header.checksum[2] != (§ ai hash 2) || header.checksum[3] != (§ ai hash 3)))
        (§ block
            (§ throw (§ new #_"ProtocolException" (§ str "Checksum failed to verify, actual " + (.. HEX (encode hash)) + " vs " + (.. HEX (encode (.. header checksum))))))
        )

        (§ if (.. log (isDebugEnabled)))
        (§ block
            (.. log (debug "Received {} byte '{}' message: {}", (.. header size), (.. header command), (.. HEX (encode payloadBytes))))
        )

        (§ try )
        (§ block
            (§ return (makeMessage (.. header command), (.. header size), payloadBytes, hash, (.. header checksum)))
        )
        (§ catch #_"Exception" (§ name e))
        (§ block
            (§ throw (§ new #_"ProtocolException" (§ expr "Error deserializing message " + (.. HEX (encode payloadBytes)) + "\n"), e))
        )
    )

    #_private
    (§ method- #_"Message" (§ fn makeMessage) [#_"String" (§ name command), #_"int" (§ name length), #_"byte[]" (§ name payloadBytes), #_"byte[]" (§ name hash), #_"byte[]" (§ name checksum)])
        (§ throws #_"ProtocolException")
    (§ block
        ;; We use an if ladder rather than reflection because reflection is very slow on Android.
        (§ if (.. command (equals "version")))
        (§ block
            (§ return (§ new #_"VersionMessage" params, payloadBytes))
        )
        (§ if (.. command (equals "inv")))
        (§ block
            (§ return (makeInventoryMessage payloadBytes, length))
        )
        (§ if (.. command (equals "block")))
        (§ block
            (§ return (makeBlock payloadBytes, length))
        )
        (§ if (.. command (equals "merkleblock")))
        (§ block
            (§ return (makeFilteredBlock payloadBytes))
        )
        (§ if (.. command (equals "getdata")))
        (§ block
            (§ return (§ new #_"GetDataMessage" params, payloadBytes, this, length))
        )
        (§ if (.. command (equals "getblocks")))
        (§ block
            (§ return (§ new #_"GetBlocksMessage" params, payloadBytes))
        )
        (§ if (.. command (equals "getheaders")))
        (§ block
            (§ return (§ new #_"GetHeadersMessage" params, payloadBytes))
        )
        (§ if (.. command (equals "tx")))
        (§ block
            (§ return (makeTransaction payloadBytes, 0, length, hash))
        )
        (§ if (.. command (equals "addr")))
        (§ block
            (§ return (makeAddressMessage payloadBytes, length))
        )
        (§ if (.. command (equals "ping")))
        (§ block
            (§ return (§ new #_"Ping" params, payloadBytes))
        )
        (§ if (.. command (equals "pong")))
        (§ block
            (§ return (§ new #_"Pong" params, payloadBytes))
        )
        (§ if (.. command (equals "verack")))
        (§ block
            (§ return (§ new #_"VersionAck" params, payloadBytes))
        )
        (§ if (.. command (equals "headers")))
        (§ block
            (§ return (§ new #_"HeadersMessage" params, payloadBytes))
        )
        (§ if (.. command (equals "alert")))
        (§ block
            (§ return (makeAlertMessage payloadBytes))
        )
        (§ if (.. command (equals "filterload")))
        (§ block
            (§ return (makeBloomFilter payloadBytes))
        )
        (§ if (.. command (equals "notfound")))
        (§ block
            (§ return (§ new #_"NotFoundMessage" params, payloadBytes))
        )
        (§ if (.. command (equals "mempool")))
        (§ block
            (§ return (§ new #_"MemoryPoolMessage"))
        )
        (§ if (.. command (equals "reject")))
        (§ block
            (§ return (§ new #_"RejectMessage" params, payloadBytes))
        )
        (.. log (warn "No support for deserializing message with name {}", command))
        (§ new #_"UnknownMessage" params, command, payloadBytes)
    )

    ;;;
     ; Get the network parameters for this serializer.
     ;;
    #_public
    (§ method #_"NetworkParameters" (§ fn getParameters) [])
    (§ block
        params
    )

    ;;;
     ; Make an address message from the payload.  Extension point for alternative serialization format support.
     ;;
    #_override
    #_public
    (§ method #_"AddressMessage" (§ fn makeAddressMessage) [#_"byte[]" (§ name payloadBytes), #_"int" (§ name length)])
        (§ throws #_"ProtocolException")
    (§ block
        (§ new #_"AddressMessage" params, payloadBytes, this, length)
    )

    ;;;
     ; Make an alert message from the payload.  Extension point for alternative serialization format support.
     ;;
    #_override
    #_public
    (§ method #_"Message" (§ fn makeAlertMessage) [#_"byte[]" (§ name payloadBytes)])
        (§ throws #_"ProtocolException")
    (§ block
        (§ new #_"AlertMessage" params, payloadBytes)
    )

    ;;;
     ; Make a block from the payload.  Extension point for alternative serialization format support.
     ;;
    #_override
    #_public
    (§ method #_"Block" (§ fn makeBlock) [#_"byte[]" (§ name payloadBytes), #_"int" (§ name offset), #_"int" (§ name length)])
        (§ throws #_"ProtocolException")
    (§ block
        (§ new #_"Block" params, payloadBytes, offset, this, length)
    )

    ;;;
     ; Make an filter message from the payload.  Extension point for alternative serialization format support.
     ;;
    #_override
    #_public
    (§ method #_"Message" (§ fn makeBloomFilter) [#_"byte[]" (§ name payloadBytes)])
        (§ throws #_"ProtocolException")
    (§ block
        (§ new #_"BloomFilter" params, payloadBytes)
    )

    ;;;
     ; Make a filtered block from the payload.  Extension point for alternative serialization format support.
     ;;
    #_override
    #_public
    (§ method #_"FilteredBlock" (§ fn makeFilteredBlock) [#_"byte[]" (§ name payloadBytes)])
        (§ throws #_"ProtocolException")
    (§ block
        (§ new #_"FilteredBlock" params, payloadBytes)
    )

    ;;;
     ; Make an inventory message from the payload.  Extension point for alternative serialization format support.
     ;;
    #_override
    #_public
    (§ method #_"InventoryMessage" (§ fn makeInventoryMessage) [#_"byte[]" (§ name payloadBytes), #_"int" (§ name length)])
        (§ throws #_"ProtocolException")
    (§ block
        (§ new #_"InventoryMessage" params, payloadBytes, this, length)
    )

    ;;;
     ; Make a transaction from the payload.  Extension point for alternative serialization format support.
     ;;
    #_override
    #_public
    (§ method #_"Transaction" (§ fn makeTransaction) [#_"byte[]" (§ name payloadBytes), #_"int" (§ name offset), #_"int" (§ name length), #_"byte[]" (§ name hash)])
        (§ throws #_"ProtocolException")
    (§ block
        (§ var #_"Transaction" (§ name tx) (§ new #_"Transaction" params, payloadBytes, offset, nil, this, length))
        (§ if (some? hash))
        (§ block
            (.. tx (setHash (Sha256Hash/wrapReversed hash)))
        )
        tx
    )

    #_override
    #_public
    (§ method #_"void" (§ fn seekPastMagicBytes) [#_"ByteBuffer" (§ name in)])
        (§ throws #_"BufferUnderflowException")
    (§ block
        (§ var #_"int" (§ name magicCursor) 3) ;; Which byte of the magic we're looking for currently.
        (§ while true)
        (§ block
            (§ var #_"byte" (§ name b) (.. in (get)))
            ;; We're looking for a run of bytes that is the same as the packet magic but we want to ignore partial
            ;; magics that aren't complete.  So we keep track of where we're up to with magicCursor.
            (§ var #_"byte" (§ name expectedByte) (§ cast #_"byte" (§ expr 0xff & (.. params (getPacketMagic)) >>> (<< magicCursor 3))))
            (§ if (§ expr b == expectedByte))
            (§ block
                (§ ass (§ name magicCursor) (- magicCursor 1))
                (§ if (< magicCursor 0))
                (§ block
                    (§ return nil) ;; We found the magic sequence.
                )
            )
            (§ else )
            (§ block
                (§ ass (§ name magicCursor) 3)
            )
        )
        nil
    )

    ;;;
     ; Whether the serializer will produce cached mode Messages.
     ;;
    #_override
    #_public
    (§ method #_"boolean" (§ fn isParseRetainMode) [])
    (§ block
        parseRetain
    )

    #_public
    #_static
    (§ class #_"BitcoinPacketHeader"
        ;;; The largest number of bytes that a header can represent. ;;
        #_public
        #_static
        (§ def #_"int" (§ name HEADER_LENGTH) (§ expr COMMAND_LEN + 4 + 4))

        #_public
        (§ field #_"byte[]" (§ name header))
        #_public
        (§ field #_"String" (§ name command))
        #_public
        (§ field #_"int" (§ name size))
        #_public
        (§ field #_"byte[]" (§ name checksum))

        #_public
        (§ constructor #_"BitcoinPacketHeader" [#_"ByteBuffer" (§ name in)])
            (§ throws #_"ProtocolException", #_"BufferUnderflowException")
        (§ block
            (§ ass (§ name header) (§ new #_"byte[]" (§ count HEADER_LENGTH)))
            (.. in (get header, 0, (.. header length)))

            (§ var #_"int" (§ name cursor) 0)

            ;; The command is a NULL terminated string, unless the command fills all twelve bytes
            ;; in which case the termination is implicit.
            (§ while (§ expr (§ ai header cursor) != 0 && cursor < COMMAND_LEN))
            (§ block
                (§ ass (§ name cursor) (+ cursor 1))
            )
            (§ var #_"byte[]" (§ name commandBytes) (§ new #_"byte[]" (§ count cursor)))
            (System/arraycopy header, 0, commandBytes, 0, cursor)
            (§ ass (§ name command) (Utils/toString commandBytes, "US-ASCII"))
            (§ ass (§ name cursor) COMMAND_LEN)

            (§ ass (§ name size) (§ cast #_"int" (readUint32 header, cursor)))
            (§ ass (§ name cursor) (+ cursor 4))

            (§ if (§ expr Message/MAX_SIZE < size || size < 0))
            (§ block
                (§ throw (§ new #_"ProtocolException" (§ expr "Message size too large: " + size)))
            )

            ;; Old clients don't send the checksum.
            (§ ass (§ name checksum) (§ new #_"byte[]" (§ count 4)))
            ;; Note that the size read above includes the checksum bytes.
            (System/arraycopy header, cursor, checksum, 0, 4)
            (§ ass (§ name cursor) (+ cursor 4))
            this
        )
    )
)

#_(ns org.bitcoinj.core #_"Block"
    (:import [java.io *]
             [java.math *]
             [java.util *])
    (:import [com.google.common.annotations *]
             [com.google.common.base *]
             [com.google.common.collect *]
             [org.slf4j *])
   (:require [org.bitcoinj.script *]
             #_static [org.bitcoinj.core.Coin *]
             #_static [org.bitcoinj.core.Sha256Hash *]))

;;;
 ; <p>A block is a group of transactions, and is one of the fundamental data structures of the Bitcoin system.
 ; It records a set of {@link Transaction}s together with some data that links it into a place in the global block chain,
 ; and proves that a difficult calculation was done over its contents.
 ; See <a href="http://www.bitcoin.org/bitcoin.pdf">the Bitcoin technical paper</a> for more detail on blocks.
 ;
 ; <p>To get a block, you can either build one from the raw bytes you can get from another implementation, or request one
 ; specifically using {@link Peer#getBlock(Sha256Hash)}, or grab one from a downloaded {@link BlockChain}.</p>
 ;
 ; <p>Instances of this class are not safe for use by multiple threads.</p>
 ;;
#_public
(§ class #_"Block" (§ extends #_"Message")
    ;;;
     ; Flags used to control which elements of block validation are done on received blocks.
     ;;
    #_public
    (§ enum #_"VerifyFlag"
        ;;; Check that block height is in coinbase transaction (BIP 34). ;;
        (§ item HEIGHT_IN_COINBASE)
    )

    #_private
    #_static
    (§ def- #_"Logger" (§ name log) (LoggerFactory/getLogger (§ klass #_"Block")))

    ;;; How many bytes are required to represent a block header WITHOUT the trailing 00 length byte. ;;
    #_public
    #_static
    (§ def #_"int" (§ name HEADER_SIZE) 80)

    #_static
    (§ def #_"long" (§ name ALLOWED_TIME_DRIFT) (§ expr 2 * 60 * 60)) ;; Same value as Bitcoin Core.

    ;;;
     ; A constant shared by the entire network: how large in bytes a block is allowed to be.  One day we may have to
     ; upgrade everyone to change this, so Bitcoin can continue to grow.  For now it exists as an anti-DoS measure to
     ; avoid somebody creating a titanically huge but valid block and forcing everyone to download/store it forever.
     ;;
    #_public
    #_static
    (§ def #_"int" (§ name MAX_BLOCK_SIZE) (§ expr 1 * 1000 * 1000))
    ;;;
     ; A "sigop" is a signature verification operation.  Because they're expensive, we also impose a separate limit on
     ; the number in a block to prevent somebody mining a huge block that has way more sigops than normal, so is very
     ; expensive/slow to verify.
     ;;
    #_public
    #_static
    (§ def #_"int" (§ name MAX_BLOCK_SIGOPS) (/ MAX_BLOCK_SIZE 50))

    ;;; A value for difficultyTarget (nBits) that allows half of all possible hash solutions.  Used in unit testing. ;;
    #_public
    #_static
    (§ def #_"long" (§ name EASIEST_DIFFICULTY_TARGET) 0x207fffff)

    ;;; Value to use if the block height is unknown. ;;
    #_public
    #_static
    (§ def #_"int" (§ name BLOCK_HEIGHT_UNKNOWN) -1)
    ;;; Height of the first block. ;;
    #_public
    #_static
    (§ def #_"int" (§ name BLOCK_HEIGHT_GENESIS) 0)

    #_public
    #_static
    (§ def #_"long" (§ name BLOCK_VERSION_GENESIS) 1)
    ;;; Block version introduced in BIP 34: Height in coinbase. ;;
    #_public
    #_static
    (§ def #_"long" (§ name BLOCK_VERSION_BIP34) 2)
    ;;; Block version introduced in BIP 66: Strict DER signatures. ;;
    #_public
    #_static
    (§ def #_"long" (§ name BLOCK_VERSION_BIP66) 3)
    ;;; Block version introduced in BIP 65: OP_CHECKLOCKTIMEVERIFY ;;
    #_public
    #_static
    (§ def #_"long" (§ name BLOCK_VERSION_BIP65) 4)

    ;; Fields defined as part of the protocol format.
    #_private
    (§ field- #_"long" (§ name version))
    #_private
    (§ field- #_"Sha256Hash" (§ name prevBlockHash))
    #_private
    (§ field- #_"Sha256Hash" (§ name merkleRoot))
    #_private
    (§ field- #_"long" (§ name time))
    #_private
    (§ field- #_"long" (§ name difficultyTarget)) ;; "nBits"
    #_private
    (§ field- #_"long" (§ name nonce))

    ;; TODO: Get rid of all the direct accesses to this field.  It's a long-since unnecessary holdover from the Dalvik days.
    ;;; If null, it means this object holds only the headers. ;;
    #_nilable
    (§ field #_"List<Transaction>" (§ name transactions))

    ;;; Stores the hash of the block.  If null, getHash() will recalculate it. ;;
    #_private
    (§ field- #_"Sha256Hash" (§ name hash))

    #_protected
    (§ field #_"boolean" (§ name headerBytesValid))
    #_protected
    (§ field #_"boolean" (§ name transactionBytesValid))

    ;; Blocks can be encoded in a way that will use more bytes than is optimal (due to VarInts having multiple encodings).
    ;; MAX_BLOCK_SIZE must be compared to the optimal encoding, not the actual encoding, so when parsing, we keep track
    ;; of the size of the ideal encoding in addition to the actual message size (which Message needs).
    #_protected
    (§ field #_"int" (§ name optimalEncodingMessageSize))

    ;;; Special case constructor, used for the genesis node, cloneAsHeader and unit tests. ;;
    (§ constructor #_"Block" [#_"NetworkParameters" (§ name params), #_"long" (§ name setVersion)])
    (§ block
        (§ super params)

        ;; Set up a few basic things.  We are not complete after this though.
        (§ ass (§ name version) setVersion)
        (§ ass (§ name difficultyTarget) 0x1d07fff8)
        (§ ass (§ name time) (/ (System/currentTimeMillis) 1000))
        (§ ass (§ name prevBlockHash) Sha256Hash/ZERO_HASH)

        (§ ass (§ name length) HEADER_SIZE)
        this
    )

    ;;;
     ; Constructs a block object from the Bitcoin wire format.
     ; @deprecated Use {@link BitcoinSerializer#makeBlock(byte[])} instead.
     ;;
    #_deprecated
    #_public
    (§ constructor #_"Block" [#_"NetworkParameters" (§ name params), #_"byte[]" (§ name payloadBytes)])
        (§ throws #_"ProtocolException")
    (§ block
        (§ super params, payloadBytes, 0, (.. params (getDefaultSerializer)), (.. payloadBytes length))
        this
    )

    ;;;
     ; Construct a block object from the Bitcoin wire format.
     ; @param params NetworkParameters object.
     ; @param payloadBytes The payload to extract the block from.
     ; @param serializer The serializer to use for this message.
     ; @param length The length of message if known.  Usually this is provided when deserializing of the wire
     ; as the length will be provided as part of the header.  Set to Message.UNKNOWN_LENGTH, if not known.
     ; @throws ProtocolException
     ;;
    #_public
    (§ constructor #_"Block" [#_"NetworkParameters" (§ name params), #_"byte[]" (§ name payloadBytes), #_"MessageSerializer" (§ name serializer), #_"int" (§ name length)])
        (§ throws #_"ProtocolException")
    (§ block
        (§ super params, payloadBytes, 0, serializer, length)
        this
    )

    ;;;
     ; Construct a block object from the Bitcoin wire format.
     ; @param params NetworkParameters object.
     ; @param payloadBytes The payload to extract the block from.
     ; @param offset The location of the first payload byte within the array.
     ; @param serializer The serializer to use for this message.
     ; @param length The length of message if known.  Usually this is provided when deserializing of the wire
     ; as the length will be provided as part of the header.  Set to Message.UNKNOWN_LENGTH, if not known.
     ; @throws ProtocolException
     ;;
    #_public
    (§ constructor #_"Block" [#_"NetworkParameters" (§ name params), #_"byte[]" (§ name payloadBytes), #_"int" (§ name offset), #_"MessageSerializer" (§ name serializer), #_"int" (§ name length)])
        (§ throws #_"ProtocolException")
    (§ block
        (§ super params, payloadBytes, offset, serializer, length)
        this
    )

    ;;;
     ; Construct a block object from the Bitcoin wire format.  Used in the case of a block
     ; contained within another message (i.e. for AuxPoW header).
     ;
     ; @param params NetworkParameters object.
     ; @param payloadBytes Bitcoin protocol formatted byte array containing message content.
     ; @param offset The location of the first payload byte within the array.
     ; @param parent The message element which contains this block, maybe null for no parent.
     ; @param serializer The serializer to use for this block.
     ; @param length The length of message if known.  Usually this is provided when deserializing of the wire
     ; as the length will be provided as part of the header.  Set to Message.UNKNOWN_LENGTH, if not known.
     ; @throws ProtocolException
     ;;
    #_public
    (§ constructor #_"Block" [#_"NetworkParameters" (§ name params), #_"byte[]" (§ name payloadBytes), #_"int" (§ name offset), #_nilable #_"Message" (§ name parent), #_"MessageSerializer" (§ name serializer), #_"int" (§ name length)])
        (§ throws #_"ProtocolException")
    (§ block
        ;; TODO: Keep the parent.
        (§ super params, payloadBytes, offset, serializer, length)
        this
    )

    ;;;
     ; Construct a block initialized with all the given fields.
     ; @param params Which network the block is for.
     ; @param version This should usually be set to 1 or 2, depending on if the height is in the coinbase input.
     ; @param prevBlockHash Reference to previous block in the chain or {@link Sha256Hash#ZERO_HASH} if genesis.
     ; @param merkleRoot The root of the merkle tree formed by the transactions.
     ; @param time UNIX time when the block was mined.
     ; @param difficultyTarget Number which this block hashes lower than.
     ; @param nonce Arbitrary number to make the block hash lower than the target.
     ; @param transactions List of transactions including the coinbase.
     ;;
    #_public
    (§ constructor #_"Block" [#_"NetworkParameters" (§ name params), #_"long" (§ name version), #_"Sha256Hash" (§ name prevBlockHash), #_"Sha256Hash" (§ name merkleRoot), #_"long" (§ name time), #_"long" (§ name difficultyTarget), #_"long" (§ name nonce), #_"List<Transaction>" (§ name transactions)])
    (§ block
        (§ super params)

        (§ ass (§ name (.. this version)) version)
        (§ ass (§ name (.. this prevBlockHash)) prevBlockHash)
        (§ ass (§ name (.. this merkleRoot)) merkleRoot)
        (§ ass (§ name (.. this time)) time)
        (§ ass (§ name (.. this difficultyTarget)) difficultyTarget)
        (§ ass (§ name (.. this nonce)) nonce)
        (§ ass (§ name (.. this transactions)) (§ new #_"LinkedList<>"))
        (.. this transactions (addAll transactions))
        this
    )

    ;;;
     ; <p>A utility method that calculates how much new Bitcoin would be created by the block at the given height.
     ; The inflation of Bitcoin is predictable and drops roughly every 4 years (210,000 blocks).  At the dawn of
     ; the system it was 50 coins per block, in late 2012 it went to 25 coins per block, and so on.  The size of
     ; a coinbase transaction is inflation plus fees.</p>
     ;
     ; The half-life is controlled by {@link org.bitcoinj.core.NetworkParameters#getSubsidyDecreaseBlockCount()}.
     ;;
    #_public
    (§ method #_"Coin" (§ fn getBlockInflation) [#_"int" (§ name height)])
    (§ block
        (.. FIFTY_COINS (shiftRight (§ expr height / (.. params (getSubsidyDecreaseBlockCount)))))
    )

    ;;;
     ; Parse transactions from the block.
     ;
     ; @param transactionsOffset Offset of the transactions within the block.
     ; Useful for non-Bitcoin chains where the block header may not be a fixed size.
     ;;
    #_protected
    (§ method #_"void" (§ fn parseTransactions) [#_"int" (§ name transactionsOffset)])
        (§ throws #_"ProtocolException")
    (§ block
        (§ ass (§ name cursor) transactionsOffset)
        (§ ass (§ name optimalEncodingMessageSize) HEADER_SIZE)
        (§ if (== (.. payload length) cursor))
        (§ block
            ;; This message is just a header, it has no transactions.
            (§ ass (§ name transactionBytesValid) false)
            (§ return nil)
        )

        (§ var #_"int" (§ name numTransactions) (§ cast #_"int" (readVarInt)))
        (§ ass (§ name optimalEncodingMessageSize) (§ expr optimalEncodingMessageSize + (VarInt/sizeOf numTransactions)))
        (§ ass (§ name transactions) (§ new #_"ArrayList<>" numTransactions))
        (§ for (§ var #_"int" (§ name i) 0) :for (< i numTransactions) :for (§ ass (§ name i) (+ i 1)))
        (§ block
            (§ var #_"Transaction" (§ name tx) (§ new #_"Transaction" params, payload, cursor, this, serializer, UNKNOWN_LENGTH))
            ;; Label the transaction as coming from the P2P network, so code that cares where we first saw it knows.
            (.. tx (getConfidence) (setSource TransactionConfidence/Source/NETWORK))
            (.. transactions (add tx))
            (§ ass (§ name cursor) (§ expr cursor + (.. tx (getMessageSize))))
            (§ ass (§ name optimalEncodingMessageSize) (§ expr optimalEncodingMessageSize + (.. tx (getOptimalEncodingMessageSize))))
        )
        (§ ass (§ name transactionBytesValid) (.. serializer (isParseRetainMode)))
        nil
    )

    #_override
    #_protected
    (§ method #_"void" (§ fn parse) [])
        (§ throws #_"ProtocolException")
    (§ block
        ;; header
        (§ ass (§ name cursor) offset)
        (§ ass (§ name version) (readUint32))
        (§ ass (§ name prevBlockHash) (readHash))
        (§ ass (§ name merkleRoot) (readHash))
        (§ ass (§ name time) (readUint32))
        (§ ass (§ name difficultyTarget) (readUint32))
        (§ ass (§ name nonce) (readUint32))
        (§ ass (§ name hash) (Sha256Hash/wrapReversed (Sha256Hash/hashTwice payload, offset, (§ expr cursor - offset))))
        (§ ass (§ name headerBytesValid) (.. serializer (isParseRetainMode)))

        ;; transactions
        (parseTransactions (+ offset HEADER_SIZE))
        (§ ass (§ name length) (- cursor offset))
        nil
    )

    #_public
    (§ method #_"int" (§ fn getOptimalEncodingMessageSize) [])
    (§ block
        (§ if (§ expr optimalEncodingMessageSize != 0))
        (§ block
            (§ return optimalEncodingMessageSize)
        )
        (§ ass (§ name optimalEncodingMessageSize) (.. (bitcoinSerialize) length))
        optimalEncodingMessageSize
    )

    ;; default for testing
    (§ method #_"void" (§ fn writeHeader) [#_"OutputStream" (§ name stream)])
        (§ throws #_"IOException")
    (§ block
        ;; try for cached write first
        (§ if (§ expr headerBytesValid && payload != nil && offset + HEADER_SIZE <= (.. payload length)))
        (§ block
            (.. stream (write payload, offset, HEADER_SIZE))
            (§ return nil)
        )

        ;; fall back to manual write
        (Utils/uint32ToByteStreamLE version, stream)
        (.. stream (write (.. prevBlockHash (getReversedBytes))))
        (.. stream (write (.. (getMerkleRoot) (getReversedBytes))))
        (Utils/uint32ToByteStreamLE time, stream)
        (Utils/uint32ToByteStreamLE difficultyTarget, stream)
        (Utils/uint32ToByteStreamLE nonce, stream)
        nil
    )

    #_private
    (§ method- #_"void" (§ fn writeTransactions) [#_"OutputStream" (§ name stream)])
        (§ throws #_"IOException")
    (§ block
        ;; check for no transaction conditions first
        (§ if (nil? transactions))
        (§ block
            (§ return nil)
        )

        ;; confirmed we must have transactions either cached or as objects
        (§ if (§ expr transactionBytesValid && payload != nil && offset + length <= (.. payload length)))
        (§ block
            (.. stream (write payload, (§ expr offset + HEADER_SIZE), (§ expr length - HEADER_SIZE)))
            (§ return nil)
        )

        (§ if (some? transactions))
        (§ block
            (.. stream (write (.. (§ new #_"VarInt" (.. transactions (size))) (encode))))
            (§ for (§ var #_"Transaction" (§ name tx)) :for transactions)
            (§ block
                (.. tx (bitcoinSerialize stream))
            )
        )
        nil
    )

    ;;;
     ; Special handling to check if we have a valid byte array for both header and transactions.
     ;
     ; @throws IOException
     ;;
    #_override
    #_public
    (§ method #_"byte[]" (§ fn bitcoinSerialize) [])
    (§ block
        ;; we have completely cached byte array
        (§ if (§ expr headerBytesValid && transactionBytesValid))
        (§ block
            (Preconditions/checkNotNull payload, "Bytes should never be nil if headerBytesValid && transactionBytesValid")
            (§ if (§ expr length == (.. payload length)))
            (§ block
                (§ return payload)
            )

            ;; byte array is offset, so copy out the correct range
            (§ var #_"byte[]" (§ name buf) (§ new #_"byte[]" (§ count length)))
            (System/arraycopy payload, offset, buf, 0, length)
            (§ return buf)
        )

        ;; At least one of the two cacheable components is invalid, so fall back to stream write since we can't be sure of the length.
        (§ var #_"ByteArrayOutputStream" (§ name stream) (§ new #_"UnsafeByteArrayOutputStream" (if (== length UNKNOWN_LENGTH) (+ HEADER_SIZE (guessTransactionsLength)) length)))
        (§ try )
        (§ block
            (writeHeader stream)
            (writeTransactions stream)
        )
        (§ catch #_"IOException" (§ name e))
        (§ block
            ;; Cannot happen, we are serializing to a memory stream.
        )
        (.. stream (toByteArray))
    )

    #_override
    #_protected
    (§ method #_"void" (§ fn bitcoinSerializeToStream) [#_"OutputStream" (§ name stream)])
        (§ throws #_"IOException")
    (§ block
        (writeHeader stream)
        ;; We may only have enough data to write the header.
        (writeTransactions stream)
        nil
    )

    ;;;
     ; Provides a reasonable guess at the byte length of the transactions part of the block.
     ; The returned value will be accurate in 99% of cases and in those cases where not will probably slightly oversize.
     ;
     ; This is used to preallocate the underlying byte array for a ByteArrayOutputStream.  If the size is under the
     ; real value the only penalty is resizing of the underlying byte array.
     ;;
    #_private
    (§ method- #_"int" (§ fn guessTransactionsLength) [])
    (§ block
        (§ if transactionBytesValid)
        (§ block
            (§ return (- (.. payload length) HEADER_SIZE))
        )
        (§ if (nil? transactions))
        (§ block
            (§ return 0)
        )
        (§ var #_"int" (§ name len) (VarInt/sizeOf (.. transactions (size))))
        (§ for (§ var #_"Transaction" (§ name tx)) :for transactions)
        (§ block
            ;; 255 is just a guess at an average tx length
            (§ ass (§ name len) (+ len (if (== (.. tx length) UNKNOWN_LENGTH) 255 (.. tx length))))
        )
        len
    )

    #_override
    #_protected
    (§ method #_"void" (§ fn unCache) [])
    (§ block
        ;; Since we have alternate uncache methods to use internally, this will only ever be called by a child
        ;; transaction, so we only need to invalidate that part of the cache.
        (unCacheTransactions)
        nil
    )

    #_private
    (§ method- #_"void" (§ fn unCacheHeader) [])
    (§ block
        (§ ass (§ name headerBytesValid) false)
        (§ if (§ not transactionBytesValid))
        (§ block
            (§ ass (§ name payload) nil)
        )
        (§ ass (§ name hash) nil)
        nil
    )

    #_private
    (§ method- #_"void" (§ fn unCacheTransactions) [])
    (§ block
        (§ ass (§ name transactionBytesValid) false)
        (§ if (§ not headerBytesValid))
        (§ block
            (§ ass (§ name payload) nil)
        )
        ;; Current implementation has to uncache headers as well as any change to a tx will alter the merkle root.
        ;; In future, we can go more granular and cache merkle root separately so rest of the header does not need to be rewritten.
        (unCacheHeader)
        ;; Clear merkleRoot last as it may end up being parsed during unCacheHeader().
        (§ ass (§ name merkleRoot) nil)
        nil
    )

    ;;;
     ; Calculates the block hash by serializing the block and hashing the resulting bytes.
     ;;
    #_private
    (§ method- #_"Sha256Hash" (§ fn calculateHash) [])
    (§ block
        (§ try )
        (§ block
            (§ var #_"ByteArrayOutputStream" (§ name bos) (§ new #_"UnsafeByteArrayOutputStream" HEADER_SIZE))
            (writeHeader bos)
            (§ return (Sha256Hash/wrapReversed (Sha256Hash/hashTwice (.. bos (toByteArray)))))
        )
        (§ catch #_"IOException" (§ name e))
        (§ block
            (§ throw (§ new #_"RuntimeException" e)) ;; Cannot happen.
        )
    )

    ;;;
     ; Returns the hash of the block (which for a valid, solved block should be below the target) in the form seen on
     ; the block explorer.  If you call this on block 1 in the mainnet chain,
     ; you will get "00000000839a8e6886ab5951d76f411475428afc90947ee320161bbf18eb6048".
     ;;
    #_public
    (§ method #_"String" (§ fn getHashAsString) [])
    (§ block
        (.. (getHash) (toString))
    )

    ;;;
     ; Returns the hash of the block (which for a valid, solved block should be
     ; below the target).  Big endian.
     ;;
    #_override
    #_public
    (§ method #_"Sha256Hash" (§ fn getHash) [])
    (§ block
        (§ if (nil? hash))
        (§ block
            (§ ass (§ name hash) (calculateHash))
        )
        hash
    )

    ;;;
     ; The number that is one greater than the largest representable SHA-256 hash.
     ;;
    #_private
    #_static
    (§ def- #_"BigInteger" (§ name LARGEST_HASH) (.. BigInteger/ONE (shiftLeft 256)))

    ;;;
     ; Returns the work represented by this block.
     ;
     ; Work is defined as the number of tries needed to solve a block in the
     ; average case.  Consider a difficulty target that covers 5% of all possible
     ; hash values.  Then the work of the block will be 20.  As the target gets
     ; lower, the amount of work goes up.
     ;;
    #_public
    (§ method #_"BigInteger" (§ fn getWork) [])
        (§ throws #_"VerificationException")
    (§ block
        (§ var #_"BigInteger" (§ name target) (getDifficultyTargetAsInteger))
        (.. LARGEST_HASH (divide (.. target (add BigInteger/ONE))))
    )

    ;;; Returns a copy of the block, but without any transactions. ;;
    #_public
    (§ method #_"Block" (§ fn cloneAsHeader) [])
    (§ block
        (§ var #_"Block" (§ name block) (§ new #_"Block" params, BLOCK_VERSION_GENESIS))
        (copyBitcoinHeaderTo block)
        block
    )

    ;;; Copy the block without transactions into the provided empty block. ;;
    #_protected
    (§ method #_"void" (§ fn copyBitcoinHeaderTo) [#_"Block" (§ name block)])
    (§ block
        (§ ass (§ name (.. block nonce)) nonce)
        (§ ass (§ name (.. block prevBlockHash)) prevBlockHash)
        (§ ass (§ name (.. block merkleRoot)) (getMerkleRoot))
        (§ ass (§ name (.. block version)) version)
        (§ ass (§ name (.. block time)) time)
        (§ ass (§ name (.. block difficultyTarget)) difficultyTarget)
        (§ ass (§ name (.. block transactions)) nil)
        (§ ass (§ name (.. block hash)) (getHash))
        nil
    )

    ;;;
     ; Returns a multi-line string containing a description of the contents of the block.
     ; Use for debugging purposes only.
     ;;
    #_override
    #_public
    (§ method #_"String" (§ fn toString) [])
    (§ block
        (§ var #_"StringBuilder" (§ name sb) (§ new #_"StringBuilder"))
        (.. sb (append " block: \n"))
        (.. sb (append "   hash: ") (append (getHashAsString)) (append "\n"))
        (.. sb (append "   version: ") (append version))
        (§ var #_"String" (§ name bips) (.. (Joiner/on ", ") (skipNulls) (join (when (isBIP34) "BIP34"), (when (isBIP66) "BIP66"), (when (isBIP65) "BIP65"))))
        (§ if (§ not (.. bips (isEmpty))))
        (§ block
            (.. sb (append " (") (append bips) (append ")"))
        )
        (.. sb (append "\n"))
        (.. sb (append "   previous block: ") (append (getPrevBlockHash)) (append "\n"))
        (.. sb (append "   merkle root: ") (append (getMerkleRoot)) (append "\n"))
        (.. sb (append "   time: ") (append time) (append " (") (append (Utils/dateTimeFormat (* time 1000))) (append ")\n"))
        (.. sb (append "   difficulty target (nBits): ") (append difficultyTarget) (append "\n"))
        (.. sb (append "   nonce: ") (append nonce) (append "\n"))
        (§ if (§ expr transactions != nil && 0 < (.. transactions (size))))
        (§ block
            (.. sb (append "   with ") (append (.. transactions (size))) (append " transaction(s):\n"))
            (§ for (§ var #_"Transaction" (§ name tx)) :for transactions)
            (§ block
                (.. sb (append tx))
            )
        )
        (.. sb (toString))
    )

    ;;;
     ; <p>Finds a value of nonce that makes the blocks hash lower than the difficulty target.  This is called mining,
     ; but solve() is far too slow to do real mining with.  It exists only for unit testing purposes.
     ;
     ; <p>This can loop forever if a solution cannot be found solely by incrementing nonce.  It doesn't change
     ; extraNonce.</p>
     ;;
    #_public
    (§ method #_"void" (§ fn solve) [])
    (§ block
        (§ while true)
        (§ block
            (§ try )
            (§ block
                ;; Is our proof of work valid yet?
                (§ if (checkProofOfWork false))
                (§ block
                    (§ return nil)
                )
                ;; No, so increment the nonce and try again.
                (setNonce (+ (getNonce) 1))
            )
            (§ catch #_"VerificationException" (§ name e))
            (§ block
                (§ throw (§ new #_"RuntimeException" e)) ;; Cannot happen.
            )
        )
        nil
    )

    ;;;
     ; Returns the difficulty target as a 256 bit value that can be compared to a SHA-256 hash.  Inside a block the
     ; target is represented using a compact form.  If this form decodes to a value that is out of bounds, an exception
     ; is thrown.
     ;;
    #_public
    (§ method #_"BigInteger" (§ fn getDifficultyTargetAsInteger) [])
        (§ throws #_"VerificationException")
    (§ block
        (§ var #_"BigInteger" (§ name target) (Utils/decodeCompactBits difficultyTarget))
        (§ if (§ expr (.. target (signum)) <= 0 || 0 < (.. target (compareTo (.. params maxTarget)))))
        (§ block
            (§ throw (§ new #_"VerificationException" (§ expr "Difficulty target is bad: " + target)))
        )
        target
    )

    ;;; Returns true if the hash of the block is OK (lower than difficulty target). ;;
    #_protected
    (§ method #_"boolean" (§ fn checkProofOfWork) [#_"boolean" (§ name throwException)])
        (§ throws #_"VerificationException")
    (§ block
        ;; This part is key - it is what proves the block was as difficult to make as it claims
        ;; to be.  Note however that in the context of this function, the block can claim to be
        ;; as difficult as it wants to be .... if somebody was able to take control of our network
        ;; connection and fork us onto a different chain, they could send us valid blocks with
        ;; ridiculously easy difficulty and this function would accept them.
        ;;
        ;; To prevent this attack from being possible, elsewhere we check that the difficultyTarget
        ;; field is of the right value.  This requires us to have the preceeding blocks.
        (§ var #_"BigInteger" (§ name target) (getDifficultyTargetAsInteger))

        (§ var #_"BigInteger" (§ name h) (.. (getHash) (toBigInteger)))
        (§ if (§ expr 0 < (.. h (compareTo target))))
        (§ block
            ;; Proof of work check failed!
            (§ if throwException)
            (§ block
                (§ throw (§ new #_"VerificationException" (§ expr "Hash is higher than target: " + (getHashAsString) + " vs " + (.. target (toString 16)))))
            )
            (§ else )
            (§ block
                (§ return false)
            )
        )
        true
    )

    #_private
    (§ method- #_"void" (§ fn checkTimestamp) [])
        (§ throws #_"VerificationException")
    (§ block
        (§ var #_"long" (§ name allowedTime) (+ (Utils/currentTimeSeconds) ALLOWED_TIME_DRIFT))
        (§ if (< allowedTime time))
        (§ block
            (§ throw (§ new #_"VerificationException" (String/format Locale/US, "Block too far in future: %s (%d) vs allowed %s (%d)", (Utils/dateTimeFormat (* time 1000)), time, (Utils/dateTimeFormat (* allowedTime 1000)), allowedTime)))
        )
        nil
    )

    #_private
    (§ method- #_"void" (§ fn checkSigOps) [])
        (§ throws #_"VerificationException")
    (§ block
        ;; Check there aren't too many signature verifications in the block.  This is an anti-DoS measure, see the
        ;; comments for MAX_BLOCK_SIGOPS.
        (§ var #_"int" (§ name sigOps) 0)
        (§ for (§ var #_"Transaction" (§ name tx)) :for transactions)
        (§ block
            (§ ass (§ name sigOps) (§ expr sigOps + (.. tx (getSigOpCount))))
        )

        (§ if (< MAX_BLOCK_SIGOPS sigOps))
        (§ block
            (§ throw (§ new #_"VerificationException" "Block had too many Signature Operations"))
        )
        nil
    )

    #_private
    (§ method- #_"void" (§ fn checkMerkleRoot) [])
        (§ throws #_"VerificationException")
    (§ block
        (§ var #_"Sha256Hash" (§ name calculatedRoot) (calculateMerkleRoot))
        (§ if (§ not (.. calculatedRoot (equals merkleRoot))))
        (§ block
            (.. log (error "Merkle tree did not verify"))
            (§ throw (§ new #_"VerificationException" (§ expr "Merkle hashes do not match: " + calculatedRoot + " vs " + merkleRoot)))
        )
        nil
    )

    #_private
    (§ method- #_"Sha256Hash" (§ fn calculateMerkleRoot) [])
    (§ block
        (§ var #_"List<byte[]>" (§ name tree) (buildMerkleTree))
        (Sha256Hash/wrap (.. tree (get (- (.. tree (size)) 1))))
    )

    #_private
    (§ method- #_"List<byte[]>" (§ fn buildMerkleTree) [])
    (§ block
        ;; The Merkle root is based on a tree of hashes calculated from the transactions:
        ;;
        ;;     root
        ;;     /  \
        ;;   A      B
        ;;  / \    / \
        ;; t1 t2  t3 t4
        ;;
        ;; The tree is represented as a list: (t1 t2 t3 t4 A B root), where each entry is a hash.
        ;;
        ;; The hashing algorithm is double SHA-256.  The leaves are a hash of the serialized contents of the transaction.
        ;; The interior nodes are hashes of the concenation of the two child hashes.
        ;;
        ;; This structure allows the creation of proof that a transaction was included into a block without having to
        ;; provide the full block contents.  Instead, you can provide only a Merkle branch.  For example to prove tx2 was
        ;; in a block you can just provide tx2, the hash(tx1) and B.  Now the other party has everything they need to
        ;; derive the root, which can be checked against the block header.  These proofs aren't used right now but
        ;; will be helpful later when we want to download partial block contents.
        ;;
        ;; Note that if the number of transactions is not even, the last tx is repeated to make it so (see tx3 above).
        ;; A tree with 5 transactions would look like this:
        ;;
        ;;          root
        ;;        /      \
        ;;      1          5
        ;;    /   \       / \
        ;;   2     3     4   4
        ;;  / \   / \   / \
        ;; t1 t2 t3 t4 t5 t5
        (§ var #_"ArrayList<byte[]>" (§ name tree) (§ new #_"ArrayList<>"))
        ;; Start by adding all the hashes of the transactions as leaves of the tree.
        (§ for (§ var #_"Transaction" (§ name t)) :for transactions)
        (§ block
            (.. tree (add (.. t (getHash) (getBytes))))
        )

        ;; Offset in the list where the currently processed level starts.
        (§ var #_"int" (§ name levelOffset) 0)
        ;; Step through each level, stopping when we reach the root (levelSize == 1).
        (§ for (§ var #_"int" (§ name levelSize) (.. transactions (size))) :for (< 1 levelSize) :for (§ ass (§ name levelSize) (/ (+ levelSize 1) 2)))
        (§ block
            ;; For each pair of nodes on that level:
            (§ for (§ var #_"int" (§ name left) 0) :for (< left levelSize) :for (§ ass (§ name left) (+ left 2)))
            (§ block
                ;; The right hand node can be the same as the left hand, in the case where we don't have enough transactions.
                (§ var #_"int" (§ name right) (Math/min (§ expr left + 1), (§ expr levelSize - 1)))
                (§ var #_"byte[]" (§ name leftBytes) (Utils/reverseBytes (.. tree (get (+ levelOffset left)))))
                (§ var #_"byte[]" (§ name rightBytes) (Utils/reverseBytes (.. tree (get (+ levelOffset right)))))
                (.. tree (add (Utils/reverseBytes (hashTwice leftBytes, 0, 32, rightBytes, 0, 32))))
            )
            ;; Move to the next level.
            (§ ass (§ name levelOffset) (+ levelOffset levelSize))
        )
        tree
    )

    ;;;
     ; Verify the transactions on a block.
     ;
     ; @param height Block height, if known, or -1 otherwise.
     ;               If provided, used to validate the coinbase input script of v2 and above blocks.
     ; @throws VerificationException if there was an error verifying the block.
     ;;
    #_private
    (§ method- #_"void" (§ fn checkTransactions) [#_"int" (§ name height), #_"EnumSet<VerifyFlag>" (§ name flags)])
        (§ throws #_"VerificationException")
    (§ block
        ;; The first transaction in a block must always be a coinbase transaction.
        (§ if (§ not (.. transactions (get 0) (isCoinBase))))
        (§ block
            (§ throw (§ new #_"VerificationException" "First tx is not coinbase"))
        )

        (§ if (§ expr (.. flags (contains Block/VerifyFlag/HEIGHT_IN_COINBASE)) && BLOCK_HEIGHT_GENESIS <= height))
        (§ block
            (.. transactions (get 0) (checkCoinBaseHeight height))
        )

        ;; The rest must not be.
        (§ for (§ var #_"int" (§ name i) 1) :for (§ expr i < (.. transactions (size))) :for (§ ass (§ name i) (+ i 1)))
        (§ block
            (§ if (.. transactions (get i) (isCoinBase)))
            (§ block
                (§ throw (§ new #_"VerificationException" (§ expr "TX " + i + " is coinbase when it should not be.")))
            )
        )
        nil
    )

    ;;;
     ; Checks the block data to ensure it follows the rules laid out in the network parameters.  Specifically,
     ; throws an exception if the proof of work is invalid, or if the timestamp is too far from what it should be.
     ; This is <b>not</b> everything that is required for a block to be valid, only what is checkable independent
     ; of the chain and without a transaction index.
     ;
     ; @throws VerificationException
     ;;
    #_public
    (§ method #_"void" (§ fn verifyHeader) [])
        (§ throws #_"VerificationException")
    (§ block
        ;; Prove that this block is OK.  It might seem that we can just ignore most of these checks given that the
        ;; network is also verifying the blocks, but we cannot as it'd open us to a variety of obscure attacks.
        ;;
        ;; Firstly we need to ensure this block does in fact represent real work done.  If the difficulty is high
        ;; enough, it's probably been done by the network.
        (checkProofOfWork true)
        (checkTimestamp)
        nil
    )

    ;;;
     ; Checks the block contents.
     ;
     ; @param height Block height, if known, or -1 otherwise.
     ;               If valid, used to validate the coinbase input script of v2 and above blocks.
     ; @param flags Flags to indicate which tests should be applied (i.e. whether to test for height in the coinbase transaction).
     ; @throws VerificationException if there was an error verifying the block.
     ;;
    #_public
    (§ method #_"void" (§ fn verifyTransactions) [#_"int" (§ name height), #_"EnumSet<VerifyFlag>" (§ name flags)])
        (§ throws #_"VerificationException")
    (§ block
        ;; Now we need to check that the body of the block actually matches the headers.  The network won't generate
        ;; an invalid block, but if we didn't validate this then an untrusted man-in-the-middle could obtain the next
        ;; valid block from the network and simply replace the transactions in it with their own fictional
        ;; transactions that reference spent or non-existant inputs.
        (§ if (.. transactions (isEmpty)))
        (§ block
            (§ throw (§ new #_"VerificationException" "Block had no transactions"))
        )
        (§ if (§ expr MAX_BLOCK_SIZE < (.. this (getOptimalEncodingMessageSize))))
        (§ block
            (§ throw (§ new #_"VerificationException" "Block larger than MAX_BLOCK_SIZE"))
        )
        (checkTransactions height, flags)
        (checkMerkleRoot)
        (checkSigOps)
        (§ for (§ var #_"Transaction" (§ name transaction)) :for transactions)
        (§ block
            (.. transaction (verify))
        )
        nil
    )

    ;;;
     ; Verifies both the header and that the transactions hash to the merkle root.
     ;
     ; @param height Block height, if known, or -1 otherwise.
     ; @param flags Flags to indicate which tests should be applied (i.e. whether to test for height in the coinbase transaction).
     ; @throws VerificationException if there was an error verifying the block.
     ;;
    #_public
    (§ method #_"void" (§ fn verify) [#_"int" (§ name height), #_"EnumSet<VerifyFlag>" (§ name flags)])
        (§ throws #_"VerificationException")
    (§ block
        (verifyHeader)
        (verifyTransactions height, flags)
        nil
    )

    #_override
    #_public
    (§ method #_"boolean" (§ fn equals) [#_"Object" (§ name o)])
    (§ block
        (§ if (§ expr this == o))
        (§ block
            (§ return true)
        )
        (§ if (§ expr o == nil || (getClass) != (.. o (getClass))))
        (§ block
            (§ return false)
        )
        (.. (getHash) (equals (.. (§ cast #_"Block" o) (getHash))))
    )

    #_override
    #_public
    (§ method #_"int" (§ fn hashCode) [])
    (§ block
        (.. (getHash) (hashCode))
    )

    ;;;
     ; Returns the merkle root in big endian form, calculating it from transactions if necessary.
     ;;
    #_public
    (§ method #_"Sha256Hash" (§ fn getMerkleRoot) [])
    (§ block
        (§ if (nil? merkleRoot))
        (§ block
            ;; TODO: Check if this is really necessary.
            (unCacheHeader)
            (§ ass (§ name merkleRoot) (calculateMerkleRoot))
        )
        merkleRoot
    )

    ;;; Exists only for unit testing. ;;
    (§ method #_"void" (§ fn setMerkleRoot) [#_"Sha256Hash" (§ name value)])
    (§ block
        (unCacheHeader)
        (§ ass (§ name merkleRoot) value)
        (§ ass (§ name hash) nil)
        nil
    )

    ;;; Adds a transaction to this block.  The nonce and merkle root are invalid after this. ;;
    #_public
    (§ method #_"void" (§ fn addTransaction) [#_"Transaction" (§ name t)])
    (§ block
        (addTransaction t, true)
        nil
    )

    ;;; Adds a transaction to this block, with or without checking the sanity of doing so. ;;
    (§ method #_"void" (§ fn addTransaction) [#_"Transaction" (§ name t), #_"boolean" (§ name runSanityChecks)])
    (§ block
        (unCacheTransactions)
        (§ if (nil? transactions))
        (§ block
            (§ ass (§ name transactions) (§ new #_"ArrayList<>"))
        )
        (.. t (setParent this))
        (§ if (§ expr runSanityChecks && (.. transactions (size)) == 0 && (§ not (.. t (isCoinBase)))))
        (§ block
            (§ throw (§ new #_"RuntimeException" (§ expr "Attempted to add a non-coinbase transaction as the first transaction: " + t)))
        )
        (§ if (§ expr runSanityChecks && 0 < (.. transactions (size)) && (.. t (isCoinBase))))
        (§ block
            (§ throw (§ new #_"RuntimeException" (§ expr "Attempted to add a coinbase transaction when there already is one: " + t)))
        )
        (.. transactions (add t))
        (adjustLength (.. transactions (size)), (.. t length))
        ;; Force a recalculation next time the values are needed.
        (§ ass (§ name merkleRoot) nil)
        (§ ass (§ name hash) nil)
        nil
    )

    ;;;
     ; Returns the version of the block data structure as defined by the Bitcoin protocol.
     ;;
    #_public
    (§ method #_"long" (§ fn getVersion) [])
    (§ block
        version
    )

    ;;;
     ; Returns the hash of the previous block in the chain, as defined by the block header.
     ;;
    #_public
    (§ method #_"Sha256Hash" (§ fn getPrevBlockHash) [])
    (§ block
        prevBlockHash
    )

    (§ method #_"void" (§ fn setPrevBlockHash) [#_"Sha256Hash" (§ name prevBlockHash)])
    (§ block
        (unCacheHeader)
        (§ ass (§ name (.. this prevBlockHash)) prevBlockHash)
        (§ ass (§ name (.. this hash)) nil)
        nil
    )

    ;;;
     ; Returns the time at which the block was solved and broadcast, according to the clock of the solving node.
     ; This is measured in seconds since the UNIX epoch (midnight Jan 1st 1970).
     ;;
    #_public
    (§ method #_"long" (§ fn getTimeSeconds) [])
    (§ block
        time
    )

    ;;;
     ; Returns the time at which the block was solved and broadcast, according to the clock of the solving node.
     ;;
    #_public
    (§ method #_"Date" (§ fn getTime) [])
    (§ block
        (§ new #_"Date" (* (getTimeSeconds) 1000))
    )

    #_public
    (§ method #_"void" (§ fn setTime) [#_"long" (§ name time)])
    (§ block
        (unCacheHeader)
        (§ ass (§ name (.. this time)) time)
        (§ ass (§ name (.. this hash)) nil)
        nil
    )

    ;;;
     ; Returns the difficulty of the proof of work that this block should meet encoded <b>in compact form</b>.
     ; The {@link BlockChain} verifies that this is not too easy by looking at the length of the chain when the block is added.
     ; To find the actual value the hash should be compared against, use {@link org.bitcoinj.core.Block#getDifficultyTargetAsInteger()}.
     ; Note that this is <b>not</b> the same as the difficulty value reported by the Bitcoin "getdifficulty" RPC that you may see on various block explorers.
     ; That number is the result of applying a formula to the underlying difficulty to normalize the minimum to 1.
     ; Calculating the difficulty that way is currently unsupported.
     ;;
    #_public
    (§ method #_"long" (§ fn getDifficultyTarget) [])
    (§ block
        difficultyTarget
    )

    ;;; Sets the difficulty target in compact form. ;;
    #_public
    (§ method #_"void" (§ fn setDifficultyTarget) [#_"long" (§ name compactForm)])
    (§ block
        (unCacheHeader)
        (§ ass (§ name (.. this difficultyTarget)) compactForm)
        (§ ass (§ name (.. this hash)) nil)
        nil
    )

    ;;;
     ; Returns the nonce, an arbitrary value that exists only to make the hash of the block header fall below the difficulty target.
     ;;
    #_public
    (§ method #_"long" (§ fn getNonce) [])
    (§ block
        nonce
    )

    ;;;
     ; Sets the nonce and clears any cached data.
     ;;
    #_public
    (§ method #_"void" (§ fn setNonce) [#_"long" (§ name nonce)])
    (§ block
        (unCacheHeader)
        (§ ass (§ name (.. this nonce)) nonce)
        (§ ass (§ name (.. this hash)) nil)
        nil
    )

    ;;; Returns an immutable list of transactions held in this block, or null if this object represents just a header. ;;
    #_nilable
    #_public
    (§ method #_"List<Transaction>" (§ fn getTransactions) [])
    (§ block
        (when (some? transactions) (ImmutableList/copyOf transactions))
    )

    ;; Used to make transactions unique.
    #_private
    #_static
    (§ def- #_"int" (§ name txCounter))

    ;;; Adds a coinbase transaction to the block.  This exists for unit tests.
     ;
     ; @param height Block height, if known, or -1 otherwise.
     ;;
    #_testing
    (§ method #_"void" (§ fn addCoinbaseTransaction) [#_"byte[]" (§ name pubKeyTo), #_"Coin" (§ name value), #_"int" (§ name height)])
    (§ block
        (unCacheTransactions)
        (§ ass (§ name transactions) (§ new #_"ArrayList<>"))
        (§ var #_"Transaction" (§ name coinbase) (§ new #_"Transaction" params))
        (§ var #_"ScriptBuilder" (§ name inputBuilder) (§ new #_"ScriptBuilder"))

        (§ if (<= Block/BLOCK_HEIGHT_GENESIS height))
        (§ block
            (.. inputBuilder (number height))
        )
        (.. inputBuilder (data (§ new #_"byte[]" (§ coll (§ cast #_"byte" txCounter), (§ cast #_"byte" (>> txCounter 8)) ))))
        (§ ass (§ name txCounter) (+ txCounter 1))

        ;; A real coinbase transaction has some stuff in the scriptSig like the extraNonce and difficulty.
        ;; The transactions are distinguished by every TX output going to a different key.
        ;;
        ;; Here we will do things a bit differently so a new address isn't needed every time.
        ;; We'll put a simple counter in the scriptSig, so every transaction has a different hash.
        (.. coinbase (addInput (§ new #_"TransactionInput" params, coinbase, (.. inputBuilder (build) (getProgram)))))
        (.. coinbase (addOutput (§ new #_"TransactionOutput" params, coinbase, value, (§ expr (.. (ScriptBuilder/createOutputScript (ECKey/fromPublicOnly pubKeyTo)) (getProgram))))))
        (.. transactions (add coinbase))
        (.. coinbase (setParent this))
        (§ ass (§ name (.. coinbase length)) (.. coinbase (unsafeBitcoinSerialize) length))
        (adjustLength (.. transactions (size)), (.. coinbase length))
        nil
    )

    #_static
    (§ def #_"byte[]" (§ name EMPTY_BYTES) (§ new #_"byte[]" (§ count 32)))

    ;; It's pretty weak to have this around at runtime: fix later.
    #_private
    #_static
    (§ def- #_"byte[]" (§ name pubkeyForTesting) (.. (§ new #_"ECKey") (getPubKey)))

    ;;;
     ; Returns a solved block that builds on top of this one.  This exists for unit tests.
     ;;
    #_testing
    #_public
    (§ method #_"Block" (§ fn createNextBlock) [#_"Address" (§ name to), #_"long" (§ name version), #_"long" (§ name time), #_"int" (§ name blockHeight)])
    (§ block
        (createNextBlock to, version, nil, time, pubkeyForTesting, FIFTY_COINS, blockHeight)
    )

    ;;;
     ; Returns a solved block that builds on top of this one.  This exists for unit tests.
     ; In this variant you can specify a public key (pubkey) for use in generating coinbase blocks.
     ;
     ; @param height Block height, if known, or -1 otherwise.
     ;;
    (§ method #_"Block" (§ fn createNextBlock) [#_nilable #_"Address" (§ name to), #_"long" (§ name version), #_nilable #_"TransactionOutPoint" (§ name prevOut), #_"long" (§ name time), #_"byte[]" (§ name pubKey), #_"Coin" (§ name coinbaseValue), #_"int" (§ name height)])
    (§ block
        (§ var #_"Block" (§ name b) (§ new #_"Block" params, version))
        (.. b (setDifficultyTarget difficultyTarget))
        (.. b (addCoinbaseTransaction pubKey, coinbaseValue, height))

        (§ if (some? to))
        (§ block
            ;; Add a transaction paying 50 coins to the "to" address.
            (§ var #_"Transaction" (§ name t) (§ new #_"Transaction" params))
            (.. t (addOutput (§ new #_"TransactionOutput" params, t, FIFTY_COINS, to)))
            ;; The input does not really need to be a valid signature, as long as it has the right general form.
            (§ var #_"TransactionInput" (§ name input))
            (§ if (nil? prevOut))
            (§ block
                (§ ass (§ name input) (§ new #_"TransactionInput" params, t, (Script/createInputScript EMPTY_BYTES, EMPTY_BYTES)))
                ;; Importantly, the outpoint hash cannot be zero as that's how we detect a coinbase transaction in isolation,
                ;; but it must be unique to avoid 'different' transactions looking the same.
                (§ var #_"byte[]" (§ name counter) (§ new #_"byte[]" (§ count 32)))
                (§ ass (§ name (§ ai counter 0)) (§ cast #_"byte" txCounter))
                (§ ass (§ name (§ ai counter 1)) (§ cast #_"byte" (>> txCounter 8)))
                (§ ass (§ name txCounter) (+ txCounter 1))
                (.. input (getOutpoint) (setHash (Sha256Hash/wrap counter)))
            )
            (§ else )
            (§ block
                (§ ass (§ name input) (§ new #_"TransactionInput" params, t, (Script/createInputScript EMPTY_BYTES, EMPTY_BYTES), prevOut))
            )
            (.. t (addInput input))
            (.. b (addTransaction t))
        )

        (.. b (setPrevBlockHash (getHash)))
        ;; Don't let timestamp go backwards.
        (§ if (<= time (getTimeSeconds)))
        (§ block
            (.. b (setTime (+ (getTimeSeconds) 1)))
        )
        (§ else )
        (§ block
            (.. b (setTime time))
        )
        (.. b (solve))
        (§ try )
        (§ block
            (.. b (verifyHeader))
        )
        (§ catch #_"VerificationException" (§ name e))
        (§ block
            (§ throw (§ new #_"RuntimeException" e)) ;; Cannot happen.
        )
        (§ if (!= (.. b (getVersion)) version))
        (§ block
            (§ throw (§ new #_"RuntimeException"))
        )
        b
    )

    #_testing
    #_public
    (§ method #_"Block" (§ fn createNextBlock) [#_nilable #_"Address" (§ name to), #_"TransactionOutPoint" (§ name prevOut)])
    (§ block
        (createNextBlock to, BLOCK_VERSION_GENESIS, prevOut, (§ expr (getTimeSeconds) + 5), pubkeyForTesting, FIFTY_COINS, BLOCK_HEIGHT_UNKNOWN)
    )

    #_testing
    #_public
    (§ method #_"Block" (§ fn createNextBlock) [#_nilable #_"Address" (§ name to), #_"Coin" (§ name value)])
    (§ block
        (createNextBlock to, BLOCK_VERSION_GENESIS, nil, (§ expr (getTimeSeconds) + 5), pubkeyForTesting, value, BLOCK_HEIGHT_UNKNOWN)
    )

    #_testing
    #_public
    (§ method #_"Block" (§ fn createNextBlock) [#_nilable #_"Address" (§ name to)])
    (§ block
        (createNextBlock to, FIFTY_COINS)
    )

    #_testing
    #_public
    (§ method #_"Block" (§ fn createNextBlockWithCoinbase) [#_"long" (§ name version), #_"byte[]" (§ name pubKey), #_"Coin" (§ name coinbaseValue), #_"int" (§ name height)])
    (§ block
        (createNextBlock nil, version, (§ cast #_"TransactionOutPoint" nil), (Utils/currentTimeSeconds), pubKey, coinbaseValue, height)
    )

    ;;;
     ; Create a block sending 50BTC as a coinbase transaction to the public key specified.
     ; This method is intended for test use only.
     ;;
    #_testing
    (§ method #_"Block" (§ fn createNextBlockWithCoinbase) [#_"long" (§ name version), #_"byte[]" (§ name pubKey), #_"int" (§ name height)])
    (§ block
        (createNextBlock nil, version, (§ cast #_"TransactionOutPoint" nil), (Utils/currentTimeSeconds), pubKey, FIFTY_COINS, height)
    )

    #_testing
    (§ method #_"boolean" (§ fn isHeaderBytesValid) [])
    (§ block
        headerBytesValid
    )

    #_testing
    (§ method #_"boolean" (§ fn isTransactionBytesValid) [])
    (§ block
        transactionBytesValid
    )

    ;;;
     ; Return whether this block contains any transactions.
     ;
     ; @return true if the block contains transactions, false otherwise (is purely a header).
     ;;
    #_public
    (§ method #_"boolean" (§ fn hasTransactions) [])
    (§ block
        (§ not (.. this transactions (isEmpty)))
    )

    ;;;
     ; Returns whether this block conforms to
     ; <a href="https://github.com/bitcoin/bips/blob/master/bip-0034.mediawiki">BIP34: Height in Coinbase</a>.
     ;;
    #_public
    (§ method #_"boolean" (§ fn isBIP34) [])
    (§ block
        (<= BLOCK_VERSION_BIP34 version)
    )

    ;;;
     ; Returns whether this block conforms to
     ; <a href="https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki">BIP66: Strict DER signatures</a>.
     ;;
    #_public
    (§ method #_"boolean" (§ fn isBIP66) [])
    (§ block
        (<= BLOCK_VERSION_BIP66 version)
    )

    ;;;
     ; Returns whether this block conforms to
     ; <a href="https://github.com/bitcoin/bips/blob/master/bip-0065.mediawiki">BIP65: OP_CHECKLOCKTIMEVERIFY</a>.
     ;;
    #_public
    (§ method #_"boolean" (§ fn isBIP65) [])
    (§ block
        (<= BLOCK_VERSION_BIP65 version)
    )
)

#_(ns org.bitcoinj.core #_"BlockChain"
    (:import [java.util ArrayList List])
    (:import [com.google.common.base Preconditions])
   (:require [org.bitcoinj.store BlockStore BlockStoreException]
             [org.bitcoinj.wallet Wallet]))

;; TODO: Rename this class to SPVBlockChain at some point.

;;;
 ; A BlockChain implements the <i>simplified payment verification</i> mode of the Bitcoin protocol.  It is the right
 ; choice to use for programs that have limited resources as it won't verify transactions signatures or attempt to store
 ; all of the block chain.  Really, this class should be called SPVBlockChain but for backwards compatibility it is not.
 ;;
#_public
(§ class #_"BlockChain" (§ extends #_"AbstractBlockChain")
    ;;; Keeps a map of block hashes to StoredBlocks. ;;
    #_protected
    (§ field #_"BlockStore" (§ name blockStore))

    ;;;
     ; <p>Constructs a BlockChain connected to the given wallet and store.  To obtain a {@link Wallet} you can construct
     ; one from scratch, or you can deserialize a saved wallet from disk using {@link Wallet#loadFromFile(java.io.File)}.</p>
     ;
     ; <p>For the store, you should use {@link org.bitcoinj.store.SPVBlockStore} or you could also try a
     ; {@link org.bitcoinj.store.MemoryBlockStore} if you want to hold all headers in RAM and don't care about
     ; disk serialization (this is rare).</p>
     ;;
    #_public
    (§ constructor #_"BlockChain" [#_"Context" (§ name context), #_"Wallet" (§ name wallet), #_"BlockStore" (§ name blockStore)])
        (§ throws #_"BlockStoreException")
    (§ block
        (§ this context, (§ new #_"ArrayList<Wallet>"), blockStore)
        (addWallet wallet)
        this
    )

    ;;; See {@link #BlockChain(Context, Wallet, BlockStore)}}. ;;
    #_public
    (§ constructor #_"BlockChain" [#_"NetworkParameters" (§ name params), #_"Wallet" (§ name wallet), #_"BlockStore" (§ name blockStore)])
        (§ throws #_"BlockStoreException")
    (§ block
        (§ this (Context/getOrCreate params), wallet, blockStore)
        this
    )

    ;;;
     ; Constructs a BlockChain that has no wallet at all.  This is helpful when you don't actually care about sending
     ; and receiving coins but rather, just want to explore the network data structures.
     ;;
    #_public
    (§ constructor #_"BlockChain" [#_"Context" (§ name context), #_"BlockStore" (§ name blockStore)])
        (§ throws #_"BlockStoreException")
    (§ block
        (§ this context, (§ new #_"ArrayList<Wallet>"), blockStore)
        this
    )

    ;;; See {@link #BlockChain(Context, BlockStore)}. ;;
    #_public
    (§ constructor #_"BlockChain" [#_"NetworkParameters" (§ name params), #_"BlockStore" (§ name blockStore)])
        (§ throws #_"BlockStoreException")
    (§ block
        (§ this params, (§ new #_"ArrayList<Wallet>"), blockStore)
        this
    )

    ;;;
     ; Constructs a BlockChain connected to the given list of listeners and a store.
     ;;
    #_public
    (§ constructor #_"BlockChain" [#_"Context" (§ name params), #_"List<? extends Wallet>" (§ name wallets), #_"BlockStore" (§ name blockStore)])
        (§ throws #_"BlockStoreException")
    (§ block
        (§ super params, wallets, blockStore)
        (§ ass (§ name (.. this blockStore)) blockStore)
        this
    )

    ;;; See {@link #BlockChain(Context, List, BlockStore)}. ;;
    #_public
    (§ constructor #_"BlockChain" [#_"NetworkParameters" (§ name params), #_"List<? extends Wallet>" (§ name wallets), #_"BlockStore" (§ name blockStore)])
        (§ throws #_"BlockStoreException")
    (§ block
        (§ this (Context/getOrCreate params), wallets, blockStore)
        this
    )

    #_override
    #_protected
    (§ method #_"StoredBlock" (§ fn addToBlockStore) [#_"StoredBlock" (§ name storedPrev), #_"Block" (§ name blockHeader), #_"TransactionOutputChanges" (§ name txOutChanges)])
        (§ throws #_"BlockStoreException", #_"VerificationException")
    (§ block
        (§ var #_"StoredBlock" (§ name newBlock) (.. storedPrev (build blockHeader)))
        (.. blockStore (put newBlock))
        newBlock
    )

    #_override
    #_protected
    (§ method #_"StoredBlock" (§ fn addToBlockStore) [#_"StoredBlock" (§ name storedPrev), #_"Block" (§ name blockHeader)])
        (§ throws #_"BlockStoreException", #_"VerificationException")
    (§ block
        (§ var #_"StoredBlock" (§ name newBlock) (.. storedPrev (build blockHeader)))
        (.. blockStore (put newBlock))
        newBlock
    )

    #_override
    #_protected
    (§ method #_"void" (§ fn rollbackBlockStore) [#_"int" (§ name height)])
        (§ throws #_"BlockStoreException")
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ var #_"int" (§ name currentHeight) (getBestChainHeight))
            (Preconditions/checkArgument (§ expr 0 <= height && height <= currentHeight), "Bad height: %s", height)
            (§ if (§ expr height == currentHeight))
            (§ block
                (§ return nil) ;; nothing to do
            )

            ;; Look for the block we want to be the new chain head.
            (§ var #_"StoredBlock" (§ name newChainHead) (.. blockStore (getChainHead)))
            (§ while (§ expr height < (.. newChainHead (getHeight))))
            (§ block
                (§ ass (§ name newChainHead) (.. newChainHead (getPrev blockStore)))
                (§ if (nil? newChainHead))
                (§ block
                    (§ throw (§ new #_"BlockStoreException" "Unreachable height"))
                )
            )

            ;; Modify store directly.
            (.. blockStore (put newChainHead))
            (.. this (setChainHead newChainHead))
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
        nil
    )

    #_override
    #_protected
    (§ method #_"boolean" (§ fn shouldVerifyTransactions) [])
    (§ block
        false
    )

    #_override
    #_protected
    (§ method #_"TransactionOutputChanges" (§ fn connectTransactions) [#_"int" (§ name height), #_"Block" (§ name block)])
    (§ block
        ;; Don't have to do anything as this is only called if shouldVerifyTransactions().
        (§ throw (§ new #_"UnsupportedOperationException"))
    )

    #_override
    #_protected
    (§ method #_"TransactionOutputChanges" (§ fn connectTransactions) [#_"StoredBlock" (§ name newBlock)])
    (§ block
        ;; Don't have to do anything as this is only called if shouldVerifyTransactions().
        (§ throw (§ new #_"UnsupportedOperationException"))
    )

    #_override
    #_protected
    (§ method #_"void" (§ fn disconnectTransactions) [#_"StoredBlock" (§ name block)])
    (§ block
        ;; Don't have to do anything as this is only called if shouldVerifyTransactions().
        (§ throw (§ new #_"UnsupportedOperationException"))
    )

    #_override
    #_protected
    (§ method #_"void" (§ fn doSetChainHead) [#_"StoredBlock" (§ name chainHead)])
        (§ throws #_"BlockStoreException")
    (§ block
        (.. blockStore (setChainHead chainHead))
        nil
    )

    #_override
    #_protected
    (§ method #_"void" (§ fn notSettingChainHead) [])
        (§ throws #_"BlockStoreException")
    (§ block
        ;; We don't use DB transactions here, so we don't need to do anything.
        nil
    )

    #_override
    #_protected
    (§ method #_"StoredBlock" (§ fn getStoredBlockInCurrentScope) [#_"Sha256Hash" (§ name hash)])
        (§ throws #_"BlockStoreException")
    (§ block
        (.. blockStore (get hash))
    )

    #_override
    #_public
    (§ method #_"boolean" (§ fn add) [#_"FilteredBlock" (§ name block)])
        (§ throws #_"VerificationException", #_"PrunedException")
    (§ block
        (§ var #_"boolean" (§ name success) (.. super (add block)))
        (§ if success)
        (§ block
            (trackFilteredTransactions (.. block (getTransactionCount)))
        )
        success
    )
)

#_(ns org.bitcoinj.core #_"BloomFilter"
    (:import [java.io IOException OutputStream]
             #_static [java.lang.Math *]
             [java.util ArrayList Arrays List])
    (:import [com.google.common.base Objects Preconditions]
             [com.google.common.collect Lists])
   (:require [org.bitcoinj.script Script ScriptChunk]))

;;;
 ; <p>A Bloom filter is a probabilistic data structure which can be sent to another client so that it can avoid
 ; sending us transactions that aren't relevant to our set of keys.  This allows for significantly more efficient
 ; use of available network bandwidth and CPU time.</p>
 ;
 ; <p>Because a Bloom filter is probabilistic, it has a configurable false positive rate.  So the filter will sometimes
 ; match transactions that weren't inserted into it, but it will never fail to match transactions that were.  This is
 ; a useful privacy feature - if you have spare bandwidth the false positive rate can be increased so the remote peer
 ; gets a noisy picture of what transactions are relevant to your wallet.</p>
 ;
 ; <p>Instances of this class are not safe for use by multiple threads.</p>
 ;;
#_public
(§ class #_"BloomFilter" (§ extends #_"Message")
    ;;;
     ; The BLOOM_UPDATE_* constants control when the bloom filter is auto-updated by the peer using
     ; it as a filter, either never, for all outputs or only for pay-2-pubkey outputs (default).
     ;;
    #_public
    (§ enum #_"BloomUpdate"
        (§ item UPDATE_NONE) ;; 0
        (§ item UPDATE_ALL) ;; 1
        ;;; Only adds outpoints to the filter if the output is a pay-to-pubkey/pay-to-multisig script. ;;
        (§ item UPDATE_P2PUBKEY_ONLY) ;; 2
    )

    #_private
    (§ field- #_"byte[]" (§ name data))
    #_private
    (§ field- #_"long" (§ name hashFuncs))
    #_private
    (§ field- #_"long" (§ name nTweak))
    #_private
    (§ field- #_"byte" (§ name nFlags))

    ;; Same value as of Bitcoin Core.
    ;; A filter of 20,000 items and a false positive rate of 0.1% or one of 10,000 items and 0.0001% is just under 36,000 bytes.
    #_private
    #_static
    (§ def- #_"long" (§ name MAX_FILTER_SIZE) 36000)
    ;; There is little reason to ever have more hash functions than 50 given a limit of 36,000 bytes.
    #_private
    #_static
    (§ def- #_"int" (§ name MAX_HASH_FUNCS) 50)

    ;;;
     ; Construct a BloomFilter by deserializing payloadBytes.
     ;;
    #_public
    (§ constructor #_"BloomFilter" [#_"NetworkParameters" (§ name params), #_"byte[]" (§ name payloadBytes)])
        (§ throws #_"ProtocolException")
    (§ block
        (§ super params, payloadBytes, 0)
        this
    )

    ;;;
     ; Constructs a filter with the given parameters which is updated on pay2pubkey outputs only.
     ;;
    #_public
    (§ constructor #_"BloomFilter" [#_"int" (§ name elements), #_"double" (§ name falsePositiveRate), #_"long" (§ name randomNonce)])
    (§ block
        (§ this elements, falsePositiveRate, randomNonce, BloomUpdate/UPDATE_P2PUBKEY_ONLY)
        this
    )

    ;;;
     ; <p>Constructs a new Bloom Filter which will provide approximately the given false positive rate when the given
     ; number of elements have been inserted.  If the filter would otherwise be larger than the maximum allowed size,
     ; it will be automatically downsized to the maximum size.</p>
     ;
     ; <p>To check the theoretical false positive rate of a given filter, use {@link BloomFilter#getFalsePositiveRate(int)}.</p>
     ;
     ; <p>The anonymity of which coins are yours to any peer which you send a BloomFilter to is controlled by the
     ; false positive rate.  For reference, as of block 187,000, the total number of addresses used in the chain was
     ; roughly 4.5 million.  Thus, if you use a false positive rate of 0.001 (0.1%), there will be, on average, 4,500
     ; distinct public keys/addresses which will be thought to be yours by nodes which have your bloom filter, but
     ; which are not actually yours.  Keep in mind that a remote node can do a pretty good job estimating the order of
     ; magnitude of the false positive rate of a given filter you provide it when considering the anonymity of a given
     ; filter.</p>
     ;
     ; <p>In order for filtered block download to function efficiently, the number of matched transactions in any given
     ; block should be less than (with some headroom) the maximum size of the MemoryPool used by the Peer
     ; doing the downloading (default is {@link TxConfidenceTable#MAX_SIZE}).  See the comment in processBlock(FilteredBlock)
     ; for more information on this restriction.</p>
     ;
     ; <p>randomNonce is a tweak for the hash function used to prevent some theoretical DoS attacks.
     ; It should be a random value, however secureness of the random value is of no great consequence.</p>
     ;
     ; <p>updateFlag is used to control filter behaviour on the server (remote node) side when it encounters a hit.
     ; See {@link org.bitcoinj.core.BloomFilter.BloomUpdate} for a brief description of each mode.  The purpose
     ; of this flag is to reduce network round-tripping and avoid over-dirtying the filter for the most common
     ; wallet configurations.</p>
     ;;
    #_public
    (§ constructor #_"BloomFilter" [#_"int" (§ name elements), #_"double" (§ name falsePositiveRate), #_"long" (§ name randomNonce), #_"BloomUpdate" (§ name updateFlag)])
    (§ block
        ;; The following formulas were stolen from Wikipedia's page on Bloom Filters (with the addition of min(..., MAX_...)).
        ;; Size required for a given number of elements and false-positive rate.
        (§ var #_"int" (§ name size) (§ cast #_"int" (§ expr -1 / (pow (log 2), 2) * elements * (log falsePositiveRate))))
        (§ ass (§ name size) (max 1, (/ (min size, (* (§ cast #_"int" MAX_FILTER_SIZE) 8)) 8)))
        (§ ass (§ name data) (§ new #_"byte[]" (§ count size)))
        ;; Optimal number of hash functions for a given filter size and element count.
        (§ ass (§ name hashFuncs) (§ cast #_"int" (§ expr (.. data length) * 8 / (§ cast #_"double" elements) * (log 2))))
        (§ ass (§ name hashFuncs) (max 1, (min hashFuncs, MAX_HASH_FUNCS)))
        (§ ass (§ name (.. this nTweak)) randomNonce)
        (§ ass (§ name (.. this nFlags)) (§ cast #_"byte" (§ expr 0xff & (.. updateFlag (ordinal)))))
        this
    )

    ;;;
     ; Returns the theoretical false positive rate of this filter if were to contain the given number of elements.
     ;;
    #_public
    (§ method #_"double" (§ fn getFalsePositiveRate) [#_"int" (§ name elements)])
    (§ block
        (pow (- 1 (pow E, (§ expr -1.0 * (* hashFuncs elements) / (* (.. data length) 8)))), hashFuncs)
    )

    #_override
    #_public
    (§ method #_"String" (§ fn toString) [])
    (§ block
        (§ expr "Bloom Filter of size " + (.. data length) + " with " + hashFuncs + " hash functions.")
    )

    #_override
    #_protected
    (§ method #_"void" (§ fn parse) [])
        (§ throws #_"ProtocolException")
    (§ block
        (§ ass (§ name data) (readByteArray))
        (§ if (§ expr MAX_FILTER_SIZE < (.. data length)))
        (§ block
            (§ throw (§ new #_"ProtocolException" "Bloom filter out of size range."))
        )
        (§ ass (§ name hashFuncs) (readUint32))
        (§ if (< MAX_HASH_FUNCS hashFuncs))
        (§ block
            (§ throw (§ new #_"ProtocolException" "Bloom filter hash function count out of range"))
        )
        (§ ass (§ name nTweak) (readUint32))
        (§ ass (§ name nFlags) (§ expr (readBytes 1)[0]))
        (§ ass (§ name length) (- cursor offset))
        nil
    )

    ;;;
     ; Serializes this message to the provided stream.  If you just want the raw bytes use bitcoinSerialize().
     ;;
    #_override
    #_protected
    (§ method #_"void" (§ fn bitcoinSerializeToStream) [#_"OutputStream" (§ name stream)])
        (§ throws #_"IOException")
    (§ block
        (.. stream (write (.. (§ new #_"VarInt" (.. data length)) (encode))))
        (.. stream (write data))
        (Utils/uint32ToByteStreamLE hashFuncs, stream)
        (Utils/uint32ToByteStreamLE nTweak, stream)
        (.. stream (write nFlags))
        nil
    )

    #_private
    #_static
    (§ defn- #_"int" (§ fn rotateLeft32) [#_"int" (§ name x), #_"int" (§ name r)])
    (§ block
        (| (<< x r) (>>> x (- 32 r)))
    )

    ;;;
     ; Applies the MurmurHash3 (x86_32) algorithm to the given data.
     ; See <a href="https://github.com/aappleby/smhasher/blob/master/src/MurmurHash3.cpp">this C++ code</a> for the original.
     ;;
    #_public
    #_static
    (§ defn #_"int" (§ fn murmurHash3) [#_"byte[]" (§ name data), #_"long" (§ name nTweak), #_"int" (§ name hashNum), #_"byte[]" (§ name object)])
    (§ block
        (§ var #_"int" (§ name h1) (§ cast #_"int" (§ expr hashNum * 0xfba4c795 + nTweak)))
        (§ var #_"int" (§ name c1) 0xcc9e2d51)
        (§ var #_"int" (§ name c2) 0x1b873593)

        (§ var #_"int" (§ name numBlocks) (* (/ (.. object length) 4) 4))

        ;; body
        (§ for (§ var #_"int" (§ name i) 0) :for (< i numBlocks) :for (§ ass (§ name i) (+ i 4)))
        (§ block
            (§ var #_"int" (§ name k1) (§ expr (§ expr (§ ai object i) & 0xff) | (<< (§ expr (§ ai object (§ expr i + 1)) & 0xff) 8) | (<< (§ expr (§ ai object (§ expr i + 2)) & 0xff) 16) | (<< (§ expr (§ ai object (§ expr i + 3)) & 0xff) 24)))

            (§ ass (§ name k1) (* k1 c1))
            (§ ass (§ name k1) (rotateLeft32 k1, 15))
            (§ ass (§ name k1) (* k1 c2))

            (§ ass (§ name h1) (§ expr h1 :xor k1))
            (§ ass (§ name h1) (rotateLeft32 h1, 13))
            (§ ass (§ name h1) (§ expr h1 * 5 + 0xe6546b64))
        )

        (§ var #_"int" (§ name k1) 0)
        (§ switch (& (.. object length) 3))
        (§ block
            (§ case 3)
            (§ block
                (§ ass (§ name k1) (§ expr k1 :xor (<< (§ expr (§ ai object (§ expr numBlocks + 2)) & 0xff) 16)))
                ;; Fall through.
            )
            (§ case 2)
            (§ block
                (§ ass (§ name k1) (§ expr k1 :xor (<< (§ expr (§ ai object (§ expr numBlocks + 1)) & 0xff) 8)))
                ;; Fall through.
            )
            (§ case 1)
            (§ block
                (§ ass (§ name k1) (§ expr k1 :xor (§ expr (§ ai object numBlocks) & 0xff)))
                (§ ass (§ name k1) (* k1 c1))
                (§ ass (§ name k1) (rotateLeft32 k1, 15))
                (§ ass (§ name k1) (* k1 c2))
                (§ ass (§ name h1) (§ expr h1 :xor k1))
                ;; Fall through.
            )
            (§ default )
            (§ block
                ;; Do nothing.
                (§ break )
            )
        )

        ;; finalization
        (§ ass (§ name h1) (§ expr h1 :xor (.. object length)))
        (§ ass (§ name h1) (§ expr h1 :xor (>>> h1 16)))
        (§ ass (§ name h1) (* h1 0x85ebca6b))
        (§ ass (§ name h1) (§ expr h1 :xor (>>> h1 13)))
        (§ ass (§ name h1) (* h1 0xc2b2ae35))
        (§ ass (§ name h1) (§ expr h1 :xor (>>> h1 16)))

        (§ cast #_"int" (§ expr (& h1 0xffffffff) % (* (.. data length) 8)))
    )

    ;;;
     ; Returns true if the given object matches the filter either because it was inserted, or because we have a false-positive.
     ;;
    #_public
    #_synchronized
    (§ method #_"boolean" (§ fn contains) [#_"byte[]" (§ name object)])
    (§ block
        (§ for (§ var #_"int" (§ name i) 0) :for (< i hashFuncs) :for (§ ass (§ name i) (+ i 1)))
        (§ block
            (§ if (§ not (Utils/checkBitLE data, (murmurHash3 data, nTweak, i, object))))
            (§ block
                (§ return false)
            )
        )

        true
    )

    ;;; Insert the given arbitrary data into the filter. ;;
    #_public
    #_synchronized
    (§ method #_"void" (§ fn insert) [#_"byte[]" (§ name object)])
    (§ block
        (§ for (§ var #_"int" (§ name i) 0) :for (< i hashFuncs) :for (§ ass (§ name i) (+ i 1)))
        (§ block
            (Utils/setBitLE data, (murmurHash3 data, nTweak, i, object))
        )
        nil
    )

    ;;; Inserts the given key and equivalent hashed form (for the address). ;;
    #_public
    #_synchronized
    (§ method #_"void" (§ fn insert) [#_"ECKey" (§ name key)])
    (§ block
        (insert (.. key (getPubKey)))
        (insert (.. key (getPubKeyHash)))
        nil
    )

    ;;;
     ; Sets this filter to match all objects.  A Bloom filter which matches everything may seem pointless, however,
     ; it is useful in order to reduce steady state bandwidth usage when you want full blocks.  Instead of receiving
     ; all transaction data twice, you will receive the vast majority of all transactions just once, at broadcast time.
     ; Solved blocks will then be send just as Merkle trees of tx hashes, meaning a constant 32 bytes of data for each
     ; transaction instead of 100-300 bytes as per usual.
     ;;
    #_public
    #_synchronized
    (§ method #_"void" (§ fn setMatchAll) [])
    (§ block
        (§ ass (§ name data) (§ new #_"byte[]" (§ coll (§ cast #_"byte" 0xff) )))
        nil
    )

    ;;;
     ; Copies filter into this.  Filter must have the same size, hash function count and nTweak or an
     ; IllegalArgumentException will be thrown.
     ;;
    #_public
    #_synchronized
    (§ method #_"void" (§ fn merge) [#_"BloomFilter" (§ name filter)])
    (§ block
        (§ if (§ expr (§ not (.. this (matchesAll))) && (§ not (.. filter (matchesAll)))))
        (§ block
            (Preconditions/checkArgument (§ expr (.. filter data length) == (.. this data length) && (.. filter hashFuncs) == (.. this hashFuncs) && (.. filter nTweak) == (.. this nTweak)))

            (§ for (§ var #_"int" (§ name i) 0) :for (§ expr i < (.. data length)) :for (§ ass (§ name i) (+ i 1)))
            (§ block
                (§ ass (§ name this.data[i]) (§ expr this.data[i] | filter.data[i]))
            )
        )
        (§ else )
        (§ block
            (§ ass (§ name (.. this data)) (§ new #_"byte[]" (§ coll (§ cast #_"byte" 0xff) )))
        )
        nil
    )

    ;;;
     ; Returns true if this filter will match anything.  See {@link org.bitcoinj.core.BloomFilter#setMatchAll()}
     ; for when this can be a useful thing to do.
     ;;
    #_public
    #_synchronized
    (§ method #_"boolean" (§ fn matchesAll) [])
    (§ block
        (§ for (§ var #_"byte" (§ name b)) :for data)
        (§ block
            (§ if (§ expr b != (§ cast #_"byte" 0xff)))
            (§ block
                (§ return false)
            )
        )
        true
    )

    ;;;
     ; The update flag controls how application of the filter to a block modifies the filter.  See the enum javadocs
     ; for information on what occurs and when.
     ;;
    #_public
    #_synchronized
    (§ method #_"BloomUpdate" (§ fn getUpdateFlag) [])
    (§ block
        (§ if (§ expr nFlags == 0))
        (§ block
            (§ return BloomUpdate/UPDATE_NONE)
        )
        (§ if (§ expr nFlags == 1))
        (§ block
            (§ return BloomUpdate/UPDATE_ALL)
        )
        (§ if (§ expr nFlags == 2))
        (§ block
            (§ return BloomUpdate/UPDATE_P2PUBKEY_ONLY)
        )

        (§ throw (§ new #_"IllegalStateException" "Unknown flag combination"))
    )

    ;;;
     ; Creates a new FilteredBlock from the given Block, using this filter to select transactions.  Matches can cause the
     ; filter to be updated with the matched element, this ensures that when a filter is applied to a block, spends of
     ; matched transactions are also matched.  However it means this filter can be mutated by the operation.  The returned
     ; filtered block already has the matched transactions associated with it.
     ;;
    #_public
    #_synchronized
    (§ method #_"FilteredBlock" (§ fn applyAndUpdate) [#_"Block" (§ name block)])
    (§ block
        (§ var #_"List<Transaction>" (§ name txns) (.. block (getTransactions)))
        (§ var #_"List<Sha256Hash>" (§ name txHashes) (§ new #_"ArrayList<>" (.. txns (size))))
        (§ var #_"List<Transaction>" (§ name matched) (Lists/newArrayList))
        (§ var #_"byte[]" (§ name bits) (§ new #_"byte[]" (§ count (§ cast #_"int" (Math/ceil (/ (.. txns (size)) 8.0))))))
        (§ for (§ var #_"int" (§ name i) 0) :for (§ expr i < (.. txns (size))) :for (§ ass (§ name i) (+ i 1)))
        (§ block
            (§ var #_"Transaction" (§ name tx) (.. txns (get i)))
            (.. txHashes (add (.. tx (getHash))))
            (§ if (applyAndUpdate tx))
            (§ block
                (Utils/setBitLE bits, i)
                (.. matched (add tx))
            )
        )
        (§ var #_"PartialMerkleTree" (§ name pmt) (PartialMerkleTree/buildFromLeaves (.. block (getParams)), bits, txHashes))
        (§ var #_"FilteredBlock" (§ name filteredBlock) (§ new #_"FilteredBlock" (.. block (getParams)), (.. block (cloneAsHeader)), pmt))
        (§ for (§ var #_"Transaction" (§ name transaction)) :for matched)
        (§ block
            (.. filteredBlock (provideTransaction transaction))
        )
        filteredBlock
    )

    #_public
    #_synchronized
    (§ method #_"boolean" (§ fn applyAndUpdate) [#_"Transaction" (§ name tx)])
    (§ block
        (§ if (contains (.. tx (getHash) (getBytes))))
        (§ block
            (§ return true)
        )
        (§ var #_"boolean" (§ name found) false)
        (§ var #_"BloomUpdate" (§ name flag) (getUpdateFlag))
        (§ for (§ var #_"TransactionOutput" (§ name output)) :for (.. tx (getOutputs)))
        (§ block
            (§ var #_"Script" (§ name script) (.. output (getScriptPubKey)))
            (§ for (§ var #_"ScriptChunk" (§ name chunk)) :for (.. script (getChunks)))
            (§ block
                (§ if (§ expr (.. chunk (isPushData)) && (contains (.. chunk data))))
                (§ block
                    (§ var #_"boolean" (§ name isSendingToPubKeys) (§ expr (.. script (isSentToRawPubKey)) || (.. script (isSentToMultiSig))))
                    (§ if (§ expr flag == BloomUpdate/UPDATE_ALL || (§ expr flag == BloomUpdate/UPDATE_P2PUBKEY_ONLY && isSendingToPubKeys)))
                    (§ block
                        (insert (.. output (getOutPointFor) (unsafeBitcoinSerialize)))
                    )
                    (§ ass (§ name found) true)
                )
            )
        )
        (§ if found)
        (§ block
            (§ return true)
        )
        (§ for (§ var #_"TransactionInput" (§ name input)) :for (.. tx (getInputs)))
        (§ block
            (§ if (contains (.. input (getOutpoint) (unsafeBitcoinSerialize))))
            (§ block
                (§ return true)
            )

            (§ for (§ var #_"ScriptChunk" (§ name chunk)) :for (.. input (getScriptSig) (getChunks)))
            (§ block
                (§ if (§ expr (.. chunk (isPushData)) && (contains (.. chunk data))))
                (§ block
                    (§ return true)
                )
            )
        )
        false
    )

    #_override
    #_public
    #_synchronized
    (§ method #_"boolean" (§ fn equals) [#_"Object" (§ name o)])
    (§ block
        (§ if (§ expr this == o))
        (§ block
            (§ return true)
        )
        (§ if (§ expr o == nil || (getClass) != (.. o (getClass))))
        (§ block
            (§ return false)
        )
        (§ var #_"BloomFilter" (§ name other) (§ cast #_"BloomFilter" o))
        (§ expr hashFuncs == (.. other hashFuncs) && nTweak == (.. other nTweak) && (Arrays/equals data, (.. other data)))
    )

    #_override
    #_public
    #_synchronized
    (§ method #_"int" (§ fn hashCode) [])
    (§ block
        (Objects/hashCode hashFuncs, nTweak, (Arrays/hashCode data))
    )
)

#_(ns org.bitcoinj.core #_"CheckpointManager"
    (:import [java.io BufferedInputStream BufferedReader DataInputStream IOException InputStream InputStreamReader]
             [java.nio ByteBuffer ByteOrder]
             [java.security DigestInputStream MessageDigest]
             [java.util Arrays Map TreeMap])
    (:import [com.google.common.base Charsets Preconditions]
             [com.google.common.hash HashCode Hasher Hashing]
             [com.google.common.io BaseEncoding]
             [org.slf4j Logger LoggerFactory])
   (:require [org.bitcoinj.store BlockStore BlockStoreException FullPrunedBlockStore]))

;;;
 ; <p>Vends hard-coded {@link StoredBlock}s for blocks throughout the chain.  Checkpoints serve two purposes:</p>
 ; <ol>
 ;    <li>They act as a safety mechanism against huge re-orgs that could rewrite large chunks of history, thus
 ;    constraining the block chain to be a consensus mechanism only for recent parts of the timeline.</li>
 ;    <li>They allow synchronization to the head of the chain for new wallets/users much faster than syncing all
 ;    headers from the genesis block.</li>
 ; </ol>
 ;
 ; <p>Checkpoints are used by the SPV {@link BlockChain} to initialize fresh {@link org.bitcoinj.store.SPVBlockStore}s.
 ; They are not used by fully validating mode, which instead has a different concept of checkpoints that are used
 ; to hard-code the validity of blocks that violate BIP30 (duplicate coinbase transactions).
 ; Those "checkpoints" can be found in NetworkParameters.</p>
 ;
 ; <p>The file format consists of the string "CHECKPOINTS 1", followed by a uint32 containing the number of signatures
 ; to read.  The value may not be larger than 256 (so it could have been a byte but isn't for historical reasons).
 ; If the number of signatures is larger than zero, each 65 byte ECDSA secp256k1 signature then follows.  The signatures
 ; sign the hash of all bytes that follow the last signature.</p>
 ;
 ; <p>After the signatures come an int32 containing the number of checkpoints in the file.  Then each checkpoint follows
 ; one after the other.  A checkpoint is 12 bytes for the total work done field, 4 bytes for the height, 80 bytes
 ; for the block header and then 1 zero byte at the end (i.e. number of transactions in the block: always zero).</p>
 ;;
#_public
(§ class #_"CheckpointManager"
    #_private
    #_static
    (§ def- #_"Logger" (§ name log) (LoggerFactory/getLogger (§ klass #_"CheckpointManager")))

    #_private
    #_static
    (§ def- #_"String" (§ name BINARY_MAGIC) "CHECKPOINTS 1")
    #_private
    #_static
    (§ def- #_"String" (§ name TEXTUAL_MAGIC) "TXT CHECKPOINTS 1")
    #_private
    #_static
    (§ def- #_"int" (§ name MAX_SIGNATURES) 256)

    ;; Map of block header time to data.
    #_protected
    (§ field #_"TreeMap<Long, StoredBlock>" (§ name checkpoints) (§ new #_"TreeMap<>"))

    #_protected
    (§ field #_"NetworkParameters" (§ name params))
    #_protected
    (§ field #_"Sha256Hash" (§ name dataHash))

    #_public
    #_static
    (§ def #_"BaseEncoding" (§ name BASE64) (.. (BaseEncoding/base64) (omitPadding)))

    ;;; Loads the default checkpoints bundled with bitcoinj. ;;
    #_public
    (§ constructor #_"CheckpointManager" [#_"Context" (§ name context)])
        (§ throws #_"IOException")
    (§ block
        (§ this (.. context (getParams)), nil)
        this
    )

    ;;; Loads the checkpoints from the given stream. ;;
    #_public
    (§ constructor #_"CheckpointManager" [#_"NetworkParameters" (§ name params), #_nilable #_"InputStream" (§ name inputStream)])
        (§ throws #_"IOException")
    (§ block
        (§ ass (§ name (.. this params)) (Preconditions/checkNotNull params))
        (§ if (nil? inputStream))
        (§ block
            (§ ass (§ name inputStream) (openStream params))
        )
        (Preconditions/checkNotNull inputStream)
        (§ ass (§ name inputStream) (§ new #_"BufferedInputStream" inputStream))
        (.. inputStream (mark 1))
        (§ var #_"int" (§ name first) (.. inputStream (read)))
        (.. inputStream (reset))
        (§ if (§ expr first == (.. BINARY_MAGIC (charAt 0))))
        (§ block
            (§ ass (§ name dataHash) (readBinary inputStream))
        )
        (§ elseif (§ expr first == (.. TEXTUAL_MAGIC (charAt 0))))
        (§ block
            (§ ass (§ name dataHash) (readTextual inputStream))
        )
        (§ else )
        (§ block
            (§ throw (§ new #_"IOException" "Unsupported format."))
        )
        this
    )

    ;;; Returns a checkpoints stream pointing to inside the bitcoinj JAR. ;;
    #_public
    #_static
    (§ defn #_"InputStream" (§ fn openStream) [#_"NetworkParameters" (§ name params)])
    (§ block
        (.. (§ klass #_"CheckpointManager") (getResourceAsStream (§ expr "/" + (.. params (getId)) + ".checkpoints.txt")))
    )

    #_private
    (§ method- #_"Sha256Hash" (§ fn readBinary) [#_"InputStream" (§ name inputStream)])
        (§ throws #_"IOException")
    (§ block
        (§ var #_"DataInputStream" (§ name dis) nil)
        (§ try )
        (§ block
            (§ var #_"MessageDigest" (§ name digest) (Sha256Hash/newDigest))
            (§ var #_"DigestInputStream" (§ name digestInputStream) (§ new #_"DigestInputStream" inputStream, digest))
            (§ ass (§ name dis) (§ new #_"DataInputStream" digestInputStream))
            (.. digestInputStream (on false))
            (§ var #_"byte[]" (§ name header) (§ new #_"byte[]" (§ count (.. BINARY_MAGIC (length)))))
            (.. dis (readFully header))
            (§ if (§ not (Arrays/equals header, (.. BINARY_MAGIC (getBytes "US-ASCII")))))
            (§ block
                (§ throw (§ new #_"IOException" "Header bytes did not match expected version"))
            )
            (§ var #_"int" (§ name numSignatures) (checkPositionIndex (.. dis (readInt)), MAX_SIGNATURES, "Num signatures out of range"))
            (§ for (§ var #_"int" (§ name i) 0) :for (< i numSignatures) :for (§ ass (§ name i) (+ i 1)))
            (§ block
                (§ var #_"byte[]" (§ name sig) (§ new #_"byte[]" (§ count 65)))
                (.. dis (readFully sig))
                ;; TODO: Do something with the signature here.
            )
            (.. digestInputStream (on true))
            (§ var #_"int" (§ name numCheckpoints) (.. dis (readInt)))
            (Preconditions/checkState (< 0 numCheckpoints))
            (§ var #_"int" (§ name size) StoredBlock/COMPACT_SERIALIZED_SIZE)
            (§ var #_"ByteBuffer" (§ name buffer) (ByteBuffer/allocate size))
            (§ for (§ var #_"int" (§ name i) 0) :for (< i numCheckpoints) :for (§ ass (§ name i) (+ i 1)))
            (§ block
                (§ if (< (.. dis (read (.. buffer (array)), 0, size)) size))
                (§ block
                    (§ throw (§ new #_"IOException" "Incomplete read whilst loading checkpoints."))
                )
                (§ var #_"StoredBlock" (§ name block) (StoredBlock/deserializeCompact params, buffer))
                (.. buffer (position 0))
                (.. checkpoints (put (.. block (getHeader) (getTimeSeconds)), block))
            )
            (§ var #_"Sha256Hash" (§ name dataHash) (Sha256Hash/wrap (.. digest (digest))))
            (.. log (info "Read {} checkpoints, hash is {}", (.. checkpoints (size)), dataHash))
            (§ return dataHash)
        )
        (§ catch #_"ProtocolException" (§ name e))
        (§ block
            (§ throw (§ new #_"IOException" e))
        )
        (§ finally )
        (§ block
            (§ if (some? dis))
            (§ block
                (.. dis (close))
            )
            (.. inputStream (close))
        )
    )

    #_private
    (§ method- #_"Sha256Hash" (§ fn readTextual) [#_"InputStream" (§ name inputStream)])
        (§ throws #_"IOException")
    (§ block
        (§ var #_"Hasher" (§ name hasher) (.. (Hashing/sha256) (newHasher)))
        (§ var #_"BufferedReader" (§ name reader) nil)
        (§ try )
        (§ block
            (§ ass (§ name reader) (§ new #_"BufferedReader" (§ new #_"InputStreamReader" inputStream, Charsets/US_ASCII)))
            (§ var #_"String" (§ name magic) (.. reader (readLine)))
            (§ if (§ not (.. TEXTUAL_MAGIC (equals magic))))
            (§ block
                (§ throw (§ new #_"IOException" (§ expr "unexpected magic: " + magic)))
            )
            (§ var #_"int" (§ name numSigs) (Integer/parseInt (.. reader (readLine))))
            (§ for (§ var #_"int" (§ name i) 0) :for (< i numSigs) :for (§ ass (§ name i) (+ i 1)))
            (§ block
                (.. reader (readLine)) ;; Skip sigs for now.
            )
            (§ var #_"int" (§ name numCheckpoints) (Integer/parseInt (.. reader (readLine))))
            (Preconditions/checkState (< 0 numCheckpoints))
            ;; Hash numCheckpoints in a way compatible to the binary format.
            (.. hasher (putBytes (.. (ByteBuffer/allocate 4) (order ByteOrder/BIG_ENDIAN) (putInt numCheckpoints) (array))))
            (§ var #_"int" (§ name size) StoredBlock/COMPACT_SERIALIZED_SIZE)
            (§ var #_"ByteBuffer" (§ name buffer) (ByteBuffer/allocate size))
            (§ for (§ var #_"int" (§ name i) 0) :for (< i numCheckpoints) :for (§ ass (§ name i) (+ i 1)))
            (§ block
                (§ var #_"byte[]" (§ name bytes) (.. BASE64 (decode (.. reader (readLine)))))
                (.. hasher (putBytes bytes))
                (.. buffer (position 0))
                (.. buffer (put bytes))
                (.. buffer (position 0))
                (§ var #_"StoredBlock" (§ name block) (StoredBlock/deserializeCompact params, buffer))
                (.. checkpoints (put (.. block (getHeader) (getTimeSeconds)), block))
            )
            (§ var #_"HashCode" (§ name hash) (.. hasher (hash)))
            (.. log (info "Read {} checkpoints, hash is {}", (.. checkpoints (size)), hash))
            (§ return (Sha256Hash/wrap (.. hash (asBytes))))
        )
        (§ finally )
        (§ block
            (§ if (some? reader))
            (§ block
                (.. reader (close))
            )
        )
    )

    ;;;
     ; Returns a {@link StoredBlock} representing the last checkpoint before the given time, for example, normally
     ; you would want to know the checkpoint before the earliest wallet birthday.
     ;;
    #_public
    (§ method #_"StoredBlock" (§ fn getCheckpointBefore) [#_"long" (§ name time)])
    (§ block
        (§ try )
        (§ block
            (Preconditions/checkArgument (< (.. params (getGenesisBlock) (getTimeSeconds)) time))
            ;; This is thread safe because the map never changes after creation.
            (§ var #_"Map.Entry<Long, StoredBlock>" (§ name entry) (.. checkpoints (floorEntry time)))
            (§ if (some? entry))
            (§ block
                (§ return (.. entry (getValue)))
            )
            (§ var #_"Block" (§ name genesis) (.. params (getGenesisBlock) (cloneAsHeader)))
            (§ return (§ new #_"StoredBlock" genesis, (.. genesis (getWork)), 0))
        )
        (§ catch #_"VerificationException" (§ name e))
        (§ block
            (§ throw (§ new #_"RuntimeException" e)) ;; Cannot happen.
        )
    )

    ;;; Returns the number of checkpoints that were loaded. ;;
    #_public
    (§ method #_"int" (§ fn numCheckpoints) [])
    (§ block
        (.. checkpoints (size))
    )

    ;;; Returns a hash of the concatenated checkpoint data. ;;
    #_public
    (§ method #_"Sha256Hash" (§ fn getDataHash) [])
    (§ block
        dataHash
    )

    ;;;
     ; <p>Convenience method that creates a CheckpointManager, loads the given data, gets the checkpoint for the given
     ; time, then inserts it into the store and sets that to be the chain head.  Useful when you have just created
     ; a new store from scratch and want to use configure it all in one go.</p>
     ;
     ; <p>Note that time is adjusted backwards by a week to account for possible clock drift in the block headers.</p>
     ;;
    #_public
    #_static
    (§ defn #_"void" (§ fn checkpoint) [#_"NetworkParameters" (§ name params), #_"InputStream" (§ name checkpoints), #_"BlockStore" (§ name store), #_"long" (§ name time)])
        (§ throws #_"IOException", #_"BlockStoreException")
    (§ block
        (Preconditions/checkNotNull params)
        (Preconditions/checkNotNull store)
        (Preconditions/checkArgument (§ not (§ insta store #_"FullPrunedBlockStore")), "You cannot use checkpointing with a full store.")

        (§ ass (§ name time) (§ expr time - (* 86400 7)))

        (Preconditions/checkArgument (< 0 time))
        (.. log (info "Attempting to initialize a new block store with a checkpoint for time {} ({})", time, (§ expr (Utils/dateTimeFormat (* time 1000)))))

        (§ var #_"BufferedInputStream" (§ name stream) (§ new #_"BufferedInputStream" checkpoints))
        (§ var #_"CheckpointManager" (§ name manager) (§ new #_"CheckpointManager" params, stream))
        (§ var #_"StoredBlock" (§ name checkpoint) (.. manager (getCheckpointBefore time)))
        (.. store (put checkpoint))
        (.. store (setChainHead checkpoint))
        nil
    )
)

#_(ns org.bitcoinj.core #_"ChildMessage")

;;;
 ; <p>Represents a Message type that can be contained within another Message.  ChildMessages that have a cached
 ; backing byte array need to invalidate their parent's caches as well as their own if they are modified.</p>
 ;
 ; <p>Instances of this class are not safe for use by multiple threads.</p>
 ;;
#_public
#_abstract
(§ class #_"ChildMessage" (§ extends #_"Message")
    #_nilable
    #_protected
    (§ field #_"Message" (§ name parent))

    #_public
    (§ constructor #_"ChildMessage" [#_"NetworkParameters" (§ name params)])
    (§ block
        (§ super params)
        this
    )

    #_public
    (§ constructor #_"ChildMessage" [#_"NetworkParameters" (§ name params), #_"byte[]" (§ name payload), #_"int" (§ name offset), #_"int" (§ name protocolVersion)])
        (§ throws #_"ProtocolException")
    (§ block
        (§ super params, payload, offset, protocolVersion)
        this
    )

    #_public
    (§ constructor #_"ChildMessage" [#_"NetworkParameters" (§ name params), #_"byte[]" (§ name payload), #_"int" (§ name offset), #_"int" (§ name protocolVersion), #_"Message" (§ name parent), #_"MessageSerializer" (§ name setSerializer), #_"int" (§ name length)])
        (§ throws #_"ProtocolException")
    (§ block
        (§ super params, payload, offset, protocolVersion, setSerializer, length)
        (§ ass (§ name (.. this parent)) parent)
        this
    )

    #_public
    (§ constructor #_"ChildMessage" [#_"NetworkParameters" (§ name params), #_"byte[]" (§ name payload), #_"int" (§ name offset)])
        (§ throws #_"ProtocolException")
    (§ block
        (§ super params, payload, offset)
        this
    )

    #_public
    (§ constructor #_"ChildMessage" [#_"NetworkParameters" (§ name params), #_"byte[]" (§ name payload), #_"int" (§ name offset), #_nilable #_"Message" (§ name parent), #_"MessageSerializer" (§ name setSerializer), #_"int" (§ name length)])
        (§ throws #_"ProtocolException")
    (§ block
        (§ super params, payload, offset, setSerializer, length)
        (§ ass (§ name (.. this parent)) parent)
        this
    )

    #_public
    (§ method #_"void" (§ fn setParent) [#_nilable #_"Message" (§ name parent)])
    (§ block
        (§ if (§ expr (.. this parent) != nil && (.. this parent) != parent && parent != nil))
        (§ block
            ;; After old parent is unlinked it won't be able to receive notice if this ChildMessage changes internally.
            ;; To be safe we invalidate the parent cache to ensure it rebuilds manually on serialization.
            (.. this parent (unCache))
        )
        (§ ass (§ name (.. this parent)) parent)
        nil
    )

    #_override
    #_protected
    (§ method #_"void" (§ fn unCache) [])
    (§ block
        (.. super (unCache))
        (§ if (some? parent))
        (§ block
            (.. parent (unCache))
        )
        nil
    )

    #_protected
    (§ method #_"void" (§ fn adjustLength) [#_"int" (§ name adjustment)])
    (§ block
        (adjustLength 0, adjustment)
        nil
    )

    #_override
    #_protected
    (§ method #_"void" (§ fn adjustLength) [#_"int" (§ name newArraySize), #_"int" (§ name adjustment)])
    (§ block
        (.. super (adjustLength newArraySize, adjustment))
        (§ if (some? parent))
        (§ block
            (.. parent (adjustLength newArraySize, adjustment))
        )
        nil
    )
)

#_(ns org.bitcoinj.core #_"Coin"
    (:import [java.io Serializable]
             [java.math BigDecimal])
    (:import [com.google.common.base Preconditions]
             [com.google.common.math LongMath]
             [com.google.common.primitives Longs])
   (:require [org.bitcoinj.utils MonetaryFormat]))

;;;
 ; Represents a monetary Bitcoin value.  This class is immutable.
 ;;
#_public
(§ class #_"Coin" (§ implements #_"Monetary", #_"Comparable<Coin>", #_"Serializable")
    ;;;
     ; Number of decimals for one Bitcoin.  This constant is useful for quick adapting to other coins because a lot of
     ; constants derive from it.
     ;;
    #_public
    #_static
    (§ def #_"int" (§ name SMALLEST_UNIT_EXPONENT) 8)

    ;;;
     ; The number of satoshis equal to one bitcoin.
     ;;
    #_private
    #_static
    (§ def- #_"long" (§ name COIN_VALUE) (LongMath/pow 10, SMALLEST_UNIT_EXPONENT))

    ;;;
     ; Zero Bitcoins.
     ;;
    #_public
    #_static
    (§ def #_"Coin" (§ name ZERO) (Coin/valueOf 0))

    ;;;
     ; One Bitcoin.
     ;;
    #_public
    #_static
    (§ def #_"Coin" (§ name COIN) (Coin/valueOf COIN_VALUE))

    ;;;
     ; 0.01 Bitcoins.  This unit is not really used much.
     ;;
    #_public
    #_static
    (§ def #_"Coin" (§ name CENT) (.. COIN (divide 100)))

    ;;;
     ; 0.001 Bitcoins, also known as 1 mBTC.
     ;;
    #_public
    #_static
    (§ def #_"Coin" (§ name MILLICOIN) (.. COIN (divide 1000)))

    ;;;
     ; 0.000001 Bitcoins, also known as 1 µBTC or 1 uBTC.
     ;;
    #_public
    #_static
    (§ def #_"Coin" (§ name MICROCOIN) (.. MILLICOIN (divide 1000)))

    ;;;
     ; A satoshi is the smallest unit that can be transferred.  100 million of them fit into a Bitcoin.
     ;;
    #_public
    #_static
    (§ def #_"Coin" (§ name SATOSHI) (Coin/valueOf 1))

    #_public
    #_static
    (§ def #_"Coin" (§ name FIFTY_COINS) (.. COIN (multiply 50)))

    ;;;
     ; Represents a monetary value of minus one satoshi.
     ;;
    #_public
    #_static
    (§ def #_"Coin" (§ name NEGATIVE_SATOSHI) (Coin/valueOf -1))

    ;;;
     ; The number of satoshis of this monetary value.
     ;;
    #_public
    (§ field #_"long" (§ name value))

    #_private
    (§ constructor- #_"Coin" [#_"long" (§ name satoshis)])
    (§ block
        (§ ass (§ name (.. this value)) satoshis)
        this
    )

    #_public
    #_static
    (§ defn #_"Coin" (§ fn valueOf) [#_"long" (§ name satoshis)])
    (§ block
        (§ new #_"Coin" satoshis)
    )

    #_override
    #_public
    (§ method #_"int" (§ fn smallestUnitExponent) [])
    (§ block
        SMALLEST_UNIT_EXPONENT
    )

    ;;;
     ; Returns the number of satoshis of this monetary value.
     ;;
    #_override
    #_public
    (§ method #_"long" (§ fn getValue) [])
    (§ block
        value
    )

    ;;;
     ; Convert an amount expressed in the way humans are used to into satoshis.
     ;;
    #_public
    #_static
    (§ defn #_"Coin" (§ fn valueOf) [#_"int" (§ name coins), #_"int" (§ name cents)])
    (§ block
        (Preconditions/checkArgument (§ expr 0 <= coins && 0 <= cents && cents < 100))

        (.. COIN (multiply coins) (add (.. CENT (multiply cents))))
    )

    ;;;
     ; Parses an amount expressed in the way humans are used to.
     ;
     ; This takes string in a format understood by {@link BigDecimal#BigDecimal(String)},
     ; for example "0", "1", "0.10", "1.23E3", "1234.5E-5".
     ;
     ; @throws IllegalArgumentException if you try to specify fractional satoshis, or a value out of range.
     ;;
    #_public
    #_static
    (§ defn #_"Coin" (§ fn parseCoin) [#_"String" (§ name str)])
    (§ block
        (§ try )
        (§ block
            (§ var #_"long" (§ name satoshis) (.. (§ new #_"BigDecimal" str) (movePointRight SMALLEST_UNIT_EXPONENT) (longValueExact)))
            (§ return (Coin/valueOf satoshis))
        )
        (§ catch #_"ArithmeticException" (§ name e))
        (§ block
            (§ throw (§ new #_"IllegalArgumentException" e)) ;; Repackage exception to honor method contract.
        )
    )

    ;;;
     ; Parses an amount expressed in the way humans are used to.  The amount is cut to satoshi precision.
     ;
     ; This takes string in a format understood by {@link BigDecimal#BigDecimal(String)},
     ; for example "0", "1", "0.10", "1.23E3", "1234.5E-5".
     ;
     ; @throws IllegalArgumentException if you try to specify a value out of range.
     ;;
    #_public
    #_static
    (§ defn #_"Coin" (§ fn parseCoinInexact) [#_"String" (§ name str)])
    (§ block
        (§ try )
        (§ block
            (§ var #_"long" (§ name satoshis) (.. (§ new #_"BigDecimal" str) (movePointRight SMALLEST_UNIT_EXPONENT) (longValue)))
            (§ return (Coin/valueOf satoshis))
        )
        (§ catch #_"ArithmeticException" (§ name e))
        (§ block
            (§ throw (§ new #_"IllegalArgumentException" e)) ;; Repackage exception to honor method contract.
        )
    )

    #_public
    (§ method #_"Coin" (§ fn add) [#_"Coin" (§ name value)])
    (§ block
        (§ new #_"Coin" (LongMath/checkedAdd (.. this value), (.. value value)))
    )

    ;;; Alias for add. ;;
    #_public
    (§ method #_"Coin" (§ fn plus) [#_"Coin" (§ name value)])
    (§ block
        (add value)
    )

    #_public
    (§ method #_"Coin" (§ fn subtract) [#_"Coin" (§ name value)])
    (§ block
        (§ new #_"Coin" (LongMath/checkedSubtract (.. this value), (.. value value)))
    )

    ;;; Alias for subtract. ;;
    #_public
    (§ method #_"Coin" (§ fn minus) [#_"Coin" (§ name value)])
    (§ block
        (subtract value)
    )

    #_public
    (§ method #_"Coin" (§ fn multiply) [#_"long" (§ name factor)])
    (§ block
        (§ new #_"Coin" (LongMath/checkedMultiply (.. this value), factor))
    )

    ;;; Alias for multiply. ;;
    #_public
    (§ method #_"Coin" (§ fn times) [#_"long" (§ name factor)])
    (§ block
        (multiply factor)
    )

    ;;; Alias for multiply. ;;
    #_public
    (§ method #_"Coin" (§ fn times) [#_"int" (§ name factor)])
    (§ block
        (multiply factor)
    )

    #_public
    (§ method #_"Coin" (§ fn divide) [#_"long" (§ name divisor)])
    (§ block
        (§ new #_"Coin" (/ (.. this value) divisor))
    )

    ;;; Alias for divide. ;;
    #_public
    (§ method #_"Coin" (§ fn div) [#_"long" (§ name divisor)])
    (§ block
        (divide divisor)
    )

    ;;; Alias for divide. ;;
    #_public
    (§ method #_"Coin" (§ fn div) [#_"int" (§ name divisor)])
    (§ block
        (divide divisor)
    )

    #_public
    (§ method #_"Coin[]" (§ fn divideAndRemainder) [#_"long" (§ name divisor)])
    (§ block
        (§ new #_"Coin[]" (§ coll (§ new #_"Coin" (/ (.. this value) divisor)), (§ new #_"Coin" (§ expr (.. this value) % divisor)) ))
    )

    #_public
    (§ method #_"long" (§ fn divide) [#_"Coin" (§ name divisor)])
    (§ block
        (/ (.. this value) (.. divisor value))
    )

    ;;;
     ; Returns true if and only if this instance represents a monetary value greater than zero,
     ; otherwise false.
     ;;
    #_public
    (§ method #_"boolean" (§ fn isPositive) [])
    (§ block
        (== (signum) 1)
    )

    ;;;
     ; Returns true if and only if this instance represents a monetary value less than zero,
     ; otherwise false.
     ;;
    #_public
    (§ method #_"boolean" (§ fn isNegative) [])
    (§ block
        (== (signum) -1)
    )

    ;;;
     ; Returns true if and only if this instance represents zero monetary value,
     ; otherwise false.
     ;;
    #_public
    (§ method #_"boolean" (§ fn isZero) [])
    (§ block
        (== (signum) 0)
    )

    ;;;
     ; Returns true if the monetary value represented by this instance is greater than that
     ; of the given other Coin, otherwise false.
     ;;
    #_public
    (§ method #_"boolean" (§ fn isGreaterThan) [#_"Coin" (§ name other)])
    (§ block
        (§ expr 0 < (compareTo other))
    )

    ;;;
     ; Returns true if the monetary value represented by this instance is less than that
     ; of the given other Coin, otherwise false.
     ;;
    #_public
    (§ method #_"boolean" (§ fn isLessThan) [#_"Coin" (§ name other)])
    (§ block
        (< (compareTo other) 0)
    )

    #_public
    (§ method #_"Coin" (§ fn shiftLeft) [#_"int" (§ name n)])
    (§ block
        (§ new #_"Coin" (<< (.. this value) n))
    )

    #_public
    (§ method #_"Coin" (§ fn shiftRight) [#_"int" (§ name n)])
    (§ block
        (§ new #_"Coin" (>> (.. this value) n))
    )

    #_override
    #_public
    (§ method #_"int" (§ fn signum) [])
    (§ block
        (§ if (== (.. this value) 0))
        (§ block
            (§ return 0)
        )
        (if (< (.. this value) 0) -1 1)
    )

    #_public
    (§ method #_"Coin" (§ fn negate) [])
    (§ block
        (§ new #_"Coin" (§ neg (.. this value)))
    )

    ;;;
     ; Returns the number of satoshis of this monetary value.  It's deprecated in favour of accessing {@link #value} directly.
     ;;
    #_public
    (§ method #_"long" (§ fn longValue) [])
    (§ block
        (.. this value)
    )

    #_private
    #_static
    (§ def- #_"MonetaryFormat" (§ name FRIENDLY_FORMAT) (.. MonetaryFormat/BTC (minDecimals 2) (repeatOptionalDecimals 1, 6) (postfixCode)))

    ;;;
     ; Returns the value as a 0.12 type string.  More digits after the decimal place will be used
     ; if necessary, but two will always be present.
     ;;
    #_public
    (§ method #_"String" (§ fn toFriendlyString) [])
    (§ block
        (.. FRIENDLY_FORMAT (format this) (toString))
    )

    #_private
    #_static
    (§ def- #_"MonetaryFormat" (§ name PLAIN_FORMAT) (.. MonetaryFormat/BTC (minDecimals 0) (repeatOptionalDecimals 1, 8) (noCode)))

    ;;;
     ; Returns the value as a plain string denominated in BTC.
     ; The result is unformatted with no trailing zeroes.
     ; For instance, a value of 150000 satoshis gives an output string of "0.0015" BTC.
     ;;
    #_public
    (§ method #_"String" (§ fn toPlainString) [])
    (§ block
        (.. PLAIN_FORMAT (format this) (toString))
    )

    #_override
    #_public
    (§ method #_"String" (§ fn toString) [])
    (§ block
        (Long/toString value)
    )

    #_override
    #_public
    (§ method #_"boolean" (§ fn equals) [#_"Object" (§ name o)])
    (§ block
        (§ if (§ expr this == o))
        (§ block
            (§ return true)
        )
        (§ if (§ expr o == nil || (getClass) != (.. o (getClass))))
        (§ block
            (§ return false)
        )
        (== (.. this value) (.. (§ cast #_"Coin" o) value))
    )

    #_override
    #_public
    (§ method #_"int" (§ fn hashCode) [])
    (§ block
        (§ cast #_"int" (.. this value))
    )

    #_override
    #_public
    (§ method #_"int" (§ fn compareTo) [#_"Coin" (§ name other)])
    (§ block
        (Longs/compare (.. this value), (.. other value))
    )
)

#_(ns org.bitcoinj.core #_"Context"
    (:import [com.google.common.base Preconditions]
             [org.slf4j *]))

;; TODO: Finish adding Context c'tors to all the different objects so we can start deprecating the versions that take NetworkParameters.
;; TODO: Add a working directory notion to Context and make various subsystems that want to use files default to that directory (e.g. Orchid, block stores, wallet, etc).
;; TODO: Auto-register the block chain object here, and then use it in the (newly deprecated) TransactionConfidence.getDepthInBlocks() method:
;;       the new version should take an AbstractBlockChain specifically.
;;       Also use the block chain object reference from the context in PeerGroup and remove the other constructors, as it's easy to forget to wire things up.
;; TODO: Move Threading.USER_THREAD to here and leave behind just a source code stub.  Allow different instantiations of the library to use different user threads.
;; TODO: Keep a URI to where library internal data files can be found, to abstract over the lack of JAR files on Android.
;; TODO: Stash anything else that resembles global library configuration in here and use it to clean up the rest of the API without breaking people.
;; TODO: Move the TorClient into Context, so different parts of the library can read data over Tor without having to request it directly. (or maybe a general socket factory??)

;;;
 ; <p>The Context object holds various objects and pieces of configuration that are scoped to a specific instantiation of
 ; bitcoinj for a specific network.  You can get an instance of this class through calling {@link #get()}.</p>
 ;
 ; <p>Context is new in 0.13 and the library is currently in a transitional period: you should create a Context that
 ; wraps your chosen network parameters before using the rest of the library.  However if you don't, things will still
 ; work as a Context will be created for you and stashed in thread local storage.  The context is then propagated between
 ; library created threads as needed.  This automagical propagation and creation is a temporary mechanism: one day it
 ; will be removed to avoid confusing edge cases that could occur if the developer does not fully understand it e.g.
 ; in the case where multiple instances of the library are in use simultaneously.</p>
 ;;
#_public
(§ class #_"Context"
    #_private
    #_static
    (§ def- #_"Logger" (§ name log) (LoggerFactory/getLogger (§ klass #_"Context")))

    #_public
    #_static
    (§ def #_"int" (§ name DEFAULT_EVENT_HORIZON) 100)

    #_private
    (§ field- #_"TxConfidenceTable" (§ name confidenceTable))
    #_private
    (§ field- #_"NetworkParameters" (§ name params))
    #_private
    (§ field- #_"int" (§ name eventHorizon))
    #_private
    (§ field- #_"boolean" (§ name ensureMinRequiredFee))
    #_private
    (§ field- #_"Coin" (§ name feePerKb))

    ;;;
     ; Creates a new context object.  For now, this will be done for you by the framework.  Eventually you will be
     ; expected to do this yourself in the same manner as fetching a NetworkParameters object (at the start of your app).
     ;
     ; @param params The network parameters that will be associated with this context.
     ;;
    #_public
    (§ constructor #_"Context" [#_"NetworkParameters" (§ name params)])
    (§ block
        (§ this params, DEFAULT_EVENT_HORIZON, Transaction/DEFAULT_TX_FEE, true)
        this
    )

    ;;;
     ; Creates a new custom context object.  This is mainly meant for unit tests for now.
     ;
     ; @param params The network parameters that will be associated with this context.
     ; @param eventHorizon Number of blocks after which the library will delete data and be unable to always process reorgs (see {@link #getEventHorizon()}).
     ; @param feePerKb The default fee per 1000 bytes of transaction data to pay when completing transactions.  For details, see {@link SendRequest#feePerKb}.
     ; @param ensureMinRequiredFee Whether to ensure the minimum required fee by default when completing transactions.  For details, see {@link SendRequest#ensureMinRequiredFee}.
     ;;
    #_public
    (§ constructor #_"Context" [#_"NetworkParameters" (§ name params), #_"int" (§ name eventHorizon), #_"Coin" (§ name feePerKb), #_"boolean" (§ name ensureMinRequiredFee)])
    (§ block
        (.. log (info "Creating bitcoinj {} context.", VersionMessage/BITCOINJ_VERSION))
        (§ ass (§ name (.. this confidenceTable)) (§ new #_"TxConfidenceTable"))
        (§ ass (§ name (.. this params)) params)
        (§ ass (§ name (.. this eventHorizon)) eventHorizon)
        (§ ass (§ name (.. this ensureMinRequiredFee)) ensureMinRequiredFee)
        (§ ass (§ name (.. this feePerKb)) feePerKb)
        (§ ass (§ name lastConstructed) this)
        (.. slot (set this))
        this
    )

    #_private
    #_static
    #_volatile
    (§ def- #_"Context" (§ name lastConstructed))
    #_private
    #_static
    (§ def- #_"boolean" (§ name isStrictMode))
    #_private
    #_static
    (§ def- #_"ThreadLocal<Context>" (§ name slot) (§ new #_"ThreadLocal<>"))

    ;;;
     ; Returns the current context that is associated with the <b>calling thread</b>.  BitcoinJ is an API that has thread
     ; affinity: much like OpenGL it expects each thread that accesses it to have been configured with a global Context
     ; object.  This method returns that.  Note that to help you develop, this method will <i>also</i> propagate whichever
     ; context was created last onto the current thread, if it's missing.  However it will print an error when doing so
     ; because propagation of contexts is meant to be done manually: this is so two libraries or subsystems that
     ; independently use bitcoinj (or possibly alt coin forks of it) can operate correctly.
     ;
     ; @throws java.lang.IllegalStateException if no context exists at all or if we are in strict mode and there is no context.
     ;;
    #_public
    #_static
    (§ defn #_"Context" (§ fn get) [])
    (§ block
        (§ var #_"Context" (§ name tls) (.. slot (get)))
        (§ if (nil? tls))
        (§ block
            (§ if isStrictMode)
            (§ block
                (.. log (error "Thread is missing a bitcoinj context."))
                (.. log (error "You should use Context/propagate() or a ContextPropagatingThreadFactory."))
                (§ throw (§ new #_"IllegalStateException" "missing context"))
            )
            (§ if (nil? lastConstructed))
            (§ block
                (§ throw (§ new #_"IllegalStateException" "You must construct a Context object before using bitcoinj!"))
            )
            (.. slot (set lastConstructed))
            (.. log (error "Performing thread fixup: you are accessing bitcoinj via a thread that has not had any context set on it."))
            (.. log (error "This error has been corrected for, but doing this makes your app less robust."))
            (.. log (error "You should use Context/propagate() or a ContextPropagatingThreadFactory."))
            (.. log (error "Please refer to the user guide for more information about this."))
            (.. log (error "Thread name is {}.", (§ expr (.. (Thread/currentThread) (getName)))))
            ;; TODO: Actually write the user guide section about this.
            (§ return lastConstructed)
        )

        tls
    )

    ;;;
     ; Require that new threads use {@link #propagate(Context)} or {@link org.bitcoinj.utils.ContextPropagatingThreadFactory},
     ; rather than using a heuristic for the desired context.
     ;;
    #_public
    #_static
    (§ defn #_"void" (§ fn enableStrictMode) [])
    (§ block
        (§ ass (§ name isStrictMode) true)
        nil
    )

    ;; A temporary internal shim designed to help us migrate internally in a way that doesn't wreck source compatibility.
    #_public
    #_static
    (§ defn #_"Context" (§ fn getOrCreate) [#_"NetworkParameters" (§ name params)])
    (§ block
        (§ var #_"Context" (§ name context))
        (§ try )
        (§ block
            (§ ass (§ name context) (get))
        )
        (§ catch #_"IllegalStateException" (§ name e))
        (§ block
            (.. log (warn "Implicitly creating context. This is a migration step and this message will eventually go away."))
            (§ ass (§ name context) (§ new #_"Context" params))
            (§ return context)
        )
        (§ if (!= (.. context (getParams)) params))
        (§ block
            (§ throw (§ new #_"IllegalStateException" (§ expr "Context does not match implicit network params: " + (.. context (getParams)) + " vs " + params)))
        )
        context
    )

    ;;;
     ; Sets the given context as the current thread context.  You should use this if you create your own threads that
     ; want to create core BitcoinJ objects.  Generally, if a class can accept a Context in its constructor and might
     ; be used (even indirectly) by a thread, you will want to call this first.  Your task may be simplified by using
     ; a {@link org.bitcoinj.utils.ContextPropagatingThreadFactory}.
     ;;
    #_public
    #_static
    (§ defn #_"void" (§ fn propagate) [#_"Context" (§ name context)])
    (§ block
        (.. slot (set (Preconditions/checkNotNull context)))
        nil
    )

    ;;;
     ; Returns the {@link TxConfidenceTable} created by this context.  The pool tracks advertised
     ; and downloaded transactions so their confidence can be measured as a proportion of how many peers announced it.
     ; With an un-tampered with internet connection, the more peers announce a transaction the more confidence you can
     ; have that it's really valid.
     ;;
    #_public
    (§ method #_"TxConfidenceTable" (§ fn getConfidenceTable) [])
    (§ block
        confidenceTable
    )

    ;;;
     ; Returns the {@link org.bitcoinj.core.NetworkParameters} specified when this context was (auto) created.  The
     ; network parameters defines various hard coded constants for a specific instance of a Bitcoin network, such as
     ; main net, testnet, etc.
     ;;
    #_public
    (§ method #_"NetworkParameters" (§ fn getParams) [])
    (§ block
        params
    )

    ;;;
     ; The event horizon is the number of blocks after which various bits of the library consider a transaction to be
     ; so confirmed that it's safe to delete data.  Re-orgs larger than the event horizon will not be correctly
     ; processed, so the default value is high (100).
     ;;
    #_public
    (§ method #_"int" (§ fn getEventHorizon) [])
    (§ block
        eventHorizon
    )

    ;;;
     ; The default fee per 1000 bytes of transaction data to pay when completing transactions.  For details, see {@link SendRequest#feePerKb}.
     ;;
    #_public
    (§ method #_"Coin" (§ fn getFeePerKb) [])
    (§ block
        feePerKb
    )

    ;;;
     ; Whether to ensure the minimum required fee by default when completing transactions.  For details, see {@link SendRequest#ensureMinRequiredFee}.
     ;;
    #_public
    (§ method #_"boolean" (§ fn isEnsureMinRequiredFee) [])
    (§ block
        ensureMinRequiredFee
    )
)

#_(ns org.bitcoinj.core #_"DummySerializer"
    (:import [java.io IOException OutputStream]
             [java.nio BufferUnderflowException ByteBuffer]))

;;;
 ; Dummy serializer used ONLY for objects which do not have network parameters set.
 ;;
(§ class #_"DummySerializer" (§ extends #_"MessageSerializer")
    #_public
    #_static
    (§ def #_"DummySerializer" (§ name DEFAULT) (§ new #_"DummySerializer"))

    #_private
    #_static
    (§ def- #_"String" (§ name DEFAULT_EXCEPTION_MESSAGE) "Dummy serializer cannot serialize/deserialize objects as it does not know which network they belong to.")

    #_public
    (§ constructor #_"DummySerializer" [])
    (§ block
        this
    )

    #_override
    #_public
    (§ method #_"Message" (§ fn deserialize) [#_"ByteBuffer" (§ name in)])
        (§ throws #_"UnsupportedOperationException")
    (§ block
        (§ throw (§ new #_"UnsupportedOperationException" DEFAULT_EXCEPTION_MESSAGE))
    )

    #_override
    #_public
    (§ method #_"BitcoinSerializer.BitcoinPacketHeader" (§ fn deserializeHeader) [#_"ByteBuffer" (§ name in)])
        (§ throws #_"UnsupportedOperationException")
    (§ block
        (§ throw (§ new #_"UnsupportedOperationException" DEFAULT_EXCEPTION_MESSAGE))
    )

    #_override
    #_public
    (§ method #_"Message" (§ fn deserializePayload) [#_"BitcoinSerializer.BitcoinPacketHeader" (§ name header), #_"ByteBuffer" (§ name in)])
        (§ throws #_"UnsupportedOperationException")
    (§ block
        (§ throw (§ new #_"UnsupportedOperationException" DEFAULT_EXCEPTION_MESSAGE))
    )

    #_override
    #_public
    (§ method #_"boolean" (§ fn isParseRetainMode) [])
    (§ block
        false
    )

    #_override
    #_public
    (§ method #_"AddressMessage" (§ fn makeAddressMessage) [#_"byte[]" (§ name payloadBytes), #_"int" (§ name length)])
        (§ throws #_"UnsupportedOperationException")
    (§ block
        (§ throw (§ new #_"UnsupportedOperationException" DEFAULT_EXCEPTION_MESSAGE))
    )

    #_override
    #_public
    (§ method #_"Message" (§ fn makeAlertMessage) [#_"byte[]" (§ name payloadBytes)])
        (§ throws #_"UnsupportedOperationException")
    (§ block
        (§ throw (§ new #_"UnsupportedOperationException" DEFAULT_EXCEPTION_MESSAGE))
    )

    #_override
    #_public
    (§ method #_"Block" (§ fn makeBlock) [#_"byte[]" (§ name payloadBytes), #_"int" (§ name offset), #_"int" (§ name length)])
        (§ throws #_"UnsupportedOperationException")
    (§ block
        (§ throw (§ new #_"UnsupportedOperationException" DEFAULT_EXCEPTION_MESSAGE))
    )

    #_override
    #_public
    (§ method #_"Message" (§ fn makeBloomFilter) [#_"byte[]" (§ name payloadBytes)])
        (§ throws #_"UnsupportedOperationException")
    (§ block
        (§ throw (§ new #_"UnsupportedOperationException" DEFAULT_EXCEPTION_MESSAGE))
    )

    #_override
    #_public
    (§ method #_"FilteredBlock" (§ fn makeFilteredBlock) [#_"byte[]" (§ name payloadBytes)])
        (§ throws #_"UnsupportedOperationException")
    (§ block
        (§ throw (§ new #_"UnsupportedOperationException" DEFAULT_EXCEPTION_MESSAGE))
    )

    #_override
    #_public
    (§ method #_"InventoryMessage" (§ fn makeInventoryMessage) [#_"byte[]" (§ name payloadBytes), #_"int" (§ name length)])
        (§ throws #_"UnsupportedOperationException")
    (§ block
        (§ throw (§ new #_"UnsupportedOperationException" DEFAULT_EXCEPTION_MESSAGE))
    )

    #_override
    #_public
    (§ method #_"Transaction" (§ fn makeTransaction) [#_"byte[]" (§ name payloadBytes), #_"int" (§ name offset), #_"int" (§ name length), #_"byte[]" (§ name hash)])
        (§ throws #_"UnsupportedOperationException")
    (§ block
        (§ throw (§ new #_"UnsupportedOperationException" DEFAULT_EXCEPTION_MESSAGE))
    )

    #_override
    #_public
    (§ method #_"void" (§ fn seekPastMagicBytes) [#_"ByteBuffer" (§ name in)])
        (§ throws #_"BufferUnderflowException")
    (§ block
        (§ throw (§ new #_"UnsupportedOperationException" DEFAULT_EXCEPTION_MESSAGE))
    )

    #_override
    #_public
    (§ method #_"void" (§ fn serialize) [#_"String" (§ name name), #_"byte[]" (§ name message), #_"OutputStream" (§ name out)])
        (§ throws #_"IOException")
    (§ block
        (§ throw (§ new #_"UnsupportedOperationException" DEFAULT_EXCEPTION_MESSAGE))
    )

    #_override
    #_public
    (§ method #_"void" (§ fn serialize) [#_"Message" (§ name message), #_"OutputStream" (§ name out)])
        (§ throws #_"IOException")
    (§ block
        (§ throw (§ new #_"UnsupportedOperationException" DEFAULT_EXCEPTION_MESSAGE))
    )
)

#_(ns org.bitcoinj.core #_"ECKey"
    (:import [java.io ByteArrayOutputStream IOException]
             [java.math BigInteger]
             [java.nio.charset Charset]
             [java.security SecureRandom SignatureException]
             [java.util Arrays Comparator])
    (:import [com.google.common.annotations VisibleForTesting]
             [com.google.common.base MoreObjects Objects Preconditions]
             [com.google.common.primitives Ints UnsignedBytes]
             [org.slf4j Logger LoggerFactory]
             [org.spongycastle.asn1 *]
             [org.spongycastle.asn1.x9 X9ECParameters X9IntegerConverter]
             [org.spongycastle.crypto AsymmetricCipherKeyPair]
             [org.spongycastle.crypto.digests SHA256Digest]
             [org.spongycastle.crypto.ec CustomNamedCurves]
             [org.spongycastle.crypto.generators ECKeyPairGenerator]
             [org.spongycastle.crypto.params *]
             [org.spongycastle.crypto.signers ECDSASigner HMacDSAKCalculator]
             [org.spongycastle.math.ec ECAlgorithms ECPoint FixedPointCombMultiplier FixedPointUtil]
             [org.spongycastle.math.ec.custom.sec SecP256K1Curve]
             [org.spongycastle.util.encoders Base64])
   (:require [org.bitcoinj.crypto *]
             [org.bitcoinj.wallet Protos Wallet]))

;; TODO: Move this class to tracking compression state itself.
;; The Bouncy Castle guys are deprecating their own tracking of the compression state.

;;;
 ; <p>Represents an elliptic curve public and (optionally) private key, usable for digital signatures but not encryption.
 ; Creating a new ECKey with the empty constructor will generate a new random keypair.  Other static methods can be used
 ; when you already have the public or private parts.  If you create a key with only the public part, you can check
 ; signatures but not create them.</p>
 ;
 ; <p>ECKey also provides access to Bitcoin Core compatible text message signing, as accessible via the UI or JSON-RPC.
 ; This is slightly different to signing raw bytes - if you want to sign your own data and it won't be exposed as
 ; text to people, you don't want to use this.  If in doubt, ask on the mailing list.</p>
 ;
 ; <p>The ECDSA algorithm supports <i>key recovery</i> in which a signature plus a couple of discriminator bits can
 ; be reversed to find the public key used to calculate it.  This can be convenient when you have a message and a
 ; signature and want to find out who signed it, rather than requiring the user to provide the expected identity.</p>
 ;
 ; <p>This class supports a variety of serialization forms.  The methods that accept/return byte arrays serialize
 ; private keys as raw byte arrays and public keys using the SEC standard byte encoding for public keys.  Signatures
 ; are encoded using ASN.1/DER inside the Bitcoin protocol.</p>
 ;
 ; <p>A key can be <i>compressed</i> or <i>uncompressed</i>.  This refers to whether the public key is represented
 ; when encoded into bytes as an (x, y) coordinate on the elliptic curve, or whether it's represented as just an X
 ; co-ordinate and an extra byte that carries a sign bit.  With the latter form the Y coordinate can be calculated
 ; dynamically, however, <b>because the binary serialization is different the address of a key changes if its
 ; compression status is changed</b>.  If you deviate from the defaults it's important to understand this: money sent
 ; to a compressed version of the key will have a different address to the same key in uncompressed form.  Whether
 ; a public key is compressed or not is recorded in the SEC binary serialisation format, and preserved in a flag in
 ; this class so round-tripping preserves state.  Unless you're working with old software or doing unusual things, you
 ; can usually ignore the compressed/uncompressed distinction.</p>
 ;;
#_public
(§ class #_"ECKey" (§ implements #_"EncryptableItem")
    #_private
    #_static
    (§ def- #_"Logger" (§ name log) (LoggerFactory/getLogger (§ klass #_"ECKey")))

    ;;; Sorts oldest keys first, newest last. ;;
    #_public
    #_static
    (§ def #_"Comparator<ECKey>" (§ name AGE_COMPARATOR) (§ new #_"Comparator<ECKey>"
        (§ anon
            #_override
            #_public
            (§ method #_"int" (§ fn compare) [#_"ECKey" (§ name k1), #_"ECKey" (§ name k2)])
            (§ block
                (§ if (== (.. k1 creationTimeSeconds) (.. k2 creationTimeSeconds)))
                (§ block
                    (§ return 0)
                )

                (if (< (.. k1 creationTimeSeconds) (.. k2 creationTimeSeconds)) -1 1)
            )
        )))

    ;;; Compares pub key bytes using {@link com.google.common.primitives.UnsignedBytes#lexicographicalComparator()}. ;;
    #_public
    #_static
    (§ def #_"Comparator<ECKey>" (§ name PUBKEY_COMPARATOR) (§ new #_"Comparator<ECKey>"
        (§ anon
            #_private
            (§ field- #_"Comparator<byte[]>" (§ name comparator) (UnsignedBytes/lexicographicalComparator))

            #_override
            #_public
            (§ method #_"int" (§ fn compare) [#_"ECKey" (§ name k1), #_"ECKey" (§ name k2)])
            (§ block
                (.. comparator (compare (.. k1 (getPubKey)), (.. k2 (getPubKey))))
            )
        )))

    ;; The parameters of the secp256k1 curve that Bitcoin uses.
    #_private
    #_static
    (§ def- #_"X9ECParameters" (§ name CURVE_PARAMS) (CustomNamedCurves/getByName "secp256k1"))

    ;;; The parameters of the secp256k1 curve that Bitcoin uses. ;;
    #_public
    #_static
    (§ def #_"ECDomainParameters" (§ name CURVE))

    ;;;
     ; Equal to CURVE.getN().shiftRight(1), used for canonicalising the S value of a signature.
     ; If you aren't sure what this is about, you can ignore it.
     ;;
    #_public
    #_static
    (§ def #_"BigInteger" (§ name HALF_CURVE_ORDER))

    #_private
    #_static
    (§ def- #_"SecureRandom" (§ name secureRandom))

    #_static
    (§ block
        ;; Init proper random number generator, as some old Android installations have bugs that make it unsecure.
        (§ if (Utils/isAndroidRuntime))
        (§ block
            (§ new #_"LinuxSecureRandom")
        )

        ;; Tell Bouncy Castle to precompute data that's needed during secp256k1 calculations.  Increasing the width
        ;; number makes calculations faster, but at a cost of extra memory usage and with decreasing returns.  12 was
        ;; picked after consulting with the BC team.
        (FixedPointUtil/precompute (.. CURVE_PARAMS (getG)), 12)
        (§ ass (§ name CURVE) (§ new #_"ECDomainParameters" (.. CURVE_PARAMS (getCurve)), (.. CURVE_PARAMS (getG)), (.. CURVE_PARAMS (getN)), (.. CURVE_PARAMS (getH))))
        (§ ass (§ name HALF_CURVE_ORDER) (.. CURVE_PARAMS (getN) (shiftRight 1)))
        (§ ass (§ name secureRandom) (§ new #_"SecureRandom"))
    )

    ;; The two parts of the key.  If "priv" is set, "pub" can always be calculated.  If "pub" is set but not "priv", we
    ;; can only verify signatures not make them.
    #_protected
    (§ field #_"BigInteger" (§ name priv)) ;; A field element.
    #_protected
    (§ field #_"LazyECPoint" (§ name pub))

    ;; Creation time of the key in seconds since the epoch, or zero if the key was deserialized from a version that did
    ;; not have this field.
    #_protected
    (§ field #_"long" (§ name creationTimeSeconds))

    #_protected
    (§ field #_"KeyCrypter" (§ name keyCrypter))
    #_protected
    (§ field #_"EncryptedData" (§ name encryptedPrivateKey))

    #_private
    (§ field- #_"byte[]" (§ name pubKeyHash))

    ;;;
     ; Generates an entirely new keypair.  Point compression is used so the resulting public key will be 33 bytes
     ; (32 for the co-ordinate and 1 byte to represent the y bit).
     ;;
    #_public
    (§ constructor #_"ECKey" [])
    (§ block
        (§ this secureRandom)
        this
    )

    ;;;
     ; Generates an entirely new keypair with the given {@link SecureRandom} object.  Point compression is used so the
     ; resulting public key will be 33 bytes (32 for the co-ordinate and 1 byte to represent the y bit).
     ;;
    #_public
    (§ constructor #_"ECKey" [#_"SecureRandom" (§ name secureRandom)])
    (§ block
        (§ var #_"ECKeyPairGenerator" (§ name generator) (§ new #_"ECKeyPairGenerator"))
        (§ var #_"ECKeyGenerationParameters" (§ name keygenParams) (§ new #_"ECKeyGenerationParameters" CURVE, secureRandom))
        (.. generator (init keygenParams))
        (§ var #_"AsymmetricCipherKeyPair" (§ name keypair) (.. generator (generateKeyPair)))
        (§ var #_"ECPrivateKeyParameters" (§ name privParams) (§ cast #_"ECPrivateKeyParameters" (.. keypair (getPrivate))))
        (§ var #_"ECPublicKeyParameters" (§ name pubParams) (§ cast #_"ECPublicKeyParameters" (.. keypair (getPublic))))
        (§ ass (§ name priv) (.. privParams (getD)))
        (§ ass (§ name pub) (§ new #_"LazyECPoint" (.. CURVE (getCurve)), (.. pubParams (getQ) (getEncoded true))))
        (§ ass (§ name creationTimeSeconds) (Utils/currentTimeSeconds))
        this
    )

    #_protected
    (§ constructor #_"ECKey" [#_nilable #_"BigInteger" (§ name priv), #_"ECPoint" (§ name pub)])
    (§ block
        (§ this priv, (§ expr (§ new #_"LazyECPoint" (Preconditions/checkNotNull pub))))
        this
    )

    #_protected
    (§ constructor #_"ECKey" [#_nilable #_"BigInteger" (§ name priv), #_"LazyECPoint" (§ name pub)])
    (§ block
        (§ if (some? priv))
        (§ block
            (Preconditions/checkArgument (<= (.. priv (bitLength)) (<< 32 3)), "private key exceeds 32 bytes: {} bits", (.. priv (bitLength)))
            ;; Try and catch buggy callers or bad key imports, etc.  Zero and one are special because these are often
            ;; used as sentinel values and because scripting languages have a habit of auto-casting true and false to
            ;; 1 and 0 or vice-versa.  Type confusion bugs could therefore result in private keys with these values.
            (Preconditions/checkArgument (§ not (.. priv (equals BigInteger/ZERO))))
            (Preconditions/checkArgument (§ not (.. priv (equals BigInteger/ONE))))
        )
        (§ ass (§ name (.. this priv)) priv)
        (§ ass (§ name (.. this pub)) (Preconditions/checkNotNull pub))
        this
    )

    ;;;
     ; Utility for compressing an elliptic curve point.  Returns the same point if it's already compressed.
     ; See the ECKey class docs for a discussion of point compression.
     ;;
    #_public
    #_static
    (§ defn #_"ECPoint" (§ fn compressPoint) [#_"ECPoint" (§ name point)])
    (§ block
        (getPointWithCompression point, true)
    )

    #_public
    #_static
    (§ defn #_"LazyECPoint" (§ fn compressPoint) [#_"LazyECPoint" (§ name point)])
    (§ block
        (if (.. point (isCompressed)) point (§ new #_"LazyECPoint" (compressPoint (.. point (get)))))
    )

    ;;;
     ; Utility for decompressing an elliptic curve point.  Returns the same point if it's already compressed.
     ; See the ECKey class docs for a discussion of point compression.
     ;;
    #_public
    #_static
    (§ defn #_"ECPoint" (§ fn decompressPoint) [#_"ECPoint" (§ name point)])
    (§ block
        (getPointWithCompression point, false)
    )

    #_public
    #_static
    (§ defn #_"LazyECPoint" (§ fn decompressPoint) [#_"LazyECPoint" (§ name point)])
    (§ block
        (if (§ not (.. point (isCompressed))) point (§ new #_"LazyECPoint" (decompressPoint (.. point (get)))))
    )

    #_private
    #_static
    (§ defn- #_"ECPoint" (§ fn getPointWithCompression) [#_"ECPoint" (§ name point), #_"boolean" (§ name compressed)])
    (§ block
        (§ if (== (.. point (isCompressed)) compressed))
        (§ block
            (§ return point)
        )

        (§ ass (§ name point) (.. point (normalize)))
        (§ var #_"BigInteger" (§ name x) (.. point (getAffineXCoord) (toBigInteger)))
        (§ var #_"BigInteger" (§ name y) (.. point (getAffineYCoord) (toBigInteger)))
        (.. CURVE (getCurve) (createPoint x, y, compressed))
    )

    ;;;
     ; Construct an ECKey from an ASN.1 encoded private key.  These are produced by OpenSSL and stored by Bitcoin
     ; Core in its wallet.  Note that this is slow because it requires an EC point multiply.
     ;;
    #_public
    #_static
    (§ defn #_"ECKey" (§ fn fromASN1) [#_"byte[]" (§ name asn1privkey)])
    (§ block
        (extractKeyFromASN1 asn1privkey)
    )

    ;;;
     ; Creates an ECKey given the private key only.  The public key is calculated from it (this is slow).  The resulting
     ; public key is compressed.
     ;;
    #_public
    #_static
    (§ defn #_"ECKey" (§ fn fromPrivate) [#_"BigInteger" (§ name privKey)])
    (§ block
        (fromPrivate privKey, true)
    )

    ;;;
     ; Creates an ECKey given the private key only.  The public key is calculated from it (this is slow), either
     ; compressed or not.
     ;;
    #_public
    #_static
    (§ defn #_"ECKey" (§ fn fromPrivate) [#_"BigInteger" (§ name privKey), #_"boolean" (§ name compressed)])
    (§ block
        (§ var #_"ECPoint" (§ name point) (publicPointFromPrivate privKey))
        (§ new #_"ECKey" privKey, (getPointWithCompression point, compressed))
    )

    ;;;
     ; Creates an ECKey given the private key only.  The public key is calculated from it (this is slow).  The resulting
     ; public key is compressed.
     ;;
    #_public
    #_static
    (§ defn #_"ECKey" (§ fn fromPrivate) [#_"byte[]" (§ name privKeyBytes)])
    (§ block
        (fromPrivate (§ new #_"BigInteger" 1, privKeyBytes))
    )

    ;;;
     ; Creates an ECKey given the private key only.  The public key is calculated from it (this is slow), either
     ; compressed or not.
     ;;
    #_public
    #_static
    (§ defn #_"ECKey" (§ fn fromPrivate) [#_"byte[]" (§ name privKeyBytes), #_"boolean" (§ name compressed)])
    (§ block
        (fromPrivate (§ new #_"BigInteger" 1, privKeyBytes), compressed)
    )

    ;;;
     ; Creates an ECKey that simply trusts the caller to ensure that point is really the result of multiplying the
     ; generator point by the private key.  This is used to speed things up when you know you have the right values
     ; already.  The compression state of pub will be preserved.
     ;;
    #_public
    #_static
    (§ defn #_"ECKey" (§ fn fromPrivateAndPrecalculatedPublic) [#_"BigInteger" (§ name priv), #_"ECPoint" (§ name pub)])
    (§ block
        (§ new #_"ECKey" priv, pub)
    )

    ;;;
     ; Creates an ECKey that simply trusts the caller to ensure that point is really the result of multiplying the
     ; generator point by the private key.  This is used to speed things up when you know you have the right values
     ; already.  The compression state of the point will be preserved.
     ;;
    #_public
    #_static
    (§ defn #_"ECKey" (§ fn fromPrivateAndPrecalculatedPublic) [#_"byte[]" (§ name priv), #_"byte[]" (§ name pub)])
    (§ block
        (Preconditions/checkNotNull priv)
        (Preconditions/checkNotNull pub)
        (§ new #_"ECKey" (§ new #_"BigInteger" 1, priv), (.. CURVE (getCurve) (decodePoint pub)))
    )

    ;;;
     ; Creates an ECKey that cannot be used for signing, only verifying signatures, from the given point.
     ; The compression state of pub will be preserved.
     ;;
    #_public
    #_static
    (§ defn #_"ECKey" (§ fn fromPublicOnly) [#_"ECPoint" (§ name pub)])
    (§ block
        (§ new #_"ECKey" nil, pub)
    )

    ;;;
     ; Creates an ECKey that cannot be used for signing, only verifying signatures, from the given encoded point.
     ; The compression state of pub will be preserved.
     ;;
    #_public
    #_static
    (§ defn #_"ECKey" (§ fn fromPublicOnly) [#_"byte[]" (§ name pub)])
    (§ block
        (§ new #_"ECKey" nil, (.. CURVE (getCurve) (decodePoint pub)))
    )

    ;;;
     ; Returns a copy of this key, but with the public point represented in uncompressed form.  Normally you would
     ; never need this: it's for specialised scenarios or when backwards compatibility in encoded form is necessary.
     ;;
    #_public
    (§ method #_"ECKey" (§ fn decompress) [])
    (§ block
        (if (.. pub (isCompressed)) (§ new #_"ECKey" priv, (decompressPoint (.. pub (get)))) this)
    )

    ;;;
     ; Creates an ECKey given only the private key bytes.  This is the same as using the BigInteger constructor, but
     ; is more convenient if you are importing a key from elsewhere.  The public key will be automatically derived
     ; from the private key.
     ;;
    #_deprecated
    #_public
    (§ constructor #_"ECKey" [#_nilable #_"byte[]" (§ name privKeyBytes), #_nilable #_"byte[]" (§ name pubKey)])
    (§ block
        (§ this (when (some? privKeyBytes) (§ new #_"BigInteger" 1, privKeyBytes)), pubKey)
        this
    )

    ;;;
     ; Create a new ECKey with an encrypted private key, a public key and a KeyCrypter.
     ;
     ; @param encryptedPrivateKey The encrypted private key.
     ; @param pubKey The public key.
     ; @param keyCrypter The KeyCrypter that will be used, with an AES key, to encrypt and decrypt the private key.
     ;;
    #_deprecated
    #_public
    (§ constructor #_"ECKey" [#_"EncryptedData" (§ name encryptedPrivateKey), #_"byte[]" (§ name pubKey), #_"KeyCrypter" (§ name keyCrypter)])
    (§ block
        (§ this (§ cast #_"byte[]" nil), pubKey)

        (§ ass (§ name (.. this keyCrypter)) (Preconditions/checkNotNull keyCrypter))
        (§ ass (§ name (.. this encryptedPrivateKey)) encryptedPrivateKey)
        this
    )

    ;;;
     ; Constructs a key that has an encrypted private component.  The given object wraps encrypted bytes and an
     ; initialization vector.  Note that the key will not be decrypted during this call: the returned ECKey is
     ; unusable for signing unless a decryption key is supplied.
     ;;
    #_public
    #_static
    (§ defn #_"ECKey" (§ fn fromEncrypted) [#_"EncryptedData" (§ name encryptedPrivateKey), #_"KeyCrypter" (§ name crypter), #_"byte[]" (§ name pubKey)])
    (§ block
        (§ var #_"ECKey" (§ name key) (fromPublicOnly pubKey))
        (§ ass (§ name (.. key encryptedPrivateKey)) (Preconditions/checkNotNull encryptedPrivateKey))
        (§ ass (§ name (.. key keyCrypter)) (Preconditions/checkNotNull crypter))
        key
    )

    ;;;
     ; Creates an ECKey given either the private key only, the public key only, or both.  If only the private key
     ; is supplied, the public key will be calculated from it (this is slow).  If both are supplied, it's assumed
     ; the public key already correctly matches the private key.  If only the public key is supplied, this ECKey
     ; cannot be used for signing.
     ; @param compressed If set to true and pubKey is null, the derived public key will be in compressed form.
     ;;
    #_deprecated
    #_public
    (§ constructor #_"ECKey" [#_nilable #_"BigInteger" (§ name privKey), #_nilable #_"byte[]" (§ name pubKey), #_"boolean" (§ name compressed)])
    (§ block
        (§ if (§ expr privKey == nil && pubKey == nil))
        (§ block
            (§ throw (§ new #_"IllegalArgumentException" "ECKey requires at least private or public key"))
        )
        (§ ass (§ name (.. this priv)) privKey)
        (§ if (nil? pubKey))
        (§ block
            ;; Derive public from private.
            (§ var #_"ECPoint" (§ name point) (publicPointFromPrivate privKey))
            (§ ass (§ name point) (getPointWithCompression point, compressed))
            (§ ass (§ name (.. this pub)) (§ new #_"LazyECPoint" point))
        )
        (§ else )
        (§ block
            ;; We expect the pubkey to be in regular encoded form, just as a BigInteger.
            ;; Therefore the first byte is a special marker byte.
            ;; TODO: This is probably not a useful API and may be confusing.
            (§ ass (§ name (.. this pub)) (§ new #_"LazyECPoint" (.. CURVE (getCurve)), pubKey))
        )
        this
    )

    ;;;
     ; Creates an ECKey given either the private key only, the public key only, or both.  If only the private key
     ; is supplied, the public key will be calculated from it (this is slow).  If both are supplied, it's assumed
     ; the public key already correctly matches the public key.  If only the public key is supplied, this ECKey cannot
     ; be used for signing.
     ;;
    #_deprecated
    #_private
    (§ constructor- #_"ECKey" [#_nilable #_"BigInteger" (§ name privKey), #_nilable #_"byte[]" (§ name pubKey)])
    (§ block
        (§ this privKey, pubKey, false)
        this
    )

    ;;;
     ; Returns true if this key doesn't have unencrypted access to private key bytes.  This may be because
     ; it was never given any private key bytes to begin with (a watching key), or because the key is encrypted.
     ; You can use {@link #isEncrypted()} to tell the cases apart.
     ;;
    #_public
    (§ method #_"boolean" (§ fn isPubKeyOnly) [])
    (§ block
        (nil? priv)
    )

    ;;;
     ; Returns true if this key has unencrypted access to private key bytes.
     ; Does the opposite of {@link #isPubKeyOnly()}.
     ;;
    #_public
    (§ method #_"boolean" (§ fn hasPrivKey) [])
    (§ block
        (some? priv)
    )

    ;;; Returns true if this key is watch only, meaning it has a public key but no private key. ;;
    #_public
    (§ method #_"boolean" (§ fn isWatching) [])
    (§ block
        (§ expr (isPubKeyOnly) && (§ not (isEncrypted)))
    )

    ;;;
     ; Output this ECKey as an ASN.1 encoded private key, as understood by OpenSSL or used by Bitcoin Core
     ; in its wallet storage format.
     ; @throws org.bitcoinj.core.ECKey.MissingPrivateKeyException if the private key is missing or encrypted.
     ;;
    #_public
    (§ method #_"byte[]" (§ fn toASN1) [])
    (§ block
        (§ try )
        (§ block
            (§ var #_"byte[]" (§ name privKeyBytes) (getPrivKeyBytes))
            (§ var #_"ByteArrayOutputStream" (§ name baos) (§ new #_"ByteArrayOutputStream" 400))

            ;; ASN1_SEQUENCE(EC_PRIVATEKEY) = {
            ;;   ASN1_SIMPLE(EC_PRIVATEKEY, version, LONG),
            ;;   ASN1_SIMPLE(EC_PRIVATEKEY, privateKey, ASN1_OCTET_STRING),
            ;;   ASN1_EXP_OPT(EC_PRIVATEKEY, parameters, ECPKPARAMETERS, 0),
            ;;   ASN1_EXP_OPT(EC_PRIVATEKEY, publicKey, ASN1_BIT_STRING, 1)
            ;; } ASN1_SEQUENCE_END(EC_PRIVATEKEY)
            (§ var #_"DERSequenceGenerator" (§ name seq) (§ new #_"DERSequenceGenerator" baos))
            (.. seq (addObject (§ new #_"ASN1Integer" 1))) ;; version
            (.. seq (addObject (§ new #_"DEROctetString" privKeyBytes)))
            (.. seq (addObject (§ new #_"DERTaggedObject" 0, (.. CURVE_PARAMS (toASN1Primitive)))))
            (.. seq (addObject (§ new #_"DERTaggedObject" 1, (§ expr (§ new #_"DERBitString" (getPubKey))))))
            (.. seq (close))
            (§ return (.. baos (toByteArray)))
        )
        (§ catch #_"IOException" (§ name e))
        (§ block
            (§ throw (§ new #_"RuntimeException" e)) ;; Cannot happen, writing to memory stream.
        )
    )

    ;;;
     ; Returns public key bytes from the given private key.  To convert a byte array into a BigInteger, use <tt>new BigInteger(1, bytes)</tt>.
     ;;
    #_public
    #_static
    (§ defn #_"byte[]" (§ fn publicKeyFromPrivate) [#_"BigInteger" (§ name privKey), #_"boolean" (§ name compressed)])
    (§ block
        (.. (publicPointFromPrivate privKey) (getEncoded compressed))
    )

    ;;;
     ; Returns public key point from the given private key.  To convert a byte array into a BigInteger, use <tt>new BigInteger(1, bytes)</tt>.
     ;;
    #_public
    #_static
    (§ defn #_"ECPoint" (§ fn publicPointFromPrivate) [#_"BigInteger" (§ name privKey)])
    (§ block
        ;;
         ; TODO: FixedPointCombMultiplier currently doesn't support scalars longer than the group order,
         ; but that could change in future versions.
         ;;
        (§ if (< (.. CURVE (getN) (bitLength)) (.. privKey (bitLength))))
        (§ block
            (§ ass (§ name privKey) (.. privKey (mod (.. CURVE (getN)))))
        )

        (.. (§ new #_"FixedPointCombMultiplier") (multiply (.. CURVE (getG)), privKey))
    )

    ;;; Gets the hash160 form of the public key (as seen in addresses). ;;
    #_public
    (§ method #_"byte[]" (§ fn getPubKeyHash) [])
    (§ block
        (§ if (nil? pubKeyHash))
        (§ block
            (§ ass (§ name pubKeyHash) (Utils/sha256hash160 (.. this pub (getEncoded))))
        )

        pubKeyHash
    )

    ;;;
     ; Gets the raw public key value.  This appears in transaction scriptSigs.  Note that this is <b>not</b> the same
     ; as the pubKeyHash/address.
     ;;
    #_public
    (§ method #_"byte[]" (§ fn getPubKey) [])
    (§ block
        (.. pub (getEncoded))
    )

    ;;; Gets the public key in the form of an elliptic curve point object from Bouncy Castle. ;;
    #_public
    (§ method #_"ECPoint" (§ fn getPubKeyPoint) [])
    (§ block
        (.. pub (get))
    )

    ;;;
     ; Gets the private key in the form of an integer field element.  The public key is derived by performing EC
     ; point addition this number of times (i.e. point multiplying).
     ;
     ; @throws java.lang.IllegalStateException if the private key bytes are not available.
     ;;
    #_public
    (§ method #_"BigInteger" (§ fn getPrivKey) [])
    (§ block
        (§ if (nil? priv))
        (§ block
            (§ throw (§ new #_"MissingPrivateKeyException"))
        )

        priv
    )

    ;;;
     ; Returns whether this key is using the compressed form or not.  Compressed pubkeys are only 33 bytes, not 64.
     ;;
    #_public
    (§ method #_"boolean" (§ fn isCompressed) [])
    (§ block
        (.. pub (isCompressed))
    )

    ;;;
     ; Returns the address that corresponds to the public part of this ECKey.  Note that an address is derived from
     ; the RIPEMD-160 hash of the public key and is not the public key itself (which is too large to be convenient).
     ;;
    #_public
    (§ method #_"Address" (§ fn toAddress) [#_"NetworkParameters" (§ name params)])
    (§ block
        (§ new #_"Address" params, (getPubKeyHash))
    )

    ;;;
     ; Groups the two components that make up a signature, and provides a way to encode to DER form, which is
     ; how ECDSA signatures are represented when embedded in other data structures in the Bitcoin protocol.
     ; The raw components can be useful for doing further EC maths on them.
     ;;
    #_public
    #_static
    (§ class #_"ECDSASignature"
        ;;; The two components of the signature. ;;
        #_public
        (§ field #_"BigInteger" (§ name r))
        #_public
        (§ field #_"BigInteger" (§ name s))

        ;;;
         ; Constructs a signature with the given components.  Does NOT automatically canonicalise the signature.
         ;;
        #_public
        (§ constructor #_"ECDSASignature" [#_"BigInteger" (§ name r), #_"BigInteger" (§ name s)])
        (§ block
            (§ ass (§ name (.. this r)) r)
            (§ ass (§ name (.. this s)) s)
            this
        )

        ;;;
         ; Returns true if the S component is "low", that means it is below {@link ECKey#HALF_CURVE_ORDER}.  See
         ; <a href="https://github.com/bitcoin/bips/blob/master/bip-0062.mediawiki#Low_S_values_in_signatures">BIP62</a>.
         ;;
        #_public
        (§ method #_"boolean" (§ fn isCanonical) [])
        (§ block
            (<= (.. s (compareTo HALF_CURVE_ORDER)) 0)
        )

        ;;;
         ; Will automatically adjust the S component to be less than or equal to half the curve order, if necessary.
         ; This is required because for every signature (r,s) the signature (r, -s (mod N)) is a valid signature of
         ; the same message.  However, we dislike the ability to modify the bits of a Bitcoin transaction after it's
         ; been signed, as that violates various assumed invariants.  Thus in future only one of those forms will be
         ; considered legal and the other will be banned.
         ;;
        #_public
        (§ method #_"ECDSASignature" (§ fn toCanonicalised) [])
        (§ block
            (§ if (§ not (isCanonical)))
            (§ block
                ;; The order of the curve is the number of valid points that exist on that curve.  If S is in the upper
                ;; half of the number of valid points, then bring it back to the lower half.  Otherwise, imagine that
                ;;    N = 10
                ;;    s = 8, so (-8 % 10 == 2) thus both (r, 8) and (r, 2) are valid solutions.
                ;;    10 - 8 == 2, giving us always the latter solution, which is canonical.
                (§ return (§ new #_"ECDSASignature" r, (.. CURVE (getN) (subtract s))))
            )

            this
        )

        ;;;
         ; DER is an international standard for serializing data structures which is widely used in cryptography.
         ; It's somewhat like protocol buffers but less convenient.  This method returns a standard DER encoding
         ; of the signature, as recognized by OpenSSL and other libraries.
         ;;
        #_public
        (§ method #_"byte[]" (§ fn encodeToDER) [])
        (§ block
            (§ try )
            (§ block
                (§ return (.. (derByteStream) (toByteArray)))
            )
            (§ catch #_"IOException" (§ name e))
            (§ block
                (§ throw (§ new #_"RuntimeException" e)) ;; Cannot happen.
            )
        )

        #_public
        #_static
        (§ defn #_"ECDSASignature" (§ fn decodeFromDER) [#_"byte[]" (§ name bytes)])
            (§ throws #_"IllegalArgumentException")
        (§ block
            (§ var #_"ASN1InputStream" (§ name decoder) nil)
            (§ try )
            (§ block
                (§ ass (§ name decoder) (§ new #_"ASN1InputStream" bytes))
                (§ var #_"DLSequence" (§ name seq) (§ cast #_"DLSequence" (.. decoder (readObject))))
                (§ if (nil? seq))
                (§ block
                    (§ throw (§ new #_"IllegalArgumentException" "Reached past end of ASN.1 stream."))
                )

                (§ var #_"ASN1Integer" (§ name r))
                (§ var #_"ASN1Integer" (§ name s))
                (§ try )
                (§ block
                    (§ ass (§ name r) (§ cast #_"ASN1Integer" (.. seq (getObjectAt 0))))
                    (§ ass (§ name s) (§ cast #_"ASN1Integer" (.. seq (getObjectAt 1))))
                )
                (§ catch #_"ClassCastException" (§ name e))
                (§ block
                    (§ throw (§ new #_"IllegalArgumentException" e))
                )
                ;; OpenSSL deviates from the DER spec by interpreting these values as unsigned, though they should not be.
                ;; Thus, we always use the positive versions.  See http://r6.ca/blog/20111119T211504Z.html
                (§ return (§ new #_"ECDSASignature" (.. r (getPositiveValue)), (.. s (getPositiveValue))))
            )
            (§ catch #_"IOException" (§ name e))
            (§ block
                (§ throw (§ new #_"IllegalArgumentException" e))
            )
            (§ finally )
            (§ block
                (§ if (some? decoder))
                (§ block
                    (§ try )
                    (§ block
                        (.. decoder (close))
                    )
                    (§ catch #_"IOException" (§ name _))
                    (§ block
                    )
                )
            )
        )

        #_protected
        (§ method #_"ByteArrayOutputStream" (§ fn derByteStream) [])
            (§ throws #_"IOException")
        (§ block
            ;; Usually 70-72 bytes.
            (§ var #_"ByteArrayOutputStream" (§ name bos) (§ new #_"ByteArrayOutputStream" 72))
            (§ var #_"DERSequenceGenerator" (§ name seq) (§ new #_"DERSequenceGenerator" bos))
            (.. seq (addObject (§ new #_"ASN1Integer" r)))
            (.. seq (addObject (§ new #_"ASN1Integer" s)))
            (.. seq (close))
            bos
        )

        #_override
        #_public
        (§ method #_"boolean" (§ fn equals) [#_"Object" (§ name o)])
        (§ block
            (§ if (§ expr this == o))
            (§ block
                (§ return true)
            )
            (§ if (§ expr o == nil || (getClass) != (.. o (getClass))))
            (§ block
                (§ return false)
            )
            (§ var #_"ECDSASignature" (§ name other) (§ cast #_"ECDSASignature" o))
            (§ expr (.. r (equals (.. other r))) && (.. s (equals (.. other s))))
        )

        #_override
        #_public
        (§ method #_"int" (§ fn hashCode) [])
        (§ block
            (Objects/hashCode r, s)
        )
    )

    ;;;
     ; Signs the given hash and returns the R and S components as BigIntegers.  In the Bitcoin protocol, they are
     ; usually encoded using ASN.1 format, so you want {@link org.bitcoinj.core.ECKey.ECDSASignature#toASN1()}
     ; instead.  However sometimes the independent components can be useful, for instance, if you're going to do
     ; further EC maths on them.
     ; @throws KeyCrypterException if this ECKey doesn't have a private part.
     ;;
    #_public
    (§ method #_"ECDSASignature" (§ fn sign) [#_"Sha256Hash" (§ name input)])
        (§ throws #_"KeyCrypterException")
    (§ block
        (sign input, nil)
    )

    ;;;
     ; If this global variable is set to true, sign() creates a dummy signature and verify() always returns true.
     ; This is intended to help accelerate unit tests that do a lot of signing/verifying, which in the debugger
     ; can be painfully slow.
     ;;
    #_testing
    #_public
    #_static
    (§ def #_"boolean" (§ name FAKE_SIGNATURES) false)

    ;;;
     ; Signs the given hash and returns the R and S components as BigIntegers.  In the Bitcoin protocol, they are
     ; usually encoded using DER format, so you want {@link org.bitcoinj.core.ECKey.ECDSASignature#encodeToDER()}
     ; instead.  However sometimes the independent components can be useful, for instance, if you're doing to do further
     ; EC maths on them.
     ;
     ; @param aesKey The AES key to use for decryption of the private key.  If null, then no decryption is required.
     ; @throws KeyCrypterException if there's something wrong with aesKey.
     ; @throws ECKey.MissingPrivateKeyException if this key cannot sign because it's pubkey only.
     ;;
    #_public
    (§ method #_"ECDSASignature" (§ fn sign) [#_"Sha256Hash" (§ name input), #_nilable #_"KeyParameter" (§ name aesKey)])
        (§ throws #_"KeyCrypterException")
    (§ block
        (§ var #_"KeyCrypter" (§ name crypter) (getKeyCrypter))
        (§ if (some? crypter))
        (§ block
            (§ if (nil? aesKey))
            (§ block
                (§ throw (§ new #_"KeyIsEncryptedException"))
            )
            (§ return (.. (decrypt aesKey) (sign input)))
        )
        (§ else )
        (§ block
            ;; No decryption of private key required.
            (§ if (nil? priv))
            (§ block
                (§ throw (§ new #_"MissingPrivateKeyException"))
            )
        )
        (doSign input, priv)
    )

    #_protected
    (§ method #_"ECDSASignature" (§ fn doSign) [#_"Sha256Hash" (§ name input), #_"BigInteger" (§ name privateKeyForSigning)])
    (§ block
        (§ if FAKE_SIGNATURES)
        (§ block
            (§ return (TransactionSignature/dummy))
        )

        (Preconditions/checkNotNull privateKeyForSigning)

        (§ var #_"ECDSASigner" (§ name signer) (§ new #_"ECDSASigner" (§ new #_"HMacDSAKCalculator" (§ new #_"SHA256Digest"))))
        (§ var #_"ECPrivateKeyParameters" (§ name privKey) (§ new #_"ECPrivateKeyParameters" privateKeyForSigning, CURVE))
        (.. signer (init true, privKey))
        (§ var #_"BigInteger[]" (§ name components) (.. signer (generateSignature (.. input (getBytes)))))
        (.. (§ new #_"ECDSASignature" (§ ai components 0), (§ ai components 1)) (toCanonicalised))
    )

    ;;;
     ; <p>Verifies the given ECDSA signature against the message bytes using the public key bytes.</p>
     ;
     ; <p>When using native ECDSA verification, data must be 32 bytes, and no element may be
     ; larger than 520 bytes.</p>
     ;
     ; @param data      Hash of the data to verify.
     ; @param signature ASN.1 encoded signature.
     ; @param pub       The public key bytes to use.
     ;;
    #_public
    #_static
    (§ defn #_"boolean" (§ fn verify) [#_"byte[]" (§ name data), #_"ECDSASignature" (§ name signature), #_"byte[]" (§ name pub)])
    (§ block
        (§ if FAKE_SIGNATURES)
        (§ block
            (§ return true)
        )

        (§ var #_"ECDSASigner" (§ name signer) (§ new #_"ECDSASigner"))
        (§ var #_"ECPublicKeyParameters" (§ name params) (§ new #_"ECPublicKeyParameters" (.. CURVE (getCurve) (decodePoint pub)), CURVE))
        (.. signer (init false, params))
        (§ try )
        (§ block
            (§ return (.. signer (verifySignature data, (.. signature r), (.. signature s))))
        )
        (§ catch #_"NullPointerException" (§ name e))
        (§ block
            ;; Bouncy Castle contains a bug that can cause NPEs given specially crafted signatures.  Those signatures
            ;; are inherently invalid/attack sigs so we just fail them here rather than crash the thread.
            (.. log (error "Caught NPE inside bouncy castle", e))
            (§ return false)
        )
    )

    ;;;
     ; Verifies the given ASN.1 encoded ECDSA signature against a hash using the public key.
     ;
     ; @param data      Hash of the data to verify.
     ; @param signature ASN.1 encoded signature.
     ; @param pub       The public key bytes to use.
     ;;
    #_public
    #_static
    (§ defn #_"boolean" (§ fn verify) [#_"byte[]" (§ name data), #_"byte[]" (§ name signature), #_"byte[]" (§ name pub)])
    (§ block
        (verify data, (ECDSASignature/decodeFromDER signature), pub)
    )

    ;;;
     ; Verifies the given ASN.1 encoded ECDSA signature against a hash using the public key.
     ;
     ; @param hash      Hash of the data to verify.
     ; @param signature ASN.1 encoded signature.
     ;;
    #_public
    (§ method #_"boolean" (§ fn verify) [#_"byte[]" (§ name hash), #_"byte[]" (§ name signature)])
    (§ block
        (ECKey/verify hash, signature, (getPubKey))
    )

    ;;;
     ; Verifies the given R/S pair (signature) against a hash using the public key.
     ;;
    #_public
    (§ method #_"boolean" (§ fn verify) [#_"Sha256Hash" (§ name sigHash), #_"ECDSASignature" (§ name signature)])
    (§ block
        (ECKey/verify (.. sigHash (getBytes)), signature, (getPubKey))
    )

    ;;;
     ; Verifies the given ASN.1 encoded ECDSA signature against a hash using the public key, and throws an exception
     ; if the signature doesn't match.
     ; @throws java.security.SignatureException if the signature does not match.
     ;;
    #_public
    (§ method #_"void" (§ fn verifyOrThrow) [#_"byte[]" (§ name hash), #_"byte[]" (§ name signature)])
        (§ throws #_"SignatureException")
    (§ block
        (§ if (§ not (verify hash, signature)))
        (§ block
            (§ throw (§ new #_"SignatureException"))
        )
        nil
    )

    ;;;
     ; Verifies the given R/S pair (signature) against a hash using the public key, and throws an exception
     ; if the signature doesn't match.
     ; @throws java.security.SignatureException if the signature does not match.
     ;;
    #_public
    (§ method #_"void" (§ fn verifyOrThrow) [#_"Sha256Hash" (§ name sigHash), #_"ECDSASignature" (§ name signature)])
        (§ throws #_"SignatureException")
    (§ block
        (§ if (§ not (ECKey/verify (.. sigHash (getBytes)), signature, (getPubKey))))
        (§ block
            (§ throw (§ new #_"SignatureException"))
        )
        nil
    )

    ;;;
     ; Returns true if the given pubkey is canonical, i.e. the correct length taking into account compression.
     ;;
    #_public
    #_static
    (§ defn #_"boolean" (§ fn isPubKeyCanonical) [#_"byte[]" (§ name pubkey)])
    (§ block
        (§ if (< (.. pubkey length) 33))
        (§ block
            (§ return false)
        )
        ;; Uncompressed pubkey.
        (§ if (§ expr (§ ai pubkey 0) == 0x04))
        (§ block
            (§ return (== (.. pubkey length) 65))
        )
        ;; Compressed pubkey.
        (§ if (§ expr (§ ai pubkey 0) == 0x02 || (§ ai pubkey 0) == 0x03))
        (§ block
            (§ return (== (.. pubkey length) 33))
        )
        false
    )

    #_private
    #_static
    (§ defn- #_"ECKey" (§ fn extractKeyFromASN1) [#_"byte[]" (§ name asn1privkey)])
    (§ block
        ;; To understand this code, see the definition of the ASN.1 format for EC private keys in the OpenSSL source
        ;; code in ec_asn1.c:
        ;;
        ;; ASN1_SEQUENCE(EC_PRIVATEKEY) = {
        ;;   ASN1_SIMPLE(EC_PRIVATEKEY, version, LONG),
        ;;   ASN1_SIMPLE(EC_PRIVATEKEY, privateKey, ASN1_OCTET_STRING),
        ;;   ASN1_EXP_OPT(EC_PRIVATEKEY, parameters, ECPKPARAMETERS, 0),
        ;;   ASN1_EXP_OPT(EC_PRIVATEKEY, publicKey, ASN1_BIT_STRING, 1)
        ;; } ASN1_SEQUENCE_END(EC_PRIVATEKEY)
        (§ try )
        (§ block
            (§ var #_"ASN1InputStream" (§ name decoder) (§ new #_"ASN1InputStream" asn1privkey))
            (§ var #_"DLSequence" (§ name seq) (§ cast #_"DLSequence" (.. decoder (readObject))))
            (Preconditions/checkArgument (§ expr (.. decoder (readObject)) == nil), "Input contains extra bytes")
            (.. decoder (close))

            (Preconditions/checkArgument (§ expr (.. seq (size)) == 4), "Input does not appear to be an ASN.1 OpenSSL EC private key")

            (Preconditions/checkArgument (.. (§ cast #_"ASN1Integer" (.. seq (getObjectAt 0))) (getValue) (equals BigInteger/ONE)), "Input is of wrong version")

            (§ var #_"byte[]" (§ name privbits) (.. (§ cast #_"ASN1OctetString" (.. seq (getObjectAt 1))) (getOctets)))
            (§ var #_"BigInteger" (§ name privkey) (§ new #_"BigInteger" 1, privbits))

            (§ var #_"ASN1TaggedObject" (§ name pubkey) (§ cast #_"ASN1TaggedObject" (.. seq (getObjectAt 3))))
            (Preconditions/checkArgument (§ expr (.. pubkey (getTagNo)) == 1), "Input has 'publicKey' with bad tag number")
            (§ var #_"byte[]" (§ name pubbits) (.. (§ cast #_"DERBitString" (.. pubkey (getObject))) (getBytes)))
            (Preconditions/checkArgument (§ expr (.. pubbits length) == 33 || (.. pubbits length) == 65), "Input has 'publicKey' with invalid length")
            (§ var #_"int" (§ name encoding) (§ expr (§ ai pubbits 0) & 0xff))
            ;; Only allow compressed(2,3) and uncompressed(4), not infinity(0) or hybrid(6,7).
            (Preconditions/checkArgument (§ expr 2 <= encoding && encoding <= 4), "Input has 'publicKey' with invalid encoding")

            ;; Now sanity check to ensure the pubkey bytes match the privkey.
            (§ var #_"boolean" (§ name compressed) (== (.. pubbits length) 33))
            (§ var #_"ECKey" (§ name key) (§ new #_"ECKey" privkey, nil, compressed))
            (§ if (§ not (Arrays/equals (.. key (getPubKey)), pubbits)))
            (§ block
                (§ throw (§ new #_"IllegalArgumentException" "Public key in ASN.1 structure does not match private key."))
            )
            (§ return key)
        )
        (§ catch #_"IOException" (§ name e))
        (§ block
            (§ throw (§ new #_"RuntimeException" e)) ;; Cannot happen, reading from memory stream.
        )
    )

    ;;;
     ; Signs a text message using the standard Bitcoin messaging signing format and returns the signature as a base64
     ; encoded string.
     ;
     ; @throws IllegalStateException if this ECKey does not have the private part.
     ; @throws KeyCrypterException if this ECKey is encrypted and no AESKey is provided or it does not decrypt the ECKey.
     ;;
    #_public
    (§ method #_"String" (§ fn signMessage) [#_"String" (§ name message)])
        (§ throws #_"KeyCrypterException")
    (§ block
        (signMessage message, nil)
    )

    ;;;
     ; Signs a text message using the standard Bitcoin messaging signing format and returns the signature as a base64
     ; encoded string.
     ;
     ; @throws IllegalStateException if this ECKey does not have the private part.
     ; @throws KeyCrypterException if this ECKey is encrypted and no AESKey is provided or it does not decrypt the ECKey.
     ;;
    #_public
    (§ method #_"String" (§ fn signMessage) [#_"String" (§ name message), #_nilable #_"KeyParameter" (§ name aesKey)])
        (§ throws #_"KeyCrypterException")
    (§ block
        (§ var #_"byte[]" (§ name data) (Utils/formatMessageForSigning message))
        (§ var #_"Sha256Hash" (§ name hash) (Sha256Hash/twiceOf data))
        (§ var #_"ECDSASignature" (§ name sig) (sign hash, aesKey))
        ;; Now we have to work backwards to figure out the recId needed to recover the signature.
        (§ var #_"int" (§ name recId) -1)
        (§ for (§ var #_"int" (§ name i) 0) :for (< i 4) :for (§ ass (§ name i) (+ i 1)))
        (§ block
            (§ var #_"ECKey" (§ name k) (ECKey/recoverFromSignature i, sig, hash, (isCompressed)))
            (§ if (§ expr k != nil && (.. k pub (equals pub))))
            (§ block
                (§ ass (§ name recId) i)
                (§ break )
            )
        )
        (§ if (§ expr recId == -1))
        (§ block
            (§ throw (§ new #_"RuntimeException" "Could not construct a recoverable key. This should never happen."))
        )
        (§ var #_"int" (§ name headerByte) (+ recId 27 (if (isCompressed) 4 0)))
        (§ var #_"byte[]" (§ name sigData) (§ new #_"byte[]" (§ count 65))) ;; 1 header + 32 bytes for R + 32 bytes for S
        (§ ass (§ name (§ ai sigData 0)) (§ cast #_"byte" headerByte))
        (System/arraycopy (Utils/bigIntegerToBytes (.. sig r), 32), 0, sigData, 1, 32)
        (System/arraycopy (Utils/bigIntegerToBytes (.. sig s), 32), 0, sigData, 33, 32)
        (§ new #_"String" (Base64/encode sigData), (Charset/forName "UTF-8"))
    )

    ;;;
     ; Given an arbitrary piece of text and a Bitcoin-format message signature encoded in base64, returns an ECKey
     ; containing the public key that was used to sign it.  This can then be compared to the expected public key to
     ; determine if the signature was correct.  These sorts of signatures are compatible with the Bitcoin-Qt/bitcoind
     ; format generated by signmessage/verifymessage RPCs and GUI menu options.  They are intended for humans to verify
     ; their communications with each other, hence the base64 format and the fact that the input is text.
     ;
     ; @param message Some piece of human readable text.
     ; @param signatureBase64 The Bitcoin-format message signature in base64.
     ; @throws SignatureException if the public key could not be recovered or if there was a signature format error.
     ;;
    #_public
    #_static
    (§ defn #_"ECKey" (§ fn signedMessageToKey) [#_"String" (§ name message), #_"String" (§ name signatureBase64)])
        (§ throws #_"SignatureException")
    (§ block
        (§ var #_"byte[]" (§ name signatureEncoded))
        (§ try )
        (§ block
            (§ ass (§ name signatureEncoded) (Base64/decode signatureBase64))
        )
        (§ catch #_"RuntimeException" (§ name e))
        (§ block
            ;; This is what you get back from Bouncy Castle if base64 doesn't decode :( ;; )
            (§ throw (§ new #_"SignatureException" "Could not decode base64", e))
        )
        ;; Parse the signature bytes into r/s and the selector value.
        (§ if (< (.. signatureEncoded length) 65))
        (§ block
            (§ throw (§ new #_"SignatureException" (§ str "Signature truncated, expected 65 bytes and got " + (.. signatureEncoded length))))
        )

        (§ var #_"int" (§ name header) (§ expr (§ ai signatureEncoded 0) & 0xff))
        ;; The header byte: 0x1B = first key with even y, 0x1C = first key with odd y,
        ;;                  0x1D = second key with even y, 0x1E = second key with odd y.
        (§ if (§ expr header < 27 || 34 < header))
        (§ block
            (§ throw (§ new #_"SignatureException" (§ expr "Header byte out of range: " + header)))
        )
        (§ var #_"BigInteger" (§ name r) (§ new #_"BigInteger" 1, (Arrays/copyOfRange signatureEncoded, 1, 33)))
        (§ var #_"BigInteger" (§ name s) (§ new #_"BigInteger" 1, (Arrays/copyOfRange signatureEncoded, 33, 65)))
        (§ var #_"ECDSASignature" (§ name sig) (§ new #_"ECDSASignature" r, s))
        (§ var #_"byte[]" (§ name messageBytes) (Utils/formatMessageForSigning message))
        ;; Note that the C++ code doesn't actually seem to specify any character encoding.
        ;; Presumably it's whatever JSON-SPIRIT hands back.  Assume UTF-8 for now.
        (§ var #_"Sha256Hash" (§ name messageHash) (Sha256Hash/twiceOf messageBytes))
        (§ var #_"boolean" (§ name compressed) false)
        (§ if (<= 31 header))
        (§ block
            (§ ass (§ name compressed) true)
            (§ ass (§ name header) (- header 4))
        )
        (§ var #_"int" (§ name recId) (- header 27))
        (§ var #_"ECKey" (§ name key) (ECKey/recoverFromSignature recId, sig, messageHash, compressed))
        (§ if (nil? key))
        (§ block
            (§ throw (§ new #_"SignatureException" "Could not recover public key from signature"))
        )
        key
    )

    ;;;
     ; Convenience wrapper around {@link ECKey#signedMessageToKey(String, String)}.
     ; If the key derived from the signature is not the same as this one, throws a SignatureException.
     ;;
    #_public
    (§ method #_"void" (§ fn verifyMessage) [#_"String" (§ name message), #_"String" (§ name signatureBase64)])
        (§ throws #_"SignatureException")
    (§ block
        (§ var #_"ECKey" (§ name key) (ECKey/signedMessageToKey message, signatureBase64))
        (§ if (§ not (.. key pub (equals pub))))
        (§ block
            (§ throw (§ new #_"SignatureException" "Signature did not match for message"))
        )
        nil
    )

    ;;;
     ; <p>Given the components of a signature and a selector value, recover and return the public key
     ; that generated the signature according to the algorithm in SEC1v2 section 4.1.6.</p>
     ;
     ; <p>The recId is an index from 0 to 3 which indicates which of the 4 possible keys is the correct one.  Because
     ; the key recovery operation yields multiple potential keys, the correct key must either be stored alongside the
     ; signature, or you must be willing to try each recId in turn until you find one that outputs the key you are
     ; expecting.</p>
     ;
     ; <p>If this method returns null it means recovery was not possible and recId should be iterated.</p>
     ;
     ; <p>Given the above two points, a correct usage of this method is inside a for loop from 0 to 3, and if the
     ; output is null OR a key that is not the one you expect, you try again with the next recId.</p>
     ;
     ; @param recId Which possible key to recover.
     ; @param sig The R and S components of the signature, wrapped.
     ; @param message Hash of the data that was signed.
     ; @param compressed Whether or not the original pubkey was compressed.
     ; @return An ECKey containing only the public part, or null if recovery wasn't possible.
     ;;
    #_nilable
    #_public
    #_static
    (§ defn #_"ECKey" (§ fn recoverFromSignature) [#_"int" (§ name recId), #_"ECDSASignature" (§ name sig), #_"Sha256Hash" (§ name message), #_"boolean" (§ name compressed)])
    (§ block
        (Preconditions/checkArgument (§ expr 0 <= recId), "recId must be positive")
        (Preconditions/checkArgument (§ expr 0 <= (.. sig r (signum))), "r must be positive")
        (Preconditions/checkArgument (§ expr 0 <= (.. sig s (signum))), "s must be positive")
        (Preconditions/checkNotNull message)

        ;; 1.0 For j from 0 to h   (h == recId here and the loop is outside this function)
        ;;   1.1 Let x = r + jn
        (§ var #_"BigInteger" (§ name n) (.. CURVE (getN))) ;; Curve order.
        (§ var #_"BigInteger" (§ name i) (BigInteger/valueOf (/ (§ cast #_"long" recId) 2)))
        (§ var #_"BigInteger" (§ name x) (.. sig r (add (.. i (multiply n)))))
        ;;   1.2. Convert the integer x to an octet string X of length mlen using the conversion routine
        ;;        specified in Section 2.3.7, where mlen = ⌈(log2 p)/8⌉ or mlen = ⌈m/8⌉.
        ;;   1.3. Convert the octet string (16 set binary digits)||X to an elliptic curve point R using the
        ;;        conversion routine specified in Section 2.3.4. If this conversion routine outputs “invalid”,
        ;;        then do another iteration of Step 1.
        ;;
        ;; More concisely, what these points mean is to use X as a compressed public key.
        (§ var #_"BigInteger" (§ name prime) SecP256K1Curve/q)
        ;; Cannot have point co-ordinates larger than this as everything takes place modulo Q.
        (§ if (§ expr 0 <= (.. x (compareTo prime))))
        (§ block
            (§ return nil)
        )

        ;; Compressed keys require you to know an extra bit of data about the y-coord as there are two possibilities.
        ;; So it's encoded in the recId.
        (§ var #_"ECPoint" (§ name R) (decompressKey x, (§ expr (& recId 1) == 1)))
        ;;   1.4. If nR != point at infinity, then do another iteration of Step 1 (callers responsibility).
        (§ if (§ not (.. R (multiply n) (isInfinity))))
        (§ block
            (§ return nil)
        )

        ;;   1.5. Compute e from M using Steps 2 and 3 of ECDSA signature verification.
        (§ var #_"BigInteger" (§ name e) (.. message (toBigInteger)))
        ;;   1.6. For k from 1 to 2 do the following.   (loop is outside this function via iterating recId)
        ;;   1.6.1. Compute a candidate public key as:
        ;;               Q = mi(r) * (sR - eG)
        ;;
        ;; Where mi(x) is the modular multiplicative inverse. We transform this into the following:
        ;;               Q = (mi(r) * s ** R) + (mi(r) * -e ** G)
        ;; Where -e is the modular additive inverse of e, that is z such that z + e = 0 (mod n). In the above equation
        ;; ** is point multiplication and + is point addition (the EC group operator).
        ;;
        ;; We can find the additive inverse by subtracting e from zero then taking the mod. For example the additive
        ;; inverse of 3 modulo 11 is 8 because 3 + 8 mod 11 = 0, and -3 mod 11 = 8.
        (§ var #_"BigInteger" (§ name eInv) (.. BigInteger/ZERO (subtract e) (mod n)))
        (§ var #_"BigInteger" (§ name rInv) (.. sig r (modInverse n)))
        (§ var #_"BigInteger" (§ name srInv) (.. rInv (multiply (.. sig s)) (mod n)))
        (§ var #_"BigInteger" (§ name eInvrInv) (.. rInv (multiply eInv) (mod n)))
        (§ var #_"ECPoint" (§ name q) (ECAlgorithms/sumOfTwoMultiplies (.. CURVE (getG)), eInvrInv, R, srInv))
        (ECKey/fromPublicOnly (.. q (getEncoded compressed)))
    )

    ;;; Decompress a compressed public key (x co-ord and low-bit of y-coord). ;;
    #_private
    #_static
    (§ defn- #_"ECPoint" (§ fn decompressKey) [#_"BigInteger" (§ name xBN), #_"boolean" (§ name yBit)])
    (§ block
        (§ var #_"X9IntegerConverter" (§ name x9) (§ new #_"X9IntegerConverter"))
        (§ var #_"byte[]" (§ name compEnc) (.. x9 (integerToBytes xBN, (§ expr 1 + (.. x9 (getByteLength (.. CURVE (getCurve))))))))
        (§ ass (§ name (§ ai compEnc 0)) (§ cast #_"byte" (if yBit 0x03 0x02)))
        (.. CURVE (getCurve) (decodePoint compEnc))
    )

    ;;;
     ; Returns a 32 byte array containing the private key.
     ; @throws org.bitcoinj.core.ECKey.MissingPrivateKeyException if the private key bytes are missing/encrypted.
     ;;
    #_public
    (§ method #_"byte[]" (§ fn getPrivKeyBytes) [])
    (§ block
        (Utils/bigIntegerToBytes (getPrivKey), 32)
    )

    ;;;
     ; Returns the creation time of this key or zero if the key was deserialized from a version that did not store
     ; that data.
     ;;
    #_override
    #_public
    (§ method #_"long" (§ fn getCreationTimeSeconds) [])
    (§ block
        creationTimeSeconds
    )

    ;;;
     ; Sets the creation time of this key.  Zero is a convention to mean "unavailable".  This method can be useful when
     ; you have a raw key you are importing from somewhere else.
     ;;
    #_public
    (§ method #_"void" (§ fn setCreationTimeSeconds) [#_"long" (§ name newCreationTimeSeconds)])
    (§ block
        (§ if (< newCreationTimeSeconds 0))
        (§ block
            (§ throw (§ new #_"IllegalArgumentException" (§ expr "Cannot set creation time to negative value: " + newCreationTimeSeconds)))
        )
        (§ ass (§ name creationTimeSeconds) newCreationTimeSeconds)
        nil
    )

    ;;;
     ; Create an encrypted private key with the keyCrypter and the AES key supplied.
     ; This method returns a new encrypted key and leaves the original unchanged.
     ;
     ; @param keyCrypter The keyCrypter that specifies exactly how the encrypted bytes are created.
     ; @param aesKey The KeyParameter with the AES encryption key (usually constructed with keyCrypter#deriveKey and cached as it is slow to create).
     ; @return encryptedKey
     ;;
    #_public
    (§ method #_"ECKey" (§ fn encrypt) [#_"KeyCrypter" (§ name keyCrypter), #_"KeyParameter" (§ name aesKey)])
        (§ throws #_"KeyCrypterException")
    (§ block
        (Preconditions/checkNotNull keyCrypter)

        (§ var #_"byte[]" (§ name privKeyBytes) (getPrivKeyBytes))
        (§ var #_"EncryptedData" (§ name encryptedPrivateKey) (.. keyCrypter (encrypt privKeyBytes, aesKey)))
        (§ var #_"ECKey" (§ name result) (ECKey/fromEncrypted encryptedPrivateKey, keyCrypter, (getPubKey)))
        (.. result (setCreationTimeSeconds creationTimeSeconds))
        result
    )

    ;;;
     ; Create a decrypted private key with the keyCrypter and AES key supplied.  Note that if the aesKey is wrong, this
     ; has some chance of throwing KeyCrypterException due to the corrupted padding that will result, but it can also
     ; just yield a garbage key.
     ;
     ; @param keyCrypter The keyCrypter that specifies exactly how the decrypted bytes are created.
     ; @param aesKey The KeyParameter with the AES encryption key (usually constructed with keyCrypter#deriveKey and cached).
     ;;
    #_public
    (§ method #_"ECKey" (§ fn decrypt) [#_"KeyCrypter" (§ name keyCrypter), #_"KeyParameter" (§ name aesKey)])
        (§ throws #_"KeyCrypterException")
    (§ block
        (Preconditions/checkNotNull keyCrypter)

        ;; Check that the keyCrypter matches the one used to encrypt the keys, if set.
        (§ if (§ expr (.. this keyCrypter) != nil && (§ not (.. this keyCrypter (equals keyCrypter)))))
        (§ block
            (§ throw (§ new #_"KeyCrypterException" "The keyCrypter being used to decrypt the key is different to the one that was used to encrypt it"))
        )

        (Preconditions/checkState (some? encryptedPrivateKey), "This key is not encrypted")

        (§ var #_"byte[]" (§ name unencryptedPrivateKey) (.. keyCrypter (decrypt encryptedPrivateKey, aesKey)))
        (§ var #_"ECKey" (§ name key) (ECKey/fromPrivate unencryptedPrivateKey))
        (§ if (§ not (isCompressed)))
        (§ block
            (§ ass (§ name key) (.. key (decompress)))
        )
        (§ if (§ not (Arrays/equals (.. key (getPubKey)), (getPubKey))))
        (§ block
            (§ throw (§ new #_"KeyCrypterException" "Provided AES key is wrong"))
        )

        (.. key (setCreationTimeSeconds creationTimeSeconds))
        key
    )

    ;;;
     ; Create a decrypted private key with AES key.  Note that if the AES key is wrong, this
     ; has some chance of throwing KeyCrypterException due to the corrupted padding that will result, but it can also
     ; just yield a garbage key.
     ;
     ; @param aesKey The KeyParameter with the AES encryption key (usually constructed with keyCrypter#deriveKey and cached).
     ;;
    #_public
    (§ method #_"ECKey" (§ fn decrypt) [#_"KeyParameter" (§ name aesKey)])
        (§ throws #_"KeyCrypterException")
    (§ block
        (§ var #_"KeyCrypter" (§ name crypter) (getKeyCrypter))
        (§ if (nil? crypter))
        (§ block
            (§ throw (§ new #_"KeyCrypterException" "No key crypter available"))
        )

        (decrypt crypter, aesKey)
    )

    ;;;
     ; Creates decrypted private key if needed.
     ;;
    #_public
    (§ method #_"ECKey" (§ fn maybeDecrypt) [#_nilable #_"KeyParameter" (§ name aesKey)])
        (§ throws #_"KeyCrypterException")
    (§ block
        (if (§ expr (isEncrypted) && aesKey != nil) (decrypt aesKey) this)
    )

    ;;;
     ; <p>Check that it is possible to decrypt the key with the keyCrypter and that the original key is returned.</p>
     ;
     ; <p>Because it is a critical failure if the private keys cannot be decrypted successfully (resulting of loss of
     ; all bitcoins controlled by the private key) you can use this method to check when you *encrypt* a wallet that
     ; it can definitely be decrypted successfully.</p>
     ;
     ; <p>See {@link Wallet#encrypt(KeyCrypter keyCrypter, KeyParameter aesKey)} for example usage.</p>
     ;
     ; @return true if the encrypted key can be decrypted back to the original key successfully.
     ;;
    #_public
    #_static
    (§ defn #_"boolean" (§ fn encryptionIsReversible) [#_"ECKey" (§ name originalKey), #_"ECKey" (§ name encryptedKey), #_"KeyCrypter" (§ name keyCrypter), #_"KeyParameter" (§ name aesKey)])
    (§ block
        (§ try )
        (§ block
            (§ var #_"ECKey" (§ name rebornUnencryptedKey) (.. encryptedKey (decrypt keyCrypter, aesKey)))
            (§ var #_"byte[]" (§ name originalPrivateKeyBytes) (.. originalKey (getPrivKeyBytes)))
            (§ var #_"byte[]" (§ name rebornKeyBytes) (.. rebornUnencryptedKey (getPrivKeyBytes)))
            (§ if (§ not (Arrays/equals originalPrivateKeyBytes, rebornKeyBytes)))
            (§ block
                (.. log (error "The check that encryption could be reversed failed for {}", originalKey))
                (§ return false)
            )
            (§ return true)
        )
        (§ catch #_"KeyCrypterException" (§ name kce))
        (§ block
            (.. log (error (.. kce (getMessage))))
            (§ return false)
        )
    )

    ;;;
     ; Indicates whether the private key is encrypted (true) or not (false).
     ; A private key is deemed to be encrypted when there is both a KeyCrypter and the encryptedPrivateKey is non-zero.
     ;;
    #_override
    #_public
    (§ method #_"boolean" (§ fn isEncrypted) [])
    (§ block
        (§ expr keyCrypter != nil && encryptedPrivateKey != nil && 0 < (.. encryptedPrivateKey encryptedBytes length))
    )

    #_nilable
    #_override
    #_public
    (§ method #_"Protos.Wallet.EncryptionType" (§ fn getEncryptionType) [])
    (§ block
        (if (some? keyCrypter) (.. keyCrypter (getUnderstoodEncryptionType)) Protos/Wallet/EncryptionType/UNENCRYPTED)
    )

    ;;;
     ; A wrapper for {@link #getPrivKeyBytes()} that returns null if the private key bytes are missing or would have
     ; to be derived (for the HD key case).
     ;;
    #_override
    #_nilable
    #_public
    (§ method #_"byte[]" (§ fn getSecretBytes) [])
    (§ block
        (§ if (hasPrivKey))
        (§ block
            (§ return (getPrivKeyBytes))
        )

        nil
    )

    ;;; An alias for {@link #getEncryptedPrivateKey()}. ;;
    #_nilable
    #_override
    #_public
    (§ method #_"EncryptedData" (§ fn getEncryptedData) [])
    (§ block
        (getEncryptedPrivateKey)
    )

    ;;;
     ; Returns the the encrypted private key bytes and initialisation vector for this ECKey, or null if the ECKey
     ; is not encrypted.
     ;;
    #_nilable
    #_public
    (§ method #_"EncryptedData" (§ fn getEncryptedPrivateKey) [])
    (§ block
        encryptedPrivateKey
    )

    ;;;
     ; Returns the KeyCrypter that was used to encrypt to encrypt this ECKey.  You need this to decrypt the ECKey.
     ;;
    #_nilable
    #_public
    (§ method #_"KeyCrypter" (§ fn getKeyCrypter) [])
    (§ block
        keyCrypter
    )

    #_public
    #_static
    (§ class #_"MissingPrivateKeyException" (§ extends #_"RuntimeException")
    )

    #_public
    #_static
    (§ class #_"KeyIsEncryptedException" (§ extends #_"MissingPrivateKeyException")
    )

    #_override
    #_public
    (§ method #_"boolean" (§ fn equals) [#_"Object" (§ name o)])
    (§ block
        (§ if (§ expr this == o))
        (§ block
            (§ return true)
        )
        (§ if (§ expr o == nil || (§ not (§ insta o #_"ECKey"))))
        (§ block
            (§ return false)
        )
        (§ var #_"ECKey" (§ name other) (§ cast #_"ECKey" o))
        (§ expr (Objects/equal (.. this priv), (.. other priv)) && (Objects/equal (.. this pub), (.. other pub)) && (Objects/equal (.. this creationTimeSeconds), (.. other creationTimeSeconds)) && (Objects/equal (.. this keyCrypter), (.. other keyCrypter)) && (Objects/equal (.. this encryptedPrivateKey), (.. other encryptedPrivateKey)))
    )

    #_override
    #_public
    (§ method #_"int" (§ fn hashCode) [])
    (§ block
        (.. pub (hashCode))
    )

    #_override
    #_public
    (§ method #_"String" (§ fn toString) [])
    (§ block
        (toString false, nil)
    )

    ;;;
     ; Produce a string rendering of the ECKey INCLUDING the private key.
     ; Unless you absolutely need the private key it is better for security reasons to just use {@link #toString()}.
     ;;
    #_public
    (§ method #_"String" (§ fn toStringWithPrivate) [#_"NetworkParameters" (§ name params)])
    (§ block
        (toString true, params)
    )

    #_public
    (§ method #_"String" (§ fn getPrivateKeyAsHex) [])
    (§ block
        (.. Utils/HEX (encode (getPrivKeyBytes)))
    )

    #_public
    (§ method #_"String" (§ fn getPublicKeyAsHex) [])
    (§ block
        (.. Utils/HEX (encode (.. pub (getEncoded))))
    )

    #_private
    (§ method- #_"String" (§ fn toString) [#_"boolean" (§ name includePrivate), #_"NetworkParameters" (§ name params)])
    (§ block
        (§ var #_"MoreObjects.ToStringHelper" (§ name helper) (.. (MoreObjects/toStringHelper this) (omitNullValues)))
        (.. helper (add "pub HEX", (getPublicKeyAsHex)))
        (§ if includePrivate)
        (§ block
            (§ try )
            (§ block
                (.. helper (add "priv HEX", (getPrivateKeyAsHex)))
            )
            (§ catch #_"IllegalStateException" (§ name _))
            (§ block
                ;; TODO: Make hasPrivKey() work for deterministic keys and fix this.
            )
            (§ catch #_"Exception" (§ name e))
            (§ block
                (§ var #_"String" (§ name message) (.. e (getMessage)))
                (.. helper (add "priv EXCEPTION", (§ str (.. e (getClass) (getName)) + (if (some? message) (§ str ": " + message) ""))))
            )
        )
        (§ if (< 0 creationTimeSeconds))
        (§ block
            (.. helper (add "creationTimeSeconds", creationTimeSeconds))
        )
        (.. helper (add "keyCrypter", keyCrypter))
        (§ if includePrivate)
        (§ block
            (.. helper (add "encryptedPrivateKey", encryptedPrivateKey))
        )
        (.. helper (add "isEncrypted", (isEncrypted)))
        (.. helper (add "isPubKeyOnly", (isPubKeyOnly)))
        (.. helper (toString))
    )

    #_public
    (§ method #_"void" (§ fn formatKeyWithAddress) [#_"boolean" (§ name includePrivateKeys), #_"StringBuilder" (§ name sb), #_"NetworkParameters" (§ name params)])
    (§ block
        (§ var #_"Address" (§ name address) (toAddress params))
        (.. sb (append "  addr:"))
        (.. sb (append (.. address (toString))))
        (.. sb (append "  hash160:"))
        (.. sb (append (.. Utils/HEX (encode (getPubKeyHash)))))
        (§ if (< 0 creationTimeSeconds))
        (§ block
            (.. sb (append "  creationTimeSeconds:") (append creationTimeSeconds))
        )
        (.. sb (append "\n"))
        (§ if includePrivateKeys)
        (§ block
            (.. sb (append "  "))
            (.. sb (append (toStringWithPrivate params)))
            (.. sb (append "\n"))
        )
        nil
    )
)

#_(ns org.bitcoinj.core #_"EmptyMessage"
    (:import [java.io IOException OutputStream]))

;;;
 ; <p>Parent class for header only messages that don't have a payload.
 ; Currently this includes getaddr, verack and special bitcoinj class UnknownMessage.</p>
 ;
 ; <p>Instances of this class are not safe for use by multiple threads.</p>
 ;;
#_public
#_abstract
(§ class #_"EmptyMessage" (§ extends #_"Message")
    #_public
    (§ constructor #_"EmptyMessage" [])
    (§ block
        (§ ass (§ name length) 0)
        this
    )

    #_public
    (§ constructor #_"EmptyMessage" [#_"NetworkParameters" (§ name params)])
    (§ block
        (§ super params)
        (§ ass (§ name length) 0)
        this
    )

    #_public
    (§ constructor #_"EmptyMessage" [#_"NetworkParameters" (§ name params), #_"byte[]" (§ name payload), #_"int" (§ name offset)])
        (§ throws #_"ProtocolException")
    (§ block
        (§ super params, payload, offset)
        (§ ass (§ name length) 0)
        this
    )

    #_override
    #_protected
    (§ method #_"void" (§ fn bitcoinSerializeToStream) [#_"OutputStream" (§ name stream)])
        (§ throws #_"IOException")
    (§ block
        nil
    )

    #_override
    #_protected
    (§ method #_"void" (§ fn parse) [])
        (§ throws #_"ProtocolException")
    (§ block
        nil
    )

    #_override
    #_public
    (§ method #_"byte[]" (§ fn bitcoinSerialize) [])
    (§ block
        (§ new #_"byte[]" (§ count 0))
    )
)

#_(ns org.bitcoinj.core #_"FilteredBlock"
    (:import [java.io IOException OutputStream]
             [java.util *])
    (:import [com.google.common.base Objects]))

;;;
 ; <p>A FilteredBlock is used to relay a block with its transactions filtered using a {@link BloomFilter}.  It consists
 ; of the block header and a {@link PartialMerkleTree} which contains the transactions which matched the filter.</p>
 ;
 ; <p>Instances of this class are not safe for use by multiple threads.</p>
 ;;
#_public
(§ class #_"FilteredBlock" (§ extends #_"Message")
    #_private
    (§ field- #_"Block" (§ name header))

    #_private
    (§ field- #_"PartialMerkleTree" (§ name merkleTree))
    #_private
    (§ field- #_"List<Sha256Hash>" (§ name cachedTransactionHashes))

    ;; A set of transactions whose hashes are a subset of getTransactionHashes().
    ;; These were relayed as a part of the filteredblock getdata, i.e. likely weren't previously received as loose transactions.
    #_private
    (§ field- #_"Map<Sha256Hash, Transaction>" (§ name associatedTransactions) (§ new #_"HashMap<>"))

    #_public
    (§ constructor #_"FilteredBlock" [#_"NetworkParameters" (§ name params), #_"byte[]" (§ name payloadBytes)])
        (§ throws #_"ProtocolException")
    (§ block
        (§ super params, payloadBytes, 0)
        this
    )

    #_public
    (§ constructor #_"FilteredBlock" [#_"NetworkParameters" (§ name params), #_"Block" (§ name header), #_"PartialMerkleTree" (§ name pmt)])
    (§ block
        (§ super params)
        (§ ass (§ name (.. this header)) header)
        (§ ass (§ name (.. this merkleTree)) pmt)
        this
    )

    #_override
    #_public
    (§ method #_"void" (§ fn bitcoinSerializeToStream) [#_"OutputStream" (§ name stream)])
        (§ throws #_"IOException")
    (§ block
        (§ if (== (.. header transactions) nil))
        (§ block
            (.. header (bitcoinSerializeToStream stream))
        )
        (§ else )
        (§ block
            (.. header (cloneAsHeader) (bitcoinSerializeToStream stream))
        )
        (.. merkleTree (bitcoinSerializeToStream stream))
        nil
    )

    #_override
    #_protected
    (§ method #_"void" (§ fn parse) [])
        (§ throws #_"ProtocolException")
    (§ block
        (§ var #_"byte[]" (§ name headerBytes) (§ new #_"byte[]" (§ count Block/HEADER_SIZE)))
        (System/arraycopy payload, 0, headerBytes, 0, Block/HEADER_SIZE)
        (§ ass (§ name header) (.. params (getDefaultSerializer) (makeBlock headerBytes)))

        (§ ass (§ name merkleTree) (§ new #_"PartialMerkleTree" params, payload, Block/HEADER_SIZE))

        (§ ass (§ name length) (§ expr Block/HEADER_SIZE + (.. merkleTree (getMessageSize))))
        nil
    )

    ;;;
     ; Gets a list of leaf hashes which are contained in the partial merkle tree in this filtered block.
     ;
     ; @throws ProtocolException if the partial merkle block is invalid or the merkle root of the partial merkle block doesnt match the block header.
     ;;
    #_public
    (§ method #_"List<Sha256Hash>" (§ fn getTransactionHashes) [])
        (§ throws #_"VerificationException")
    (§ block
        (§ if (some? cachedTransactionHashes))
        (§ block
            (§ return (Collections/unmodifiableList cachedTransactionHashes))
        )

        (§ var #_"List<Sha256Hash>" (§ name hashesMatched) (§ new #_"LinkedList<>"))
        (§ if (.. header (getMerkleRoot) (equals (.. merkleTree (getTxnHashAndMerkleRoot hashesMatched)))))
        (§ block
            (§ ass (§ name cachedTransactionHashes) hashesMatched)
            (§ return (Collections/unmodifiableList cachedTransactionHashes))
        )

        (§ throw (§ new #_"VerificationException" "Merkle root of block header does not match merkle root of partial merkle tree."))
    )

    ;;;
     ; Gets a copy of the block header.
     ;;
    #_public
    (§ method #_"Block" (§ fn getBlockHeader) [])
    (§ block
        (.. header (cloneAsHeader))
    )

    ;;; Gets the hash of the block represented in this FilteredBlock. ;;
    #_override
    #_public
    (§ method #_"Sha256Hash" (§ fn getHash) [])
    (§ block
        (.. header (getHash))
    )

    ;;;
     ; Provide this FilteredBlock with a transaction which is in its Merkle tree.
     ; @return false if the tx is not relevant to this FilteredBlock.
     ;;
    #_public
    (§ method #_"boolean" (§ fn provideTransaction) [#_"Transaction" (§ name tx)])
        (§ throws #_"VerificationException")
    (§ block
        (§ var #_"Sha256Hash" (§ name hash) (.. tx (getHash)))
        (§ if (.. (getTransactionHashes) (contains hash)))
        (§ block
            (.. associatedTransactions (put hash, tx))
            (§ return true)
        )
        false
    )

    ;;; Returns the {@link PartialMerkleTree} object that provides the mathematical proof of transaction inclusion in the block. ;;
    #_public
    (§ method #_"PartialMerkleTree" (§ fn getPartialMerkleTree) [])
    (§ block
        merkleTree
    )

    ;;; Gets the set of transactions which were provided using provideTransaction() which match in getTransactionHashes(). ;;
    #_public
    (§ method #_"Map<Sha256Hash, Transaction>" (§ fn getAssociatedTransactions) [])
    (§ block
        (Collections/unmodifiableMap associatedTransactions)
    )

    ;;; Number of transactions in this block, before it was filtered. ;;
    #_public
    (§ method #_"int" (§ fn getTransactionCount) [])
    (§ block
        (.. merkleTree (getTransactionCount))
    )

    #_override
    #_public
    (§ method #_"boolean" (§ fn equals) [#_"Object" (§ name o)])
    (§ block
        (§ if (§ expr this == o))
        (§ block
            (§ return true)
        )
        (§ if (§ expr o == nil || (getClass) != (.. o (getClass))))
        (§ block
            (§ return false)
        )
        (§ var #_"FilteredBlock" (§ name other) (§ cast #_"FilteredBlock" o))
        (§ expr (.. associatedTransactions (equals (.. other associatedTransactions))) && (.. header (equals (.. other header))) && (.. merkleTree (equals (.. other merkleTree))))
    )

    #_override
    #_public
    (§ method #_"int" (§ fn hashCode) [])
    (§ block
        (Objects/hashCode associatedTransactions, header, merkleTree)
    )

    #_override
    #_public
    (§ method #_"String" (§ fn toString) [])
    (§ block
        (§ expr "FilteredBlock{merkleTree=" + merkleTree + ", header=" + header + "}")
    )
)

#_(ns org.bitcoinj.core #_"FullPrunedBlockChain"
    (:import [java.util ArrayList LinkedList List ListIterator Set]
             [java.util.concurrent *])
    (:import [com.google.common.base Preconditions]
             [org.slf4j Logger LoggerFactory])
   (:require [org.bitcoinj.script Script]
             [org.bitcoinj.script.Script VerifyFlag]
             [org.bitcoinj.store BlockStoreException FullPrunedBlockStore]
             [org.bitcoinj.utils *]
             [org.bitcoinj.wallet Wallet]))

;;;
 ; <p>A FullPrunedBlockChain works in conjunction with a {@link FullPrunedBlockStore} to verify all the rules of the
 ; Bitcoin system, with the downside being a large cost in system resources.  Fully verifying means all unspent
 ; transaction outputs are stored.  Once a transaction output is spent and that spend is buried deep enough, the data
 ; related to it is deleted to ensure disk space usage doesn't grow forever.  For this reason a pruning node cannot
 ; serve the full block chain to other clients, but it nevertheless provides the same security guarantees as Bitcoin
 ; Core does.</p>
 ;;
#_public
(§ class #_"FullPrunedBlockChain" (§ extends #_"AbstractBlockChain")
    #_private
    #_static
    (§ def- #_"Logger" (§ name log) (LoggerFactory/getLogger (§ klass #_"FullPrunedBlockChain")))

    ;;;
     ; Keeps a map of block hashes to StoredBlocks.
     ;;
    #_protected
    (§ field #_"FullPrunedBlockStore" (§ name blockStore))

    ;; Whether or not to execute scriptPubKeys before accepting a transaction (i.e. check signatures).
    #_private
    (§ field- #_"boolean" (§ name runScripts) true)

    ;;;
     ; Constructs a block chain connected to the given wallet and store.  To obtain a {@link Wallet} you can construct
     ; one from scratch, or you can deserialize a saved wallet from disk using {@link Wallet#loadFromFile(java.io.File)}.
     ;;
    #_public
    (§ constructor #_"FullPrunedBlockChain" [#_"Context" (§ name context), #_"Wallet" (§ name wallet), #_"FullPrunedBlockStore" (§ name blockStore)])
        (§ throws #_"BlockStoreException")
    (§ block
        (§ this context, (§ new #_"ArrayList<Wallet>"), blockStore)
        (addWallet wallet)
        this
    )

    ;;;
     ; Constructs a block chain connected to the given wallet and store.  To obtain a {@link Wallet} you can construct
     ; one from scratch, or you can deserialize a saved wallet from disk using {@link Wallet#loadFromFile(java.io.File)}.
     ;;
    #_public
    (§ constructor #_"FullPrunedBlockChain" [#_"NetworkParameters" (§ name params), #_"Wallet" (§ name wallet), #_"FullPrunedBlockStore" (§ name blockStore)])
        (§ throws #_"BlockStoreException")
    (§ block
        (§ this (Context/getOrCreate params), wallet, blockStore)
        this
    )

    ;;;
     ; Constructs a block chain connected to the given store.
     ;;
    #_public
    (§ constructor #_"FullPrunedBlockChain" [#_"Context" (§ name context), #_"FullPrunedBlockStore" (§ name blockStore)])
        (§ throws #_"BlockStoreException")
    (§ block
        (§ this context, (§ new #_"ArrayList<Wallet>"), blockStore)
        this
    )

    ;;;
     ; See {@link #FullPrunedBlockChain(Context, Wallet, FullPrunedBlockStore)}.
     ;;
    #_public
    (§ constructor #_"FullPrunedBlockChain" [#_"NetworkParameters" (§ name params), #_"FullPrunedBlockStore" (§ name blockStore)])
        (§ throws #_"BlockStoreException")
    (§ block
        (§ this (Context/getOrCreate params), blockStore)
        this
    )

    ;;;
     ; Constructs a block chain connected to the given list of wallets and a store.
     ;;
    #_public
    (§ constructor #_"FullPrunedBlockChain" [#_"Context" (§ name context), #_"List<Wallet>" (§ name listeners), #_"FullPrunedBlockStore" (§ name blockStore)])
        (§ throws #_"BlockStoreException")
    (§ block
        (§ super context, listeners, blockStore)
        (§ ass (§ name (.. this blockStore)) blockStore)
        ;; Ignore upgrading for now.
        (§ ass (§ name (.. this chainHead)) (.. blockStore (getVerifiedChainHead)))
        this
    )

    ;;;
     ; See {@link #FullPrunedBlockChain(Context, List, FullPrunedBlockStore)}.
     ;;
    #_public
    (§ constructor #_"FullPrunedBlockChain" [#_"NetworkParameters" (§ name params), #_"List<Wallet>" (§ name listeners), #_"FullPrunedBlockStore" (§ name blockStore)])
        (§ throws #_"BlockStoreException")
    (§ block
        (§ this (Context/getOrCreate params), listeners, blockStore)
        this
    )

    #_override
    #_protected
    (§ method #_"StoredBlock" (§ fn addToBlockStore) [#_"StoredBlock" (§ name storedPrev), #_"Block" (§ name header), #_"TransactionOutputChanges" (§ name txOutChanges)])
        (§ throws #_"BlockStoreException", #_"VerificationException")
    (§ block
        (§ var #_"StoredBlock" (§ name newBlock) (.. storedPrev (build header)))
        (.. blockStore (put newBlock, (§ new #_"StoredUndoableBlock" (.. newBlock (getHeader) (getHash)), txOutChanges)))
        newBlock
    )

    #_override
    #_protected
    (§ method #_"StoredBlock" (§ fn addToBlockStore) [#_"StoredBlock" (§ name storedPrev), #_"Block" (§ name block)])
        (§ throws #_"BlockStoreException", #_"VerificationException")
    (§ block
        (§ var #_"StoredBlock" (§ name newBlock) (.. storedPrev (build block)))
        (.. blockStore (put newBlock, (§ new #_"StoredUndoableBlock" (.. newBlock (getHeader) (getHash)), (.. block transactions))))
        newBlock
    )

    #_override
    #_protected
    (§ method #_"void" (§ fn rollbackBlockStore) [#_"int" (§ name height)])
        (§ throws #_"BlockStoreException")
    (§ block
        (§ throw (§ new #_"BlockStoreException" "Unsupported"))
    )

    #_override
    #_protected
    (§ method #_"boolean" (§ fn shouldVerifyTransactions) [])
    (§ block
        true
    )

    ;;;
     ; Whether or not to run scripts whilst accepting blocks (i.e. checking signatures, for most transactions).
     ; If you're accepting data from an untrusted node, such as one found via the P2P network, this should be set
     ; to true (which is the default).  If you're downloading a chain from a node you control, script execution
     ; is redundant because you know the connected node won't relay bad data to you.  In that case it's safe to set
     ; this to false and obtain a significant speedup.
     ;;
    #_public
    (§ method #_"void" (§ fn setRunScripts) [#_"boolean" (§ name value)])
    (§ block
        (§ ass (§ name (.. this runScripts)) value)
        nil
    )

    ;; TODO: Remove lots of duplicated code in the two connectTransactions.

    ;; TODO: Execute in order of largest transaction (by input count) first.
    (§ field #_"ExecutorService" (§ name scriptVerificationExecutor) (Executors/newFixedThreadPool (.. (Runtime/getRuntime) (availableProcessors)), (§ new #_"ContextPropagatingThreadFactory" "Script verification")))

    ;;;
     ; A job submitted to the executor which verifies signatures.
     ;;
    #_private
    #_static
    (§ class #_"Verifier" (§ implements #_"Callable<VerificationException>")
        (§ field #_"Transaction" (§ name tx))
        (§ field #_"List<Script>" (§ name prevOutScripts))
        (§ field #_"Set<VerifyFlag>" (§ name verifyFlags))

        #_public
        (§ constructor #_"Verifier" [#_"Transaction" (§ name tx), #_"List<Script>" (§ name prevOutScripts), #_"Set<VerifyFlag>" (§ name verifyFlags)])
        (§ block
            (§ ass (§ name (.. this tx)) tx)
            (§ ass (§ name (.. this prevOutScripts)) prevOutScripts)
            (§ ass (§ name (.. this verifyFlags)) verifyFlags)
            this
        )

        #_nilable
        #_override
        #_public
        (§ method #_"VerificationException" (§ fn call) [])
            (§ throws #_"Exception")
        (§ block
            (§ try )
            (§ block
                (§ var #_"ListIterator<Script>" (§ name prevOutIt) (.. prevOutScripts (listIterator)))
                (§ for (§ var #_"int" (§ name index) 0) :for (§ expr index < (.. tx (getInputs) (size))) :for (§ ass (§ name index) (+ index 1)))
                (§ block
                    (.. tx (getInputs) (get index) (getScriptSig) (correctlySpends tx, index, (.. prevOutIt (next)), verifyFlags))
                )
                (§ return nil)
            )
            (§ catch #_"VerificationException" (§ name e))
            (§ block
                (§ return e)
            )
        )
    )

    ;;;
     ; Get the {@link Script} from the script bytes or return Script of empty byte array.
     ;;
    #_private
    (§ method- #_"Script" (§ fn getScript) [#_"byte[]" (§ name scriptBytes)])
    (§ block
        (§ try )
        (§ block
            (§ return (§ new #_"Script" scriptBytes))
        )
        (§ catch #_"Exception" (§ name _))
        (§ block
            (§ return (§ new #_"Script" (§ new #_"byte[]" (§ count 0))))
        )
    )

    ;;;
     ; Get the address from the {@link Script} if it exists, otherwise return empty string "".
     ;
     ; @param script The script.
     ; @return The address.
     ;;
    #_private
    (§ method- #_"String" (§ fn getScriptAddress) [#_nilable #_"Script" (§ name script)])
    (§ block
        (§ var #_"String" (§ name address) "")
        (§ try )
        (§ block
            (§ if (some? script))
            (§ block
                (§ ass (§ name address) (.. script (getToAddress params, true) (toString)))
            )
        )
        (§ catch #_"Exception" (§ name _))
        (§ block
        )
        address
    )

    #_override
    #_protected
    (§ method #_"TransactionOutputChanges" (§ fn connectTransactions) [#_"int" (§ name height), #_"Block" (§ name block)])
        (§ throws #_"VerificationException", #_"BlockStoreException")
    (§ block
        (Preconditions/checkState (.. lock (isHeldByCurrentThread)))

        (§ if (== (.. block transactions) nil))
        (§ block
            (§ throw (§ new #_"RuntimeException" "connectTransactions called with Block that didn't have transactions!"))
        )
        (§ if (§ not (.. params (passesCheckpoint height, (.. block (getHash))))))
        (§ block
            (§ throw (§ new #_"VerificationException" (§ expr "Block failed checkpoint lockin at " + height)))
        )

        (.. blockStore (beginDatabaseBatchWrite))

        (§ var #_"LinkedList<UTXO>" (§ name txOutsSpent) (§ new #_"LinkedList<>"))
        (§ var #_"LinkedList<UTXO>" (§ name txOutsCreated) (§ new #_"LinkedList<>"))
        (§ var #_"long" (§ name sigOps) 0)

        (§ if (.. scriptVerificationExecutor (isShutdown)))
        (§ block
            (§ ass (§ name scriptVerificationExecutor) (Executors/newFixedThreadPool (.. (Runtime/getRuntime) (availableProcessors))))
        )

        (§ var #_"List<Future<VerificationException>>" (§ name listScriptVerificationResults) (§ new #_"ArrayList<>" (.. block transactions (size))))
        (§ try )
        (§ block
            (§ if (§ not (.. params (isCheckpoint height))))
            (§ block
                ;; BIP30 violator blocks are ones that contain a duplicated transaction.  They are all in the checkpoints list
                ;; and we therefore only check non-checkpoints for duplicated transactions here.  See the BIP30 document
                ;; for more details on this: https://github.com/bitcoin/bips/blob/master/bip-0030.mediawiki
                (§ for (§ var #_"Transaction" (§ name tx)) :for (.. block transactions))
                (§ block
                    (§ var #_"Set<VerifyFlag>" (§ name verifyFlags) (.. params (getTransactionVerificationFlags block, tx, (getVersionTally), height)))
                    (§ var #_"Sha256Hash" (§ name hash) (.. tx (getHash)))
                    ;; If we already have unspent outputs for this hash, we saw the tx already.
                    ;; Either the block is being added twice (bug) or the block is a BIP30 violator.
                    (§ if (.. blockStore (hasUnspentOutputs hash, (.. tx (getOutputs) (size)))))
                    (§ block
                        (§ throw (§ new #_"VerificationException" "Block failed BIP30 test!"))
                    )
                    ;; We already check non-BIP16 sigops in Block.verifyTransactions(true).
                    (§ if (.. verifyFlags (contains VerifyFlag/P2SH)))
                    (§ block
                        (§ ass (§ name sigOps) (§ expr sigOps + (.. tx (getSigOpCount))))
                    )
                )
            )
            (§ var #_"Coin" (§ name totalFees) Coin/ZERO)
            (§ var #_"Coin" (§ name coinbaseValue) nil)
            (§ for (§ var Transaction tx) :for (.. block transactions))
            (§ block
                (§ var #_"boolean" (§ name isCoinBase) (.. tx (isCoinBase)))
                (§ var #_"Coin" (§ name valueIn) Coin/ZERO)
                (§ var #_"Coin" (§ name valueOut) Coin/ZERO)
                (§ var #_"List<Script>" (§ name prevOutScripts) (§ new #_"LinkedList<>"))
                (§ var #_"Set<VerifyFlag>" (§ name verifyFlags) (.. params (getTransactionVerificationFlags block, tx, (getVersionTally), height)))
                (§ if (§ not isCoinBase))
                (§ block
                    ;; For each input of the transaction remove the corresponding output from the set of unspent outputs.
                    (§ for (§ var #_"int" (§ name index) 0) :for (§ expr index < (.. tx (getInputs) (size))) :for (§ ass (§ name index) (+ index 1)))
                    (§ block
                        (§ var #_"TransactionInput" (§ name in) (.. tx (getInputs) (get index)))
                        (§ var #_"UTXO" (§ name prevOut) (.. blockStore (getTransactionOutput (.. in (getOutpoint) (getHash)), (.. in (getOutpoint) (getIndex)))))
                        (§ if (nil? prevOut))
                        (§ block
                            (§ throw (§ new #_"VerificationException" "Attempted to spend a non-existent or already spent output!"))
                        )
                        ;; Coinbases can't be spent until they mature, to avoid re-orgs destroying entire transaction chains.
                        ;; The assumption is there will ~never be re-orgs deeper than the spendable coinbase chain depth.
                        (§ if (.. prevOut (isCoinbase)))
                        (§ block
                            (§ if (§ expr height - (.. prevOut (getHeight)) < (.. params (getSpendableCoinbaseDepth))))
                            (§ block
                                (§ throw (§ new #_"VerificationException" (§ expr "Tried to spend coinbase at depth " + (§ expr height - (.. prevOut (getHeight))))))
                            )
                        )
                        ;; TODO: Check we're not spending the genesis transaction here. Bitcoin Core won't allow it.
                        (§ ass (§ name valueIn) (.. valueIn (add (.. prevOut (getValue)))))
                        (§ if (.. verifyFlags (contains VerifyFlag/P2SH)))
                        (§ block
                            (§ if (.. prevOut (getScript) (isPayToScriptHash)))
                            (§ block
                                (§ ass (§ name sigOps) (§ expr sigOps + (Script/getP2SHSigOpCount (.. in (getScriptBytes)))))
                            )
                            (§ if (< Block/MAX_BLOCK_SIGOPS sigOps))
                            (§ block
                                (§ throw (§ new #_"VerificationException" "Too many P2SH SigOps in block"))
                            )
                        )

                        (.. prevOutScripts (add (.. prevOut (getScript))))
                        (.. blockStore (removeUnspentTransactionOutput prevOut))
                        (.. txOutsSpent (add prevOut))
                    )
                )
                (§ var #_"Sha256Hash" (§ name hash) (.. tx (getHash)))
                (§ for (§ var #_"TransactionOutput" (§ name out)) :for (.. tx (getOutputs)))
                (§ block
                    (§ ass (§ name valueOut) (.. valueOut (add (.. out (getValue)))))
                    ;; For each output, add it to the set of unspent outputs so it can be consumed in future.
                    (§ var #_"Script" (§ name script) (getScript (.. out (getScriptBytes))))
                    (§ var #_"UTXO" (§ name newOut) (§ new #_"UTXO" hash, (.. out (getIndex)), (.. out (getValue)), height, isCoinBase, script, (getScriptAddress script)))
                    (.. blockStore (addUnspentTransactionOutput newOut))
                    (.. txOutsCreated (add newOut))
                )
                ;; All values were already checked for being non-negative (as it is verified in Transaction.verify()),
                ;; but we check again here just for defence in depth.  Transactions with zero output value are OK.
                (§ if (§ expr (.. valueOut (signum)) < 0 || 0 < (.. valueOut (compareTo (.. params (getMaxMoney))))))
                (§ block
                    (§ throw (§ new #_"VerificationException" "Transaction output value out of range"))
                )

                (§ if isCoinBase)
                (§ block
                    (§ ass (§ name coinbaseValue) valueOut)
                )
                (§ else )
                (§ block
                    (§ if (§ expr (.. valueIn (compareTo valueOut)) < 0 || 0 < (.. valueIn (compareTo (.. params (getMaxMoney))))))
                    (§ block
                        (§ throw (§ new #_"VerificationException" "Transaction input value out of range"))
                    )
                    (§ ass (§ name totalFees) (.. totalFees (add (.. valueIn (subtract valueOut)))))
                )

                (§ if (§ expr (§ not isCoinBase) && runScripts))
                (§ block
                    ;; Because correctlySpends modifies transactions, this must come after we are done with tx.
                    (§ var #_"FutureTask<VerificationException>" (§ name future) (§ new #_"FutureTask<>" (§ new #_"Verifier" tx, prevOutScripts, verifyFlags)))
                    (.. scriptVerificationExecutor (execute future))
                    (.. listScriptVerificationResults (add future))
                )
            )
            (§ if (§ expr 0 < (.. totalFees (compareTo (.. params (getMaxMoney)))) || (.. block (getBlockInflation height) (add totalFees) (compareTo coinbaseValue)) < 0))
            (§ block
                (§ throw (§ new #_"VerificationException" "Transaction fees out of range"))
            )

            (§ for (§ var #_"Future<VerificationException>" (§ name future)) :for listScriptVerificationResults)
            (§ block
                (§ var #_"VerificationException" (§ name e))
                (§ try )
                (§ block
                    (§ ass (§ name e) (.. future (get)))
                )
                (§ catch #_"InterruptedException" (§ name ie))
                (§ block
                    (§ throw (§ new #_"RuntimeException" ie)) ;; Shouldn't happen.
                )
                (§ catch #_"ExecutionException" (§ name ee))
                (§ block
                    (.. log (error (§ expr "Script.correctlySpends threw a non-normal exception: " + (.. ee (getCause)))))
                    (§ throw (§ new #_"VerificationException" "Bug in Script.correctlySpends, likely script malformed in some new and interesting way.", ee))
                )
                (§ if (some? e))
                (§ block
                    (§ throw e)
                )
            )
        )
        (§ catch #_"VerificationException" (§ name e))
        (§ block
            (.. scriptVerificationExecutor (shutdownNow))
            (.. blockStore (abortDatabaseBatchWrite))
            (§ throw e)
        )
        (§ catch #_"BlockStoreException" (§ name e))
        (§ block
            (.. scriptVerificationExecutor (shutdownNow))
            (.. blockStore (abortDatabaseBatchWrite))
            (§ throw e)
        )

        (§ new #_"TransactionOutputChanges" txOutsCreated, txOutsSpent)
    )

    #_override
    ;;;
     ; Used during reorgs to connect a block previously on a fork.
     ;;
    #_protected
    #_synchronized
    (§ method #_"TransactionOutputChanges" (§ fn connectTransactions) [#_"StoredBlock" (§ name newBlock)])
        (§ throws #_"VerificationException", #_"BlockStoreException", #_"PrunedException")
    (§ block
        (Preconditions/checkState (.. lock (isHeldByCurrentThread)))
        (§ if (§ not (.. params (passesCheckpoint (.. newBlock (getHeight)), (.. newBlock (getHeader) (getHash))))))
        (§ block
            (§ throw (§ new #_"VerificationException" (§ expr "Block failed checkpoint lockin at " + (.. newBlock (getHeight)))))
        )

        (.. blockStore (beginDatabaseBatchWrite))
        (§ var #_"StoredUndoableBlock" (§ name block) (.. blockStore (getUndoBlock (.. newBlock (getHeader) (getHash)))))
        (§ if (nil? block))
        (§ block
            ;; We're trying to re-org too deep and the data needed has been deleted.
            (.. blockStore (abortDatabaseBatchWrite))
            (§ throw (§ new #_"PrunedException" (.. newBlock (getHeader) (getHash))))
        )

        (§ var #_"TransactionOutputChanges" (§ name txOutChanges))
        (§ try )
        (§ block
            (§ var #_"List<Transaction>" (§ name transactions) (.. block (getTransactions)))
            (§ if (some? transactions))
            (§ block
                (§ var #_"LinkedList<UTXO>" (§ name txOutsSpent) (§ new #_"LinkedList<>"))
                (§ var #_"LinkedList<UTXO>" (§ name txOutsCreated) (§ new #_"LinkedList<>"))
                (§ var #_"long" (§ name sigOps) 0)

                (§ if (§ not (.. params (isCheckpoint (.. newBlock (getHeight))))))
                (§ block
                    (§ for (§ var #_"Transaction" (§ name tx)) :for transactions)
                    (§ block
                        (§ var #_"Sha256Hash" (§ name hash) (.. tx (getHash)))
                        (§ if (.. blockStore (hasUnspentOutputs hash, (.. tx (getOutputs) (size)))))
                        (§ block
                            (§ throw (§ new #_"VerificationException" "Block failed BIP30 test!"))
                        )
                    )
                )

                (§ var #_"Coin" (§ name totalFees) Coin/ZERO)
                (§ var #_"Coin" (§ name coinbaseValue) nil)

                (§ if (.. scriptVerificationExecutor (isShutdown)))
                (§ block
                    (§ ass (§ name scriptVerificationExecutor) (Executors/newFixedThreadPool (.. (Runtime/getRuntime) (availableProcessors))))
                )

                (§ var #_"List<Future<VerificationException>>" (§ name listScriptVerificationResults) (§ new #_"ArrayList<>" (.. transactions (size))))
                (§ for (§ var Transaction tx) :for transactions)
                (§ block
                    (§ var #_"Set<VerifyFlag>" (§ name verifyFlags) (.. params (getTransactionVerificationFlags (.. newBlock (getHeader)), tx, (getVersionTally), Integer/SIZE)))
                    (§ var #_"boolean" (§ name isCoinBase) (.. tx (isCoinBase)))
                    (§ var #_"Coin" (§ name valueIn) Coin/ZERO)
                    (§ var #_"Coin" (§ name valueOut) Coin/ZERO)
                    (§ var #_"List<Script>" (§ name prevOutScripts) (§ new #_"LinkedList<>"))

                    (§ if (§ not isCoinBase))
                    (§ block
                        (§ for (§ var #_"int" (§ name index) 0) :for (§ expr index < (.. tx (getInputs) (size))) :for (§ ass (§ name index) (+ index 1)))
                        (§ block
                            (§ var #_"TransactionInput" (§ name in) (.. tx (getInputs) (get index)))
                            (§ var #_"UTXO" (§ name prevOut) (.. blockStore (getTransactionOutput (.. in (getOutpoint) (getHash)), (.. in (getOutpoint) (getIndex)))))
                            (§ if (nil? prevOut))
                            (§ block
                                (§ throw (§ new #_"VerificationException" "Attempted spend of a non-existent or already spent output!"))
                            )
                            (§ if (§ expr (.. prevOut (isCoinbase)) && (.. newBlock (getHeight)) - (.. prevOut (getHeight)) < (.. params (getSpendableCoinbaseDepth))))
                            (§ block
                                (§ throw (§ new #_"VerificationException" (§ expr "Tried to spend coinbase at depth " + (- (.. newBlock (getHeight)) (.. prevOut (getHeight))))))
                            )
                            (§ ass (§ name valueIn) (.. valueIn (add (.. prevOut (getValue)))))
                            (§ if (.. verifyFlags (contains VerifyFlag/P2SH)))
                            (§ block
                                (§ if (.. prevOut (getScript) (isPayToScriptHash)))
                                (§ block
                                    (§ ass (§ name sigOps) (§ expr sigOps + (Script/getP2SHSigOpCount (.. in (getScriptBytes)))))
                                )
                                (§ if (> sigOps Block/MAX_BLOCK_SIGOPS))
                                (§ block
                                    (§ throw (§ new #_"VerificationException" "Too many P2SH SigOps in block"))
                                )
                            )

                            ;; TODO: Enforce DER signature format.

                            (.. prevOutScripts (add (.. prevOut (getScript))))

                            (.. blockStore (removeUnspentTransactionOutput prevOut))
                            (.. txOutsSpent (add prevOut))
                        )
                    )
                    (§ var #_"Sha256Hash" (§ name hash) (.. tx (getHash)))
                    (§ for (§ var #_"TransactionOutput" (§ name out)) :for (.. tx (getOutputs)))
                    (§ block
                        (§ ass (§ name valueOut) (.. valueOut (add (.. out (getValue)))))
                        (§ var #_"Script" (§ name script) (getScript (.. out (getScriptBytes))))
                        (§ var #_"UTXO" (§ name newOut) (§ new #_"UTXO" hash, (.. out (getIndex)), (.. out (getValue)), (.. newBlock (getHeight)), isCoinBase, script, (getScriptAddress script)))
                        (.. blockStore (addUnspentTransactionOutput newOut))
                        (.. txOutsCreated (add newOut))
                    )
                    ;; All values were already checked for being non-negative (as it is verified in Transaction.verify())
                    ;; but we check again here just for defence in depth.  Transactions with zero output value are OK.
                    (§ if (§ expr (.. valueOut (signum)) < 0 || 0 < (.. valueOut (compareTo (.. params (getMaxMoney))))))
                    (§ block
                        (§ throw (§ new #_"VerificationException" "Transaction output value out of range"))
                    )

                    (§ if isCoinBase)
                    (§ block
                        (§ ass (§ name coinbaseValue) valueOut)
                    )
                    (§ else )
                    (§ block
                        (§ if (§ expr (.. valueIn (compareTo valueOut)) < 0 || 0 < (.. valueIn (compareTo (.. params (getMaxMoney))))))
                        (§ block
                            (§ throw (§ new #_"VerificationException" "Transaction input value out of range"))
                        )
                        (§ ass (§ name totalFees) (.. totalFees (add (.. valueIn (subtract valueOut)))))
                    )

                    (§ if (§ not isCoinBase))
                    (§ block
                        ;; Because correctlySpends modifies transactions, this must come after we are done with tx.
                        (§ var #_"FutureTask<VerificationException>" (§ name future) (§ new #_"FutureTask<>" (§ new #_"Verifier" tx, prevOutScripts, verifyFlags)))
                        (.. scriptVerificationExecutor (execute future))
                        (.. listScriptVerificationResults (add future))
                    )
                )
                (§ if (§ expr 0 < (.. totalFees (compareTo (.. params (getMaxMoney)))) || (.. newBlock (getHeader) (getBlockInflation (.. newBlock (getHeight))) (add totalFees) (compareTo coinbaseValue)) < 0))
                (§ block
                    (§ throw (§ new #_"VerificationException" "Transaction fees out of range"))
                )

                (§ ass (§ name txOutChanges) (§ new #_"TransactionOutputChanges" txOutsCreated, txOutsSpent))
                (§ for (§ var #_"Future<VerificationException>" (§ name future)) :for listScriptVerificationResults)
                (§ block
                    (§ var #_"VerificationException" (§ name e))
                    (§ try )
                    (§ block
                        (§ ass (§ name e) (.. future (get)))
                    )
                    (§ catch #_"InterruptedException" (§ name ie))
                    (§ block
                        (§ throw (§ new #_"RuntimeException" ie)) ;; Shouldn't happen.
                    )
                    (§ catch #_"ExecutionException" (§ name ee))
                    (§ block
                        (.. log (error (§ expr "Script.correctlySpends threw a non-normal exception: " + (.. ee (getCause)))))
                        (§ throw (§ new #_"VerificationException" "Bug in Script.correctlySpends, likely script malformed in some new and interesting way.", ee))
                    )
                    (§ if (some? e))
                    (§ block
                        (§ throw e)
                    )
                )
            )
            (§ else )
            (§ block
                (§ ass (§ name txOutChanges) (.. block (getTxOutChanges)))
                (§ if (§ not (.. params (isCheckpoint (.. newBlock (getHeight))))))
                (§ block
                    (§ for (§ var #_"UTXO" (§ name out)) :for (.. txOutChanges txOutsCreated))
                    (§ block
                        (§ var #_"Sha256Hash" (§ name hash) (.. out (getHash)))
                        (§ if (!= (.. blockStore (getTransactionOutput hash, (.. out (getIndex)))) nil))
                        (§ block
                            (§ throw (§ new #_"VerificationException" "Block failed BIP30 test!"))
                        )
                    )
                )
                (§ for (§ var #_"UTXO" (§ name out)) :for (.. txOutChanges txOutsCreated))
                (§ block
                    (.. blockStore (addUnspentTransactionOutput out))
                )
                (§ for (§ var #_"UTXO" (§ name out)) :for (.. txOutChanges txOutsSpent))
                (§ block
                    (.. blockStore (removeUnspentTransactionOutput out))
                )
            )
        )
        (§ catch #_"VerificationException" (§ name e))
        (§ block
            (.. scriptVerificationExecutor (shutdownNow))
            (.. blockStore (abortDatabaseBatchWrite))
            (§ throw e)
        )
        (§ catch #_"BlockStoreException" (§ name e))
        (§ block
            (.. scriptVerificationExecutor (shutdownNow))
            (.. blockStore (abortDatabaseBatchWrite))
            (§ throw e)
        )
        txOutChanges
    )

    ;;;
     ; This is broken for blocks that do not pass BIP30, so all BIP30-failing blocks which are allowed to fail BIP30
     ; must be checkpointed.
     ;;
    #_override
    #_protected
    (§ method #_"void" (§ fn disconnectTransactions) [#_"StoredBlock" (§ name oldBlock)])
        (§ throws #_"PrunedException", #_"BlockStoreException")
    (§ block
        (Preconditions/checkState (.. lock (isHeldByCurrentThread)))
        (.. blockStore (beginDatabaseBatchWrite))
        (§ try )
        (§ block
            (§ var #_"StoredUndoableBlock" (§ name undoBlock) (.. blockStore (getUndoBlock (.. oldBlock (getHeader) (getHash)))))
            (§ if (nil? undoBlock))
            (§ block
                (§ throw (§ new #_"PrunedException" (.. oldBlock (getHeader) (getHash))))
            )

            (§ var #_"TransactionOutputChanges" (§ name txOutChanges) (.. undoBlock (getTxOutChanges)))
            (§ for (§ var #_"UTXO" (§ name out)) :for (.. txOutChanges txOutsSpent))
            (§ block
                (.. blockStore (addUnspentTransactionOutput out))
            )
            (§ for (§ var #_"UTXO" (§ name out)) :for (.. txOutChanges txOutsCreated))
            (§ block
                (.. blockStore (removeUnspentTransactionOutput out))
            )
        )
        (§ catch #_"PrunedException" (§ name e))
        (§ block
            (.. blockStore (abortDatabaseBatchWrite))
            (§ throw e)
        )
        (§ catch #_"BlockStoreException" (§ name e))
        (§ block
            (.. blockStore (abortDatabaseBatchWrite))
            (§ throw e)
        )
        nil
    )

    #_override
    #_protected
    (§ method #_"void" (§ fn doSetChainHead) [#_"StoredBlock" (§ name chainHead)])
        (§ throws #_"BlockStoreException")
    (§ block
        (Preconditions/checkState (.. lock (isHeldByCurrentThread)))
        (.. blockStore (setVerifiedChainHead chainHead))
        (.. blockStore (commitDatabaseBatchWrite))
        nil
    )

    #_override
    #_protected
    (§ method #_"void" (§ fn notSettingChainHead) [])
        (§ throws #_"BlockStoreException")
    (§ block
        (.. blockStore (abortDatabaseBatchWrite))
        nil
    )

    #_override
    #_protected
    (§ method #_"StoredBlock" (§ fn getStoredBlockInCurrentScope) [#_"Sha256Hash" (§ name hash)])
        (§ throws #_"BlockStoreException")
    (§ block
        (Preconditions/checkState (.. lock (isHeldByCurrentThread)))
        (.. blockStore (getOnceUndoableStoredBlock hash))
    )
)

#_(ns org.bitcoinj.core #_"GetAddrMessage")

;;;
 ; <p>Represents the "getaddr" P2P protocol message, which requests network {@link AddressMessage}s from a peer.
 ; Not to be confused with {@link Address} which is sort of like an account number.</p>
 ;
 ; <p>Instances of this class are not safe for use by multiple threads.</p>
 ;;
#_public
(§ class #_"GetAddrMessage" (§ extends #_"EmptyMessage")
    #_public
    (§ constructor #_"GetAddrMessage" [#_"NetworkParameters" (§ name params)])
    (§ block
        (§ super params)
        this
    )
)

#_(ns org.bitcoinj.core #_"GetBlocksMessage"
    (:import [java.io IOException OutputStream]
             [java.util ArrayList List]))

;;;
 ; <p>Represents the "getblocks" P2P network message, which requests the hashes of the parts of the block chain we're missing.
 ; Those blocks can then be downloaded with a {@link GetDataMessage}.</p>
 ;
 ; <p>Instances of this class are not safe for use by multiple threads.</p>
 ;;
#_public
(§ class #_"GetBlocksMessage" (§ extends #_"Message")
    #_protected
    (§ field #_"long" (§ name version))
    #_protected
    (§ field #_"List<Sha256Hash>" (§ name locator))
    #_protected
    (§ field #_"Sha256Hash" (§ name stopHash))

    #_public
    (§ constructor #_"GetBlocksMessage" [#_"NetworkParameters" (§ name params), #_"List<Sha256Hash>" (§ name locator), #_"Sha256Hash" (§ name stopHash)])
    (§ block
        (§ super params)

        (§ ass (§ name (.. this version)) protocolVersion)
        (§ ass (§ name (.. this locator)) locator)
        (§ ass (§ name (.. this stopHash)) stopHash)
        this
    )

    #_public
    (§ constructor #_"GetBlocksMessage" [#_"NetworkParameters" (§ name params), #_"byte[]" (§ name payload)])
        (§ throws #_"ProtocolException")
    (§ block
        (§ super params, payload, 0)
        this
    )

    #_override
    #_protected
    (§ method #_"void" (§ fn parse) [])
        (§ throws #_"ProtocolException")
    (§ block
        (§ ass (§ name cursor) offset)
        (§ ass (§ name version) (readUint32))
        (§ var #_"int" (§ name startCount) (§ cast #_"int" (readVarInt)))
        (§ if (< 500 startCount))
        (§ block
            (§ throw (§ new #_"ProtocolException" (§ str "Number of locators cannot be > 500, received: " + startCount)))
        )

        (§ ass (§ name length) (§ expr cursor - offset + (* (+ startCount 1) 32)))
        (§ ass (§ name locator) (§ new #_"ArrayList<>" startCount))
        (§ for (§ var #_"int" (§ name i) 0) :for (< i startCount) :for (§ ass (§ name i) (+ i 1)))
        (§ block
            (.. locator (add (readHash)))
        )
        (§ ass (§ name stopHash) (readHash))
        nil
    )

    #_public
    (§ method #_"List<Sha256Hash>" (§ fn getLocator) [])
    (§ block
        locator
    )

    #_public
    (§ method #_"Sha256Hash" (§ fn getStopHash) [])
    (§ block
        stopHash
    )

    #_override
    #_public
    (§ method #_"String" (§ fn toString) [])
    (§ block
        (§ expr "getblocks: " + (.. Utils/SPACE_JOINER (join locator)))
    )

    #_override
    #_protected
    (§ method #_"void" (§ fn bitcoinSerializeToStream) [#_"OutputStream" (§ name stream)])
        (§ throws #_"IOException")
    (§ block
        ;; Version, for some reason.
        (Utils/uint32ToByteStreamLE (.. params (getProtocolVersionNum NetworkParameters/ProtocolVersion/CURRENT)), stream)
        ;; Then a vector of block hashes.  This is actually a "block locator", a set of block
        ;; identifiers that spans the entire chain with exponentially increasing gaps between
        ;; them, until we end up at the genesis block.  See CBlockLocator::Set().
        (.. stream (write (.. (§ new #_"VarInt" (.. locator (size))) (encode))))
        (§ for (§ var #_"Sha256Hash" (§ name hash)) :for locator)
        (§ block
            ;; Have to reverse as wire format is little endian.
            (.. stream (write (.. hash (getReversedBytes))))
        )
        ;; Next, a block ID to stop at.
        (.. stream (write (.. stopHash (getReversedBytes))))
        nil
    )

    #_override
    #_public
    (§ method #_"boolean" (§ fn equals) [#_"Object" (§ name o)])
    (§ block
        (§ if (§ expr this == o))
        (§ block
            (§ return true)
        )
        (§ if (§ expr o == nil || (getClass) != (.. o (getClass))))
        (§ block
            (§ return false)
        )
        (§ var #_"GetBlocksMessage" (§ name other) (§ cast #_"GetBlocksMessage" o))
        (§ expr version == (.. other version) && (.. stopHash (equals (.. other stopHash))) && (.. locator (size)) == (.. other locator (size)) && (.. locator (containsAll (.. other locator)))) ;; ignores locator ordering
    )

    #_override
    #_public
    (§ method #_"int" (§ fn hashCode) [])
    (§ block
        (§ var #_"int" (§ name hashCode) (§ expr (§ cast #_"int" version) :xor (.. "getblocks" (hashCode)) :xor (.. stopHash (hashCode))))
        (§ for (§ var #_"Sha256Hash" (§ name l)) :for locator)
        (§ block
            (§ ass (§ name hashCode) (§ expr hashCode :xor (.. l (hashCode)))) ;; ignores locator ordering
        )
        hashCode
    )
)

#_(ns org.bitcoinj.core #_"GetDataMessage")

;;;
 ; <p>Represents the "getdata" P2P network message, which requests the contents of blocks or transactions given their hashes.</p>
 ;
 ; <p>Instances of this class are not safe for use by multiple threads.</p>
 ;;
#_public
(§ class #_"GetDataMessage" (§ extends #_"ListMessage")
    #_public
    (§ constructor #_"GetDataMessage" [#_"NetworkParameters" (§ name params), #_"byte[]" (§ name payloadBytes)])
        (§ throws #_"ProtocolException")
    (§ block
        (§ super params, payloadBytes)
        this
    )

    ;;;
     ; Deserializes a 'getdata' message.
     ; @param params NetworkParameters object.
     ; @param payload Bitcoin protocol formatted byte array containing message content.
     ; @param serializer The serializer to use for this message.
     ; @param length The length of message if known.  Usually this is provided when deserializing of the wire
     ; as the length will be provided as part of the header.  Set to Message.UNKNOWN_LENGTH, if not known.
     ; @throws ProtocolException
     ;;
    #_public
    (§ constructor #_"GetDataMessage" [#_"NetworkParameters" (§ name params), #_"byte[]" (§ name payload), #_"MessageSerializer" (§ name serializer), #_"int" (§ name length)])
        (§ throws #_"ProtocolException")
    (§ block
        (§ super params, payload, serializer, length)
        this
    )

    #_public
    (§ constructor #_"GetDataMessage" [#_"NetworkParameters" (§ name params)])
    (§ block
        (§ super params)
        this
    )

    #_public
    (§ method #_"void" (§ fn addTransaction) [#_"Sha256Hash" (§ name hash)])
    (§ block
        (addItem (§ new #_"InventoryItem" InventoryItem/Type/Transaction, hash))
        nil
    )

    #_public
    (§ method #_"void" (§ fn addBlock) [#_"Sha256Hash" (§ name hash)])
    (§ block
        (addItem (§ new #_"InventoryItem" InventoryItem/Type/Block, hash))
        nil
    )

    #_public
    (§ method #_"void" (§ fn addFilteredBlock) [#_"Sha256Hash" (§ name hash)])
    (§ block
        (addItem (§ new #_"InventoryItem" InventoryItem/Type/FilteredBlock, hash))
        nil
    )

    #_public
    (§ method #_"Sha256Hash" (§ fn getHashOf) [#_"int" (§ name i)])
    (§ block
        (.. (getItems) (get i) hash)
    )
)

#_(ns org.bitcoinj.core #_"GetHeadersMessage"
    (:import [java.util List]))

;;;
 ; <p>The "getheaders" command is structurally identical to "getblocks", but has different meaning.  On receiving this
 ; message a Bitcoin node returns matching blocks up to the limit, but without the bodies.  It is useful as an
 ; optimization: when your wallet does not contain any keys created before a particular time, you don't have to download
 ; the bodies for those blocks because you know there are no relevant transactions.</p>
 ;
 ; <p>Instances of this class are not safe for use by multiple threads.</p>
 ;;
#_public
(§ class #_"GetHeadersMessage" (§ extends #_"GetBlocksMessage")
    #_public
    (§ constructor #_"GetHeadersMessage" [#_"NetworkParameters" (§ name params), #_"List<Sha256Hash>" (§ name locator), #_"Sha256Hash" (§ name stopHash)])
    (§ block
        (§ super params, locator, stopHash)
        this
    )

    #_public
    (§ constructor #_"GetHeadersMessage" [#_"NetworkParameters" (§ name params), #_"byte[]" (§ name payload)])
        (§ throws #_"ProtocolException")
    (§ block
        (§ super params, payload)
        this
    )

    #_override
    #_public
    (§ method #_"String" (§ fn toString) [])
    (§ block
        (§ expr "getheaders: " + (.. Utils/SPACE_JOINER (join locator)))
    )

    ;;;
     ; Compares two getheaders messages.  Note that even though they are structurally identical a GetHeadersMessage
     ; will not compare equal to a GetBlocksMessage containing the same data.
     ;;
    #_override
    #_public
    (§ method #_"boolean" (§ fn equals) [#_"Object" (§ name o)])
    (§ block
        (§ if (§ expr this == o))
        (§ block
            (§ return true)
        )
        (§ if (§ expr o == nil || (getClass) != (.. o (getClass))))
        (§ block
            (§ return false)
        )
        (§ var #_"GetHeadersMessage" (§ name other) (§ cast #_"GetHeadersMessage" o))
        (§ expr version == (.. other version) && (.. stopHash (equals (.. other stopHash))) && (.. locator (size)) == (.. other locator (size)) && (.. locator (containsAll (.. other locator)))) ;; ignores locator ordering
    )

    #_override
    #_public
    (§ method #_"int" (§ fn hashCode) [])
    (§ block
        (§ var #_"int" (§ name hashCode) (§ expr (§ cast #_"int" version) :xor (.. "getheaders" (hashCode)) :xor (.. stopHash (hashCode))))
        (§ for (§ var #_"Sha256Hash" (§ name l)) :for locator)
        (§ block
            (§ ass (§ name hashCode) (§ expr hashCode :xor (.. l (hashCode)))) ;; ignores locator ordering
        )
        hashCode
    )
)

#_(ns org.bitcoinj.core #_"HeadersMessage"
    (:import [java.io IOException OutputStream]
             [java.util ArrayList Arrays List])
    (:import [org.slf4j Logger LoggerFactory]))

;;;
 ; <p>A protocol message that contains a repeated series of block headers, sent in response to the "getheaders" command.
 ; This is useful when you want to traverse the chain but know you don't care about the block contents, for example,
 ; because you have a freshly created wallet with no keys.</p>
 ;
 ; <p>Instances of this class are not safe for use by multiple threads.</p>
 ;;
#_public
(§ class #_"HeadersMessage" (§ extends #_"Message")
    #_private
    #_static
    (§ def- #_"Logger" (§ name log) (LoggerFactory/getLogger (§ klass #_"HeadersMessage")))

    ;; The main client will never send us more than this number of headers.
    #_public
    #_static
    (§ def #_"int" (§ name MAX_HEADERS) 2000)

    #_private
    (§ field- #_"List<Block>" (§ name blockHeaders))

    #_public
    (§ constructor #_"HeadersMessage" [#_"NetworkParameters" (§ name params), #_"byte[]" (§ name payload)])
        (§ throws #_"ProtocolException")
    (§ block
        (§ super params, payload, 0)
        this
    )

    #_public
    (§ constructor #_"HeadersMessage" [#_"NetworkParameters" (§ name params), #_"Block..." (§ name headers)])
        (§ throws #_"ProtocolException")
    (§ block
        (§ super params)
        (§ ass (§ name blockHeaders) (Arrays/asList headers))
        this
    )

    #_public
    (§ constructor #_"HeadersMessage" [#_"NetworkParameters" (§ name params), #_"List<Block>" (§ name headers)])
        (§ throws #_"ProtocolException")
    (§ block
        (§ super params)
        (§ ass (§ name blockHeaders) headers)
        this
    )

    #_override
    #_public
    (§ method #_"void" (§ fn bitcoinSerializeToStream) [#_"OutputStream" (§ name stream)])
        (§ throws #_"IOException")
    (§ block
        (.. stream (write (.. (§ new #_"VarInt" (.. blockHeaders (size))) (encode))))
        (§ for (§ var #_"Block" (§ name header)) :for blockHeaders)
        (§ block
            (.. header (cloneAsHeader) (bitcoinSerializeToStream stream))
            (.. stream (write 0))
        )
        nil
    )

    #_override
    #_protected
    (§ method #_"void" (§ fn parse) [])
        (§ throws #_"ProtocolException")
    (§ block
        (§ var #_"long" (§ name numHeaders) (readVarInt))
        (§ if (< MAX_HEADERS numHeaders))
        (§ block
            (§ throw (§ new #_"ProtocolException" (§ expr "Too many headers: got " + numHeaders + " which is larger than " + MAX_HEADERS)))
        )

        (§ ass (§ name blockHeaders) (§ new #_"ArrayList<>"))
        (§ var #_"BitcoinSerializer" (§ name serializer) (.. this params (getSerializer true)))

        (§ for (§ var #_"int" (§ name i) 0) :for (< i numHeaders) :for (§ ass (§ name i) (+ i 1)))
        (§ block
            (§ var #_"Block" (§ name newBlockHeader) (.. serializer (makeBlock payload, cursor, UNKNOWN_LENGTH)))
            (§ if (.. newBlockHeader (hasTransactions)))
            (§ block
                (§ throw (§ new #_"ProtocolException" "Block header does not end with a nil byte"))
            )

            (§ ass (§ name cursor) (§ expr cursor + (.. newBlockHeader optimalEncodingMessageSize)))
            (.. blockHeaders (add newBlockHeader))
        )

        (§ if (§ expr length == UNKNOWN_LENGTH))
        (§ block
            (§ ass (§ name length) (- cursor offset))
        )

        (§ if (.. log (isDebugEnabled)))
        (§ block
            (§ for (§ var #_"int" (§ name i) 0) :for (< i numHeaders) :for (§ ass (§ name i) (+ i 1)))
            (§ block
                (.. log (debug (.. this blockHeaders (get i) (toString))))
            )
        )
        nil
    )

    #_public
    (§ method #_"List<Block>" (§ fn getBlockHeaders) [])
    (§ block
        blockHeaders
    )
)

#_(ns org.bitcoinj.core #_"InsufficientMoneyException"
    (:import [com.google.common.base Preconditions]))

;;;
 ; Thrown to indicate that you don't have enough money available to perform the requested operation.
 ;;
#_public
(§ class #_"InsufficientMoneyException" (§ extends #_"Exception")
    ;;; Contains the number of satoshis that would have been required to complete the operation. ;;
    #_nilable
    #_public
    (§ field #_"Coin" (§ name missing))

    #_protected
    (§ constructor #_"InsufficientMoneyException" [])
    (§ block
        (§ ass (§ name (.. this missing)) nil)
        this
    )

    #_public
    (§ constructor #_"InsufficientMoneyException" [#_"Coin" (§ name missing)])
    (§ block
        (§ this missing, (§ str "Insufficient money,  missing " + (.. missing (toFriendlyString))))
        this
    )

    #_public
    (§ constructor #_"InsufficientMoneyException" [#_"Coin" (§ name missing), #_"String" (§ name message)])
    (§ block
        (§ super message)
        (§ ass (§ name (.. this missing)) (Preconditions/checkNotNull missing))
        this
    )
)

#_(ns org.bitcoinj.core #_"InventoryItem"
    (:import [com.google.common.base Objects]))

#_public
(§ class #_"InventoryItem"
    ;;;
     ; 4 byte uint32 type field + 32 byte hash
     ;;
    #_static
    (§ def #_"int" (§ name MESSAGE_LENGTH) 36)

    #_public
    (§ enum #_"Type"
        (§ item Error)
        (§ item Transaction)
        (§ item Block)
        (§ item FilteredBlock)
    )

    #_public
    (§ field #_"Type" (§ name type))
    #_public
    (§ field #_"Sha256Hash" (§ name hash))

    #_public
    (§ constructor #_"InventoryItem" [#_"Type" (§ name type), #_"Sha256Hash" (§ name hash)])
    (§ block
        (§ ass (§ name (.. this type)) type)
        (§ ass (§ name (.. this hash)) hash)
        this
    )

    #_override
    #_public
    (§ method #_"String" (§ fn toString) [])
    (§ block
        (§ expr type + ": " + hash)
    )

    #_override
    #_public
    (§ method #_"boolean" (§ fn equals) [#_"Object" (§ name o)])
    (§ block
        (§ if (§ expr this == o))
        (§ block
            (§ return true)
        )
        (§ if (§ expr o == nil || (getClass) != (.. o (getClass))))
        (§ block
            (§ return false)
        )
        (§ var #_"InventoryItem" (§ name other) (§ cast #_"InventoryItem" o))
        (§ expr type == (.. other type) && (.. hash (equals (.. other hash))))
    )

    #_override
    #_public
    (§ method #_"int" (§ fn hashCode) [])
    (§ block
        (Objects/hashCode type, hash)
    )
)

#_(ns org.bitcoinj.core #_"InventoryMessage"
    (:import [com.google.common.base Preconditions]))

;;;
 ; <p>Represents the "inv" P2P network message.  An inv contains a list of hashes of either blocks or transactions.
 ; It's a bandwidth optimization - on receiving some data, a (fully validating) peer sends every connected peer an inv
 ; containing the hash of what it saw.  It'll only transmit the full thing if a peer asks for it with a
 ; {@link GetDataMessage}.</p>
 ;
 ; <p>Instances of this class are not safe for use by multiple threads.</p>
 ;;
#_public
(§ class #_"InventoryMessage" (§ extends #_"ListMessage")
    ;;; A hard coded constant in the protocol. ;;
    #_public
    #_static
    (§ def #_"int" (§ name MAX_INV_SIZE) 50000)

    #_public
    (§ constructor #_"InventoryMessage" [#_"NetworkParameters" (§ name params), #_"byte[]" (§ name bytes)])
        (§ throws #_"ProtocolException")
    (§ block
        (§ super params, bytes)
        this
    )

    ;;;
     ; Deserializes an 'inv' message.
     ; @param params NetworkParameters object.
     ; @param payload Bitcoin protocol formatted byte array containing message content.
     ; @param serializer The serializer to use for this message.
     ; @param length The length of message if known.  Usually this is provided when deserializing of the wire
     ; as the length will be provided as part of the header.  Set to Message.UNKNOWN_LENGTH, if not known.
     ; @throws ProtocolException
     ;;
    #_public
    (§ constructor #_"InventoryMessage" [#_"NetworkParameters" (§ name params), #_"byte[]" (§ name payload), #_"MessageSerializer" (§ name serializer), #_"int" (§ name length)])
        (§ throws #_"ProtocolException")
    (§ block
        (§ super params, payload, serializer, length)
        this
    )

    #_public
    (§ constructor #_"InventoryMessage" [#_"NetworkParameters" (§ name params)])
    (§ block
        (§ super params)
        this
    )

    #_public
    (§ method #_"void" (§ fn addBlock) [#_"Block" (§ name block)])
    (§ block
        (addItem (§ new #_"InventoryItem" InventoryItem/Type/Block, (.. block (getHash))))
        nil
    )

    #_public
    (§ method #_"void" (§ fn addTransaction) [#_"Transaction" (§ name tx)])
    (§ block
        (addItem (§ new #_"InventoryItem" InventoryItem/Type/Transaction, (.. tx (getHash))))
        nil
    )

    ;;; Creates a new inv message for the given transactions. ;;
    #_public
    #_static
    (§ defn #_"InventoryMessage" (§ fn with) [#_"Transaction..." (§ name txs)])
    (§ block
        (Preconditions/checkArgument (§ expr 0 < (.. txs length)))
        (§ var #_"InventoryMessage" (§ name result) (§ new #_"InventoryMessage" (.. (§ ai txs 0) (getParams))))
        (§ for (§ var #_"Transaction" (§ name tx)) :for txs)
        (§ block
            (.. result (addTransaction tx))
        )
        result
    )
)

#_(ns org.bitcoinj.core #_"ListMessage"
    (:import [java.io IOException OutputStream]
             [java.util ArrayList Collections List]))

;;;
 ; <p>Abstract superclass of classes with list based payload, i.e. InventoryMessage and GetDataMessage.</p>
 ;
 ; <p>Instances of this class are not safe for use by multiple threads.</p>
 ;;
#_public
#_abstract
(§ class #_"ListMessage" (§ extends #_"Message")
    #_public
    #_static
    (§ def #_"long" (§ name MAX_INVENTORY_ITEMS) 50000)

    #_private
    (§ field- #_"long" (§ name arrayLen))
    ;; For some reason the compiler complains if this is inside InventoryItem.
    #_protected
    (§ field #_"List<InventoryItem>" (§ name items))

    #_public
    (§ constructor #_"ListMessage" [#_"NetworkParameters" (§ name params), #_"byte[]" (§ name bytes)])
        (§ throws #_"ProtocolException")
    (§ block
        (§ super params, bytes, 0)
        this
    )

    #_public
    (§ constructor #_"ListMessage" [#_"NetworkParameters" (§ name params), #_"byte[]" (§ name payload), #_"MessageSerializer" (§ name serializer), #_"int" (§ name length)])
        (§ throws #_"ProtocolException")
    (§ block
        (§ super params, payload, 0, serializer, length)
        this
    )

    #_public
    (§ constructor #_"ListMessage" [#_"NetworkParameters" (§ name params)])
    (§ block
        (§ super params)

        (§ ass (§ name items) (§ new #_"ArrayList<>"))
        (§ ass (§ name length) 1) ;; length of 0 varint
        this
    )

    #_public
    (§ method #_"List<InventoryItem>" (§ fn getItems) [])
    (§ block
        (Collections/unmodifiableList items)
    )

    #_public
    (§ method #_"void" (§ fn addItem) [#_"InventoryItem" (§ name item)])
    (§ block
        (unCache)
        (§ ass (§ name length) (§ expr length - (VarInt/sizeOf (.. items (size)))))
        (.. items (add item))
        (§ ass (§ name length) (§ expr length + (VarInt/sizeOf (.. items (size))) + InventoryItem/MESSAGE_LENGTH))
        nil
    )

    #_public
    (§ method #_"void" (§ fn removeItem) [#_"int" (§ name index)])
    (§ block
        (unCache)
        (§ ass (§ name length) (§ expr length - (VarInt/sizeOf (.. items (size)))))
        (.. items (remove index))
        (§ ass (§ name length) (§ expr length + (VarInt/sizeOf (.. items (size))) - InventoryItem/MESSAGE_LENGTH))
        nil
    )

    #_override
    #_protected
    (§ method #_"void" (§ fn parse) [])
        (§ throws #_"ProtocolException")
    (§ block
        (§ ass (§ name arrayLen) (readVarInt))
        (§ if (< MAX_INVENTORY_ITEMS arrayLen))
        (§ block
            (§ throw (§ new #_"ProtocolException" (§ expr "Too many items in INV message: " + arrayLen)))
        )
        (§ ass (§ name length) (§ cast #_"int" (§ expr cursor - offset + (* arrayLen InventoryItem/MESSAGE_LENGTH))))

        ;; An inv is vector<CInv> where CInv is int+hash.  The int is either 1 or 2 for tx or block.
        (§ ass (§ name items) (§ new #_"ArrayList<>" (§ cast #_"int" arrayLen)))
        (§ for (§ var #_"int" (§ name i) 0) :for (< i arrayLen) :for (§ ass (§ name i) (+ i 1)))
        (§ block
            (§ if (§ expr (.. payload length) < cursor + InventoryItem/MESSAGE_LENGTH))
            (§ block
                (§ throw (§ new #_"ProtocolException" "Ran off the end of the INV"))
            )

            (§ var #_"int" (§ name typeCode) (§ cast #_"int" (readUint32)))
            (§ var #_"InventoryItem.Type" (§ name type))
            ;; see ppszTypeName in net.h
            (§ switch typeCode)
            (§ block
                (§ case 0)
                (§ block
                    (§ ass (§ name type) InventoryItem/Type/Error)
                    (§ break )
                )
                (§ case 1)
                (§ block
                    (§ ass (§ name type) InventoryItem/Type/Transaction)
                    (§ break )
                )
                (§ case 2)
                (§ block
                    (§ ass (§ name type) InventoryItem/Type/Block)
                    (§ break )
                )
                (§ case 3)
                (§ block
                    (§ ass (§ name type) InventoryItem/Type/FilteredBlock)
                    (§ break )
                )
                (§ default )
                (§ block
                    (§ throw (§ new #_"ProtocolException" (§ expr "Unknown CInv type: " + typeCode)))
                )
            )
            (.. items (add (§ new #_"InventoryItem" type, (readHash))))
        )
        (§ ass (§ name payload) nil)
        nil
    )

    #_override
    #_public
    (§ method #_"void" (§ fn bitcoinSerializeToStream) [#_"OutputStream" (§ name stream)])
        (§ throws #_"IOException")
    (§ block
        (.. stream (write (.. (§ new #_"VarInt" (.. items (size))) (encode))))
        (§ for (§ var #_"InventoryItem" (§ name i)) :for items)
        (§ block
            ;; Write out the type code.
            (Utils/uint32ToByteStreamLE (.. i type (ordinal)), stream)
            ;; And now the hash.
            (.. stream (write (.. i hash (getReversedBytes))))
        )
        nil
    )

    #_override
    #_public
    (§ method #_"boolean" (§ fn equals) [#_"Object" (§ name o)])
    (§ block
        (§ if (§ expr this == o))
        (§ block
            (§ return true)
        )
        (§ if (§ expr o == nil || (getClass) != (.. o (getClass))))
        (§ block
            (§ return false)
        )
        (.. items (equals (.. (§ cast #_"ListMessage" o) items)))
    )

    #_override
    #_public
    (§ method #_"int" (§ fn hashCode) [])
    (§ block
        (.. items (hashCode))
    )
)

#_(ns org.bitcoinj.core #_"MemoryPoolMessage"
    (:import [java.io IOException OutputStream]))

;;;
 ; <p>The "mempool" message asks a remote peer to announce all transactions in its memory pool, possibly restricted by
 ; any Bloom filter set on the connection.  The list of transaction hashes comes back in an inv message.  Note that
 ; this is different to the {@link TxConfidenceTable} object which doesn't try to keep track of all pending transactions,
 ; it's just a holding area for transactions that a part of the app may find interesting.  The mempool message has
 ; no fields.</p>
 ;
 ; <p>Instances of this class are not safe for use by multiple threads.</p>
 ;;
#_public
(§ class #_"MemoryPoolMessage" (§ extends #_"Message")
    #_override
    #_protected
    (§ method #_"void" (§ fn parse) [])
        (§ throws #_"ProtocolException")
    (§ block
        nil
    )

    #_override
    #_protected
    (§ method #_"void" (§ fn bitcoinSerializeToStream) [#_"OutputStream" (§ name stream)])
        (§ throws #_"IOException")
    (§ block
        nil
    )
)

#_(ns org.bitcoinj.core #_"Message"
    (:import [java.io *]
             [java.math BigInteger]
             [java.util Arrays])
    (:import [com.google.common.base Preconditions]
             [org.slf4j Logger LoggerFactory]))

;;;
 ; <p>A Message is a data structure that can be serialized/deserialized using the Bitcoin serialization format.
 ; Specific types of messages that are used both in the block chain, and on the wire, are derived from this class.</p>
 ;
 ; <p>Instances of this class are not safe for use by multiple threads.</p>
 ;;
#_public
#_abstract
(§ class #_"Message"
    #_private
    #_static
    (§ def- #_"Logger" (§ name log) (LoggerFactory/getLogger (§ klass #_"Message")))

    #_public
    #_static
    (§ def #_"int" (§ name MAX_SIZE) 0x02000000) ;; 32MB

    #_public
    #_static
    (§ def #_"int" (§ name UNKNOWN_LENGTH) Integer/MIN_VALUE)

    ;; Useful to ensure serialize/deserialize are consistent with each other.
    #_private
    #_static
    (§ def- #_"boolean" (§ name SELF_CHECK) false)

    ;; The offset is how many bytes into the provided byte array this message payload starts at.
    #_protected
    (§ field #_"int" (§ name offset))
    ;; The cursor keeps track of where we are in the byte array as we parse it.
    ;; Note that it's relative to the start of the array NOT the start of the message payload.
    #_protected
    (§ field #_"int" (§ name cursor))

    #_protected
    (§ field #_"int" (§ name length) UNKNOWN_LENGTH)

    ;; The raw message payload bytes themselves.
    #_protected
    (§ field #_"byte[]" (§ name payload))

    #_protected
    (§ field #_"boolean" (§ name recached) false)
    #_protected
    (§ field #_"MessageSerializer" (§ name serializer))

    #_protected
    (§ field #_"int" (§ name protocolVersion))

    #_protected
    (§ field #_"NetworkParameters" (§ name params))

    #_protected
    (§ constructor #_"Message" [])
    (§ block
        (§ ass (§ name serializer) DummySerializer/DEFAULT)
        this
    )

    #_protected
    (§ constructor #_"Message" [#_"NetworkParameters" (§ name params)])
    (§ block
        (§ ass (§ name (.. this params)) params)
        (§ ass (§ name serializer) (.. params (getDefaultSerializer)))
        this
    )

    #_protected
    (§ constructor #_"Message" [#_"NetworkParameters" (§ name params), #_"byte[]" (§ name payload), #_"int" (§ name offset), #_"int" (§ name protocolVersion)])
        (§ throws #_"ProtocolException")
    (§ block
        (§ this params, payload, offset, protocolVersion, (.. params (getDefaultSerializer)), UNKNOWN_LENGTH)
        this
    )

    ;;;
     ; @param params NetworkParameters object.
     ; @param payload Bitcoin protocol formatted byte array containing message content.
     ; @param offset The location of the first payload byte within the array.
     ; @param protocolVersion Bitcoin protocol version.
     ; @param serializer The serializer to use for this message.
     ; @param length The length of message payload if known.  Usually this is provided when deserializing of the wire
     ; as the length will be provided as part of the header.  Set to Message.UNKNOWN_LENGTH, if not known.
     ; @throws ProtocolException
     ;;
    #_protected
    (§ constructor #_"Message" [#_"NetworkParameters" (§ name params), #_"byte[]" (§ name payload), #_"int" (§ name offset), #_"int" (§ name protocolVersion), #_"MessageSerializer" (§ name serializer), #_"int" (§ name length)])
        (§ throws #_"ProtocolException")
    (§ block
        (§ ass (§ name (.. this serializer)) serializer)
        (§ ass (§ name (.. this protocolVersion)) protocolVersion)
        (§ ass (§ name (.. this params)) params)
        (§ ass (§ name (.. this payload)) payload)
        (§ ass (§ name (.. this cursor)) (§ ass (§ name (.. this offset)) offset))
        (§ ass (§ name (.. this length)) length)

        (parse)

        (§ if (== (.. this length) UNKNOWN_LENGTH))
        (§ block
            (Preconditions/checkState false, "Length field has not been set in constructor for %s after parse.", (§ expr (.. (getClass) (getSimpleName))))
        )

        (§ if SELF_CHECK)
        (§ block
            (selfCheck payload, offset)
        )

        (§ if (§ not (.. serializer (isParseRetainMode))))
        (§ block
            (§ ass (§ name (.. this payload)) nil)
        )
        this
    )

    #_private
    (§ method- #_"void" (§ fn selfCheck) [#_"byte[]" (§ name payload), #_"int" (§ name offset)])
    (§ block
        (§ if (§ not (§ insta this #_"VersionMessage")))
        (§ block
            (§ var #_"byte[]" (§ name payloadBytes) (§ new #_"byte[]" (§ count cursor - offset)))
            (System/arraycopy payload, offset, payloadBytes, 0, (§ expr cursor - offset))
            (§ var #_"byte[]" (§ name reserialized) (bitcoinSerialize))
            (§ if (§ not (Arrays/equals reserialized, payloadBytes)))
            (§ block
                (§ throw (§ new #_"RuntimeException" (§ expr "Serialization is wrong: \n" + (.. Utils/HEX (encode reserialized)) + " vs \n" + (.. Utils/HEX (encode payloadBytes)))))
            )
        )
        nil
    )

    #_protected
    (§ constructor #_"Message" [#_"NetworkParameters" (§ name params), #_"byte[]" (§ name payload), #_"int" (§ name offset)])
        (§ throws #_"ProtocolException")
    (§ block
        (§ this params, payload, offset, (.. params (getProtocolVersionNum NetworkParameters/ProtocolVersion/CURRENT)), (.. params (getDefaultSerializer)), UNKNOWN_LENGTH)
        this
    )

    #_protected
    (§ constructor #_"Message" [#_"NetworkParameters" (§ name params), #_"byte[]" (§ name payload), #_"int" (§ name offset), #_"MessageSerializer" (§ name serializer), #_"int" (§ name length)])
        (§ throws #_"ProtocolException")
    (§ block
        (§ this params, payload, offset, (.. params (getProtocolVersionNum NetworkParameters/ProtocolVersion/CURRENT)), serializer, length)
        this
    )

    ;; These methods handle the serialization/deserialization using the custom Bitcoin protocol.

    #_protected
    #_abstract
    (§ method #_"void" (§ fn parse) [])
        (§ throws #_"ProtocolException")

    ;;;
     ; <p>To be called before any change of internal values including any setters.  This ensures any cached byte array is
     ; removed.<p/>
     ; <p>Child messages of this object (e.g. Transactions belonging to a Block) will not have their internal byte caches
     ; invalidated unless they are also modified internally.</p>
     ;;
    #_protected
    (§ method #_"void" (§ fn unCache) [])
    (§ block
        (§ ass (§ name payload) nil)
        (§ ass (§ name recached) false)
        nil
    )

    #_protected
    (§ method #_"void" (§ fn adjustLength) [#_"int" (§ name newArraySize), #_"int" (§ name adjustment)])
    (§ block
        (§ if (§ expr length == UNKNOWN_LENGTH))
        (§ block
            (§ return nil)
        )
        ;; Our own length is now unknown if we have an unknown length adjustment.
        (§ if (§ expr adjustment == UNKNOWN_LENGTH))
        (§ block
            (§ ass (§ name length) UNKNOWN_LENGTH)
            (§ return nil)
        )
        (§ ass (§ name length) (+ length adjustment))
        ;; Check if we will need more bytes to encode the length prefix.
        (§ if (§ expr newArraySize == 1))
        (§ block
            (§ ass (§ name length) (+ length 1)) ;; The assumption here is we never call adjustLength with the same arraySize as before.
        )
        (§ elseif (§ expr newArraySize != 0))
        (§ block
            (§ ass (§ name length) (§ expr length + (VarInt/sizeOf newArraySize) - (VarInt/sizeOf (- newArraySize 1))))
        )
        nil
    )

    ;;;
     ; used for unit testing
     ;;
    #_public
    (§ method #_"boolean" (§ fn isCached) [])
    (§ block
        (some? payload)
    )

    #_public
    (§ method #_"boolean" (§ fn isRecached) [])
    (§ block
        recached
    )

    ;;;
     ; Returns a copy of the array returned by {@link Message#unsafeBitcoinSerialize()}, which is safe to mutate.
     ; If you need extra performance and can guarantee you won't write to the array, you can use the unsafe version.
     ;
     ; @return a freshly allocated serialized byte array.
     ;;
    #_public
    (§ method #_"byte[]" (§ fn bitcoinSerialize) [])
    (§ block
        (§ var #_"byte[]" (§ name bytes) (unsafeBitcoinSerialize))
        (§ var #_"byte[]" (§ name copy) (§ new #_"byte[]" (§ count (.. bytes length))))
        (System/arraycopy bytes, 0, copy, 0, (.. bytes length))
        copy
    )

    ;;;
     ; Serialize this message to a byte array that conforms to the bitcoin wire protocol.
     ;
     ; This method may return the original byte array used to construct this message if the
     ; following conditions are met:
     ; <ol>
     ; <li>1. The message was parsed from a byte array with parseRetain = true.</li>
     ; <li>2. The message has not been modified.</li>
     ; <li>3. The array had an offset of 0 and no surplus bytes.</li>
     ; </ol>
     ;
     ; If condition 3 is not met then an copy of the relevant portion of the array will be returned.
     ; Otherwise a full serialize will occur.  For this reason you should only use this API
     ; if you can guarantee you will treat the resulting array as read only.
     ;
     ; @return a byte array owned by this object, do NOT mutate it.
     ;;
    #_public
    (§ method #_"byte[]" (§ fn unsafeBitcoinSerialize) [])
    (§ block
        ;; 1st attempt to use a cached array.
        (§ if (some? payload))
        (§ block
            ;; Cached byte array is the entire message with no extras so we can return as is and avoid an array copy.
            (§ if (§ expr offset == 0 && length == (.. payload length)))
            (§ block
                (§ return payload)
            )

            (§ var #_"byte[]" (§ name buf) (§ new #_"byte[]" (§ count length)))
            (System/arraycopy payload, offset, buf, 0, length)
            (§ return buf)
        )

        ;; No cached array available so serialize parts by stream.
        (§ var #_"ByteArrayOutputStream" (§ name stream) (§ new #_"UnsafeByteArrayOutputStream" (if (< length 32) 32 (+ length 32))))
        (§ try )
        (§ block
            (bitcoinSerializeToStream stream)
        )
        (§ catch #_"IOException" (§ name _))
        (§ block
            ;; Cannot happen, we are serializing to a memory stream.
        )

        (§ if (.. serializer (isParseRetainMode)))
        (§ block
            ;; A free set of steak knives!
            ;; If there happens to be a call to this method we gain an opportunity to recache
            ;; the byte array and in this case it contains no bytes from parent messages.
            ;; This give a dual benefit.  Releasing references to the larger byte array so that it
            ;; it is more likely to be GC'd.  And preventing double serializations.  E.g. calculating
            ;; merkle root calls this method.  It is will frequently happen prior to serializing the block
            ;; which means another call to bitcoinSerialize is coming.  If we didn't recache then internal
            ;; serialization would occur a 2nd time and every subsequent time the message is serialized.
            (§ ass (§ name payload) (.. stream (toByteArray)))
            (§ ass (§ name cursor) (- cursor offset))
            (§ ass (§ name offset) 0)
            (§ ass (§ name recached) true)
            (§ ass (§ name length) (.. payload length))
            (§ return payload)
        )
        ;; Record length.  If this Message wasn't parsed from a byte stream it won't have length field
        ;; set (except for static length message types).  Setting it makes future streaming more efficient
        ;; because we can preallocate the ByteArrayOutputStream buffer and avoid resizing.
        (§ var #_"byte[]" (§ name buf) (.. stream (toByteArray)))
        (§ ass (§ name length) (.. buf length))
        buf
    )

    ;;;
     ; Serialize this message to the provided OutputStream using the bitcoin wire format.
     ;
     ; @param stream
     ; @throws IOException
     ;;
    #_public
    (§ method #_"void" (§ fn bitcoinSerialize) [#_"OutputStream" (§ name stream)])
        (§ throws #_"IOException")
    (§ block
        ;; 1st check for cached bytes.
        (§ if (§ expr payload != nil && length != UNKNOWN_LENGTH))
        (§ block
            (.. stream (write payload, offset, length))
            (§ return nil)
        )

        (bitcoinSerializeToStream stream)
        nil
    )

    ;;;
     ; Serializes this message to the provided stream.  If you just want the raw bytes use bitcoinSerialize().
     ;;
    #_protected
    (§ method #_"void" (§ fn bitcoinSerializeToStream) [#_"OutputStream" (§ name stream)])
        (§ throws #_"IOException")
    (§ block
        (.. log (error "Error: {} class has not implemented bitcoinSerializeToStream method.  Generating message with no payload", (getClass)))
        nil
    )

    ;;;
     ; This method is a NOP for all classes except Block and Transaction.  It is only declared in Message
     ; so BitcoinSerializer can avoid 2 instanceof checks + a casting.
     ;;
    #_public
    (§ method #_"Sha256Hash" (§ fn getHash) [])
    (§ block
        (§ throw (§ new #_"UnsupportedOperationException"))
    )

    ;;;
     ; This returns a correct value by parsing the message.
     ;;
    #_public
    (§ method #_"int" (§ fn getMessageSize) [])
    (§ block
        (§ if (§ expr length == UNKNOWN_LENGTH))
        (§ block
            (Preconditions/checkState false, "Length field has not been set in %s.", (§ expr (.. (getClass) (getSimpleName))))
        )
        length
    )

    #_protected
    (§ method #_"long" (§ fn readUint32) [])
        (§ throws #_"ProtocolException")
    (§ block
        (§ try )
        (§ block
            (§ var #_"long" (§ name u) (Utils/readUint32 payload, cursor))
            (§ ass (§ name cursor) (+ cursor 4))
            (§ return u)
        )
        (§ catch #_"ArrayIndexOutOfBoundsException" (§ name e))
        (§ block
            (§ throw (§ new #_"ProtocolException" e))
        )
    )

    #_protected
    (§ method #_"long" (§ fn readInt64) [])
        (§ throws #_"ProtocolException")
    (§ block
        (§ try )
        (§ block
            (§ var #_"long" (§ name u) (Utils/readInt64 payload, cursor))
            (§ ass (§ name cursor) (+ cursor 8))
            (§ return u)
        )
        (§ catch #_"ArrayIndexOutOfBoundsException" (§ name e))
        (§ block
            (§ throw (§ new #_"ProtocolException" e))
        )
    )

    #_protected
    (§ method #_"BigInteger" (§ fn readUint64) [])
        (§ throws #_"ProtocolException")
    (§ block
        ;; Java does not have an unsigned 64 bit type. So scrape it off the wire then flip.
        (§ new #_"BigInteger" (Utils/reverseBytes (readBytes 8)))
    )

    #_protected
    (§ method #_"long" (§ fn readVarInt) [])
        (§ throws #_"ProtocolException")
    (§ block
        (readVarInt 0)
    )

    #_protected
    (§ method #_"long" (§ fn readVarInt) [#_"int" (§ name offset)])
        (§ throws #_"ProtocolException")
    (§ block
        (§ try )
        (§ block
            (§ var #_"VarInt" (§ name varint) (§ new #_"VarInt" payload, (§ expr cursor + offset)))
            (§ ass (§ name cursor) (§ expr cursor + offset + (.. varint (getOriginalSizeInBytes))))
            (§ return (.. varint value))
        )
        (§ catch #_"ArrayIndexOutOfBoundsException" (§ name e))
        (§ block
            (§ throw (§ new #_"ProtocolException" e))
        )
    )

    #_protected
    (§ method #_"byte[]" (§ fn readBytes) [#_"int" (§ name length)])
        (§ throws #_"ProtocolException")
    (§ block
        (§ if (< MAX_SIZE length))
        (§ block
            (§ throw (§ new #_"ProtocolException" (§ expr "Claimed value length too large: " + length)))
        )

        (§ try )
        (§ block
            (§ var #_"byte[]" (§ name b) (§ new #_"byte[]" (§ count length)))
            (System/arraycopy payload, cursor, b, 0, length)
            (§ ass (§ name cursor) (+ cursor length))
            (§ return b)
        )
        (§ catch #_"IndexOutOfBoundsException" (§ name e))
        (§ block
            (§ throw (§ new #_"ProtocolException" e))
        )
    )

    #_protected
    (§ method #_"byte[]" (§ fn readByteArray) [])
        (§ throws #_"ProtocolException")
    (§ block
        (§ var #_"long" (§ name len) (readVarInt))
        (readBytes (§ cast #_"int" len))
    )

    #_protected
    (§ method #_"String" (§ fn readStr) [])
        (§ throws #_"ProtocolException")
    (§ block
        (§ var #_"long" (§ name length) (readVarInt))
        (if (== length 0) "" (Utils/toString (readBytes (§ cast #_"int" length)), "UTF-8")) ;; optimization for empty strings
    )

    #_protected
    (§ method #_"Sha256Hash" (§ fn readHash) [])
        (§ throws #_"ProtocolException")
    (§ block
        ;; We have to flip it around, as it's been read off the wire in little endian.
        ;; Not the most efficient way to do this but the clearest.
        (Sha256Hash/wrapReversed (readBytes 32))
    )

    #_protected
    (§ method #_"boolean" (§ fn hasMoreBytes) [])
    (§ block
        (§ expr cursor < (.. payload length))
    )

    ;;; Network parameters this message was created with. ;;
    #_public
    (§ method #_"NetworkParameters" (§ fn getParams) [])
    (§ block
        params
    )

    ;;;
     ; Set the serializer for this message when deserialized by Java.
     ;;
    #_private
    (§ method- #_"void" (§ fn readObject) [#_"java.io.ObjectInputStream" (§ name in)])
        (§ throws #_"IOException", #_"ClassNotFoundException")
    (§ block
        (.. in (defaultReadObject))
        (§ if (some? params))
        (§ block
            (§ ass (§ name (.. this serializer)) (.. params (getDefaultSerializer)))
        )
        nil
    )
)

#_(ns org.bitcoinj.core #_"MessageSerializer"
    (:import [java.io IOException OutputStream]
             [java.nio BufferUnderflowException ByteBuffer]))

;;;
 ; Generic interface for classes which serialize/deserialize messages.
 ; Implementing classes should be immutable.
 ;;
#_public
#_abstract
(§ class #_"MessageSerializer"
    ;;;
     ; Reads a message from the given ByteBuffer and returns it.
     ;;
    #_public
    #_abstract
    (§ method #_"Message" (§ fn deserialize) [#_"ByteBuffer" (§ name in)])
        (§ throws #_"ProtocolException", #_"IOException", #_"UnsupportedOperationException")

    ;;;
     ; Deserializes only the header in case packet meta data is needed before decoding
     ; the payload.  This method assumes you have already called seekPastMagicBytes().
     ;;
    #_public
    #_abstract
    (§ method #_"BitcoinSerializer.BitcoinPacketHeader" (§ fn deserializeHeader) [#_"ByteBuffer" (§ name in)])
        (§ throws #_"ProtocolException", #_"IOException", #_"UnsupportedOperationException")

    ;;;
     ; Deserialize payload only.  You must provide a header, typically obtained by calling
     ; {@link BitcoinSerializer#deserializeHeader}.
     ;;
    #_public
    #_abstract
    (§ method #_"Message" (§ fn deserializePayload) [#_"BitcoinSerializer.BitcoinPacketHeader" (§ name header), #_"ByteBuffer" (§ name in)])
        (§ throws #_"ProtocolException", #_"BufferUnderflowException", #_"UnsupportedOperationException")

    ;;;
     ; Whether the serializer will produce cached mode Messages.
     ;;
    #_public
    #_abstract
    (§ method #_"boolean" (§ fn isParseRetainMode) [])

    ;;;
     ; Make an address message from the payload.  Extension point for alternative
     ; serialization format support.
     ;;
    #_public
    #_abstract
    (§ method #_"AddressMessage" (§ fn makeAddressMessage) [#_"byte[]" (§ name payloadBytes), #_"int" (§ name length)])
        (§ throws #_"ProtocolException", #_"UnsupportedOperationException")

    ;;;
     ; Make an alert message from the payload.  Extension point for alternative
     ; serialization format support.
     ;;
    #_public
    #_abstract
    (§ method #_"Message" (§ fn makeAlertMessage) [#_"byte[]" (§ name payloadBytes)])
        (§ throws #_"ProtocolException", #_"UnsupportedOperationException")

    ;;;
     ; Make a block from the payload, using an offset of zero and the payload
     ; length as block length.
     ;;
    #_public
    (§ method #_"Block" (§ fn makeBlock) [#_"byte[]" (§ name payloadBytes)])
        (§ throws #_"ProtocolException")
    (§ block
        (makeBlock payloadBytes, 0, (.. payloadBytes length))
    )

    ;;;
     ; Make a block from the payload, using an offset of zero and the provided
     ; length as block length.
     ;;
    #_public
    (§ method #_"Block" (§ fn makeBlock) [#_"byte[]" (§ name payloadBytes), #_"int" (§ name length)])
        (§ throws #_"ProtocolException")
    (§ block
        (makeBlock payloadBytes, 0, length)
    )

    ;;;
     ; Make a block from the payload, using an offset of zero and the provided
     ; length as block length.  Extension point for alternative
     ; serialization format support.
     ;;
    #_public
    #_abstract
    (§ method #_"Block" (§ fn makeBlock) [#_"byte[]" (§ name payloadBytes), #_"int" (§ name offset), #_"int" (§ name length)])
        (§ throws #_"ProtocolException", #_"UnsupportedOperationException")

    ;;;
     ; Make an filter message from the payload.  Extension point for alternative
     ; serialization format support.
     ;;
    #_public
    #_abstract
    (§ method #_"Message" (§ fn makeBloomFilter) [#_"byte[]" (§ name payloadBytes)])
        (§ throws #_"ProtocolException", #_"UnsupportedOperationException")

    ;;;
     ; Make a filtered block from the payload.  Extension point for alternative
     ; serialization format support.
     ;;
    #_public
    #_abstract
    (§ method #_"FilteredBlock" (§ fn makeFilteredBlock) [#_"byte[]" (§ name payloadBytes)])
        (§ throws #_"ProtocolException", #_"UnsupportedOperationException")

    ;;;
     ; Make an inventory message from the payload.  Extension point for alternative
     ; serialization format support.
     ;;
    #_public
    #_abstract
    (§ method #_"InventoryMessage" (§ fn makeInventoryMessage) [#_"byte[]" (§ name payloadBytes), #_"int" (§ name length)])
        (§ throws #_"ProtocolException", #_"UnsupportedOperationException")

    ;;;
     ; Make a transaction from the payload.  Extension point for alternative
     ; serialization format support.
     ;
     ; @throws UnsupportedOperationException if this serializer/deserializer
     ; does not support deserialization.  This can occur either because it's a dummy
     ; serializer (i.e. for messages with no network parameters), or because
     ; it does not support deserializing transactions.
     ;;
    #_public
    #_abstract
    (§ method #_"Transaction" (§ fn makeTransaction) [#_"byte[]" (§ name payloadBytes), #_"int" (§ name offset), #_"int" (§ name length), #_"byte[]" (§ name hash)])
        (§ throws #_"ProtocolException", #_"UnsupportedOperationException")

    ;;;
     ; Make a transaction from the payload.  Extension point for alternative
     ; serialization format support.
     ;
     ; @throws UnsupportedOperationException if this serializer/deserializer
     ; does not support deserialization.  This can occur either because it's a dummy
     ; serializer (i.e. for messages with no network parameters), or because
     ; it does not support deserializing transactions.
     ;;
    #_public
    (§ method #_"Transaction" (§ fn makeTransaction) [#_"byte[]" (§ name payloadBytes)])
        (§ throws #_"ProtocolException", #_"UnsupportedOperationException")
    (§ block
        (makeTransaction payloadBytes, 0)
    )

    ;;;
     ; Make a transaction from the payload.  Extension point for alternative
     ; serialization format support.
     ;
     ; @throws UnsupportedOperationException if this serializer/deserializer
     ; does not support deserialization.  This can occur either because it's a dummy
     ; serializer (i.e. for messages with no network parameters), or because
     ; it does not support deserializing transactions.
     ;;
    #_public
    (§ method #_"Transaction" (§ fn makeTransaction) [#_"byte[]" (§ name payloadBytes), #_"int" (§ name offset)])
        (§ throws #_"ProtocolException")
    (§ block
        (makeTransaction payloadBytes, offset, (.. payloadBytes length), nil)
    )

    #_public
    #_abstract
    (§ method #_"void" (§ fn seekPastMagicBytes) [#_"ByteBuffer" (§ name in)])
        (§ throws #_"BufferUnderflowException")

    ;;;
     ; Writes message to to the output stream.
     ;
     ; @throws UnsupportedOperationException if this serializer/deserializer
     ; does not support serialization.  This can occur either because it's a dummy
     ; serializer (i.e. for messages with no network parameters), or because
     ; it does not support serializing the given message.
     ;;
    #_public
    #_abstract
    (§ method #_"void" (§ fn serialize) [#_"String" (§ name name), #_"byte[]" (§ name message), #_"OutputStream" (§ name out)])
        (§ throws #_"IOException", #_"UnsupportedOperationException")

    ;;;
     ; Writes message to to the output stream.
     ;
     ; @throws UnsupportedOperationException if this serializer/deserializer
     ; does not support serialization.  This can occur either because it's a dummy
     ; serializer (i.e. for messages with no network parameters), or because
     ; it does not support serializing the given message.
     ;;
    #_public
    #_abstract
    (§ method #_"void" (§ fn serialize) [#_"Message" (§ name message), #_"OutputStream" (§ name out)])
        (§ throws #_"IOException", #_"UnsupportedOperationException")
)

#_(ns org.bitcoinj.core #_"Monetary"
    (:import [java.io Serializable]))

;;;
 ; Classes implementing this interface represent a monetary value, such as a Bitcoin or fiat amount.
 ;;
#_public
(§ interface #_"Monetary" (§ extends #_"Serializable")
    ;;;
     ; Returns the absolute value of exponent of the value of a "smallest unit" in scientific notation.
     ; For Bitcoin, a satoshi is worth 1E-8 so this would be 8.
     ;;
    (§ method #_"int" (§ fn smallestUnitExponent) [])

    ;;;
     ; Returns the number of "smallest units" of this monetary value.
     ; For Bitcoin, this would be the number of satoshis.
     ;;
    (§ method #_"long" (§ fn getValue) [])

    (§ method #_"int" (§ fn signum) [])
)

#_(ns org.bitcoinj.core #_"NetworkParameters"
    (:import [java.io *]
             [java.math *]
             [java.util *])
    (:import [com.google.common.base Objects])
   (:require [org.bitcoinj.core Block]
             #_static [org.bitcoinj.core.Coin *]
             [org.bitcoinj.core StoredBlock VerificationException]
             [org.bitcoinj.net.discovery *]
             [org.bitcoinj.params *]
             [org.bitcoinj.script *]
             [org.bitcoinj.store BlockStore BlockStoreException]
             [org.bitcoinj.utils MonetaryFormat VersionTally]))

;;;
 ; <p>NetworkParameters contains the data needed for working with an instantiation of a Bitcoin chain.</p>
 ;
 ; <p>This is an abstract class, concrete instantiations can be found in the params package.  There are four:
 ; one for the main network ({@link MainNetParams}), one for the public test network, and two others that are
 ; intended for unit testing and local app development purposes.  Although this class contains some aliases for
 ; them, you are encouraged to call the static get() methods on each specific params class directly.</p>
 ;;
#_public
#_abstract
(§ class #_"NetworkParameters"
    ;;;
     ; The alert signing key originally owned by Satoshi, and now passed on to Gavin along with a few others.
     ;;
    #_public
    #_static
    (§ def #_"byte[]" (§ name SATOSHI_KEY) (.. Utils/HEX (decode "04fc9702847840aaf195de8442ebecedf5b095cdbb9bc716bda9110971b28a49e0ead8564ff0db22209e0374782c093bb899692d524e9d6a6956e7c5ecbcd68284")))

    ;;; The string returned by getId() for the main, production network where people trade things. ;;
    #_public
    #_static
    (§ def #_"String" (§ name ID_MAINNET) "org.bitcoin.production")
    ;;; The string returned by getId() for the testnet. ;;
    #_public
    #_static
    (§ def #_"String" (§ name ID_TESTNET) "org.bitcoin.test")
    ;;; Unit test network. ;;
    #_public
    #_static
    (§ def #_"String" (§ name ID_UNITTESTNET) "org.bitcoinj.unittest")

    ;;; The string used by the payment protocol to represent the main net. ;;
    #_public
    #_static
    (§ def #_"String" (§ name PAYMENT_PROTOCOL_ID_MAINNET) "main")
    ;;; The string used by the payment protocol to represent the test net. ;;
    #_public
    #_static
    (§ def #_"String" (§ name PAYMENT_PROTOCOL_ID_TESTNET) "test")
    ;;; The string used by the payment protocol to represent unit testing (note that this is non-standard). ;;
    #_public
    #_static
    (§ def #_"String" (§ name PAYMENT_PROTOCOL_ID_UNIT_TESTS) "unittest")

    ;; TODO: Seed nodes should be here as well.

    #_protected
    (§ field #_"Block" (§ name genesisBlock))
    #_protected
    (§ field #_"BigInteger" (§ name maxTarget))
    #_protected
    (§ field #_"int" (§ name port))
    #_protected
    (§ field #_"long" (§ name packetMagic)) ;; Indicates message origin network and is used to seek to the next message when stream state is unknown.
    #_protected
    (§ field #_"int" (§ name addressHeader))
    #_protected
    (§ field #_"int" (§ name p2shHeader))
    #_protected
    (§ field #_"int" (§ name interval))
    #_protected
    (§ field #_"int" (§ name targetTimespan))
    #_protected
    (§ field #_"byte[]" (§ name alertSigningKey))
    #_protected
    (§ field #_"int" (§ name bip32HeaderPub))
    #_protected
    (§ field #_"int" (§ name bip32HeaderPriv))

    ;;; Used to check majorities for block version upgrade. ;;
    #_protected
    (§ field #_"int" (§ name majorityEnforceBlockUpgrade))
    #_protected
    (§ field #_"int" (§ name majorityRejectBlockOutdated))
    #_protected
    (§ field #_"int" (§ name majorityWindow))

    ;;;
     ; See getId().  This may be null for old deserialized wallets.  In that case we derive it heuristically
     ; by looking at the port number.
     ;;
    #_protected
    (§ field #_"String" (§ name id))

    ;;;
     ; The depth of blocks required for a coinbase transaction to be spendable.
     ;;
    #_protected
    (§ field #_"int" (§ name spendableCoinbaseDepth))
    #_protected
    (§ field #_"int" (§ name subsidyDecreaseBlockCount))

    #_protected
    (§ field #_"int[]" (§ name acceptableAddressCodes))
    #_protected
    (§ field #_"String[]" (§ name dnsSeeds))
    #_protected
    (§ field #_"int[]" (§ name addrSeeds))
    #_protected
    (§ field #_"Map<Integer, Sha256Hash>" (§ name checkpoints) (§ new #_"HashMap<>"))
    #_protected
    #_transient
    (§ field #_"MessageSerializer" (§ name defaultSerializer))

    #_protected
    (§ constructor #_"NetworkParameters" [])
    (§ block
        (§ ass (§ name alertSigningKey) SATOSHI_KEY)
        (§ ass (§ name genesisBlock) (createGenesis this))
        this
    )

    #_private
    #_static
    (§ defn- #_"Block" (§ fn createGenesis) [#_"NetworkParameters" (§ name n)])
    (§ block
        (§ var #_"Block" (§ name genesisBlock) (§ new #_"Block" n, Block/BLOCK_VERSION_GENESIS))
        (§ var #_"Transaction" (§ name t) (§ new #_"Transaction" n))
        (§ try )
        (§ block
            ;; A script containing the difficulty bits and the following message: "The Times 03/Jan/2009 Chancellor on brink of second bailout for banks".
            (§ var #_"byte[]" (§ name bytes) (.. Utils/HEX (decode "04ffff001d0104455468652054696d65732030332f4a616e2f32303039204368616e63656c6c6f72206f6e206272696e6b206f66207365636f6e64206261696c6f757420666f722062616e6b73")))
            (.. t (addInput (§ new #_"TransactionInput" n, t, bytes)))
            (§ var #_"ByteArrayOutputStream" (§ name scriptPubKeyBytes) (§ new #_"ByteArrayOutputStream"))
            (Script/writeBytes scriptPubKeyBytes, (.. Utils/HEX (decode "04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f")))
            (.. scriptPubKeyBytes (write ScriptOpCodes/OP_CHECKSIG))
            (.. t (addOutput (§ new #_"TransactionOutput" n, t, FIFTY_COINS, (.. scriptPubKeyBytes (toByteArray)))))
        )
        (§ catch #_"Exception" (§ name e))
        (§ block
            (§ throw (§ new #_"RuntimeException" e)) ;; Cannot happen.
        )
        (.. genesisBlock (addTransaction t))
        genesisBlock
    )

    #_public
    #_static
    (§ def #_"int" (§ name TARGET_TIMESPAN) (§ expr 14 * 24 * 60 * 60)) ;; 2 weeks per difficulty cycle, on average.
    #_public
    #_static
    (§ def #_"int" (§ name TARGET_SPACING) (* 10 60)) ;; 10 minutes per block.
    #_public
    #_static
    (§ def #_"int" (§ name INTERVAL) (/ TARGET_TIMESPAN TARGET_SPACING))

    ;;;
     ; Blocks with a timestamp after this should enforce BIP 16, aka "Pay to script hash".  This BIP changed
     ; the network rules in a soft-forking manner, that is, blocks that don't follow the rules are accepted
     ; but not mined upon and thus will be quickly re-orged out as long as the majority are enforcing the rule.
     ;;
    #_public
    #_static
    (§ def #_"int" (§ name BIP16_ENFORCE_TIME) 1333238400)

    ;;;
     ; The maximum number of coins to be generated.
     ;;
    #_public
    #_static
    (§ def #_"long" (§ name MAX_COINS) 21000000)

    ;;;
     ; The maximum money to be generated.
     ;;
    #_public
    #_static
    (§ def #_"Coin" (§ name MAX_MONEY) (.. COIN (multiply MAX_COINS)))

    ;;;
     ; A Java package style string acting as unique ID for these parameters.
     ;;
    #_public
    (§ method #_"String" (§ fn getId) [])
    (§ block
        id
    )

    #_public
    #_abstract
    (§ method #_"String" (§ fn getPaymentProtocolId) [])

    #_override
    #_public
    (§ method #_"boolean" (§ fn equals) [#_"Object" (§ name o)])
    (§ block
        (§ if (§ expr this == o))
        (§ block
            (§ return true)
        )
        (§ if (§ expr o == nil || (getClass) != (.. o (getClass))))
        (§ block
            (§ return false)
        )
        (.. (getId) (equals (.. (§ cast #_"NetworkParameters" o) (getId))))
    )

    #_override
    #_public
    (§ method #_"int" (§ fn hashCode) [])
    (§ block
        (Objects/hashCode (getId))
    )

    ;;; Returns the network parameters for the given string ID or NULL if not recognized. ;;
    #_nilable
    #_public
    #_static
    (§ defn #_"NetworkParameters" (§ fn fromID) [#_"String" (§ name id)])
    (§ block
        (§ if (.. id (equals ID_MAINNET)))
        (§ block
            (§ return (MainNetParams/get))
        )
        (§ if (.. id (equals ID_TESTNET)))
        (§ block
            (§ return (TestNet3Params/get))
        )
        (§ if (.. id (equals ID_UNITTESTNET)))
        (§ block
            (§ return (UnitTestParams/get))
        )
        nil
    )

    ;;; Returns the network parameters for the given string paymentProtocolID or NULL if not recognized. ;;
    #_nilable
    #_public
    #_static
    (§ defn #_"NetworkParameters" (§ fn fromPmtProtocolID) [#_"String" (§ name pmtProtocolId)])
    (§ block
        (§ if (.. pmtProtocolId (equals PAYMENT_PROTOCOL_ID_MAINNET)))
        (§ block
            (§ return (MainNetParams/get))
        )
        (§ if (.. pmtProtocolId (equals PAYMENT_PROTOCOL_ID_TESTNET)))
        (§ block
            (§ return (TestNet3Params/get))
        )
        (§ if (.. pmtProtocolId (equals PAYMENT_PROTOCOL_ID_UNIT_TESTS)))
        (§ block
            (§ return (UnitTestParams/get))
        )
        nil
    )

    #_public
    (§ method #_"int" (§ fn getSpendableCoinbaseDepth) [])
    (§ block
        spendableCoinbaseDepth
    )

    ;;;
     ; Throws an exception if the block's difficulty is not correct.
     ;
     ; @throws VerificationException if the block's difficulty is not correct.
     ;;
    #_public
    #_abstract
    (§ method #_"void" (§ fn checkDifficultyTransitions) [#_"StoredBlock" (§ name storedPrev), #_"Block" (§ name next), #_"BlockStore" (§ name blockStore)])
        (§ throws #_"VerificationException", #_"BlockStoreException")

    ;;;
     ; Returns true if the block height is either not a checkpoint, or is a checkpoint and the hash matches.
     ;;
    #_public
    (§ method #_"boolean" (§ fn passesCheckpoint) [#_"int" (§ name height), #_"Sha256Hash" (§ name hash)])
    (§ block
        (§ var #_"Sha256Hash" (§ name checkpointHash) (.. checkpoints (get height)))
        (§ expr checkpointHash == nil || (.. checkpointHash (equals hash)))
    )

    ;;;
     ; Returns true if the given height has a recorded checkpoint.
     ;;
    #_public
    (§ method #_"boolean" (§ fn isCheckpoint) [#_"int" (§ name height)])
    (§ block
        (§ var #_"Sha256Hash" (§ name checkpointHash) (.. checkpoints (get height)))
        (some? checkpointHash)
    )

    #_public
    (§ method #_"int" (§ fn getSubsidyDecreaseBlockCount) [])
    (§ block
        subsidyDecreaseBlockCount
    )

    ;;; Returns DNS names that when resolved, give IP addresses of active peers. ;;
    #_public
    (§ method #_"String[]" (§ fn getDnsSeeds) [])
    (§ block
        dnsSeeds
    )

    ;;; Returns IP address of active peers. ;;
    #_public
    (§ method #_"int[]" (§ fn getAddrSeeds) [])
    (§ block
        addrSeeds
    )

    ;;;
     ; <p>Genesis block for this chain.</p>
     ;
     ; <p>The first block in every chain is a well known constant shared between all Bitcoin implemenetations.
     ; For a block to be valid, it must be eventually possible to work backwards to the genesis block by following
     ; the prevBlockHash pointers in the block headers.</p>
     ;
     ; <p>The genesis blocks for both test and main networks contain the timestamp of when they were created,
     ; and a message in the coinbase transaction.  It says,
     ; <i>"The Times 03/Jan/2009 Chancellor on brink of second bailout for banks"</i>.</p>
     ;;
    #_public
    (§ method #_"Block" (§ fn getGenesisBlock) [])
    (§ block
        genesisBlock
    )

    ;;; Default TCP port on which to connect to nodes. ;;
    #_public
    (§ method #_"int" (§ fn getPort) [])
    (§ block
        port
    )

    ;;; The header bytes that identify the start of a packet on this network. ;;
    #_public
    (§ method #_"long" (§ fn getPacketMagic) [])
    (§ block
        packetMagic
    )

    ;;;
     ; First byte of a base58 encoded address.  See {@link org.bitcoinj.core.Address}.
     ; This is the same as acceptableAddressCodes[0] and is the one used for "normal" addresses.
     ; Other types of address may be encountered with version codes found in the acceptableAddressCodes array.
     ;;
    #_public
    (§ method #_"int" (§ fn getAddressHeader) [])
    (§ block
        addressHeader
    )

    ;;;
     ; First byte of a base58 encoded P2SH address.  P2SH addresses are defined as part of BIP0013.
     ;;
    #_public
    (§ method #_"int" (§ fn getP2SHHeader) [])
    (§ block
        p2shHeader
    )

    ;;;
     ; How much time in seconds is supposed to pass between "interval" blocks.  If the actual elapsed time is
     ; significantly different from this value, the network difficulty formula will produce a different value.
     ; Both test and main Bitcoin networks use 2 weeks (1209600 seconds).
     ;;
    #_public
    (§ method #_"int" (§ fn getTargetTimespan) [])
    (§ block
        targetTimespan
    )

    ;;;
     ; The version codes that prefix addresses which are acceptable on this network.  Although Satoshi intended these
     ; to be used for "versioning", in fact they are today used to discriminate what kind of data is contained in the
     ; address and to prevent accidentally sending coins across chains which would destroy them.
     ;;
    #_public
    (§ method #_"int[]" (§ fn getAcceptableAddressCodes) [])
    (§ block
        acceptableAddressCodes
    )

    ;;;
     ; If we are running in testnet-in-a-box mode, we allow connections to nodes with 0 non-genesis blocks.
     ;;
    #_public
    (§ method #_"boolean" (§ fn allowEmptyPeerChain) [])
    (§ block
        true
    )

    ;;; How many blocks pass between difficulty adjustment periods.  Bitcoin standardises this to be 2016. ;;
    #_public
    (§ method #_"int" (§ fn getInterval) [])
    (§ block
        interval
    )

    ;;; Maximum target represents the easiest allowable proof of work. ;;
    #_public
    (§ method #_"BigInteger" (§ fn getMaxTarget) [])
    (§ block
        maxTarget
    )

    ;;;
     ; The key used to sign {@link org.bitcoinj.core.AlertMessage}s.
     ; You can use {@link org.bitcoinj.core.ECKey#verify(byte[], byte[], byte[])} to verify signatures using it.
     ;;
    #_public
    (§ method #_"byte[]" (§ fn getAlertSigningKey) [])
    (§ block
        alertSigningKey
    )

    ;;; Returns the 4 byte header for BIP32 (HD) wallet - public key part. ;;
    #_public
    (§ method #_"int" (§ fn getBip32HeaderPub) [])
    (§ block
        bip32HeaderPub
    )

    ;;; Returns the 4 byte header for BIP32 (HD) wallet - private key part. ;;
    #_public
    (§ method #_"int" (§ fn getBip32HeaderPriv) [])
    (§ block
        bip32HeaderPriv
    )

    ;;;
     ; Returns the number of coins that will be produced in total, on this network.
     ; Where not applicable, a very large number of coins is returned
     ; instead (i.e. the main coin issue for Dogecoin).
     ;;
    #_public
    #_abstract
    (§ method #_"Coin" (§ fn getMaxMoney) [])

    ;;;
     ; Any standard (i.e. pay-to-address) output smaller than this value will
     ; most likely be rejected by the network.
     ;;
    #_public
    #_abstract
    (§ method #_"Coin" (§ fn getMinNonDustOutput) [])

    ;;;
     ; The monetary object for this currency.
     ;;
    #_public
    #_abstract
    (§ method #_"MonetaryFormat" (§ fn getMonetaryFormat) [])

    ;;;
     ; Scheme part for URIs, for example "bitcoin".
     ;;
    #_public
    #_abstract
    (§ method #_"String" (§ fn getUriScheme) [])

    ;;;
     ; Returns whether this network has a maximum number of coins (finite supply) or not.
     ; Always returns true for Bitcoin, but exists to be overriden for other networks.
     ;;
    #_public
    #_abstract
    (§ method #_"boolean" (§ fn hasMaxMoney) [])

    ;;;
     ; Return the default serializer for this network.  This is a shared serializer.
     ;;
    #_public
    (§ method #_"MessageSerializer" (§ fn getDefaultSerializer) [])
    (§ block
        ;; Construct a default serializer if we don't have one.
        (§ if (== (.. this defaultSerializer) nil))
        (§ block
            ;; Don't grab a lock unless we absolutely need it.
            (§ sync this)
            (§ block
                ;; Now we have a lock, double check there's still no serializer and create one if so.
                (§ if (== (.. this defaultSerializer) nil))
                (§ block
                    ;; As the serializers are intended to be immutable, creating
                    ;; two due to a race condition should not be a problem, however
                    ;; to be safe we ensure only one exists for each network.
                    (§ ass (§ name (.. this defaultSerializer)) (getSerializer false))
                )
            )
        )
        defaultSerializer
    )

    ;;;
     ; Construct and return a custom serializer.
     ;;
    #_public
    #_abstract
    (§ method #_"BitcoinSerializer" (§ fn getSerializer) [#_"boolean" (§ name parseRetain)])

    ;;;
     ; The number of blocks in the last {@link getMajorityWindow()} blocks
     ; at which to trigger a notice to the user to upgrade their client, where
     ; the client does not understand those blocks.
     ;;
    #_public
    (§ method #_"int" (§ fn getMajorityEnforceBlockUpgrade) [])
    (§ block
        majorityEnforceBlockUpgrade
    )

    ;;;
     ; The number of blocks in the last {@link getMajorityWindow()} blocks
     ; at which to enforce the requirement that all new blocks are of the
     ; newer type (i.e. outdated blocks are rejected).
     ;;
    #_public
    (§ method #_"int" (§ fn getMajorityRejectBlockOutdated) [])
    (§ block
        majorityRejectBlockOutdated
    )

    ;;;
     ; The sampling window from which the version numbers of blocks are taken
     ; in order to determine if a new block version is now the majority.
     ;;
    #_public
    (§ method #_"int" (§ fn getMajorityWindow) [])
    (§ block
        majorityWindow
    )

    ;;;
     ; The flags indicating which block validation tests should be applied to
     ; the given block.  Enables support for alternative blockchains which enable
     ; tests based on different criteria.
     ;
     ; @param block Block to determine flags for.
     ; @param height Height of the block, if known, null otherwise.  Returned
     ; tests should be a safe subset if block height is unknown.
     ;;
    #_public
    (§ method #_"EnumSet<Block.VerifyFlag>" (§ fn getBlockVerificationFlags) [#_"Block" (§ name block), #_"VersionTally" (§ name tally), #_"Integer" (§ name height)])
    (§ block
        (§ var #_"EnumSet<Block.VerifyFlag>" (§ name flags) (EnumSet/noneOf (§ klass #_"Block.VerifyFlag")))

        (§ if (.. block (isBIP34)))
        (§ block
            (§ var #_"Integer" (§ name count) (.. tally (getCountAtOrAbove Block/BLOCK_VERSION_BIP34)))
            (§ if (§ expr count != nil && (getMajorityEnforceBlockUpgrade) <= count))
            (§ block
                (.. flags (add Block/VerifyFlag/HEIGHT_IN_COINBASE))
            )
        )

        flags
    )

    ;;;
     ; The flags indicating which script validation tests should be applied to
     ; the given transaction.  Enables support for alternative blockchains which enable
     ; tests based on different criteria.
     ;
     ; @param block Block the transaction belongs to.
     ; @param transaction to determine flags for.
     ; @param height Height of the block, if known, null otherwise.  Returned
     ; tests should be a safe subset if block height is unknown.
     ;;
    #_public
    (§ method #_"EnumSet<Script.VerifyFlag>" (§ fn getTransactionVerificationFlags) [#_"Block" (§ name block), #_"Transaction" (§ name transaction), #_"VersionTally" (§ name tally), #_"Integer" (§ name height)])
    (§ block
        (§ var #_"EnumSet<Script.VerifyFlag>" (§ name verifyFlags) (EnumSet/noneOf (§ klass #_"Script.VerifyFlag")))
        (§ if (§ expr NetworkParameters/BIP16_ENFORCE_TIME <= (.. block (getTimeSeconds))))
        (§ block
            (.. verifyFlags (add Script/VerifyFlag/P2SH))
        )

        ;; Start enforcing CHECKLOCKTIMEVERIFY (BIP65) for block.nVersion=4 blocks,
        ;; when 75% of the network has been upgraded:
        (§ if (§ expr Block/BLOCK_VERSION_BIP65 <= (.. block (getVersion)) && (.. this (getMajorityEnforceBlockUpgrade)) < (.. tally (getCountAtOrAbove Block/BLOCK_VERSION_BIP65))))
        (§ block
            (.. verifyFlags (add Script/VerifyFlag/CHECKLOCKTIMEVERIFY))
        )

        verifyFlags
    )

    #_public
    #_abstract
    (§ method #_"int" (§ fn getProtocolVersionNum) [#_"ProtocolVersion" (§ name version)])

    #_public
    #_static
    (§ enum #_"ProtocolVersion"
        (§ item (MINIMUM 70000))
        (§ item (PONG 60001))
        (§ item (BLOOM_FILTER 70000))
        (§ item (CURRENT 70001))

        #_private
        (§ field- #_"int" (§ name bitcoinProtocol))

        (§ constructor #_"ProtocolVersion" [#_"int" (§ name bitcoinProtocol)])
        (§ block
            (§ ass (§ name (.. this bitcoinProtocol)) bitcoinProtocol)
            this
        )

        #_public
        (§ method #_"int" (§ fn getBitcoinProtocolVersion) [])
        (§ block
            bitcoinProtocol
        )
    )
)

#_(ns org.bitcoinj.core #_"NotFoundMessage"
    (:import [java.util ArrayList List]))

;;;
 ; <p>Sent by a peer when a getdata request doesn't find the requested data in the mempool.  It has the same format
 ; as an inventory message and lists the hashes of the missing items.</p>
 ;
 ; <p>Instances of this class are not safe for use by multiple threads.</p>
 ;;
#_public
(§ class #_"NotFoundMessage" (§ extends #_"InventoryMessage")
    #_public
    #_static
    (§ def #_"int" (§ name MIN_PROTOCOL_VERSION) 70001)

    #_public
    (§ constructor #_"NotFoundMessage" [#_"NetworkParameters" (§ name params)])
    (§ block
        (§ super params)
        this
    )

    #_public
    (§ constructor #_"NotFoundMessage" [#_"NetworkParameters" (§ name params), #_"byte[]" (§ name payloadBytes)])
        (§ throws #_"ProtocolException")
    (§ block
        (§ super params, payloadBytes)
        this
    )

    #_public
    (§ constructor #_"NotFoundMessage" [#_"NetworkParameters" (§ name params), #_"List<InventoryItem>" (§ name items)])
    (§ block
        (§ super params)
        (§ ass (§ name (.. this items)) (§ new #_"ArrayList<>" items))
        this
    )
)

#_(ns org.bitcoinj.core #_"PartialMerkleTree"
    (:import [java.io IOException OutputStream]
             [java.util ArrayList Arrays List])
    (:import [com.google.common.base Objects])
    (:import #_static [org.bitcoinj.core.Utils *]))

;;;
 ; <p>A data structure that contains proofs of block inclusion for one or more transactions, in an efficient manner.</p>
 ;
 ; <p>The encoding works as follows: we traverse the tree in depth-first order, storing a bit for each traversed node,
 ; signifying whether the node is the parent of at least one matched leaf txid (or a matched txid itself).  In case we
 ; are at the leaf level, or this bit is 0, its merkle node hash is stored, and its children are not explored further.
 ; Otherwise, no hash is stored, but we recurse into both (or the only) child branch.  During decoding, the same
 ; depth-first traversal is performed, consuming bits and hashes as they were written during encoding.</p>
 ;
 ; <p>The serialization is fixed and provides a hard guarantee about the encoded size,
 ; <tt>SIZE &lt;= 10 + ceil(32.25 * N)</tt> where N represents the number of leaf nodes of the partial tree.
 ; N itself is bounded by:</p>
 ;
 ; N &lt;= total_transactions
 ; N &lt;= 1 + matched_transactions * tree_height
 ;
 ; <p><pre>The serialization format:
 ;  - uint32     total_transactions (4 bytes)
 ;  - varint     number of hashes (1-3 bytes)
 ;  - uint256[]  hashes in depth-first order (&lt;= 32*N bytes)
 ;  - varint     number of bytes of flag bits (1-3 bytes)
 ;  - byte[]     flag bits, packed per 8 in a byte, least significant bit first (&lt;= 2*N-1 bits)
 ; The size constraints follow from this.</pre></p>
 ;
 ; <p>Instances of this class are not safe for use by multiple threads.</p>
 ;;
#_public
(§ class #_"PartialMerkleTree" (§ extends #_"Message")
    ;; the total number of transactions in the block
    #_private
    (§ field- #_"int" (§ name transactionCount))

    ;; node-is-parent-of-matched-txid bits
    #_private
    (§ field- #_"byte[]" (§ name matchedChildBits))

    ;; txids and internal hashes
    #_private
    (§ field- #_"List<Sha256Hash>" (§ name hashes))

    #_public
    (§ constructor #_"PartialMerkleTree" [#_"NetworkParameters" (§ name params), #_"byte[]" (§ name payloadBytes), #_"int" (§ name offset)])
        (§ throws #_"ProtocolException")
    (§ block
        (§ super params, payloadBytes, offset)
        this
    )

    ;;;
     ; Constructs a new PMT with the given bit set (little endian) and the raw list of hashes including internal hashes,
     ; taking ownership of the list.
     ;;
    #_public
    (§ constructor #_"PartialMerkleTree" [#_"NetworkParameters" (§ name params), #_"byte[]" (§ name bits), #_"List<Sha256Hash>" (§ name hashes), #_"int" (§ name origTxCount)])
    (§ block
        (§ super params)

        (§ ass (§ name (.. this matchedChildBits)) bits)
        (§ ass (§ name (.. this hashes)) hashes)
        (§ ass (§ name (.. this transactionCount)) origTxCount)
        this
    )

    ;;;
     ; Calculates a PMT given the list of leaf hashes and which leaves need to be included.  The relevant interior hashes
     ; are calculated and a new PMT returned.
     ;;
    #_public
    #_static
    (§ defn #_"PartialMerkleTree" (§ fn buildFromLeaves) [#_"NetworkParameters" (§ name params), #_"byte[]" (§ name includeBits), #_"List<Sha256Hash>" (§ name allLeafHashes)])
    (§ block
        ;; Calculate height of the tree.
        (§ var #_"int" (§ name height) 0)
        (§ while (§ expr 1 < (getTreeWidth (.. allLeafHashes (size)), height)))
        (§ block
            (§ ass (§ name height) (+ height 1))
        )
        (§ var #_"List<Boolean>" (§ name bitList) (§ new #_"ArrayList<>"))
        (§ var #_"List<Sha256Hash>" (§ name hashes) (§ new #_"ArrayList<>"))
        (traverseAndBuild height, 0, allLeafHashes, includeBits, bitList, hashes)
        (§ var #_"byte[]" (§ name bits) (§ new #_"byte[]" (§ count (§ cast #_"int" (Math/ceil (/ (.. bitList (size)) 8.0))))))
        (§ for (§ var #_"int" (§ name i) 0) :for (§ expr i < (.. bitList (size))) :for (§ ass (§ name i) (+ i 1)))
        (§ block
            (§ if (.. bitList (get i)))
            (§ block
                (Utils/setBitLE bits, i)
            )
        )
        (§ new #_"PartialMerkleTree" params, bits, hashes, (.. allLeafHashes (size)))
    )

    #_override
    #_public
    (§ method #_"void" (§ fn bitcoinSerializeToStream) [#_"OutputStream" (§ name stream)])
        (§ throws #_"IOException")
    (§ block
        (uint32ToByteStreamLE transactionCount, stream)

        (.. stream (write (.. (§ new #_"VarInt" (.. hashes (size))) (encode))))
        (§ for (§ var #_"Sha256Hash" (§ name hash)) :for hashes)
        (§ block
            (.. stream (write (.. hash (getReversedBytes))))
        )

        (.. stream (write (.. (§ new #_"VarInt" (.. matchedChildBits length)) (encode))))
        (.. stream (write matchedChildBits))
        nil
    )

    #_override
    #_protected
    (§ method #_"void" (§ fn parse) [])
        (§ throws #_"ProtocolException")
    (§ block
        (§ ass (§ name transactionCount) (§ cast #_"int" (readUint32)))

        (§ var #_"int" (§ name nHashes) (§ cast #_"int" (readVarInt)))
        (§ ass (§ name hashes) (§ new #_"ArrayList<>" nHashes))
        (§ for (§ var #_"int" (§ name i) 0) :for (< i nHashes) :for (§ ass (§ name i) (+ i 1)))
        (§ block
            (.. hashes (add (readHash)))
        )

        (§ var #_"int" (§ name nFlagBytes) (§ cast #_"int" (readVarInt)))
        (§ ass (§ name matchedChildBits) (readBytes nFlagBytes))

        (§ ass (§ name length) (- cursor offset))
        nil
    )

    ;; Based on CPartialMerkleTree::TraverseAndBuild in Bitcoin Core.
    #_private
    #_static
    (§ defn- #_"void" (§ fn traverseAndBuild) [#_"int" (§ name height), #_"int" (§ name pos), #_"List<Sha256Hash>" (§ name allLeafHashes), #_"byte[]" (§ name includeBits), #_"List<Boolean>" (§ name matchedChildBits), #_"List<Sha256Hash>" (§ name resultHashes)])
    (§ block
        (§ var #_"boolean" (§ name parentOfMatch) false)
        ;; Is this node a parent of at least one matched hash?
        (§ for (§ var #_"int" (§ name p) (<< pos height)) :for (§ expr p < (+ pos 1) << height && p < (.. allLeafHashes (size))) :for (§ ass (§ name p) (+ p 1)))
        (§ block
            (§ if (Utils/checkBitLE includeBits, p))
            (§ block
                (§ ass (§ name parentOfMatch) true)
                (§ break )
            )
        )
        ;; Store as a flag bit.
        (.. matchedChildBits (add parentOfMatch))
        (§ if (§ expr height == 0 || (§ not parentOfMatch)))
        (§ block
            ;; If at height 0, or nothing interesting below, store hash and stop.
            (.. resultHashes (add (calcHash height, pos, allLeafHashes)))
        )
        (§ else )
        (§ block
            ;; Otherwise descend into the subtrees.
            (§ var #_"int" (§ name h) (- height 1))
            (§ var #_"int" (§ name p) (* pos 2))
            (traverseAndBuild h, p, allLeafHashes, includeBits, matchedChildBits, resultHashes)
            (§ if (§ expr p + 1 < (getTreeWidth (.. allLeafHashes (size)), h)))
            (§ block
                (traverseAndBuild h, (§ expr p + 1), allLeafHashes, includeBits, matchedChildBits, resultHashes)
            )
        )
        nil
    )

    #_private
    #_static
    (§ defn- #_"Sha256Hash" (§ fn calcHash) [#_"int" (§ name height), #_"int" (§ name pos), #_"List<Sha256Hash>" (§ name hashes)])
    (§ block
        ;; Hash at height 0 is just the regular tx hash itself.
        (§ if (§ expr height == 0))
        (§ block
            (§ return (.. hashes (get pos)))
        )

        (§ var #_"int" (§ name h) (- height 1))
        (§ var #_"int" (§ name p) (* pos 2))
        (§ var #_"Sha256Hash" (§ name left) (calcHash h, p, hashes))
        ;; Calculate right hash if not beyond the end of the array - copy left hash otherwise.
        (§ var #_"Sha256Hash" (§ name right) (if (< (+ p 1) (getTreeWidth (.. hashes (size)), h)) (calcHash h, (+ p 1), hashes) left))

        (combineLeftRight (.. left (getBytes)), (.. right (getBytes)))
    )

    ;; Helper function to efficiently calculate the number of nodes at given height in the merkle tree.
    #_private
    #_static
    (§ defn- #_"int" (§ fn getTreeWidth) [#_"int" (§ name transactionCount), #_"int" (§ name height)])
    (§ block
        (>> (- (+ transactionCount (<< 1 height)) 1) height)
    )

    #_private
    #_static
    (§ class #_"ValuesUsed"
        #_public
        (§ field #_"int" (§ name bitsUsed) 0)
        (§ field #_"int" (§ name hashesUsed) 0)
    )

    ;; Recursive function that traverses tree nodes, consuming the bits and hashes produced by TraverseAndBuild.
    ;; It returns the hash of the respective node.
    #_private
    (§ method- #_"Sha256Hash" (§ fn recursiveExtractHashes) [#_"int" (§ name height), #_"int" (§ name pos), #_"ValuesUsed" (§ name used), #_"List<Sha256Hash>" (§ name matchedHashes)])
        (§ throws #_"VerificationException")
    (§ block
        ;; overflowed bits array - failure
        (§ if (§ expr (.. matchedChildBits length) * 8 <= (.. used bitsUsed)))
        (§ block
            (§ throw (§ new #_"VerificationException" "PartialMerkleTree overflowed its bits array"))
        )

        (§ var #_"boolean" (§ name parentOfMatch) (checkBitLE matchedChildBits, (.. used bitsUsed)))
        (§ ass (§ name (.. used bitsUsed)) (+ (.. used bitsUsed) 1))

        ;; if at height 0, or nothing interesting below, use stored hash and do not descend
        (§ if (§ expr height == 0 || (§ not parentOfMatch)))
        (§ block
            ;; overflowed hash array - failure
            (§ if (<= (.. hashes (size)) (.. used hashesUsed)))
            (§ block
                (§ throw (§ new #_"VerificationException" "PartialMerkleTree overflowed its hash array"))
            )

            (§ var #_"Sha256Hash" (§ name hash) (.. hashes (get (.. used hashesUsed))))
            (§ ass (§ name (.. used hashesUsed)) (+ (.. used hashesUsed) 1))
            ;; in case of height 0, we have a matched txid
            (§ if (§ expr height == 0 && parentOfMatch))
            (§ block
                (.. matchedHashes (add hash))
            )

            (§ return hash)
        )
        (§ else )
        (§ block
            ;; otherwise, descend into the subtrees to extract matched txids and hashes
            (§ var #_"byte[]" (§ name left) (.. (recursiveExtractHashes (§ expr height - 1), (§ expr pos * 2), used, matchedHashes) (getBytes)))
            (§ var #_"byte[]" (§ name right))
            (§ if (§ expr pos * 2 + 1 < (getTreeWidth transactionCount, (§ expr height - 1))))
            (§ block
                (§ ass (§ name right) (.. (recursiveExtractHashes (§ expr height - 1), (§ expr pos * 2 + 1), used, matchedHashes) (getBytes)))
                (§ if (Arrays/equals right, left))
                (§ block
                    (§ throw (§ new #_"VerificationException" "Invalid merkle tree with duplicated left/right branches"))
                )
            )
            (§ else )
            (§ block
                (§ ass (§ name right) left)
            )
            ;; and combine them before returning
            (§ return (combineLeftRight left, right))
        )
    )

    #_private
    #_static
    (§ defn- #_"Sha256Hash" (§ fn combineLeftRight) [#_"byte[]" (§ name left), #_"byte[]" (§ name right)])
    (§ block
        (Sha256Hash/wrapReversed (Sha256Hash/hashTwice (reverseBytes left), 0, 32, (reverseBytes right), 0, 32))
    )

    ;;;
     ; Extracts tx hashes that are in this merkle tree and returns the merkle root of this tree.
     ;
     ; The returned root should be checked against the merkle root contained in the block header for security.
     ;
     ; @param matchedHashesOut A list which will contain the matched txn (will be cleared).
     ; @return the merkle root of this merkle tree.
     ; @throws ProtocolException if this partial merkle tree is invalid.
     ;;
    #_public
    (§ method #_"Sha256Hash" (§ fn getTxnHashAndMerkleRoot) [#_"List<Sha256Hash>" (§ name matchedHashesOut)])
        (§ throws #_"VerificationException")
    (§ block
        (.. matchedHashesOut (clear))

        ;; an empty set will not work
        (§ if (§ expr transactionCount == 0))
        (§ block
            (§ throw (§ new #_"VerificationException" "Got a CPartialMerkleTree with 0 transactions"))
        )
        ;; check for excessively high numbers of transactions
        (§ if (§ expr Block/MAX_BLOCK_SIZE / 60 < transactionCount)) ;; 60 is the lower bound for the size of a serialized CTransaction
        (§ block
            (§ throw (§ new #_"VerificationException" "Got a CPartialMerkleTree with more transactions than is possible"))
        )
        ;; there can never be more hashes provided than one for every txid
        (§ if (§ expr transactionCount < (.. hashes (size))))
        (§ block
            (§ throw (§ new #_"VerificationException" "Got a CPartialMerkleTree with more hashes than transactions"))
        )
        ;; there must be at least one bit per node in the partial tree, and at least one node per hash
        (§ if (§ expr (.. matchedChildBits length) * 8 < (.. hashes (size))))
        (§ block
            (§ throw (§ new #_"VerificationException" "Got a CPartialMerkleTree with fewer matched bits than hashes"))
        )

        ;; calculate height of tree
        (§ var #_"int" (§ name height) 0)
        (§ while (§ expr 1 < (getTreeWidth transactionCount, height)))
        (§ block
            (§ ass (§ name height) (+ height 1))
        )
        ;; traverse the partial tree
        (§ var #_"ValuesUsed" (§ name used) (§ new #_"ValuesUsed"))
        (§ var #_"Sha256Hash" (§ name merkleRoot) (recursiveExtractHashes height, 0, used, matchedHashesOut))
        ;; verify that all bits were consumed (except for the padding caused by serializing it as a byte sequence)
        ;; verify that all hashes were consumed
        (§ if (§ expr (+ (.. used bitsUsed) 7) / 8 != (.. matchedChildBits length) || (.. used hashesUsed) != (.. hashes (size))))
        (§ block
            (§ throw (§ new #_"VerificationException" "Got a CPartialMerkleTree that didn't need all the data it provided"))
        )

        merkleRoot
    )

    #_public
    (§ method #_"int" (§ fn getTransactionCount) [])
    (§ block
        transactionCount
    )

    #_override
    #_public
    (§ method #_"boolean" (§ fn equals) [#_"Object" (§ name o)])
    (§ block
        (§ if (§ expr this == o))
        (§ block
            (§ return true)
        )
        (§ if (§ expr o == nil || (getClass) != (.. o (getClass))))
        (§ block
            (§ return false)
        )
        (§ var #_"PartialMerkleTree" (§ name other) (§ cast #_"PartialMerkleTree" o))
        (§ expr transactionCount == (.. other transactionCount) && (.. hashes (equals (.. other hashes))) && (Arrays/equals matchedChildBits, (.. other matchedChildBits)))
    )

    #_override
    #_public
    (§ method #_"int" (§ fn hashCode) [])
    (§ block
        (Objects/hashCode transactionCount, hashes, (Arrays/hashCode matchedChildBits))
    )

    #_override
    #_public
    (§ method #_"String" (§ fn toString) [])
    (§ block
        (§ expr "PartialMerkleTree{" + "transactionCount=" + transactionCount + ", matchedChildBits=" + (Arrays/toString matchedChildBits) + ", hashes=" + hashes + "}")
    )
)

#_(ns org.bitcoinj.core #_"Peer"
    (:import [java.util *]
             [java.util.concurrent CopyOnWriteArrayList CopyOnWriteArraySet Executor]
             [java.util.concurrent.atomic AtomicInteger]
             [java.util.concurrent.locks ReentrantLock])
    (:import [com.google.common.base * Objects]
             [com.google.common.collect Lists]
             [com.google.common.util.concurrent FutureCallback Futures ListenableFuture SettableFuture]
             [net.jcip.annotations GuardedBy]
             [org.slf4j Logger LoggerFactory])
   (:require [org.bitcoinj.core.listeners *]
             [org.bitcoinj.net StreamConnection]
             [org.bitcoinj.store BlockStore BlockStoreException]
             [org.bitcoinj.utils ListenerRegistration Threading]
             [org.bitcoinj.wallet Wallet]))

;;;
 ; <p>A Peer handles the high level communication with a Bitcoin node, extending a {@link PeerSocketHandler} which
 ; handles low-level message (de)serialization.</p>
 ;
 ; <p>Note that timeouts are handled by the extended
 ; {@link org.bitcoinj.net.AbstractTimeoutHandler} and timeout is automatically disabled (using
 ; {@link org.bitcoinj.net.AbstractTimeoutHandler#setTimeoutEnabled(boolean)}) once the version
 ; handshake completes.</p>
 ;;
#_public
(§ class #_"Peer" (§ extends #_"PeerSocketHandler")
    #_private
    #_static
    (§ def- #_"Logger" (§ name log) (LoggerFactory/getLogger (§ klass #_"Peer")))

    #_protected
    (§ field #_"ReentrantLock" (§ name lock) (Threading/lock "peer"))

    #_private
    (§ field- #_"NetworkParameters" (§ name params))
    #_private
    (§ field- #_"AbstractBlockChain" (§ name blockChain))
    #_private
    (§ field- #_"Context" (§ name context))

    #_private
    (§ field- #_"CopyOnWriteArrayList<ListenerRegistration<BlocksDownloadedEventListener>>" (§ name blocksDownloadedEventListeners) (§ new #_"CopyOnWriteArrayList<>"))
    #_private
    (§ field- #_"CopyOnWriteArrayList<ListenerRegistration<ChainDownloadStartedEventListener>>" (§ name chainDownloadStartedEventListeners) (§ new #_"CopyOnWriteArrayList<>"))
    #_private
    (§ field- #_"CopyOnWriteArrayList<ListenerRegistration<PeerConnectedEventListener>>" (§ name connectedEventListeners) (§ new #_"CopyOnWriteArrayList<>"))
    #_private
    (§ field- #_"CopyOnWriteArrayList<ListenerRegistration<PeerDisconnectedEventListener>>" (§ name disconnectedEventListeners) (§ new #_"CopyOnWriteArrayList<>"))
    #_private
    (§ field- #_"CopyOnWriteArrayList<ListenerRegistration<GetDataEventListener>>" (§ name getDataEventListeners) (§ new #_"CopyOnWriteArrayList<>"))
    #_private
    (§ field- #_"CopyOnWriteArrayList<ListenerRegistration<PreMessageReceivedEventListener>>" (§ name preMessageReceivedEventListeners) (§ new #_"CopyOnWriteArrayList<>"))
    #_private
    (§ field- #_"CopyOnWriteArrayList<ListenerRegistration<OnTransactionBroadcastListener>>" (§ name onTransactionEventListeners) (§ new #_"CopyOnWriteArrayList<>"))

    ;; Whether to try and download blocks and transactions from this peer.  Set to false by PeerGroup if not the
    ;; primary peer.  This is to avoid redundant work and concurrency problems with downloading the same chain
    ;; in parallel.
    #_private
    #_volatile
    (§ field- #_"boolean" (§ name vDownloadData))
    ;; The version data to announce to the other side of the connections we make: useful for setting our "user agent"
    ;; equivalent and other things.
    #_private
    (§ field- #_"VersionMessage" (§ name versionMessage))
    ;; Maximum depth up to which pending transaction dependencies are downloaded, or 0 for disabled.
    #_private
    #_volatile
    (§ field- #_"int" (§ name vDownloadTxDependencyDepth))
    ;; How many block messages the peer has announced to us.  Peers only announce blocks that attach to their best chain
    ;; so we can use this to calculate the height of the peers chain, by adding it to the initial height in the version
    ;; message.  This method can go wrong if the peer re-orgs onto a shorter (but harder) chain, however, this is rare.
    #_private
    (§ field- #_"AtomicInteger" (§ name blocksAnnounced) (§ new #_"AtomicInteger"))
    ;; Each wallet added to the peer will be notified of downloaded transaction data.
    #_private
    (§ field- #_"CopyOnWriteArrayList<Wallet>" (§ name wallets))
    ;; A time before which we only download block headers, after that point we download block bodies.
    #_guarded-by(§ opt "lock")
    #_private
    (§ field- #_"long" (§ name fastCatchupTimeSecs))
    ;; Whether we are currently downloading headers only or block bodies.  Starts at true.  If the fast catchup time is
    ;; set AND our best block is before that date, switch to false until block headers beyond that point have been
    ;; received at which point it gets set to true again.  This isn't relevant unless vDownloadData is true.
    #_guarded-by(§ opt "lock")
    #_private
    (§ field- #_"boolean" (§ name downloadBlockBodies) true)
    ;; Whether to request filtered blocks instead of full blocks if the protocol version allows for them.
    #_guarded-by(§ opt "lock")
    #_private
    (§ field- #_"boolean" (§ name useFilteredBlocks) false)
    ;; The current Bloom filter set on the connection, used to tell the remote peer what transactions to send us.
    #_private
    #_volatile
    (§ field- #_"BloomFilter" (§ name vBloomFilter))
    ;; The last filtered block we received, we're waiting to fill it out with transactions.
    #_private
    (§ field- #_"FilteredBlock" (§ name currentFilteredBlock) nil)
    ;; How many filtered blocks have been received during the lifetime of this connection.  Used to decide when to
    ;; refresh the server-side side filter by sending a new one (it degrades over time as false positives are added
    ;; on the remote side, see BIP 37 for a discussion of this).
    ;; TODO: Is this still needed?  It should not be since the auto FP tracking logic was added.
    #_private
    (§ field- #_"int" (§ name filteredBlocksReceived))
    ;; If non-null, we should discard incoming filtered blocks because we ran out of keys and are awaiting a new filter
    ;; to be calculated by the PeerGroup.  The discarded block hashes should be added here so we can re-request them
    ;; once we've recalculated and resent a new filter.
    #_guarded-by(§ opt "lock")
    #_nilable
    #_private
    (§ field- #_"List<Sha256Hash>" (§ name awaitingFreshFilter))
    ;; How frequently to refresh the filter.  This should become dynamic in future and calculated depending on the
    ;; actual false positive rate.  For now a good value was determined empirically around January 2013.
    #_private
    #_static
    (§ def- #_"int" (§ name RESEND_BLOOM_FILTER_BLOCK_COUNT) 25000)
    ;; Keeps track of things we requested internally with getdata but didn't receive yet, so we can avoid re-requests.
    ;; It's not quite the same as getDataFutures, as this is used only for getdatas done as part of downloading
    ;; the chain and so is lighter weight (we just keep a bunch of hashes not futures).
    ;;
    ;; It is important to avoid a nasty edge case where we can end up with parallel chain downloads proceeding
    ;; simultaneously if we were to receive a newly solved block whilst parts of the chain are streaming to us.
    #_private
    (§ field- #_"HashSet<Sha256Hash>" (§ name pendingBlockDownloads) (§ new #_"HashSet<>"))
    ;; Keep references to TransactionConfidence objects for transactions that were announced by a remote peer, but
    ;; which we haven't downloaded yet.  These objects are de-duplicated by the TxConfidenceTable class.
    ;; Once the tx is downloaded (by some peer), the Transaction object that is created will have a reference to
    ;; the confidence object held inside it, and it's then up to the event listeners that receive the Transaction
    ;; to keep it pinned to the root set if they care about this data.
    #_suppress(§ opt "MismatchedQueryAndUpdateOfCollection")
    #_private
    (§ field- #_"HashSet<TransactionConfidence>" (§ name pendingTxDownloads) (§ new #_"HashSet<>"))
    ;; The lowest version number we're willing to accept.  Lower than this will result in an immediate disconnect.
    #_private
    #_volatile
    (§ field- #_"int" (§ name vMinProtocolVersion))
    ;; When an API user explicitly requests a block or transaction from a peer, the InventoryItem is put here
    ;; whilst waiting for the response.  Is not used for downloads Peer generates itself.
    #_private
    #_static
    (§ class #_"GetDataRequest"
        (§ field #_"Sha256Hash" (§ name hash))
        (§ field #_"SettableFuture" (§ name future))

        #_public
        (§ constructor #_"GetDataRequest" [#_"Sha256Hash" (§ name hash), #_"SettableFuture" (§ name future)])
        (§ block
            (§ ass (§ name (.. this hash)) hash)
            (§ ass (§ name (.. this future)) future)
            this
        )
    )
    ;; TODO: The types/locking should be rationalised a bit.
    #_private
    (§ field- #_"CopyOnWriteArrayList<GetDataRequest>" (§ name getDataFutures))
    #_guarded-by(§ opt "getAddrFutures")
    #_private
    (§ field- #_"LinkedList<SettableFuture<AddressMessage>>" (§ name getAddrFutures))

    #_private
    #_static
    (§ def- #_"int" (§ name PING_MOVING_AVERAGE_WINDOW) 20)

    ;; Outstanding pings against this peer and how long the last one took to complete.
    #_private
    (§ field- #_"ReentrantLock" (§ name lastPingTimesLock) (§ new #_"ReentrantLock"))
    #_guarded-by(§ opt "lastPingTimesLock")
    #_private
    (§ field- #_"long[]" (§ name lastPingTimes))
    #_private
    (§ field- #_"CopyOnWriteArrayList<PendingPing>" (§ name pendingPings))

    #_private
    #_volatile
    (§ field- #_"VersionMessage" (§ name vPeerVersionMessage))

    ;; A settable future which completes (with this) when the connection is open.
    #_private
    (§ field- #_"SettableFuture<Peer>" (§ name connectionOpenFuture) (SettableFuture/create))
    #_private
    (§ field- #_"SettableFuture<Peer>" (§ name outgoingVersionHandshakeFuture) (SettableFuture/create))
    #_private
    (§ field- #_"SettableFuture<Peer>" (§ name incomingVersionHandshakeFuture) (SettableFuture/create))
    #_private
    (§ field- #_"ListenableFuture<Peer>" (§ name versionHandshakeFuture) (Futures/transform (Futures/allAsList outgoingVersionHandshakeFuture, incomingVersionHandshakeFuture), (§ new #_"Function<List<Peer>, Peer>")
        (§ anon
            #_override
            #_nilable
            #_public
            (§ method #_"Peer" (§ fn apply) [#_nilable #_"List<Peer>" (§ name peers)])
            (§ block
                (Preconditions/checkNotNull peers)
                (Preconditions/checkState (§ expr (.. peers (size)) == 2 && (.. peers (get 0)) == (.. peers (get 1))))
                (.. peers (get 0))
            )
        )))

    ;;;
     ; <p>Construct a peer that reads/writes from the given block chain.</p>
     ;
     ; <p>Note that this does <b>NOT</b> make a connection to the given remoteAddress, it only creates a handler
     ; for a connection.  If you want to create a one-off connection, create a Peer and pass it to
     ; {@link org.bitcoinj.net.NioClientManager#openConnection(java.net.SocketAddress, StreamConnection)}
     ; or
     ; {@link org.bitcoinj.net.NioClient#NioClient(java.net.SocketAddress, StreamConnection, int)}.</p>
     ;
     ; <p>The remoteAddress provided should match the remote address of the peer which is being connected to,
     ; and is used to keep track of which peers relayed transactions and offer more descriptive logging.</p>
     ;;
    #_public
    (§ constructor #_"Peer" [#_"NetworkParameters" (§ name params), #_"VersionMessage" (§ name ver), #_nilable #_"AbstractBlockChain" (§ name chain), #_"PeerAddress" (§ name remoteAddress)])
    (§ block
        (§ this params, ver, remoteAddress, chain)
        this
    )

    ;;;
     ; <p>Construct a peer that reads/writes from the given block chain.  Transactions stored in a {@link org.bitcoinj.core.TxConfidenceTable}
     ; will have their confidence levels updated when a peer announces it, to reflect the greater likelyhood that
     ; the transaction is valid.</p>
     ;
     ; <p>Note that this does <b>NOT</b> make a connection to the given remoteAddress, it only creates a handler
     ; for a connection.  If you want to create a one-off connection, create a Peer and pass it to
     ; {@link org.bitcoinj.net.NioClientManager#openConnection(java.net.SocketAddress, StreamConnection)}
     ; or
     ; {@link org.bitcoinj.net.NioClient#NioClient(java.net.SocketAddress, StreamConnection, int)}.</p>
     ;
     ; <p>The remoteAddress provided should match the remote address of the peer which is being connected to,
     ; and is used to keep track of which peers relayed transactions and offer more descriptive logging.</p>
     ;;
    #_public
    (§ constructor #_"Peer" [#_"NetworkParameters" (§ name params), #_"VersionMessage" (§ name ver), #_"PeerAddress" (§ name remoteAddress), #_nilable #_"AbstractBlockChain" (§ name chain)])
    (§ block
        (§ this params, ver, remoteAddress, chain, Integer/MAX_VALUE)
        this
    )

    ;;;
     ; <p>Construct a peer that reads/writes from the given block chain.  Transactions stored in a {@link org.bitcoinj.core.TxConfidenceTable}
     ; will have their confidence levels updated when a peer announces it, to reflect the greater likelyhood that
     ; the transaction is valid.</p>
     ;
     ; <p>Note that this does <b>NOT</b> make a connection to the given remoteAddress, it only creates a handler
     ; for a connection.  If you want to create a one-off connection, create a Peer and pass it to
     ; {@link org.bitcoinj.net.NioClientManager#openConnection(java.net.SocketAddress, StreamConnection)}
     ; or
     ; {@link org.bitcoinj.net.NioClient#NioClient(java.net.SocketAddress, StreamConnection, int)}.</p>
     ;
     ; <p>The remoteAddress provided should match the remote address of the peer which is being connected to,
     ; and is used to keep track of which peers relayed transactions and offer more descriptive logging.</p>
     ;;
    #_public
    (§ constructor #_"Peer" [#_"NetworkParameters" (§ name params), #_"VersionMessage" (§ name ver), #_"PeerAddress" (§ name remoteAddress), #_nilable #_"AbstractBlockChain" (§ name chain), #_"int" (§ name downloadTxDependencyDepth)])
    (§ block
        (§ super params, remoteAddress)

        (§ ass (§ name (.. this params)) (Preconditions/checkNotNull params))
        (§ ass (§ name (.. this versionMessage)) (Preconditions/checkNotNull ver))
        (§ ass (§ name (.. this vDownloadTxDependencyDepth)) (if (some? chain) downloadTxDependencyDepth 0))
        (§ ass (§ name (.. this blockChain)) chain) ;; Allowed to be nil.
        (§ ass (§ name (.. this vDownloadData)) (some? chain))
        (§ ass (§ name (.. this getDataFutures)) (§ new #_"CopyOnWriteArrayList<>"))
        (§ ass (§ name (.. this getAddrFutures)) (§ new #_"LinkedList<>"))
        (§ ass (§ name (.. this fastCatchupTimeSecs)) (.. params (getGenesisBlock) (getTimeSeconds)))
        (§ ass (§ name (.. this pendingPings)) (§ new #_"CopyOnWriteArrayList<>"))
        (§ ass (§ name (.. this vMinProtocolVersion)) (.. params (getProtocolVersionNum NetworkParameters/ProtocolVersion/PONG)))
        (§ ass (§ name (.. this wallets)) (§ new #_"CopyOnWriteArrayList<>"))
        (§ ass (§ name (.. this context)) (Context/get))

        (.. this versionHandshakeFuture (addListener (§ new #_"Runnable")
        (§ anon
            #_override
            #_public
            (§ method #_"void" (§ fn run) [])
            (§ block
                (versionHandshakeComplete)
                nil
            )
        ), Threading/SAME_THREAD))
        this
    )

    ;;;
     ; <p>Construct a peer that reads/writes from the given chain.  Automatically creates a VersionMessage for you from
     ; the given software name/version strings, which should be something like "MySimpleTool", "1.0" and which will tell
     ; the remote node to relay transaction inv messages before it has received a filter.</p>
     ;
     ; <p>Note that this does <b>NOT</b> make a connection to the given remoteAddress, it only creates a handler
     ; for a connection. If you want to create a one-off connection, create a Peer and pass it to
     ; {@link org.bitcoinj.net.NioClientManager#openConnection(java.net.SocketAddress, StreamConnection)}
     ; or
     ; {@link org.bitcoinj.net.NioClient#NioClient(java.net.SocketAddress, StreamConnection, int)}.</p>
     ;
     ; <p>The remoteAddress provided should match the remote address of the peer which is being connected to,
     ; and is used to keep track of which peers relayed transactions and offer more descriptive logging.</p>
     ;;
    #_public
    (§ constructor #_"Peer" [#_"NetworkParameters" (§ name params), #_"AbstractBlockChain" (§ name blockChain), #_"PeerAddress" (§ name peerAddress), #_"String" (§ name thisSoftwareName), #_"String" (§ name thisSoftwareVersion)])
    (§ block
        (§ this params, (§ new #_"VersionMessage" params, (.. blockChain (getBestChainHeight))), blockChain, peerAddress)
        (.. this versionMessage (appendToSubVer thisSoftwareName, thisSoftwareVersion, nil))
        this
    )

    ;;; Registers a listener that is invoked when new blocks are downloaded. ;;
    #_public
    (§ method #_"void" (§ fn addBlocksDownloadedEventListener) [#_"BlocksDownloadedEventListener" (§ name listener)])
    (§ block
        (addBlocksDownloadedEventListener Threading/USER_THREAD, listener)
        nil
    )

    ;;; Registers a listener that is invoked when new blocks are downloaded. ;;
    #_public
    (§ method #_"void" (§ fn addBlocksDownloadedEventListener) [#_"Executor" (§ name executor), #_"BlocksDownloadedEventListener" (§ name listener)])
    (§ block
        (.. blocksDownloadedEventListeners (add (§ new #_"ListenerRegistration" listener, executor)))
        nil
    )

    ;;; Registers a listener that is invoked when a blockchain downloaded starts. ;;
    #_public
    (§ method #_"void" (§ fn addChainDownloadStartedEventListener) [#_"ChainDownloadStartedEventListener" (§ name listener)])
    (§ block
        (addChainDownloadStartedEventListener Threading/USER_THREAD, listener)
        nil
    )

    ;;; Registers a listener that is invoked when a blockchain downloaded starts. ;;
    #_public
    (§ method #_"void" (§ fn addChainDownloadStartedEventListener) [#_"Executor" (§ name executor), #_"ChainDownloadStartedEventListener" (§ name listener)])
    (§ block
        (.. chainDownloadStartedEventListeners (add (§ new #_"ListenerRegistration" listener, executor)))
        nil
    )

    ;;; Registers a listener that is invoked when a peer is connected. ;;
    #_public
    (§ method #_"void" (§ fn addConnectedEventListener) [#_"PeerConnectedEventListener" (§ name listener)])
    (§ block
        (addConnectedEventListener Threading/USER_THREAD, listener)
        nil
    )

    ;;; Registers a listener that is invoked when a peer is connected. ;;
    #_public
    (§ method #_"void" (§ fn addConnectedEventListener) [#_"Executor" (§ name executor), #_"PeerConnectedEventListener" (§ name listener)])
    (§ block
        (.. connectedEventListeners (add (§ new #_"ListenerRegistration" listener, executor)))
        nil
    )

    ;;; Registers a listener that is invoked when a peer is disconnected. ;;
    #_public
    (§ method #_"void" (§ fn addDisconnectedEventListener) [#_"PeerDisconnectedEventListener" (§ name listener)])
    (§ block
        (addDisconnectedEventListener Threading/USER_THREAD, listener)
        nil
    )

    ;;; Registers a listener that is invoked when a peer is disconnected. ;;
    #_public
    (§ method #_"void" (§ fn addDisconnectedEventListener) [#_"Executor" (§ name executor), #_"PeerDisconnectedEventListener" (§ name listener)])
    (§ block
        (.. disconnectedEventListeners (add (§ new #_"ListenerRegistration" listener, executor)))
        nil
    )

    ;;; Registers a listener that is called when messages are received. ;;
    #_public
    (§ method #_"void" (§ fn addGetDataEventListener) [#_"GetDataEventListener" (§ name listener)])
    (§ block
        (addGetDataEventListener Threading/USER_THREAD, listener)
        nil
    )

    ;;; Registers a listener that is called when messages are received. ;;
    #_public
    (§ method #_"void" (§ fn addGetDataEventListener) [#_"Executor" (§ name executor), #_"GetDataEventListener" (§ name listener)])
    (§ block
        (.. getDataEventListeners (add (§ new #_"ListenerRegistration<>" listener, executor)))
        nil
    )

    ;;; Registers a listener that is called when a transaction is broadcast across the network. ;;
    #_public
    (§ method #_"void" (§ fn addOnTransactionBroadcastListener) [#_"OnTransactionBroadcastListener" (§ name listener)])
    (§ block
        (addOnTransactionBroadcastListener Threading/USER_THREAD, listener)
        nil
    )

    ;;; Registers a listener that is called when a transaction is broadcast across the network. ;;
    #_public
    (§ method #_"void" (§ fn addOnTransactionBroadcastListener) [#_"Executor" (§ name executor), #_"OnTransactionBroadcastListener" (§ name listener)])
    (§ block
        (.. onTransactionEventListeners (add (§ new #_"ListenerRegistration<>" listener, executor)))
        nil
    )

    ;;; Registers a listener that is called immediately before a message is received. ;;
    #_public
    (§ method #_"void" (§ fn addPreMessageReceivedEventListener) [#_"PreMessageReceivedEventListener" (§ name listener)])
    (§ block
        (addPreMessageReceivedEventListener Threading/USER_THREAD, listener)
        nil
    )

    ;;; Registers a listener that is called immediately before a message is received. ;;
    #_public
    (§ method #_"void" (§ fn addPreMessageReceivedEventListener) [#_"Executor" (§ name executor), #_"PreMessageReceivedEventListener" (§ name listener)])
    (§ block
        (.. preMessageReceivedEventListeners (add (§ new #_"ListenerRegistration<>" listener, executor)))
        nil
    )

    #_public
    (§ method #_"boolean" (§ fn removeBlocksDownloadedEventListener) [#_"BlocksDownloadedEventListener" (§ name listener)])
    (§ block
        (ListenerRegistration/removeFromList listener, blocksDownloadedEventListeners)
    )

    #_public
    (§ method #_"boolean" (§ fn removeChainDownloadStartedEventListener) [#_"ChainDownloadStartedEventListener" (§ name listener)])
    (§ block
        (ListenerRegistration/removeFromList listener, chainDownloadStartedEventListeners)
    )

    #_public
    (§ method #_"boolean" (§ fn removeConnectedEventListener) [#_"PeerConnectedEventListener" (§ name listener)])
    (§ block
        (ListenerRegistration/removeFromList listener, connectedEventListeners)
    )

    #_public
    (§ method #_"boolean" (§ fn removeDisconnectedEventListener) [#_"PeerDisconnectedEventListener" (§ name listener)])
    (§ block
        (ListenerRegistration/removeFromList listener, disconnectedEventListeners)
    )

    #_public
    (§ method #_"boolean" (§ fn removeGetDataEventListener) [#_"GetDataEventListener" (§ name listener)])
    (§ block
        (ListenerRegistration/removeFromList listener, getDataEventListeners)
    )

    #_public
    (§ method #_"boolean" (§ fn removeOnTransactionBroadcastListener) [#_"OnTransactionBroadcastListener" (§ name listener)])
    (§ block
        (ListenerRegistration/removeFromList listener, onTransactionEventListeners)
    )

    #_public
    (§ method #_"boolean" (§ fn removePreMessageReceivedEventListener) [#_"PreMessageReceivedEventListener" (§ name listener)])
    (§ block
        (ListenerRegistration/removeFromList listener, preMessageReceivedEventListeners)
    )

    #_override
    #_public
    (§ method #_"String" (§ fn toString) [])
    (§ block
        (§ var #_"PeerAddress" (§ name addr) (getAddress))
        ;; if null, it's a user-provided NetworkConnection object
        (if (some? addr) (.. addr (toString)) "Peer()")
    )

    #_override
    #_protected
    (§ method #_"void" (§ fn timeoutOccurred) [])
    (§ block
        (.. super (timeoutOccurred))

        (§ if (§ not (.. connectionOpenFuture (isDone))))
        (§ block
            ;; Invoke the event handlers to tell listeners e.g. PeerGroup that we never managed to connect.
            (connectionClosed)
        )
        nil
    )

    #_override
    #_public
    (§ method #_"void" (§ fn connectionClosed) [])
    (§ block
        (§ for (§ var ListenerRegistration<PeerDisconnectedEventListener> registration) :for disconnectedEventListeners)
        (§ block
            (.. registration executor (execute (§ new #_"Runnable")
            (§ anon
                #_override
                #_public
                (§ method #_"void" (§ fn run) [])
                (§ block
                    (.. registration listener (onPeerDisconnected (§ dhis Peer), 0))
                    nil
                )
            )))
        )
        nil
    )

    #_override
    #_public
    (§ method #_"void" (§ fn connectionOpened) [])
    (§ block
        ;; Announce ourselves.  This has to come first to connect to clients beyond v0.3.20.2 which wait to hear
        ;; from us until they send their version message back.
        (§ var #_"PeerAddress" (§ name address) (getAddress))
        (.. log (info "Announcing to {} as: {}", (if (some? address) (.. address (toSocketAddress)) "Peer"), (.. versionMessage subVer)))
        (sendMessage versionMessage)
        (.. connectionOpenFuture (set this))
        ;; When connecting, the remote peer sends us a version message with various bits of
        ;; useful data in it.  We need to know the peer protocol version before we can talk to it.
        nil
    )

    ;;;
     ; Provides a ListenableFuture that can be used to wait for the socket to connect.  A socket connection does not
     ; mean that protocol handshake has occurred.
     ;;
    #_public
    (§ method #_"ListenableFuture<Peer>" (§ fn getConnectionOpenFuture) [])
    (§ block
        connectionOpenFuture
    )

    #_public
    (§ method #_"ListenableFuture<Peer>" (§ fn getVersionHandshakeFuture) [])
    (§ block
        versionHandshakeFuture
    )

    #_override
    #_protected
    (§ method #_"void" (§ fn processMessage) [#_"Message" (§ name m)])
        (§ throws #_"Exception")
    (§ block
        ;; Allow event listeners to filter the message stream.  Listeners are allowed to drop messages by returning null.
        (§ for (§ var #_"ListenerRegistration<PreMessageReceivedEventListener>" (§ name registration)) :for preMessageReceivedEventListeners)
        (§ block
            ;; Skip any listeners that are supposed to run in another thread as we don't want to block waiting for it,
            ;; which might cause circular deadlock.
            (§ if (== (.. registration executor) Threading/SAME_THREAD))
            (§ block
                (§ ass (§ name m) (.. registration listener (onPreMessageReceived this, m)))
                (§ if (nil? m))
                (§ block
                    (§ break )
                )
            )
        )
        (§ if (nil? m))
        (§ block
            (§ return nil)
        )

        ;; If we are in the middle of receiving transactions as part of a filtered block push from the remote node,
        ;; and we receive something that's not a transaction, then we're done.
        (§ if (§ expr currentFilteredBlock != nil && (§ not (§ insta m #_"Transaction"))))
        (§ block
            (endFilteredBlock currentFilteredBlock)
            (§ ass (§ name currentFilteredBlock) nil)
        )

        ;; No further communication is possible until version handshake is complete.
        (§ if (§ not (§ expr (§ insta m #_"VersionMessage") || (§ insta m #_"VersionAck") || (§ expr (.. versionHandshakeFuture (isDone)) && (§ not (.. versionHandshakeFuture (isCancelled)))))))
        (§ block
            (§ throw (§ new #_"ProtocolException" (§ expr "Received " + (.. m (getClass) (getSimpleName)) + " before version handshake is complete.")))
        )

        (§ if (§ insta m #_"Ping"))
        (§ block
            (processPing (§ cast #_"Ping" m))
        )
        (§ elseif (§ insta m #_"Pong"))
        (§ block
            (processPong (§ cast #_"Pong" m))
        )
        (§ elseif (§ insta m #_"NotFoundMessage"))
        (§ block
            ;; This is sent to us when we did a getdata on some transactions that aren't in the peers memory pool.
            ;; Because NotFoundMessage is a subclass of InventoryMessage, the test for it must come before the next.
            (processNotFoundMessage (§ cast #_"NotFoundMessage" m))
        )
        (§ elseif (§ insta m #_"InventoryMessage"))
        (§ block
            (processInv (§ cast #_"InventoryMessage" m))
        )
        (§ elseif (§ insta m #_"Block"))
        (§ block
            (processBlock (§ cast #_"Block" m))
        )
        (§ elseif (§ insta m #_"FilteredBlock"))
        (§ block
            (startFilteredBlock (§ cast #_"FilteredBlock" m))
        )
        (§ elseif (§ insta m #_"Transaction"))
        (§ block
            (processTransaction (§ cast #_"Transaction" m))
        )
        (§ elseif (§ insta m #_"GetDataMessage"))
        (§ block
            (processGetData (§ cast #_"GetDataMessage" m))
        )
        (§ elseif (§ insta m #_"AddressMessage"))
        (§ block
            ;; We don't care about addresses of the network right now.  But in future,
            ;; we should save them in the wallet so we don't put too much load on the seed nodes and can
            ;; properly explore the network.
            (processAddressMessage (§ cast #_"AddressMessage" m))
        )
        (§ elseif (§ insta m #_"HeadersMessage"))
        (§ block
            (processHeaders (§ cast #_"HeadersMessage" m))
        )
        (§ elseif (§ insta m #_"AlertMessage"))
        (§ block
            (processAlert (§ cast #_"AlertMessage" m))
        )
        (§ elseif (§ insta m #_"VersionMessage"))
        (§ block
            (processVersionMessage (§ cast #_"VersionMessage" m))
        )
        (§ elseif (§ insta m #_"VersionAck"))
        (§ block
            (processVersionAck (§ cast #_"VersionAck" m))
        )
        (§ elseif (§ insta m #_"RejectMessage"))
        (§ block
            (.. log (error "{} {}: Received {}", this, (§ expr (.. (getPeerVersionMessage) subVer)), m))
        )
        (§ else )
        (§ block
            (.. log (warn "{}: Received unhandled message: {}", this, m))
        )
        nil
    )

    #_private
    (§ method- #_"void" (§ fn processAddressMessage) [#_"AddressMessage" (§ name m)])
    (§ block
        (§ var #_"SettableFuture<AddressMessage>" (§ name future))
        (§ sync getAddrFutures)
        (§ block
            (§ ass (§ name future) (.. getAddrFutures (poll)))
            (§ if (nil? future)) ;; Not an addr message we are waiting for.
            (§ block
                (§ return nil)
            )
        )
        (.. future (set m))
        nil
    )

    #_private
    (§ method- #_"void" (§ fn processVersionMessage) [#_"VersionMessage" (§ name m)])
        (§ throws #_"ProtocolException")
    (§ block
        (§ if (some? vPeerVersionMessage))
        (§ block
            (§ throw (§ new #_"ProtocolException" "Got two version messages from peer"))
        )

        (§ ass (§ name vPeerVersionMessage) m)
        ;; Switch to the new protocol version.
        (§ var #_"long" (§ name peerTime) (* (.. vPeerVersionMessage time) 1000))
        (.. log (info "{}: Got version={}, subVer='{}', services=0x{}, time={}, blocks={}", this, (.. vPeerVersionMessage clientVersion), (.. vPeerVersionMessage subVer), (.. vPeerVersionMessage localServices), (String/format Locale/US, "%tF %tT", peerTime, peerTime), (.. vPeerVersionMessage bestHeight)))
        ;; bitcoinj is a client mode implementation.  That means there's not much point in us talking to other client
        ;; mode nodes because we can't download the data from them we need to find/verify transactions.  Some bogus
        ;; implementations claim to have a block chain in their services field but then report a height of zero, filter
        ;; them out here.
        (§ if (§ expr (§ not (.. vPeerVersionMessage (hasBlockChain))) || (§ expr (§ not (.. params (allowEmptyPeerChain))) && (.. vPeerVersionMessage bestHeight) == 0)))
        (§ block
            ;; Shut down the channel gracefully.
            (.. log (info "{}: Peer does not have a copy of the block chain.", this))
            (close)
            (§ return nil)
        )

        (§ if (< (.. vPeerVersionMessage bestHeight) 0))
        (§ block
            ;; In this case, it's a protocol violation.
            (§ throw (§ new #_"ProtocolException" (§ expr "Peer reports invalid best height: " + (.. vPeerVersionMessage bestHeight))))
        )
        ;; Now it's our turn ...
        ;; Send an ACK message stating we accept the peers protocol version.
        (sendMessage (§ new #_"VersionAck"))
        (.. log (debug "{}: Incoming version handshake complete.", this))
        (.. incomingVersionHandshakeFuture (set this))
        nil
    )

    #_private
    (§ method- #_"void" (§ fn processVersionAck) [#_"VersionAck" (§ name m)])
        (§ throws #_"ProtocolException")
    (§ block
        (§ if (nil? vPeerVersionMessage))
        (§ block
            (§ throw (§ new #_"ProtocolException" "got a version ack before version"))
        )

        (§ if (.. outgoingVersionHandshakeFuture (isDone)))
        (§ block
            (§ throw (§ new #_"ProtocolException" "got more than one version ack"))
        )

        (.. log (debug "{}: Outgoing version handshake complete.", this))
        (.. outgoingVersionHandshakeFuture (set this))
        nil
    )

    #_private
    (§ method- #_"void" (§ fn versionHandshakeComplete) [])
    (§ block
        (.. log (debug "{}: Handshake complete.", this))
        (setTimeoutEnabled false)
        (§ for (§ var ListenerRegistration<PeerConnectedEventListener> registration) :for connectedEventListeners)
        (§ block
            (.. registration executor (execute (§ new #_"Runnable")
            (§ anon
                #_override
                #_public
                (§ method #_"void" (§ fn run) [])
                (§ block
                    (.. registration listener (onPeerConnected (§ dhis Peer), 1))
                    nil
                )
            )))
        )
        ;; We check min version after onPeerConnected as channel.close() will
        ;; call onPeerDisconnected, and we should probably call onPeerConnected first.
        (§ var #_"int" (§ name version) vMinProtocolVersion)
        (§ if (< (.. vPeerVersionMessage clientVersion) version))
        (§ block
            (.. log (warn "Connected to a peer speaking protocol version {} but need {}, closing", (.. vPeerVersionMessage clientVersion), version))
            (close)
        )
        nil
    )

    #_protected
    (§ method #_"void" (§ fn startFilteredBlock) [#_"FilteredBlock" (§ name m)])
    (§ block
        ;; Filtered blocks come before the data that they refer to, so stash it here and then fill it out as
        ;; messages stream in.  We'll call endFilteredBlock when a non-tx message arrives (e.g. another
        ;; FilteredBlock) or when a tx that isn't needed by that block is found.  A ping message is sent after
        ;; a getblocks, to force the non-tx message path.
        (§ ass (§ name currentFilteredBlock) m)
        ;; Potentially refresh the server side filter.  Because the remote node adds hits back into the filter
        ;; to save round-tripping back through us, the filter degrades over time as false positives get added,
        ;; triggering yet more false positives.  We refresh it every so often to get the FP rate back down.
        (§ ass (§ name filteredBlocksReceived) (+ filteredBlocksReceived 1))
        (§ if (§ expr filteredBlocksReceived % RESEND_BLOOM_FILTER_BLOCK_COUNT == RESEND_BLOOM_FILTER_BLOCK_COUNT - 1))
        (§ block
            (sendMessage vBloomFilter)
        )
        nil
    )

    #_protected
    (§ method #_"void" (§ fn processNotFoundMessage) [#_"NotFoundMessage" (§ name m)])
    (§ block
        ;; This is received when we previously did a getdata but the peer couldn't find what we requested in it's
        ;; memory pool.  Typically, because we are downloading dependencies of a relevant transaction and reached
        ;; the bottom of the dependency tree (where the unconfirmed transactions connect to transactions that are
        ;; in the chain).
        ;;
        ;; We go through and cancel the pending getdata futures for the items we were told weren't found.
        (§ for (§ var #_"GetDataRequest" (§ name req)) :for getDataFutures)
        (§ block
            (§ for (§ var #_"InventoryItem" (§ name item)) :for (.. m (getItems)))
            (§ block
                (§ if (.. item hash (equals (.. req hash))))
                (§ block
                    (.. log (info "{}: Bottomed out dep tree at {}", this, (.. req hash)))
                    (.. req future (cancel true))
                    (.. getDataFutures (remove req))
                    (§ break )
                )
            )
        )
        nil
    )

    #_protected
    (§ method #_"void" (§ fn processAlert) [#_"AlertMessage" (§ name m)])
    (§ block
        (§ try )
        (§ block
            (§ if (.. m (isSignatureValid)))
            (§ block
                (.. log (info "Received alert from peer {}: {}", this, (.. m (getStatusBar))))
            )
            (§ else )
            (§ block
                (.. log (warn "Received alert with invalid signature from peer {}: {}", this, (.. m (getStatusBar))))
            )
        )
        (§ catch #_"Throwable" (§ name t))
        (§ block
            ;; Signature checking can FAIL on Android platforms before Gingerbread apparently due to bugs in their
            ;; BigInteger implementations!  See https://github.com/bitcoinj/bitcoinj/issues/526 for discussion.
            ;; As alerts are just optional and not that useful, we just swallow the error here.
            (.. log (error "Failed to check signature: bug in platform libraries?", t))
        )
        nil
    )

    #_protected
    (§ method #_"void" (§ fn processHeaders) [#_"HeadersMessage" (§ name m)])
        (§ throws #_"ProtocolException")
    (§ block
        ;; Runs in network loop thread for this peer.
        ;;
        ;; This method can run if a peer just randomly sends us a "headers" message (should never happen), or more
        ;; likely when we've requested them as part of chain download using fast catchup.  We need to add each block to
        ;; the chain if it pre-dates the fast catchup time.  If we go past it, we can stop processing the headers and
        ;; request the full blocks from that point on instead.
        (§ var #_"boolean" (§ name downloadBlockBodies))
        (§ var #_"long" (§ name fastCatchupTimeSecs))

        (.. lock (lock))
        (§ try )
        (§ block
            (§ if (nil? blockChain))
            (§ block
                ;; Can happen if we are receiving unrequested data, or due to programmer error.
                (.. log (warn "Received headers when Peer is not configured with a chain."))
                (§ return nil)
            )
            (§ ass (§ name fastCatchupTimeSecs) (.. this fastCatchupTimeSecs))
            (§ ass (§ name downloadBlockBodies) (.. this downloadBlockBodies))
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )

        (§ try )
        (§ block
            (Preconditions/checkState (§ not downloadBlockBodies), (toString))

            (§ for (§ var #_"int" (§ name i) 0) :for (§ expr i < (.. m (getBlockHeaders) (size))) :for (§ ass (§ name i) (+ i 1)))
            (§ block
                (§ var #_"Block" (§ name header) (.. m (getBlockHeaders) (get i)))
                ;; Process headers until we pass the fast catchup time, or are about to catch up with the head
                ;; of the chain - always process the last block as a full/filtered block to kick us out of the
                ;; fast catchup mode (in which we ignore new blocks).
                (§ var #_"boolean" (§ name passedTime) (§ expr fastCatchupTimeSecs <= (.. header (getTimeSeconds))))
                (§ var #_"boolean" (§ name reachedTop) (<= (.. vPeerVersionMessage bestHeight) (.. blockChain (getBestChainHeight))))
                (§ if (§ expr (§ not passedTime) && (§ not reachedTop)))
                (§ block
                    (§ if (§ not vDownloadData))
                    (§ block
                        ;; Not download peer anymore, some other peer probably became better.
                        (.. log (info "Lost download peer status, throwing away downloaded headers."))
                        (§ return nil)
                    )
                    (§ if (.. blockChain (add header)))
                    (§ block
                        ;; The block was successfully linked into the chain. Notify the user of our progress.
                        (invokeOnBlocksDownloaded header, nil)
                    )
                    (§ else )
                    (§ block
                        ;; This block is unconnected - we don't know how to get from it back to the genesis block yet.
                        ;; That must mean that the peer is buggy or malicious because we specifically requested for
                        ;; headers that are part of the best chain.
                        (§ throw (§ new #_"ProtocolException" (§ expr "Got unconnected header from peer: " + (.. header (getHashAsString)))))
                    )
                )
                (§ else )
                (§ block
                    (.. lock (lock))
                    (§ try )
                    (§ block
                        (.. log (info "Passed the fast catchup time ({}) at height {}, discarding {} headers and requesting full blocks", (Utils/dateTimeFormat (* fastCatchupTimeSecs 1000)), (+ (.. blockChain (getBestChainHeight)) 1), (- (.. m (getBlockHeaders) (size)) i)))
                        (§ ass (§ name (.. this downloadBlockBodies)) true)
                        ;; Prevent this request being seen as a duplicate.
                        (§ ass (§ name (.. this lastGetBlocksBegin)) Sha256Hash/ZERO_HASH)
                        (blockChainDownloadLocked Sha256Hash/ZERO_HASH)
                    )
                    (§ finally )
                    (§ block
                        (.. lock (unlock))
                    )
                    (§ return nil)
                )
            )
            ;; We added all headers in the message to the chain.
            ;; Request some more if we got up to the limit, otherwise we are at the end of the chain.
            (§ if (§ expr HeadersMessage/MAX_HEADERS <= (.. m (getBlockHeaders) (size))))
            (§ block
                (.. lock (lock))
                (§ try )
                (§ block
                    (blockChainDownloadLocked Sha256Hash/ZERO_HASH)
                )
                (§ finally )
                (§ block
                    (.. lock (unlock))
                )
            )
        )
        (§ catch #_"VerificationException" (§ name e))
        (§ block
            (.. log (warn "Block header verification failed", e))
        )
        (§ catch #_"PrunedException" (§ name e))
        (§ block
            ;; Unreachable when in SPV mode.
            (§ throw (§ new #_"RuntimeException" e))
        )
        nil
    )

    #_protected
    (§ method #_"void" (§ fn processGetData) [#_"GetDataMessage" (§ name getdata)])
    (§ block
        (.. log (info "{}: Received getdata message: {}", (getAddress), (.. getdata (toString))))
        (§ var #_"ArrayList<Message>" (§ name items) (§ new #_"ArrayList<>"))
        (§ for (§ var #_"ListenerRegistration<GetDataEventListener>" (§ name registration)) :for getDataEventListeners)
        (§ block
            (§ if (!= (.. registration executor) Threading/SAME_THREAD))
            (§ block
                (§ continue )
            )
            (§ var #_"List<Message>" (§ name listenerItems) (.. registration listener (getData this, getdata)))
            (§ if (nil? listenerItems))
            (§ block
                (§ continue )
            )
            (.. items (addAll listenerItems))
        )
        (§ if (§ not (.. items (isEmpty))))
        (§ block
            (.. log (info "{}: Sending {} items gathered from listeners to peer", (getAddress), (.. items (size))))
            (§ for (§ var #_"Message" (§ name item)) :for items)
            (§ block
                (sendMessage item)
            )
        )
        nil
    )

    #_protected
    (§ method #_"void" (§ fn processTransaction) [#_"Transaction" (§ name tx)])
        (§ throws #_"VerificationException")
    (§ block
        ;; Check a few basic syntax issues to ensure the received TX isn't nonsense.
        (.. tx (verify))
        (.. lock (lock))
        (§ try )
        (§ block
            (.. log (debug "{}: Received tx {}", (getAddress), (.. tx (getHashAsString))))
            ;; Label the transaction as coming in from the P2P network (as opposed to being created by us, direct import,
            ;; etc).  This helps the wallet decide how to risk analyze it later.
            ;;
            ;; Additionally, by invoking tx.getConfidence(), this tx now pins the confidence data into the heap, meaning
            ;; we can stop holding a reference to the confidence object ourselves.  It's up to event listeners on the
            ;; Peer to stash the tx object somewhere if they want to keep receiving updates about network propagation
            ;; and so on.
            (§ var #_"TransactionConfidence" (§ name confidence) (.. tx (getConfidence)))
            (.. confidence (setSource TransactionConfidence/Source/NETWORK))
            (.. pendingTxDownloads (remove confidence))
            (§ if (maybeHandleRequestedData tx))
            (§ block
                (§ return nil)
            )

            (§ if (some? currentFilteredBlock))
            (§ block
                (§ if (§ not (.. currentFilteredBlock (provideTransaction tx))))
                (§ block
                    ;; Got a tx that didn't fit into the filtered block, so we must have received everything.
                    (endFilteredBlock currentFilteredBlock)
                    (§ ass (§ name currentFilteredBlock) nil)
                )
                ;; Don't tell wallets or listeners about this tx as they'll learn about it when the filtered block is
                ;; fully downloaded instead.
                (§ return nil)
            )

            ;; It's a broadcast transaction.  Tell all wallets about this tx so they can check if it's relevant or not.
            (§ for (§ var Wallet wallet) :for wallets)
            (§ block
                (§ try )
                (§ block
                    (§ if (.. wallet (isPendingTransactionRelevant tx)))
                    (§ block
                        (§ if (< 0 vDownloadTxDependencyDepth))
                        (§ block
                            ;; This transaction seems interesting to us, so let's download its dependencies.  This has
                            ;; several purposes: we can check that the sender isn't attacking us by engaging in protocol
                            ;; abuse games, like depending on a time-locked transaction that will never confirm, or
                            ;; building huge chains of unconfirmed transactions (again - so they don't confirm and the
                            ;; money can be taken back with a Finney attack).  Knowing the dependencies also lets us
                            ;; store them in a serialized wallet so we always have enough data to re-announce to the
                            ;; network and get the payment into the chain, in case the sender goes away and the network
                            ;; starts to forget.
                            ;;
                            ;; TODO: Not all the above things are implemented.
                            ;;
                            ;; Note that downloading of dependencies can end up walking around 15 minutes back even
                            ;; through transactions that have confirmed, as getdata on the remote peer also checks
                            ;; relay memory not only the mempool.  Unfortunately we have no way to know that here.
                            ;; In practice it should not matter much.
                            (Futures/addCallback (downloadDependencies tx), (§ new #_"FutureCallback<List<Transaction>>")
                            (§ anon
                                #_override
                                #_public
                                (§ method #_"void" (§ fn onSuccess) [#_"List<Transaction>" (§ name dependencies)])
                                (§ block
                                    (§ try )
                                    (§ block
                                        (.. log (info "{}: Dependency download complete!", (getAddress)))
                                        (.. wallet (receivePending tx, dependencies))
                                    )
                                    (§ catch #_"VerificationException" (§ name e))
                                    (§ block
                                        (.. log (error "{}: Wallet failed to process pending transaction {}", (getAddress), (.. tx (getHash))))
                                        (.. log (error "Error was: ", e))
                                        ;; Not much more we can do at this point.
                                    )
                                    nil
                                )

                                #_override
                                #_public
                                (§ method #_"void" (§ fn onFailure) [#_"Throwable" (§ name throwable)])
                                (§ block
                                    (.. log (error "Could not download dependencies of tx {}", (.. tx (getHashAsString))))
                                    (.. log (error "Error was: ", throwable))
                                    ;; Not much more we can do at this point.
                                    nil
                                )
                            ))
                        )
                        (§ else )
                        (§ block
                            (.. wallet (receivePending tx, nil))
                        )
                    )
                )
                (§ catch #_"VerificationException" (§ name e))
                (§ block
                    (.. log (error "Wallet failed to verify tx", e))
                    ;; Carry on, listeners may still want to know.
                )
            )
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
        ;; Tell all listeners about this tx so they can decide whether to keep it or not.  If no listener keeps a
        ;; reference around then the memory pool will forget about it after a while too because it uses weak references.
        (§ for (§ var ListenerRegistration<OnTransactionBroadcastListener> registration) :for onTransactionEventListeners)
        (§ block
            (.. registration executor (execute (§ new #_"Runnable")
            (§ anon
                #_override
                #_public
                (§ method #_"void" (§ fn run) [])
                (§ block
                    (.. registration listener (onTransaction (§ dhis Peer), tx))
                    nil
                )
            )))
        )
        nil
    )

    ;;;
     ; <p>Returns a future that wraps a list of all transactions that the given transaction depends on, recursively.
     ; Only transactions in peers memory pools are included; the recursion stops at transactions that are in the
     ; current best chain.  So it doesn't make much sense to provide a tx that was already in the best chain and
     ; a precondition checks this.</p>
     ;
     ; <p>For example, if tx has 2 inputs that connect to transactions A and B, and transaction B is unconfirmed and
     ; has one input connecting to transaction C that is unconfirmed, and transaction C connects to transaction D
     ; that is in the chain, then this method will return either {B, C} or {C, B}.  No ordering is guaranteed.</p>
     ;
     ; <p>This method is useful for apps that want to learn about how long an unconfirmed transaction might take
     ; to confirm, by checking for unexpectedly time locked transactions, unusually deep dependency trees or fee-paying
     ; transactions that depend on unconfirmed free transactions.</p>
     ;
     ; <p>Note that dependencies downloaded this way will not trigger the onTransaction method of event listeners.</p>
     ;;
    #_public
    (§ method #_"ListenableFuture<List<Transaction>>" (§ fn downloadDependencies) [#_"Transaction" (§ name tx)])
    (§ block
        (§ var #_"TransactionConfidence.ConfidenceType" (§ name txConfidence) (.. tx (getConfidence) (getConfidenceType)))
        (Preconditions/checkArgument (§ expr txConfidence != TransactionConfidence/ConfidenceType/BUILDING))
        (.. log (info "{}: Downloading dependencies of {}", (getAddress), (.. tx (getHashAsString))))
        (§ var #_"LinkedList<Transaction>" (§ name results) (§ new #_"LinkedList<>"))
        ;; future will be invoked when the entire dependency tree has been walked and the results compiled.
        (§ var #_"ListenableFuture<Object>" (§ name future) (downloadDependenciesInternal vDownloadTxDependencyDepth, 0, tx, (§ new #_"Object"), results))
        (§ var #_"SettableFuture<List<Transaction>>" (§ name resultFuture) (SettableFuture/create))
        (Futures/addCallback future, (§ new #_"FutureCallback<Object>")
        (§ anon
            #_override
            #_public
            (§ method #_"void" (§ fn onSuccess) [#_"Object" (§ name ignored)])
            (§ block
                (.. resultFuture (set results))
                nil
            )

            #_override
            #_public
            (§ method #_"void" (§ fn onFailure) [#_"Throwable" (§ name throwable)])
            (§ block
                (.. resultFuture (setException throwable))
                nil
            )
        ))
        resultFuture
    )

    ;; The marker object in the future returned is the same as the parameter.  It is arbitrary and can be anything.
    #_protected
    (§ method #_"ListenableFuture<Object>" (§ fn downloadDependenciesInternal) [#_"int" (§ name maxDepth), #_"int" (§ name depth), #_"Transaction" (§ name tx), #_"Object" (§ name marker), #_"List<Transaction>" (§ name results)])
    (§ block
        (§ var #_"SettableFuture<Object>" (§ name resultFuture) (SettableFuture/create))
        (§ var #_"Sha256Hash" (§ name rootTxHash) (.. tx (getHash)))
        ;; We want to recursively grab its dependencies.  This is so listeners can learn important information like
        ;; whether a transaction is dependent on a timelocked transaction or has an unexpectedly deep dependency tree
        ;; or depends on a no-fee transaction.

        ;; We may end up requesting transactions that we've already downloaded and thrown away here.
        (§ var #_"Set<Sha256Hash>" (§ name needToRequest) (§ new #_"CopyOnWriteArraySet<>"))
        (§ for (§ var #_"TransactionInput" (§ name input)) :for (.. tx (getInputs)))
        (§ block
            ;; There may be multiple inputs that connect to the same transaction.
            (.. needToRequest (add (.. input (getOutpoint) (getHash))))
        )

        (.. lock (lock))
        (§ try )
        (§ block
            ;; Build the request for the missing dependencies.
            (§ var #_"List<ListenableFuture<Transaction>>" (§ name futures) (Lists/newArrayList))
            (§ var #_"GetDataMessage" (§ name getdata) (§ new #_"GetDataMessage" params))

            (§ if (§ expr 1 < (.. needToRequest (size))))
            (§ block
                (.. log (info "{}: Requesting {} transactions for depth {} dep resolution", (getAddress), (.. needToRequest (size)), (+ depth 1)))
            )

            (§ for (§ var #_"Sha256Hash" (§ name hash)) :for needToRequest)
            (§ block
                (.. getdata (addTransaction hash))
                (§ var #_"GetDataRequest" (§ name req) (§ new #_"GetDataRequest" hash, (SettableFuture/create)))
                (.. futures (add (.. req future)))
                (.. getDataFutures (add req))
            )

            (§ var #_"ListenableFuture<List<Transaction>>" (§ name successful) (Futures/successfulAsList futures))
            (Futures/addCallback successful, (§ new #_"FutureCallback<List<Transaction>>")
            (§ anon
                #_override
                #_public
                (§ method #_"void" (§ fn onSuccess) [#_"List<Transaction>" (§ name transactions)])
                (§ block
                    ;; Once all transactions either were received, or we know there are no more to come, ...
                    ;; Note that transactions will contain "null" for any positions that weren't successful.
                    (§ var #_"List<ListenableFuture<Object>>" (§ name childFutures) (Lists/newLinkedList))
                    (§ for (§ var #_"Transaction" (§ name tx)) :for transactions)
                    (§ block
                        (§ if (nil? tx))
                        (§ block
                            (§ continue )
                        )
                        (.. log (info "{}: Downloaded dependency of {}: {}", (getAddress), rootTxHash, (.. tx (getHashAsString))))
                        (.. results (add tx))
                        ;; Now recurse into the dependencies of this transaction too.
                        (§ if (§ expr depth + 1 < maxDepth))
                        (§ block
                            (.. childFutures (add (downloadDependenciesInternal maxDepth, (§ expr depth + 1), tx, marker, results)))
                        )
                    )
                    (§ if (== (.. childFutures (size)) 0))
                    (§ block
                        ;; Short-circuit: we're at the bottom of this part of the tree.
                        (.. resultFuture (set marker))
                    )
                    (§ else )
                    (§ block
                        ;; There are some children to download.  Wait until it's done (and their children, and their
                        ;; children, ...) to inform the caller that we're finished.
                        (Futures/addCallback (Futures/successfulAsList childFutures), (§ new #_"FutureCallback<List<Object>>")
                        (§ anon
                            #_override
                            #_public
                            (§ method #_"void" (§ fn onSuccess) [#_"List<Object>" (§ name objects)])
                            (§ block
                                (.. resultFuture (set marker))
                                nil
                            )

                            #_override
                            #_public
                            (§ method #_"void" (§ fn onFailure) [#_"Throwable" (§ name throwable)])
                            (§ block
                                (.. resultFuture (setException throwable))
                                nil
                            )
                        ))
                    )
                    nil
                )

                #_override
                #_public
                (§ method #_"void" (§ fn onFailure) [#_"Throwable" (§ name throwable)])
                (§ block
                    (.. resultFuture (setException throwable))
                    nil
                )
            ))

            ;; Start the operation.
            (sendMessage getdata)
        )
        (§ catch #_"Exception" (§ name e))
        (§ block
            (.. log (error "{}: Couldn't send getdata in downloadDependencies({})", this, (.. tx (getHash)), e))
            (.. resultFuture (setException e))
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )

        resultFuture
    )

    #_protected
    (§ method #_"void" (§ fn processBlock) [#_"Block" (§ name m)])
    (§ block
        (§ if (.. log (isDebugEnabled)))
        (§ block
            (.. log (debug "{}: Received broadcast block {}", (getAddress), (.. m (getHashAsString))))
        )

        ;; Was this block requested by getBlock()?
        (§ if (maybeHandleRequestedData m))
        (§ block
            (§ return nil)
        )

        (§ if (nil? blockChain))
        (§ block
            (.. log (debug "Received block but was not configured with an AbstractBlockChain"))
            (§ return nil)
        )

        ;; Did we lose download peer status after requesting block data?
        (§ if (§ not vDownloadData))
        (§ block
            (.. log (debug "{}: Received block we did not ask for: {}", (getAddress), (.. m (getHashAsString))))
            (§ return nil)
        )

        (.. pendingBlockDownloads (remove (.. m (getHash))))

        (§ try )
        (§ block
            ;; Otherwise it's a block sent to us because the peer thought we needed it, so add it to the block chain.
            (§ if (.. blockChain (add m)))
            (§ block
                ;; The block was successfully linked into the chain.  Notify the user of our progress.
                (invokeOnBlocksDownloaded m, nil)
            )
            (§ else )
            (§ block
                ;; This block is an orphan - we don't know how to get from it back to the genesis block yet.  That
                ;; must mean that there are blocks we are missing, so do another getblocks with a new block locator
                ;; to ask the peer to send them to us.  This can happen during the initial block chain download where
                ;; the peer will only send us 500 at a time and then sends us the head block expecting us to request
                ;; the others.
                ;;
                ;; We must do two things here:
                ;; (1) Request from current top of chain to the oldest ancestor of the received block in the orphan set.
                ;; (2) Filter out duplicate getblock requests (done in blockChainDownloadLocked).
                ;;
                ;; The reason for (1) is that otherwise if new blocks were solved during the middle of chain download
                ;; we'd do a blockChainDownloadLocked() on the new best chain head, which would cause us to try and grab the
                ;; chain twice (or more!) on the same connection!  The block chain would filter out the duplicates but
                ;; only at a huge speed penalty.  By finding the orphan root we ensure every getblocks looks the same
                ;; no matter how many blocks are solved, and therefore that the (2) duplicate filtering can work.
                ;;
                ;; We only do this if we are not currently downloading headers.  If we are then we don't want to kick
                ;; off a request for lots more headers in parallel.
                (.. lock (lock))
                (§ try )
                (§ block
                    (§ if downloadBlockBodies)
                    (§ block
                        (§ var #_"Block" (§ name orphanRoot) (Preconditions/checkNotNull (.. blockChain (getOrphanRoot (.. m (getHash))))))
                        (blockChainDownloadLocked (.. orphanRoot (getHash)))
                    )
                    (§ else )
                    (§ block
                        (.. log (info "Did not start chain download on solved block due to in-flight header download."))
                    )
                )
                (§ finally )
                (§ block
                    (.. lock (unlock))
                )
            )
        )
        (§ catch #_"VerificationException" (§ name e))
        (§ block
            ;; We don't want verification failures to kill the thread.
            (.. log (warn "{}: Block verification failed", (getAddress), e))
        )
        (§ catch #_"PrunedException" (§ name e))
        (§ block
            ;; Unreachable when in SPV mode.
            (§ throw (§ new #_"RuntimeException" e))
        )
        nil
    )

    ;; TODO: Fix this duplication.
    #_protected
    (§ method #_"void" (§ fn endFilteredBlock) [#_"FilteredBlock" (§ name m)])
    (§ block
        (§ if (.. log (isDebugEnabled)))
        (§ block
            (.. log (debug "{}: Received broadcast filtered block {}", (getAddress), (.. m (getHash) (toString))))
        )

        (§ if (§ not vDownloadData))
        (§ block
            (.. log (debug "{}: Received block we did not ask for: {}", (getAddress), (.. m (getHash) (toString))))
            (§ return nil)
        )

        (§ if (nil? blockChain))
        (§ block
            (.. log (debug "Received filtered block but was not configured with an AbstractBlockChain"))
            (§ return nil)
        )

        ;; Note that we currently do nothing about peers which maliciously do not include transactions which
        ;; actually match our filter or which simply do not send us all the transactions we need: it can be fixed
        ;; by cross-checking peers against each other.
        (.. pendingBlockDownloads (remove (.. m (getBlockHeader) (getHash))))

        (§ try )
        (§ block
            ;; It's a block sent to us because the peer thought we needed it, so maybe add it to the block chain.
            ;; The FilteredBlock m here contains a list of hashes, and may contain Transaction objects for a subset
            ;; of the hashes (those that were sent to us by the remote peer).  Any hashes that haven't had a tx
            ;; provided in processTransaction are ones that were announced to us previously via an 'inv' so the
            ;; assumption is we have already downloaded them and either put them in the wallet, or threw them away
            ;; for being false positives.
            ;;
            ;; TODO: Fix the following protocol race.
            ;; It is possible for this code to go wrong such that we miss a confirmation.  If the remote peer announces
            ;; a relevant transaction via an 'inv' and then it immediately announces the block that confirms
            ;; the tx before we had a chance to download it+its dependencies and provide them to the wallet, then we
            ;; will add the block to the chain here without the tx being in the wallet and thus it will miss its
            ;; confirmation and become stuck forever.  The fix is to notice that there's a pending getdata for a tx
            ;; that appeared in this block and delay processing until it arrived ... it's complicated by the fact that
            ;; the data may be requested by a different peer to this one.

            ;; Ask each wallet attached to the peer/blockchain if this block exhausts the list of data items
            ;; (keys/addresses) that were used to calculate the previous filter.  If so, then it's possible this block
            ;; is only partial.  Check for discarding first so we don't check for exhaustion on blocks we already know
            ;; we're going to discard, otherwise redundant filters might end up being queued and calculated.
            (.. lock (lock))
            (§ try )
            (§ block
                (§ if (some? awaitingFreshFilter))
                (§ block
                    (.. log (info "Discarding block {} because we're still waiting for a fresh filter", (.. m (getHash))))
                    ;; We must record the hashes of blocks we discard because you cannot do getblocks twice on the same
                    ;; range of blocks and get an inv both times, due to the codepath in Bitcoin Core hitting
                    ;; CPeer::PushInventory() which checks CPeer::setInventoryKnown and thus deduplicates.
                    (.. awaitingFreshFilter (add (.. m (getHash))))
                    (§ return nil) ;; Chain download process is restarted via a call to setBloomFilter.
                )

                (§ if (checkForFilterExhaustion m))
                (§ block
                    ;; Yes, so we must abandon the attempt to process this block and any further blocks we receive,
                    ;; then wait for the Bloom filter to be recalculated, sent to this peer and for the peer to acknowledge
                    ;; that the new filter is now in use (which we have to simulate with a ping/pong), and then we can
                    ;; safely restart the chain download with the new filter that contains a new set of lookahead keys.
                    (.. log (info "Bloom filter exhausted whilst processing block {}, discarding", (.. m (getHash))))
                    (§ ass (§ name awaitingFreshFilter) (§ new #_"LinkedList<>"))
                    (.. awaitingFreshFilter (add (.. m (getHash))))
                    (.. awaitingFreshFilter (addAll (.. blockChain (drainOrphanBlocks))))
                    (§ return nil) ;; Chain download process is restarted via a call to setBloomFilter.
                )
            )
            (§ finally )
            (§ block
                (.. lock (unlock))
            )

            (§ if (.. blockChain (add m)))
            (§ block
                ;; The block was successfully linked into the chain.  Notify the user of our progress.
                (invokeOnBlocksDownloaded (.. m (getBlockHeader)), m)
            )
            (§ else )
            (§ block
                ;; This block is an orphan - we don't know how to get from it back to the genesis block yet.  That
                ;; must mean that there are blocks we are missing, so do another getblocks with a new block locator
                ;; to ask the peer to send them to us.  This can happen during the initial block chain download where
                ;; the peer will only send us 500 at a time and then sends us the head block expecting us to request
                ;; the others.
                ;;
                ;; We must do two things here:
                ;; (1) Request from current top of chain to the oldest ancestor of the received block in the orphan set.
                ;; (2) Filter out duplicate getblock requests (done in blockChainDownloadLocked).
                ;;
                ;; The reason for (1) is that otherwise if new blocks were solved during the middle of chain download
                ;; we'd do a blockChainDownloadLocked() on the new best chain head, which would cause us to try and grab the
                ;; chain twice (or more!) on the same connection!  The block chain would filter out the duplicates but
                ;; only at a huge speed penalty.  By finding the orphan root we ensure every getblocks looks the same
                ;; no matter how many blocks are solved, and therefore that the (2) duplicate filtering can work.
                (.. lock (lock))
                (§ try )
                (§ block
                    (§ var #_"Block" (§ name orphanRoot) (Preconditions/checkNotNull (.. blockChain (getOrphanRoot (.. m (getHash))))))
                    (blockChainDownloadLocked (.. orphanRoot (getHash)))
                )
                (§ finally )
                (§ block
                    (.. lock (unlock))
                )
            )
        )
        (§ catch #_"VerificationException" (§ name e))
        (§ block
            ;; We don't want verification failures to kill the thread.
            (.. log (warn "{}: FilteredBlock verification failed", (getAddress), e))
        )
        (§ catch #_"PrunedException" (§ name e))
        (§ block
            ;; We pruned away some of the data we need to properly handle this block.  We need to request the needed
            ;; data from the remote peer and fix things.  Or just give up.
            ;; TODO: Request e.getHash() and submit it to the block store before any other blocks.
            (§ throw (§ new #_"RuntimeException" e))
        )
        nil
    )

    #_private
    (§ method- #_"boolean" (§ fn checkForFilterExhaustion) [#_"FilteredBlock" (§ name m)])
    (§ block
        (§ var #_"boolean" (§ name exhausted) false)
        (§ for (§ var #_"Wallet" (§ name wallet)) :for wallets)
        (§ block
            (§ ass (§ name exhausted) (§ expr exhausted | (.. wallet (checkForFilterExhaustion m))))
        )
        exhausted
    )

    #_private
    (§ method- #_"boolean" (§ fn maybeHandleRequestedData) [#_"Message" (§ name m)])
    (§ block
        (§ var #_"boolean" (§ name found) false)
        (§ var #_"Sha256Hash" (§ name hash) (.. m (getHash)))
        (§ for (§ var #_"GetDataRequest" (§ name req)) :for getDataFutures)
        (§ block
            (§ if (.. hash (equals (.. req hash))))
            (§ block
                (.. req future (set m))
                (.. getDataFutures (remove req))
                (§ ass (§ name found) true)
                ;; Keep going in case there are more.
            )
        )
        found
    )

    #_private
    (§ method- #_"void" (§ fn invokeOnBlocksDownloaded) [#_"Block" (§ name block), #_nilable #_"FilteredBlock" (§ name fb)])
    (§ block
        ;; It is possible for the peer block height difference to be negative when blocks have been solved and broadcast
        ;; since the time we first connected to the peer.  However, it's weird and unexpected to receive a callback
        ;; with negative "blocks left" in this case, so we clamp to zero so the API user doesn't have to think about it.
        (§ var #_"int" (§ name blocksLeft) (Math/max 0, (§ expr (§ cast #_"int" (.. vPeerVersionMessage bestHeight)) - (.. (Preconditions/checkNotNull blockChain) (getBestChainHeight)))))
        (§ for (§ var ListenerRegistration<BlocksDownloadedEventListener> registration) :for blocksDownloadedEventListeners)
        (§ block
            (.. registration executor (execute (§ new #_"Runnable")
            (§ anon
                #_override
                #_public
                (§ method #_"void" (§ fn run) [])
                (§ block
                    (.. registration listener (onBlocksDownloaded (§ dhis Peer), block, fb, blocksLeft))
                    nil
                )
            )))
        )
        nil
    )

    #_protected
    (§ method #_"void" (§ fn processInv) [#_"InventoryMessage" (§ name inv)])
    (§ block
        (§ var #_"List<InventoryItem>" (§ name items) (.. inv (getItems)))

        ;; Separate out the blocks and transactions, we'll handle them differently.
        (§ var #_"List<InventoryItem>" (§ name transactions) (§ new #_"LinkedList<>"))
        (§ var #_"List<InventoryItem>" (§ name blocks) (§ new #_"LinkedList<>"))

        (§ for (§ var #_"InventoryItem" (§ name item)) :for items)
        (§ block
            (§ switch (.. item type))
            (§ block
                (§ case Transaction)
                (§ block
                    (.. transactions (add item))
                    (§ break )
                )
                (§ case Block)
                (§ block
                    (.. blocks (add item))
                    (§ break )
                )
                (§ default )
                (§ block
                    (§ throw (§ new #_"IllegalStateException" (§ expr "Not implemented: " + (.. item type))))
                )
            )
        )

        (§ var #_"boolean" (§ name downloadData) (.. this vDownloadData))

        (§ if (§ expr (.. transactions (size)) == 0 && (.. blocks (size)) == 1))
        (§ block
            ;; Single block announcement.  If we're downloading the chain this is just a tickle to make us continue
            ;; (the block chain download protocol is very implicit and not well thought out).  If we're not downloading
            ;; the chain then this probably means a new block was solved and the peer believes it connects to the best
            ;; chain, so count it.  This way getBestChainHeight() can be accurate.
            (§ if (§ expr downloadData && blockChain != nil))
            (§ block
                (§ if (§ not (.. blockChain (isOrphan (.. blocks (get 0) hash)))))
                (§ block
                    (.. blocksAnnounced (incrementAndGet))
                )
            )
            (§ else )
            (§ block
                (.. blocksAnnounced (incrementAndGet))
            )
        )

        (§ var #_"GetDataMessage" (§ name getdata) (§ new #_"GetDataMessage" params))

        (§ var #_"Iterator<InventoryItem>" (§ name it) (.. transactions (iterator)))
        (§ while (.. it (hasNext)))
        (§ block
            (§ var #_"InventoryItem" (§ name item) (.. it (next)))
            ;; Only download the transaction if we are the first peer that saw it be advertised.  Other peers will also
            ;; see it be advertised in inv packets asynchronously, they co-ordinate via the memory pool.  We could
            ;; potentially download transactions faster by always asking every peer for a tx when advertised, as remote
            ;; peers run at different speeds.  However to conserve bandwidth on mobile devices we try to only download a
            ;; transaction once.  This means we can miss broadcasts if the peer disconnects between sending us an inv and
            ;; sending us the transaction: currently we'll never try to re-fetch after a timeout.
            ;;
            ;; The line below can trigger confidence listeners.
            (§ var #_"TransactionConfidence" (§ name conf) (.. context (getConfidenceTable) (seen (.. item hash), (.. this (getAddress)))))
            (§ if (§ expr 1 < (.. conf (numBroadcastPeers))))
            (§ block
                ;; Some other peer already announced this so don't download.
                (.. it (remove))
            )
            (§ elseif (.. conf (getSource) (equals TransactionConfidence/Source/SELF)))
            (§ block
                ;; We created this transaction ourselves, so don't download.
                (.. it (remove))
            )
            (§ else )
            (§ block
                (.. log (debug "{}: getdata on tx {}", (getAddress), (.. item hash)))
                (.. getdata (addItem item))
                ;; Register with the garbage collector that we care about the confidence data for a while.
                (.. pendingTxDownloads (add conf))
            )
        )

        ;; If we are requesting filteredblocks, we have to send a ping after the getdata so that we have a clear
        ;; end to the final FilteredBlock's transactions (in the form of a pong) sent to us.
        (§ var #_"boolean" (§ name pingAfterGetData) false)

        (.. lock (lock))
        (§ try )
        (§ block
            (§ if (§ expr 0 < (.. blocks (size)) && downloadData && blockChain != nil))
            (§ block
                ;; Ideally, we'd only ask for the data here if we actually needed it.  However that can imply a lot of
                ;; disk IO to figure out what we've got.  Normally peers will not send us inv for things we already have
                ;; so we just re-request it here, and if we get duplicates the block chain / wallet will filter them out.
                (§ for (§ var #_"InventoryItem" (§ name item)) :for blocks)
                (§ block
                    (§ if (§ expr (.. blockChain (isOrphan (.. item hash))) && downloadBlockBodies))
                    (§ block
                        ;; If an orphan was re-advertised, ask for more blocks unless we are not currently downloading
                        ;; full block data because we have a getheaders outstanding.
                        (§ var #_"Block" (§ name orphanRoot) (Preconditions/checkNotNull (.. blockChain (getOrphanRoot (.. item hash)))))
                        (blockChainDownloadLocked (.. orphanRoot (getHash)))
                    )
                    (§ else )
                    (§ block
                        ;; Don't re-request blocks we already requested.  Normally this should not happen.  However there is
                        ;; an edge case: if a block is solved and we complete the inv<->getdata<->block<->getblocks cycle
                        ;; whilst other parts of the chain are streaming in, then the new getblocks request won't match the
                        ;; previous one: whilst the stopHash is the same (because we use the orphan root), the start hash
                        ;; will be different and so the getblocks req won't be dropped as a duplicate.  We'll end up
                        ;; requesting a subset of what we already requested, which can lead to parallel chain downloads
                        ;; and other nastyness.  So we just do a quick removal of redundant getdatas here too.
                        ;;
                        ;; Note that as of June 2012 Bitcoin Core won't actually ever interleave blocks pushed as
                        ;; part of chain download with newly announced blocks, so it should always be taken care of by
                        ;; the duplicate check in blockChainDownloadLocked().  But Bitcoin Core may change in future so
                        ;; it's better to be safe here.
                        (§ if (§ not (.. pendingBlockDownloads (contains (.. item hash)))))
                        (§ block
                            (§ if (§ expr (.. vPeerVersionMessage (isBloomFilteringSupported)) && useFilteredBlocks))
                            (§ block
                                (.. getdata (addFilteredBlock (.. item hash)))
                                (§ ass (§ name pingAfterGetData) true)
                            )
                            (§ else )
                            (§ block
                                (.. getdata (addItem item))
                            )
                            (.. pendingBlockDownloads (add (.. item hash)))
                        )
                    )
                )
                ;; If we're downloading the chain, doing a getdata on the last block we were told about will cause the
                ;; peer to advertize the head block to us in a single-item inv.  When we download THAT, it will be an
                ;; orphan block, meaning we'll re-enter blockChainDownloadLocked() to trigger another getblocks between the
                ;; current best block we have and the orphan block.  If more blocks arrive in the meantime they'll also
                ;; become orphan.
            )
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )

        (§ if (§ not (.. getdata (getItems) (isEmpty))))
        (§ block
            ;; This will cause us to receive a bunch of block or tx messages.
            (sendMessage getdata)
        )

        (§ if pingAfterGetData)
        (§ block
            (sendMessage (§ new #_"Ping" (§ cast #_"long" (* (Math/random) Long/MAX_VALUE))))
        )
        nil
    )

    ;;;
     ; Asks the connected peer for the block of the given hash, and returns a future representing the answer.
     ; If you want the block right away and don't mind waiting for it, just call .get() on the result.  Your thread
     ; will block until the peer answers.
     ;;
    #_suppress(§ opt "unchecked")
    ;; The 'unchecked conversion' warning being suppressed here comes from the sendSingleGetData() formally returning
    ;; ListenableFuture instead of ListenableFuture<Block>.  This is okay as sendSingleGetData() actually returns
    ;; ListenableFuture<Block> in this context.  Note that sendSingleGetData() is also used for Transactions.
    #_public
    (§ method #_"ListenableFuture<Block>" (§ fn getBlock) [#_"Sha256Hash" (§ name blockHash)])
    (§ block
        ;; This does not need to be locked.
        (.. log (info "Request to fetch block {}", blockHash))
        (§ var #_"GetDataMessage" (§ name getdata) (§ new #_"GetDataMessage" params))
        (.. getdata (addBlock blockHash))
        (sendSingleGetData getdata)
    )

    ;;;
     ; Asks the connected peer for the given transaction from its memory pool.  Transactions in the chain cannot be
     ; retrieved this way because peers don't have a transaction ID to transaction-pos-on-disk index, and besides,
     ; in future many peers will delete old transaction data they don't need.
     ;;
    #_suppress(§ opt "unchecked")
    ;; The 'unchecked conversion' warning being suppressed here comes from the sendSingleGetData() formally returning
    ;; ListenableFuture instead of ListenableFuture<Transaction>.  This is okay as sendSingleGetData() actually returns
    ;; ListenableFuture<Transaction> in this context.  Note that sendSingleGetData() is also used for Blocks.
    #_public
    (§ method #_"ListenableFuture<Transaction>" (§ fn getPeerMempoolTransaction) [#_"Sha256Hash" (§ name hash)])
    (§ block
        ;; This does not need to be locked.
        (.. log (info "Request to fetch peer mempool tx  {}", hash))
        (§ var #_"GetDataMessage" (§ name getdata) (§ new #_"GetDataMessage" params))
        (.. getdata (addTransaction hash))
        (sendSingleGetData getdata)
    )

    ;;; Sends a getdata with a single item in it. ;;
    #_private
    (§ method- #_"ListenableFuture" (§ fn sendSingleGetData) [#_"GetDataMessage" (§ name getdata)])
    (§ block
        ;; This does not need to be locked.
        (Preconditions/checkArgument (== (.. getdata (getItems) (size)) 1))
        (§ var #_"GetDataRequest" (§ name req) (§ new #_"GetDataRequest" (.. getdata (getItems) (get 0) hash), (SettableFuture/create)))
        (.. getDataFutures (add req))
        (sendMessage getdata)
        (.. req future)
    )

    ;;; Sends a getaddr request to the peer and returns a future that completes with the answer once the peer has replied. ;;
    #_public
    (§ method #_"ListenableFuture<AddressMessage>" (§ fn getAddr) [])
    (§ block
        (§ var #_"SettableFuture<AddressMessage>" (§ name future) (SettableFuture/create))
        (§ sync getAddrFutures)
        (§ block
            (.. getAddrFutures (add future))
        )
        (sendMessage (§ new #_"GetAddrMessage" params))
        future
    )

    ;;;
     ; When downloading the block chain, the bodies will be skipped for blocks created before the given date.
     ; Any transactions relevant to the wallet will therefore not be found, but if you know your wallet has no such
     ; transactions it doesn't matter and can save a lot of bandwidth and processing time.  Note that the times of blocks
     ; isn't known until their headers are available and they are requested in chunks, so some headers may be downloaded
     ; twice using this scheme, but this optimization can still be a large win for newly created wallets.
     ;
     ; @param secondsSinceEpoch Time in seconds since the epoch or 0 to reset to always downloading block bodies.
     ;;
    #_public
    (§ method #_"void" (§ fn setDownloadParameters) [#_"long" (§ name secondsSinceEpoch), #_"boolean" (§ name useFilteredBlocks)])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ if (§ expr secondsSinceEpoch == 0))
            (§ block
                (§ ass (§ name fastCatchupTimeSecs) (.. params (getGenesisBlock) (getTimeSeconds)))
                (§ ass (§ name downloadBlockBodies) true)
            )
            (§ else )
            (§ block
                (§ ass (§ name fastCatchupTimeSecs) secondsSinceEpoch)
                ;; If the given time is before the current chains head block time, then this has no effect (we already
                ;; downloaded everything we need).
                (§ if (§ expr blockChain != nil && (.. blockChain (getChainHead) (getHeader) (getTimeSeconds)) < fastCatchupTimeSecs))
                (§ block
                    (§ ass (§ name downloadBlockBodies) false)
                )
            )
            (§ ass (§ name (.. this useFilteredBlocks)) useFilteredBlocks)
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
        nil
    )

    ;;;
     ; Links the given wallet to this peer.  If you have multiple peers, you should use a {@link PeerGroup} to manage
     ; them and use the {@link PeerGroup#addWallet(Wallet)} method instead of registering the wallet with each peer
     ; independently, otherwise the wallet will receive duplicate notifications.
     ;;
    #_public
    (§ method #_"void" (§ fn addWallet) [#_"Wallet" (§ name wallet)])
    (§ block
        (.. wallets (add wallet))
        nil
    )

    ;;; Unlinks the given wallet from peer.  See {@link Peer#addWallet(Wallet)}. ;;
    #_public
    (§ method #_"void" (§ fn removeWallet) [#_"Wallet" (§ name wallet)])
    (§ block
        (.. wallets (remove wallet))
        nil
    )

    ;; Keep track of the last request we made to the peer in blockChainDownloadLocked so we can avoid redundant and harmful
    ;; getblocks requests.
    #_guarded-by(§ opt "lock")
    #_private
    (§ field- #_"Sha256Hash" (§ name lastGetBlocksBegin))
    #_guarded-by(§ opt "lock")
    #_private
    (§ field- #_"Sha256Hash" (§ name lastGetBlocksEnd))

    #_guarded-by(§ opt "lock")
    #_private
    (§ method- #_"void" (§ fn blockChainDownloadLocked) [#_"Sha256Hash" (§ name toHash)])
    (§ block
        (Preconditions/checkState (.. lock (isHeldByCurrentThread)))

        ;; The block chain download process is a bit complicated.  Basically, we start with one or more blocks in a
        ;; chain that we have from a previous session.  We want to catch up to the head of the chain BUT we don't know
        ;; where that chain is up to or even if the top block we have is even still in the chain - we
        ;; might have got ourselves onto a fork that was later resolved by the network.
        ;;
        ;; To solve this, we send the peer a block locator which is just a list of block hashes.  It contains the
        ;; blocks we know about, but not all of them, just enough of them so the peer can figure out if we did end up
        ;; on a fork and if so, what the earliest still valid block we know about is likely to be.
        ;;
        ;; Once it has decided which blocks we need, it will send us an inv with up to 500 block messages.  We may
        ;; have some of them already if we already have a block chain and just need to catch up.  Once we request the
        ;; last block, if there are still more to come it sends us an "inv" containing only the hash of the head
        ;; block.
        ;;
        ;; That causes us to download the head block but then we find (in processBlock) that we can't connect
        ;; it to the chain yet because we don't have the intermediate blocks.  So we rerun this function building a
        ;; new block locator describing where we're up to.
        ;;
        ;; The getblocks with the new locator gets us another inv with another bunch of blocks.  We download them once
        ;; again.  This time when the peer sends us an inv with the head block, we already have it so we won't download
        ;; it again - but we recognize this case as special and call back into blockChainDownloadLocked to continue the
        ;; process.
        ;;
        ;; So this is a complicated process but it has the advantage that we can download a chain of enormous length
        ;; in a relatively stateless manner and with constant memory usage.
        ;;
        ;; All this is made more complicated by the desire to skip downloading the bodies of blocks that pre-date the
        ;; 'fast catchup time', which is usually set to the creation date of the earliest key in the wallet.  Because
        ;; we know there are no transactions using our keys before that date, we need only the headers.  To do that we
        ;; use the "getheaders" command.  Once we find we've gone past the target date, we throw away the downloaded
        ;; headers and then request the blocks from that point onwards.  "getheaders" does not send us an inv, it just
        ;; sends us the data we requested in a "headers" message.

        ;; TODO: Block locators should be abstracted out rather than special cased here.
        (§ var #_"List<Sha256Hash>" (§ name blockLocator) (§ new #_"ArrayList<>" 51))

        ;; For now, we don't do the exponential thinning as suggested here:
        ;;
        ;;   https://en.bitcoin.it/wiki/Protocol_specification#getblocks
        ;;
        ;; This is because it requires scanning all the block chain headers, which is very slow.  Instead we add the
        ;; top 100 block headers.  If there is a re-org deeper than that, we'll end up downloading the entire chain.
        ;; We must always put the genesis block as the first entry.

        (§ var #_"BlockStore" (§ name store) (.. (Preconditions/checkNotNull blockChain) (getBlockStore)))
        (§ var #_"StoredBlock" (§ name chainHead) (.. blockChain (getChainHead)))
        (§ var #_"Sha256Hash" (§ name chainHeadHash) (.. chainHead (getHeader) (getHash)))

        ;; Did we already make this request?  If so, don't do it again.
        (§ if (§ expr (Objects/equal lastGetBlocksBegin, chainHeadHash) && (Objects/equal lastGetBlocksEnd, toHash)))
        (§ block
            (.. log (info "blockChainDownloadLocked({}): ignoring duplicated request: {}", toHash, chainHeadHash))
            (§ for (§ var #_"Sha256Hash" (§ name hash)) :for pendingBlockDownloads)
            (§ block
                (.. log (info "Pending block download: {}", hash))
            )
            (.. log (info (Throwables/getStackTraceAsString (§ new #_"Throwable"))))
            (§ return nil)
        )

        (§ if (.. log (isDebugEnabled)))
        (§ block
            (.. log (debug "{}: blockChainDownloadLocked({}) current head = {}", this, toHash, (.. chainHead (getHeader) (getHashAsString))))
        )

        (§ var #_"StoredBlock" (§ name cursor) chainHead)
        (§ for (§ var #_"int" (§ name i) 100) :for (§ expr cursor != nil && 0 < i) :for (§ ass (§ name i) (- i 1)))
        (§ block
            (.. blockLocator (add (.. cursor (getHeader) (getHash))))
            (§ try )
            (§ block
                (§ ass (§ name cursor) (.. cursor (getPrev store)))
            )
            (§ catch #_"BlockStoreException" (§ name e))
            (§ block
                (.. log (error "Failed to walk the block chain whilst constructing a locator"))
                (§ throw (§ new #_"RuntimeException" e))
            )
        )

        ;; Only add the locator if we didn't already do so.  If the chain is < 50 blocks we already reached it.
        (§ if (some? cursor))
        (§ block
            (.. blockLocator (add (.. params (getGenesisBlock) (getHash))))
        )

        ;; Record that we requested this range of blocks so we can filter out duplicate requests in the event
        ;; of a block being solved during chain download.
        (§ ass (§ name lastGetBlocksBegin) chainHeadHash)
        (§ ass (§ name lastGetBlocksEnd) toHash)

        (§ if downloadBlockBodies)
        (§ block
            (§ var #_"GetBlocksMessage" (§ name message) (§ new #_"GetBlocksMessage" params, blockLocator, toHash))
            (sendMessage message)
        )
        (§ else )
        (§ block
            ;; Downloading headers for a while instead of full blocks.
            (§ var #_"GetHeadersMessage" (§ name message) (§ new #_"GetHeadersMessage" params, blockLocator, toHash))
            (sendMessage message)
        )
        nil
    )

    ;;;
     ; Starts an asynchronous download of the block chain.  The chain download is deemed to be complete once we've
     ; downloaded the same number of blocks that the peer advertised having in its version handshake message.
     ;;
    #_public
    (§ method #_"void" (§ fn startBlockChainDownload) [])
    (§ block
        (setDownloadData true)
        ;; TODO: Peer might still have blocks that we don't have, and even have a heavier
        ;; chain even if the chain block count is lower.
        (§ var #_"int" (§ name blocksLeft) (getPeerBlockHeightDifference))
        (§ if (<= 0 blocksLeft))
        (§ block
            (§ for (§ var ListenerRegistration<ChainDownloadStartedEventListener> registration) :for chainDownloadStartedEventListeners)
            (§ block
                (.. registration executor (execute (§ new #_"Runnable")
                (§ anon
                    #_override
                    #_public
                    (§ method #_"void" (§ fn run) [])
                    (§ block
                        (.. registration listener (onChainDownloadStarted (§ dhis Peer), blocksLeft))
                        nil
                    )
                )))
            )
            ;; When we just want as many blocks as possible, we can set the target hash to zero.
            (.. lock (lock))
            (§ try )
            (§ block
                (blockChainDownloadLocked Sha256Hash/ZERO_HASH)
            )
            (§ finally )
            (§ block
                (.. lock (unlock))
            )
        )
        nil
    )

    #_private
    (§ class #_"PendingPing"
        ;; The future that will be invoked when the pong is heard back.
        #_public
        (§ field #_"SettableFuture<Long>" (§ name future))
        ;; The random nonce that lets us tell apart overlapping pings/pongs.
        #_public
        (§ field #_"long" (§ name nonce))
        ;; Measurement of the time elapsed.
        #_public
        (§ field #_"long" (§ name startTimeMsec))

        #_public
        (§ constructor #_"PendingPing" [#_"long" (§ name nonce)])
        (§ block
            (§ ass (§ name future) (SettableFuture/create))
            (§ ass (§ name (.. this nonce)) nonce)
            (§ ass (§ name startTimeMsec) (Utils/currentTimeMillis))
            this
        )

        #_public
        (§ method #_"void" (§ fn complete) [])
        (§ block
            (§ if (§ not (.. future (isDone))))
            (§ block
                (§ var #_"Long" (§ name elapsed) (- (Utils/currentTimeMillis) startTimeMsec))
                (.. (§ dhis Peer) (addPingTimeData elapsed))
                (.. log (debug "{}: ping time is {} msec", (§ expr (.. (§ dhis Peer) (toString))), elapsed))
                (.. future (set elapsed))
            )
            nil
        )
    )

    ;;; Adds a ping time sample to the averaging window. ;;
    #_private
    (§ method- #_"void" (§ fn addPingTimeData) [#_"long" (§ name sample)])
    (§ block
        (.. lastPingTimesLock (lock))
        (§ try )
        (§ block
            (§ if (nil? lastPingTimes))
            (§ block
                (§ ass (§ name lastPingTimes) (§ new #_"long[]" (§ count PING_MOVING_AVERAGE_WINDOW)))
                ;; Initialize the averaging window to the first sample.
                (Arrays/fill lastPingTimes, sample)
            )
            (§ else )
            (§ block
                ;; Shift all elements backwards by one.
                (System/arraycopy lastPingTimes, 1, lastPingTimes, 0, (§ expr (.. lastPingTimes length) - 1))
                ;; And append the new sample to the end.
                (§ ass (§ name (§ ai lastPingTimes (§ expr lastPingTimes.length - 1))) sample)
            )
        )
        (§ finally )
        (§ block
            (.. lastPingTimesLock (unlock))
        )
        nil
    )

    ;;;
     ; Sends the peer a ping message and returns a future that will be invoked when the pong is received back.
     ; The future provides a number which is the number of milliseconds elapsed between the ping and the pong.
     ; Once the pong is received the value returned by {@link org.bitcoinj.core.Peer#getLastPingTime()} is
     ; updated.
     ; @throws ProtocolException if the peer version is too low to support measurable pings.
     ;;
    #_public
    (§ method #_"ListenableFuture<Long>" (§ fn ping) [])
        (§ throws #_"ProtocolException")
    (§ block
        (ping (§ cast #_"long" (* (Math/random) Long/MAX_VALUE)))
    )

    #_protected
    (§ method #_"ListenableFuture<Long>" (§ fn ping) [#_"long" (§ name nonce)])
        (§ throws #_"ProtocolException")
    (§ block
        (§ var #_"VersionMessage" (§ name ver) vPeerVersionMessage)
        (§ if (§ not (.. ver (isPingPongSupported))))
        (§ block
            (§ throw (§ new #_"ProtocolException" (§ expr "Peer version is too low for measurable pings: " + ver)))
        )

        (§ var #_"PendingPing" (§ name pendingPing) (§ new #_"PendingPing" nonce))
        (.. pendingPings (add pendingPing))
        (sendMessage (§ new #_"Ping" (.. pendingPing nonce)))

        (.. pendingPing future)
    )

    ;;;
     ; Returns the elapsed time of the last ping/pong cycle.  If {@link org.bitcoinj.core.Peer#ping()} has
     ; never been called or we did not hear back the "pong" message yet, returns {@link Long#MAX_VALUE}.
     ;;
    #_public
    (§ method #_"long" (§ fn getLastPingTime) [])
    (§ block
        (.. lastPingTimesLock (lock))
        (§ try )
        (§ block
            (§ return (if (some? lastPingTimes) (§ ai lastPingTimes (- (.. lastPingTimes length) 1)) Long/MAX_VALUE))
        )
        (§ finally )
        (§ block
            (.. lastPingTimesLock (unlock))
        )
    )

    ;;;
     ; Returns a moving average of the last N ping/pong cycles.  If {@link org.bitcoinj.core.Peer#ping()} has never
     ; been called or we did not hear back the "pong" message yet, returns {@link Long#MAX_VALUE}.  The moving average
     ; window is 5 buckets.
     ;;
    #_public
    (§ method #_"long" (§ fn getPingTime) [])
    (§ block
        (.. lastPingTimesLock (lock))
        (§ try )
        (§ block
            (§ if (nil? lastPingTimes))
            (§ block
                (§ return Long/MAX_VALUE)
            )
            (§ var #_"long" (§ name sum) 0)
            (§ for (§ var #_"long" (§ name i)) :for lastPingTimes)
            (§ block
                (§ ass (§ name sum) (+ sum i))
            )
            (§ return (§ cast #_"long" (/ (§ cast #_"double" sum) (.. lastPingTimes length))))
        )
        (§ finally )
        (§ block
            (.. lastPingTimesLock (unlock))
        )
    )

    #_private
    (§ method- #_"void" (§ fn processPing) [#_"Ping" (§ name m)])
    (§ block
        (§ if (.. m (hasNonce)))
        (§ block
            (sendMessage (§ new #_"Pong" (.. m (getNonce))))
        )
        nil
    )

    #_protected
    (§ method #_"void" (§ fn processPong) [#_"Pong" (§ name m)])
    (§ block
        ;; Iterates over a snapshot of the list, so we can run unlocked here.
        (§ for (§ var #_"PendingPing" (§ name ping)) :for pendingPings)
        (§ block
            (§ if (== (.. m (getNonce)) (.. ping nonce)))
            (§ block
                (.. pendingPings (remove ping))
                ;; This line may trigger an event listener that re-runs ping().
                (.. ping (complete))
                (§ return nil)
            )
        )
        nil
    )

    ;;;
     ; Returns the difference between our best chain height and the peers, which can either be positive if we are
     ; behind the peer, or negative if the peer is ahead of us.
     ;;
    #_public
    (§ method #_"int" (§ fn getPeerBlockHeightDifference) [])
    (§ block
        (Preconditions/checkNotNull blockChain, "No block chain configured")

        ;; Chain will overflow signed int blocks in ~41,000 years.
        (§ var #_"int" (§ name chainHeight) (§ cast #_"int" (getBestHeight)))
        ;; chainHeight should not be zero/negative because we shouldn't have given the user a Peer that is to another
        ;; client-mode node, nor should it be unconnected.  If that happens it means the user overrode us somewhere or
        ;; there is a bug in the peer management code.
        (Preconditions/checkState (§ expr (.. params (allowEmptyPeerChain)) || 0 < chainHeight), "Connected to peer with zero/negative chain height", chainHeight)
        (§ expr chainHeight - (.. blockChain (getBestChainHeight)))
    )

    #_private
    (§ method- #_"boolean" (§ fn isNotFoundMessageSupported) [])
    (§ block
        (§ expr NotFoundMessage/MIN_PROTOCOL_VERSION <= (.. vPeerVersionMessage clientVersion))
    )

    ;;;
     ; Returns true if this peer will try and download things it is sent in "inv" messages.
     ; Normally you only need one peer to be downloading data.  Defaults to true.
     ;;
    #_public
    (§ method #_"boolean" (§ fn isDownloadData) [])
    (§ block
        vDownloadData
    )

    ;;;
     ; If set to false, the peer won't try and fetch blocks and transactions it hears about.  Normally, only one
     ; peer should download missing blocks.  Defaults to true.  Changing this value from false to true may trigger
     ; a request to the remote peer for the contents of its memory pool, if Bloom filtering is active.
     ;;
    #_public
    (§ method #_"void" (§ fn setDownloadData) [#_"boolean" (§ name downloadData)])
    (§ block
        (§ ass (§ name (.. this vDownloadData)) downloadData)
        nil
    )

    ;;; Returns version data announced by the remote peer. ;;
    #_public
    (§ method #_"VersionMessage" (§ fn getPeerVersionMessage) [])
    (§ block
        vPeerVersionMessage
    )

    ;;; Returns version data we announce to our remote peers. ;;
    #_public
    (§ method #_"VersionMessage" (§ fn getVersionMessage) [])
    (§ block
        versionMessage
    )

    ;;;
     ; @return the height of the best chain as claimed by peer: sum of its ver announcement and blocks announced since.
     ;;
    #_public
    (§ method #_"long" (§ fn getBestHeight) [])
    (§ block
        (+ (.. vPeerVersionMessage bestHeight) (.. blocksAnnounced (get)))
    )

    ;;;
     ; The minimum P2P protocol version that is accepted.  If the peer speaks a protocol version lower than this, it
     ; will be disconnected.
     ; @return true if the peer was disconnected as a result.
     ;;
    #_public
    (§ method #_"boolean" (§ fn setMinProtocolVersion) [#_"int" (§ name minProtocolVersion)])
    (§ block
        (§ ass (§ name (.. this vMinProtocolVersion)) minProtocolVersion)

        (§ var #_"VersionMessage" (§ name ver) (getPeerVersionMessage))
        (§ if (§ expr ver != nil && (.. ver clientVersion) < minProtocolVersion))
        (§ block
            (.. log (warn "{}: Disconnecting due to new min protocol version {}, got: {}", this, minProtocolVersion, (.. ver clientVersion)))
            (close)
            (§ return true)
        )

        false
    )

    ;;;
     ; <p>Sets a Bloom filter on this connection.  This will cause the given {@link BloomFilter} object to be sent
     ; to the remote peer and if either a memory pool has been set using the constructor or the
     ; vDownloadData property is true, a {@link MemoryPoolMessage} is sent as well to trigger downloading of any
     ; pending transactions that may be relevant.</p>
     ;
     ; <p>The Peer does not automatically request filters from any wallets added using {@link Peer#addWallet(Wallet)}.
     ; This is to allow callers to avoid redundantly recalculating the same filter repeatedly when using multiple peers
     ; and multiple wallets together.</p>
     ;
     ; <p>Therefore, you should not use this method if your app uses a {@link PeerGroup}.  It is called for you.</p>
     ;
     ; <p>If the remote peer doesn't support Bloom filtering, then this call is ignored.  Once set you presently cannot
     ; unset a filter, though the underlying p2p protocol does support it.</p>
     ;;
    #_public
    (§ method #_"void" (§ fn setBloomFilter) [#_"BloomFilter" (§ name filter)])
    (§ block
        (setBloomFilter filter, true)
        nil
    )

    ;;;
     ; <p>Sets a Bloom filter on this connection.  This will cause the given {@link BloomFilter} object to be sent
     ; to the remote peer and if requested, a {@link MemoryPoolMessage} is sent as well to trigger downloading of any
     ; pending transactions that may be relevant.</p>
     ;
     ; <p>The Peer does not automatically request filters from any wallets added using {@link Peer#addWallet(Wallet)}.
     ; This is to allow callers to avoid redundantly recalculating the same filter repeatedly when using multiple peers
     ; and multiple wallets together.</p>
     ;
     ; <p>Therefore, you should not use this method if your app uses a {@link PeerGroup}.  It is called for you.</p>
     ;
     ; <p>If the remote peer doesn't support Bloom filtering, then this call is ignored.  Once set you presently cannot
     ; unset a filter, though the underlying p2p protocol does support it.</p>
     ;;
    #_public
    (§ method #_"void" (§ fn setBloomFilter) [#_"BloomFilter" (§ name filter), #_"boolean" (§ name andQueryMemPool)])
    (§ block
        (Preconditions/checkNotNull filter, "Clearing filters is not currently supported")

        (§ var #_"VersionMessage" (§ name ver) vPeerVersionMessage)
        (§ if (§ expr ver != nil && (.. ver (isBloomFilteringSupported))))
        (§ block
            (§ ass (§ name vBloomFilter) filter)
            (.. log (debug "{}: Sending Bloom filter{}", this, (if andQueryMemPool " and querying mempool" "")))
            (sendMessage filter)
            (§ if andQueryMemPool)
            (§ block
                (sendMessage (§ new #_"MemoryPoolMessage"))
            )
            (maybeRestartChainDownload)
        )
        nil
    )

    #_private
    (§ method- #_"void" (§ fn maybeRestartChainDownload) [])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ if (nil? awaitingFreshFilter))
            (§ block
                (§ return nil)
            )

            (§ if (§ not vDownloadData))
            (§ block
                ;; This branch should be harmless but I want to know how often it happens in reality.
                (.. log (warn "Lost download peer status whilst awaiting fresh filter."))
                (§ return nil)
            )

            ;; Ping/pong to wait for blocks that are still being streamed to us to finish being downloaded and discarded.
            (.. (ping) (addListener (§ new #_"Runnable")
            (§ anon
                #_override
                #_public
                (§ method #_"void" (§ fn run) [])
                (§ block
                    (.. lock (lock))
                    (Preconditions/checkNotNull awaitingFreshFilter)
                    (§ var #_"GetDataMessage" (§ name getdata) (§ new #_"GetDataMessage" params))
                    (§ for (§ var #_"Sha256Hash" (§ name hash)) :for awaitingFreshFilter)
                    (§ block
                        (.. getdata (addFilteredBlock hash))
                    )
                    (§ ass (§ name awaitingFreshFilter) nil)
                    (.. lock (unlock))

                    (.. log (info "Restarting chain download"))
                    (sendMessage getdata)
                    ;; TODO: This bizarre ping-after-getdata hack probably isn't necessary.
                    ;; It's to ensure we know when the end of a filtered block stream of txns is, but we should just be
                    ;; able to match txns with the merkleblock.  Ask Matt why it's written this way.
                    (sendMessage (§ new #_"Ping" (§ cast #_"long" (* (Math/random) Long/MAX_VALUE))))
                    nil
                )
            ), Threading/SAME_THREAD))
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
        nil
    )

    ;;;
     ; Returns the last {@link BloomFilter} set by {@link Peer#setBloomFilter(BloomFilter)}.  Bloom filters tell
     ; the remote node what transactions to send us, in a compact manner.
     ;;
    #_public
    (§ method #_"BloomFilter" (§ fn getBloomFilter) [])
    (§ block
        vBloomFilter
    )

    ;;;
     ; Returns true if this peer will use getdata/notfound messages to walk backwards through transaction dependencies
     ; before handing the transaction off to the wallet.  The wallet can do risk analysis on pending/recent transactions
     ; to try and discover if a pending tx might be at risk of double spending.
     ;;
    #_public
    (§ method #_"boolean" (§ fn isDownloadTxDependencies) [])
    (§ block
        (< 0 vDownloadTxDependencyDepth)
    )

    ;;;
     ; Sets if this peer will use getdata/notfound messages to walk backwards through transaction dependencies
     ; before handing the transaction off to the wallet.  The wallet can do risk analysis on pending/recent transactions
     ; to try and discover if a pending tx might be at risk of double spending.
     ;;
    #_public
    (§ method #_"void" (§ fn setDownloadTxDependencies) [#_"boolean" (§ name enable)])
    (§ block
        (§ ass (§ name vDownloadTxDependencyDepth) (if enable Integer/MAX_VALUE 0))
        nil
    )

    ;;;
     ; Sets if this peer will use getdata/notfound messages to walk backwards through transaction dependencies
     ; before handing the transaction off to the wallet.  The wallet can do risk analysis on pending/recent transactions
     ; to try and discover if a pending tx might be at risk of double spending.
     ;;
    #_public
    (§ method #_"void" (§ fn setDownloadTxDependencies) [#_"int" (§ name depth)])
    (§ block
        (§ ass (§ name vDownloadTxDependencyDepth) depth)
        nil
    )
)

#_(ns org.bitcoinj.core #_"PeerAddress"
    (:import [java.io IOException OutputStream]
             [java.math BigInteger]
             [java.net InetAddress InetSocketAddress UnknownHostException])
    (:import [com.google.common.base Objects Preconditions]
             [com.google.common.net InetAddresses])
    (:import #_static [org.bitcoinj.core.Utils uint32ToByteStreamLE]
             #_static [org.bitcoinj.core.Utils uint64ToByteStreamLE]
             [org.bitcoinj.params MainNetParams]))

;;;
 ; <p>A PeerAddress holds an IP address and port number representing the network location of
 ; a peer in the Bitcoin P2P network.  It exists primarily for serialization purposes.</p>
 ;
 ; <p>Instances of this class are not safe for use by multiple threads.</p>
 ;;
#_public
(§ class #_"PeerAddress" (§ extends #_"ChildMessage")
    #_static
    (§ def #_"int" (§ name MESSAGE_SIZE) 30)

    #_private
    (§ field- #_"InetAddress" (§ name addr))
    #_private
    (§ field- #_"String" (§ name hostname)) ;; Used for .onion addresses.
    #_private
    (§ field- #_"int" (§ name port))
    #_private
    (§ field- #_"BigInteger" (§ name services))
    #_private
    (§ field- #_"long" (§ name time))

    ;;;
     ; Construct a peer address from a serialized payload.
     ;;
    #_public
    (§ constructor #_"PeerAddress" [#_"NetworkParameters" (§ name params), #_"byte[]" (§ name payload), #_"int" (§ name offset), #_"int" (§ name protocolVersion)])
        (§ throws #_"ProtocolException")
    (§ block
        (§ super params, payload, offset, protocolVersion)
        this
    )

    ;;;
     ; Construct a peer address from a serialized payload.
     ; @param params NetworkParameters object.
     ; @param payload Bitcoin protocol formatted byte array containing message content.
     ; @param offset The location of the first payload byte within the array.
     ; @param protocolVersion Bitcoin protocol version.
     ; @param serializer The serializer to use for this message.
     ; @throws ProtocolException
     ;;
    #_public
    (§ constructor #_"PeerAddress" [#_"NetworkParameters" (§ name params), #_"byte[]" (§ name payload), #_"int" (§ name offset), #_"int" (§ name protocolVersion), #_"Message" (§ name parent), #_"MessageSerializer" (§ name serializer)])
        (§ throws #_"ProtocolException")
    (§ block
        (§ super params, payload, offset, protocolVersion, parent, serializer, UNKNOWN_LENGTH)
        this
    )

    ;;;
     ; Construct a peer address from a memorized or hardcoded address.
     ;;
    #_public
    (§ constructor #_"PeerAddress" [#_"NetworkParameters" (§ name params), #_"InetAddress" (§ name addr), #_"int" (§ name port), #_"int" (§ name protocolVersion), #_"BigInteger" (§ name services)])
    (§ block
        (§ super params)

        (§ ass (§ name (.. this addr)) (Preconditions/checkNotNull addr))
        (§ ass (§ name (.. this port)) port)
        (§ ass (§ name (.. this protocolVersion)) protocolVersion)
        (§ ass (§ name (.. this services)) services)

        (§ ass (§ name length) (if (< 31402 protocolVersion) MESSAGE_SIZE (- MESSAGE_SIZE 4)))
        this
    )

    ;;;
     ; Constructs a peer address from the given IP address and port.  Version number is default for the given parameters.
     ;;
    #_public
    (§ constructor #_"PeerAddress" [#_"NetworkParameters" (§ name params), #_"InetAddress" (§ name addr), #_"int" (§ name port)])
    (§ block
        (§ this params, addr, port, (.. params (getProtocolVersionNum NetworkParameters/ProtocolVersion/CURRENT)), BigInteger/ZERO)
        this
    )

    ;;;
     ; Constructs a peer address from the given IP address.  Port and version number are default for the given parameters.
     ;;
    #_public
    (§ constructor #_"PeerAddress" [#_"NetworkParameters" (§ name params), #_"InetAddress" (§ name addr)])
    (§ block
        (§ this params, addr, (.. params (getPort)))
        this
    )

    ;;;
     ; Constructs a peer address from an {@link InetSocketAddress}.  An InetSocketAddress can take in as parameters an
     ; InetAddress or a String hostname.  If you want to connect to a .onion, set the hostname to the .onion address.
     ;;
    #_public
    (§ constructor #_"PeerAddress" [#_"NetworkParameters" (§ name params), #_"InetSocketAddress" (§ name addr)])
    (§ block
        (§ this params, (.. addr (getAddress)), (.. addr (getPort)))
        this
    )

    ;;;
     ; Constructs a peer address from a stringified hostname+port.  Use this if you want to connect to a Tor .onion address.
     ;;
    #_public
    (§ constructor #_"PeerAddress" [#_"NetworkParameters" (§ name params), #_"String" (§ name hostname), #_"int" (§ name port)])
    (§ block
        (§ super params)

        (§ ass (§ name (.. this hostname)) hostname)
        (§ ass (§ name (.. this port)) port)
        (§ ass (§ name (.. this protocolVersion)) (.. params (getProtocolVersionNum NetworkParameters/ProtocolVersion/CURRENT)))
        (§ ass (§ name (.. this services)) BigInteger/ZERO)
        this
    )

    #_public
    #_static
    (§ defn #_"PeerAddress" (§ fn localhost) [#_"NetworkParameters" (§ name params)])
    (§ block
        (§ new #_"PeerAddress" params, (InetAddresses/forString "127.0.0.1"), (.. params (getPort)))
    )

    #_override
    #_protected
    (§ method #_"void" (§ fn bitcoinSerializeToStream) [#_"OutputStream" (§ name stream)])
        (§ throws #_"IOException")
    (§ block
        (§ if (<= 31402 protocolVersion))
        (§ block
            ;; TODO: This appears to be dynamic because the client only ever sends out it's own address
            ;; so assumes itself to be up.  For a fuller implementation this needs to be dynamic only if
            ;; the address refers to this client.
            (§ var #_"int" (§ name secs) (§ cast #_"int" (Utils/currentTimeSeconds)))
            (uint32ToByteStreamLE secs, stream)
        )
        (uint64ToByteStreamLE services, stream) ;; nServices.
        ;; Java does not provide any utility to map an IPv4 address into IPv6 space, so we have to do it by hand.
        (§ var #_"byte[]" (§ name ipBytes) (.. addr (getAddress)))
        (§ if (== (.. ipBytes length) 4))
        (§ block
            (§ var #_"byte[]" (§ name v6addr) (§ new #_"byte[]" (§ count 16)))
            (System/arraycopy ipBytes, 0, v6addr, 12, 4)
            (§ ass (§ name (§ ai v6addr 10)) (§ cast #_"byte" 0xff))
            (§ ass (§ name (§ ai v6addr 11)) (§ cast #_"byte" 0xff))
            (§ ass (§ name ipBytes) v6addr)
        )
        (.. stream (write ipBytes))
        ;; And write out the port.  Unlike the rest of the protocol, address and port is in big endian byte order.
        (.. stream (write (§ cast #_"byte" (§ expr 0xff & port >> 8))))
        (.. stream (write (§ cast #_"byte" (& 0xff port))))
        nil
    )

    #_override
    #_protected
    (§ method #_"void" (§ fn parse) [])
        (§ throws #_"ProtocolException")
    (§ block
        ;; Format of a serialized address:
        ;;   uint32 timestamp
        ;;   uint64 services (flags determining what the node can do)
        ;;   16 bytes ip address
        ;;   2 bytes port num
        (§ ass (§ name time) (if (< 31402 protocolVersion) (readUint32) -1))
        (§ ass (§ name services) (readUint64))
        (§ var #_"byte[]" (§ name addrBytes) (readBytes 16))
        (§ try )
        (§ block
            (§ ass (§ name addr) (InetAddress/getByAddress addrBytes))
        )
        (§ catch #_"UnknownHostException" (§ name e))
        (§ block
            (§ throw (§ new #_"RuntimeException" e)) ;; Cannot happen.
        )
        (§ ass (§ name port) (| (<< (§ expr (§ ai payload cursor) & 0xff) 8) (§ expr (§ ai payload (§ expr cursor + 1)) & 0xff)))
        (§ ass (§ name cursor) (+ cursor 2))
        ;; The 4 byte difference is the uint32 timestamp that was introduced in version 31402.
        (§ ass (§ name length) (if (< 31402 protocolVersion) MESSAGE_SIZE (- MESSAGE_SIZE 4)))
        nil
    )

    #_public
    (§ method #_"String" (§ fn getHostname) [])
    (§ block
        hostname
    )

    #_public
    (§ method #_"InetAddress" (§ fn getAddr) [])
    (§ block
        addr
    )

    #_public
    (§ method #_"InetSocketAddress" (§ fn getSocketAddress) [])
    (§ block
        (§ new #_"InetSocketAddress" (getAddr), (getPort))
    )

    #_public
    (§ method #_"int" (§ fn getPort) [])
    (§ block
        port
    )

    #_public
    (§ method #_"BigInteger" (§ fn getServices) [])
    (§ block
        services
    )

    #_public
    (§ method #_"long" (§ fn getTime) [])
    (§ block
        time
    )

    #_override
    #_public
    (§ method #_"String" (§ fn toString) [])
    (§ block
        (if (some? hostname) (§ str "[" + hostname + "]:" + port) (§ str "[" + (.. addr (getHostAddress)) + "]:" + port))
    )

    #_override
    #_public
    (§ method #_"boolean" (§ fn equals) [#_"Object" (§ name o)])
    (§ block
        (§ if (§ expr this == o))
        (§ block
            (§ return true)
        )
        (§ if (§ expr o == nil || (getClass) != (.. o (getClass))))
        (§ block
            (§ return false)
        )
        (§ var #_"PeerAddress" (§ name other) (§ cast #_"PeerAddress" o))
        (§ expr (.. other addr (equals addr)) && (.. other port) == port && (.. other time) == time && (.. other services (equals services)))
    )

    #_override
    #_public
    (§ method #_"int" (§ fn hashCode) [])
    (§ block
        (Objects/hashCode addr, port, time, services)
    )

    #_public
    (§ method #_"InetSocketAddress" (§ fn toSocketAddress) [])
    (§ block
        ;; Reconstruct the InetSocketAddress properly.
        (if (some? hostname) (InetSocketAddress/createUnresolved hostname, port) (§ new #_"InetSocketAddress" addr, port))
    )
)

#_(ns org.bitcoinj.core #_"PeerException")

;;;
 ; Thrown when a problem occurs in communicating with a peer, and we should retry.
 ;;
#_public
(§ class #_"PeerException" (§ extends #_"Exception")
    #_public
    (§ constructor #_"PeerException" [#_"String" (§ name msg)])
    (§ block
        (§ super msg)
        this
    )

    #_public
    (§ constructor #_"PeerException" [#_"Exception" (§ name e)])
    (§ block
        (§ super e)
        this
    )

    #_public
    (§ constructor #_"PeerException" [#_"String" (§ name msg), #_"Exception" (§ name e)])
    (§ block
        (§ super msg, e)
        this
    )
)

#_(ns org.bitcoinj.core #_"PeerFilterProvider")

;;;
 ; An interface which provides the information required to properly filter data downloaded from Peers.
 ; Note that an implementer is responsible for calling {@link PeerGroup#recalculateFastCatchupAndFilter(org.bitcoinj.core.PeerGroup.FilterRecalculateMode)}
 ; whenever a change occurs which effects the data provided via this interface.
 ;;
#_public
(§ interface #_"PeerFilterProvider"
    ;;;
     ; Returns the earliest timestamp (seconds since epoch) for which full/bloom-filtered blocks must be downloaded.
     ; Blocks with timestamps before this time will only have headers downloaded.  0 requires that all blocks be
     ; downloaded, and thus this should default to {@link System#currentTimeMillis()}/1000.
     ;;
    (§ method #_"long" (§ fn getEarliestKeyCreationTime) [])

    ;;;
     ; Called on all registered filter providers before getBloomFilterElementCount and getBloomFilter are called.
     ; Once called, the provider should ensure that the items it will want to insert into the filter don't change.
     ; The reason is that all providers will have their element counts queried, and then a filter big enough for
     ; all of them will be specified.  So the provider must use consistent state.  There is guaranteed to be
     ; a matching call to endBloomFilterCalculation that can be used to e.g. unlock a lock.
     ;;
    (§ method #_"void" (§ fn beginBloomFilterCalculation) [])

    ;;;
     ; Gets the number of elements that will be added to a bloom filter returned by
     ; {@link PeerFilterProvider#getBloomFilter(int, double, long)}.
     ;;
    (§ method #_"int" (§ fn getBloomFilterElementCount) [])

    ;;;
     ; Gets a bloom filter that contains all the necessary elements for the listener to receive relevant transactions.
     ; Default value should be an empty bloom filter with the given size, falsePositiveRate, and nTweak.
     ;;
    (§ method #_"BloomFilter" (§ fn getBloomFilter) [#_"int" (§ name size), #_"double" (§ name falsePositiveRate), #_"long" (§ name nTweak)])

    (§ method #_"void" (§ fn endBloomFilterCalculation) [])
)

#_(ns org.bitcoinj.core #_"PeerGroup"
    (:import [java.io *]
             [java.net *]
             [java.util *]
             [java.util.concurrent *]
             [java.util.concurrent.locks *])
    (:import [com.google.common.annotations *]
             [com.google.common.base *]
             [com.google.common.collect *]
             [com.google.common.net *]
             [com.google.common.primitives *]
             [com.google.common.util.concurrent *]
             [net.jcip.annotations *]
             [org.slf4j *])
   (:require [org.bitcoinj.core.listeners *]
             [org.bitcoinj.net *]
             [org.bitcoinj.net.discovery *]
             [org.bitcoinj.script *]
             [org.bitcoinj.utils * Threading]
             [org.bitcoinj.wallet Wallet]
             [org.bitcoinj.wallet.listeners KeyChainEventListener WalletCoinsReceivedEventListener]))

;;;
 ; <p>Runs a set of connections to the P2P network, brings up connections to replace disconnected nodes and manages
 ; the interaction between them all.  Most applications will want to use one of these.</p>
 ;
 ; <p>PeerGroup tries to maintain a constant number of connections to a set of distinct peers.
 ; Each peer runs a network listener in its own thread.  When a connection is lost, a new peer
 ; will be tried after a delay as long as the number of connections less than the maximum.</p>
 ;
 ; <p>Connections are made to addresses from a provided list.  When that list is exhausted,
 ; we start again from the head of the list.</p>
 ;
 ; <p>The PeerGroup can broadcast a transaction to the currently connected set of peers.  It can
 ; also handle download of the blockchain from peers, restarting the process when peers die.</p>
 ;
 ; <p>A PeerGroup won't do anything until you call the {@link PeerGroup#start()} method
 ; which will block until peer discovery is completed and some outbound connections
 ; have been initiated (it will return before handshaking is done, however).
 ; You should call {@link PeerGroup#stop()} when finished.  Note that not all methods
 ; of PeerGroup are safe to call from a UI thread as some may do network IO,
 ; but starting and stopping the service should be fine.</p>
 ;;
#_public
(§ class #_"PeerGroup" (§ implements #_"TransactionBroadcaster")
    #_private
    #_static
    (§ def- #_"Logger" (§ name log) (LoggerFactory/getLogger (§ klass #_"PeerGroup")))

    ;; All members in this class should be marked with final, volatile, @GuardedBy or a mix as appropriate to define
    ;; their thread safety semantics.  Volatile requires a Hungarian-style v prefix.

    ;; By default we don't require any services because any peer will do.
    #_private
    (§ field- #_"long" (§ name requiredServices) 0)

    ;;;
     ; The default number of connections to the p2p network the library will try to build.  This is set to 12 empirically.
     ; It used to be 4, but because we divide the connection pool in two for broadcasting transactions, that meant we
     ; were only sending transactions to two peers and sometimes this wasn't reliable enough: transactions wouldn't
     ; get through.
     ;;
    #_public
    #_static
    (§ def #_"int" (§ name DEFAULT_CONNECTIONS) 12)
    #_private
    #_volatile
    (§ field- #_"int" (§ name vMaxPeersToDiscoverCount) 100)
    #_private
    #_static
    (§ def- #_"long" (§ name DEFAULT_PEER_DISCOVERY_TIMEOUT_MILLIS) 5000)
    #_private
    #_volatile
    (§ field- #_"long" (§ name vPeerDiscoveryTimeoutMillis) DEFAULT_PEER_DISCOVERY_TIMEOUT_MILLIS)

    #_protected
    (§ field #_"ReentrantLock" (§ name lock) (Threading/lock "peergroup"))

    #_protected
    (§ field #_"NetworkParameters" (§ name params))
    #_nilable
    #_protected
    (§ field #_"AbstractBlockChain" (§ name chain))

    ;; This executor is used to queue up jobs: it's used when we don't want to use locks for mutual exclusion,
    ;; typically because the job might call in to user provided code that needs/wants the freedom to use the API
    ;; however it wants, or because a job needs to be ordered relative to other jobs like that.
    #_protected
    (§ field #_"ListeningScheduledExecutorService" (§ name executor))

    ;; Whether the peer group is currently running.  Once shut down it cannot be restarted.
    #_private
    #_volatile
    (§ field- #_"boolean" (§ name vRunning))
    ;; Whether the peer group has been started or not.  An unstarted PG does not try to access the network.
    #_private
    #_volatile
    (§ field- #_"boolean" (§ name vUsedUp))

    ;; Addresses to try to connect to, excluding active peers.
    #_guarded-by(§ opt "lock")
    #_private
    (§ field- #_"PriorityQueue<PeerAddress>" (§ name inactives))
    #_guarded-by(§ opt "lock")
    #_private
    (§ field- #_"Map<PeerAddress, ExponentialBackoff>" (§ name backoffMap))

    ;; Currently active peers.  This is an ordered list rather than a set to make unit tests predictable.
    #_private
    (§ field- #_"CopyOnWriteArrayList<Peer>" (§ name peers))
    ;; Currently connecting peers.
    #_private
    (§ field- #_"CopyOnWriteArrayList<Peer>" (§ name pendingPeers))
    #_private
    (§ field- #_"ClientConnectionManager" (§ name channels))

    ;; The peer that has been selected for the purposes of downloading announced data.
    #_guarded-by(§ opt "lock")
    #_private
    (§ field- #_"Peer" (§ name downloadPeer))
    ;; Callback for events related to chain download.
    #_nilable
    #_guarded-by(§ opt "lock")
    #_private
    (§ field- #_"PeerDataEventListener" (§ name downloadListener))

    #_private
    (§ field- #_"CopyOnWriteArrayList<ListenerRegistration<BlocksDownloadedEventListener>>" (§ name peersBlocksDownloadedEventListeners) (§ new #_"CopyOnWriteArrayList<>"))
    #_private
    (§ field- #_"CopyOnWriteArrayList<ListenerRegistration<ChainDownloadStartedEventListener>>" (§ name peersChainDownloadStartedEventListeners) (§ new #_"CopyOnWriteArrayList<>"))
    ;;; Callbacks for events related to peers connecting. ;;
    #_protected
    (§ field #_"CopyOnWriteArrayList<ListenerRegistration<PeerConnectedEventListener>>" (§ name peerConnectedEventListeners) (§ new #_"CopyOnWriteArrayList<>"))
    ;;; Callbacks for events related to peer connection/disconnection. ;;
    #_protected
    (§ field #_"CopyOnWriteArrayList<ListenerRegistration<PeerDiscoveredEventListener>>" (§ name peerDiscoveredEventListeners) (§ new #_"CopyOnWriteArrayList<>"))
    ;;; Callbacks for events related to peers disconnecting. ;;
    #_protected
    (§ field #_"CopyOnWriteArrayList<ListenerRegistration<PeerDisconnectedEventListener>>" (§ name peerDisconnectedEventListeners) (§ new #_"CopyOnWriteArrayList<>"))
    ;;; Callbacks for events related to peer data being received. ;;
    #_private
    (§ field- #_"CopyOnWriteArrayList<ListenerRegistration<GetDataEventListener>>" (§ name peerGetDataEventListeners) (§ new #_"CopyOnWriteArrayList<>"))
    #_private
    (§ field- #_"CopyOnWriteArrayList<ListenerRegistration<PreMessageReceivedEventListener>>" (§ name peersPreMessageReceivedEventListeners) (§ new #_"CopyOnWriteArrayList<>"))
    #_protected
    (§ field #_"CopyOnWriteArrayList<ListenerRegistration<OnTransactionBroadcastListener>>" (§ name peersTransactionBroadastEventListeners) (§ new #_"CopyOnWriteArrayList<>"))

    ;; Peer discovery sources, will be polled occasionally if there aren't enough inactives.
    #_private
    (§ field- #_"CopyOnWriteArraySet<PeerDiscovery>" (§ name peerDiscoverers))
    ;; The version message to use for new connections.
    #_guarded-by(§ opt "lock")
    #_private
    (§ field- #_"VersionMessage" (§ name versionMessage))
    ;; Maximum depth up to which pending transaction dependencies are downloaded, or 0 for disabled.
    #_guarded-by(§ opt "lock")
    #_private
    (§ field- #_"int" (§ name downloadTxDependencyDepth))
    ;; How many connections we want to have open at the current time.  If we lose connections, we'll try opening more
    ;; until we reach this count.
    #_guarded-by(§ opt "lock")
    #_private
    (§ field- #_"int" (§ name maxConnections))
    ;; Minimum protocol version we will allow ourselves to connect to: require Bloom filtering.
    #_private
    #_volatile
    (§ field- #_"int" (§ name vMinRequiredProtocolVersion))

    ;;; How many milliseconds to wait after receiving a pong before sending another ping. ;;
    #_public
    #_static
    (§ def #_"long" (§ name DEFAULT_PING_INTERVAL_MSEC) 2000)
    #_guarded-by(§ opt "lock")
    #_private
    (§ field- #_"long" (§ name pingIntervalMsec) DEFAULT_PING_INTERVAL_MSEC)

    #_guarded-by(§ opt "lock")
    #_private
    (§ field- #_"boolean" (§ name useLocalhostPeerWhenPossible) true)
    #_guarded-by(§ opt "lock")
    #_private
    (§ field- #_"boolean" (§ name ipv6Unreachable) false)

    #_guarded-by(§ opt "lock")
    #_private
    (§ field- #_"long" (§ name fastCatchupTimeSecs))
    #_private
    (§ field- #_"CopyOnWriteArrayList<Wallet>" (§ name wallets))
    #_private
    (§ field- #_"CopyOnWriteArrayList<PeerFilterProvider>" (§ name peerFilterProviders))

    ;; This event listener is added to every peer.  It's here so when we announce transactions via an "inv",
    ;; every peer can fetch them.
    #_private
    (§ field- #_"PeerListener" (§ name peerListener) (§ new #_"PeerListener"))

    #_private
    (§ field- #_"int" (§ name minBroadcastConnections) 0)

    #_private
    (§ field- #_"KeyChainEventListener" (§ name walletKeyEventListener) (§ new #_"KeyChainEventListener"
        (§ anon
            #_override
            #_public
            (§ method #_"void" (§ fn onKeysAdded) [#_"List<ECKey>" (§ name keys)])
            (§ block
                (recalculateFastCatchupAndFilter FilterRecalculateMode/SEND_IF_CHANGED)
                nil
            )
        )))

    #_private
    (§ field- #_"WalletCoinsReceivedEventListener" (§ name walletCoinsReceivedEventListener) (§ new #_"WalletCoinsReceivedEventListener"
        (§ anon
            #_override
            #_public
            (§ method #_"void" (§ fn onCoinsReceived) [#_"Wallet" (§ name wallet), #_"Transaction" (§ name tx), #_"Coin" (§ name prevBalance), #_"Coin" (§ name newBalance)])
            (§ block
                ;; We received a relevant transaction.  We MAY need to recalculate and resend the Bloom filter, but only
                ;; if we have received a transaction that includes a relevant pay-to-pubkey output.
                ;;
                ;; The reason is that pay-to-pubkey outputs, when spent, will not repeat any data we can predict in their
                ;; inputs.  So a remote peer will update the Bloom filter for us when such an output is seen matching the
                ;; existing filter, so that it includes the tx hash in which the pay-to-pubkey output was observed.  Thus
                ;; the spending transaction will always match (due to the outpoint structure).
                ;;
                ;; Unfortunately, whilst this is required for correct sync of the chain in blocks, there are two edge cases.
                ;;
                ;; (1) If a wallet receives a relevant, confirmed p2pubkey output that was not broadcast across the network,
                ;; for example in a coinbase transaction, then the node that's serving us the chain will update its filter
                ;; but the rest will not.  If another transaction then spends it, the other nodes won't match/relay it.
                ;;
                ;; (2) If we receive a p2pubkey output broadcast across the network, all currently connected nodes will see
                ;; it and update their filter themselves, but any newly connected nodes will receive the last filter we
                ;; calculated, which would not include this transaction.
                ;;
                ;; For this reason we check if the transaction contained any relevant pay to pubkeys and force a recalc
                ;; and possibly retransmit if so.  The recalculation process will end up including the tx hash into the
                ;; filter.  In case (1), we need to retransmit the filter to the connected peers.  In case (2), we don't
                ;; and shouldn't, we should just recalculate and cache the new filter for next time.

                (§ for (§ var #_"TransactionOutput" (§ name output)) :for (.. tx (getOutputs)))
                (§ block
                    (§ if (§ expr (.. output (getScriptPubKey) (isSentToRawPubKey)) && (.. output (isMine wallet))))
                    (§ block
                        (§ if (== (.. tx (getConfidence) (getConfidenceType)) TransactionConfidence/ConfidenceType/BUILDING))
                        (§ block
                            (recalculateFastCatchupAndFilter FilterRecalculateMode/SEND_IF_CHANGED)
                        )
                        (§ else )
                        (§ block
                            (recalculateFastCatchupAndFilter FilterRecalculateMode/DONT_SEND)
                        )
                        (§ return nil)
                    )
                )
                nil
            )
        )))

    ;; Exponential backoff for peers starts at 1 second and maxes at 10 minutes.
    #_private
    (§ field- #_"ExponentialBackoff.Params" (§ name peerBackoffParams) (§ new #_"ExponentialBackoff.Params" 1000, 1.5, (§ expr 10 * 60 * 1000)))
    ;; Tracks failures globally in case of a network failure.
    #_guarded-by(§ opt "lock")
    #_private
    (§ field- #_"ExponentialBackoff" (§ name groupBackoff) (§ new #_"ExponentialBackoff" (§ new #_"ExponentialBackoff.Params" 1000, 1.5, (§ expr 10 * 1000))))

    ;; This is a synchronized set, so it locks on itself.  We use it to prevent TransactionBroadcast objects from
    ;; being garbage collected if nothing in the apps code holds on to them transitively.  See the discussion
    ;; in broadcastTransaction.
    #_private
    (§ field- #_"Set<TransactionBroadcast>" (§ name runningBroadcasts))

    #_private
    (§ class #_"PeerListener" (§ implements #_"GetDataEventListener", #_"BlocksDownloadedEventListener")
        #_public
        (§ constructor #_"PeerListener" [])
        (§ block
            this
        )

        #_override
        #_public
        (§ method #_"List<Message>" (§ fn getData) [#_"Peer" (§ name peer), #_"GetDataMessage" (§ name m)])
        (§ block
            (handleGetData m)
        )

        #_override
        #_public
        (§ method #_"void" (§ fn onBlocksDownloaded) [#_"Peer" (§ name peer), #_"Block" (§ name block), #_nilable #_"FilteredBlock" (§ name filteredBlock), #_"int" (§ name blocksLeft)])
        (§ block
            (§ if (some? chain))
            (§ block
                (§ var #_"double" (§ name rate) (.. chain (getFalsePositiveRate)))
                (§ var #_"double" (§ name target) (* (.. bloomFilterMerger (getBloomFilterFPRate)) MAX_FP_RATE_INCREASE))
                (§ if (< target rate))
                (§ block
                    ;; TODO: Avoid hitting this path if the remote peer didn't acknowledge applying a new filter yet.
                    (§ if (.. log (isDebugEnabled)))
                    (§ block
                        (.. log (debug "Force update Bloom filter due to high false positive rate ({} vs {})", rate, target))
                    )

                    (recalculateFastCatchupAndFilter FilterRecalculateMode/FORCE_SEND_FOR_REFRESH)
                )
            )
            nil
        )
    )

    #_private
    (§ class #_"PeerStartupListener" (§ implements #_"PeerConnectedEventListener", #_"PeerDisconnectedEventListener")
        #_override
        #_public
        (§ method #_"void" (§ fn onPeerConnected) [#_"Peer" (§ name peer), #_"int" (§ name peerCount)])
        (§ block
            (handleNewPeer peer)
            nil
        )

        #_override
        #_public
        (§ method #_"void" (§ fn onPeerDisconnected) [#_"Peer" (§ name peer), #_"int" (§ name peerCount)])
        (§ block
            ;; The channel will be automatically removed from channels.
            (handlePeerDeath peer, nil)
            nil
        )
    )

    #_private
    (§ field- #_"PeerStartupListener" (§ name startupListener) (§ new #_"PeerStartupListener"))

    ;;;
     ; The default Bloom filter false positive rate, which is selected to be extremely low such that you hardly ever
     ; download false positives.  This provides maximum performance.  Although this default can be overridden to push
     ; the FP rate higher, due to <a href="https://groups.google.com/forum/#!msg/bitcoinj/Ys13qkTwcNg/9qxnhwnkeoIJ">
     ; various complexities</a> there are still ways a remote peer can deanonymize the users wallet.  This is why the
     ; FP rate is chosen for performance rather than privacy.  If a future version of bitcoinj fixes the known
     ; de-anonymization attacks this FP rate may rise again (or more likely, become expressed as a bandwidth allowance).
     ;;
    #_public
    #_static
    (§ def #_"double" (§ name DEFAULT_BLOOM_FILTER_FP_RATE) 0.00001)
    ;;; Maximum increase in FP rate before forced refresh of the bloom filter. ;;
    #_public
    #_static
    (§ def #_"double" (§ name MAX_FP_RATE_INCREASE) 10.0)
    ;; An object that calculates bloom filters given a list of filter providers, whilst tracking some state useful
    ;; for privacy purposes.
    #_private
    (§ field- #_"FilterMerger" (§ name bloomFilterMerger))

    ;;; The default timeout between when a connection attempt begins and version message exchange completes. ;;
    #_public
    #_static
    (§ def #_"int" (§ name DEFAULT_CONNECT_TIMEOUT_MILLIS) 5000)
    #_private
    #_volatile
    (§ field- #_"int" (§ name vConnectTimeoutMillis) DEFAULT_CONNECT_TIMEOUT_MILLIS)

    ;;; Whether bloom filter support is enabled when using a non FullPrunedBlockchain. ;;
    #_private
    #_volatile
    (§ field- #_"boolean" (§ name vBloomFilteringEnabled) true)

    ;;; See {@link #PeerGroup(Context)}. ;;
    #_public
    (§ constructor #_"PeerGroup" [#_"NetworkParameters" (§ name params)])
    (§ block
        (§ this params, nil)
        this
    )

    ;;;
     ; Creates a PeerGroup with the given context.  No chain is provided so this node will report its chain height
     ; as zero to other peers.  This constructor is useful if you just want to explore the network but aren't interested
     ; in downloading block data.
     ;;
    #_public
    (§ constructor #_"PeerGroup" [#_"Context" (§ name context)])
    (§ block
        (§ this context, nil)
        this
    )

    ;;; See {@link #PeerGroup(Context, AbstractBlockChain)}. ;;
    #_public
    (§ constructor #_"PeerGroup" [#_"NetworkParameters" (§ name params), #_nilable #_"AbstractBlockChain" (§ name chain)])
    (§ block
        (§ this (Context/getOrCreate params), chain, (§ new #_"NioClientManager"))
        this
    )

    ;;;
     ; Creates a PeerGroup for the given context and chain.  Blocks will be passed to the chain as they are broadcast
     ; and downloaded.  This is probably the constructor you want to use.
     ;;
    #_public
    (§ constructor #_"PeerGroup" [#_"Context" (§ name context), #_nilable #_"AbstractBlockChain" (§ name chain)])
    (§ block
        (§ this context, chain, (§ new #_"NioClientManager"))
        this
    )

    ;;; See {@link #PeerGroup(Context, AbstractBlockChain, ClientConnectionManager)}. ;;
    #_public
    (§ constructor #_"PeerGroup" [#_"NetworkParameters" (§ name params), #_nilable #_"AbstractBlockChain" (§ name chain), #_"ClientConnectionManager" (§ name connectionManager)])
    (§ block
        (§ this (Context/getOrCreate params), chain, connectionManager)
        this
    )

    ;;;
     ; Creates a new PeerGroup allowing you to specify the {@link ClientConnectionManager} which is used to create new
     ; connections and keep track of existing ones.
     ;;
    #_private
    (§ constructor- #_"PeerGroup" [#_"Context" (§ name context), #_nilable #_"AbstractBlockChain" (§ name chain), #_"ClientConnectionManager" (§ name connectionManager)])
    (§ block
        (Preconditions/checkNotNull context)

        (§ ass (§ name (.. this params)) (.. context (getParams)))
        (§ ass (§ name (.. this chain)) chain)
        (§ ass (§ name fastCatchupTimeSecs) (.. params (getGenesisBlock) (getTimeSeconds)))
        (§ ass (§ name wallets) (§ new #_"CopyOnWriteArrayList<>"))
        (§ ass (§ name peerFilterProviders) (§ new #_"CopyOnWriteArrayList<>"))

        (§ ass (§ name executor) (createPrivateExecutor))

        ;; This default sentinel value will be overridden by one of two actions:
        ;;   - adding a peer discovery source sets it to the default.
        ;;   - using connectTo() will increment it by one.
        (§ ass (§ name maxConnections) 0)

        (§ var #_"int" (§ name height) (if (some? chain) (.. chain (getBestChainHeight)) 0))
        (§ ass (§ name versionMessage) (§ new #_"VersionMessage" params, height))
        ;; We never request that the remote node wait for a bloom filter yet, as we have no wallets.
        (§ ass (§ name (.. versionMessage relayTxesBeforeFilter)) true)

        (§ ass (§ name downloadTxDependencyDepth) Integer/MAX_VALUE)

        (§ ass (§ name inactives) (§ new #_"PriorityQueue<>" 1, (§ new #_"Comparator<PeerAddress>")
        (§ anon
            #_suppress(§ opt "FieldAccessNotGuarded") ;; Only called when inactives is accessed, and lock is held then.
            #_override
            #_public
            (§ method #_"int" (§ fn compare) [#_"PeerAddress" (§ name a), #_"PeerAddress" (§ name b)])
            (§ block
                (Preconditions/checkState (.. lock (isHeldByCurrentThread)))

                (§ var #_"int" (§ name result) (.. backoffMap (get a) (compareTo (.. backoffMap (get b)))))
                ;; Sort by port if otherwise equals - for testing.
                (§ if (§ expr result == 0))
                (§ block
                    (§ ass (§ name result) (Ints/compare (.. a (getPort)), (.. b (getPort))))
                )
                result
            )
        )))
        (§ ass (§ name backoffMap) (§ new #_"HashMap<>"))
        (§ ass (§ name peers) (§ new #_"CopyOnWriteArrayList<>"))
        (§ ass (§ name pendingPeers) (§ new #_"CopyOnWriteArrayList<>"))
        (§ ass (§ name channels) connectionManager)
        (§ ass (§ name peerDiscoverers) (§ new #_"CopyOnWriteArraySet<>"))
        (§ ass (§ name runningBroadcasts) (Collections/synchronizedSet (§ new #_"HashSet<TransactionBroadcast>")))
        (§ ass (§ name bloomFilterMerger) (§ new #_"FilterMerger" DEFAULT_BLOOM_FILTER_FP_RATE))
        (§ ass (§ name vMinRequiredProtocolVersion) (.. params (getProtocolVersionNum NetworkParameters/ProtocolVersion/BLOOM_FILTER)))
        this
    )

    #_private
    (§ field- #_"CountDownLatch" (§ name executorStartupLatch) (§ new #_"CountDownLatch" 1))

    #_protected
    (§ method #_"ListeningScheduledExecutorService" (§ fn createPrivateExecutor) [])
    (§ block
        (§ var #_"ListeningScheduledExecutorService" (§ name result) (MoreExecutors/listeningDecorator (§ new #_"ScheduledThreadPoolExecutor" 1, (§ new #_"ContextPropagatingThreadFactory" "PeerGroup Thread"))))
        ;; Hack: jam the executor so jobs just queue up until the user calls start() on us.  For example, adding a wallet
        ;; results in a bloom filter recalc being queued, but we don't want to do that until we're actually started.
        (.. result (execute (§ new #_"Runnable")
        (§ anon
            #_override
            #_public
            (§ method #_"void" (§ fn run) [])
            (§ block
                (Uninterruptibles/awaitUninterruptibly executorStartupLatch)
                nil
            )
        )))
        result
    )

    ;;;
     ; This is how many milliseconds we wait for peer discoveries to return their results.
     ;;
    #_public
    (§ method #_"void" (§ fn setPeerDiscoveryTimeoutMillis) [#_"long" (§ name peerDiscoveryTimeoutMillis)])
    (§ block
        (§ ass (§ name (.. this vPeerDiscoveryTimeoutMillis)) peerDiscoveryTimeoutMillis)
        nil
    )

    ;;;
     ; Adjusts the desired number of connections that we will create to peers.  Note that if there are already peers
     ; open and the new value is lower than the current number of peers, those connections will be terminated.
     ; Likewise if there aren't enough current connections to meet the new requested max size, some will be added.
     ;;
    #_public
    (§ method #_"void" (§ fn setMaxConnections) [#_"int" (§ name maxConnections)])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ ass (§ name (.. this maxConnections)) maxConnections)
            (§ if (§ not (isRunning)))
            (§ block
                (§ return nil)
            )
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )

        ;; We may now have too many or too few open connections.  Add more or drop some to get to the right amount.
        (§ var #_"int" (§ name adjustment) (§ expr maxConnections - (.. channels (getConnectedClientCount))))
        (§ if (< 0 adjustment))
        (§ block
            (triggerConnections)
        )

        (§ if (< adjustment 0))
        (§ block
            (.. channels (closeConnections (§ neg adjustment)))
        )
        nil
    )

    ;;;
     ; Configure download of pending transaction dependencies.  A change of values only takes effect for newly connected peers.
     ;;
    #_public
    (§ method #_"void" (§ fn setDownloadTxDependencies) [#_"int" (§ name depth)])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ ass (§ name (.. this downloadTxDependencyDepth)) depth)
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
        nil
    )

    #_private
    (§ field- #_"Runnable" (§ name triggerConnectionsJob) (§ new #_"Runnable"
        (§ anon
            #_private
            (§ field- #_"boolean" (§ name firstRun) true)
            #_private
            #_static
            (§ def- #_"long" (§ name MIN_PEER_DISCOVERY_INTERVAL) 1000)

            #_override
            #_public
            (§ method #_"void" (§ fn run) [])
            (§ block
                (§ try )
                (§ block
                    (go)
                )
                (§ catch #_"Throwable" (§ name e))
                (§ block
                    (.. log (error "Exception when trying to build connections", e)) ;; The executor swallows exceptions :( ;; )
                )
                nil
            )

            #_public
            (§ method #_"void" (§ fn go) [])
            (§ block
                (§ if (§ not vRunning))
                (§ block
                    (§ return nil)
                )

                (§ var #_"boolean" (§ name doDiscovery) false)
                (§ var #_"long" (§ name now) (Utils/currentTimeMillis))
                (.. lock (lock))
                (§ try )
                (§ block
                    ;; First run: try and use a local node if there is one, for the additional security it can provide.
                    ;; But, not on Android as there are none for this platform: it could only be a malicious app trying
                    ;; to hijack our traffic.
                    (§ if (§ expr (§ not (Utils/isAndroidRuntime)) && useLocalhostPeerWhenPossible && (maybeCheckForLocalhostPeer) && firstRun))
                    (§ block
                        (.. log (info "Localhost peer detected, trying to use it instead of P2P discovery"))
                        (§ ass (§ name maxConnections) 0)
                        (connectToLocalHost)
                        (§ return nil)
                    )

                    (§ var #_"boolean" (§ name havePeerWeCanTry) (§ expr (§ not (.. inactives (isEmpty))) && (.. backoffMap (get (.. inactives (peek))) (getRetryTime)) <= now))
                    (§ ass (§ name doDiscovery) (§ not havePeerWeCanTry))
                )
                (§ finally )
                (§ block
                    (§ ass (§ name firstRun) false)
                    (.. lock (unlock))
                )

                ;; Don't hold the lock across discovery as this process can be very slow.
                (§ var #_"boolean" (§ name discoverySuccess) false)
                (§ if doDiscovery)
                (§ block
                    (§ try )
                    (§ block
                        (§ ass (§ name discoverySuccess) (< 0 (discoverPeers)))
                    )
                    (§ catch #_"PeerDiscoveryException" (§ name e))
                    (§ block
                        (.. log (error "Peer discovery failure", e))
                    )
                )

                (§ var #_"long" (§ name retryTime))
                (§ var #_"PeerAddress" (§ name addrToTry))
                (.. lock (lock))
                (§ try )
                (§ block
                    (§ if doDiscovery)
                    (§ block
                        ;; Require that we have enough connections, to consider this a success,
                        ;; or we just constantly test for new peers.
                        (§ if (§ expr discoverySuccess && (getMaxConnections) <= (countConnectedAndPendingPeers)))
                        (§ block
                            (.. groupBackoff (trackSuccess))
                        )
                        (§ else )
                        (§ block
                            (.. groupBackoff (trackFailure))
                        )
                    )
                    ;; Inactives is sorted by backoffMap time.
                    (§ if (.. inactives (isEmpty)))
                    (§ block
                        (§ if (< (countConnectedAndPendingPeers) (getMaxConnections)))
                        (§ block
                            (§ var #_"long" (§ name interval) (Math/max (§ expr (.. groupBackoff (getRetryTime)) - now), MIN_PEER_DISCOVERY_INTERVAL))
                            (.. log (info (§ str "Peer discovery didn't provide us any more peers, will try again in " + interval + "ms.")))
                            (.. executor (schedule this, interval, TimeUnit/MILLISECONDS))
                        )
                        (§ else )
                        (§ block
                            ;; We have enough peers and discovery provided no more, so just settle down.
                            ;; Most likely we were given a fixed set of addresses in some test scenario.
                        )
                        (§ return nil)
                    )
                    (§ else )
                    (§ block
                        (§ do )
                        (§ block
                            (§ ass (§ name addrToTry) (.. inactives (poll)))
                        )
                        (§ again (§ expr ipv6Unreachable && (§ insta (.. addrToTry (getAddr)) #_"Inet6Address")))
                        (§ ass (§ name retryTime) (.. backoffMap (get addrToTry) (getRetryTime)))
                    )
                    (§ ass (§ name retryTime) (Math/max retryTime, (.. groupBackoff (getRetryTime))))
                    (§ if (< now retryTime))
                    (§ block
                        (§ var #_"long" (§ name delay) (- retryTime now))
                        (.. log (info "Waiting {} msec before next connect attempt {}", delay, (if (some? addrToTry) (§ str "to " + addrToTry) "")))
                        (.. inactives (add addrToTry))
                        (.. executor (schedule this, delay, TimeUnit/MILLISECONDS))
                        (§ return nil)
                    )
                    (connectTo addrToTry, false, vConnectTimeoutMillis)
                )
                (§ finally )
                (§ block
                    (.. lock (unlock))
                )
                (§ if (< (countConnectedAndPendingPeers) (getMaxConnections)))
                (§ block
                    (.. executor (execute this)) ;; Try next peer immediately.
                )
                nil
            )
        )))

    #_private
    (§ method- #_"void" (§ fn triggerConnections) [])
    (§ block
        ;; Run on a background thread due to the need to potentially retry and back off in the background.
        (§ if (§ not (.. executor (isShutdown))))
        (§ block
            (.. executor (execute triggerConnectionsJob))
        )
        nil
    )

    ;;; The maximum number of connections that we will create to peers. ;;
    #_public
    (§ method #_"int" (§ fn getMaxConnections) [])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ return maxConnections)
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    #_private
    (§ method- #_"List<Message>" (§ fn handleGetData) [#_"GetDataMessage" (§ name m)])
    (§ block
        ;; Scans the wallets and memory pool for transactions in the getdata message and returns them.
        ;; Runs on peer threads.
        (.. lock (lock))
        (§ try )
        (§ block
            (§ var #_"LinkedList<Message>" (§ name transactions) (§ new #_"LinkedList<>"))
            (§ var #_"LinkedList<InventoryItem>" (§ name items) (§ new #_"LinkedList<>" (.. m (getItems))))
            (§ var #_"Iterator<InventoryItem>" (§ name it) (.. items (iterator)))
            (§ while (.. it (hasNext)))
            (§ block
                (§ var #_"InventoryItem" (§ name item) (.. it (next)))
                ;; Check the wallets.
                (§ for (§ var #_"Wallet" (§ name w)) :for wallets)
                (§ block
                    (§ var #_"Transaction" (§ name tx) (.. w (getTransaction (.. item hash))))
                    (§ if (some? tx))
                    (§ block
                        (.. transactions (add tx))
                        (.. it (remove))
                        (§ break )
                    )
                )
            )
            (§ return transactions)
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    ;;;
     ; Sets the {@link VersionMessage} that will be announced on newly created connections.  A version message is
     ; primarily interesting because it lets you customize the "subVer" field which is used a bit like the User-Agent
     ; field from HTTP.  It means your client tells the other side what it is, see
     ; <a href="https://github.com/bitcoin/bips/blob/master/bip-0014.mediawiki">BIP 14</a>.
     ;
     ; The VersionMessage you provide is copied and the best chain height/time filled in for each new connection,
     ; therefore you don't have to worry about setting that.  The provided object is really more of a template.
     ;;
    #_public
    (§ method #_"void" (§ fn setVersionMessage) [#_"VersionMessage" (§ name ver)])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ ass (§ name versionMessage) ver)
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
        nil
    )

    ;;;
     ; Returns the version message provided by setVersionMessage or a default if none was given.
     ;;
    #_public
    (§ method #_"VersionMessage" (§ fn getVersionMessage) [])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ return versionMessage)
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    ;;;
     ; Sets information that identifies this software to remote nodes.  This is a convenience wrapper for creating
     ; a new {@link VersionMessage}, calling {@link VersionMessage#appendToSubVer(String, String, String)} on it,
     ; and then calling {@link PeerGroup#setVersionMessage(VersionMessage)} on the result of that.  See the docs for
     ; {@link VersionMessage#appendToSubVer(String, String, String)} for information on what the fields should contain.
     ;;
    #_public
    (§ method #_"void" (§ fn setUserAgent) [#_"String" (§ name name), #_"String" (§ name version), #_nilable #_"String" (§ name comments)])
    (§ block
        ;; TODO: Check that height is needed here (it wasnt, but it should be, no?)
        (§ var #_"int" (§ name height) (if (some? chain) (.. chain (getBestChainHeight)) 0))
        (§ var #_"VersionMessage" (§ name ver) (§ new #_"VersionMessage" params, height))
        (§ ass (§ name (.. ver relayTxesBeforeFilter)) false)
        (updateVersionMessageRelayTxesBeforeFilter ver)
        (.. ver (appendToSubVer name, version, comments))
        (setVersionMessage ver)
        nil
    )

    ;; Updates the relayTxesBeforeFilter flag of ver.
    #_private
    (§ method- #_"void" (§ fn updateVersionMessageRelayTxesBeforeFilter) [#_"VersionMessage" (§ name ver)])
    (§ block
        ;; We will provide the remote node with a bloom filter (i.e. they shouldn't relay yet)
        ;; if chain == null || !chain.shouldVerifyTransactions() and a wallet is added and bloom filters are enabled.
        ;; Note that the default here means that no tx invs will be received if no wallet is ever added.
        (.. lock (lock))
        (§ try )
        (§ block
            (§ var #_"boolean" (§ name spvMode) (§ expr chain != nil && (§ not (.. chain (shouldVerifyTransactions)))))
            (§ var #_"boolean" (§ name willSendFilter) (§ expr spvMode && 0 < (.. peerFilterProviders (size)) && vBloomFilteringEnabled))
            (§ ass (§ name (.. ver relayTxesBeforeFilter)) (§ not willSendFilter))
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
        nil
    )

    ;;;
     ; Sets information that identifies this software to remote nodes.  This is a convenience wrapper for creating
     ; a new {@link VersionMessage}, calling {@link VersionMessage#appendToSubVer(String, String, String)} on it,
     ; and then calling {@link PeerGroup#setVersionMessage(VersionMessage)} on the result of that.  See the docs for
     ; {@link VersionMessage#appendToSubVer(String, String, String)} for information on what the fields should contain.
     ;;
    #_public
    (§ method #_"void" (§ fn setUserAgent) [#_"String" (§ name name), #_"String" (§ name version)])
    (§ block
        (setUserAgent name, version, nil)
        nil
    )

    ;;; See {@link Peer#addBlocksDownloadedEventListener(BlocksDownloadedEventListener)}. ;;
    #_public
    (§ method #_"void" (§ fn addBlocksDownloadedEventListener) [#_"BlocksDownloadedEventListener" (§ name listener)])
    (§ block
        (addBlocksDownloadedEventListener Threading/USER_THREAD, listener)
        nil
    )

    ;;;
     ; <p>Adds a listener that will be notified on the given executor when
     ; blocks are downloaded by the download peer.</p>
     ; @see Peer#addBlocksDownloadedEventListener(Executor, BlocksDownloadedEventListener)
     ;;
    #_public
    (§ method #_"void" (§ fn addBlocksDownloadedEventListener) [#_"Executor" (§ name executor), #_"BlocksDownloadedEventListener" (§ name listener)])
    (§ block
        (.. peersBlocksDownloadedEventListeners (add (§ new #_"ListenerRegistration<>" (Preconditions/checkNotNull listener), executor)))
        (§ for (§ var #_"Peer" (§ name peer)) :for (getConnectedPeers))
        (§ block
            (.. peer (addBlocksDownloadedEventListener executor, listener))
        )
        (§ for (§ var #_"Peer" (§ name peer)) :for (getPendingPeers))
        (§ block
            (.. peer (addBlocksDownloadedEventListener executor, listener))
        )
        nil
    )

    ;;; See {@link Peer#addBlocksDownloadedEventListener(BlocksDownloadedEventListener)}. ;;
    #_public
    (§ method #_"void" (§ fn addChainDownloadStartedEventListener) [#_"ChainDownloadStartedEventListener" (§ name listener)])
    (§ block
        (addChainDownloadStartedEventListener Threading/USER_THREAD, listener)
        nil
    )

    ;;;
     ; <p>Adds a listener that will be notified on the given executor when
     ; chain download starts.</p>
     ;;
    #_public
    (§ method #_"void" (§ fn addChainDownloadStartedEventListener) [#_"Executor" (§ name executor), #_"ChainDownloadStartedEventListener" (§ name listener)])
    (§ block
        (.. peersChainDownloadStartedEventListeners (add (§ new #_"ListenerRegistration<>" (Preconditions/checkNotNull listener), executor)))
        (§ for (§ var #_"Peer" (§ name peer)) :for (getConnectedPeers))
        (§ block
            (.. peer (addChainDownloadStartedEventListener executor, listener))
        )
        (§ for (§ var #_"Peer" (§ name peer)) :for (getPendingPeers))
        (§ block
            (.. peer (addChainDownloadStartedEventListener executor, listener))
        )
        nil
    )

    ;;; See {@link Peer#addConnectedEventListener(PeerConnectedEventListener)}. ;;
    #_public
    (§ method #_"void" (§ fn addConnectedEventListener) [#_"PeerConnectedEventListener" (§ name listener)])
    (§ block
        (addConnectedEventListener Threading/USER_THREAD, listener)
        nil
    )

    ;;;
     ; <p>Adds a listener that will be notified on the given executor when
     ; new peers are connected to.</p>
     ;;
    #_public
    (§ method #_"void" (§ fn addConnectedEventListener) [#_"Executor" (§ name executor), #_"PeerConnectedEventListener" (§ name listener)])
    (§ block
        (.. peerConnectedEventListeners (add (§ new #_"ListenerRegistration<>" (Preconditions/checkNotNull listener), executor)))
        (§ for (§ var #_"Peer" (§ name peer)) :for (getConnectedPeers))
        (§ block
            (.. peer (addConnectedEventListener executor, listener))
        )
        (§ for (§ var #_"Peer" (§ name peer)) :for (getPendingPeers))
        (§ block
            (.. peer (addConnectedEventListener executor, listener))
        )
        nil
    )

    ;;; See {@link Peer#addDisconnectedEventListener(PeerDisconnectedEventListener)}. ;;
    #_public
    (§ method #_"void" (§ fn addDisconnectedEventListener) [#_"PeerDisconnectedEventListener" (§ name listener)])
    (§ block
        (addDisconnectedEventListener Threading/USER_THREAD, listener)
        nil
    )

    ;;;
     ; <p>Adds a listener that will be notified on the given executor when
     ; peers are disconnected from.</p>
     ;;
    #_public
    (§ method #_"void" (§ fn addDisconnectedEventListener) [#_"Executor" (§ name executor), #_"PeerDisconnectedEventListener" (§ name listener)])
    (§ block
        (.. peerDisconnectedEventListeners (add (§ new #_"ListenerRegistration<>" (Preconditions/checkNotNull listener), executor)))
        (§ for (§ var #_"Peer" (§ name peer)) :for (getConnectedPeers))
        (§ block
            (.. peer (addDisconnectedEventListener executor, listener))
        )
        (§ for (§ var #_"Peer" (§ name peer)) :for (getPendingPeers))
        (§ block
            (.. peer (addDisconnectedEventListener executor, listener))
        )
        nil
    )

    ;;; See {@link Peer#addDiscoveredEventListener(PeerDiscoveredEventListener)}. ;;
    #_public
    (§ method #_"void" (§ fn addDiscoveredEventListener) [#_"PeerDiscoveredEventListener" (§ name listener)])
    (§ block
        (addDiscoveredEventListener Threading/USER_THREAD, listener)
        nil
    )

    ;;;
     ; <p>Adds a listener that will be notified on the given executor when new
     ; peers are discovered.</p>
     ;;
    #_public
    (§ method #_"void" (§ fn addDiscoveredEventListener) [#_"Executor" (§ name executor), #_"PeerDiscoveredEventListener" (§ name listener)])
    (§ block
        (.. peerDiscoveredEventListeners (add (§ new #_"ListenerRegistration<>" (Preconditions/checkNotNull listener), executor)))
        nil
    )

    ;;; See {@link Peer#addGetDataEventListener(GetDataEventListener)}. ;;
    #_public
    (§ method #_"void" (§ fn addGetDataEventListener) [#_"GetDataEventListener" (§ name listener)])
    (§ block
        (addGetDataEventListener Threading/USER_THREAD, listener)
        nil
    )

    ;;; See {@link Peer#addGetDataEventListener(Executor, GetDataEventListener)}. ;;
    #_public
    (§ method #_"void" (§ fn addGetDataEventListener) [#_"Executor" (§ name executor), #_"GetDataEventListener" (§ name listener)])
    (§ block
        (.. peerGetDataEventListeners (add (§ new #_"ListenerRegistration<>" (Preconditions/checkNotNull listener), executor)))
        (§ for (§ var #_"Peer" (§ name peer)) :for (getConnectedPeers))
        (§ block
            (.. peer (addGetDataEventListener executor, listener))
        )
        (§ for (§ var #_"Peer" (§ name peer)) :for (getPendingPeers))
        (§ block
            (.. peer (addGetDataEventListener executor, listener))
        )
        nil
    )

    ;;; See {@link Peer#addOnTransactionBroadcastListener(OnTransactionBroadcastListener)}. ;;
    #_public
    (§ method #_"void" (§ fn addOnTransactionBroadcastListener) [#_"OnTransactionBroadcastListener" (§ name listener)])
    (§ block
        (addOnTransactionBroadcastListener Threading/USER_THREAD, listener)
        nil
    )

    ;;; See {@link Peer#addOnTransactionBroadcastListener(OnTransactionBroadcastListener)}. ;;
    #_public
    (§ method #_"void" (§ fn addOnTransactionBroadcastListener) [#_"Executor" (§ name executor), #_"OnTransactionBroadcastListener" (§ name listener)])
    (§ block
        (.. peersTransactionBroadastEventListeners (add (§ new #_"ListenerRegistration<>" (Preconditions/checkNotNull listener), executor)))
        (§ for (§ var #_"Peer" (§ name peer)) :for (getConnectedPeers))
        (§ block
            (.. peer (addOnTransactionBroadcastListener executor, listener))
        )
        (§ for (§ var #_"Peer" (§ name peer)) :for (getPendingPeers))
        (§ block
            (.. peer (addOnTransactionBroadcastListener executor, listener))
        )
        nil
    )

    ;;; See {@link Peer#addPreMessageReceivedEventListener(PreMessageReceivedEventListener)}. ;;
    #_public
    (§ method #_"void" (§ fn addPreMessageReceivedEventListener) [#_"PreMessageReceivedEventListener" (§ name listener)])
    (§ block
        (addPreMessageReceivedEventListener Threading/USER_THREAD, listener)
        nil
    )

    ;;; See {@link Peer#addPreMessageReceivedEventListener(Executor, PreMessageReceivedEventListener)}. ;;
    #_public
    (§ method #_"void" (§ fn addPreMessageReceivedEventListener) [#_"Executor" (§ name executor), #_"PreMessageReceivedEventListener" (§ name listener)])
    (§ block
        (.. peersPreMessageReceivedEventListeners (add (§ new #_"ListenerRegistration<>" (Preconditions/checkNotNull listener), executor)))
        (§ for (§ var #_"Peer" (§ name peer)) :for (getConnectedPeers))
        (§ block
            (.. peer (addPreMessageReceivedEventListener executor, listener))
        )
        (§ for (§ var #_"Peer" (§ name peer)) :for (getPendingPeers))
        (§ block
            (.. peer (addPreMessageReceivedEventListener executor, listener))
        )
        nil
    )

    #_public
    (§ method #_"boolean" (§ fn removeBlocksDownloadedEventListener) [#_"BlocksDownloadedEventListener" (§ name listener)])
    (§ block
        (§ var #_"boolean" (§ name result) (ListenerRegistration/removeFromList listener, peersBlocksDownloadedEventListeners))
        (§ for (§ var #_"Peer" (§ name peer)) :for (getConnectedPeers))
        (§ block
            (.. peer (removeBlocksDownloadedEventListener listener))
        )
        (§ for (§ var #_"Peer" (§ name peer)) :for (getPendingPeers))
        (§ block
            (.. peer (removeBlocksDownloadedEventListener listener))
        )
        result
    )

    #_public
    (§ method #_"boolean" (§ fn removeChainDownloadStartedEventListener) [#_"ChainDownloadStartedEventListener" (§ name listener)])
    (§ block
        (§ var #_"boolean" (§ name result) (ListenerRegistration/removeFromList listener, peersChainDownloadStartedEventListeners))
        (§ for (§ var #_"Peer" (§ name peer)) :for (getConnectedPeers))
        (§ block
            (.. peer (removeChainDownloadStartedEventListener listener))
        )
        (§ for (§ var #_"Peer" (§ name peer)) :for (getPendingPeers))
        (§ block
            (.. peer (removeChainDownloadStartedEventListener listener))
        )
        result
    )

    ;;; The given event listener will no longer be called with events. ;;
    #_public
    (§ method #_"boolean" (§ fn removeConnectedEventListener) [#_"PeerConnectedEventListener" (§ name listener)])
    (§ block
        (§ var #_"boolean" (§ name result) (ListenerRegistration/removeFromList listener, peerConnectedEventListeners))
        (§ for (§ var #_"Peer" (§ name peer)) :for (getConnectedPeers))
        (§ block
            (.. peer (removeConnectedEventListener listener))
        )
        (§ for (§ var #_"Peer" (§ name peer)) :for (getPendingPeers))
        (§ block
            (.. peer (removeConnectedEventListener listener))
        )
        result
    )

    ;;; The given event listener will no longer be called with events. ;;
    #_public
    (§ method #_"boolean" (§ fn removeDisconnectedEventListener) [#_"PeerDisconnectedEventListener" (§ name listener)])
    (§ block
        (§ var #_"boolean" (§ name result) (ListenerRegistration/removeFromList listener, peerDisconnectedEventListeners))
        (§ for (§ var #_"Peer" (§ name peer)) :for (getConnectedPeers))
        (§ block
            (.. peer (removeDisconnectedEventListener listener))
        )
        (§ for (§ var #_"Peer" (§ name peer)) :for (getPendingPeers))
        (§ block
            (.. peer (removeDisconnectedEventListener listener))
        )
        result
    )

    ;;; The given event listener will no longer be called with events. ;;
    #_public
    (§ method #_"boolean" (§ fn removeDiscoveredEventListener) [#_"PeerDiscoveredEventListener" (§ name listener)])
    (§ block
        (§ var #_"boolean" (§ name result) (ListenerRegistration/removeFromList listener, peerDiscoveredEventListeners))
        result
    )

    ;;; The given event listener will no longer be called with events. ;;
    #_public
    (§ method #_"boolean" (§ fn removeGetDataEventListener) [#_"GetDataEventListener" (§ name listener)])
    (§ block
        (§ var #_"boolean" (§ name result) (ListenerRegistration/removeFromList listener, peerGetDataEventListeners))
        (§ for (§ var #_"Peer" (§ name peer)) :for (getConnectedPeers))
        (§ block
            (.. peer (removeGetDataEventListener listener))
        )
        (§ for (§ var #_"Peer" (§ name peer)) :for (getPendingPeers))
        (§ block
            (.. peer (removeGetDataEventListener listener))
        )
        result
    )

    ;;; The given event listener will no longer be called with events. ;;
    #_public
    (§ method #_"boolean" (§ fn removeOnTransactionBroadcastListener) [#_"OnTransactionBroadcastListener" (§ name listener)])
    (§ block
        (§ var #_"boolean" (§ name result) (ListenerRegistration/removeFromList listener, peersTransactionBroadastEventListeners))
        (§ for (§ var #_"Peer" (§ name peer)) :for (getConnectedPeers))
        (§ block
            (.. peer (removeOnTransactionBroadcastListener listener))
        )
        (§ for (§ var #_"Peer" (§ name peer)) :for (getPendingPeers))
        (§ block
            (.. peer (removeOnTransactionBroadcastListener listener))
        )
        result
    )

    #_public
    (§ method #_"boolean" (§ fn removePreMessageReceivedEventListener) [#_"PreMessageReceivedEventListener" (§ name listener)])
    (§ block
        (§ var #_"boolean" (§ name result) (ListenerRegistration/removeFromList listener, peersPreMessageReceivedEventListeners))
        (§ for (§ var #_"Peer" (§ name peer)) :for (getConnectedPeers))
        (§ block
            (.. peer (removePreMessageReceivedEventListener listener))
        )
        (§ for (§ var #_"Peer" (§ name peer)) :for (getPendingPeers))
        (§ block
            (.. peer (removePreMessageReceivedEventListener listener))
        )
        result
    )

    ;;;
     ; Returns a newly allocated list containing the currently connected peers.
     ; If all you care about is the count, use numConnectedPeers().
     ;;
    #_public
    (§ method #_"List<Peer>" (§ fn getConnectedPeers) [])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ return (§ new #_"ArrayList<>" peers))
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    ;;;
     ; Returns a list containing Peers that did not complete connection yet.
     ;;
    #_public
    (§ method #_"List<Peer>" (§ fn getPendingPeers) [])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ return (§ new #_"ArrayList<>" pendingPeers))
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    ;;;
     ; Add an address to the list of potential peers to connect to.  It won't necessarily be used unless there's a need
     ; to build new connections to reach the max connection count.
     ;
     ; @param peerAddress IP/port to use.
     ;;
    #_public
    (§ method #_"void" (§ fn addAddress) [#_"PeerAddress" (§ name peerAddress)])
    (§ block
        (§ var #_"int" (§ name newMax))
        (.. lock (lock))
        (§ try )
        (§ block
            (addInactive peerAddress)
            (§ ass (§ name newMax) (+ (getMaxConnections) 1))
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
        (setMaxConnections newMax)
        nil
    )

    #_private
    (§ method- #_"void" (§ fn addInactive) [#_"PeerAddress" (§ name peerAddress)])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            ;; Deduplicate.
            (§ if (.. backoffMap (containsKey peerAddress)))
            (§ block
                (§ return nil)
            )
            (.. backoffMap (put peerAddress, (§ new #_"ExponentialBackoff" peerBackoffParams)))
            (.. inactives (offer peerAddress))
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
        nil
    )

    ;;;
     ; Convenience for connecting only to peers that can serve specific services.
     ; It will configure suitable peer discoveries.
     ; @param requiredServices Required services as a bitmask, e.g. {@link VersionMessage#NODE_NETWORK}.
     ;;
    #_public
    (§ method #_"void" (§ fn setRequiredServices) [#_"long" (§ name requiredServices)])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ ass (§ name (.. this requiredServices)) requiredServices)
            (.. peerDiscoverers (clear))
            (addPeerDiscovery (MultiplexingDiscovery/forServices params, requiredServices))
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
        nil
    )

    ;;; Convenience method for addAddress(new PeerAddress(address, params.port)). ;;
    #_public
    (§ method #_"void" (§ fn addAddress) [#_"InetAddress" (§ name address)])
    (§ block
        (addAddress (§ new #_"PeerAddress" params, address, (.. params (getPort))))
        nil
    )

    ;;;
     ; Add addresses from a discovery source to the list of potential peers to connect to.
     ; If max connections has not been configured, or set to zero, then it's set to the default at this point.
     ;;
    #_public
    (§ method #_"void" (§ fn addPeerDiscovery) [#_"PeerDiscovery" (§ name peerDiscovery)])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ if (== (getMaxConnections) 0))
            (§ block
                (setMaxConnections DEFAULT_CONNECTIONS)
            )
            (.. peerDiscoverers (add peerDiscovery))
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
        nil
    )

    ;;; Returns number of discovered peers. ;;
    #_protected
    (§ method #_"int" (§ fn discoverPeers) [])
        (§ throws #_"PeerDiscoveryException")
    (§ block
        ;; Don't hold the lock whilst doing peer discovery: it can take a long time and cause high API latency.
        (Preconditions/checkState (§ not (.. lock (isHeldByCurrentThread))))

        (§ var #_"int" (§ name maxPeersToDiscoverCount) (.. this vMaxPeersToDiscoverCount))
        (§ var #_"long" (§ name peerDiscoveryTimeoutMillis) (.. this vPeerDiscoveryTimeoutMillis))
        (§ var #_"Stopwatch" (§ name watch) (Stopwatch/createStarted))
        (§ var #_"List<PeerAddress>" (§ name addressList) (Lists/newLinkedList))

        (§ for (§ var #_"PeerDiscovery" (§ name peerDiscovery)) :for peerDiscoverers) ;; COW
        (§ block
            (§ var #_"InetSocketAddress[]" (§ name addresses) (.. peerDiscovery (getPeers requiredServices, peerDiscoveryTimeoutMillis, TimeUnit/MILLISECONDS)))
            (§ for (§ var #_"InetSocketAddress" (§ name address)) :for addresses)
            (§ block
                (.. addressList (add (§ new #_"PeerAddress" params, address)))
            )
            (§ if (§ expr maxPeersToDiscoverCount <= (.. addressList (size))))
            (§ block
                (§ break )
            )
        )

        (§ if (§ not (.. addressList (isEmpty))))
        (§ block
            (§ for (§ var #_"PeerAddress" (§ name address)) :for addressList)
            (§ block
                (addInactive address)
            )

            (§ var #_"ImmutableSet<PeerAddress>" (§ name peersDiscoveredSet) (ImmutableSet/copyOf addressList))
            (§ for (§ var ListenerRegistration<PeerDiscoveredEventListener> registration) :for peerDiscoveredEventListeners) ;; COW
            (§ block
                (.. registration executor (execute (§ new #_"Runnable")
                (§ anon
                    #_override
                    #_public
                    (§ method #_"void" (§ fn run) [])
                    (§ block
                        (.. registration listener (onPeersDiscovered peersDiscoveredSet))
                        nil
                    )
                )))
            )
        )
        (.. watch (stop))
        (.. log (info "Peer discovery took {} and returned {} items", watch, (.. addressList (size))))
        (.. addressList (size))
    )

    #_testing
    (§ method #_"void" (§ fn waitForJobQueue) [])
    (§ block
        (Futures/getUnchecked (.. executor (submit (Runnables/doNothing))))
        nil
    )

    #_private
    (§ method- #_"int" (§ fn countConnectedAndPendingPeers) [])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ return (+ (.. peers (size)) (.. pendingPeers (size))))
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    #_private
    (§ enum #_"LocalhostCheckState"
        (§ item NOT_TRIED)
        (§ item FOUND)
        (§ item FOUND_AND_CONNECTED)
        (§ item NOT_THERE)
    )
    #_private
    (§ field- #_"LocalhostCheckState" (§ name localhostCheckState) LocalhostCheckState/NOT_TRIED)

    #_private
    (§ method- #_"boolean" (§ fn maybeCheckForLocalhostPeer) [])
    (§ block
        (Preconditions/checkState (.. lock (isHeldByCurrentThread)))

        (§ if (§ expr localhostCheckState == LocalhostCheckState/NOT_TRIED))
        (§ block
            ;; Do a fast blocking connect to see if anything is listening.
            (§ var #_"Socket" (§ name socket) nil)
            (§ try )
            (§ block
                (§ ass (§ name socket) (§ new #_"Socket"))
                (.. socket (connect (§ new #_"InetSocketAddress" (InetAddresses/forString "127.0.0.1"), (.. params (getPort))), vConnectTimeoutMillis))
                (§ ass (§ name localhostCheckState) LocalhostCheckState/FOUND)
                (§ return true)
            )
            (§ catch #_"IOException" (§ name e))
            (§ block
                (.. log (info "Localhost peer not detected."))
                (§ ass (§ name localhostCheckState) LocalhostCheckState/NOT_THERE)
            )
            (§ finally )
            (§ block
                (§ if (some? socket))
                (§ block
                    (§ try )
                    (§ block
                        (.. socket (close))
                    )
                    (§ catch #_"IOException" (§ name _))
                    (§ block
                        ;; Ignore.
                    )
                )
            )
        )
        false
    )

    ;;;
     ; Starts the PeerGroup and begins network activity.
     ; @return A future that completes when first connection activity has been triggered (note: not first connection made).
     ;;
    #_public
    (§ method #_"ListenableFuture" (§ fn startAsync) [])
    (§ block
        ;; This is run in a background thread by the Service implementation.
        (§ if (nil? chain))
        (§ block
            ;; Just try to help catch what might be a programming error.
            (.. log (warn "Starting up with no attached block chain. Did you forget to pass one to the constructor?"))
        )
        (Preconditions/checkState (§ not vUsedUp), "Cannot start a peer group twice")

        (§ ass (§ name vRunning) true)
        (§ ass (§ name vUsedUp) true)
        (.. executorStartupLatch (countDown))

        ;; We do blocking waits during startup, so run on the executor thread.
        (§ return (.. executor (submit (§ new #_"Runnable")
        (§ anon
            #_override
            #_public
            (§ method #_"void" (§ fn run) [])
            (§ block
                (§ try )
                (§ block
                    (.. log (info "Starting ..."))
                    (.. channels (startAsync))
                    (.. channels (awaitRunning))
                    (triggerConnections)
                    (setupPinging)
                )
                (§ catch #_"Throwable" (§ name e))
                (§ block
                    (.. log (error "Exception when starting up", e)) ;; The executor swallows exceptions :( ;; )
                )
                nil
            )
        ))))
    )

    ;;; Does a blocking startup. ;;
    #_public
    (§ method #_"void" (§ fn start) [])
    (§ block
        (Futures/getUnchecked (startAsync))
        nil
    )

    ;;; Can just use start() for a blocking start here instead of startAsync/awaitRunning: PeerGroup is no longer a Guava service. ;;
    #_deprecated
    #_public
    (§ method #_"void" (§ fn awaitRunning) [])
    (§ block
        (waitForJobQueue)
        nil
    )

    #_public
    (§ method #_"ListenableFuture" (§ fn stopAsync) [])
    (§ block
        (Preconditions/checkState vRunning)
        (§ ass (§ name vRunning) false)
        (§ var #_"ListenableFuture" (§ name future) (.. executor (submit (§ new #_"Runnable")
        (§ anon
            #_override
            #_public
            (§ method #_"void" (§ fn run) [])
            (§ block
                (§ try )
                (§ block
                    (.. log (info "Stopping ..."))
                    ;; Blocking close of all sockets.
                    (.. channels (stopAsync))
                    (.. channels (awaitTerminated))
                    (§ for (§ var #_"PeerDiscovery" (§ name peerDiscovery)) :for peerDiscoverers)
                    (§ block
                        (.. peerDiscovery (shutdown))
                    )
                    (§ ass (§ name vRunning) false)
                    (.. log (info "Stopped."))
                )
                (§ catch #_"Throwable" (§ name e))
                (§ block
                    (.. log (error "Exception when shutting down", e)) ;; The executor swallows exceptions :( ;; )
                )
                nil
            )
        ))))
        (.. executor (shutdown))
        future
    )

    ;;; Does a blocking stop. ;;
    #_public
    (§ method #_"void" (§ fn stop) [])
    (§ block
        (§ try )
        (§ block
            (stopAsync)
            (.. log (info "Awaiting PeerGroup shutdown ..."))
            (.. executor (awaitTermination Long/MAX_VALUE, TimeUnit/SECONDS))
        )
        (§ catch #_"InterruptedException" (§ name e))
        (§ block
            (§ throw (§ new #_"RuntimeException" e))
        )
        nil
    )

    ;;; Can just use stop() here instead of stopAsync/awaitTerminated: PeerGroup is no longer a Guava service. ;;
    #_deprecated
    #_public
    (§ method #_"void" (§ fn awaitTerminated) [])
    (§ block
        (§ try )
        (§ block
            (.. executor (awaitTermination Long/MAX_VALUE, TimeUnit/SECONDS))
        )
        (§ catch #_"InterruptedException" (§ name e))
        (§ block
            (§ throw (§ new #_"RuntimeException" e))
        )
        nil
    )

    ;;;
     ; <p>Link the given wallet to this PeerGroup.  This is used for three purposes:</p>
     ;
     ; <ol>
     ;   <li>So the wallet receives broadcast transactions.</li>
     ;   <li>Announcing pending transactions that didn't get into the chain yet to our peers.</li>
     ;   <li>Set the fast catchup time using {@link PeerGroup#setFastCatchupTimeSecs(long)} to optimize chain download.</li>
     ; </ol>
     ;
     ; <p>Note that this should be done before chain download commences because if you add a wallet with keys earlier
     ; than the current chain head, the relevant parts of the chain won't be redownloaded for you.</p>
     ;
     ; <p>The Wallet will have an event listener registered on it, so to avoid leaks remember to use
     ; {@link PeerGroup#removeWallet(Wallet)} on it if you wish to keep the Wallet but lose the PeerGroup.</p>
     ;;
    #_public
    (§ method #_"void" (§ fn addWallet) [#_"Wallet" (§ name wallet)])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (Preconditions/checkNotNull wallet)
            (Preconditions/checkState (§ not (.. wallets (contains wallet))))
            (.. wallets (add wallet))
            (.. wallet (setTransactionBroadcaster this))
            (.. wallet (addCoinsReceivedEventListener Threading/SAME_THREAD, walletCoinsReceivedEventListener))
            (.. wallet (addKeyChainEventListener Threading/SAME_THREAD, walletKeyEventListener))
            (addPeerFilterProvider wallet)
            (§ for (§ var #_"Peer" (§ name peer)) :for peers)
            (§ block
                (.. peer (addWallet wallet))
            )
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
        nil
    )

    ;;;
     ; <p>Link the given PeerFilterProvider to this PeerGroup.
     ; DO NOT use this for Wallets, use {@link PeerGroup#addWallet(Wallet)} instead.</p>
     ;
     ; <p>Note that this should be done before chain download commences because if you add a listener with keys earlier
     ; than the current chain head, the relevant parts of the chain won't be redownloaded for you.</p>
     ;
     ; <p>This method invokes {@link PeerGroup#recalculateFastCatchupAndFilter(FilterRecalculateMode)}.
     ; The return value of this method is the <code>ListenableFuture</code> returned by that invocation.</p>
     ;
     ; @return a future that completes once each <code>Peer</code> in this group has had its <code>BloomFilter</code> (re)set.
     ;;
    #_public
    (§ method #_"ListenableFuture<BloomFilter>" (§ fn addPeerFilterProvider) [#_"PeerFilterProvider" (§ name provider)])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (Preconditions/checkNotNull provider)
            (Preconditions/checkState (§ not (.. peerFilterProviders (contains provider))))
            ;; Insert provider at the start.  This avoids various concurrency problems that could occur because we need
            ;; all providers to be in a consistent, unchanging state whilst the filter is built.  Providers can give
            ;; this guarantee by taking a lock in their begin method, but if we add to the end of the list here, it
            ;; means we establish a lock ordering a > b > c if that's the order the providers were added in.  Given that
            ;; the main wallet will usually be first, this establishes an ordering wallet > other-provider, which means
            ;; other-provider can then not call into the wallet itself.  Other providers installed by the API user should
            ;; come first so the expected ordering is preserved.  This can also manifest itself in providers that use
            ;; synchronous RPCs into an actor instead of locking, but the same issue applies.
            (.. peerFilterProviders (add 0, provider))

            ;; Don't bother downloading block bodies before the oldest keys in all our wallets.  Make sure we recalculate
            ;; if a key is added.  Of course, by then we may have downloaded the chain already.  Ideally adding keys would
            ;; automatically rewind the block chain and redownload the blocks to find transactions relevant to those keys,
            ;; all transparently and in the background.  But we are a long way from that yet.
            (§ var #_"ListenableFuture<BloomFilter>" (§ name future) (recalculateFastCatchupAndFilter FilterRecalculateMode/SEND_IF_CHANGED))
            (updateVersionMessageRelayTxesBeforeFilter (getVersionMessage))
            (§ return future)
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    ;;;
     ; Opposite of {@link #addPeerFilterProvider(PeerFilterProvider)}.  Again, don't use this for wallets.  Does not
     ; trigger recalculation of the filter.
     ;;
    #_public
    (§ method #_"void" (§ fn removePeerFilterProvider) [#_"PeerFilterProvider" (§ name provider)])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (Preconditions/checkNotNull provider)
            (Preconditions/checkArgument (.. peerFilterProviders (remove provider)))
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
        nil
    )

    ;;;
     ; Unlinks the given wallet so it no longer receives broadcast transactions or has its transactions announced.
     ;;
    #_public
    (§ method #_"void" (§ fn removeWallet) [#_"Wallet" (§ name wallet)])
    (§ block
        (.. wallets (remove (Preconditions/checkNotNull wallet)))
        (.. peerFilterProviders (remove wallet))
        (.. wallet (removeCoinsReceivedEventListener walletCoinsReceivedEventListener))
        (.. wallet (removeKeyChainEventListener walletKeyEventListener))
        (.. wallet (setTransactionBroadcaster nil))
        (§ for (§ var #_"Peer" (§ name peer)) :for peers)
        (§ block
            (.. peer (removeWallet wallet))
        )
        nil
    )

    #_public
    (§ enum #_"FilterRecalculateMode"
        (§ item SEND_IF_CHANGED)
        (§ item FORCE_SEND_FOR_REFRESH)
        (§ item DONT_SEND)
    )

    #_private
    (§ field- #_"Map<FilterRecalculateMode, SettableFuture<BloomFilter>>" (§ name inFlightRecalculations) (Maps/newHashMap))

    ;;;
     ; Recalculates the bloom filter given to peers as well as the timestamp after which full blocks are downloaded
     ; (instead of only headers).  Note that calls made one after another may return the same future, if the request
     ; wasn't processed yet (i.e. calls are deduplicated).
     ;
     ; @param mode In what situations to send the filter to connected peers.
     ; @return A future that completes once the filter has been calculated (note: this does not mean acknowledged by remote peers).
     ;;
    #_public
    (§ method #_"ListenableFuture<BloomFilter>" (§ fn recalculateFastCatchupAndFilter) [#_"FilterRecalculateMode" (§ name mode)])
    (§ block
        (§ var #_"SettableFuture<BloomFilter>" (§ name future) (SettableFuture/create))
        (§ sync inFlightRecalculations)
        (§ block
            (§ if (!= (.. inFlightRecalculations (get mode)) nil))
            (§ block
                (§ return (.. inFlightRecalculations (get mode)))
            )

            (.. inFlightRecalculations (put mode, future))
        )
        (§ var #_"Runnable" (§ name command) (§ new #_"Runnable"
        (§ anon
            #_override
            #_public
            (§ method #_"void" (§ fn run) [])
            (§ block
                (§ try )
                (§ block
                    (go)
                )
                (§ catch #_"Throwable" (§ name e))
                (§ block
                    (.. log (error "Exception when trying to recalculate Bloom filter", e)) ;; The executor swallows exceptions :( ;; )
                )
                nil
            )

            #_public
            (§ method #_"void" (§ fn go) [])
            (§ block
                (Preconditions/checkState (§ not (.. lock (isHeldByCurrentThread))))
                ;; Fully verifying mode doesn't use this optimization (it can't as it needs to see all transactions).
                (§ if (§ expr (§ expr chain != nil && (.. chain (shouldVerifyTransactions))) || (§ not vBloomFilteringEnabled)))
                (§ block
                    (§ return nil)
                )

                ;; We only ever call bloomFilterMerger.calculate on jobQueue, so we cannot be calculating two filters at once.
                (§ var #_"FilterMerger.Result" (§ name result) (.. bloomFilterMerger (calculate (ImmutableList/copyOf peerFilterProviders)))) ;; COW
                (§ var #_"boolean" (§ name send))
                (§ switch mode)
                (§ block
                    (§ case SEND_IF_CHANGED)
                    (§ block
                        (§ ass (§ name send) (.. result changed))
                        (§ break )
                    )
                    (§ case DONT_SEND)
                    (§ block
                        (§ ass (§ name send) false)
                        (§ break )
                    )
                    (§ case FORCE_SEND_FOR_REFRESH)
                    (§ block
                        (§ ass (§ name send) true)
                        (§ break )
                    )
                    (§ default )
                    (§ block
                        (§ throw (§ new #_"UnsupportedOperationException"))
                    )
                )
                (§ if send)
                (§ block
                    (§ for (§ var #_"Peer" (§ name peer)) :for peers) ;; COW
                    (§ block
                        ;; Only query the mempool if this recalculation request is not in order to lower the observed FP
                        ;; rate.  There's no point querying the mempool when doing this because the FP rate can only go
                        ;; down, and we will have seen all the relevant txns before: it's pointless to ask for them again.
                        (.. peer (setBloomFilter (.. result filter), (!= mode FilterRecalculateMode/FORCE_SEND_FOR_REFRESH)))
                    )
                    ;; Reset the false positive estimate so that we don't send a flood of filter updates
                    ;; if the estimate temporarily overshoots our threshold.
                    (§ if (some? chain))
                    (§ block
                        (.. chain (resetFalsePositiveEstimate))
                    )
                )
                ;; Do this last so that bloomFilter is already set when it gets called.
                (setFastCatchupTimeSecs (.. result earliestKeyTimeSecs))
                (§ sync inFlightRecalculations)
                (§ block
                    (.. inFlightRecalculations (put mode, nil))
                )
                (.. future (set (.. result filter)))
                nil
            )
        )))
        (§ try )
        (§ block
            (.. executor (execute command))
        )
        (§ catch #_"RejectedExecutionException" (§ name _))
        (§ block
            ;; Can happen during shutdown.
        )
        future
    )

    ;;;
     ; <p>Sets the false positive rate of bloom filters given to peers.  The default is {@link #DEFAULT_BLOOM_FILTER_FP_RATE}.</p>
     ;
     ; <p>Be careful regenerating the bloom filter too often, as it decreases anonymity because remote nodes can
     ; compare transactions against both the new and old filters to significantly decrease the false positive rate.</p>
     ;
     ; <p>See the docs for {@link BloomFilter#BloomFilter(int, double, long, BloomFilter.BloomUpdate)} for a brief
     ; explanation of anonymity when using bloom filters.</p>
     ;;
    #_public
    (§ method #_"void" (§ fn setBloomFilterFalsePositiveRate) [#_"double" (§ name bloomFilterFPRate)])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (.. bloomFilterMerger (setBloomFilterFPRate bloomFilterFPRate))
            (recalculateFastCatchupAndFilter FilterRecalculateMode/SEND_IF_CHANGED)
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
        nil
    )

    ;;;
     ; Returns the number of currently connected peers.  To be informed when this count changes, register a
     ; {@link org.bitcoinj.core.listeners.PeerConnectedEventListener}/{@link org.bitcoinj.core.listeners.PeerDisconnectedEventListener}
     ; and use the onPeerConnected/onPeerDisconnected methods.
     ;;
    #_public
    (§ method #_"int" (§ fn numConnectedPeers) [])
    (§ block
        (.. peers (size))
    )

    ;;;
     ; Connect to a peer by creating a channel to the destination address.  This should not be
     ; used normally - let the PeerGroup manage connections through {@link #start()}.
     ;
     ; @param address Destination IP and port.
     ; @return The newly created Peer object or null if the peer could not be connected.
     ;         Use {@link org.bitcoinj.core.Peer#getConnectionOpenFuture()} if you
     ;         want a future which completes when the connection is open.
     ;;
    #_nilable
    #_public
    (§ method #_"Peer" (§ fn connectTo) [#_"InetSocketAddress" (§ name address)])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ var #_"PeerAddress" (§ name peerAddress) (§ new #_"PeerAddress" params, address))
            (.. backoffMap (put peerAddress, (§ new #_"ExponentialBackoff" peerBackoffParams)))
            (§ return (connectTo peerAddress, true, vConnectTimeoutMillis))
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    ;;;
     ; Helper for forcing a connection to localhost.  Useful when using test mode.  Returns the peer object.
     ;;
    #_nilable
    #_public
    (§ method #_"Peer" (§ fn connectToLocalHost) [])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ var #_"PeerAddress" (§ name localhost) (PeerAddress/localhost params))
            (.. backoffMap (put localhost, (§ new #_"ExponentialBackoff" peerBackoffParams)))
            (§ return (connectTo localhost, true, vConnectTimeoutMillis))
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    ;;;
     ; Creates a version message to send, constructs a Peer object and attempts to connect it.
     ; Returns the peer on success or null on failure.
     ; @param address Remote network address.
     ; @param incrementMaxConnections Whether to consider this connection an attempt to fill our quota, or something explicitly requested.
     ; @return Peer or null.
     ;;
    #_nilable
    #_guarded-by(§ opt "lock")
    #_protected
    (§ method #_"Peer" (§ fn connectTo) [#_"PeerAddress" (§ name address), #_"boolean" (§ name incrementMaxConnections), #_"int" (§ name connectTimeoutMillis)])
    (§ block
        (Preconditions/checkState (.. lock (isHeldByCurrentThread)))
        (§ var #_"VersionMessage" (§ name ver) (.. (getVersionMessage) (duplicate)))
        (§ ass (§ name (.. ver bestHeight)) (if (some? chain) (.. chain (getBestChainHeight)) 0))
        (§ ass (§ name (.. ver time)) (Utils/currentTimeSeconds))

        (§ var #_"Peer" (§ name peer) (createPeer address, ver))
        (.. peer (addConnectedEventListener Threading/SAME_THREAD, startupListener))
        (.. peer (addDisconnectedEventListener Threading/SAME_THREAD, startupListener))
        (.. peer (setMinProtocolVersion vMinRequiredProtocolVersion))
        (.. pendingPeers (add peer))

        (§ try )
        (§ block
            (.. log (info "Attempting connection to {}     ({} connected, {} pending, {} max)", address, (.. peers (size)), (.. pendingPeers (size)), maxConnections))
            (§ var #_"ListenableFuture<SocketAddress>" (§ name future) (.. channels (openConnection (.. address (toSocketAddress)), peer)))
            (§ if (.. future (isDone)))
            (§ block
                (Uninterruptibles/getUninterruptibly future)
            )
        )
        (§ catch #_"ExecutionException" (§ name e))
        (§ block
            (§ var #_"Throwable" (§ name cause) (Throwables/getRootCause e))
            (.. log (warn (§ expr "Failed to connect to " + address + ": " + (.. cause (getMessage)))))
            (handlePeerDeath peer, cause)
            (§ return nil)
        )
        (.. peer (setSocketTimeout connectTimeoutMillis))
        ;; When the channel has connected and version negotiated successfully, handleNewPeer will end up being called
        ;; on a worker thread.
        (§ if incrementMaxConnections)
        (§ block
            ;; We don't use setMaxConnections here as that would trigger a recursive attempt to establish a new
            ;; outbound connection.
            (§ ass (§ name maxConnections) (+ maxConnections 1))
        )
        peer
    )

    ;;; You can override this to customise the creation of {@link Peer} objects. ;;
    #_guarded-by(§ opt "lock")
    #_protected
    (§ method #_"Peer" (§ fn createPeer) [#_"PeerAddress" (§ name address), #_"VersionMessage" (§ name ver)])
    (§ block
        (§ new #_"Peer" params, ver, address, chain, downloadTxDependencyDepth)
    )

    ;;;
     ; Sets the timeout between when a connection attempt to a peer begins and when the version message exchange completes.
     ; This does not apply to currently pending peers.
     ;;
    #_public
    (§ method #_"void" (§ fn setConnectTimeoutMillis) [#_"int" (§ name connectTimeoutMillis)])
    (§ block
        (§ ass (§ name (.. this vConnectTimeoutMillis)) connectTimeoutMillis)
        nil
    )

    ;;;
     ; <p>Start downloading the blockchain from the first available peer.</p>
     ;
     ; <p>If no peers are currently connected, the download will be started once a peer starts.  If the peer dies,
     ; the download will resume with another peer.</p>
     ;
     ; @param listener A listener for chain download events, may not be null.
     ;;
    #_public
    (§ method #_"void" (§ fn startBlockChainDownload) [#_"PeerDataEventListener" (§ name listener)])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ if (some? downloadPeer))
            (§ block
                (§ if (!= (.. this downloadListener) nil))
                (§ block
                    (removeDataEventListenerFromPeer downloadPeer, (.. this downloadListener))
                )
                (§ if (some? listener))
                (§ block
                    (addDataEventListenerToPeer Threading/USER_THREAD, downloadPeer, listener)
                )
            )
            (§ ass (§ name (.. this downloadListener)) listener)
            ;; TODO: Be more nuanced about which peer to download from.  We can also try
            ;; downloading from multiple peers and handle the case when a new peer comes along
            ;; with a longer chain after we thought we were done.
            (§ if (§ not (.. peers (isEmpty))))
            (§ block
                (startBlockChainDownloadFromPeer (.. peers (iterator) (next))) ;; Will add the new download listener.
            )
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
        nil
    )

    ;;;
     ; Register a data event listener against a single peer (i.e. for blockchain download).
     ; Handling registration/deregistration on peer death/add is outside the scope of these methods.
     ;;
    #_private
    #_static
    (§ defn- #_"void" (§ fn addDataEventListenerToPeer) [#_"Executor" (§ name executor), #_"Peer" (§ name peer), #_"PeerDataEventListener" (§ name downloadListener)])
    (§ block
        (.. peer (addBlocksDownloadedEventListener executor, downloadListener))
        (.. peer (addChainDownloadStartedEventListener executor, downloadListener))
        (.. peer (addGetDataEventListener executor, downloadListener))
        (.. peer (addPreMessageReceivedEventListener executor, downloadListener))
        nil
    )

    ;;;
     ; Remove a registered data event listener against a single peer (i.e. for blockchain download).
     ; Handling registration/deregistration on peer death/add is outside the scope of these methods.
     ;;
    #_private
    #_static
    (§ defn- #_"void" (§ fn removeDataEventListenerFromPeer) [#_"Peer" (§ name peer), #_"PeerDataEventListener" (§ name listener)])
    (§ block
        (.. peer (removeBlocksDownloadedEventListener listener))
        (.. peer (removeChainDownloadStartedEventListener listener))
        (.. peer (removeGetDataEventListener listener))
        (.. peer (removePreMessageReceivedEventListener listener))
        nil
    )

    ;;;
     ; Download the blockchain from peers.  Convenience that uses a {@link DownloadProgressTracker} for you.
     ;
     ; This method waits until the download is complete.  "Complete" is defined as downloading
     ; from at least one peer all the blocks that are in that peer's inventory.
     ;;
    #_public
    (§ method #_"void" (§ fn downloadBlockChain) [])
    (§ block
        (§ var #_"DownloadProgressTracker" (§ name listener) (§ new #_"DownloadProgressTracker"))
        (startBlockChainDownload listener)
        (§ try )
        (§ block
            (.. listener (await))
        )
        (§ catch #_"InterruptedException" (§ name e))
        (§ block
            (§ throw (§ new #_"RuntimeException" e))
        )
        nil
    )

    #_protected
    (§ method #_"void" (§ fn handleNewPeer) [#_"Peer" (§ name peer)])
    (§ block
        (§ var #_"int" (§ name newSize) -1)
        (.. lock (lock))
        (§ try )
        (§ block
            (.. groupBackoff (trackSuccess))
            (.. backoffMap (get (.. peer (getAddress))) (trackSuccess))

            ;; Sets up the newly connected peer so it can do everything it needs to.
            (.. pendingPeers (remove peer))
            (.. peers (add peer))
            (§ ass (§ name newSize) (.. peers (size)))
            (.. log (info "{}: New peer      ({} connected, {} pending, {} max)", peer, newSize, (.. pendingPeers (size)), maxConnections))
            ;; Give the peer a filter that can be used to probabilistically drop transactions that
            ;; aren't relevant to our wallet.  We may still receive some false positives, which is
            ;; OK because it helps improve wallet privacy.  Old nodes will just ignore the message.
            (§ if (!= (.. bloomFilterMerger (getLastFilter)) nil))
            (§ block
                (.. peer (setBloomFilter (.. bloomFilterMerger (getLastFilter))))
            )
            (.. peer (setDownloadData false))
            ;; TODO: The peer should calculate the fast catchup time from the added wallets here.
            (§ for (§ var #_"Wallet" (§ name wallet)) :for wallets)
            (§ block
                (.. peer (addWallet wallet))
            )
            (§ if (nil? downloadPeer))
            (§ block
                ;; Kick off chain download if we aren't already doing it.
                (setDownloadPeer (selectDownloadPeer peers))
                (§ var #_"boolean" (§ name shouldDownloadChain) (§ expr downloadListener != nil && chain != nil))
                (§ if shouldDownloadChain)
                (§ block
                    (startBlockChainDownloadFromPeer downloadPeer)
                )
            )
            ;; Make sure the peer knows how to upload transactions that are requested from us.
            (.. peer (addBlocksDownloadedEventListener Threading/SAME_THREAD, peerListener))
            (.. peer (addGetDataEventListener Threading/SAME_THREAD, peerListener))

            ;; And set up event listeners for clients.  This will allow them to find out about new transactions and blocks.
            (§ for (§ var #_"ListenerRegistration<BlocksDownloadedEventListener>" (§ name registration)) :for peersBlocksDownloadedEventListeners)
            (§ block
                (.. peer (addBlocksDownloadedEventListener (.. registration executor), (.. registration listener)))
            )
            (§ for (§ var #_"ListenerRegistration<ChainDownloadStartedEventListener>" (§ name registration)) :for peersChainDownloadStartedEventListeners)
            (§ block
                (.. peer (addChainDownloadStartedEventListener (.. registration executor), (.. registration listener)))
            )
            (§ for (§ var #_"ListenerRegistration<PeerConnectedEventListener>" (§ name registration)) :for peerConnectedEventListeners)
            (§ block
                (.. peer (addConnectedEventListener (.. registration executor), (.. registration listener)))
            )

            ;; We intentionally do not add disconnect listeners to peers.
            (§ for (§ var #_"ListenerRegistration<GetDataEventListener>" (§ name registration)) :for peerGetDataEventListeners)
            (§ block
                (.. peer (addGetDataEventListener (.. registration executor), (.. registration listener)))
            )
            (§ for (§ var #_"ListenerRegistration<OnTransactionBroadcastListener>" (§ name registration)) :for peersTransactionBroadastEventListeners)
            (§ block
                (.. peer (addOnTransactionBroadcastListener (.. registration executor), (.. registration listener)))
            )
            (§ for (§ var #_"ListenerRegistration<PreMessageReceivedEventListener>" (§ name registration)) :for peersPreMessageReceivedEventListeners)
            (§ block
                (.. peer (addPreMessageReceivedEventListener (.. registration executor), (.. registration listener)))
            )
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )

        (§ var #_"int" (§ name fNewSize) newSize)
        (§ for (§ var ListenerRegistration<PeerConnectedEventListener> registration) :for peerConnectedEventListeners)
        (§ block
            (.. registration executor (execute (§ new #_"Runnable")
            (§ anon
                #_override
                #_public
                (§ method #_"void" (§ fn run) [])
                (§ block
                    (.. registration listener (onPeerConnected peer, fNewSize))
                    nil
                )
            )))
        )
        nil
    )

    #_nilable
    #_private
    #_volatile
    (§ field- #_"ListenableScheduledFuture<?>" (§ name vPingTask))

    #_suppress(§ opt "NonAtomicOperationOnVolatileField")
    #_private
    (§ method- #_"void" (§ fn setupPinging) [])
    (§ block
        (§ if (<= (getPingIntervalMsec) 0))
        (§ block
            (§ return nil) ;; Disabled.
        )

        (§ ass (§ name vPingTask) (.. executor (scheduleAtFixedRate (§ new #_"Runnable")
        (§ anon
            #_override
            #_public
            (§ method #_"void" (§ fn run) [])
            (§ block
                (§ try )
                (§ block
                    (§ if (<= (getPingIntervalMsec) 0))
                    (§ block
                        (§ var #_"ListenableScheduledFuture<?>" (§ name task) vPingTask)
                        (§ if (some? task))
                        (§ block
                            (.. task (cancel false))
                            (§ ass (§ name vPingTask) nil)
                        )
                        (§ return nil) ;; Disabled.
                    )
                    (§ for (§ var #_"Peer" (§ name peer)) :for (getConnectedPeers))
                    (§ block
                        (§ if (< (.. peer (getPeerVersionMessage) clientVersion) (.. params (getProtocolVersionNum NetworkParameters/ProtocolVersion/PONG))))
                        (§ block
                            (§ continue )
                        )
                        (.. peer (ping))
                    )
                )
                (§ catch #_"Throwable" (§ name e))
                (§ block
                    (.. log (error "Exception in ping loop", e)) ;; The executor swallows exceptions :( ;; )
                )
                nil
            )
        ), (getPingIntervalMsec), (getPingIntervalMsec), TimeUnit/MILLISECONDS)))
        nil
    )

    #_private
    (§ method- #_"void" (§ fn setDownloadPeer) [#_nilable #_"Peer" (§ name peer)])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ if (§ expr downloadPeer == peer))
            (§ block
                (§ return nil)
            )
            (§ if (some? downloadPeer))
            (§ block
                (.. log (info "Unsetting download peer: {}", downloadPeer))
                (§ if (some? downloadListener))
                (§ block
                    (removeDataEventListenerFromPeer downloadPeer, downloadListener)
                )
                (.. downloadPeer (setDownloadData false))
            )
            (§ ass (§ name downloadPeer) peer)
            (§ if (some? downloadPeer))
            (§ block
                (.. log (info "Setting download peer: {}", downloadPeer))
                (§ if (some? downloadListener))
                (§ block
                    (addDataEventListenerToPeer Threading/SAME_THREAD, peer, downloadListener)
                )
                (.. downloadPeer (setDownloadData true))
                (§ if (some? chain))
                (§ block
                    (.. downloadPeer (setDownloadParameters fastCatchupTimeSecs, (§ expr (.. bloomFilterMerger (getLastFilter)) != nil)))
                )
            )
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
        nil
    )

    ;;;
     ; Tells the PeerGroup to download only block headers before a certain time and bodies after that.
     ; Call this before starting block chain download.
     ; Do not use a time > NOW - 1 block, as it will break some block download logic.
     ;;
    #_public
    (§ method #_"void" (§ fn setFastCatchupTimeSecs) [#_"long" (§ name secondsSinceEpoch)])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (Preconditions/checkState (§ expr chain == nil || (§ not (.. chain (shouldVerifyTransactions)))), "Fast catchup is incompatible with fully verifying")

            (§ ass (§ name fastCatchupTimeSecs) secondsSinceEpoch)
            (§ if (some? downloadPeer))
            (§ block
                (.. downloadPeer (setDownloadParameters secondsSinceEpoch, (§ expr (.. bloomFilterMerger (getLastFilter)) != nil)))
            )
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
        nil
    )

    ;;;
     ; Returns the current fast catchup time.  The contents of blocks before this time won't be downloaded as they
     ; cannot contain any interesting transactions.  If you use {@link PeerGroup#addWallet(Wallet)} this just returns
     ; the min of the wallets earliest key times.
     ; @return a time in seconds since the epoch.
     ;;
    #_public
    (§ method #_"long" (§ fn getFastCatchupTimeSecs) [])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ return fastCatchupTimeSecs)
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    #_protected
    (§ method #_"void" (§ fn handlePeerDeath) [#_"Peer" (§ name peer), #_nilable #_"Throwable" (§ name exception)])
    (§ block
        ;; Peer deaths can occur during startup if a connect attempt after peer discovery aborts immediately.
        (§ if (§ not (isRunning)))
        (§ block
            (§ return nil)
        )

        (§ var #_"int" (§ name numPeers))
        (§ var #_"int" (§ name numConnectedPeers) 0)
        (.. lock (lock))
        (§ try )
        (§ block
            (.. pendingPeers (remove peer))
            (.. peers (remove peer))

            (§ var #_"PeerAddress" (§ name address) (.. peer (getAddress)))

            (.. log (info "{}: Peer died      ({} connected, {} pending, {} max)", address, (.. peers (size)), (.. pendingPeers (size)), maxConnections))
            (§ if (§ expr peer == downloadPeer))
            (§ block
                (.. log (info "Download peer died. Picking a new one."))
                (setDownloadPeer nil)
                ;; Pick a new one and possibly tell it to download the chain.
                (§ var #_"Peer" (§ name newDownloadPeer) (selectDownloadPeer peers))
                (§ if (some? newDownloadPeer))
                (§ block
                    (setDownloadPeer newDownloadPeer)
                    (§ if (some? downloadListener))
                    (§ block
                        (startBlockChainDownloadFromPeer newDownloadPeer)
                    )
                )
            )
            (§ ass (§ name numPeers) (+ (.. peers (size)) (.. pendingPeers (size))))
            (§ ass (§ name numConnectedPeers) (.. peers (size)))

            (.. groupBackoff (trackFailure))

            (§ if (§ insta exception #_"NoRouteToHostException"))
            (§ block
                (§ if (§ expr (§ insta (.. address (getAddr)) #_"Inet6Address") && (§ not ipv6Unreachable)))
                (§ block
                    (§ ass (§ name ipv6Unreachable) true)
                    (.. log (warn "IPv6 peer connect failed due to routing failure, ignoring IPv6 addresses from now on"))
                )
            )
            (§ else )
            (§ block
                (.. backoffMap (get address) (trackFailure))
                ;; Put back on inactive list.
                (.. inactives (offer address))
            )

            (§ if (< numPeers (getMaxConnections)))
            (§ block
                (triggerConnections)
            )
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )

        (.. peer (removeBlocksDownloadedEventListener peerListener))
        (.. peer (removeGetDataEventListener peerListener))
        (§ for (§ var #_"Wallet" (§ name wallet)) :for wallets)
        (§ block
            (.. peer (removeWallet wallet))
        )

        (§ var #_"int" (§ name fNumConnectedPeers) numConnectedPeers)

        (§ for (§ var #_"ListenerRegistration<BlocksDownloadedEventListener>" (§ name registration)) :for peersBlocksDownloadedEventListeners)
        (§ block
            (.. peer (removeBlocksDownloadedEventListener (.. registration listener)))
        )
        (§ for (§ var #_"ListenerRegistration<ChainDownloadStartedEventListener>" (§ name registration)) :for peersChainDownloadStartedEventListeners)
        (§ block
            (.. peer (removeChainDownloadStartedEventListener (.. registration listener)))
        )
        (§ for (§ var #_"ListenerRegistration<GetDataEventListener>" (§ name registration)) :for peerGetDataEventListeners)
        (§ block
            (.. peer (removeGetDataEventListener (.. registration listener)))
        )
        (§ for (§ var #_"ListenerRegistration<PreMessageReceivedEventListener>" (§ name registration)) :for peersPreMessageReceivedEventListeners)
        (§ block
            (.. peer (removePreMessageReceivedEventListener (.. registration listener)))
        )
        (§ for (§ var #_"ListenerRegistration<OnTransactionBroadcastListener>" (§ name registration)) :for peersTransactionBroadastEventListeners)
        (§ block
            (.. peer (removeOnTransactionBroadcastListener (.. registration listener)))
        )

        (§ for (§ var ListenerRegistration<PeerDisconnectedEventListener> registration) :for peerDisconnectedEventListeners)
        (§ block
            (.. registration executor (execute (§ new #_"Runnable")
            (§ anon
                #_override
                #_public
                (§ method #_"void" (§ fn run) [])
                (§ block
                    (.. registration listener (onPeerDisconnected peer, fNumConnectedPeers))
                    nil
                )
            )))
            (.. peer (removeDisconnectedEventListener (.. registration listener)))
        )
        nil
    )

    #_guarded-by(§ opt "lock")
    #_private
    (§ field- #_"int" (§ name stallPeriodSeconds) 10)
    #_guarded-by(§ opt "lock")
    #_private
    (§ field- #_"int" (§ name stallMinSpeedBytesSec) (* Block/HEADER_SIZE 20))

    ;;;
     ; Configures the stall speed: the speed at which a peer is considered to be serving us the block chain
     ; unacceptably slowly.  Once a peer has served us data slower than the given data rate for the given
     ; number of seconds, it is considered stalled and will be disconnected, forcing the chain download to continue
     ; from a different peer.  The defaults are chosen conservatively, but if you are running on a platform that is
     ; CPU constrained or on a very slow network e.g. EDGE, the default settings may need adjustment to
     ; avoid false stalls.
     ;
     ; @param periodSecs How many seconds the download speed must be below blocksPerSec, defaults to 10.
     ; @param bytesPerSecond Download speed (only blocks/txns count) must be consistently below this for a stall, defaults to the bandwidth required for 20 block headers per second.
     ;;
    #_public
    (§ method #_"void" (§ fn setStallThreshold) [#_"int" (§ name periodSecs), #_"int" (§ name bytesPerSecond)])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ ass (§ name stallPeriodSeconds) periodSecs)
            (§ ass (§ name stallMinSpeedBytesSec) bytesPerSecond)
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
        nil
    )

    #_private
    (§ class #_"ChainDownloadSpeedCalculator" (§ implements #_"BlocksDownloadedEventListener", #_"Runnable")
        #_private
        (§ field- #_"int" (§ name blocksInLastSecond))
        #_private
        (§ field- #_"int" (§ name txnsInLastSecond))
        #_private
        (§ field- #_"int" (§ name origTxnsInLastSecond))
        #_private
        (§ field- #_"long" (§ name bytesInLastSecond))

        ;; If we take more stalls than this, we assume we're on some kind of terminally slow network and the
        ;; stall threshold just isn't set properly.  We give up on stall disconnects after that.
        #_private
        (§ field- #_"int" (§ name maxStalls) 3)

        ;; How many seconds the peer has until we start measuring its speed.
        #_private
        (§ field- #_"int" (§ name warmupSeconds) -1)

        ;; Used to calculate a moving average.
        #_private
        (§ field- #_"long[]" (§ name samples))
        #_private
        (§ field- #_"int" (§ name cursor))

        #_private
        (§ field- #_"boolean" (§ name syncDone))

        #_override
        #_public
        #_synchronized
        (§ method #_"void" (§ fn onBlocksDownloaded) [#_"Peer" (§ name peer), #_"Block" (§ name block), #_nilable #_"FilteredBlock" (§ name filteredBlock), #_"int" (§ name blocksLeft)])
        (§ block
            (§ ass (§ name blocksInLastSecond) (+ blocksInLastSecond 1))
            (§ ass (§ name bytesInLastSecond) (+ bytesInLastSecond Block/HEADER_SIZE))
            (§ var #_"List<Transaction>" (§ name blockTransactions) (.. block (getTransactions)))
            ;; This whole area of the type hierarchy is a mess.
            (§ var #_"int" (§ name txCount) (§ expr (if (some? blockTransactions) (countAndMeasureSize blockTransactions) 0) + (if (some? filteredBlock) (countAndMeasureSize (.. filteredBlock (getAssociatedTransactions) (values))) 0)))
            (§ ass (§ name txnsInLastSecond) (+ txnsInLastSecond txCount))
            (§ if (some? filteredBlock))
            (§ block
                (§ ass (§ name origTxnsInLastSecond) (§ expr origTxnsInLastSecond + (.. filteredBlock (getTransactionCount))))
            )
            nil
        )

        #_private
        (§ method- #_"int" (§ fn countAndMeasureSize) [#_"Collection<Transaction>" (§ name transactions)])
        (§ block
            (§ for (§ var #_"Transaction" (§ name transaction)) :for transactions)
            (§ block
                (§ ass (§ name bytesInLastSecond) (§ expr bytesInLastSecond + (.. transaction (getMessageSize))))
            )
            (.. transactions (size))
        )

        #_override
        #_public
        (§ method #_"void" (§ fn run) [])
        (§ block
            (§ try )
            (§ block
                (calculate)
            )
            (§ catch #_"Throwable" (§ name e))
            (§ block
                (.. log (error "Error in speed calculator", e))
            )
            nil
        )

        #_private
        (§ method- #_"void" (§ fn calculate) [])
        (§ block
            (§ var #_"int" (§ name minSpeedBytesPerSec))
            (§ var #_"int" (§ name period))

            (.. lock (lock))
            (§ try )
            (§ block
                (§ ass (§ name minSpeedBytesPerSec) stallMinSpeedBytesSec)
                (§ ass (§ name period) stallPeriodSeconds)
            )
            (§ finally )
            (§ block
                (.. lock (unlock))
            )

            (§ sync this)
            (§ block
                (§ if (§ expr samples == nil || (.. samples length) != period))
                (§ block
                    (§ ass (§ name samples) (§ new #_"long[]" (§ count period)))
                    ;; *2 because otherwise a single low sample could cause an immediate disconnect which is too harsh.
                    (Arrays/fill samples, (§ expr minSpeedBytesPerSec * 2))
                    (§ ass (§ name warmupSeconds) 15)
                )

                (§ var #_"boolean" (§ name behindPeers) (§ expr chain != nil && (.. chain (getBestChainHeight)) < (getMostCommonChainHeight)))
                (§ if (§ not behindPeers))
                (§ block
                    (§ ass (§ name syncDone) true)
                )
                (§ if (§ not syncDone))
                (§ block
                    (§ if (< warmupSeconds 0))
                    (§ block
                        ;; Calculate the moving average.
                        (§ ass (§ name (§ ai samples cursor)) bytesInLastSecond)
                        (§ ass (§ name cursor) (+ cursor 1))
                        (§ if (§ expr cursor == (.. samples length)))
                        (§ block
                            (§ ass (§ name cursor) 0)
                        )
                        (§ var #_"long" (§ name average) 0)
                        (§ for (§ var #_"long" (§ name sample)) :for samples)
                        (§ block
                            (§ ass (§ name average) (+ average sample))
                        )
                        (§ ass (§ name average) (§ expr average / (.. samples length)))

                        (.. log (info (String/format Locale/US, "%d blocks/sec, %d tx/sec, %d pre-filtered tx/sec, avg/last %.2f/%.2f kilobytes per sec (stall threshold <%.2f KB/sec for %d seconds)", blocksInLastSecond, txnsInLastSecond, origTxnsInLastSecond, (/ average 1024.0), (/ bytesInLastSecond 1024.0), (/ minSpeedBytesPerSec 1024.0), (.. samples length))))

                        (§ if (§ expr average < minSpeedBytesPerSec && 0 < maxStalls))
                        (§ block
                            (§ ass (§ name maxStalls) (- maxStalls 1))
                            (§ if (§ expr maxStalls == 0))
                            (§ block
                                ;; We could consider starting to drop the Bloom filtering FP rate at this point, because
                                ;; we tried a bunch of peers and no matter what we don't seem to be able to go any faster.
                                ;; This implies we're bandwidth bottlenecked and might want to start using bandwidth
                                ;; more effectively.  Of course if there's a MITM that is deliberately throttling us,
                                ;; this is a good way to make us take away all the FPs from our Bloom filters ... but
                                ;; as they don't give us a whole lot of privacy either way that's not inherently a big
                                ;; deal.
                                (.. log (warn "This network seems to be slower than the requested stall threshold - won't do stall disconnects any more."))
                            )
                            (§ else )
                            (§ block
                                (§ var #_"Peer" (§ name peer) (getDownloadPeer))
                                (.. log (warn (String/format Locale/US, "Chain download stalled: received %.2f KB/sec for %d seconds, require average of %.2f KB/sec, disconnecting %s", (/ average 1024.0), (.. samples length), (/ minSpeedBytesPerSec 1024.0), peer)))
                                (.. peer (close))
                                ;; Reset the sample buffer and give the next peer time to get going.
                                (§ ass (§ name samples) nil)
                                (§ ass (§ name warmupSeconds) period)
                            )
                        )
                    )
                    (§ else )
                    (§ block
                        (§ ass (§ name warmupSeconds) (- warmupSeconds 1))
                        (§ if (< 0 bytesInLastSecond))
                        (§ block
                            (.. log (info (String/format Locale/US, "%d blocks/sec, %d tx/sec, %d pre-filtered tx/sec, last %.2f kilobytes per sec", blocksInLastSecond, txnsInLastSecond, origTxnsInLastSecond, (/ bytesInLastSecond 1024.0))))
                        )
                    )
                )
                (§ ass (§ name blocksInLastSecond) 0)
                (§ ass (§ name txnsInLastSecond) 0)
                (§ ass (§ name origTxnsInLastSecond) 0)
                (§ ass (§ name bytesInLastSecond) 0)
            )
            nil
        )
    )
    #_nilable
    #_private
    (§ field- #_"ChainDownloadSpeedCalculator" (§ name chainDownloadSpeedCalculator))

    #_private
    (§ method- #_"void" (§ fn startBlockChainDownloadFromPeer) [#_"Peer" (§ name peer)])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (setDownloadPeer peer)

            (§ if (nil? chainDownloadSpeedCalculator))
            (§ block
                ;; Every second, run the calculator which will log how fast we are downloading the chain.
                (§ ass (§ name chainDownloadSpeedCalculator) (§ new #_"ChainDownloadSpeedCalculator"))
                (.. executor (scheduleAtFixedRate chainDownloadSpeedCalculator, 1, 1, TimeUnit/SECONDS))
            )
            (.. peer (addBlocksDownloadedEventListener Threading/SAME_THREAD, chainDownloadSpeedCalculator))

            ;; startBlockChainDownload will setDownloadData(true) on itself automatically.
            (.. peer (startBlockChainDownload))
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
        nil
    )

    ;;;
     ; Returns a future that is triggered when the number of connected peers is equal to the given number of peers.
     ; By using this with {@link org.bitcoinj.core.PeerGroup#getMaxConnections()} you can wait until the
     ; network is fully online.  To block immediately, just call get() on the result.  Just calls
     ; {@link #waitForPeersOfVersion(int, long)} with zero as the protocol version.
     ;
     ; @param numPeers How many peers to wait for.
     ; @return a future that will be triggered when the number of connected peers >= numPeers.
     ;;
    #_public
    (§ method #_"ListenableFuture<List<Peer>>" (§ fn waitForPeers) [#_"int" (§ name numPeers)])
    (§ block
        (waitForPeersOfVersion numPeers, 0)
    )

    ;;;
     ; Returns a future that is triggered when there are at least the requested number of connected peers that support
     ; the given protocol version or higher.  To block immediately, just call get() on the result.
     ;
     ; @param numPeers How many peers to wait for.
     ; @param protocolVersion The protocol version the awaited peers must implement (or better).
     ; @return a future that will be triggered when the number of connected peers implementing protocolVersion or higher >= numPeers.
     ;;
    #_public
    (§ method #_"ListenableFuture<List<Peer>>" (§ fn waitForPeersOfVersion) [#_"int" (§ name numPeers), #_"long" (§ name protocolVersion)])
    (§ block
        (§ var #_"List<Peer>" (§ name foundPeers) (findPeersOfAtLeastVersion protocolVersion))
        (§ if (§ expr numPeers <= (.. foundPeers (size))))
        (§ block
            (§ return (Futures/immediateFuture foundPeers))
        )

        (§ var #_"SettableFuture<List<Peer>>" (§ name future) (SettableFuture/create))
        (addConnectedEventListener (§ new #_"PeerConnectedEventListener")
        (§ anon
            #_override
            #_public
            (§ method #_"void" (§ fn onPeerConnected) [#_"Peer" (§ name peer), #_"int" (§ name peerCount)])
            (§ block
                (§ var #_"List<Peer>" (§ name peers) (findPeersOfAtLeastVersion protocolVersion))
                (§ if (§ expr numPeers <= (.. peers (size))))
                (§ block
                    (.. future (set peers))
                    (removeConnectedEventListener this)
                )
                nil
            )
        ))
        future
    )

    ;;;
     ; Returns an array list of peers that implement the given protocol version or better.
     ;;
    #_public
    (§ method #_"List<Peer>" (§ fn findPeersOfAtLeastVersion) [#_"long" (§ name protocolVersion)])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ var #_"ArrayList<Peer>" (§ name results) (§ new #_"ArrayList<Peer>" (.. peers (size))))
            (§ for (§ var #_"Peer" (§ name peer)) :for peers)
            (§ block
                (§ if (§ expr protocolVersion <= (.. peer (getPeerVersionMessage) clientVersion)))
                (§ block
                    (.. results (add peer))
                )
            )
            (§ return results)
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    ;;;
     ; Returns a future that is triggered when there are at least the requested number of connected peers that support
     ; the given protocol version or higher.  To block immediately, just call get() on the result.
     ;
     ; @param numPeers How many peers to wait for.
     ; @param mask An integer representing a bit mask that will be ANDed with the peers advertised service masks.
     ; @return a future that will be triggered when the number of connected peers implementing protocolVersion or higher >= numPeers.
     ;;
    #_public
    (§ method #_"ListenableFuture<List<Peer>>" (§ fn waitForPeersWithServiceMask) [#_"int" (§ name numPeers), #_"int" (§ name mask)])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ var #_"List<Peer>" (§ name foundPeers) (findPeersWithServiceMask mask))
            (§ if (§ expr numPeers <= (.. foundPeers (size))))
            (§ block
                (§ return (Futures/immediateFuture foundPeers))
            )

            (§ var #_"SettableFuture<List<Peer>>" (§ name future) (SettableFuture/create))
            (addConnectedEventListener (§ new #_"PeerConnectedEventListener")
            (§ anon
                #_override
                #_public
                (§ method #_"void" (§ fn onPeerConnected) [#_"Peer" (§ name peer), #_"int" (§ name peerCount)])
                (§ block
                    (§ var #_"List<Peer>" (§ name peers) (findPeersWithServiceMask mask))
                    (§ if (§ expr numPeers <= (.. peers (size))))
                    (§ block
                        (.. future (set peers))
                        (removeConnectedEventListener this)
                    )
                    nil
                )
            ))
            (§ return future)
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    ;;;
     ; Returns an array list of peers that match the requested service bit mask.
     ;;
    #_public
    (§ method #_"List<Peer>" (§ fn findPeersWithServiceMask) [#_"int" (§ name mask)])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ var #_"ArrayList<Peer>" (§ name results) (§ new #_"ArrayList<Peer>" (.. peers (size))))
            (§ for (§ var #_"Peer" (§ name peer)) :for peers)
            (§ block
                (§ if (== (& (.. peer (getPeerVersionMessage) localServices) mask) mask))
                (§ block
                    (.. results (add peer))
                )
            )
            (§ return results)
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    ;;;
     ; Returns the number of connections that are required before transactions will be broadcast.  If there aren't
     ; enough, {@link PeerGroup#broadcastTransaction(Transaction)} will wait until the minimum number is reached so
     ; propagation across the network can be observed.  If no value has been set using
     ; {@link PeerGroup#setMinBroadcastConnections(int)} a default of 80% of whatever
     ; {@link org.bitcoinj.core.PeerGroup#getMaxConnections()} returns is used.
     ;;
    #_public
    (§ method #_"int" (§ fn getMinBroadcastConnections) [])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ if (§ expr minBroadcastConnections == 0))
            (§ block
                (§ var #_"int" (§ name max) (getMaxConnections))
                (§ if (<= max 1))
                (§ block
                    (§ return max)
                )
                (§ else )
                (§ block
                    (§ return (§ cast #_"int" (Math/round (* (getMaxConnections) 0.8))))
                )
            )
            (§ return minBroadcastConnections)
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    ;;;
     ; See {@link org.bitcoinj.core.PeerGroup#getMinBroadcastConnections()}.
     ;;
    #_public
    (§ method #_"void" (§ fn setMinBroadcastConnections) [#_"int" (§ name value)])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ ass (§ name minBroadcastConnections) value)
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
        nil
    )

    ;;;
     ; Calls {@link PeerGroup#broadcastTransaction(Transaction, int)} with getMinBroadcastConnections() as the number
     ; of connections to wait for before commencing broadcast.
     ;;
    #_override
    #_public
    (§ method #_"TransactionBroadcast" (§ fn broadcastTransaction) [#_"Transaction" (§ name tx)])
    (§ block
        (broadcastTransaction tx, (Math/max 1, (getMinBroadcastConnections)))
    )

    ;;;
     ; <p>Given a transaction, sends it un-announced to one peer and then waits for it to be received back from
     ; other peers.  Once all connected peers have announced the transaction, the future available via the
     ; {@link org.bitcoinj.core.TransactionBroadcast#future()} method will be completed.  If anything goes
     ; wrong the exception will be thrown when get() is called, or you can receive it via a callback on the
     ; {@link ListenableFuture}.  This method returns immediately, so if you want it to block just call get() on the
     ; result.</p>
     ;
     ; <p>Note that if the PeerGroup is limited to only one connection (discovery is not activated) then the future
     ; will complete as soon as the transaction was successfully written to that peer.</p>
     ;
     ; <p>The transaction won't be sent until there are at least minConnections active connections available.
     ; A good choice for proportion would be between 0.5 and 0.8 but if you want faster transmission during initial
     ; bringup of the peer group you can lower it.</p>
     ;
     ; <p>The returned {@link org.bitcoinj.core.TransactionBroadcast} object can be used to get progress feedback,
     ; which is calculated by watching the transaction propagate across the network and be announced by peers.</p>
     ;;
    #_public
    (§ method #_"TransactionBroadcast" (§ fn broadcastTransaction) [#_"Transaction" (§ name tx), #_"int" (§ name minConnections)])
    (§ block
        ;; If we don't have a record of where this tx came from already, set it to be ourselves so Peer doesn't end up
        ;; redownloading it from the network redundantly.
        (§ if (.. tx (getConfidence) (getSource) (equals TransactionConfidence/Source/UNKNOWN)))
        (§ block
            (.. log (info "Transaction source unknown, setting to SELF: {}", (.. tx (getHashAsString))))
            (.. tx (getConfidence) (setSource TransactionConfidence/Source/SELF))
        )
        (§ var #_"TransactionBroadcast" (§ name broadcast) (§ new #_"TransactionBroadcast" this, tx))
        (.. broadcast (setMinConnections minConnections))
        ;; Send the TX to the wallet once we have a successful broadcast.
        (Futures/addCallback (.. broadcast (future)), (§ new #_"FutureCallback<Transaction>")
        (§ anon
            #_override
            #_public
            (§ method #_"void" (§ fn onSuccess) [#_"Transaction" (§ name transaction)])
            (§ block
                (.. runningBroadcasts (remove broadcast))
                ;; OK, now tell the wallet about the transaction.  If the wallet created the transaction,
                ;; then it already knows and will ignore this.  If it's a transaction we received from
                ;; somebody else via a side channel and are now broadcasting, this will put it into the
                ;; wallet now we know it's valid.
                (§ for (§ var #_"Wallet" (§ name wallet)) :for wallets)
                (§ block
                    ;; Assumption here is there are no dependencies of the created transaction.
                    ;;
                    ;; We may end up with two threads trying to do this in parallel - the wallet will
                    ;; ignore whichever one loses the race.
                    (§ try )
                    (§ block
                        (.. wallet (receivePending transaction, nil))
                    )
                    (§ catch #_"VerificationException" (§ name e))
                    (§ block
                        (§ throw (§ new #_"RuntimeException" e)) ;; Cannot fail to verify a tx we created ourselves.
                    )
                )
                nil
            )

            #_override
            #_public
            (§ method #_"void" (§ fn onFailure) [#_"Throwable" (§ name throwable)])
            (§ block
                ;; This can happen if we get a reject message from a peer.
                (.. runningBroadcasts (remove broadcast))
                nil
            )
        ))
        ;; Keep a reference to the TransactionBroadcast object.  This is important because otherwise, the entire tree
        ;; of objects we just created would become garbage if the user doesn't hold on to the returned future, and
        ;; eventually be collected.  This in turn could result in the transaction not being committed to the wallet
        ;; at all.
        (.. runningBroadcasts (add broadcast))
        (.. broadcast (broadcast))
        broadcast
    )

    ;;;
     ; Returns the period between pings for an individual peer.  Setting this lower means more accurate and timely
     ; ping times are available via {@link org.bitcoinj.core.Peer#getLastPingTime()} but it increases load on the
     ; remote node.  It defaults to {@link PeerGroup#DEFAULT_PING_INTERVAL_MSEC}.
     ;;
    #_public
    (§ method #_"long" (§ fn getPingIntervalMsec) [])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ return pingIntervalMsec)
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    ;;;
     ; Sets the period between pings for an individual peer.  Setting this lower means more accurate and timely
     ; ping times are available via {@link org.bitcoinj.core.Peer#getLastPingTime()} but it increases load on the
     ; remote node.  It defaults to {@link PeerGroup#DEFAULT_PING_INTERVAL_MSEC}.
     ; Setting the value to be <= 0 disables pinging entirely, although you can still request one yourself
     ; using {@link org.bitcoinj.core.Peer#ping()}.
     ;;
    #_public
    (§ method #_"void" (§ fn setPingIntervalMsec) [#_"long" (§ name pingIntervalMsec)])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ ass (§ name (.. this pingIntervalMsec)) pingIntervalMsec)
            (§ var #_"ListenableScheduledFuture<?>" (§ name task) vPingTask)
            (§ if (some? task))
            (§ block
                (.. task (cancel false))
            )
            (setupPinging)
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
        nil
    )

    ;;;
     ; If a peer is connected to that claims to speak a protocol version lower than the given version, it will
     ; be disconnected and another one will be tried instead.
     ;;
    #_public
    (§ method #_"void" (§ fn setMinRequiredProtocolVersion) [#_"int" (§ name minRequiredProtocolVersion)])
    (§ block
        (§ ass (§ name (.. this vMinRequiredProtocolVersion)) minRequiredProtocolVersion)
        nil
    )

    ;;; The minimum protocol version required: defaults to the version required for Bloom filtering. ;;
    #_public
    (§ method #_"int" (§ fn getMinRequiredProtocolVersion) [])
    (§ block
        vMinRequiredProtocolVersion
    )

    ;;;
     ; Returns our peers most commonly reported chain height.  If multiple heights are tied, the highest is returned.
     ; If no peers are connected, returns zero.
     ;;
    #_public
    (§ method #_"int" (§ fn getMostCommonChainHeight) [])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ return (getMostCommonChainHeight (.. this peers)))
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    ;;;
     ; Returns most commonly reported chain height from the given list of {@link Peer}s.
     ; If multiple heights are tied, the highest is returned.  If no peers are connected, returns zero.
     ;;
    #_public
    #_static
    (§ defn #_"int" (§ fn getMostCommonChainHeight) [#_"List<Peer>" (§ name peers)])
    (§ block
        (§ if (.. peers (isEmpty)))
        (§ block
            (§ return 0)
        )

        (§ var #_"List<Integer>" (§ name heights) (§ new #_"ArrayList<>" (.. peers (size))))
        (§ for (§ var #_"Peer" (§ name peer)) :for peers)
        (§ block
            (.. heights (add (§ cast #_"int" (.. peer (getBestHeight)))))
        )
        (Utils/maxOfMostFreq heights)
    )

    ;;;
     ; Given a list of Peers, return a Peer to be used as the download peer.  If you don't want PeerGroup to manage
     ; download peer statuses for you, just override this and always return null.
     ;;
    #_nilable
    #_protected
    (§ method #_"Peer" (§ fn selectDownloadPeer) [#_"List<Peer>" (§ name peers)])
    (§ block
        ;; Characteristics to select for in order of importance:
        ;;  - Chain height is reasonable (majority of nodes).
        ;;  - High enough protocol version for the features we want (but we'll settle for less).
        ;;  - Randomly, to try and spread the load.
        (§ if (.. peers (isEmpty)))
        (§ block
            (§ return nil)
        )

        ;; Make sure we don't select a peer that is behind/synchronizing itself.
        (§ var #_"int" (§ name mostCommonChainHeight) (getMostCommonChainHeight peers))
        (§ var #_"List<Peer>" (§ name candidates) (§ new #_"ArrayList<>"))
        (§ for (§ var #_"Peer" (§ name peer)) :for peers)
        (§ block
            (§ if (== (.. peer (getBestHeight)) mostCommonChainHeight))
            (§ block
                (.. candidates (add peer))
            )
        )

        ;; Of the candidates, find the peers that meet the minimum protocol version we want to target.  We could select
        ;; the highest version we've seen on the assumption that newer versions are always better but we don't want to
        ;; zap peers if they upgrade early.  If we can't find any peers that have our preferred protocol version or
        ;; better then we'll settle for the highest we found instead.
        (§ var #_"int" (§ name highestVersion) 0)
        (§ var #_"int" (§ name preferredVersion) 0)

        ;; if/when PREFERRED_VERSION is not equal to vMinRequiredProtocolVersion, reenable the last test in PeerGroupTest.downloadPeerSelection
        (§ var #_"int" (§ name PREFERRED_VERSION) (.. params (getProtocolVersionNum NetworkParameters/ProtocolVersion/BLOOM_FILTER)))
        (§ for (§ var #_"Peer" (§ name peer)) :for candidates)
        (§ block
            (§ ass (§ name highestVersion) (Math/max (.. peer (getPeerVersionMessage) clientVersion), highestVersion))
            (§ ass (§ name preferredVersion) (Math/min highestVersion, PREFERRED_VERSION))
        )
        (§ var #_"ArrayList<Peer>" (§ name candidates2) (§ new #_"ArrayList<>" (.. candidates (size))))
        (§ for (§ var #_"Peer" (§ name peer)) :for candidates)
        (§ block
            (§ if (§ expr preferredVersion <= (.. peer (getPeerVersionMessage) clientVersion)))
            (§ block
                (.. candidates2 (add peer))
            )
        )
        (§ var #_"int" (§ name index) (§ cast #_"int" (* (Math/random) (.. candidates2 (size)))))
        (.. candidates2 (get index))
    )

    ;;;
     ; Returns the currently selected download peer.  Bear in mind that it may have changed as soon as this method
     ; returns.  Can return null if no peer was selected.
     ;;
    #_public
    (§ method #_"Peer" (§ fn getDownloadPeer) [])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ return downloadPeer)
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    ;;;
     ; Returns the maximum number of {@link Peer}s to discover.  This maximum is checked after
     ; each {@link PeerDiscovery} so this max number can be surpassed.
     ; @return the maximum number of peers to discover.
     ;;
    #_public
    (§ method #_"int" (§ fn getMaxPeersToDiscoverCount) [])
    (§ block
        vMaxPeersToDiscoverCount
    )

    ;;;
     ; Sets the maximum number of {@link Peer}s to discover.  This maximum is checked after
     ; each {@link PeerDiscovery} so this max number can be surpassed.
     ; @param maxPeersToDiscoverCount the maximum number of peers to discover.
     ;;
    #_public
    (§ method #_"void" (§ fn setMaxPeersToDiscoverCount) [#_"int" (§ name maxPeersToDiscoverCount)])
    (§ block
        (§ ass (§ name (.. this vMaxPeersToDiscoverCount)) maxPeersToDiscoverCount)
        nil
    )

    ;;; See {@link #setUseLocalhostPeerWhenPossible(boolean)}. ;;
    #_public
    (§ method #_"boolean" (§ fn getUseLocalhostPeerWhenPossible) [])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ return useLocalhostPeerWhenPossible)
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    ;;;
     ; When true (the default), PeerGroup will attempt to connect to a Bitcoin node running on localhost before
     ; attempting to use the P2P network.  If successful, only localhost will be used.  This makes for a simple
     ; and easy way for a user to upgrade a bitcoinj based app running in SPV mode to fully validating security.
     ;;
    #_public
    (§ method #_"void" (§ fn setUseLocalhostPeerWhenPossible) [#_"boolean" (§ name useLocalhostPeerWhenPossible)])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ ass (§ name (.. this useLocalhostPeerWhenPossible)) useLocalhostPeerWhenPossible)
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
        nil
    )

    #_public
    (§ method #_"boolean" (§ fn isRunning) [])
    (§ block
        vRunning
    )

    ;;;
     ; Can be used to disable Bloom filtering entirely, even in SPV mode.  You are very unlikely to need this, it is
     ; an optimisation for rare cases when full validation is not required but it's still more efficient to download
     ; full blocks than filtered blocks.
     ;;
    #_public
    (§ method #_"void" (§ fn setBloomFilteringEnabled) [#_"boolean" (§ name bloomFilteringEnabled)])
    (§ block
        (§ ass (§ name (.. this vBloomFilteringEnabled)) bloomFilteringEnabled)
        nil
    )

    ;;; Returns whether the Bloom filtering protocol optimisation is in use: defaults to true. ;;
    #_public
    (§ method #_"boolean" (§ fn isBloomFilteringEnabled) [])
    (§ block
        vBloomFilteringEnabled
    )
)

#_(ns org.bitcoinj.core #_"PeerSocketHandler"
    (:import [java.io ByteArrayOutputStream IOException]
             [java.net ConnectException InetSocketAddress]
             [java.nio BufferUnderflowException ByteBuffer]
             [java.nio.channels NotYetConnectedException]
             [java.util.concurrent.locks Lock])
    (:import [com.google.common.annotations VisibleForTesting]
             [com.google.common.base Preconditions]
             [org.slf4j Logger LoggerFactory])
   (:require [org.bitcoinj.net AbstractTimeoutHandler MessageWriteTarget StreamConnection]
             [org.bitcoinj.utils Threading]))

;;;
 ; Handles high-level message (de)serialization for peers, acting as the bridge between the
 ; {@link org.bitcoinj.net} classes and {@link Peer}.
 ;;
#_public
#_abstract
(§ class #_"PeerSocketHandler" (§ extends #_"AbstractTimeoutHandler") (§ implements #_"StreamConnection")
    #_private
    #_static
    (§ def- #_"Logger" (§ name log) (LoggerFactory/getLogger (§ klass #_"PeerSocketHandler")))

    #_private
    (§ field- #_"MessageSerializer" (§ name serializer))
    #_protected
    (§ field #_"PeerAddress" (§ name peerAddress))
    ;; If we close() before we know our writeTarget, set this to true to call writeTarget.closeConnection() right away.
    #_private
    (§ field- #_"boolean" (§ name closePending))
    ;; writeTarget will be thread-safe, and may call into PeerGroup, which calls us, so we should call it unlocked.
    #_testing
    #_protected
    (§ field #_"MessageWriteTarget" (§ name writeTarget))

    ;; The ByteBuffers passed to us from the writeTarget are static in size, and usually smaller than some messages we
    ;; will receive.  For SPV clients, this should be rare (i.e. we're mostly dealing with small transactions), but for
    ;; messages which are larger than the read buffer, we have to keep a temporary buffer with its bytes.
    #_private
    (§ field- #_"byte[]" (§ name largeReadBuffer))
    #_private
    (§ field- #_"int" (§ name largeReadBufferPos))
    #_private
    (§ field- #_"BitcoinSerializer.BitcoinPacketHeader" (§ name header))

    #_private
    (§ field- #_"Lock" (§ name lock) (Threading/lock "PeerSocketHandler"))

    #_public
    (§ constructor #_"PeerSocketHandler" [#_"NetworkParameters" (§ name params), #_"InetSocketAddress" (§ name remoteIp)])
    (§ block
        (Preconditions/checkNotNull params)
        (§ ass (§ name serializer) (.. params (getDefaultSerializer)))
        (§ ass (§ name (.. this peerAddress)) (§ new #_"PeerAddress" params, remoteIp))
        this
    )

    #_public
    (§ constructor #_"PeerSocketHandler" [#_"NetworkParameters" (§ name params), #_"PeerAddress" (§ name peerAddress)])
    (§ block
        (Preconditions/checkNotNull params)
        (§ ass (§ name serializer) (.. params (getDefaultSerializer)))
        (§ ass (§ name (.. this peerAddress)) (Preconditions/checkNotNull peerAddress))
        this
    )

    ;;;
     ; Sends the given message to the peer.  Due to the asynchronousness of network programming, there is no guarantee
     ; the peer will have received it.  Throws NotYetConnectedException if we are not yet connected to the remote peer.
     ; TODO: Maybe use something other than the unchecked NotYetConnectedException here.
     ;;
    #_public
    (§ method #_"void" (§ fn sendMessage) [#_"Message" (§ name message)])
        (§ throws #_"NotYetConnectedException")
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ if (nil? writeTarget))
            (§ block
                (§ throw (§ new #_"NotYetConnectedException"))
            )
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
        ;; TODO: Some round-tripping could be avoided here.
        (§ var #_"ByteArrayOutputStream" (§ name out) (§ new #_"ByteArrayOutputStream"))
        (§ try )
        (§ block
            (.. serializer (serialize message, out))
            (.. writeTarget (writeBytes (.. out (toByteArray))))
        )
        (§ catch #_"IOException" (§ name e))
        (§ block
            (exceptionCaught e)
        )
        nil
    )

    ;;;
     ; Closes the connection to the peer if one exists, or immediately closes the connection as soon as it opens.
     ;;
    #_public
    (§ method #_"void" (§ fn close) [])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ if (nil? writeTarget))
            (§ block
                (§ ass (§ name closePending) true)
                (§ return nil)
            )
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
        (.. writeTarget (closeConnection))
        nil
    )

    #_override
    #_protected
    (§ method #_"void" (§ fn timeoutOccurred) [])
    (§ block
        (.. log (info "{}: Timed out", (getAddress)))
        (close)
        nil
    )

    ;;;
     ; Called every time a message is received from the network.
     ;;
    #_protected
    #_abstract
    (§ method #_"void" (§ fn processMessage) [#_"Message" (§ name m)])
        (§ throws #_"Exception")

    #_override
    #_public
    (§ method #_"int" (§ fn receiveBytes) [#_"ByteBuffer" (§ name buff)])
    (§ block
        (Preconditions/checkArgument (§ expr (.. buff (position)) == 0 && BitcoinSerializer/BitcoinPacketHeader/HEADER_LENGTH + 4 <= (.. buff (capacity))))
        (§ try )
        (§ block
            ;; Repeatedly try to deserialize messages until we hit a BufferUnderflowException.
            (§ var #_"boolean" (§ name firstMessage) true)
            (§ while true)
            (§ block
                ;; If we are in the middle of reading a message, try to fill that one first, before we expect another.
                (§ if (some? largeReadBuffer))
                (§ block
                    ;; This can only happen in the first iteration.
                    (Preconditions/checkState firstMessage)
                    ;; Read new bytes into the largeReadBuffer.
                    (§ var #_"int" (§ name bytesToGet) (Math/min (.. buff (remaining)), (- (.. largeReadBuffer length) largeReadBufferPos)))
                    (.. buff (get largeReadBuffer, largeReadBufferPos, bytesToGet))
                    (§ ass (§ name largeReadBufferPos) (+ largeReadBufferPos bytesToGet))
                    ;; Check the largeReadBuffer's status.
                    (§ if (§ expr largeReadBufferPos == (.. largeReadBuffer length)))
                    (§ block
                        ;; ...processing a message if one is available.
                        (processMessage (.. serializer (deserializePayload header, (ByteBuffer/wrap largeReadBuffer))))
                        (§ ass (§ name largeReadBuffer) nil)
                        (§ ass (§ name header) nil)
                        (§ ass (§ name firstMessage) false)
                    )
                    (§ else ) ;; ...or just returning if we don't have enough bytes yet.
                    (§ block
                        (§ return (.. buff (position)))
                    )
                )
                ;; Now try to deserialize any messages left in buff.
                (§ var #_"Message" (§ name message))
                (§ var #_"int" (§ name preSerializePosition) (.. buff (position)))
                (§ try )
                (§ block
                    (§ ass (§ name message) (.. serializer (deserialize buff)))
                )
                (§ catch #_"BufferUnderflowException" (§ name e))
                (§ block
                    ;; If we went through the whole buffer without a full message, we need to use the largeReadBuffer.
                    (§ if (§ expr firstMessage && (.. buff (limit)) == (.. buff (capacity))))
                    (§ block
                        ;; ...so reposition the buffer to 0 and read the next message header.
                        (.. buff (position 0))
                        (§ try )
                        (§ block
                            (.. serializer (seekPastMagicBytes buff))
                            (§ ass (§ name header) (.. serializer (deserializeHeader buff)))
                            ;; Initialize the largeReadBuffer with the next message's size and fill it with any bytes left in buff.
                            (§ ass (§ name largeReadBuffer) (§ new #_"byte[]" (§ count (.. header size))))
                            (§ ass (§ name largeReadBufferPos) (.. buff (remaining)))
                            (.. buff (get largeReadBuffer, 0, largeReadBufferPos))
                        )
                        (§ catch #_"BufferUnderflowException" (§ name e1))
                        (§ block
                            ;; If we went through a whole buffer's worth of bytes without getting a header, give up.
                            ;; In cases where the buff is just really small, we could create a second largeReadBuffer
                            ;; that we use to deserialize the magic+header, but that is rather complicated when the buff
                            ;; should probably be at least that big anyway (for efficiency).
                            (§ throw (§ new #_"ProtocolException" (§ expr "No magic bytes+header after reading " + (.. buff (capacity)) + " bytes")))
                        )
                    )
                    (§ else )
                    (§ block
                        ;; Reposition the buffer to its original position, which saves us from skipping messages by
                        ;; seeking past part of the magic bytes before all of them are in the buffer.
                        (.. buff (position preSerializePosition))
                    )
                    (§ return (.. buff (position)))
                )
                ;; Process our freshly deserialized message.
                (processMessage message)
                (§ ass (§ name firstMessage) false)
            )
        )
        (§ catch #_"Exception" (§ name e))
        (§ block
            (exceptionCaught e)
            ;; Returning -1 also throws an IllegalStateException upstream and kills the connection.
            (§ return -1)
        )
    )

    ;;;
     ; Sets the {@link MessageWriteTarget} used to write messages to the peer.  This should almost never be called,
     ; it is called automatically by {@link org.bitcoinj.net.NioClient} or
     ; {@link org.bitcoinj.net.NioClientManager} once the socket finishes initialization.
     ;;
    #_override
    #_public
    (§ method #_"void" (§ fn setWriteTarget) [#_"MessageWriteTarget" (§ name writeTarget)])
    (§ block
        (Preconditions/checkArgument (some? writeTarget))

        (.. lock (lock))
        (§ var #_"boolean" (§ name closeNow) false)
        (§ try )
        (§ block
            (Preconditions/checkArgument (== (.. this writeTarget) nil))

            (§ ass (§ name closeNow) closePending)
            (§ ass (§ name (.. this writeTarget)) writeTarget)
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
        (§ if closeNow)
        (§ block
            (.. writeTarget (closeConnection))
        )
        nil
    )

    #_override
    #_public
    (§ method #_"int" (§ fn getMaxMessageSize) [])
    (§ block
        Message/MAX_SIZE
    )

    ;;;
     ; @return the IP address and port of peer.
     ;;
    #_public
    (§ method #_"PeerAddress" (§ fn getAddress) [])
    (§ block
        peerAddress
    )

    ;;; Catch any exceptions, logging them and then closing the channel. ;;
    #_private
    (§ method- #_"void" (§ fn exceptionCaught) [#_"Exception" (§ name e)])
    (§ block
        (§ var #_"PeerAddress" (§ name addr) (getAddress))
        (§ var #_"String" (§ name s) (if (some? addr) (.. addr (toString)) "?"))
        (§ if (§ expr (§ insta e #_"ConnectException") || (§ insta e #_"IOException")))
        (§ block
            ;; Short message for network errors
            (.. log (info (§ expr s + " - " + (.. e (getMessage)))))
        )
        (§ else )
        (§ block
            (.. log (warn (§ expr s + " - "), e))
            (§ var #_"Thread.UncaughtExceptionHandler" (§ name handler) Threading/uncaughtExceptionHandler)
            (§ if (some? handler))
            (§ block
                (.. handler (uncaughtException (Thread/currentThread), e))
            )
        )

        (close)
        nil
    )
)

#_(ns org.bitcoinj.core #_"Ping"
    (:import [java.io IOException OutputStream]))

;;;
 ; <p>Instances of this class are not safe for use by multiple threads.</p>
 ;;
#_public
(§ class #_"Ping" (§ extends #_"Message")
    #_private
    (§ field- #_"long" (§ name nonce))
    #_private
    (§ field- #_"boolean" (§ name hasNonce))

    #_public
    (§ constructor #_"Ping" [#_"NetworkParameters" (§ name params), #_"byte[]" (§ name payloadBytes)])
        (§ throws #_"ProtocolException")
    (§ block
        (§ super params, payloadBytes, 0)
        this
    )

    ;;;
     ; Create a Ping with a nonce value.
     ; Only use this if the remote node has a protocol version > 60000.
     ;;
    #_public
    (§ constructor #_"Ping" [#_"long" (§ name nonce)])
    (§ block
        (§ ass (§ name (.. this nonce)) nonce)
        (§ ass (§ name (.. this hasNonce)) true)
        this
    )

    ;;;
     ; Create a Ping without a nonce value.
     ; Only use this if the remote node has a protocol version <= 60000.
     ;;
    #_public
    (§ constructor #_"Ping" [])
    (§ block
        (§ ass (§ name (.. this hasNonce)) false)
        this
    )

    #_override
    #_public
    (§ method #_"void" (§ fn bitcoinSerializeToStream) [#_"OutputStream" (§ name stream)])
        (§ throws #_"IOException")
    (§ block
        (§ if hasNonce)
        (§ block
            (Utils/int64ToByteStreamLE nonce, stream)
        )
        nil
    )

    #_override
    #_protected
    (§ method #_"void" (§ fn parse) [])
        (§ throws #_"ProtocolException")
    (§ block
        (§ try )
        (§ block
            (§ ass (§ name nonce) (readInt64))
            (§ ass (§ name hasNonce) true)
        )
        (§ catch #_"ProtocolException" (§ name e))
        (§ block
            (§ ass (§ name hasNonce) false)
        )
        (§ ass (§ name length) (if hasNonce 8 0))
        nil
    )

    #_public
    (§ method #_"boolean" (§ fn hasNonce) [])
    (§ block
        hasNonce
    )

    #_public
    (§ method #_"long" (§ fn getNonce) [])
    (§ block
        nonce
    )
)

#_(ns org.bitcoinj.core #_"Pong"
    (:import [java.io IOException OutputStream]))

;;;
 ; <p>Instances of this class are not safe for use by multiple threads.</p>
 ;;
#_public
(§ class #_"Pong" (§ extends #_"Message")
    #_private
    (§ field- #_"long" (§ name nonce))

    #_public
    (§ constructor #_"Pong" [#_"NetworkParameters" (§ name params), #_"byte[]" (§ name payloadBytes)])
        (§ throws #_"ProtocolException")
    (§ block
        (§ super params, payloadBytes, 0)
        this
    )

    ;;;
     ; Create a Pong with a nonce value.
     ; Only use this if the remote node has a protocol version > 60000.
     ;;
    #_public
    (§ constructor #_"Pong" [#_"long" (§ name nonce)])
    (§ block
        (§ ass (§ name (.. this nonce)) nonce)
        this
    )

    #_override
    #_protected
    (§ method #_"void" (§ fn parse) [])
        (§ throws #_"ProtocolException")
    (§ block
        (§ ass (§ name nonce) (readInt64))
        (§ ass (§ name length) 8)
        nil
    )

    #_override
    #_public
    (§ method #_"void" (§ fn bitcoinSerializeToStream) [#_"OutputStream" (§ name stream)])
        (§ throws #_"IOException")
    (§ block
        (Utils/int64ToByteStreamLE nonce, stream)
        nil
    )

    ;;; Returns the nonce sent by the remote peer. ;;
    #_public
    (§ method #_"long" (§ fn getNonce) [])
    (§ block
        nonce
    )
)

#_(ns org.bitcoinj.core #_"ProtocolException")

#_public
(§ class #_"ProtocolException" (§ extends #_"VerificationException")
    #_public
    (§ constructor #_"ProtocolException" [#_"String" (§ name msg)])
    (§ block
        (§ super msg)
        this
    )

    #_public
    (§ constructor #_"ProtocolException" [#_"Exception" (§ name e)])
    (§ block
        (§ super e)
        this
    )

    #_public
    (§ constructor #_"ProtocolException" [#_"String" (§ name msg), #_"Exception" (§ name e)])
    (§ block
        (§ super msg, e)
        this
    )
)

#_(ns org.bitcoinj.core #_"PrunedException")

;; TODO: Rename PrunedException to something like RequiredDataWasPrunedException.

;;;
 ; PrunedException is thrown in cases where a fully verifying node has deleted (pruned) old block data that turned
 ; out to be necessary for handling a re-org.  Normally this should never happen unless you're playing with the testnet
 ; as the pruning parameters should be set very conservatively, such that an absolutely enormous re-org would be
 ; required to trigger it.
 ;;
#_public
(§ class #_"PrunedException" (§ extends #_"Exception")
    #_private
    (§ field- #_"Sha256Hash" (§ name hash))

    #_public
    (§ constructor #_"PrunedException" [#_"Sha256Hash" (§ name hash)])
    (§ block
        (§ super (.. hash (toString)))

        (§ ass (§ name (.. this hash)) hash)
        this
    )

    #_public
    (§ method #_"Sha256Hash" (§ fn getHash) [])
    (§ block
        hash
    )
)

#_(ns org.bitcoinj.core #_"RejectMessage"
    (:import [java.io IOException OutputStream]
             [java.util Locale])
    (:import [com.google.common.base Objects]))

;;;
 ; <p>A message sent by nodes when a message we sent was rejected (i.e. a transaction had too little fee/was invalid/etc).</p>
 ;
 ; <p>Instances of this class are not safe for use by multiple threads.</p>
 ;;
#_public
(§ class #_"RejectMessage" (§ extends #_"Message")
    #_private
    (§ field- #_"String" (§ name message))
    #_private
    (§ field- #_"String" (§ name reason))

    #_public
    (§ enum #_"RejectCode"
        ;;; The message was not able to be parsed. ;;
        (§ item (MALFORMED (§ cast #_"byte" 0x01)))
        ;;; The message described an invalid object. ;;
        (§ item (INVALID (§ cast #_"byte" 0x10)))
        ;;; The message was obsolete or described an object which is obsolete (e.g. unsupported, old version, v1 block). ;;
        (§ item (OBSOLETE (§ cast #_"byte" 0x11)))
        ;;;
         ; The message was relayed multiple times or described an object which is in conflict with another.
         ; This message can describe errors in protocol implementation or the presence of an attempt to DOUBLE SPEND.
         ;;
        (§ item (DUPLICATE (§ cast #_"byte" 0x12)))
        ;;;
         ; The message described an object was not standard and was thus not accepted.
         ; Bitcoin Core has a concept of standard transaction forms, which describe scripts and encodings which
         ; it is willing to relay further.  Other transactions are neither relayed nor mined, though they are considered
         ; valid if they appear in a block.
         ;;
        (§ item (NONSTANDARD (§ cast #_"byte" 0x40)))
        ;;;
         ; This refers to a specific form of NONSTANDARD transactions, which have an output smaller than some constant
         ; defining them as dust (this is no longer used).
         ;;
        (§ item (DUST (§ cast #_"byte" 0x41)))
        ;;; The messages described an object which did not have sufficient fee to be relayed further. ;;
        (§ item (INSUFFICIENTFEE (§ cast #_"byte" 0x42)))
        ;;; The message described a block which was invalid according to hard-coded checkpoint blocks. ;;
        (§ item (CHECKPOINT (§ cast #_"byte" 0x43)))
        (§ item (OTHER (§ cast #_"byte" 0xff)))

        (§ var #_"byte" (§ name code))

        (§ constructor #_"RejectCode" [#_"byte" (§ name code)])
        (§ block
            (§ ass (§ name (.. this code)) code)
            this
        )

        #_static
        (§ defn #_"RejectCode" (§ fn fromCode) [#_"byte" (§ name code)])
        (§ block
            (§ for (§ var #_"RejectCode" (§ name rejectCode)) :for (RejectCode/values))
            (§ block
                (§ if (== (.. rejectCode code) code))
                (§ block
                    (§ return rejectCode)
                )
            )

            OTHER
        )
    )

    #_private
    (§ field- #_"RejectCode" (§ name code))
    #_private
    (§ field- #_"Sha256Hash" (§ name messageHash))

    #_public
    (§ constructor #_"RejectMessage" [#_"NetworkParameters" (§ name params), #_"byte[]" (§ name payload)])
        (§ throws #_"ProtocolException")
    (§ block
        (§ super params, payload, 0)
        this
    )

    ;;; Constructs a reject message that fingers the object with the given hash as rejected for the given reason. ;;
    #_public
    (§ constructor #_"RejectMessage" [#_"NetworkParameters" (§ name params), #_"RejectCode" (§ name code), #_"Sha256Hash" (§ name hash), #_"String" (§ name message), #_"String" (§ name reason)])
        (§ throws #_"ProtocolException")
    (§ block
        (§ super params)

        (§ ass (§ name (.. this code)) code)
        (§ ass (§ name (.. this messageHash)) hash)
        (§ ass (§ name (.. this message)) message)
        (§ ass (§ name (.. this reason)) reason)
        this
    )

    #_override
    #_protected
    (§ method #_"void" (§ fn parse) [])
        (§ throws #_"ProtocolException")
    (§ block
        (§ ass (§ name message) (readStr))
        (§ ass (§ name code) (RejectCode/fromCode (§ expr (readBytes 1)[0])))
        (§ ass (§ name reason) (readStr))
        (§ if (§ expr (.. message (equals "block")) || (.. message (equals "tx"))))
        (§ block
            (§ ass (§ name messageHash) (readHash))
        )
        (§ ass (§ name length) (- cursor offset))
        nil
    )

    #_override
    #_public
    (§ method #_"void" (§ fn bitcoinSerializeToStream) [#_"OutputStream" (§ name stream)])
        (§ throws #_"IOException")
    (§ block
        (§ var #_"byte[]" (§ name messageBytes) (.. message (getBytes "UTF-8")))
        (.. stream (write (.. (§ new #_"VarInt" (.. messageBytes length)) (encode))))
        (.. stream (write messageBytes))
        (.. stream (write (.. code code)))
        (§ var #_"byte[]" (§ name reasonBytes) (.. reason (getBytes "UTF-8")))
        (.. stream (write (.. (§ new #_"VarInt" (.. reasonBytes length)) (encode))))
        (.. stream (write reasonBytes))
        (§ if (§ expr (.. "block" (equals message)) || (.. "tx" (equals message))))
        (§ block
            (.. stream (write (.. messageHash (getReversedBytes))))
        )
        nil
    )

    ;;;
     ; Provides the type of message which was rejected by the peer.
     ; Note that this is ENTIRELY UNTRUSTED and should be sanity-checked before it is printed or processed.
     ;;
    #_public
    (§ method #_"String" (§ fn getRejectedMessage) [])
    (§ block
        message
    )

    ;;;
     ; Provides the hash of the rejected object (if getRejectedMessage() is either "tx" or "block"), otherwise null.
     ;;
    #_public
    (§ method #_"Sha256Hash" (§ fn getRejectedObjectHash) [])
    (§ block
        messageHash
    )

    ;;;
     ; The reason code given for why the peer rejected the message.
     ;;
    #_public
    (§ method #_"RejectCode" (§ fn getReasonCode) [])
    (§ block
        code
    )

    ;;;
     ; The reason message given for rejection.
     ; Note that this is ENTIRELY UNTRUSTED and should be sanity-checked before it is printed or processed.
     ;;
    #_public
    (§ method #_"String" (§ fn getReasonString) [])
    (§ block
        reason
    )

    ;;;
     ; A String representation of the relevant details of this reject message.
     ; Be aware that the value returned by this method includes the value returned by
     ; {@link #getReasonString() getReasonString}, which is taken from the reject message unchecked.
     ; Through malice or otherwise, it might contain control characters or other harmful content.
     ;;
    #_override
    #_public
    (§ method #_"String" (§ fn toString) [])
    (§ block
        (§ var #_"Sha256Hash" (§ name hash) (getRejectedObjectHash))
        (String/format Locale/US, "Reject: %s %s for reason '%s' (%d)", (getRejectedMessage), (or hash ""), (getReasonString), (.. (getReasonCode) code))
    )

    #_override
    #_public
    (§ method #_"boolean" (§ fn equals) [#_"Object" (§ name o)])
    (§ block
        (§ if (§ expr this == o))
        (§ block
            (§ return true)
        )
        (§ if (§ expr o == nil || (getClass) != (.. o (getClass))))
        (§ block
            (§ return false)
        )
        (§ var #_"RejectMessage" (§ name other) (§ cast #_"RejectMessage" o))
        (§ expr (.. message (equals (.. other message))) && (.. code (equals (.. other code))) && (.. reason (equals (.. other reason))) && (.. messageHash (equals (.. other messageHash))))
    )

    #_override
    #_public
    (§ method #_"int" (§ fn hashCode) [])
    (§ block
        (Objects/hashCode message, code, reason, messageHash)
    )
)

#_(ns org.bitcoinj.core #_"RejectedTransactionException")

;;;
 ; This exception is used by the TransactionBroadcast class to indicate that a broadcast
 ; Transaction has been rejected by the network, for example because it violates a
 ; protocol rule.  Note that not all invalid transactions generate a reject message, and
 ; some peers may never do so.
 ;;
#_public
(§ class #_"RejectedTransactionException" (§ extends #_"Exception")
    #_private
    (§ field- #_"Transaction" (§ name tx))
    #_private
    (§ field- #_"RejectMessage" (§ name rejectMessage))

    #_public
    (§ constructor #_"RejectedTransactionException" [#_"Transaction" (§ name tx), #_"RejectMessage" (§ name rejectMessage)])
    (§ block
        (§ super (.. rejectMessage (toString)))

        (§ ass (§ name (.. this tx)) tx)
        (§ ass (§ name (.. this rejectMessage)) rejectMessage)
        this
    )

    ;;; Return the original Transaction object whose broadcast was rejected. ;;
    #_public
    (§ method #_"Transaction" (§ fn getTransaction) [])
    (§ block
        tx
    )

    ;;; Return the RejectMessage object representing the broadcast rejection. ;;
    #_public
    (§ method #_"RejectMessage" (§ fn getRejectMessage) [])
    (§ block
        rejectMessage
    )
)

#_(ns org.bitcoinj.core #_"ScriptException"
   (:require [org.bitcoinj.script ScriptError]))

#_public
(§ class #_"ScriptException" (§ extends #_"VerificationException")
    #_private
    (§ field- #_"ScriptError" (§ name err))

    #_public
    (§ constructor #_"ScriptException" [#_"ScriptError" (§ name err), #_"String" (§ name msg)])
    (§ block
        (§ super msg)
        (§ ass (§ name (.. this err)) err)
        this
    )

    #_public
    (§ constructor #_"ScriptException" [#_"ScriptError" (§ name err), #_"String" (§ name msg), #_"Exception" (§ name e)])
    (§ block
        (§ super msg, e)
        (§ ass (§ name (.. this err)) err)
        this
    )

    #_public
    (§ method #_"ScriptError" (§ fn getError) [])
    (§ block
        err
    )
)

#_(ns org.bitcoinj.core #_"Sha256Hash"
    (:import [java.io File FileInputStream IOException Serializable]
             [java.math BigInteger]
             [java.security MessageDigest NoSuchAlgorithmException]
             [java.util Arrays])
    (:import [com.google.common.base Preconditions]
             [com.google.common.io ByteStreams]
             [com.google.common.primitives *]))

;;;
 ; A Sha256Hash just wraps a byte[] so that equals and hashcode work correctly,
 ; allowing it to be used as keys in a map.
 ; It also checks that the length is correct and provides a bit more type safety.
 ;;
#_public
(§ class #_"Sha256Hash" (§ implements #_"Serializable", #_"Comparable<Sha256Hash>")
    #_public
    #_static
    (§ def #_"int" (§ name LENGTH) 32) ;; bytes
    #_public
    #_static
    (§ def #_"Sha256Hash" (§ name ZERO_HASH) (wrap (§ new #_"byte[]" (§ count LENGTH))))

    #_private
    (§ field- #_"byte[]" (§ name bytes))

    ;;;
     ; Use {@link #wrap(byte[])} instead.
     ;;
    #_protected
    (§ constructor #_"Sha256Hash" [#_"byte[]" (§ name rawHashBytes)])
    (§ block
        (Preconditions/checkArgument (== (.. rawHashBytes length) LENGTH))
        (§ ass (§ name (.. this bytes)) rawHashBytes)
        this
    )

    ;;;
     ; Creates a new instance that wraps the given hash value.
     ;
     ; @param rawHashBytes The raw hash bytes to wrap.
     ; @return a new instance.
     ; @throws IllegalArgumentException if the given array length is not exactly 32.
     ;;
    #_public
    #_static
    (§ defn #_"Sha256Hash" (§ fn wrap) [#_"byte[]" (§ name rawHashBytes)])
    (§ block
        (§ new #_"Sha256Hash" rawHashBytes)
    )

    ;;;
     ; Creates a new instance that wraps the given hash value (represented as a hex string).
     ;
     ; @param hexString A hash value represented as a hex string.
     ; @return a new instance.
     ; @throws IllegalArgumentException if the given string is not a valid hex string, or if it does not represent exactly 32 bytes.
     ;;
    #_public
    #_static
    (§ defn #_"Sha256Hash" (§ fn wrap) [#_"String" (§ name hexString)])
    (§ block
        (wrap (.. Utils/HEX (decode hexString)))
    )

    ;;;
     ; Creates a new instance that wraps the given hash value, but with byte order reversed.
     ;
     ; @param rawHashBytes The raw hash bytes to wrap.
     ; @return a new instance.
     ; @throws IllegalArgumentException if the given array length is not exactly 32.
     ;;
    #_public
    #_static
    (§ defn #_"Sha256Hash" (§ fn wrapReversed) [#_"byte[]" (§ name rawHashBytes)])
    (§ block
        (wrap (Utils/reverseBytes rawHashBytes))
    )

    ;;;
     ; Creates a new instance containing the calculated (one-time) hash of the given bytes.
     ;
     ; @param contents The bytes on which the hash value is calculated.
     ; @return a new instance containing the calculated (one-time) hash.
     ;;
    #_public
    #_static
    (§ defn #_"Sha256Hash" (§ fn of) [#_"byte[]" (§ name contents)])
    (§ block
        (wrap (hash contents))
    )

    ;;;
     ; Creates a new instance containing the hash of the calculated hash of the given bytes.
     ;
     ; @param contents The bytes on which the hash value is calculated.
     ; @return a new instance containing the calculated (two-time) hash.
     ;;
    #_public
    #_static
    (§ defn #_"Sha256Hash" (§ fn twiceOf) [#_"byte[]" (§ name contents)])
    (§ block
        (wrap (hashTwice contents))
    )

    ;;;
     ; Creates a new instance containing the calculated (one-time) hash of the given file's contents.
     ;
     ; The file contents are read fully into memory, so this method should only be used with small files.
     ;
     ; @param file The file on which the hash value is calculated.
     ; @return a new instance containing the calculated (one-time) hash.
     ; @throws IOException if an error occurs while reading the file.
     ;;
    #_public
    #_static
    (§ defn #_"Sha256Hash" (§ fn of) [#_"File" (§ name file)])
        (§ throws #_"IOException")
    (§ block
        (§ var #_"FileInputStream" (§ name in) (§ new #_"FileInputStream" file))
        (§ try )
        (§ block
            (§ return (of (ByteStreams/toByteArray in)))
        )
        (§ finally )
        (§ block
            (.. in (close))
        )
    )

    ;;;
     ; Returns a new SHA-256 MessageDigest instance.
     ;
     ; This is a convenience method which wraps the checked
     ; exception that can never occur with a RuntimeException.
     ;
     ; @return a new SHA-256 MessageDigest instance.
     ;;
    #_public
    #_static
    (§ defn #_"MessageDigest" (§ fn newDigest) [])
    (§ block
        (§ try )
        (§ block
            (§ return (MessageDigest/getInstance "SHA-256"))
        )
        (§ catch #_"NoSuchAlgorithmException" (§ name e))
        (§ block
            (§ throw (§ new #_"RuntimeException" e)) ;; Can't happen.
        )
    )

    ;;;
     ; Calculates the SHA-256 hash of the given bytes.
     ;
     ; @param input The bytes to hash.
     ; @return the hash (in big-endian order).
     ;;
    #_public
    #_static
    (§ defn #_"byte[]" (§ fn hash) [#_"byte[]" (§ name input)])
    (§ block
        (hash input, 0, (.. input length))
    )

    ;;;
     ; Calculates the SHA-256 hash of the given byte range.
     ;
     ; @param input The array containing the bytes to hash.
     ; @param offset The offset within the array of the bytes to hash.
     ; @param length The number of bytes to hash.
     ; @return the hash (in big-endian order).
     ;;
    #_public
    #_static
    (§ defn #_"byte[]" (§ fn hash) [#_"byte[]" (§ name input), #_"int" (§ name offset), #_"int" (§ name length)])
    (§ block
        (§ var #_"MessageDigest" (§ name digest) (newDigest))
        (.. digest (update input, offset, length))
        (.. digest (digest))
    )

    ;;;
     ; Calculates the SHA-256 hash of the given bytes,
     ; and then hashes the resulting hash again.
     ;
     ; @param input The bytes to hash.
     ; @return the double-hash (in big-endian order).
     ;;
    #_public
    #_static
    (§ defn #_"byte[]" (§ fn hashTwice) [#_"byte[]" (§ name input)])
    (§ block
        (hashTwice input, 0, (.. input length))
    )

    ;;;
     ; Calculates the SHA-256 hash of the given byte range,
     ; and then hashes the resulting hash again.
     ;
     ; @param input The array containing the bytes to hash.
     ; @param offset The offset within the array of the bytes to hash.
     ; @param length The number of bytes to hash.
     ; @return the double-hash (in big-endian order).
     ;;
    #_public
    #_static
    (§ defn #_"byte[]" (§ fn hashTwice) [#_"byte[]" (§ name input), #_"int" (§ name offset), #_"int" (§ name length)])
    (§ block
        (§ var #_"MessageDigest" (§ name digest) (newDigest))
        (.. digest (update input, offset, length))
        (.. digest (digest (.. digest (digest))))
    )

    ;;;
     ; Calculates the hash of hash on the given byte ranges.  This is equivalent to
     ; concatenating the two ranges and then passing the result to {@link #hashTwice(byte[])}.
     ;;
    #_public
    #_static
    (§ defn #_"byte[]" (§ fn hashTwice) [#_"byte[]" (§ name input1), #_"int" (§ name offset1), #_"int" (§ name length1), #_"byte[]" (§ name input2), #_"int" (§ name offset2), #_"int" (§ name length2)])
    (§ block
        (§ var #_"MessageDigest" (§ name digest) (newDigest))
        (.. digest (update input1, offset1, length1))
        (.. digest (update input2, offset2, length2))
        (.. digest (digest (.. digest (digest))))
    )

    #_override
    #_public
    (§ method #_"boolean" (§ fn equals) [#_"Object" (§ name o)])
    (§ block
        (§ if (§ expr this == o))
        (§ block
            (§ return true)
        )
        (§ if (§ expr o == nil || (getClass) != (.. o (getClass))))
        (§ block
            (§ return false)
        )
        (Arrays/equals bytes, (§ expr (.. (§ cast #_"Sha256Hash" o) bytes)))
    )

    ;;;
     ; Returns the last four bytes of the wrapped hash.  This should be unique enough to be a suitable hash code
     ; even for blocks, where the goal is to try and get the first bytes to be zeros (i.e. the value as a big integer
     ; lower than the target value).
     ;;
    #_override
    #_public
    (§ method #_"int" (§ fn hashCode) [])
    (§ block
        ;; Use the last 4 bytes, not the first 4 which are often zeros in Bitcoin.
        (Ints/fromBytes (§ ai bytes (§ expr LENGTH - 4)), (§ ai bytes (§ expr LENGTH - 3)), (§ ai bytes (§ expr LENGTH - 2)), (§ ai bytes (§ expr LENGTH - 1)))
    )

    #_override
    #_public
    (§ method #_"String" (§ fn toString) [])
    (§ block
        (.. Utils/HEX (encode bytes))
    )

    ;;;
     ; Returns the bytes interpreted as a positive integer.
     ;;
    #_public
    (§ method #_"BigInteger" (§ fn toBigInteger) [])
    (§ block
        (§ new #_"BigInteger" 1, bytes)
    )

    ;;;
     ; Returns the internal byte array, without defensively copying.  Therefore do NOT modify the returned array.
     ;;
    #_public
    (§ method #_"byte[]" (§ fn getBytes) [])
    (§ block
        bytes
    )

    ;;;
     ; Returns a reversed copy of the internal byte array.
     ;;
    #_public
    (§ method #_"byte[]" (§ fn getReversedBytes) [])
    (§ block
        (Utils/reverseBytes bytes)
    )

    #_override
    #_public
    (§ method #_"int" (§ fn compareTo) [#_"Sha256Hash" (§ name other)])
    (§ block
        (§ for (§ var #_"int" (§ name i) (- LENGTH 1)) :for (<= 0 i) :for (§ ass (§ name i) (- i 1)))
        (§ block
            (§ var #_"int" (§ name thisByte) (§ expr this.bytes[i] & 0xff))
            (§ var #_"int" (§ name otherByte) (§ expr other.bytes[i] & 0xff))
            (§ if (> thisByte otherByte))
            (§ block
                (§ return 1)
            )
            (§ if (< thisByte otherByte))
            (§ block
                (§ return -1)
            )
        )
        0
    )
)

#_(ns org.bitcoinj.core #_"StoredBlock"
    (:import [java.math BigInteger]
             [java.nio ByteBuffer]
             [java.util Locale])
    (:import [com.google.common.base Objects Preconditions])
   (:require [org.bitcoinj.store BlockStore BlockStoreException]))

;;;
 ; Wraps a {@link Block} object with extra data that can be derived from the block chain but is slow or inconvenient
 ; to calculate.  By storing it alongside the block header we reduce the amount of work required significantly.
 ; Recalculation is slow because the fields are cumulative - to find the chainWork you have to iterate over every
 ; block in the chain back to the genesis block, which involves lots of seeking/loading etc.  So we just keep a
 ; running total: it's a disk space vs cpu/io tradeoff.
 ;
 ; StoredBlocks are put inside a {@link BlockStore} which saves them to memory or disk.
 ;;
#_public
(§ class #_"StoredBlock"
    ;; A BigInteger representing the total amount of work done so far on this chain.  As of May 2011 it takes
    ;; 8 bytes to represent this field, so 12 bytes should be plenty for now.
    #_public
    #_static
    (§ def #_"int" (§ name CHAIN_WORK_BYTES) 12)
    #_public
    #_static
    (§ def #_"byte[]" (§ name EMPTY_BYTES) (§ new #_"byte[]" (§ count CHAIN_WORK_BYTES)))
    #_public
    #_static
    (§ def #_"int" (§ name COMPACT_SERIALIZED_SIZE) (§ expr Block/HEADER_SIZE + CHAIN_WORK_BYTES + 4)) ;; for height

    #_private
    (§ field- #_"Block" (§ name header))
    #_private
    (§ field- #_"BigInteger" (§ name chainWork))
    #_private
    (§ field- #_"int" (§ name height))

    #_public
    (§ constructor #_"StoredBlock" [#_"Block" (§ name header), #_"BigInteger" (§ name chainWork), #_"int" (§ name height)])
    (§ block
        (§ ass (§ name (.. this header)) header)
        (§ ass (§ name (.. this chainWork)) chainWork)
        (§ ass (§ name (.. this height)) height)
        this
    )

    ;;;
     ; The block header this object wraps.  The referenced block object must not have any transactions in it.
     ;;
    #_public
    (§ method #_"Block" (§ fn getHeader) [])
    (§ block
        header
    )

    ;;;
     ; The total sum of work done in this block, and all the blocks below it in the chain.  Work is a measure of
     ; how many tries are needed to solve a block.  If the target is set to cover 10% of the total hash value space,
     ; then the work represented by a block is 10.
     ;;
    #_public
    (§ method #_"BigInteger" (§ fn getChainWork) [])
    (§ block
        chainWork
    )

    ;;;
     ; Position in the chain for this block.  The genesis block has a height of zero.
     ;;
    #_public
    (§ method #_"int" (§ fn getHeight) [])
    (§ block
        height
    )

    ;;; Returns true if this objects chainWork is higher than the others. ;;
    #_public
    (§ method #_"boolean" (§ fn moreWorkThan) [#_"StoredBlock" (§ name other)])
    (§ block
        (§ expr 0 < (.. chainWork (compareTo (.. other chainWork))))
    )

    #_override
    #_public
    (§ method #_"boolean" (§ fn equals) [#_"Object" (§ name o)])
    (§ block
        (§ if (§ expr this == o))
        (§ block
            (§ return true)
        )
        (§ if (§ expr o == nil || (getClass) != (.. o (getClass))))
        (§ block
            (§ return false)
        )
        (§ var #_"StoredBlock" (§ name other) (§ cast #_"StoredBlock" o))
        (§ expr (.. header (equals (.. other header))) && (.. chainWork (equals (.. other chainWork))) && height == (.. other height))
    )

    #_override
    #_public
    (§ method #_"int" (§ fn hashCode) [])
    (§ block
        (Objects/hashCode header, chainWork, height)
    )

    ;;;
     ; Creates a new StoredBlock, calculating the additional fields by adding to the values in this block.
     ;;
    #_public
    (§ method #_"StoredBlock" (§ fn build) [#_"Block" (§ name block)])
        (§ throws #_"VerificationException")
    (§ block
        ;; Stored blocks track total work done in this chain, because the canonical chain is the one that represents
        ;; the largest amount of work done not the tallest.
        (§ var #_"BigInteger" (§ name chainWork) (.. this chainWork (add (.. block (getWork)))))
        (§ var #_"int" (§ name height) (+ (.. this height) 1))
        (§ new #_"StoredBlock" block, chainWork, height)
    )

    ;;;
     ; Given a block store, looks up the previous block in this chain.  Convenience method for doing
     ; <tt>store.get(this.getHeader().getPrevBlockHash())</tt>.
     ;
     ; @return the previous block in the chain or null if it was not found in the store.
     ;;
    #_public
    (§ method #_"StoredBlock" (§ fn getPrev) [#_"BlockStore" (§ name store)])
        (§ throws #_"BlockStoreException")
    (§ block
        (.. store (get (.. (getHeader) (getPrevBlockHash))))
    )

    ;;; Serializes the stored block to a custom packed format.  Used by {@link CheckpointManager}. ;;
    #_public
    (§ method #_"void" (§ fn serializeCompact) [#_"ByteBuffer" (§ name buffer)])
    (§ block
        (§ var #_"byte[]" (§ name chainWorkBytes) (.. (getChainWork) (toByteArray)))
        (Preconditions/checkState (§ expr (.. chainWorkBytes length) <= CHAIN_WORK_BYTES), "Ran out of space to store chain work!")
        (§ if (< (.. chainWorkBytes length) CHAIN_WORK_BYTES))
        (§ block
            ;; Pad to the right size.
            (.. buffer (put EMPTY_BYTES, 0, (§ expr CHAIN_WORK_BYTES - (.. chainWorkBytes length))))
        )
        (.. buffer (put chainWorkBytes))
        (.. buffer (putInt (getHeight)))
        ;; Using unsafeBitcoinSerialize here can give us direct access to the same bytes we read off the wire,
        ;; avoiding serialization round-trips.
        (§ var #_"byte[]" (§ name bytes) (.. (getHeader) (unsafeBitcoinSerialize)))
        (.. buffer (put bytes, 0, Block/HEADER_SIZE)) ;; Trim the trailing 00 byte (zero transactions).
        nil
    )

    ;;; De-serializes the stored block from a custom packed format.  Used by {@link CheckpointManager}. ;;
    #_public
    #_static
    (§ defn #_"StoredBlock" (§ fn deserializeCompact) [#_"NetworkParameters" (§ name params), #_"ByteBuffer" (§ name buffer)])
        (§ throws #_"ProtocolException")
    (§ block
        (§ var #_"byte[]" (§ name chainWorkBytes) (§ new #_"byte[]" (§ count StoredBlock/CHAIN_WORK_BYTES)))
        (.. buffer (get chainWorkBytes))
        (§ var #_"BigInteger" (§ name chainWork) (§ new #_"BigInteger" 1, chainWorkBytes))
        (§ var #_"int" (§ name height) (.. buffer (getInt))) ;; +4 bytes
        (§ var #_"byte[]" (§ name header) (§ new #_"byte[]" (§ count Block/HEADER_SIZE + 1))) ;; Extra byte for the 00 transactions length.
        (.. buffer (get header, 0, Block/HEADER_SIZE))
        (§ new #_"StoredBlock" (.. params (getDefaultSerializer) (makeBlock header)), chainWork, height)
    )

    #_override
    #_public
    (§ method #_"String" (§ fn toString) [])
    (§ block
        (String/format Locale/US, "Block %s at height %d: %s", (.. (getHeader) (getHashAsString)), (getHeight), (.. (getHeader) (toString)))
    )
)

#_(ns org.bitcoinj.core #_"StoredUndoableBlock"
    (:import [java.util List]))

;;;
 ; Contains minimal data neccessary to disconnect/connect the transactions
 ; in the stored block at will.  Can either store the full set of
 ; transactions (if the inputs for the block have not been tested to work)
 ; or the set of transaction outputs created/destroyed when the block is
 ; connected.
 ;;
#_public
(§ class #_"StoredUndoableBlock"
    (§ field #_"Sha256Hash" (§ name blockHash))

    ;; Only one of either txOutChanges or transactions will be set.
    #_private
    (§ field- #_"TransactionOutputChanges" (§ name txOutChanges))
    #_private
    (§ field- #_"List<Transaction>" (§ name transactions))

    #_public
    (§ constructor #_"StoredUndoableBlock" [#_"Sha256Hash" (§ name hash), #_"TransactionOutputChanges" (§ name txOutChanges)])
    (§ block
        (§ ass (§ name (.. this blockHash)) hash)
        (§ ass (§ name (.. this transactions)) nil)
        (§ ass (§ name (.. this txOutChanges)) txOutChanges)
        this
    )

    #_public
    (§ constructor #_"StoredUndoableBlock" [#_"Sha256Hash" (§ name hash), #_"List<Transaction>" (§ name transactions)])
    (§ block
        (§ ass (§ name (.. this blockHash)) hash)
        (§ ass (§ name (.. this txOutChanges)) nil)
        (§ ass (§ name (.. this transactions)) transactions)
        this
    )

    ;;;
     ; Get the transaction output changes if they have been calculated, otherwise null.
     ; Only one of this and getTransactions() will return a non-null value.
     ;;
    #_public
    (§ method #_"TransactionOutputChanges" (§ fn getTxOutChanges) [])
    (§ block
        txOutChanges
    )

    ;;;
     ; Get the full list of transactions if it is stored, otherwise null.
     ; Only one of this and getTxOutChanges() will return a non-null value.
     ;;
    #_public
    (§ method #_"List<Transaction>" (§ fn getTransactions) [])
    (§ block
        transactions
    )

    ;;;
     ; Get the hash of the represented block.
     ;;
    #_public
    (§ method #_"Sha256Hash" (§ fn getHash) [])
    (§ block
        blockHash
    )

    #_override
    #_public
    (§ method #_"int" (§ fn hashCode) [])
    (§ block
        (.. blockHash (hashCode))
    )

    #_override
    #_public
    (§ method #_"boolean" (§ fn equals) [#_"Object" (§ name o)])
    (§ block
        (§ if (§ expr this == o))
        (§ block
            (§ return true)
        )
        (§ if (§ expr o == nil || (getClass) != (.. o (getClass))))
        (§ block
            (§ return false)
        )
        (.. (getHash) (equals (.. (§ cast #_"StoredUndoableBlock" o) (getHash))))
    )

    #_override
    #_public
    (§ method #_"String" (§ fn toString) [])
    (§ block
        (§ expr "Undoable Block " + blockHash)
    )
)

#_(ns org.bitcoinj.core #_"Transaction"
    (:import [java.io *]
             [java.math BigInteger]
             [java.util *])
    (:import [com.google.common.base Preconditions Strings]
             [com.google.common.collect ImmutableMap]
             [com.google.common.primitives Ints Longs]
             [org.slf4j Logger LoggerFactory]
             [org.spongycastle.crypto.params KeyParameter])
   (:require [org.bitcoinj.core.TransactionConfidence ConfidenceType]
             #_static [org.bitcoinj.core.Utils *]
             [org.bitcoinj.crypto TransactionSignature]
             [org.bitcoinj.script Script ScriptBuilder ScriptError ScriptOpCodes]
             [org.bitcoinj.signers TransactionSigner]
             [org.bitcoinj.utils ExchangeRate]
             [org.bitcoinj.wallet Wallet]
             [org.bitcoinj.wallet.WalletTransaction Pool]))

;;;
 ; <p>A transaction represents the movement of coins from some addresses to some other addresses.  It can also represent
 ; the minting of new coins.  A Transaction object corresponds to the equivalent in the Bitcoin C++ implementation.</p>
 ;
 ; <p>Transactions are the fundamental atoms of Bitcoin and have many powerful features.  Read
 ; <a href="https://bitcoinj.github.io/working-with-transactions">"Working with transactions"</a> in the
 ; documentation to learn more about how to use this class.</p>
 ;
 ; <p>All Bitcoin transactions are at risk of being reversed, though the risk is much less than with traditional payment
 ; systems.  Transactions have <i>confidence levels</i>, which help you decide whether to trust a transaction or not.
 ; Whether to trust a transaction is something that needs to be decided on a case by case basis - a rule that makes
 ; sense for selling MP3s might not make sense for selling cars, or accepting payments from a family member.  If you
 ; are building a wallet, how to present confidence to your users is something to consider carefully.</p>
 ;
 ; <p>Instances of this class are not safe for use by multiple threads.</p>
 ;;
#_public
(§ class #_"Transaction" (§ extends #_"ChildMessage")
    ;;;
     ; A comparator that can be used to sort transactions by their updateTime field.
     ; The ordering goes from most recent into the past.
     ;;
    #_public
    #_static
    (§ def #_"Comparator<Transaction>" (§ name SORT_TX_BY_UPDATE_TIME) (§ new #_"Comparator<Transaction>"
        (§ anon
            #_override
            #_public
            (§ method #_"int" (§ fn compare) [#_"Transaction" (§ name tx1), #_"Transaction" (§ name tx2)])
            (§ block
                (§ var #_"long" (§ name time1) (.. tx1 (getUpdateTime) (getTime)))
                (§ var #_"long" (§ name time2) (.. tx2 (getUpdateTime) (getTime)))
                (§ var #_"int" (§ name updateTimeComparison) (§ neg (Longs/compare time1, time2)))
                ;; If time1 == time2, compare by tx hash to make comparator consistent with equals.
                (if (!= updateTimeComparison 0) updateTimeComparison (.. tx1 (getHash) (compareTo (.. tx2 (getHash)))))
            )
        )))

    ;;; A comparator that can be used to sort transactions by their chain height. ;;
    #_public
    #_static
    (§ def #_"Comparator<Transaction>" (§ name SORT_TX_BY_HEIGHT) (§ new #_"Comparator<Transaction>"
        (§ anon
            #_override
            #_public
            (§ method #_"int" (§ fn compare) [#_"Transaction" (§ name tx1), #_"Transaction" (§ name tx2)])
            (§ block
                (§ var #_"TransactionConfidence" (§ name confidence1) (.. tx1 (getConfidence)))
                (§ var #_"int" (§ name height1) (if (== (.. confidence1 (getConfidenceType)) ConfidenceType/BUILDING) (.. confidence1 (getAppearedAtChainHeight)) Block/BLOCK_HEIGHT_UNKNOWN))
                (§ var #_"TransactionConfidence" (§ name confidence2) (.. tx2 (getConfidence)))
                (§ var #_"int" (§ name height2) (if (== (.. confidence2 (getConfidenceType)) ConfidenceType/BUILDING) (.. confidence2 (getAppearedAtChainHeight)) Block/BLOCK_HEIGHT_UNKNOWN))
                (§ var #_"int" (§ name heightComparison) (§ neg (Ints/compare height1, height2)))
                ;; If height1 == height2, compare by tx hash to make comparator consistent with equals.
                (if (!= heightComparison 0) heightComparison (.. tx1 (getHash) (compareTo (.. tx2 (getHash)))))
            )
        )))

    #_private
    #_static
    (§ def- #_"Logger" (§ name log) (LoggerFactory/getLogger (§ klass #_"Transaction")))

    ;;; Threshold for lockTime: below this value it is interpreted as block number, otherwise as timestamp. ;;
    #_public
    #_static
    (§ def #_"int" (§ name LOCKTIME_THRESHOLD) 500000000) ;; Tue Nov  5 00:53:20 1985 UTC
    ;;; Same, but as a BigInteger for CHECKLOCKTIMEVERIFY. ;;
    #_public
    #_static
    (§ def #_"BigInteger" (§ name LOCKTIME_THRESHOLD_BIG) (BigInteger/valueOf LOCKTIME_THRESHOLD))

    ;;; How many bytes a transaction can be before it won't be relayed anymore.  Currently 100kb. ;;
    #_public
    #_static
    (§ def #_"int" (§ name MAX_STANDARD_TX_SIZE) 100000)

    ;;;
     ; If feePerKb is lower than this, Bitcoin Core will treat it as if there were no fee.
     ;;
    #_public
    #_static
    (§ def #_"Coin" (§ name REFERENCE_DEFAULT_MIN_TX_FEE) (Coin/valueOf 5000)) ;; 0.05 mBTC

    ;;;
     ; If using this feePerKb, transactions will get confirmed within the next couple of blocks.
     ; This should be adjusted from time to time.  Last adjustment: February 2017.
     ;;
    #_public
    #_static
    (§ def #_"Coin" (§ name DEFAULT_TX_FEE) (Coin/valueOf 100000)) ;; 1 mBTC

    ;;;
     ; Any standard (i.e. pay-to-address) output smaller than this value (in satoshis) will most likely be rejected by the network.
     ; This is calculated by assuming a standard output will be 34 bytes, and then using the formula used in
     ; {@link TransactionOutput#getMinNonDustValue(Coin)}.
     ;;
    #_public
    #_static
    (§ def #_"Coin" (§ name MIN_NONDUST_OUTPUT) (Coin/valueOf 2730)) ;; satoshis

    ;; These are bitcoin serialized.
    #_private
    (§ field- #_"long" (§ name version))
    #_private
    (§ field- #_"ArrayList<TransactionInput>" (§ name inputs))
    #_private
    (§ field- #_"ArrayList<TransactionOutput>" (§ name outputs))

    #_private
    (§ field- #_"long" (§ name lockTime))

    ;; This is either the time the transaction was broadcast as measured from the local clock, or the time from the
    ;; block in which it was included.  Note that this can be changed by re-orgs so the wallet may update this field.
    ;; Old serialized transactions don't have this field, thus null is valid.  It is used for returning an ordered
    ;; list of transactions from a wallet, which is helpful for presenting to users.
    #_private
    (§ field- #_"Date" (§ name updatedAt))

    ;; This is an in memory helper only.
    #_private
    (§ field- #_"Sha256Hash" (§ name hash))

    ;; Data about how confirmed this tx is.  Serialized, may be null.
    #_nilable
    #_private
    (§ field- #_"TransactionConfidence" (§ name confidence))

    ;; Records a map of which blocks the transaction has appeared in (keys) to an index within that block (values).
    ;; The "index" is not a real index, instead the values are only meaningful relative to each other.  For example,
    ;; consider two transactions that appear in the same block, t1 and t2, where t2 spends an output of t1.  Both
    ;; will have the same block hash as a key in their appearsInHashes, but the counter would be 1 and 2 respectively
    ;; regardless of where they actually appeared in the block.
    ;;
    ;; If this transaction is not stored in the wallet, appearsInHashes is null.
    #_private
    (§ field- #_"Map<Sha256Hash, Integer>" (§ name appearsInHashes))

    ;; Transactions can be encoded in a way that will use more bytes than is optimal
    ;; (due to VarInts having multiple encodings).
    ;; MAX_BLOCK_SIZE must be compared to the optimal encoding, not the actual encoding, so when parsing, we keep track
    ;; of the size of the ideal encoding in addition to the actual message size (which Message needs) so that Blocks
    ;; can properly keep track of optimal encoded size.
    #_private
    (§ field- #_"int" (§ name optimalEncodingMessageSize))

    ;;;
     ; This enum describes the underlying reason the transaction was created.  It's useful for rendering wallet GUIs
     ; more appropriately.
     ;;
    #_public
    (§ enum #_"Purpose"
        ;;; Used when the purpose of a transaction is genuinely unknown. ;;
        (§ item UNKNOWN)
        ;;; Transaction created to satisfy a user payment request. ;;
        (§ item USER_PAYMENT)
        ;;; Transaction automatically created and broadcast in order to reallocate money from old to new keys. ;;
        (§ item KEY_ROTATION)
        ;;; Transaction that uses up pledges to an assurance contract. ;;
        (§ item ASSURANCE_CONTRACT_CLAIM)
        ;;; Transaction that makes a pledge to an assurance contract. ;;
        (§ item ASSURANCE_CONTRACT_PLEDGE)
        ;;; Send-to-self transaction that exists just to create an output of the right size we can pledge. ;;
        (§ item ASSURANCE_CONTRACT_STUB)
        ;;; Raise fee, e.g. child-pays-for-parent. ;;
        (§ item RAISE_FEE)
        ;; In future: de/refragmentation, privacy boosting/mixing, etc.
        ;; When adding a value, it also needs to be added to wallet.proto, WalletProtobufSerialize.makeTxProto()
        ;; and WalletProtobufSerializer.readTransaction()!
    )

    #_private
    (§ field- #_"Purpose" (§ name purpose) Purpose/UNKNOWN)

    ;;;
     ; This field can be used by applications to record the exchange rate that was valid when the transaction happened.
     ; It's optional.
     ;;
    #_nilable
    #_private
    (§ field- #_"ExchangeRate" (§ name exchangeRate))

    ;;;
     ; This field can be used to record the memo of the payment request that initiated the transaction.
     ; It's optional.
     ;;
    #_nilable
    #_private
    (§ field- #_"String" (§ name memo))

    ;; Below flags apply in the context of BIP 68.
     ; If this flag set, CTxIn::nSequence is NOT interpreted as a relative lock-time.
     ;;
    #_public
    #_static
    (§ def #_"long" (§ name SEQUENCE_LOCKTIME_DISABLE_FLAG) (<< 1 31))

    ;; If CTxIn::nSequence encodes a relative lock-time and this flag
     ; is set, the relative lock-time has units of 512 seconds,
     ; otherwise it specifies blocks with a granularity of 1.
     ;;
    #_public
    #_static
    (§ def #_"long" (§ name SEQUENCE_LOCKTIME_TYPE_FLAG) (<< 1 22))

    ;; If CTxIn::nSequence encodes a relative lock-time, this mask is
     ; applied to extract that lock-time from the sequence field.
     ;;
    #_public
    #_static
    (§ def #_"long" (§ name SEQUENCE_LOCKTIME_MASK) 0x0000ffff)

    #_public
    (§ constructor #_"Transaction" [#_"NetworkParameters" (§ name params)])
    (§ block
        (§ super params)

        (§ ass (§ name version) 1)
        (§ ass (§ name inputs) (§ new #_"ArrayList<>"))
        (§ ass (§ name outputs) (§ new #_"ArrayList<>"))
        ;; We don't initialize appearsIn deliberately as it's only useful for transactions stored in the wallet.
        (§ ass (§ name length) 8) ;; 8 for std fields
        this
    )

    ;;;
     ; Creates a transaction from the given serialized bytes, e.g. from a block or a tx network message.
     ;;
    #_public
    (§ constructor #_"Transaction" [#_"NetworkParameters" (§ name params), #_"byte[]" (§ name payloadBytes)])
        (§ throws #_"ProtocolException")
    (§ block
        (§ super params, payloadBytes, 0)
        this
    )

    ;;;
     ; Creates a transaction by reading payload starting from offset bytes in.  Length of a transaction is fixed.
     ;;
    #_public
    (§ constructor #_"Transaction" [#_"NetworkParameters" (§ name params), #_"byte[]" (§ name payload), #_"int" (§ name offset)])
        (§ throws #_"ProtocolException")
    (§ block
        (§ super params, payload, offset)
        ;; inputs/outputs will be created in parse()
        this
    )

    ;;;
     ; Creates a transaction by reading payload starting from offset bytes in.  Length of a transaction is fixed.
     ; @param params NetworkParameters object.
     ; @param payload Bitcoin protocol formatted byte array containing message content.
     ; @param offset The location of the first payload byte within the array.
     ; @param parseRetain Whether to retain the backing byte array for quick reserialization.
     ; If true and the backing byte array is invalidated due to modification of a field, then
     ; the cached bytes may be repopulated and retained if the message is serialized again in the future.
     ; @param length The length of message if known.  Usually this is provided when deserializing of the wire
     ; as the length will be provided as part of the header.  Set to Message.UNKNOWN_LENGTH, if not known.
     ; @throws ProtocolException
     ;;
    #_public
    (§ constructor #_"Transaction" [#_"NetworkParameters" (§ name params), #_"byte[]" (§ name payload), #_"int" (§ name offset), #_nilable #_"Message" (§ name parent), #_"MessageSerializer" (§ name setSerializer), #_"int" (§ name length)])
        (§ throws #_"ProtocolException")
    (§ block
        (§ super params, payload, offset, parent, setSerializer, length)
        this
    )

    ;;;
     ; Creates a transaction by reading payload.  Length of a transaction is fixed.
     ;;
    #_public
    (§ constructor #_"Transaction" [#_"NetworkParameters" (§ name params), #_"byte[]" (§ name payload), #_nilable #_"Message" (§ name parent), #_"MessageSerializer" (§ name setSerializer), #_"int" (§ name length)])
        (§ throws #_"ProtocolException")
    (§ block
        (§ super params, payload, 0, parent, setSerializer, length)
        this
    )

    ;;;
     ; Returns the transaction hash as you see them in the block explorer.
     ;;
    #_override
    #_public
    (§ method #_"Sha256Hash" (§ fn getHash) [])
    (§ block
        (§ if (nil? hash))
        (§ block
            (§ ass (§ name hash) (Sha256Hash/wrapReversed (Sha256Hash/hashTwice (unsafeBitcoinSerialize))))
        )
        hash
    )

    ;;;
     ; Used by BitcoinSerializer.  The serializer has to calculate a hash for checksumming so to
     ; avoid wasting the considerable effort a set method is provided so the serializer can set it.
     ;
     ; No verification is performed on this hash.
     ;;
    (§ method #_"void" (§ fn setHash) [#_"Sha256Hash" (§ name hash)])
    (§ block
        (§ ass (§ name (.. this hash)) hash)
        nil
    )

    #_public
    (§ method #_"String" (§ fn getHashAsString) [])
    (§ block
        (.. (getHash) (toString))
    )

    ;;;
     ; Gets the sum of the inputs, regardless of who owns them.
     ;;
    #_public
    (§ method #_"Coin" (§ fn getInputSum) [])
    (§ block
        (§ var #_"Coin" (§ name inputTotal) Coin/ZERO)

        (§ for (§ var #_"TransactionInput" (§ name input)) :for inputs)
        (§ block
            (§ var #_"Coin" (§ name inputValue) (.. input (getValue)))
            (§ if (some? inputValue))
            (§ block
                (§ ass (§ name inputTotal) (.. inputTotal (add inputValue)))
            )
        )

        inputTotal
    )

    ;;;
     ; Calculates the sum of the outputs that are sending coins to a key in the wallet.
     ;;
    #_public
    (§ method #_"Coin" (§ fn getValueSentToMe) [#_"TransactionBag" (§ name transactionBag)])
    (§ block
        ;; This is tested in WalletTest.
        (§ var #_"Coin" (§ name v) Coin/ZERO)
        (§ for (§ var #_"TransactionOutput" (§ name o)) :for outputs)
        (§ block
            (§ if (.. o (isMine transactionBag)))
            (§ block
                (§ ass (§ name v) (.. v (add (.. o (getValue)))))
            )
        )
        v
    )

    ;;;
     ; Returns a map of block [hashes] which contain the transaction mapped to relativity counters, or null if this
     ; transaction doesn't have that data because it's not stored in the wallet or because it has never appeared in a
     ; block.
     ;;
    #_nilable
    #_public
    (§ method #_"Map<Sha256Hash, Integer>" (§ fn getAppearsInHashes) [])
    (§ block
        (when (some? appearsInHashes) (ImmutableMap/copyOf appearsInHashes))
    )

    ;;;
     ; Convenience wrapper around getConfidence().getConfidenceType().
     ; @return true if this transaction hasn't been seen in any block yet.
     ;;
    #_public
    (§ method #_"boolean" (§ fn isPending) [])
    (§ block
        (== (.. (getConfidence) (getConfidenceType)) TransactionConfidence/ConfidenceType/PENDING)
    )

    ;;;
     ; <p>Puts the given block in the internal set of blocks in which this transaction appears.  This is
     ; used by the wallet to ensure transactions that appear on side chains are recorded properly even though
     ; the block stores do not save the transaction data at all.</p>
     ;
     ; <p>If there is a re-org this will be called once for each block that was previously seen, to update which block
     ; is the best chain.  The best chain block is guaranteed to be called last. So this must be idempotent.</p>
     ;
     ; <p>Sets updatedAt to be the earliest valid block time where this tx was seen.</p>
     ;
     ; @param block     The {@link StoredBlock} in which the transaction has appeared.
     ; @param bestChain Whether to set the updatedAt timestamp from the block header (only if not already set).
     ; @param relativityOffset A number that disambiguates the order of transactions within a block.
     ;;
    #_public
    (§ method #_"void" (§ fn setBlockAppearance) [#_"StoredBlock" (§ name block), #_"boolean" (§ name bestChain), #_"int" (§ name relativityOffset)])
    (§ block
        (§ var #_"long" (§ name blockTime) (* (.. block (getHeader) (getTimeSeconds)) 1000))
        (§ if (§ expr bestChain && (§ expr updatedAt == nil || (.. updatedAt (getTime)) == 0 || blockTime < (.. updatedAt (getTime)))))
        (§ block
            (§ ass (§ name updatedAt) (§ new #_"Date" blockTime))
        )

        (addBlockAppearance (.. block (getHeader) (getHash)), relativityOffset)

        (§ if bestChain)
        (§ block
            (§ var #_"TransactionConfidence" (§ name transactionConfidence) (getConfidence))
            ;; This sets type to BUILDING and depth to one.
            (.. transactionConfidence (setAppearedAtChainHeight (.. block (getHeight))))
        )
        nil
    )

    #_public
    (§ method #_"void" (§ fn addBlockAppearance) [#_"Sha256Hash" (§ name blockHash), #_"int" (§ name relativityOffset)])
    (§ block
        ;; TODO: This could be a lot more memory efficient as we'll typically only store one element.
        (§ if (nil? appearsInHashes))
        (§ block
            (§ ass (§ name appearsInHashes) (§ new #_"TreeMap<>"))
        )

        (.. appearsInHashes (put blockHash, relativityOffset))
        nil
    )

    ;;;
     ; Calculates the sum of the inputs that are spending coins with keys in the wallet.  This requires the
     ; transactions sending coins to those keys to be in the wallet.  This method will not attempt to download
     ; the blocks containing the input transactions if the key is in the wallet but the transactions are not.
     ;
     ; @return sum of the inputs that are spending coins with keys in the wallet.
     ;;
    #_public
    (§ method #_"Coin" (§ fn getValueSentFromMe) [#_"TransactionBag" (§ name wallet)])
        (§ throws #_"ScriptException")
    (§ block
        ;; This is tested in WalletTest.
        (§ var #_"Coin" (§ name v) Coin/ZERO)
        (§ for (§ var #_"TransactionInput" (§ name input)) :for inputs)
        (§ block
            ;; This input is taking value from a transaction in our wallet.  To discover the value,
            ;; we must find the connected transaction.
            (§ var #_"TransactionOutput" (§ name connected) (.. input (getConnectedOutput (.. wallet (getTransactionPool Pool/UNSPENT)))))
            (§ if (nil? connected))
            (§ block
                (§ ass (§ name connected) (.. input (getConnectedOutput (.. wallet (getTransactionPool Pool/SPENT)))))
            )
            (§ if (nil? connected))
            (§ block
                (§ ass (§ name connected) (.. input (getConnectedOutput (.. wallet (getTransactionPool Pool/PENDING)))))
            )

            ;; The connected output may be the change to the sender of a previous input sent to this wallet.
            ;; In this case we ignore it.
            (§ if (§ expr connected != nil && (.. connected (isMine wallet))))
            (§ block
                (§ ass (§ name v) (.. v (add (.. connected (getValue)))))
            )
        )
        v
    )

    ;;;
     ; Gets the sum of the outputs of the transaction.  If the outputs are less than the inputs, it does not count the fee.
     ; @return the sum of the outputs regardless of who owns them.
     ;;
    #_public
    (§ method #_"Coin" (§ fn getOutputSum) [])
    (§ block
        (§ var #_"Coin" (§ name totalOut) Coin/ZERO)

        (§ for (§ var #_"TransactionOutput" (§ name output)) :for outputs)
        (§ block
            (§ ass (§ name totalOut) (.. totalOut (add (.. output (getValue)))))
        )

        totalOut
    )

    #_nilable
    #_private
    (§ field- #_"Coin" (§ name cachedValue))
    #_nilable
    #_private
    (§ field- #_"TransactionBag" (§ name cachedForBag))

    ;;;
     ; Returns the difference of {@link Transaction#getValueSentToMe(TransactionBag)} and {@link Transaction#getValueSentFromMe(TransactionBag)}.
     ;;
    #_public
    (§ method #_"Coin" (§ fn getValue) [#_"TransactionBag" (§ name wallet)])
        (§ throws #_"ScriptException")
    (§ block
        ;; FIXME: TEMP PERF HACK FOR ANDROID - this crap can go away once we have a real payments API.
        (§ var #_"boolean" (§ name isAndroid) (Utils/isAndroidRuntime))
        (§ if (§ expr isAndroid && cachedValue != nil && cachedForBag == wallet))
        (§ block
            (§ return cachedValue)
        )

        (§ var #_"Coin" (§ name result) (.. (getValueSentToMe wallet) (subtract (getValueSentFromMe wallet))))
        (§ if isAndroid)
        (§ block
            (§ ass (§ name cachedValue) result)
            (§ ass (§ name cachedForBag) wallet)
        )
        result
    )

    ;;;
     ; The transaction fee is the difference of the value of all inputs and the value of all outputs.
     ; Currently, the fee can only be determined for transactions created by us.
     ;
     ; @return fee, or null if it cannot be determined.
     ;;
    #_public
    (§ method #_"Coin" (§ fn getFee) [])
    (§ block
        (§ var #_"Coin" (§ name fee) Coin/ZERO)
        (§ if (§ expr (.. inputs (isEmpty)) || (.. outputs (isEmpty)))) ;; Incomplete transaction.
        (§ block
            (§ return nil)
        )

        (§ for (§ var #_"TransactionInput" (§ name input)) :for inputs)
        (§ block
            (§ if (== (.. input (getValue)) nil))
            (§ block
                (§ return nil)
            )
            (§ ass (§ name fee) (.. fee (add (.. input (getValue)))))
        )
        (§ for (§ var #_"TransactionOutput" (§ name output)) :for outputs)
        (§ block
            (§ ass (§ name fee) (.. fee (subtract (.. output (getValue)))))
        )
        fee
    )

    ;;;
     ; Returns true if any of the outputs is marked as spent.
     ;;
    #_public
    (§ method #_"boolean" (§ fn isAnyOutputSpent) [])
    (§ block
        (§ for (§ var #_"TransactionOutput" (§ name output)) :for outputs)
        (§ block
            (§ if (§ not (.. output (isAvailableForSpending))))
            (§ block
                (§ return true)
            )
        )

        false
    )

    ;;;
     ; Returns false if this transaction has at least one output that is owned by the given wallet and unspent,
     ; true otherwise.
     ;;
    #_public
    (§ method #_"boolean" (§ fn isEveryOwnedOutputSpent) [#_"TransactionBag" (§ name transactionBag)])
    (§ block
        (§ for (§ var #_"TransactionOutput" (§ name output)) :for outputs)
        (§ block
            (§ if (§ expr (.. output (isAvailableForSpending)) && (.. output (isMine transactionBag))))
            (§ block
                (§ return false)
            )
        )

        true
    )

    ;;;
     ; Returns the earliest time at which the transaction was seen (broadcast or included into the chain),
     ; or the epoch if that information isn't available.
     ;;
    #_public
    (§ method #_"Date" (§ fn getUpdateTime) [])
    (§ block
        ;; Older wallets did not store this field.  Set to the epoch.
        (§ if (nil? updatedAt))
        (§ block
            (§ ass (§ name updatedAt) (§ new #_"Date" 0))
        )
        updatedAt
    )

    #_public
    (§ method #_"void" (§ fn setUpdateTime) [#_"Date" (§ name updatedAt)])
    (§ block
        (§ ass (§ name (.. this updatedAt)) updatedAt)
        nil
    )

    ;;;
     ; These constants are a part of a scriptSig signature on the inputs.  They define the details of how a
     ; transaction can be redeemed, specifically, they control how the hash of the transaction is calculated.
     ;;
    #_public
    (§ enum #_"SigHash"
        (§ item (ALL 1))
        (§ item (NONE 2))
        (§ item (SINGLE 3))
        (§ item (ANYONECANPAY 0x80)) ;; Caution: Using this type in isolation is non-standard.  Treated similar to ANYONECANPAY_ALL.
        (§ item (ANYONECANPAY_ALL 0x81))
        (§ item (ANYONECANPAY_NONE 0x82))
        (§ item (ANYONECANPAY_SINGLE 0x83))
        (§ item (UNSET 0)) ;; Caution: Using this type in isolation is non-standard.  Treated similar to ALL.

        #_public
        (§ field #_"int" (§ name value))

        ;;;
         ; @param value
         ;;
        #_private
        (§ constructor- #_"SigHash" [#_"int" (§ name value)])
        (§ block
            (§ ass (§ name (.. this value)) value)
            this
        )

        ;;;
         ; @return the value as a byte.
         ;;
        #_public
        (§ method #_"byte" (§ fn byteValue) [])
        (§ block
            (§ cast #_"byte" (.. this value))
        )
    )

    #_override
    #_protected
    (§ method #_"void" (§ fn unCache) [])
    (§ block
        (.. super (unCache))
        (§ ass (§ name hash) nil)
        nil
    )

    #_protected
    #_static
    (§ defn #_"int" (§ fn calcLength) [#_"byte[]" (§ name buf), #_"int" (§ name offset)])
    (§ block
        ;; jump past version (uint32)
        (§ var #_"int" (§ name cursor) (+ offset 4))

        (§ var #_"VarInt" (§ name varint) (§ new #_"VarInt" buf, cursor))
        (§ var #_"long" (§ name txInCount) (.. varint value))
        (§ ass (§ name cursor) (§ expr cursor + (.. varint (getOriginalSizeInBytes))))

        (§ for (§ var #_"int" (§ name i) 0) :for (< i txInCount) :for (§ ass (§ name i) (+ i 1)))
        (§ block
            ;; 36 = length of previous_outpoint
            (§ ass (§ name cursor) (+ cursor 36))
            (§ ass (§ name varint) (§ new #_"VarInt" buf, cursor))
            (§ var #_"long" (§ name scriptLen) (.. varint value))
            ;; 4 = length of sequence field (unint32)
            (§ ass (§ name cursor) (§ expr cursor + scriptLen + 4 + (.. varint (getOriginalSizeInBytes))))
        )

        (§ ass (§ name varint) (§ new #_"VarInt" buf, cursor))
        (§ var #_"long" (§ name txOutCount) (.. varint value))
        (§ ass (§ name cursor) (§ expr cursor + (.. varint (getOriginalSizeInBytes))))

        (§ for (§ var #_"int" (§ name i) 0) :for (< i txOutCount) :for (§ ass (§ name i) (+ i 1)))
        (§ block
            ;; 8 = length of tx value field (uint64)
            (§ ass (§ name cursor) (+ cursor 8))
            (§ ass (§ name varint) (§ new #_"VarInt" buf, cursor))
            (§ var #_"long" (§ name scriptLen) (.. varint value))
            (§ ass (§ name cursor) (§ expr cursor + scriptLen + (.. varint (getOriginalSizeInBytes))))
        )
        ;; 4 = length of lock_time field (uint32)
        (§ expr cursor - offset + 4)
    )

    #_override
    #_protected
    (§ method #_"void" (§ fn parse) [])
        (§ throws #_"ProtocolException")
    (§ block
        (§ ass (§ name cursor) offset)

        (§ ass (§ name version) (readUint32))
        (§ ass (§ name optimalEncodingMessageSize) 4)

        ;; First come the inputs.
        (§ var #_"long" (§ name numInputs) (readVarInt))
        (§ ass (§ name optimalEncodingMessageSize) (§ expr optimalEncodingMessageSize + (VarInt/sizeOf numInputs)))
        (§ ass (§ name inputs) (§ new #_"ArrayList<>" (§ cast #_"int" numInputs)))
        (§ for (§ var #_"long" (§ name i) 0) :for (< i numInputs) :for (§ ass (§ name i) (+ i 1)))
        (§ block
            (§ var #_"TransactionInput" (§ name input) (§ new #_"TransactionInput" params, this, payload, cursor, serializer))
            (.. inputs (add input))
            (§ var #_"long" (§ name scriptLen) (readVarInt TransactionOutPoint/MESSAGE_LENGTH))
            (§ ass (§ name optimalEncodingMessageSize) (§ expr optimalEncodingMessageSize + TransactionOutPoint/MESSAGE_LENGTH + (VarInt/sizeOf scriptLen) + scriptLen + 4))
            (§ ass (§ name cursor) (§ expr cursor + scriptLen + 4))
        )
        ;; Now the outputs.
        (§ var #_"long" (§ name numOutputs) (readVarInt))
        (§ ass (§ name optimalEncodingMessageSize) (§ expr optimalEncodingMessageSize + (VarInt/sizeOf numOutputs)))
        (§ ass (§ name outputs) (§ new #_"ArrayList<>" (§ cast #_"int" numOutputs)))
        (§ for (§ var #_"long" (§ name i) 0) :for (< i numOutputs) :for (§ ass (§ name i) (+ i 1)))
        (§ block
            (§ var #_"TransactionOutput" (§ name output) (§ new #_"TransactionOutput" params, this, payload, cursor, serializer))
            (.. outputs (add output))
            (§ var #_"long" (§ name scriptLen) (readVarInt 8))
            (§ ass (§ name optimalEncodingMessageSize) (§ expr optimalEncodingMessageSize + 8 + (VarInt/sizeOf scriptLen) + scriptLen))
            (§ ass (§ name cursor) (+ cursor scriptLen))
        )
        (§ ass (§ name lockTime) (readUint32))
        (§ ass (§ name optimalEncodingMessageSize) (+ optimalEncodingMessageSize 4))
        (§ ass (§ name length) (- cursor offset))
        nil
    )

    #_public
    (§ method #_"int" (§ fn getOptimalEncodingMessageSize) [])
    (§ block
        (§ if (§ expr optimalEncodingMessageSize != 0))
        (§ block
            (§ return optimalEncodingMessageSize)
        )

        (§ ass (§ name optimalEncodingMessageSize) (getMessageSize))
        optimalEncodingMessageSize
    )

    ;;;
     ; The priority (coin age) calculation doesn't use the regular message size, but rather one adjusted downwards
     ; for the number of inputs.  The goal is to incentivise cleaning up the UTXO set with free transactions, if one
     ; can do so.
     ;;
    #_public
    (§ method #_"int" (§ fn getMessageSizeForPriorityCalc) [])
    (§ block
        (§ var #_"int" (§ name size) (getMessageSize))
        (§ for (§ var #_"TransactionInput" (§ name input)) :for inputs)
        (§ block
            ;; 41: min size of an input
            ;; 110: enough to cover a compressed pubkey p2sh redemption (somewhat arbitrary)
            (§ var #_"int" (§ name benefit) (§ expr 41 + (Math/min 110, (.. input (getScriptSig) (getProgram) length))))
            (§ if (< benefit size))
            (§ block
                (§ ass (§ name size) (- size benefit))
            )
        )
        size
    )

    ;;;
     ; A coinbase transaction is one that creates a new coin.  They are the first transaction in each block and their
     ; value is determined by a formula that all implementations of Bitcoin share.  In 2011 the value of a coinbase
     ; transaction is 50 coins, but in future it will be less.  A coinbase transaction is defined not only by its
     ; position in a block but by the data in the inputs.
     ;;
    #_public
    (§ method #_"boolean" (§ fn isCoinBase) [])
    (§ block
        (§ expr (.. inputs (size)) == 1 && (.. inputs (get 0) (isCoinBase)))
    )

    ;;;
     ; A transaction is mature if it is either a building coinbase tx that is as deep or deeper than the required coinbase depth, or a non-coinbase tx.
     ;;
    #_public
    (§ method #_"boolean" (§ fn isMature) [])
    (§ block
        (§ if (§ not (isCoinBase)))
        (§ block
            (§ return true)
        )

        (§ if (!= (.. (getConfidence) (getConfidenceType)) ConfidenceType/BUILDING))
        (§ block
            (§ return false)
        )

        (<= (.. params (getSpendableCoinbaseDepth)) (.. (getConfidence) (getDepthInBlocks)))
    )

    #_override
    #_public
    (§ method #_"String" (§ fn toString) [])
    (§ block
        (toString nil)
    )

    ;;;
     ; A human readable version of the transaction useful for debugging.  The format is not guaranteed to be stable.
     ; @param chain If provided, will be used to estimate lock times (if set).  Can be null.
     ;;
    #_public
    (§ method #_"String" (§ fn toString) [#_nilable #_"AbstractBlockChain" (§ name chain)])
    (§ block
        (§ var #_"StringBuilder" (§ name sb) (§ new #_"StringBuilder"))
        (.. sb (append "  ") (append (getHashAsString)) (append "\n"))
        (§ if (some? updatedAt))
        (§ block
            (.. sb (append "  updated: ") (append (Utils/dateTimeFormat updatedAt)) (append "\n"))
        )
        (§ if (§ expr version != 1))
        (§ block
            (.. sb (append "  version ") (append version) (append "\n"))
        )
        (§ if (isTimeLocked))
        (§ block
            (.. sb (append "  time locked until "))
            (§ if (< lockTime LOCKTIME_THRESHOLD))
            (§ block
                (.. sb (append "block ") (append lockTime))
                (§ if (some? chain))
                (§ block
                    (.. sb (append " (estimated to be reached at ") (append (Utils/dateTimeFormat (.. chain (estimateBlockTime (§ cast #_"int" lockTime))))) (append ")"))
                )
            )
            (§ else )
            (§ block
                (.. sb (append (Utils/dateTimeFormat (* lockTime 1000))))
            )
            (.. sb (append "\n"))
        )
        (§ if (isOptInFullRBF))
        (§ block
            (.. sb (append "  opts into full replace-by-fee\n"))
        )
        (§ if (isCoinBase))
        (§ block
            (§ var #_"String" (§ name script))
            (§ var #_"String" (§ name script2))
            (§ try )
            (§ block
                (§ ass (§ name script) (.. inputs (get 0) (getScriptSig) (toString)))
                (§ ass (§ name script2) (.. outputs (get 0) (getScriptPubKey) (toString)))
            )
            (§ catch #_"ScriptException" (§ name _))
            (§ block
                (§ ass (§ name script) "???")
                (§ ass (§ name script2) "???")
            )
            (.. sb (append "     == COINBASE TXN (scriptSig ") (append script) (append ")  (scriptPubKey ") (append script2) (append ")\n"))
            (§ return (.. sb (toString)))
        )

        (§ if (§ not (.. inputs (isEmpty))))
        (§ block
            (§ for (§ var #_"TransactionInput" (§ name in)) :for inputs)
            (§ block
                (.. sb (append "     in   "))

                (§ try )
                (§ block
                    (§ var #_"String" (§ name scriptSigStr) (.. in (getScriptSig) (toString)))
                    (.. sb (append (if (§ not (Strings/isNullOrEmpty scriptSigStr)) scriptSigStr "<no scriptSig>")))
                    (§ var #_"Coin" (§ name value) (.. in (getValue)))
                    (§ if (some? value))
                    (§ block
                        (.. sb (append " ") (append (.. value (toFriendlyString))))
                    )
                    (.. sb (append "\n          outpoint:"))
                    (§ var #_"TransactionOutPoint" (§ name outpoint) (.. in (getOutpoint)))
                    (.. sb (append (.. outpoint (toString))))
                    (§ var #_"TransactionOutput" (§ name connectedOutput) (.. outpoint (getConnectedOutput)))
                    (§ if (some? connectedOutput))
                    (§ block
                        (§ var #_"Script" (§ name scriptPubKey) (.. connectedOutput (getScriptPubKey)))
                        (§ if (§ expr (.. scriptPubKey (isSentToAddress)) || (.. scriptPubKey (isPayToScriptHash))))
                        (§ block
                            (.. sb (append " hash160:") (append (.. Utils/HEX (encode (.. scriptPubKey (getPubKeyHash))))))
                        )
                    )
                    (§ if (.. in (hasSequence)))
                    (§ block
                        (.. sb (append "\n          sequence:") (append (Long/toHexString (.. in (getSequenceNumber)))))
                        (§ if (.. in (isOptInFullRBF)))
                        (§ block
                            (.. sb (append ", opts into full RBF"))
                        )
                    )
                )
                (§ catch #_"Exception" (§ name e))
                (§ block
                    (.. sb (append "[exception: ") (append (.. e (getMessage))) (append "]"))
                )
                (.. sb (append "\n"))
            )
        )
        (§ else )
        (§ block
            (.. sb (append "     INCOMPLETE: No inputs!\n"))
        )

        (§ for (§ var #_"TransactionOutput" (§ name out)) :for outputs)
        (§ block
            (.. sb (append "     out  "))
            (§ try )
            (§ block
                (§ var #_"String" (§ name scriptPubKeyStr) (.. out (getScriptPubKey) (toString)))
                (.. sb (append (if (§ not (Strings/isNullOrEmpty scriptPubKeyStr)) scriptPubKeyStr "<no scriptPubKey>")) (append " ") (append (.. out (getValue) (toFriendlyString))))
                (§ if (§ not (.. out (isAvailableForSpending))))
                (§ block
                    (.. sb (append " Spent"))
                )
                (§ var #_"TransactionInput" (§ name spentBy) (.. out (getSpentBy)))
                (§ if (some? spentBy))
                (§ block
                    (.. sb (append " by ") (append (.. spentBy (getParentTransaction) (getHashAsString))))
                )
            )
            (§ catch #_"Exception" (§ name e))
            (§ block
                (.. sb (append "[exception: ") (append (.. e (getMessage))) (append "]"))
            )
            (.. sb (append "\n"))
        )

        (§ var #_"Coin" (§ name fee) (getFee))
        (§ if (some? fee))
        (§ block
            (§ var #_"int" (§ name size) (.. (unsafeBitcoinSerialize) length))
            (.. sb (append "     fee  ") (append (.. fee (multiply 1000) (divide size) (toFriendlyString))) (append "/kB, ") (append (.. fee (toFriendlyString))) (append " for ") (append size) (append " bytes\n"))
        )
        (§ if (some? purpose))
        (§ block
            (.. sb (append "     prps ") (append purpose) (append "\n"))
        )
        (.. sb (toString))
    )

    ;;;
     ; Removes all the inputs from this transaction.
     ; Note that this also invalidates the length attribute.
     ;;
    #_public
    (§ method #_"void" (§ fn clearInputs) [])
    (§ block
        (unCache)
        (§ for (§ var #_"TransactionInput" (§ name input)) :for inputs)
        (§ block
            (.. input (setParent nil))
        )
        (.. inputs (clear))
        ;; You wanted to reserialize, right?
        (§ ass (§ name (.. this length)) (.. this (unsafeBitcoinSerialize) length))
        nil
    )

    ;;;
     ; Adds an input to this transaction that imports value from the given output.  Note that this input is <i>not</i>
     ; complete and after every input is added with {@link #addInput()} and every output is added with {@link #addOutput()},
     ; a {@link TransactionSigner} must be used to finalize the transaction and finish the inputs off.
     ; Otherwise it won't be accepted by the network.
     ; @return the newly created input.
     ;;
    #_public
    (§ method #_"TransactionInput" (§ fn addInput) [#_"TransactionOutput" (§ name from)])
    (§ block
        (addInput (§ new #_"TransactionInput" params, this, from))
    )

    ;;;
     ; Adds an input directly, with no checking that it's valid.
     ; @return the new input.
     ;;
    #_public
    (§ method #_"TransactionInput" (§ fn addInput) [#_"TransactionInput" (§ name input)])
    (§ block
        (unCache)
        (.. input (setParent this))
        (.. inputs (add input))
        (adjustLength (.. inputs (size)), (.. input length))
        input
    )

    ;;;
     ; Creates and adds an input to this transaction, with no checking that it's valid.
     ; @return the newly created input.
     ;;
    #_public
    (§ method #_"TransactionInput" (§ fn addInput) [#_"Sha256Hash" (§ name spendTxHash), #_"long" (§ name outputIndex), #_"Script" (§ name script)])
    (§ block
        (addInput (§ new #_"TransactionInput" params, this, (.. script (getProgram)), (§ new #_"TransactionOutPoint" params, outputIndex, spendTxHash)))
    )

    ;;;
     ; Adds a new and fully signed input for the given parameters.  Note that this method is <b>not</b> thread safe
     ; and requires external synchronization.  Please refer to general documentation on Bitcoin scripting and contracts
     ; to understand the values of sigHash and anyoneCanPay: otherwise you can use the other form of this method
     ; that sets them to typical defaults.
     ;
     ; @throws ScriptException if the scriptPubKey is not a pay to address or pay to pubkey script.
     ;;
    #_public
    (§ method #_"TransactionInput" (§ fn addSignedInput) [#_"TransactionOutPoint" (§ name prevOut), #_"Script" (§ name scriptPubKey), #_"ECKey" (§ name sigKey), #_"SigHash" (§ name sigHash), #_"boolean" (§ name anyoneCanPay)])
        (§ throws #_"ScriptException")
    (§ block
        ;; Verify the API user didn't try to do operations out of order.
        (Preconditions/checkState (§ not (.. outputs (isEmpty))), "Attempting to sign tx without outputs.")

        (§ var #_"TransactionInput" (§ name input) (§ new #_"TransactionInput" params, this, (§ expr (§ new #_"byte[]")), prevOut))
        (addInput input)
        (§ var #_"Sha256Hash" (§ name hash) (hashForSignature (§ expr (.. inputs (size)) - 1), scriptPubKey, sigHash, anyoneCanPay))
        (§ var #_"ECKey.ECDSASignature" (§ name ecSig) (.. sigKey (sign hash)))
        (§ var #_"TransactionSignature" (§ name txSig) (§ new #_"TransactionSignature" ecSig, sigHash, anyoneCanPay))
        (§ if (.. scriptPubKey (isSentToRawPubKey)))
        (§ block
            (.. input (setScriptSig (ScriptBuilder/createInputScript txSig)))
        )
        (§ elseif (.. scriptPubKey (isSentToAddress)))
        (§ block
            (.. input (setScriptSig (ScriptBuilder/createInputScript txSig, sigKey)))
        )
        (§ else )
        (§ block
            (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_UNKNOWN_ERROR, (§ expr "Don't know how to sign for this kind of scriptPubKey: " + scriptPubKey)))
        )
        input
    )

    ;;;
     ; Same as {@link #addSignedInput(TransactionOutPoint, org.bitcoinj.script.Script, ECKey, org.bitcoinj.core.Transaction.SigHash, boolean)},
     ; but defaults to {@link SigHash#ALL} and "false" for the anyoneCanPay flag.  This is normally what you want.
     ;;
    #_public
    (§ method #_"TransactionInput" (§ fn addSignedInput) [#_"TransactionOutPoint" (§ name prevOut), #_"Script" (§ name scriptPubKey), #_"ECKey" (§ name sigKey)])
        (§ throws #_"ScriptException")
    (§ block
        (addSignedInput prevOut, scriptPubKey, sigKey, SigHash/ALL, false)
    )

    ;;;
     ; Adds an input that points to the given output and contains a valid signature for it, calculated using the
     ; signing key.
     ;;
    #_public
    (§ method #_"TransactionInput" (§ fn addSignedInput) [#_"TransactionOutput" (§ name output), #_"ECKey" (§ name signingKey)])
    (§ block
        (addSignedInput (.. output (getOutPointFor)), (.. output (getScriptPubKey)), signingKey)
    )

    ;;;
     ; Adds an input that points to the given output and contains a valid signature for it, calculated using the
     ; signing key.
     ;;
    #_public
    (§ method #_"TransactionInput" (§ fn addSignedInput) [#_"TransactionOutput" (§ name output), #_"ECKey" (§ name signingKey), #_"SigHash" (§ name sigHash), #_"boolean" (§ name anyoneCanPay)])
    (§ block
        (addSignedInput (.. output (getOutPointFor)), (.. output (getScriptPubKey)), signingKey, sigHash, anyoneCanPay)
    )

    ;;;
     ; Removes all the outputs from this transaction.
     ; Note that this also invalidates the length attribute.
     ;;
    #_public
    (§ method #_"void" (§ fn clearOutputs) [])
    (§ block
        (unCache)
        (§ for (§ var #_"TransactionOutput" (§ name output)) :for outputs)
        (§ block
            (.. output (setParent nil))
        )
        (.. outputs (clear))
        ;; You wanted to reserialize, right?
        (§ ass (§ name (.. this length)) (.. this (unsafeBitcoinSerialize) length))
        nil
    )

    ;;;
     ; Adds the given output to this transaction.  The output must be completely initialized.  Returns the given output.
     ;;
    #_public
    (§ method #_"TransactionOutput" (§ fn addOutput) [#_"TransactionOutput" (§ name to)])
    (§ block
        (unCache)
        (.. to (setParent this))
        (.. outputs (add to))
        (adjustLength (.. outputs (size)), (.. to length))
        to
    )

    ;;;
     ; Creates an output based on the given address and value, adds it to this transaction, and returns the new output.
     ;;
    #_public
    (§ method #_"TransactionOutput" (§ fn addOutput) [#_"Coin" (§ name value), #_"Address" (§ name address)])
    (§ block
        (addOutput (§ new #_"TransactionOutput" params, this, value, address))
    )

    ;;;
     ; Creates an output that pays to the given pubkey directly (no address) with the given value, adds it to this
     ; transaction, and returns the new output.
     ;;
    #_public
    (§ method #_"TransactionOutput" (§ fn addOutput) [#_"Coin" (§ name value), #_"ECKey" (§ name pubkey)])
    (§ block
        (addOutput (§ new #_"TransactionOutput" params, this, value, pubkey))
    )

    ;;;
     ; Creates an output that pays to the given script.  The address and key forms are specialisations of this method,
     ; you won't normally need to use it unless you're doing unusual things.
     ;;
    #_public
    (§ method #_"TransactionOutput" (§ fn addOutput) [#_"Coin" (§ name value), #_"Script" (§ name script)])
    (§ block
        (addOutput (§ new #_"TransactionOutput" params, this, value, (.. script (getProgram))))
    )

    ;;;
     ; Calculates a signature that is valid for being inserted into the input at the given position.  This is simply
     ; a wrapper around calling {@link Transaction#hashForSignature(int, byte[], org.bitcoinj.core.Transaction.SigHash, boolean)}
     ; followed by {@link ECKey#sign(Sha256Hash)} and then returning a new {@link TransactionSignature}.  The key
     ; must be usable for signing as-is: if the key is encrypted it must be decrypted first external to this method.
     ;
     ; @param inputIndex Which input to calculate the signature for, as an index.
     ; @param key The private key used to calculate the signature.
     ; @param redeemScript Byte-exact contents of the scriptPubKey that is being satisified, or the P2SH redeem script.
     ; @param hashType Signing mode, see the enum for documentation.
     ; @param anyoneCanPay Signing mode, see the SigHash enum for documentation.
     ; @return A newly calculated signature object that wraps the r, s and sighash components.
     ;;
    #_public
    (§ method #_"TransactionSignature" (§ fn calculateSignature) [#_"int" (§ name inputIndex), #_"ECKey" (§ name key), #_"byte[]" (§ name redeemScript), #_"SigHash" (§ name hashType), #_"boolean" (§ name anyoneCanPay)])
    (§ block
        (§ var #_"Sha256Hash" (§ name hash) (hashForSignature inputIndex, redeemScript, hashType, anyoneCanPay))
        (§ new #_"TransactionSignature" (.. key (sign hash)), hashType, anyoneCanPay)
    )

    ;;;
     ; Calculates a signature that is valid for being inserted into the input at the given position.  This is simply
     ; a wrapper around calling {@link Transaction#hashForSignature(int, byte[], org.bitcoinj.core.Transaction.SigHash, boolean)}
     ; followed by {@link ECKey#sign(Sha256Hash)} and then returning a new {@link TransactionSignature}.
     ;
     ; @param inputIndex Which input to calculate the signature for, as an index.
     ; @param key The private key used to calculate the signature.
     ; @param redeemScript The scriptPubKey that is being satisified, or the P2SH redeem script.
     ; @param hashType Signing mode, see the enum for documentation.
     ; @param anyoneCanPay Signing mode, see the SigHash enum for documentation.
     ; @return A newly calculated signature object that wraps the r, s and sighash components.
     ;;
    #_public
    (§ method #_"TransactionSignature" (§ fn calculateSignature) [#_"int" (§ name inputIndex), #_"ECKey" (§ name key), #_"Script" (§ name redeemScript), #_"SigHash" (§ name hashType), #_"boolean" (§ name anyoneCanPay)])
    (§ block
        (§ var #_"Sha256Hash" (§ name hash) (hashForSignature inputIndex, (.. redeemScript (getProgram)), hashType, anyoneCanPay))
        (§ new #_"TransactionSignature" (.. key (sign hash)), hashType, anyoneCanPay)
    )

    ;;;
     ; Calculates a signature that is valid for being inserted into the input at the given position.  This is simply
     ; a wrapper around calling {@link Transaction#hashForSignature(int, byte[], org.bitcoinj.core.Transaction.SigHash, boolean)}
     ; followed by {@link ECKey#sign(Sha256Hash)} and then returning a new {@link TransactionSignature}.  The key
     ; must be usable for signing as-is: if the key is encrypted it must be decrypted first external to this method.
     ;
     ; @param inputIndex Which input to calculate the signature for, as an index.
     ; @param key The private key used to calculate the signature.
     ; @param aesKey The AES key to use for decryption of the private key.  If null then no decryption is required.
     ; @param redeemScript Byte-exact contents of the scriptPubKey that is being satisified, or the P2SH redeem script.
     ; @param hashType Signing mode, see the enum for documentation.
     ; @param anyoneCanPay Signing mode, see the SigHash enum for documentation.
     ; @return A newly calculated signature object that wraps the r, s and sighash components.
     ;;
    #_public
    (§ method #_"TransactionSignature" (§ fn calculateSignature) [#_"int" (§ name inputIndex), #_"ECKey" (§ name key), #_nilable #_"KeyParameter" (§ name aesKey), #_"byte[]" (§ name redeemScript), #_"SigHash" (§ name hashType), #_"boolean" (§ name anyoneCanPay)])
    (§ block
        (§ var #_"Sha256Hash" (§ name hash) (hashForSignature inputIndex, redeemScript, hashType, anyoneCanPay))
        (§ new #_"TransactionSignature" (.. key (sign hash, aesKey)), hashType, anyoneCanPay)
    )

    ;;;
     ; Calculates a signature that is valid for being inserted into the input at the given position.  This is simply
     ; a wrapper around calling {@link Transaction#hashForSignature(int, byte[], org.bitcoinj.core.Transaction.SigHash, boolean)}
     ; followed by {@link ECKey#sign(Sha256Hash)} and then returning a new {@link TransactionSignature}.
     ;
     ; @param inputIndex Which input to calculate the signature for, as an index.
     ; @param key The private key used to calculate the signature.
     ; @param aesKey The AES key to use for decryption of the private key.  If null then no decryption is required.
     ; @param redeemScript The scriptPubKey that is being satisified, or the P2SH redeem script.
     ; @param hashType Signing mode, see the enum for documentation.
     ; @param anyoneCanPay Signing mode, see the SigHash enum for documentation.
     ; @return A newly calculated signature object that wraps the r, s and sighash components.
     ;;
    #_public
    (§ method #_"TransactionSignature" (§ fn calculateSignature) [#_"int" (§ name inputIndex), #_"ECKey" (§ name key), #_nilable #_"KeyParameter" (§ name aesKey), #_"Script" (§ name redeemScript), #_"SigHash" (§ name hashType), #_"boolean" (§ name anyoneCanPay)])
    (§ block
        (§ var #_"Sha256Hash" (§ name hash) (hashForSignature inputIndex, (.. redeemScript (getProgram)), hashType, anyoneCanPay))
        (§ new #_"TransactionSignature" (.. key (sign hash, aesKey)), hashType, anyoneCanPay)
    )

    ;;;
     ; <p>Calculates a signature hash, that is, a hash of a simplified form of the transaction.  How exactly the transaction
     ; is simplified is specified by the type and anyoneCanPay parameters.</p>
     ;
     ; <p>This is a low level API and when using the regular {@link Wallet} class you don't have to call this yourself.
     ; When working with more complex transaction types and contracts, it can be necessary.  When signing a P2SH output
     ; the redeemScript should be the script encoded into the scriptSig field, for normal transactions, it's the
     ; scriptPubKey of the output you're signing for.</p>
     ;
     ; @param inputIndex Input the signature is being calculated for.  Tx signatures are always relative to an input.
     ; @param redeemScript The bytes that should be in the given input during signing.
     ; @param type Should be SigHash.ALL.
     ; @param anyoneCanPay Should be false.
     ;;
    #_public
    (§ method #_"Sha256Hash" (§ fn hashForSignature) [#_"int" (§ name inputIndex), #_"byte[]" (§ name redeemScript), #_"SigHash" (§ name type), #_"boolean" (§ name anyoneCanPay)])
    (§ block
        (§ var #_"byte" (§ name sigHashType) (§ cast #_"byte" (TransactionSignature/calcSigHashValue type, anyoneCanPay)))
        (hashForSignature inputIndex, redeemScript, sigHashType)
    )

    ;;;
     ; <p>Calculates a signature hash, that is, a hash of a simplified form of the transaction.  How exactly the transaction
     ; is simplified is specified by the type and anyoneCanPay parameters.</p>
     ;
     ; <p>This is a low level API and when using the regular {@link Wallet} class you don't have to call this yourself.
     ; When working with more complex transaction types and contracts, it can be necessary.  When signing a P2SH output
     ; the redeemScript should be the script encoded into the scriptSig field, for normal transactions, it's the
     ; scriptPubKey of the output you're signing for.</p>
     ;
     ; @param inputIndex Input the signature is being calculated for.  Tx signatures are always relative to an input.
     ; @param redeemScript The script that should be in the given input during signing.
     ; @param type Should be SigHash.ALL.
     ; @param anyoneCanPay Should be false.
     ;;
    #_public
    (§ method #_"Sha256Hash" (§ fn hashForSignature) [#_"int" (§ name inputIndex), #_"Script" (§ name redeemScript), #_"SigHash" (§ name type), #_"boolean" (§ name anyoneCanPay)])
    (§ block
        (§ var #_"int" (§ name sigHash) (TransactionSignature/calcSigHashValue type, anyoneCanPay))
        (hashForSignature inputIndex, (.. redeemScript (getProgram)), (§ cast #_"byte" sigHash))
    )

    ;;;
     ; This is required for signatures which use a sigHashType which cannot be represented using SigHash and anyoneCanPay.
     ; See transaction c99c49da4c38af669dea436d3e73780dfdb6c1ecf9958baa52960e8baee30e73, which has sigHashType 0.
     ;;
    #_public
    (§ method #_"Sha256Hash" (§ fn hashForSignature) [#_"int" (§ name inputIndex), #_"byte[]" (§ name connectedScript), #_"byte" (§ name sigHashType)])
    (§ block
        ;; The SIGHASH flags are used in the design of contracts, please see this page for a further understanding of
        ;; the purposes of the code in this method:
        ;;
        ;;   https://en.bitcoin.it/wiki/Contracts

        (§ try )
        (§ block
            ;; Create a copy of this transaction to operate upon because we need make changes to the inputs and outputs.
            ;; It would not be thread-safe to change the attributes of the transaction object itself.
            (§ var #_"Transaction" (§ name tx) (.. this params (getDefaultSerializer) (makeTransaction (.. this (bitcoinSerialize)))))

            ;; Clear input scripts in preparation for signing.  If we're signing a fresh transaction that step isn't very
            ;; helpful, but it doesn't add much cost relative to the actual EC math so we'll do it anyway.
            (§ for (§ var #_"int" (§ name i) 0) :for (§ expr i < (.. tx inputs (size))) :for (§ ass (§ name i) (+ i 1)))
            (§ block
                (.. tx inputs (get i) (clearScriptBytes))
            )

            ;; This step has no purpose beyond being synchronized with Bitcoin Core's bugs.  OP_CODESEPARATOR
            ;; is a legacy holdover from a previous, broken design of executing scripts that shipped in Bitcoin 0.1.
            ;; It was seriously flawed and would have let anyone take anyone elses money.  Later versions switched to
            ;; the design we use today where scripts are executed independently but share a stack.  This left the
            ;; OP_CODESEPARATOR instruction having no purpose as it was only meant to be used internally, not actually
            ;; ever put into scripts.  Deleting OP_CODESEPARATOR is a step that should never be required but if we don't
            ;; do it, we could split off the main chain.
            (§ ass (§ name connectedScript) (Script/removeAllInstancesOfOp connectedScript, ScriptOpCodes/OP_CODESEPARATOR))

            ;; Set the input to the script of its output.  Bitcoin Core does this but the step has no obvious purpose as
            ;; the signature covers the hash of the prevout transaction which obviously includes the output script
            ;; already.  Perhaps it felt safer to him in some way, or is another leftover from how the code was written.
            (§ var #_"TransactionInput" (§ name input) (.. tx inputs (get inputIndex)))
            (.. input (setScriptBytes connectedScript))

            (§ if (== (& sigHashType 0x1f) (.. SigHash/NONE value)))
            (§ block
                ;; SIGHASH_NONE means no outputs are signed at all - the signature is effectively for a "blank cheque".
                (§ ass (§ name (.. tx outputs)) (§ new #_"ArrayList<>" 0))
                ;; The signature isn't broken by new versions of the transaction issued by other parties.
                (§ for (§ var #_"int" (§ name i) 0) :for (§ expr i < (.. tx inputs (size))) :for (§ ass (§ name i) (+ i 1)))
                (§ block
                    (§ if (§ expr i != inputIndex))
                    (§ block
                        (.. tx inputs (get i) (setSequenceNumber 0))
                    )
                )
            )
            (§ elseif (== (& sigHashType 0x1f) (.. SigHash/SINGLE value)))
            (§ block
                ;; SIGHASH_SINGLE means only sign the output at the same index as the input (i.e. my output).
                (§ if (<= (.. tx outputs (size)) inputIndex))
                (§ block
                    ;; The input index is beyond the number of outputs, it's a buggy signature made by a broken
                    ;; Bitcoin implementation.  Bitcoin Core also contains a bug in handling this case:
                    ;; any transaction output that is signed in this case will result in both the signed output
                    ;; and any future outputs to this public key being steal-able by anyone who has
                    ;; the resulting signature and the public key (both of which are part of the signed tx input).

                    ;; Bitcoin Core's bug is that SignatureHash was supposed to return a hash and on this codepath it
                    ;; actually returns the constant "1" to indicate an error, which is never checked for.  Oops.
                    (§ return (Sha256Hash/wrap "0100000000000000000000000000000000000000000000000000000000000000"))
                )
                ;; In SIGHASH_SINGLE the outputs after the matching input index are deleted, and the outputs before
                ;; that position are "nulled out".  Unintuitively, the value in a "null" transaction is set to -1.
                (§ ass (§ name (.. tx outputs)) (§ new #_"ArrayList<>" (.. tx outputs (subList 0, (§ expr inputIndex + 1)))))
                (§ for (§ var #_"int" (§ name i) 0) :for (< i inputIndex) :for (§ ass (§ name i) (+ i 1)))
                (§ block
                    (.. tx outputs (set i, (§ new #_"TransactionOutput" (.. tx params), tx, Coin/NEGATIVE_SATOSHI, (§ new #_"byte[]"))))
                )
                ;; The signature isn't broken by new versions of the transaction issued by other parties.
                (§ for (§ var #_"int" (§ name i) 0) :for (§ expr i < (.. tx inputs (size))) :for (§ ass (§ name i) (+ i 1)))
                (§ block
                    (§ if (§ expr i != inputIndex))
                    (§ block
                        (.. tx inputs (get i) (setSequenceNumber 0))
                    )
                )
            )

            (§ if (== (§ expr sigHashType & (.. SigHash/ANYONECANPAY value)) (.. SigHash/ANYONECANPAY value)))
            (§ block
                ;; SIGHASH_ANYONECANPAY means the signature in the input is not broken by changes/additions/removals
                ;; of other inputs.  For example, this is useful for building assurance contracts.
                (§ ass (§ name (.. tx inputs)) (§ new #_"ArrayList<TransactionInput>"))
                (.. tx inputs (add input))
            )

            (§ var #_"ByteArrayOutputStream" (§ name bos) (§ new #_"UnsafeByteArrayOutputStream" (if (== (.. tx length) UNKNOWN_LENGTH) 256 (+ (.. tx length) 4))))
            (.. tx (bitcoinSerialize bos))
            ;; We also have to write a hash type (sigHashType is actually an unsigned char).
            (uint32ToByteStreamLE (§ expr 0x000000ff & sigHashType), bos)
            ;; Note that this is NOT reversed to ensure it will be signed correctly.  If it were to be printed out
            ;; however then we would expect that it is IS reversed.
            (§ var #_"Sha256Hash" (§ name hash) (Sha256Hash/twiceOf (.. bos (toByteArray))))
            (.. bos (close))

            (§ return hash)
        )
        (§ catch #_"IOException" (§ name e))
        (§ block
            (§ throw (§ new #_"RuntimeException" e)) ;; Cannot happen.
        )
    )

    #_override
    #_protected
    (§ method #_"void" (§ fn bitcoinSerializeToStream) [#_"OutputStream" (§ name stream)])
        (§ throws #_"IOException")
    (§ block
        (uint32ToByteStreamLE version, stream)
        (.. stream (write (.. (§ new #_"VarInt" (.. inputs (size))) (encode))))
        (§ for (§ var #_"TransactionInput" (§ name in)) :for inputs)
        (§ block
            (.. in (bitcoinSerialize stream))
        )
        (.. stream (write (.. (§ new #_"VarInt" (.. outputs (size))) (encode))))
        (§ for (§ var #_"TransactionOutput" (§ name out)) :for outputs)
        (§ block
            (.. out (bitcoinSerialize stream))
        )
        (uint32ToByteStreamLE lockTime, stream)
        nil
    )

    ;;;
     ; Transactions can have an associated lock time, specified either as a block height or in seconds since the
     ; UNIX epoch.  A transaction is not allowed to be confirmed by miners until the lock time is reached, and
     ; since Bitcoin 0.8+ a transaction that did not end its lock period (non final) is considered to be non
     ; standard and won't be relayed or included in the memory pool either.
     ;;
    #_public
    (§ method #_"long" (§ fn getLockTime) [])
    (§ block
        lockTime
    )

    ;;;
     ; Transactions can have an associated lock time, specified either as a block height or in seconds since the
     ; UNIX epoch.  A transaction is not allowed to be confirmed by miners until the lock time is reached, and
     ; since Bitcoin 0.8+ a transaction that did not end its lock period (non final) is considered to be non
     ; standard and won't be relayed or included in the memory pool either.
     ;;
    #_public
    (§ method #_"void" (§ fn setLockTime) [#_"long" (§ name lockTime)])
    (§ block
        (unCache)
        (§ var #_"boolean" (§ name seqNumSet) false)
        (§ for (§ var #_"TransactionInput" (§ name input)) :for inputs)
        (§ block
            (§ if (!= (.. input (getSequenceNumber)) TransactionInput/NO_SEQUENCE))
            (§ block
                (§ ass (§ name seqNumSet) true)
                (§ break )
            )
        )
        (§ if (§ expr lockTime != 0 && (§ expr (§ not seqNumSet) || (.. inputs (isEmpty)))))
        (§ block
            ;; At least one input must have a non-default sequence number for lock times to have any effect.
            ;; For instance one of them can be set to zero to make this feature work.
            (.. log (warn "You are setting the lock time on a transaction but none of the inputs have non-default sequence numbers. This will not do what you expect!"))
        )
        (§ ass (§ name (.. this lockTime)) lockTime)
        nil
    )

    #_public
    (§ method #_"long" (§ fn getVersion) [])
    (§ block
        version
    )

    #_public
    (§ method #_"void" (§ fn setVersion) [#_"int" (§ name version)])
    (§ block
        (§ ass (§ name (.. this version)) version)
        (unCache)
        nil
    )

    ;;; Returns an unmodifiable view of all inputs. ;;
    #_public
    (§ method #_"List<TransactionInput>" (§ fn getInputs) [])
    (§ block
        (Collections/unmodifiableList inputs)
    )

    ;;; Returns an unmodifiable view of all outputs. ;;
    #_public
    (§ method #_"List<TransactionOutput>" (§ fn getOutputs) [])
    (§ block
        (Collections/unmodifiableList outputs)
    )

    ;;;
     ; <p>Returns the list of transacion outputs, whether spent or unspent, that match a wallet by address or that are
     ; watched by a wallet, i.e. transaction outputs whose script's address is controlled by the wallet and transaction
     ; outputs whose script is watched by the wallet.</p>
     ;
     ; @param transactionBag The wallet that controls addresses and watches scripts.
     ; @return linked list of outputs relevant to the wallet in this transaction.
     ;;
    #_public
    (§ method #_"List<TransactionOutput>" (§ fn getWalletOutputs) [#_"TransactionBag" (§ name transactionBag)])
    (§ block
        (§ var #_"List<TransactionOutput>" (§ name walletOutputs) (§ new #_"LinkedList<>"))

        (§ for (§ var #_"TransactionOutput" (§ name o)) :for outputs)
        (§ block
            (§ if (.. o (isMine transactionBag)))
            (§ block
                (.. walletOutputs (add o))
            )
        )

        walletOutputs
    )

    ;;; Randomly re-orders the transaction outputs: good for privacy. ;;
    #_public
    (§ method #_"void" (§ fn shuffleOutputs) [])
    (§ block
        (Collections/shuffle outputs)
        nil
    )

    ;;; Same as getInputs().get(index). ;;
    #_public
    (§ method #_"TransactionInput" (§ fn getInput) [#_"long" (§ name index)])
    (§ block
        (.. inputs (get (§ cast #_"int" index)))
    )

    ;;; Same as getOutputs().get(index). ;;
    #_public
    (§ method #_"TransactionOutput" (§ fn getOutput) [#_"long" (§ name index)])
    (§ block
        (.. outputs (get (§ cast #_"int" index)))
    )

    ;;;
     ; Returns the confidence object for this transaction from the {@link org.bitcoinj.core.TxConfidenceTable}
     ; referenced by the implicit {@link Context}.
     ;;
    #_public
    (§ method #_"TransactionConfidence" (§ fn getConfidence) [])
    (§ block
        (getConfidence (Context/get))
    )

    ;;;
     ; Returns the confidence object for this transaction from the {@link org.bitcoinj.core.TxConfidenceTable}
     ; referenced by the given {@link Context}.
     ;;
    #_public
    (§ method #_"TransactionConfidence" (§ fn getConfidence) [#_"Context" (§ name context)])
    (§ block
        (getConfidence (.. context (getConfidenceTable)))
    )

    ;;;
     ; Returns the confidence object for this transaction from the {@link org.bitcoinj.core.TxConfidenceTable}.
     ;;
    #_public
    (§ method #_"TransactionConfidence" (§ fn getConfidence) [#_"TxConfidenceTable" (§ name table)])
    (§ block
        (§ if (nil? confidence))
        (§ block
            (§ ass (§ name confidence) (.. table (getOrCreate (getHash))))
        )
        confidence
    )

    ;;; Check if the transaction has a known confidence. ;;
    #_public
    (§ method #_"boolean" (§ fn hasConfidence) [])
    (§ block
        (!= (.. (getConfidence) (getConfidenceType)) TransactionConfidence/ConfidenceType/UNKNOWN)
    )

    #_override
    #_public
    (§ method #_"boolean" (§ fn equals) [#_"Object" (§ name o)])
    (§ block
        (§ if (§ expr this == o))
        (§ block
            (§ return true)
        )
        (§ if (§ expr o == nil || (getClass) != (.. o (getClass))))
        (§ block
            (§ return false)
        )
        (.. (getHash) (equals (.. (§ cast #_"Transaction" o) (getHash))))
    )

    #_override
    #_public
    (§ method #_"int" (§ fn hashCode) [])
    (§ block
        (.. (getHash) (hashCode))
    )

    ;;;
     ; Gets the count of regular SigOps in this transactions.
     ;;
    #_public
    (§ method #_"int" (§ fn getSigOpCount) [])
        (§ throws #_"ScriptException")
    (§ block
        (§ var #_"int" (§ name sigOps) 0)
        (§ for (§ var #_"TransactionInput" (§ name input)) :for inputs)
        (§ block
            (§ ass (§ name sigOps) (§ expr sigOps + (Script/getSigOpCount (.. input (getScriptBytes)))))
        )
        (§ for (§ var #_"TransactionOutput" (§ name output)) :for outputs)
        (§ block
            (§ ass (§ name sigOps) (§ expr sigOps + (Script/getSigOpCount (.. output (getScriptBytes)))))
        )
        sigOps
    )

    ;;;
     ; Check block height is in coinbase input script, for use after BIP 34
     ; enforcement is enabled.
     ;;
    #_public
    (§ method #_"void" (§ fn checkCoinBaseHeight) [#_"int" (§ name height)])
        (§ throws #_"VerificationException")
    (§ block
        (Preconditions/checkArgument (<= Block/BLOCK_HEIGHT_GENESIS height))
        (Preconditions/checkState (isCoinBase))

        ;; Check block height is in coinbase input script.
        (§ var #_"TransactionInput" (§ name in) (.. this (getInputs) (get 0)))
        (§ var #_"ScriptBuilder" (§ name builder) (§ new #_"ScriptBuilder"))
        (.. builder (number height))
        (§ var #_"byte[]" (§ name expected) (.. builder (build) (getProgram)))
        (§ var #_"byte[]" (§ name actual) (.. in (getScriptBytes)))
        (§ if (< (.. actual length) (.. expected length)))
        (§ block
            (§ throw (§ new #_"VerificationException.CoinbaseHeightMismatch" "Block height mismatch in coinbase."))
        )

        (§ for (§ var #_"int" (§ name scriptIdx) 0) :for (§ expr scriptIdx < (.. expected length)) :for (§ ass (§ name scriptIdx) (+ scriptIdx 1)))
        (§ block
            (§ if (§ expr (§ ai actual scriptIdx) != (§ ai expected scriptIdx)))
            (§ block
                (§ throw (§ new #_"VerificationException.CoinbaseHeightMismatch" "Block height mismatch in coinbase."))
            )
        )
        nil
    )

    ;;;
     ; <p>Checks the transaction contents for sanity, in ways that can be done in a standalone manner.
     ; Does <b>not</b> perform all checks on a transaction such as whether the inputs are already spent.
     ; Specifically this method verifies:</p>
     ;
     ; <ul>
     ;     <li>That there is at least one input and output.</li>
     ;     <li>That the serialized size is not larger than the max block size.</li>
     ;     <li>That no outputs have negative value.</li>
     ;     <li>That the outputs do not sum to larger than the max allowed quantity of coin in the system.</li>
     ;     <li>If the tx is a coinbase tx, the coinbase scriptSig size is within range.  Otherwise that
     ;     there are no coinbase inputs in the tx.</li>
     ; </ul>
     ;
     ; @throws VerificationException
     ;;
    #_public
    (§ method #_"void" (§ fn verify) [])
        (§ throws #_"VerificationException")
    (§ block
        (§ if (§ expr (.. inputs (size)) == 0 || (.. outputs (size)) == 0))
        (§ block
            (§ throw (§ new #_"VerificationException.EmptyInputsOrOutputs"))
        )
        (§ if (§ expr Block/MAX_BLOCK_SIZE < (.. this (getMessageSize))))
        (§ block
            (§ throw (§ new #_"VerificationException.LargerThanMaxBlockSize"))
        )

        (§ var #_"Coin" (§ name valueOut) Coin/ZERO)
        (§ var #_"HashSet<TransactionOutPoint>" (§ name outpoints) (§ new #_"HashSet<>"))
        (§ for (§ var #_"TransactionInput" (§ name input)) :for inputs)
        (§ block
            (§ if (.. outpoints (contains (.. input (getOutpoint)))))
            (§ block
                (§ throw (§ new #_"VerificationException.DuplicatedOutPoint"))
            )
            (.. outpoints (add (.. input (getOutpoint))))
        )
        (§ try )
        (§ block
            (§ for (§ var #_"TransactionOutput" (§ name output)) :for outputs)
            (§ block
                (§ if (< (.. output (getValue) (signum)) 0)) ;; getValue() can throw IllegalStateException
                (§ block
                    (§ throw (§ new #_"VerificationException.NegativeValueOutput"))
                )

                (§ ass (§ name valueOut) (.. valueOut (add (.. output (getValue)))))
                (§ if (§ expr (.. params (hasMaxMoney)) && 0 < (.. valueOut (compareTo (.. params (getMaxMoney))))))
                (§ block
                    (§ throw (§ new #_"IllegalArgumentException"))
                )
            )
        )
        (§ catch #_"IllegalStateException" (§ name _))
        (§ block
            (§ throw (§ new #_"VerificationException.ExcessiveValue"))
        )
        (§ catch #_"IllegalArgumentException" (§ name _))
        (§ block
            (§ throw (§ new #_"VerificationException.ExcessiveValue"))
        )

        (§ if (isCoinBase))
        (§ block
            (§ var #_"int" (§ name n) (.. inputs (get 0) (getScriptBytes) length))
            (§ if (§ expr n < 2 || 100 < n))
            (§ block
                (§ throw (§ new #_"VerificationException.CoinbaseScriptSizeOutOfRange"))
            )
        )
        (§ else )
        (§ block
            (§ for (§ var #_"TransactionInput" (§ name input)) :for inputs)
            (§ block
                (§ if (.. input (isCoinBase)))
                (§ block
                    (§ throw (§ new #_"VerificationException.UnexpectedCoinbaseInput"))
                )
            )
        )
        nil
    )

    ;;;
     ; <p>A transaction is time locked if at least one of its inputs is non-final and it has a lock time.</p>
     ;
     ; <p>To check if this transaction is final at a given height and time, see {@link Transaction#isFinal(int, long)}.</p>
     ;;
    #_public
    (§ method #_"boolean" (§ fn isTimeLocked) [])
    (§ block
        (§ if (== (getLockTime) 0))
        (§ block
            (§ return false)
        )
        (§ for (§ var #_"TransactionInput" (§ name input)) :for (getInputs))
        (§ block
            (§ if (.. input (hasSequence)))
            (§ block
                (§ return true)
            )
        )
        false
    )

    ;;;
     ; Returns whether this transaction will opt into the
     ; <a href="https://github.com/bitcoin/bips/blob/master/bip-0125.mediawiki">full replace-by-fee</a> semantics.
     ;;
    #_public
    (§ method #_"boolean" (§ fn isOptInFullRBF) [])
    (§ block
        (§ for (§ var #_"TransactionInput" (§ name input)) :for (getInputs))
        (§ block
            (§ if (.. input (isOptInFullRBF)))
            (§ block
                (§ return true)
            )
        )
        false
    )

    ;;;
     ; <p>Returns true if this transaction is considered finalized and can be placed in a block.  Non-finalized
     ; transactions won't be included by miners and can be replaced with newer versions using sequence numbers.
     ; This is useful in certain types of <a href="http://en.bitcoin.it/wiki/Contracts">contracts</a>, such as
     ; micropayment channels.</p>
     ;
     ; <p>Note that currently the replacement feature is disabled in Bitcoin Core and will need to be
     ; re-activated before this functionality is useful.</p>
     ;;
    #_public
    (§ method #_"boolean" (§ fn isFinal) [#_"int" (§ name height), #_"long" (§ name blockTimeSeconds)])
    (§ block
        (§ var #_"long" (§ name time) (getLockTime))
        (§ or (< time (if (< time LOCKTIME_THRESHOLD) height blockTimeSeconds)) || (§ not (isTimeLocked)))
    )

    ;;;
     ; Returns either the lock time as a date, if it was specified in seconds, or an estimate based on the time in
     ; the current head block if it was specified as a block time.
     ;;
    #_public
    (§ method #_"Date" (§ fn estimateLockTime) [#_"AbstractBlockChain" (§ name chain)])
    (§ block
        (if (< lockTime LOCKTIME_THRESHOLD) (.. chain (estimateBlockTime (§ cast #_"int" (getLockTime)))) (§ new #_"Date" (* (getLockTime) 1000)))
    )

    ;;;
     ; Returns the purpose for which this transaction was created.  See the javadoc for {@link Purpose} for more
     ; information on the point of this field and what it can be.
     ;;
    #_public
    (§ method #_"Purpose" (§ fn getPurpose) [])
    (§ block
        purpose
    )

    ;;;
     ; Marks the transaction as being created for the given purpose.  See the javadoc for {@link Purpose} for more
     ; information on the point of this field and what it can be.
     ;;
    #_public
    (§ method #_"void" (§ fn setPurpose) [#_"Purpose" (§ name purpose)])
    (§ block
        (§ ass (§ name (.. this purpose)) purpose)
        nil
    )

    ;;;
     ; Getter for {@link #exchangeRate}.
     ;;
    #_nilable
    #_public
    (§ method #_"ExchangeRate" (§ fn getExchangeRate) [])
    (§ block
        exchangeRate
    )

    ;;;
     ; Setter for {@link #exchangeRate}.
     ;;
    #_public
    (§ method #_"void" (§ fn setExchangeRate) [#_"ExchangeRate" (§ name exchangeRate)])
    (§ block
        (§ ass (§ name (.. this exchangeRate)) exchangeRate)
        nil
    )

    ;;;
     ; Returns the transaction {@link #memo}.
     ;;
    #_public
    (§ method #_"String" (§ fn getMemo) [])
    (§ block
        memo
    )

    ;;;
     ; Set the transaction {@link #memo}.  It can be used to record the memo of the payment request that initiated the
     ; transaction.
     ;;
    #_public
    (§ method #_"void" (§ fn setMemo) [#_"String" (§ name memo)])
    (§ block
        (§ ass (§ name (.. this memo)) memo)
        nil
    )
)

#_(ns org.bitcoinj.core #_"TransactionBag"
    (:import [java.util Map])
   (:require [org.bitcoinj.script Script]
             [org.bitcoinj.wallet WalletTransaction]))

;;;
 ; This interface is used to abstract the {@link org.bitcoinj.wallet.Wallet} and the {@link org.bitcoinj.core.Transaction}.
 ;;
#_public
(§ interface #_"TransactionBag"
    ;;; Returns true if this wallet contains a public key which hashes to the given hash. ;;
    (§ method #_"boolean" (§ fn isPubKeyHashMine) [#_"byte[]" (§ name pubkeyHash)])

    ;;; Returns true if this wallet contains a keypair with the given public key. ;;
    (§ method #_"boolean" (§ fn isPubKeyMine) [#_"byte[]" (§ name pubkey)])

    ;;; Returns true if this wallet knows the script corresponding to the given hash. ;;
    (§ method #_"boolean" (§ fn isPayToScriptHashMine) [#_"byte[]" (§ name payToScriptHash)])

    ;;; Returns transactions from a specific pool. ;;
    (§ method #_"Map<Sha256Hash, Transaction>" (§ fn getTransactionPool) [#_"WalletTransaction.Pool" (§ name pool)])
)

#_(ns org.bitcoinj.core #_"TransactionBroadcast"
    (:import [java.util *]
             [java.util.concurrent *])
    (:import [com.google.common.annotations *]
             [com.google.common.base *]
             [com.google.common.util.concurrent *]
             [org.slf4j *])
   (:require [org.bitcoinj.core.listeners PreMessageReceivedEventListener]
             [org.bitcoinj.utils *]
             [org.bitcoinj.wallet Wallet]))

;;;
 ; Represents a single transaction broadcast that we are performing.  A broadcast occurs after a new transaction is created
 ; (typically by a {@link Wallet}) and needs to be sent to the network.  A broadcast can succeed or fail.  A success is
 ; defined as seeing the transaction be announced by peers via inv messages, thus indicating their acceptance.  A failure
 ; is defined as not reaching acceptance within a timeout period, or getting an explicit reject message from a peer
 ; indicating that the transaction was not acceptable.
 ;;
#_public
(§ class #_"TransactionBroadcast"
    #_private
    #_static
    (§ def- #_"Logger" (§ name log) (LoggerFactory/getLogger (§ klass #_"TransactionBroadcast")))

    #_private
    (§ field- #_"SettableFuture<Transaction>" (§ name future) (SettableFuture/create))
    #_private
    (§ field- #_"PeerGroup" (§ name peerGroup))
    #_private
    (§ field- #_"Transaction" (§ name tx))
    #_private
    (§ field- #_"int" (§ name minConnections))
    #_private
    (§ field- #_"int" (§ name numWaitingFor))

    ;;; Used for shuffling the peers before broadcast: unit tests can replace this to make themselves deterministic. ;;
    #_testing
    #_public
    #_static
    (§ def #_"Random" (§ name random) (§ new #_"Random"))

    ;; Tracks which nodes sent us a reject message about this broadcast, if any.  Useful for debugging.
    #_private
    (§ field- #_"Map<Peer, RejectMessage>" (§ name rejects) (Collections/synchronizedMap (§ new #_"HashMap<Peer, RejectMessage>")))

    (§ constructor #_"TransactionBroadcast" [#_"PeerGroup" (§ name peerGroup), #_"Transaction" (§ name tx)])
    (§ block
        (§ ass (§ name (.. this peerGroup)) peerGroup)
        (§ ass (§ name (.. this tx)) tx)
        (§ ass (§ name (.. this minConnections)) (Math/max 1, (.. peerGroup (getMinBroadcastConnections))))
        this
    )

    ;; Only for mock broadcasts.
    #_private
    (§ constructor- #_"TransactionBroadcast" [#_"Transaction" (§ name tx)])
    (§ block
        (§ ass (§ name (.. this peerGroup)) nil)
        (§ ass (§ name (.. this tx)) tx)
        this
    )

    #_testing
    #_public
    #_static
    (§ defn #_"TransactionBroadcast" (§ fn createMockBroadcast) [#_"Transaction" (§ name tx), #_"SettableFuture<Transaction>" (§ name future)])
    (§ block
        (§ return (§ new #_"TransactionBroadcast" tx)
        (§ anon
            #_override
            #_public
            (§ method #_"ListenableFuture<Transaction>" (§ fn broadcast) [])
            (§ block
                future
            )

            #_override
            #_public
            (§ method #_"ListenableFuture<Transaction>" (§ fn future) [])
            (§ block
                future
            )
        ))
    )

    #_public
    (§ method #_"ListenableFuture<Transaction>" (§ fn future) [])
    (§ block
        future
    )

    #_public
    (§ method #_"void" (§ fn setMinConnections) [#_"int" (§ name minConnections)])
    (§ block
        (§ ass (§ name (.. this minConnections)) minConnections)
        nil
    )

    #_private
    (§ field- #_"PreMessageReceivedEventListener" (§ name rejectionListener) (§ new #_"PreMessageReceivedEventListener"
        (§ anon
            #_override
            #_public
            (§ method #_"Message" (§ fn onPreMessageReceived) [#_"Peer" (§ name peer), #_"Message" (§ name m)])
            (§ block
                (§ if (§ insta m #_"RejectMessage"))
                (§ block
                    (§ var #_"RejectMessage" (§ name rejectMessage) (§ cast #_"RejectMessage" m))
                    (§ if (.. tx (getHash) (equals (.. rejectMessage (getRejectedObjectHash)))))
                    (§ block
                        (.. rejects (put peer, rejectMessage))
                        (§ var #_"int" (§ name size) (.. rejects (size)))
                        (§ var #_"long" (§ name threshold) (Math/round (/ numWaitingFor 2.0)))
                        (§ if (< threshold size))
                        (§ block
                            (.. log (warn "Threshold for considering broadcast rejected has been reached ({}/{})", size, threshold))
                            (.. future (setException (§ new #_"RejectedTransactionException" tx, rejectMessage)))
                            (.. peerGroup (removePreMessageReceivedEventListener this))
                        )
                    )
                )
                m
            )
        )))

    #_public
    (§ method #_"ListenableFuture<Transaction>" (§ fn broadcast) [])
    (§ block
        (.. peerGroup (addPreMessageReceivedEventListener Threading/SAME_THREAD, rejectionListener))
        (.. log (info "Waiting for {} peers required for broadcast, we have {} ...", minConnections, (.. peerGroup (getConnectedPeers) (size))))
        (.. peerGroup (waitForPeers minConnections) (addListener (§ new #_"EnoughAvailablePeers"), Threading/SAME_THREAD))
        future
    )

    #_private
    (§ class #_"EnoughAvailablePeers" (§ implements #_"Runnable")
        #_override
        #_public
        (§ method #_"void" (§ fn run) [])
        (§ block
            ;; We now have enough connected peers to send the transaction.
            ;; This can be called immediately if we already have enough.  Otherwise it'll be called from a peer thread.

            ;; We will send the tx simultaneously to half the connected peers and wait to hear back from at least half
            ;; of the other half, i.e. with 4 peers connected we will send the tx to 2 randomly chosen peers, and then
            ;; wait for it to show up on one of the other two.  This will be taken as sign of network acceptance.  As can
            ;; be seen, 4 peers is probably too little - it doesn't taken many broken peers for tx propagation to have
            ;; a big effect.
            (§ var #_"List<Peer>" (§ name peers) (.. peerGroup (getConnectedPeers))) ;; snapshots
            ;; Prepare to send the transaction by adding a listener that'll be called when confidence changes.
            ;; Only bother with this if we might actually hear back:
            (§ if (< 1 minConnections))
            (§ block
                (.. tx (getConfidence) (addEventListener (§ new #_"ConfidenceChange")))
            )
            ;; Bitcoin Core sends an inv in this case and then lets the peer request the tx data.  We just
            ;; blast out the TX here for a couple of reasons.  Firstly it's simpler: in the case where we have
            ;; just a single connection we don't have to wait for getdata to be received and handled before
            ;; completing the future in the code immediately below.  Secondly, it's faster.  The reason the
            ;; Bitcoin Core sends an inv is privacy - it means you can't tell if the peer originated the
            ;; transaction or not.  However, we are not a fully validating node and this is advertised in
            ;; our version message, as SPV nodes cannot relay it doesn't give away any additional information
            ;; to skip the inv here - we wouldn't send invs anyway.
            (§ var #_"int" (§ name numConnected) (.. peers (size)))
            (§ var #_"int" (§ name numToBroadcastTo) (§ cast #_"int" (Math/max 1, (§ expr (Math/round (Math/ceil (/ (.. peers (size)) 2.0)))))))
            (§ ass (§ name numWaitingFor) (§ cast #_"int" (Math/ceil (/ (- (.. peers (size)) numToBroadcastTo) 2.0))))
            (Collections/shuffle peers, random)
            (§ ass (§ name peers) (.. peers (subList 0, numToBroadcastTo)))
            (.. log (info "broadcastTransaction: We have {} peers, adding {} to the memory pool", numConnected, (.. tx (getHashAsString))))
            (.. log (info "Sending to {} peers, will wait for {}, sending to: {}", numToBroadcastTo, numWaitingFor, (.. (Joiner/on ",") (join peers))))
            (§ for (§ var #_"Peer" (§ name peer)) :for peers)
            (§ block
                (§ try )
                (§ block
                    (.. peer (sendMessage tx))
                    ;; We don't record the peer as having seen the tx in the memory pool because we want to track only
                    ;; how many peers announced to us.
                )
                (§ catch #_"Exception" (§ name e))
                (§ block
                    (.. log (error "Caught exception sending to {}", peer, e))
                )
            )
            ;; If we've been limited to talk to only one peer, we can't wait to hear back because the
            ;; remote peer won't tell us about transactions we just announced to it for obvious reasons.
            ;; So we just have to assume we're done, at that point.  This happens when we're not given
            ;; any peer discovery source and the user just calls connectTo() once.
            (§ if (§ expr minConnections == 1))
            (§ block
                (.. peerGroup (removePreMessageReceivedEventListener rejectionListener))
                (.. future (set tx))
            )
            nil
        )
    )

    #_private
    (§ field- #_"int" (§ name numSeemPeers))
    #_private
    (§ field- #_"boolean" (§ name mined))

    #_private
    (§ class #_"ConfidenceChange" (§ implements #_"TransactionConfidence.Listener")
        #_override
        #_public
        (§ method #_"void" (§ fn onConfidenceChanged) [#_"TransactionConfidence" (§ name conf), #_"ChangeReason" (§ name reason)])
        (§ block
            ;; The number of peers that announced this tx has gone up.
            (§ var #_"int" (§ name numSeenPeers) (+ (.. conf (numBroadcastPeers)) (.. rejects (size))))
            (§ var #_"boolean" (§ name mined) (!= (.. tx (getAppearsInHashes)) nil))
            (.. log (info "broadcastTransaction: {}:  TX {} seen by {} peers{}", reason, (.. tx (getHashAsString)), numSeenPeers, (if mined " and mined" "")))

            ;; Progress callback on the requested thread.
            (invokeAndRecord numSeenPeers, mined)

            (§ if (§ expr numWaitingFor <= numSeenPeers || mined))
            (§ block
                ;; We've seen the min required number of peers announce the transaction, or it was included
                ;; in a block.  Normally we'd expect to see it fully propagate before it gets mined, but
                ;; it can be that a block is solved very soon after broadcast, and it's also possible that
                ;; due to version skew and changes in the relay rules our transaction is not going to
                ;; fully propagate yet can get mined anyway.
                ;;
                ;; Note that we can't wait for the current number of connected peers right now because we
                ;; could have added more peers after the broadcast took place, which means they won't
                ;; have seen the transaction.  In future when peers sync up their memory pools after they
                ;; connect we could come back and change this.
                ;;
                ;; We're done!  It's important that the PeerGroup lock is not held (by this thread) at this
                ;; point to avoid triggering inversions when the Future completes.
                (.. log (info "broadcastTransaction: {} complete", (.. tx (getHash))))
                (.. peerGroup (removePreMessageReceivedEventListener rejectionListener))
                (.. conf (removeEventListener this))
                (.. future (set tx)) ;; RE-ENTRANCY POINT
            )
            nil
        )
    )

    #_private
    (§ method- #_"void" (§ fn invokeAndRecord) [#_"int" (§ name numSeenPeers), #_"boolean" (§ name mined)])
    (§ block
        (§ sync this)
        (§ block
            (§ ass (§ name (.. this numSeemPeers)) numSeenPeers)
            (§ ass (§ name (.. this mined)) mined)
        )
        (invokeProgressCallback numSeenPeers, mined)
        nil
    )

    #_private
    (§ method- #_"void" (§ fn invokeProgressCallback) [#_"int" (§ name numSeenPeers), #_"boolean" (§ name mined)])
    (§ block
        (§ var #_"ProgressCallback" (§ name callback))
        (§ var #_"Executor" (§ name executor))
        (§ sync this)
        (§ block
            (§ ass (§ name callback) (.. this callback))
            (§ ass (§ name executor) (.. this progressCallbackExecutor))
        )
        (§ if (some? callback))
        (§ block
            (§ var #_"double" (§ name progress) (Math/min 1.0, (if mined 1.0 (/ numSeenPeers (§ cast #_"double" numWaitingFor)))))
            (Preconditions/checkState (<= 0.0 progress 1.0), progress)
            (§ try )
            (§ block
                (§ if (nil? executor))
                (§ block
                    (.. callback (onBroadcastProgress progress))
                )
                (§ else )
                (§ block
                    (.. executor (execute (§ new #_"Runnable")
                    (§ anon
                        #_override
                        #_public
                        (§ method #_"void" (§ fn run) [])
                        (§ block
                            (.. callback (onBroadcastProgress progress))
                            nil
                        )
                    )))
                )
            )
            (§ catch #_"Throwable" (§ name e))
            (§ block
                (.. log (error "Exception during progress callback", e))
            )
        )
        nil
    )

    ;;; An interface for receiving progress information on the propagation of the tx, from 0.0 to 1.0 ;;
    #_public
    (§ interface #_"ProgressCallback"
        ;;;
         ; onBroadcastProgress will be invoked on the provided executor when the progress of the transaction
         ; broadcast has changed, because the transaction has been announced by another peer or because the transaction
         ; was found inside a mined block (in this case progress will go to 1.0 immediately).  Any exceptions thrown
         ; by this callback will be logged and ignored.
         ;;
        (§ method #_"void" (§ fn onBroadcastProgress) [#_"double" (§ name progress)])
    )

    #_nilable
    #_private
    (§ field- #_"ProgressCallback" (§ name callback))
    #_nilable
    #_private
    (§ field- #_"Executor" (§ name progressCallbackExecutor))

    ;;;
     ; Sets the given callback for receiving progress values, which will run on the user thread.
     ; See {@link org.bitcoinj.utils.Threading} for details.  If the broadcast has already started then the callback will
     ; be invoked immediately with the current progress.
     ;;
    #_public
    (§ method #_"void" (§ fn setProgressCallback) [#_"ProgressCallback" (§ name callback)])
    (§ block
        (setProgressCallback callback, Threading/USER_THREAD)
        nil
    )

    ;;;
     ; Sets the given callback for receiving progress values, which will run on the given executor.  If the executor
     ; is null, then the callback will run on a network thread and may be invoked multiple times in parallel.  You
     ; probably want to provide your UI thread or Threading.USER_THREAD for the second parameter.  If the broadcast
     ; has already started, then the callback will be invoked immediately with the current progress.
     ;;
    #_public
    (§ method #_"void" (§ fn setProgressCallback) [#_"ProgressCallback" (§ name callback), #_nilable #_"Executor" (§ name executor)])
    (§ block
        (§ var #_"boolean" (§ name shouldInvoke))
        (§ var #_"int" (§ name num))
        (§ var #_"boolean" (§ name mined))
        (§ sync this)
        (§ block
            (§ ass (§ name (.. this callback)) callback)
            (§ ass (§ name (.. this progressCallbackExecutor)) executor)
            (§ ass (§ name num) (.. this numSeemPeers))
            (§ ass (§ name mined) (.. this mined))
            (§ ass (§ name shouldInvoke) (< 0 numWaitingFor))
        )
        (§ if shouldInvoke)
        (§ block
            (invokeProgressCallback num, mined)
        )
        nil
    )
)

#_(ns org.bitcoinj.core #_"TransactionBroadcaster")

;;;
 ; A general interface which declares the ability to broadcast transactions.
 ; This is implemented by {@link org.bitcoinj.core.PeerGroup}.
 ;;
#_public
(§ interface #_"TransactionBroadcaster"
    ;;; Broadcast the given transaction on the network. ;;
    (§ method #_"TransactionBroadcast" (§ fn broadcastTransaction) [#_"Transaction" (§ name tx)])
)

#_(ns org.bitcoinj.core #_"TransactionConfidence"
    (:import [java.util *]
             [java.util.concurrent *])
    (:import [com.google.common.base Preconditions]
             [com.google.common.collect *]
             [com.google.common.util.concurrent *])
   (:require [org.bitcoinj.utils *]
             [org.bitcoinj.wallet Wallet]))

;; TODO: Modify the getDepthInBlocks method to require the chain height to be specified, in preparation for ceasing to touch every tx on every block.

;;;
 ; <p>A TransactionConfidence object tracks data you can use to make a confidence decision about a transaction.
 ; It also contains some pre-canned rules for common scenarios: if you aren't really sure what level of confidence
 ; you need, these should prove useful.  You can get a confidence object using {@link Transaction#getConfidence()}.
 ; They cannot be constructed directly.</p>
 ;
 ; <p>Confidence in a transaction can come in multiple ways:</p>
 ;
 ; <ul>
 ; <li>Because you created it yourself and only you have the necessary keys.</li>
 ; <li>Receiving it from a fully validating peer you know is trustworthy, for instance, because it's run by yourself.</li>
 ; <li>Receiving it from a peer on the network you randomly chose.  If your network connection is not being
 ;     intercepted, you have a pretty good chance of connecting to a node that is following the rules.</li>
 ; <li>Receiving it from multiple peers on the network.  If your network connection is not being intercepted,
 ;     hearing about a transaction from multiple peers indicates the network has accepted the transaction and
 ;     thus miners likely have too (miners have the final say in whether a transaction becomes valid or not).</li>
 ; <li>Seeing the transaction appear appear in a block on the main chain.  Your confidence increases as the transaction
 ;     becomes further buried under work.  Work can be measured either in blocks (roughly, units of time), or
 ;     amount of work done.</li>
 ; </ul>
 ;
 ; <p>Alternatively, you may know that the transaction is "dead", that is, one or more of its inputs have
 ; been double spent and will never confirm unless there is another re-org.</p>
 ;
 ; <p>TransactionConfidence is updated via the {@link org.bitcoinj.core.TransactionConfidence#incrementDepthInBlocks()}
 ; method to ensure the block depth is up to date.</p>
 ; To make a copy that won't be changed, use {@link org.bitcoinj.core.TransactionConfidence#duplicate()}.
 ;;
#_public
(§ class #_"TransactionConfidence"
    ;;;
     ; The peers that have announced the transaction to us.  Network nodes don't have stable identities, so we use
     ; IP address as an approximation.  It's obviously vulnerable to being gamed if we allow arbitrary people to connect
     ; to us, so only peers we explicitly connected to should go here.
     ;;
    #_private
    (§ field- #_"CopyOnWriteArrayList<PeerAddress>" (§ name broadcastBy))
    ;;; The time the transaction was last announced to us. ;;
    #_private
    (§ field- #_"Date" (§ name lastBroadcastedAt))
    ;;; The Transaction that this confidence object is associated with. ;;
    #_private
    (§ field- #_"Sha256Hash" (§ name hash))
    ;; Lazily created listeners array.
    #_private
    (§ field- #_"CopyOnWriteArrayList<ListenerRegistration<Listener>>" (§ name listeners))

    ;; The depth of the transaction on the best chain in blocks.  An unconfirmed block has depth 0.
    #_private
    (§ field- #_"int" (§ name depth))

    ;;; Describes the state of the transaction in general terms.  Properties can be read to learn specifics. ;;
    #_public
    (§ enum #_"ConfidenceType"
        ;;; If BUILDING, then the transaction is included in the best chain and your confidence in it is increasing. ;;
        (§ item (BUILDING 1))

        ;;;
         ; If PENDING, then the transaction is unconfirmed and should be included shortly, as long as it is being
         ; announced and is considered valid by the network.  A pending transaction will be announced if the containing
         ; wallet has been attached to a live {@link PeerGroup} using {@link PeerGroup#addWallet(Wallet)}.
         ; You can estimate how likely the transaction is to be included by connecting to a bunch of nodes then measuring
         ; how many announce it, using {@link org.bitcoinj.core.TransactionConfidence#numBroadcastPeers()}.
         ; Or if you saw it from a trusted peer, you can assume it's valid and will get mined sooner or later as well.
         ;;
        (§ item (PENDING 2))

        ;;;
         ; If DEAD, then it means the transaction won't confirm unless there is another re-org,
         ; because some other transaction is spending one of its inputs.  Such transactions should be alerted to the user
         ; so they can take action, e.g. suspending shipment of goods if they are a merchant.
         ; It can also mean that a coinbase transaction has been made dead from it being moved onto a side chain.
         ;;
        (§ item (DEAD 4))

        ;;;
         ; If IN_CONFLICT, then it means there is another transaction (or several other transactions) spending one
         ; (or several) of its inputs but nor this transaction nor the other/s transaction/s are included in the best chain.
         ; The other/s transaction/s should be IN_CONFLICT too.
         ; IN_CONFLICT can be thought as an intermediary state between a. PENDING and BUILDING or b. PENDING and DEAD.
         ; Another common name for this situation is "double spend".
         ;;
        (§ item (IN_CONFLICT 5))

        ;;;
         ; If a transaction hasn't been broadcast yet, or there's no record of it, its confidence is UNKNOWN.
         ;;
        (§ item (UNKNOWN 0))

        #_private
        (§ field- #_"int" (§ name value))

        (§ constructor #_"ConfidenceType" [#_"int" (§ name value)])
        (§ block
            (§ ass (§ name (.. this value)) value)
            this
        )

        #_public
        (§ method #_"int" (§ fn getValue) [])
        (§ block
            value
        )
    )

    #_private
    (§ field- #_"ConfidenceType" (§ name confidenceType) ConfidenceType/UNKNOWN)
    #_private
    (§ field- #_"int" (§ name appearedAtChainHeight) -1)
    ;; The transaction that double spent this one, if any.
    #_private
    (§ field- #_"Transaction" (§ name overridingTransaction))

    ;;;
     ; Information about where the transaction was first seen (network, sent direct from peer, created by ourselves).
     ; Useful for risk analyzing pending transactions.  Probably not that useful after a tx is included in the chain,
     ; unless re-org double spends start happening frequently.
     ;;
    #_public
    (§ enum #_"Source"
        ;;; We don't know where the transaction came from. ;;
        (§ item UNKNOWN)
        ;;; We got this transaction from a network peer. ;;
        (§ item NETWORK)
        ;;; This transaction was created by our own wallet, so we know it's not a double spend. ;;
        (§ item SELF)
    )
    #_private
    (§ field- #_"Source" (§ name source) Source/UNKNOWN)

    #_public
    (§ constructor #_"TransactionConfidence" [#_"Sha256Hash" (§ name hash)])
    (§ block
        ;; Assume a default number of peers for our set.
        (§ ass (§ name broadcastBy) (§ new #_"CopyOnWriteArrayList<>"))
        (§ ass (§ name listeners) (§ new #_"CopyOnWriteArrayList<>"))
        (§ ass (§ name (.. this hash)) hash)
        this
    )

    ;;;
     ; <p>A confidence listener is informed when the level of {@link TransactionConfidence} is updated by something, like
     ; for example a {@link Wallet}.  You can add listeners to update your user interface or manage your order tracking
     ; system when confidence levels pass a certain threshold.  <b>Note that confidence can go down as well as up.</b>
     ; For example, this can happen if somebody is doing a double-spend attack against you.  Whilst it's unlikely, your
     ; code should be able to handle that in order to be correct.</p>
     ;
     ; <p>During listener execution, it's safe to remove the current listener but not others.</p>
     ;;
    #_public
    (§ interface #_"Listener"
        ;;; An enum that describes why a transaction confidence listener is being invoked (i.e. the class of change). ;;
        (§ enum #_"ChangeReason"
            ;;;
             ; Occurs when the type returned by {@link org.bitcoinj.core.TransactionConfidence#getConfidenceType()}
             ; has changed.  For example, if a PENDING transaction changes to BUILDING or DEAD, then this reason will
             ; be given.  It's a high level summary.
             ;;
            (§ item TYPE)

            ;;;
             ; Occurs when a transaction that is in the best known block chain gets buried by another block.  If you're
             ; waiting for a certain number of confirmations, this is the reason to watch out for.
             ;;
            (§ item DEPTH)

            ;;;
             ; Occurs when a pending transaction (not in the chain) was announced by another connected peers.  By
             ; watching the number of peers that announced a transaction go up, you can see whether it's being
             ; accepted by the network or not.  If all your peers announce, it's a pretty good bet the transaction
             ; is considered relayable and has thus reached the miners.
             ;;
            (§ item SEEN_PEERS)
        )

        (§ method #_"void" (§ fn onConfidenceChanged) [#_"TransactionConfidence" (§ name confidence), #_"ChangeReason" (§ name reason)])
    )

    ;; This is used to ensure that confidence objects which aren't referenced from anywhere but which have an event
    ;; listener set on them don't become eligible for garbage collection.  Otherwise the TxConfidenceTable, which only
    ;; has weak references to these objects, would not be enough to keep the event listeners working as transactions
    ;; propagate around the network - it cannot know directly if the API user is interested in the object, so it uses
    ;; heap reachability as a proxy for interest.
    ;;
    ;; We add ourselves to this set when a listener is added and remove ourselves when the listener list is empty.
    #_private
    #_static
    (§ def- #_"Set<TransactionConfidence>" (§ name pinnedConfidenceObjects) (Collections/synchronizedSet (§ new #_"HashSet<TransactionConfidence>")))

    ;;;
     ; <p>Adds an event listener that will be run when this confidence object is updated.  The listener will be locked
     ; and is likely to be invoked on a peer thread.</p>
     ;
     ; <p>Note that this is NOT called when every block arrives.  Instead it is called when the transaction
     ; transitions between confidence states, i.e. from not being seen in the chain to being seen (not necessarily in
     ; the best chain).  If you want to know when the transaction gets buried under another block, consider using
     ; a future from {@link #getDepthFuture(int)}.</p>
     ;;
    #_public
    (§ method #_"void" (§ fn addEventListener) [#_"Executor" (§ name executor), #_"Listener" (§ name listener)])
    (§ block
        (Preconditions/checkNotNull listener)

        (.. listeners (addIfAbsent (§ new #_"ListenerRegistration<>" listener, executor)))
        (.. pinnedConfidenceObjects (add this))
        nil
    )

    ;;;
     ; <p>Adds an event listener that will be run when this confidence object is updated.  The listener will be locked
     ; and is likely to be invoked on a peer thread.</p>
     ;
     ; <p>Note that this is NOT called when every block arrives.  Instead it is called when the transaction
     ; transitions between confidence states, i.e. from not being seen in the chain to being seen (not necessarily in
     ; the best chain).  If you want to know when the transaction gets buried under another block, implement a
     ; {@link BlockChainListener}, attach it to a {@link BlockChain} and then use the getters on the
     ; confidence object to determine the new depth.</p>
     ;;
    #_public
    (§ method #_"void" (§ fn addEventListener) [#_"Listener" (§ name listener)])
    (§ block
        (addEventListener Threading/USER_THREAD, listener)
        nil
    )

    #_public
    (§ method #_"boolean" (§ fn removeEventListener) [#_"Listener" (§ name listener)])
    (§ block
        (Preconditions/checkNotNull listener)

        (§ var #_"boolean" (§ name removed) (ListenerRegistration/removeFromList listener, listeners))
        (§ if (.. listeners (isEmpty)))
        (§ block
            (.. pinnedConfidenceObjects (remove this))
        )
        removed
    )

    ;;;
     ; Returns the chain height at which the transaction appeared if confidence type is BUILDING.
     ; @throws IllegalStateException if the confidence type is not BUILDING.
     ;;
    #_public
    #_synchronized
    (§ method #_"int" (§ fn getAppearedAtChainHeight) [])
    (§ block
        (§ if (!= (getConfidenceType) ConfidenceType/BUILDING))
        (§ block
            (§ throw (§ new #_"IllegalStateException" (§ str "Confidence type is " + (getConfidenceType) + ", not BUILDING")))
        )
        appearedAtChainHeight
    )

    ;;;
     ; The chain height at which the transaction appeared, if it has been seen in the best chain.
     ; Automatically sets the current type to {@link ConfidenceType#BUILDING} and depth to one.
     ;;
    #_public
    #_synchronized
    (§ method #_"void" (§ fn setAppearedAtChainHeight) [#_"int" (§ name appearedAtChainHeight)])
    (§ block
        (§ if (< appearedAtChainHeight 0))
        (§ block
            (§ throw (§ new #_"IllegalArgumentException" "appearedAtChainHeight out of range"))
        )

        (§ ass (§ name (.. this appearedAtChainHeight)) appearedAtChainHeight)
        (§ ass (§ name (.. this depth)) 1)
        (setConfidenceType ConfidenceType/BUILDING)
        nil
    )

    ;;;
     ; Returns a general statement of the level of confidence you can have in this transaction.
     ;;
    #_public
    #_synchronized
    (§ method #_"ConfidenceType" (§ fn getConfidenceType) [])
    (§ block
        confidenceType
    )

    ;;;
     ; Called by other objects in the system, like a {@link Wallet}, when new information about the confidence
     ; of a transaction becomes available.
     ;;
    #_public
    #_synchronized
    (§ method #_"void" (§ fn setConfidenceType) [#_"ConfidenceType" (§ name confidenceType)])
    (§ block
        (§ if (§ expr confidenceType == (.. this confidenceType)))
        (§ block
            (§ return nil)
        )

        (§ ass (§ name (.. this confidenceType)) confidenceType)
        (§ if (§ expr confidenceType != ConfidenceType/DEAD))
        (§ block
            (§ ass (§ name overridingTransaction) nil)
        )
        (§ if (§ expr confidenceType == ConfidenceType/PENDING || confidenceType == ConfidenceType/IN_CONFLICT))
        (§ block
            (§ ass (§ name depth) 0)
            (§ ass (§ name appearedAtChainHeight) -1)
        )
        nil
    )

    ;;;
     ; Called by a {@link Peer} when a transaction is pending and announced by a peer.  The more peers announce
     ; the transaction, the more peers have validated it (assuming your internet connection is not being intercepted).
     ; If confidence is currently unknown, sets it to {@link ConfidenceType#PENDING}.  Does not run listeners.
     ;
     ; @param address IP address of the peer, used as a proxy for identity.
     ; @return true if marked, false if this address was already seen.
     ;;
    #_public
    (§ method #_"boolean" (§ fn markBroadcastBy) [#_"PeerAddress" (§ name address)])
    (§ block
        (§ ass (§ name lastBroadcastedAt) (Utils/now))
        (§ if (§ not (.. broadcastBy (addIfAbsent address))))
        (§ block
            (§ return false) ;; Duplicate.
        )

        (§ sync this)
        (§ block
            (§ if (== (getConfidenceType) ConfidenceType/UNKNOWN))
            (§ block
                (§ ass (§ name (.. this confidenceType)) ConfidenceType/PENDING)
            )
        )
        true
    )

    ;;;
     ; Returns how many peers have been passed to {@link TransactionConfidence#markBroadcastBy}.
     ;;
    #_public
    (§ method #_"int" (§ fn numBroadcastPeers) [])
    (§ block
        (.. broadcastBy (size))
    )

    ;;;
     ; Returns a snapshot of {@link PeerAddress}es that announced the transaction.
     ;;
    #_public
    (§ method #_"Set<PeerAddress>" (§ fn getBroadcastBy) [])
    (§ block
        (§ var #_"ListIterator<PeerAddress>" (§ name iterator) (.. broadcastBy (listIterator)))
        (Sets/newHashSet iterator)
    )

    ;;; Returns true if the given address has been seen via markBroadcastBy(). ;;
    #_public
    (§ method #_"boolean" (§ fn wasBroadcastBy) [#_"PeerAddress" (§ name address)])
    (§ block
        (.. broadcastBy (contains address))
    )

    ;;; Return the time the transaction was last announced to us. ;;
    #_public
    (§ method #_"Date" (§ fn getLastBroadcastedAt) [])
    (§ block
        lastBroadcastedAt
    )

    ;;; Set the time the transaction was last announced to us. ;;
    #_public
    (§ method #_"void" (§ fn setLastBroadcastedAt) [#_"Date" (§ name lastBroadcastedAt)])
    (§ block
        (§ ass (§ name (.. this lastBroadcastedAt)) lastBroadcastedAt)
        nil
    )

    #_override
    #_public
    #_synchronized
    (§ method #_"String" (§ fn toString) [])
    (§ block
        (§ var #_"StringBuilder" (§ name sb) (§ new #_"StringBuilder"))
        (§ var #_"int" (§ name peers) (numBroadcastPeers))
        (§ if (< 0 peers))
        (§ block
            (.. sb (append "Seen by ") (append peers) (append (if (< 1 peers) " peers" " peer")))
            (§ if (some? lastBroadcastedAt))
            (§ block
                (.. sb (append " (most recently: ") (append (Utils/dateTimeFormat lastBroadcastedAt)) (append ")"))
            )
            (.. sb (append ". "))
        )
        (§ switch (getConfidenceType))
        (§ block
            (§ case UNKNOWN)
            (§ block
                (.. sb (append "Unknown confidence level."))
                (§ break )
            )
            (§ case DEAD)
            (§ block
                (.. sb (append "Dead: overridden by double spend and will not confirm."))
                (§ break )
            )
            (§ case PENDING)
            (§ block
                (.. sb (append "Pending/unconfirmed."))
                (§ break )
            )
            (§ case IN_CONFLICT)
            (§ block
                (.. sb (append "In conflict."))
                (§ break )
            )
            (§ case BUILDING)
            (§ block
                (.. sb (append (String/format Locale/US, "Appeared in best chain at height %d, depth %d.", (getAppearedAtChainHeight), (getDepthInBlocks))))
                (§ break )
            )
        )
        (§ if (§ expr source != Source/UNKNOWN))
        (§ block
            (.. sb (append " Source: ") (append source))
        )
        (.. sb (toString))
    )

    ;;;
     ; Called by the wallet when the tx appears on the best chain and a new block is added to the top.
     ; Updates the internal counter that tracks how deeply buried the block is.
     ;
     ; @return the new depth
     ;;
    #_public
    #_synchronized
    (§ method #_"int" (§ fn incrementDepthInBlocks) [])
    (§ block
        (§ ass (§ name (.. this depth)) (+ (.. this depth) 1))
        (.. this depth)
    )

    ;;;
     ; <p>Depth in the chain is an approximation of how much time has elapsed since the transaction has been confirmed.
     ; On average there is supposed to be a new block every 10 minutes, but the actual rate may vary.  Bitcoin Core
     ; considers a transaction impractical to reverse after 6 blocks, but as of EOY 2011 network
     ; security is high enough that often only one block is considered enough even for high value transactions.
     ; For low value transactions like songs, or other cheap items, no blocks at all may be necessary.</p>
     ;
     ; <p>If the transaction appears in the top block, the depth is one.  If it's anything else (pending, dead, unknown)
     ; the depth is zero.</p>
     ;;
    #_public
    #_synchronized
    (§ method #_"int" (§ fn getDepthInBlocks) [])
    (§ block
        depth
    )

    ;;
     ; Set the depth in blocks.  Having one block confirmation is a depth of one.
     ;;
    #_public
    #_synchronized
    (§ method #_"void" (§ fn setDepthInBlocks) [#_"int" (§ name depth)])
    (§ block
        (§ ass (§ name (.. this depth)) depth)
        nil
    )

    ;;;
     ; Erases the set of broadcast/seen peers.  This cannot be called whilst the confidence is PENDING.  It is useful
     ; for saving memory and wallet space once a tx is buried so deep it doesn't seem likely to go pending again.
     ;;
    #_public
    (§ method #_"void" (§ fn clearBroadcastBy) [])
    (§ block
        (Preconditions/checkState (!= (getConfidenceType) ConfidenceType/PENDING))
        (.. broadcastBy (clear))
        (§ ass (§ name lastBroadcastedAt) nil)
        nil
    )

    ;;;
     ; If this transaction has been overridden by a double spend (is dead), this call returns the overriding transaction.
     ; Note that this call <b>can return null</b> if you have migrated an old wallet, as pre-Jan 2012 wallets did not
     ; store this information.
     ;
     ; @return the transaction that double spent this one.
     ; @throws IllegalStateException if confidence type is not DEAD.
     ;;
    #_public
    #_synchronized
    (§ method #_"Transaction" (§ fn getOverridingTransaction) [])
    (§ block
        (§ if (!= (getConfidenceType) ConfidenceType/DEAD))
        (§ block
            (§ throw (§ new #_"IllegalStateException" (§ str "Confidence type is " + (getConfidenceType) + ", not DEAD")))
        )
        overridingTransaction
    )

    ;;;
     ; Called when the transaction becomes newly dead, that is, we learn that one of its inputs has already been spent
     ; in such a way that the double-spending transaction takes precedence over this one.  It will not become valid now
     ; unless there is a re-org.  Automatically sets the confidence type to DEAD.  The overriding transaction may not
     ; directly double spend this one, but could also have double spent a dependency of this tx.
     ;;
    #_public
    #_synchronized
    (§ method #_"void" (§ fn setOverridingTransaction) [#_nilable #_"Transaction" (§ name overridingTransaction)])
    (§ block
        (§ ass (§ name (.. this overridingTransaction)) overridingTransaction)
        (setConfidenceType ConfidenceType/DEAD)
        nil
    )

    ;;; Returns a copy of this object.  Event listeners are not duplicated. ;;
    #_public
    (§ method #_"TransactionConfidence" (§ fn duplicate) [])
    (§ block
        (§ var #_"TransactionConfidence" (§ name c) (§ new #_"TransactionConfidence" hash))
        (.. c broadcastBy (addAll broadcastBy))
        (§ ass (§ name (.. c lastBroadcastedAt)) lastBroadcastedAt)
        (§ sync this)
        (§ block
            (§ ass (§ name (.. c confidenceType)) confidenceType)
            (§ ass (§ name (.. c overridingTransaction)) overridingTransaction)
            (§ ass (§ name (.. c appearedAtChainHeight)) appearedAtChainHeight)
        )
        c
    )

    ;;;
     ; Call this after adjusting the confidence, for cases where listeners should be notified.  This has to be done
     ; explicitly rather than being done automatically because sometimes complex changes to transaction states can
     ; result in a series of confidence changes that are not really useful to see separately.  By invoking listeners
     ; explicitly, more precise control is available.  Note that this will run the listeners on the user code thread.
     ;;
    #_public
    (§ method #_"void" (§ fn queueListeners) [#_"Listener.ChangeReason" (§ name reason)])
    (§ block
        (§ for (§ var ListenerRegistration<Listener> registration) :for listeners)
        (§ block
            (.. registration executor (execute (§ new #_"Runnable")
            (§ anon
                #_override
                #_public
                (§ method #_"void" (§ fn run) [])
                (§ block
                    (.. registration listener (onConfidenceChanged (§ dhis TransactionConfidence), reason))
                    nil
                )
            )))
        )
        nil
    )

    ;;;
     ; The source of a transaction tries to identify where it came from originally.  For instance, did we download it
     ; from the peer to peer network, or make it ourselves, or receive it via Bluetooth, or import it from another app,
     ; and so on.  This information is useful for {@link org.bitcoinj.wallet.CoinSelector} implementations to risk analyze
     ; transactions and decide when to spend them.
     ;;
    #_public
    #_synchronized
    (§ method #_"Source" (§ fn getSource) [])
    (§ block
        source
    )

    ;;;
     ; The source of a transaction tries to identify where it came from originally.  For instance, did we download it
     ; from the peer to peer network, or make it ourselves, or receive it via Bluetooth, or import it from another app,
     ; and so on.  This information is useful for {@link org.bitcoinj.wallet.CoinSelector} implementations to risk analyze
     ; transactions and decide when to spend them.
     ;;
    #_public
    #_synchronized
    (§ method #_"void" (§ fn setSource) [#_"Source" (§ name source)])
    (§ block
        (§ ass (§ name (.. this source)) source)
        nil
    )

    ;;;
     ; Returns a future that completes when the transaction has been confirmed by "depth" blocks.  For instance setting
     ; depth to one will wait until it appears in a block on the best chain, and zero will wait until it has been seen
     ; on the network.
     ;;
    #_public
    #_synchronized
    (§ method #_"ListenableFuture<TransactionConfidence>" (§ fn getDepthFuture) [#_"int" (§ name depth), #_"Executor" (§ name executor)])
    (§ block
        (§ var #_"SettableFuture<TransactionConfidence>" (§ name result) (SettableFuture/create))
        (§ if (<= depth (getDepthInBlocks)))
        (§ block
            (.. result (set this))
        )

        (addEventListener executor, (§ new #_"Listener")
        (§ anon
            #_override
            #_public
            (§ method #_"void" (§ fn onConfidenceChanged) [#_"TransactionConfidence" (§ name confidence), #_"ChangeReason" (§ name reason)])
            (§ block
                (§ if (<= depth (getDepthInBlocks)))
                (§ block
                    (removeEventListener this)
                    (.. result (set confidence))
                )
                nil
            )
        ))
        result
    )

    #_public
    #_synchronized
    (§ method #_"ListenableFuture<TransactionConfidence>" (§ fn getDepthFuture) [#_"int" (§ name depth)])
    (§ block
        (getDepthFuture depth, Threading/USER_THREAD)
    )

    #_public
    (§ method #_"Sha256Hash" (§ fn getTransactionHash) [])
    (§ block
        hash
    )
)

#_(ns org.bitcoinj.core #_"TransactionInput"
    (:import [java.io IOException OutputStream]
             [java.lang.ref WeakReference]
             [java.util Arrays Map])
    (:import [com.google.common.base Joiner Objects Preconditions])
   (:require [org.bitcoinj.script Script ScriptError]
             [org.bitcoinj.wallet DefaultRiskAnalysis KeyBag RedeemData]))

;;;
 ; <p>A transfer of coins from one address to another creates a transaction in which the outputs
 ; can be claimed by the recipient in the input of another transaction.  You can imagine a
 ; transaction as being a module which is wired up to others, the inputs of one have to be wired
 ; to the outputs of another.  The exceptions are coinbase transactions, which create new coins.</p>
 ;
 ; <p>Instances of this class are not safe for use by multiple threads.</p>
 ;;
#_public
(§ class #_"TransactionInput" (§ extends #_"ChildMessage")
    ;;; Magic sequence number that indicates there is no sequence number. ;;
    #_public
    #_static
    (§ def #_"long" (§ name NO_SEQUENCE) 0xffffffff)
    #_private
    #_static
    (§ def- #_"byte[]" (§ name EMPTY_ARRAY) (§ new #_"byte[]" (§ count 0)))
    ;; Magic outpoint index that indicates the input is in fact unconnected.
    #_private
    #_static
    (§ def- #_"long" (§ name UNCONNECTED) 0xffffffff)

    ;; Allows for altering transactions after they were broadcast.  Values below NO_SEQUENCE-1 mean it can be altered.
    #_private
    (§ field- #_"long" (§ name sequence))
    ;; Data needed to connect to the output of the transaction we're gathering coins from.
    #_private
    (§ field- #_"TransactionOutPoint" (§ name outpoint))
    ;; The "script bytes" might not actually be a script.  In coinbase transactions where new coins are minted there
    ;; is no input transaction, so instead the scriptBytes contains some extra stuff (like a rollover nonce) that we
    ;; don't care about much.  The bytes are turned into a Script object (cached below) on demand via a getter.
    #_private
    (§ field- #_"byte[]" (§ name scriptBytes))
    ;; The Script object obtained from parsing scriptBytes.  Only filled in on demand and if the transaction is not
    ;; coinbase.
    #_private
    (§ field- #_"WeakReference<Script>" (§ name scriptSig))
    ;;; Value of the output connected to the input, if known.  This field does not participate in equals()/hashCode(). ;;
    #_nilable
    #_private
    (§ field- #_"Coin" (§ name value))

    ;;;
     ; Creates an input that connects to nothing - used only in creation of coinbase transactions.
     ;;
    #_public
    (§ constructor #_"TransactionInput" [#_"NetworkParameters" (§ name params), #_nilable #_"Transaction" (§ name parentTransaction), #_"byte[]" (§ name scriptBytes)])
    (§ block
        (§ this params, parentTransaction, scriptBytes, (§ new #_"TransactionOutPoint" params, UNCONNECTED, (§ cast #_"Transaction" nil)))
        this
    )

    #_public
    (§ constructor #_"TransactionInput" [#_"NetworkParameters" (§ name params), #_nilable #_"Transaction" (§ name parentTransaction), #_"byte[]" (§ name scriptBytes), #_"TransactionOutPoint" (§ name outpoint)])
    (§ block
        (§ this params, parentTransaction, scriptBytes, outpoint, nil)
        this
    )

    #_public
    (§ constructor #_"TransactionInput" [#_"NetworkParameters" (§ name params), #_nilable #_"Transaction" (§ name parentTransaction), #_"byte[]" (§ name scriptBytes), #_"TransactionOutPoint" (§ name outpoint), #_nilable #_"Coin" (§ name value)])
    (§ block
        (§ super params)

        (§ ass (§ name (.. this scriptBytes)) scriptBytes)
        (§ ass (§ name (.. this outpoint)) outpoint)
        (§ ass (§ name (.. this sequence)) NO_SEQUENCE)
        (§ ass (§ name (.. this value)) value)
        (setParent parentTransaction)
        (§ ass (§ name length) (+ 40 (if (some? scriptBytes) (+ (VarInt/sizeOf (.. scriptBytes length)) (.. scriptBytes length)) 1)))
        this
    )

    ;;;
     ; Creates an UNSIGNED input that links to the given output.
     ;;
    (§ constructor #_"TransactionInput" [#_"NetworkParameters" (§ name params), #_"Transaction" (§ name parentTransaction), #_"TransactionOutput" (§ name output)])
    (§ block
        (§ super params)

        (§ var #_"long" (§ name outputIndex) (.. output (getIndex)))
        (§ if (§ expr (.. output (getParentTransaction)) != nil ))
        (§ block
            (§ ass (§ name outpoint) (§ new #_"TransactionOutPoint" params, outputIndex, (.. output (getParentTransaction))))
        )
        (§ else )
        (§ block
            (§ ass (§ name outpoint) (§ new #_"TransactionOutPoint" params, output))
        )
        (§ ass (§ name scriptBytes) EMPTY_ARRAY)
        (§ ass (§ name sequence) NO_SEQUENCE)
        (setParent parentTransaction)
        (§ ass (§ name (.. this value)) (.. output (getValue)))
        (§ ass (§ name length) 41)
        this
    )

    ;;;
     ; Deserializes an input message.  This is usually part of a transaction message.
     ;;
    #_public
    (§ constructor #_"TransactionInput" [#_"NetworkParameters" (§ name params), #_nilable #_"Transaction" (§ name parentTransaction), #_"byte[]" (§ name payload), #_"int" (§ name offset)])
        (§ throws #_"ProtocolException")
    (§ block
        (§ super params, payload, offset)

        (setParent parentTransaction)
        (§ ass (§ name (.. this value)) nil)
        this
    )

    ;;;
     ; Deserializes an input message.  This is usually part of a transaction message.
     ; @param params NetworkParameters object.
     ; @param payload Bitcoin protocol formatted byte array containing message content.
     ; @param offset The location of the first payload byte within the array.
     ; @param serializer The serializer to use for this message.
     ; @throws ProtocolException
     ;;
    #_public
    (§ constructor #_"TransactionInput" [#_"NetworkParameters" (§ name params), #_"Transaction" (§ name parentTransaction), #_"byte[]" (§ name payload), #_"int" (§ name offset), #_"MessageSerializer" (§ name serializer)])
        (§ throws #_"ProtocolException")
    (§ block
        (§ super params, payload, offset, parentTransaction, serializer, UNKNOWN_LENGTH)

        (§ ass (§ name (.. this value)) nil)
        this
    )

    #_override
    #_protected
    (§ method #_"void" (§ fn parse) [])
        (§ throws #_"ProtocolException")
    (§ block
        (§ ass (§ name outpoint) (§ new #_"TransactionOutPoint" params, payload, cursor, this, serializer))
        (§ ass (§ name cursor) (§ expr cursor + (.. outpoint (getMessageSize))))
        (§ var #_"int" (§ name scriptLen) (§ cast #_"int" (readVarInt)))
        (§ ass (§ name length) (§ expr cursor - offset + scriptLen + 4))
        (§ ass (§ name scriptBytes) (readBytes scriptLen))
        (§ ass (§ name sequence) (readUint32))
        nil
    )

    #_override
    #_protected
    (§ method #_"void" (§ fn bitcoinSerializeToStream) [#_"OutputStream" (§ name stream)])
        (§ throws #_"IOException")
    (§ block
        (.. outpoint (bitcoinSerialize stream))
        (.. stream (write (.. (§ new #_"VarInt" (.. scriptBytes length)) (encode))))
        (.. stream (write scriptBytes))
        (Utils/uint32ToByteStreamLE sequence, stream)
        nil
    )

    ;;;
     ; Coinbase transactions have special inputs with hashes of zero.  If this is such an input, returns true.
     ;;
    #_public
    (§ method #_"boolean" (§ fn isCoinBase) [])
    (§ block
        (§ expr (.. outpoint (getHash) (equals Sha256Hash/ZERO_HASH)) && (& (.. outpoint (getIndex)) 0xffffffff) == 0xffffffff) ;; -1 but all is serialized to the wire as unsigned int.
    )

    ;;;
     ; Returns the script that is fed to the referenced output (scriptPubKey) script in order to satisfy it: usually
     ; contains signatures and maybe keys, but can contain arbitrary data if the output script accepts it.
     ;;
    #_public
    (§ method #_"Script" (§ fn getScriptSig) [])
        (§ throws #_"ScriptException")
    (§ block
        ;; Transactions that generate new coins don't actually have a script.
        ;; Instead this parameter is overloaded to be something totally different.
        (§ var #_"Script" (§ name script) (when (some? scriptSig) (.. scriptSig (get))))
        (§ if (nil? script))
        (§ block
            (§ ass (§ name script) (§ new #_"Script" scriptBytes))
            (§ ass (§ name scriptSig) (§ new #_"WeakReference<>" script))
        )
        script
    )

    ;;; Set the given program as the scriptSig that is supposed to satisfy the connected output script. ;;
    #_public
    (§ method #_"void" (§ fn setScriptSig) [#_"Script" (§ name scriptSig)])
    (§ block
        (§ ass (§ name (.. this scriptSig)) (§ new #_"WeakReference<>" (Preconditions/checkNotNull scriptSig)))
        ;; TODO: This should all be cleaned up so we have a consistent internal representation.
        (setScriptBytes (.. scriptSig (getProgram)))
        nil
    )

    ;;;
     ; Convenience method that returns the from address of this input by parsing the scriptSig.  The concept of
     ; a "from address" is not well defined in Bitcoin and you should not assume that senders of a transaction can
     ; actually receive coins on the same address they used to sign (e.g. this is not true for shared wallets).
     ;;
    #_deprecated
    #_public
    (§ method #_"Address" (§ fn getFromAddress) [])
        (§ throws #_"ScriptException")
    (§ block
        (§ if (isCoinBase))
        (§ block
            (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_UNKNOWN_ERROR, "This is a coinbase transaction which generates new coins. It does not have a from address."))
        )

        (.. (getScriptSig) (getFromAddress params))
    )

    ;;;
     ; Sequence numbers allow participants in a multi-party transaction signing protocol to create new versions of the
     ; transaction independently of each other.  Newer versions of a transaction can replace an existing version that's
     ; in nodes memory pools if the existing version is time locked.  See the Contracts page on the Bitcoin wiki for
     ; examples of how you can use this feature to build contract protocols.
     ;;
    #_public
    (§ method #_"long" (§ fn getSequenceNumber) [])
    (§ block
        sequence
    )

    ;;;
     ; Sequence numbers allow participants in a multi-party transaction signing protocol to create new versions of the
     ; transaction independently of each other.  Newer versions of a transaction can replace an existing version that's
     ; in nodes memory pools if the existing version is time locked.  See the Contracts page on the Bitcoin wiki for
     ; examples of how you can use this feature to build contract protocols.
     ;;
    #_public
    (§ method #_"void" (§ fn setSequenceNumber) [#_"long" (§ name sequence)])
    (§ block
        (unCache)
        (§ ass (§ name (.. this sequence)) sequence)
        nil
    )

    ;;;
     ; @return The previous output transaction reference, as an OutPoint structure.  This contains the
     ; data needed to connect to the output of the transaction we're gathering coins from.
     ;;
    #_public
    (§ method #_"TransactionOutPoint" (§ fn getOutpoint) [])
    (§ block
        outpoint
    )

    ;;;
     ; The "script bytes" might not actually be a script.  In coinbase transactions where new coins are minted there
     ; is no input transaction, so instead the scriptBytes contains some extra stuff (like a rollover nonce) that we
     ; don't care about much.  The bytes are turned into a Script object (cached below) on demand via a getter.
     ; @return the scriptBytes
     ;;
    #_public
    (§ method #_"byte[]" (§ fn getScriptBytes) [])
    (§ block
        scriptBytes
    )

    ;;; Clear input scripts, e.g. in preparation for signing. ;;
    #_public
    (§ method #_"void" (§ fn clearScriptBytes) [])
    (§ block
        (setScriptBytes TransactionInput/EMPTY_ARRAY)
        nil
    )

    ;;;
     ; @param scriptBytes The scriptBytes to set.
     ;;
    (§ method #_"void" (§ fn setScriptBytes) [#_"byte[]" (§ name scriptBytes)])
    (§ block
        (unCache)
        (§ ass (§ name (.. this scriptSig)) nil)
        (§ var #_"int" (§ name oldLength) length)
        (§ ass (§ name (.. this scriptBytes)) scriptBytes)
        ;; 40 = previous_outpoint (36) + sequence (4)
        (§ var #_"int" (§ name newLength) (+ 40 (if (some? scriptBytes) (+ (VarInt/sizeOf (.. scriptBytes length)) (.. scriptBytes length)) 1)))
        (adjustLength (- newLength oldLength))
        nil
    )

    ;;;
     ; @return the Transaction that owns this input.
     ;;
    #_public
    (§ method #_"Transaction" (§ fn getParentTransaction) [])
    (§ block
        (§ cast #_"Transaction" parent)
    )

    ;;;
     ; @return the value of the output connected to this input.
     ;;
    #_nilable
    #_public
    (§ method #_"Coin" (§ fn getValue) [])
    (§ block
        value
    )

    #_public
    (§ enum #_"ConnectionResult"
        (§ item NO_SUCH_TX)
        (§ item ALREADY_SPENT)
        (§ item SUCCESS)
    )

    ;; TODO: Clean all this up once TransactionOutPoint disappears.

    ;;;
     ; Locates the referenced output from the given pool of transactions.
     ;
     ; @return the TransactionOutput (or null) if the transaction's map doesn't contain the referenced tx.
     ;;
    #_nilable
    (§ method #_"TransactionOutput" (§ fn getConnectedOutput) [#_"Map<Sha256Hash, Transaction>" (§ name transactions)])
    (§ block
        (§ var #_"Transaction" (§ name tx) (.. transactions (get (.. outpoint (getHash)))))
        (when (some? tx) (.. tx (getOutputs) (get (§ cast #_"int" (.. outpoint (getIndex))))))
    )

    ;;;
     ; Alias for getOutpoint().getConnectedRedeemData(keyBag).
     ; @see TransactionOutPoint#getConnectedRedeemData(org.bitcoinj.wallet.KeyBag)
     ;;
    #_nilable
    #_public
    (§ method #_"RedeemData" (§ fn getConnectedRedeemData) [#_"KeyBag" (§ name keyBag)])
        (§ throws #_"ScriptException")
    (§ block
        (.. (getOutpoint) (getConnectedRedeemData keyBag))
    )

    #_public
    (§ enum #_"ConnectMode"
        (§ item DISCONNECT_ON_CONFLICT)
        (§ item ABORT_ON_CONFLICT)
    )

    ;;;
     ; Connects this input to the relevant output of the referenced transaction if it's in the given map.
     ; Connecting means updating the internal pointers and spent flags.  If the mode is to ABORT_ON_CONFLICT,
     ; then the spent output won't be changed, but the outpoint.fromTx pointer will still be updated.
     ;
     ; @param transactions Map of txhash->transaction.
     ; @param mode Whether to abort if there's a pre-existing connection or not.
     ; @return NO_SUCH_TX if the prevtx wasn't found, ALREADY_SPENT if there was a conflict, SUCCESS if not.
     ;;
    #_public
    (§ method #_"ConnectionResult" (§ fn connect) [#_"Map<Sha256Hash, Transaction>" (§ name transactions), #_"ConnectMode" (§ name mode)])
    (§ block
        (§ var #_"Transaction" (§ name tx) (.. transactions (get (.. outpoint (getHash)))))
        (if (some? tx) (connect tx, mode) TransactionInput/ConnectionResult/NO_SUCH_TX)
    )

    ;;;
     ; Connects this input to the relevant output of the referenced transaction.
     ; Connecting means updating the internal pointers and spent flags.  If the mode is to ABORT_ON_CONFLICT,
     ; then the spent output won't be changed, but the outpoint.fromTx pointer will still be updated.
     ;
     ; @param transaction The transaction to try.
     ; @param mode Whether to abort if there's a pre-existing connection or not.
     ; @return NO_SUCH_TX if transaction is not the prevtx, ALREADY_SPENT if there was a conflict, SUCCESS if not.
     ;;
    #_public
    (§ method #_"ConnectionResult" (§ fn connect) [#_"Transaction" (§ name transaction), #_"ConnectMode" (§ name mode)])
    (§ block
        (§ if (§ not (.. transaction (getHash) (equals (.. outpoint (getHash))))))
        (§ block
            (§ return ConnectionResult/NO_SUCH_TX)
        )

        (Preconditions/checkElementIndex (§ cast #_"int" (.. outpoint (getIndex))), (.. transaction (getOutputs) (size)), "Corrupt transaction")

        (§ var #_"TransactionOutput" (§ name out) (.. transaction (getOutput (§ cast #_"int" (.. outpoint (getIndex))))))
        (§ if (§ not (.. out (isAvailableForSpending))))
        (§ block
            (§ if (.. (getParentTransaction) (equals (.. outpoint fromTx))))
            (§ block
                ;; Already connected.
                (§ return ConnectionResult/SUCCESS)
            )
            (§ elseif (§ expr mode == ConnectMode/DISCONNECT_ON_CONFLICT))
            (§ block
                (.. out (markAsUnspent))
            )
            (§ elseif (§ expr mode == ConnectMode/ABORT_ON_CONFLICT))
            (§ block
                (§ ass (§ name (.. outpoint fromTx)) (.. out (getParentTransaction)))
                (§ return TransactionInput/ConnectionResult/ALREADY_SPENT)
            )
        )
        (connect out)
        TransactionInput/ConnectionResult/SUCCESS
    )

    ;;; Internal use only: connects this TransactionInput to the given output (updates pointers and spent flags). ;;
    #_public
    (§ method #_"void" (§ fn connect) [#_"TransactionOutput" (§ name out)])
    (§ block
        (§ ass (§ name (.. outpoint fromTx)) (.. out (getParentTransaction)))
        (.. out (markAsSpent this))
        (§ ass (§ name value) (.. out (getValue)))
        nil
    )

    ;;;
     ; If this input is connected, check the output is connected back to this input and release it if so, making
     ; it spendable once again.
     ;
     ; @return true if the disconnection took place, false if it was not connected.
     ;;
    #_public
    (§ method #_"boolean" (§ fn disconnect) [])
    (§ block
        (§ var #_"TransactionOutput" (§ name connectedOutput))
        (§ if (!= (.. outpoint fromTx) nil))
        (§ block
            ;; The outpoint is connected using a "standard" wallet, disconnect it.
            (§ ass (§ name connectedOutput) (.. outpoint fromTx (getOutput (§ cast #_"int" (.. outpoint (getIndex))))))
            (§ ass (§ name (.. outpoint fromTx)) nil)
        )
        (§ elseif (!= (.. outpoint connectedOutput) nil))
        (§ block
            ;; The outpoint is connected using a UTXO based wallet, disconnect it.
            (§ ass (§ name connectedOutput) (.. outpoint connectedOutput))
            (§ ass (§ name (.. outpoint connectedOutput)) nil)
        )
        (§ else )
        (§ block
            ;; The outpoint is not connected, do nothing.
            (§ return false)
        )

        (§ if (§ expr connectedOutput != nil && (.. connectedOutput (getSpentBy)) == this))
        (§ block
            ;; The outpoint was connected to an output, disconnect the output.
            (.. connectedOutput (markAsUnspent))
            (§ return true)
        )

        false
    )

    ;;;
     ; @return true if this transaction's sequence number is set (i.e. it may be a part of a time-locked transaction).
     ;;
    #_public
    (§ method #_"boolean" (§ fn hasSequence) [])
    (§ block
        (§ expr sequence != NO_SEQUENCE)
    )

    ;;;
     ; Returns whether this input will cause a transaction to opt into the
     ; <a href="https://github.com/bitcoin/bips/blob/master/bip-0125.mediawiki">full replace-by-fee</a> semantics.
     ;;
    #_public
    (§ method #_"boolean" (§ fn isOptInFullRBF) [])
    (§ block
        (§ expr sequence < NO_SEQUENCE - 1)
    )

    ;;;
     ; For a connected transaction, runs the script against the connected pubkey and verifies they are correct.
     ; @throws ScriptException if the script did not verify.
     ; @throws VerificationException if the outpoint doesn't match the given output.
     ;;
    #_public
    (§ method #_"void" (§ fn verify) [])
        (§ throws #_"VerificationException")
    (§ block
        (§ var #_"Transaction" (§ name fromTx) (.. (getOutpoint) fromTx))
        (§ var #_"long" (§ name spendingIndex) (.. (getOutpoint) (getIndex)))

        (Preconditions/checkNotNull fromTx, "Not connected")

        (§ var #_"TransactionOutput" (§ name output) (.. fromTx (getOutput (§ cast #_"int" spendingIndex))))
        (verify output)
        nil
    )

    ;;;
     ; Verifies that this input can spend the given output.  Note that this input must be a part of a transaction.
     ; Also note that the consistency of the outpoint will be checked, even if this input has not been connected.
     ;
     ; @param output The output that this input is supposed to spend.
     ; @throws ScriptException if the script doesn't verify.
     ; @throws VerificationException if the outpoint doesn't match the given output.
     ;;
    #_public
    (§ method #_"void" (§ fn verify) [#_"TransactionOutput" (§ name output)])
        (§ throws #_"VerificationException")
    (§ block
        (§ if (!= (.. output parent) nil))
        (§ block
            (§ if (§ not (.. (getOutpoint) (getHash) (equals (.. output (getParentTransaction) (getHash))))))
            (§ block
                (§ throw (§ new #_"VerificationException" "This input does not refer to the tx containing the output."))
            )
            (§ if (!= (.. (getOutpoint) (getIndex)) (.. output (getIndex))))
            (§ block
                (§ throw (§ new #_"VerificationException" "This input refers to a different output on the given tx."))
            )
        )
        (§ var #_"Script" (§ name pubKey) (.. output (getScriptPubKey)))
        (§ var #_"int" (§ name myIndex) (.. (getParentTransaction) (getInputs) (indexOf this)))
        (.. (getScriptSig) (correctlySpends (getParentTransaction), myIndex, pubKey))
        nil
    )

    ;;;
     ; Returns the connected output, assuming the input was connected with
     ; {@link TransactionInput#connect(TransactionOutput)} or variants at some point.
     ; If it wasn't connected, then this method returns null.
     ;;
    #_nilable
    #_public
    (§ method #_"TransactionOutput" (§ fn getConnectedOutput) [])
    (§ block
        (.. (getOutpoint) (getConnectedOutput))
    )

    ;;;
     ; Returns the connected transaction, assuming the input was connected with
     ; {@link TransactionInput#connect(TransactionOutput)} or variants at some point.
     ; If it wasn't connected, then this method returns null.
     ;;
    #_nilable
    #_public
    (§ method #_"Transaction" (§ fn getConnectedTransaction) [])
    (§ block
        (.. (getOutpoint) fromTx)
    )

    ;;; Returns a copy of the input detached from its containing transaction, if need be. ;;
    #_public
    (§ method #_"TransactionInput" (§ fn duplicateDetached) [])
    (§ block
        (§ new #_"TransactionInput" params, nil, (bitcoinSerialize), 0)
    )

    ;;;
     ; <p>Returns either RuleViolation.NONE if the input is standard, or which rule makes it non-standard if so.
     ; The "IsStandard" rules control whether the default Bitcoin Core client blocks relay of a tx / refuses to mine it,
     ; however, non-standard transactions can still be included in blocks and will be accepted as valid if so.</p>
     ;
     ; <p>This method simply calls <tt>DefaultRiskAnalysis.isInputStandard(this)</tt>.</p>
     ;;
    #_public
    (§ method #_"DefaultRiskAnalysis.RuleViolation" (§ fn isStandard) [])
    (§ block
        (DefaultRiskAnalysis/isInputStandard this)
    )

    #_override
    #_public
    (§ method #_"boolean" (§ fn equals) [#_"Object" (§ name o)])
    (§ block
        (§ if (§ expr this == o))
        (§ block
            (§ return true)
        )
        (§ if (§ expr o == nil || (getClass) != (.. o (getClass))))
        (§ block
            (§ return false)
        )
        (§ var #_"TransactionInput" (§ name other) (§ cast #_"TransactionInput" o))
        (§ expr sequence == (.. other sequence) && parent == (.. other parent) && (.. outpoint (equals (.. other outpoint))) && (Arrays/equals scriptBytes, (.. other scriptBytes)))
    )

    #_override
    #_public
    (§ method #_"int" (§ fn hashCode) [])
    (§ block
        (Objects/hashCode sequence, outpoint, (Arrays/hashCode scriptBytes))
    )

    ;;;
     ; Returns a human readable debug string.
     ;;
    #_override
    #_public
    (§ method #_"String" (§ fn toString) [])
    (§ block
        (§ try )
        (§ block
            (§ var #_"StringBuilder" (§ name sb) (§ new #_"StringBuilder" "TxIn"))
            (§ if (isCoinBase))
            (§ block
                (.. sb (append ": COINBASE"))
            )
            (§ else )
            (§ block
                (.. sb (append " for [") (append outpoint) (append "]: ") (append (getScriptSig)))
                (§ var #_"String" (§ name flags) (.. (Joiner/on ", ") (skipNulls) (join (when (hasSequence) (§ expr "sequence: " + (Long/toHexString sequence))), (when (isOptInFullRBF) "opts into full RBF"))))
                (§ if (§ not (.. flags (isEmpty))))
                (§ block
                    (.. sb (append " (") (append flags) (append ")"))
                )
            )
            (§ return (.. sb (toString)))
        )
        (§ catch #_"ScriptException" (§ name e))
        (§ block
            (§ throw (§ new #_"RuntimeException" e))
        )
    )
)

#_(ns org.bitcoinj.core #_"TransactionOutPoint"
    (:import [java.io *])
    (:import [com.google.common.base Objects Preconditions])
   (:require [org.bitcoinj.script *]
             [org.bitcoinj.wallet *]))

;;;
 ; <p>This message is a reference or pointer to an output of a different transaction.</p>
 ;
 ; <p>Instances of this class are not safe for use by multiple threads.</p>
 ;;
#_public
(§ class #_"TransactionOutPoint" (§ extends #_"ChildMessage")
    #_static
    (§ def #_"int" (§ name MESSAGE_LENGTH) 36)

    ;;; Hash of the transaction to which we refer. ;;
    #_private
    (§ field- #_"Sha256Hash" (§ name hash))
    ;;; Which output of that transaction we are talking about. ;;
    #_private
    (§ field- #_"long" (§ name index))

    ;; This is not part of bitcoin serialization.  It points to the connected transaction.
    (§ field #_"Transaction" (§ name fromTx))

    ;; The connected output.
    (§ field #_"TransactionOutput" (§ name connectedOutput))

    #_public
    (§ constructor #_"TransactionOutPoint" [#_"NetworkParameters" (§ name params), #_"long" (§ name index), #_nilable #_"Transaction" (§ name fromTx)])
    (§ block
        (§ super params)

        (§ ass (§ name (.. this index)) index)
        (§ if (some? fromTx))
        (§ block
            (§ ass (§ name (.. this hash)) (.. fromTx (getHash)))
            (§ ass (§ name (.. this fromTx)) fromTx)
        )
        (§ else )
        (§ block
            ;; This happens when constructing the genesis block.
            (§ ass (§ name hash) Sha256Hash/ZERO_HASH)
        )
        (§ ass (§ name length) MESSAGE_LENGTH)
        this
    )

    #_public
    (§ constructor #_"TransactionOutPoint" [#_"NetworkParameters" (§ name params), #_"long" (§ name index), #_"Sha256Hash" (§ name hash)])
    (§ block
        (§ super params)

        (§ ass (§ name (.. this index)) index)
        (§ ass (§ name (.. this hash)) hash)
        (§ ass (§ name length) MESSAGE_LENGTH)
        this
    )

    #_public
    (§ constructor #_"TransactionOutPoint" [#_"NetworkParameters" (§ name params), #_"TransactionOutput" (§ name connectedOutput)])
    (§ block
        (§ this params, (.. connectedOutput (getIndex)), (.. connectedOutput (getParentTransactionHash)))
        (§ ass (§ name (.. this connectedOutput)) connectedOutput)
        this
    )

    ;;;
     ; Deserializes the message.  This is usually part of a transaction message.
     ;;
    #_public
    (§ constructor #_"TransactionOutPoint" [#_"NetworkParameters" (§ name params), #_"byte[]" (§ name payload), #_"int" (§ name offset)])
        (§ throws #_"ProtocolException")
    (§ block
        (§ super params, payload, offset)
        this
    )

    ;;;
     ; Deserializes the message.  This is usually part of a transaction message.
     ; @param params NetworkParameters object.
     ; @param offset The location of the first payload byte within the array.
     ; @param serializer The serializer to use for this message.
     ; @throws ProtocolException
     ;;
    #_public
    (§ constructor #_"TransactionOutPoint" [#_"NetworkParameters" (§ name params), #_"byte[]" (§ name payload), #_"int" (§ name offset), #_"Message" (§ name parent), #_"MessageSerializer" (§ name serializer)])
        (§ throws #_"ProtocolException")
    (§ block
        (§ super params, payload, offset, parent, serializer, MESSAGE_LENGTH)
        this
    )

    #_override
    #_protected
    (§ method #_"void" (§ fn parse) [])
        (§ throws #_"ProtocolException")
    (§ block
        (§ ass (§ name length) MESSAGE_LENGTH)
        (§ ass (§ name hash) (readHash))
        (§ ass (§ name index) (readUint32))
        nil
    )

    #_override
    #_protected
    (§ method #_"void" (§ fn bitcoinSerializeToStream) [#_"OutputStream" (§ name stream)])
        (§ throws #_"IOException")
    (§ block
        (.. stream (write (.. hash (getReversedBytes))))
        (Utils/uint32ToByteStreamLE index, stream)
        nil
    )

    ;;;
     ; An outpoint is a part of a transaction input that points to the output of another transaction.  If we have both
     ; sides in memory, and they have been linked together, this returns a pointer to the connected output, or null
     ; if there is no such connection.
     ;;
    #_nilable
    #_public
    (§ method #_"TransactionOutput" (§ fn getConnectedOutput) [])
    (§ block
        (§ if (some? fromTx))
        (§ block
            (§ return (.. fromTx (getOutputs) (get (§ cast #_"int" index))))
        )
        (§ if (some? connectedOutput))
        (§ block
            (§ return connectedOutput)
        )
        nil
    )

    ;;;
     ; Returns the pubkey script from the connected output.
     ; @throws java.lang.NullPointerException if there is no connected output.
     ;;
    #_public
    (§ method #_"byte[]" (§ fn getConnectedPubKeyScript) [])
    (§ block
        (§ var #_"byte[]" (§ name result) (.. (Preconditions/checkNotNull (getConnectedOutput)) (getScriptBytes)))
        (Preconditions/checkState (§ expr 0 < (.. result length)))
        result
    )

    ;;;
     ; Returns the ECKey identified in the connected output, for either pay-to-address scripts or pay-to-key scripts.
     ; For P2SH scripts you can use {@link #getConnectedRedeemData(org.bitcoinj.wallet.KeyBag)} and then get the
     ; key from RedeemData.
     ; If the script form cannot be understood, throws ScriptException.
     ;
     ; @return an ECKey or null if the connected key cannot be found in the wallet.
     ;;
    #_nilable
    #_public
    (§ method #_"ECKey" (§ fn getConnectedKey) [#_"KeyBag" (§ name keyBag)])
        (§ throws #_"ScriptException")
    (§ block
        (§ var #_"TransactionOutput" (§ name connectedOutput) (getConnectedOutput))
        (Preconditions/checkNotNull connectedOutput, "Input is not connected so cannot retrieve key")
        (§ var #_"Script" (§ name connectedScript) (.. connectedOutput (getScriptPubKey)))

        (§ if (.. connectedScript (isSentToAddress)))
        (§ block
            (§ var #_"byte[]" (§ name addressBytes) (.. connectedScript (getPubKeyHash)))
            (§ return (.. keyBag (findKeyFromPubHash addressBytes)))
        )

        (§ if (.. connectedScript (isSentToRawPubKey)))
        (§ block
            (§ var #_"byte[]" (§ name pubkeyBytes) (.. connectedScript (getPubKey)))
            (§ return (.. keyBag (findKeyFromPubKey pubkeyBytes)))
        )

        (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_UNKNOWN_ERROR, (§ expr "Could not understand form of connected output script: " + connectedScript)))
    )

    ;;;
     ; Returns the RedeemData identified in the connected output, for either pay-to-address scripts, pay-to-key
     ; or P2SH scripts.
     ; If the script forms cannot be understood, throws ScriptException.
     ;
     ; @return a RedeemData or null if the connected data cannot be found in the wallet.
     ;;
    #_nilable
    #_public
    (§ method #_"RedeemData" (§ fn getConnectedRedeemData) [#_"KeyBag" (§ name keyBag)])
        (§ throws #_"ScriptException")
    (§ block
        (§ var #_"TransactionOutput" (§ name connectedOutput) (getConnectedOutput))
        (Preconditions/checkNotNull connectedOutput, "Input is not connected so cannot retrieve key")
        (§ var #_"Script" (§ name connectedScript) (.. connectedOutput (getScriptPubKey)))

        (§ if (.. connectedScript (isSentToAddress)))
        (§ block
            (§ var #_"byte[]" (§ name addressBytes) (.. connectedScript (getPubKeyHash)))
            (§ return (RedeemData/of (.. keyBag (findKeyFromPubHash addressBytes)), connectedScript))
        )

        (§ if (.. connectedScript (isSentToRawPubKey)))
        (§ block
            (§ var #_"byte[]" (§ name pubkeyBytes) (.. connectedScript (getPubKey)))
            (§ return (RedeemData/of (.. keyBag (findKeyFromPubKey pubkeyBytes)), connectedScript))
        )

        (§ if (.. connectedScript (isPayToScriptHash)))
        (§ block
            (§ var #_"byte[]" (§ name scriptHash) (.. connectedScript (getPubKeyHash)))
            (§ return (.. keyBag (findRedeemDataFromScriptHash scriptHash)))
        )

        (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_UNKNOWN_ERROR, (§ expr "Could not understand form of connected output script: " + connectedScript)))
    )

    #_override
    #_public
    (§ method #_"String" (§ fn toString) [])
    (§ block
        (§ expr hash + ":" + index)
    )

    ;;;
     ; Returns the hash of the transaction this outpoint references/spends/is connected to.
     ;;
    #_override
    #_public
    (§ method #_"Sha256Hash" (§ fn getHash) [])
    (§ block
        hash
    )

    (§ method #_"void" (§ fn setHash) [#_"Sha256Hash" (§ name hash)])
    (§ block
        (§ ass (§ name (.. this hash)) hash)
        nil
    )

    #_public
    (§ method #_"long" (§ fn getIndex) [])
    (§ block
        index
    )

    #_public
    (§ method #_"void" (§ fn setIndex) [#_"long" (§ name index)])
    (§ block
        (§ ass (§ name (.. this index)) index)
        nil
    )

    #_override
    #_public
    (§ method #_"boolean" (§ fn equals) [#_"Object" (§ name o)])
    (§ block
        (§ if (§ expr this == o))
        (§ block
            (§ return true)
        )
        (§ if (§ expr o == nil || (getClass) != (.. o (getClass))))
        (§ block
            (§ return false)
        )
        (§ var #_"TransactionOutPoint" (§ name other) (§ cast #_"TransactionOutPoint" o))
        (§ expr (getIndex) == (.. other (getIndex)) && (.. (getHash) (equals (.. other (getHash)))))
    )

    #_override
    #_public
    (§ method #_"int" (§ fn hashCode) [])
    (§ block
        (Objects/hashCode (getIndex), (getHash))
    )
)

#_(ns org.bitcoinj.core #_"TransactionOutput"
    (:import [java.io *]
             [java.util *])
    (:import [com.google.common.base Objects Preconditions]
             [org.slf4j *])
   (:require [org.bitcoinj.script *]
             [org.bitcoinj.wallet Wallet]))

;;;
 ; <p>A TransactionOutput message contains a scriptPubKey that controls who is able to spend its value.
 ; It is a sub-part of the Transaction message.</p>
 ;
 ; <p>Instances of this class are not safe for use by multiple threads.</p>
 ;;
#_public
(§ class #_"TransactionOutput" (§ extends #_"ChildMessage")
    #_private
    #_static
    (§ def- #_"Logger" (§ name log) (LoggerFactory/getLogger (§ klass #_"TransactionOutput")))

    ;; The output's value is kept as a native type in order to save class instances.
    #_private
    (§ field- #_"long" (§ name value))

    ;; A transaction output has a script used for authenticating that the redeemer is allowed to spend
    ;; this output.
    #_private
    (§ field- #_"byte[]" (§ name scriptBytes))

    ;; The script bytes are parsed and turned into a Script on demand.
    #_private
    (§ field- #_"Script" (§ name scriptPubKey))

    ;; These fields are not Bitcoin serialized.  They are used for tracking purposes in our wallet only.
    ;; If set to true, this output is counted towards our balance.  If false and spentBy is null the tx output
    ;; was owned by us and was sent to somebody else.  If false and spentBy is set it means this output was owned
    ;; by us and used in one of our own transactions (e.g. because it is a change output).
    #_private
    (§ field- #_"boolean" (§ name availableForSpending))
    #_nilable
    #_private
    (§ field- #_"TransactionInput" (§ name spentBy))

    #_private
    (§ field- #_"int" (§ name scriptLen))

    ;;;
     ; Deserializes a transaction output message.  This is usually part of a transaction message.
     ;;
    #_public
    (§ constructor #_"TransactionOutput" [#_"NetworkParameters" (§ name params), #_nilable #_"Transaction" (§ name parent), #_"byte[]" (§ name payload), #_"int" (§ name offset)])
        (§ throws #_"ProtocolException")
    (§ block
        (§ super params, payload, offset)

        (setParent parent)
        (§ ass (§ name availableForSpending) true)
        this
    )

    ;;;
     ; Deserializes a transaction output message.  This is usually part of a transaction message.
     ;
     ; @param params NetworkParameters object.
     ; @param payload Bitcoin protocol formatted byte array containing message content.
     ; @param offset The location of the first payload byte within the array.
     ; @param serializer The serializer to use for this message.
     ; @throws ProtocolException
     ;;
    #_public
    (§ constructor #_"TransactionOutput" [#_"NetworkParameters" (§ name params), #_nilable #_"Transaction" (§ name parent), #_"byte[]" (§ name payload), #_"int" (§ name offset), #_"MessageSerializer" (§ name serializer)])
        (§ throws #_"ProtocolException")
    (§ block
        (§ super params, payload, offset, parent, serializer, UNKNOWN_LENGTH)

        (§ ass (§ name availableForSpending) true)
        this
    )

    ;;;
     ; Creates an output that sends 'value' to the given address (public key hash).  The amount should be
     ; created with something like {@link Coin#valueOf(int, int)}.  Typically you would use
     ; {@link Transaction#addOutput(Coin, Address)} instead of creating a TransactionOutput directly.
     ;;
    #_public
    (§ constructor #_"TransactionOutput" [#_"NetworkParameters" (§ name params), #_nilable #_"Transaction" (§ name parent), #_"Coin" (§ name value), #_"Address" (§ name to)])
    (§ block
        (§ this params, parent, value, (§ expr (.. (ScriptBuilder/createOutputScript to) (getProgram))))
        this
    )

    ;;;
     ; Creates an output that sends 'value' to the given public key using a simple CHECKSIG script (no addresses).
     ; The amount should be created with something like {@link Coin#valueOf(int, int)}.  Typically you would use
     ; {@link Transaction#addOutput(Coin, ECKey)} instead of creating an output directly.
     ;;
    #_public
    (§ constructor #_"TransactionOutput" [#_"NetworkParameters" (§ name params), #_nilable #_"Transaction" (§ name parent), #_"Coin" (§ name value), #_"ECKey" (§ name to)])
    (§ block
        (§ this params, parent, value, (§ expr (.. (ScriptBuilder/createOutputScript to) (getProgram))))
        this
    )

    #_public
    (§ constructor #_"TransactionOutput" [#_"NetworkParameters" (§ name params), #_nilable #_"Transaction" (§ name parent), #_"Coin" (§ name value), #_"byte[]" (§ name scriptBytes)])
    (§ block
        (§ super params)

        ;; Negative values obviously make no sense, except for -1 which is used as a sentinel value when calculating
        ;; SIGHASH_SINGLE signatures, so unfortunately we have to allow that here.
        (Preconditions/checkArgument (§ expr 0 <= (.. value (signum)) || (.. value (equals Coin/NEGATIVE_SATOSHI))), "Negative values not allowed")
        (Preconditions/checkArgument (§ expr (§ not (.. params (hasMaxMoney))) || (.. value (compareTo (.. params (getMaxMoney)))) <= 0), "Values larger than MAX_MONEY not allowed")

        (§ ass (§ name (.. this value)) (.. value value))
        (§ ass (§ name (.. this scriptBytes)) scriptBytes)
        (setParent parent)
        (§ ass (§ name availableForSpending) true)
        (§ ass (§ name length) (§ expr 8 + (VarInt/sizeOf (.. scriptBytes length)) + (.. scriptBytes length)))
        this
    )

    #_public
    (§ method #_"Script" (§ fn getScriptPubKey) [])
        (§ throws #_"ScriptException")
    (§ block
        (§ if (nil? scriptPubKey))
        (§ block
            (§ ass (§ name scriptPubKey) (§ new #_"Script" scriptBytes))
        )
        scriptPubKey
    )

    ;;;
     ; <p>If the output script pays to an address as in <a href="https://bitcoin.org/en/developer-guide#term-p2pkh">P2PKH</a>,
     ; return the address of the receiver, i.e. a base58 encoded hash of the public key in the script.</p>
     ;
     ; @param networkParameters Needed to specify an address.
     ; @return null, if the output script is not the form <i>OP_DUP OP_HASH160 <PubkeyHash> OP_EQUALVERIFY OP_CHECKSIG</i>,
     ; i.e. not P2PKH.
     ; @return an address made out of the public key hash.
     ;;
    #_nilable
    #_public
    (§ method #_"Address" (§ fn getAddressFromP2PKHScript) [#_"NetworkParameters" (§ name networkParameters)])
        (§ throws #_"ScriptException")
    (§ block
        (when (.. (getScriptPubKey) (isSentToAddress)) (.. (getScriptPubKey) (getToAddress networkParameters)))
    )

    ;;;
     ; <p>If the output script pays to a redeem script, return the address of the redeem script as described by,
     ; i.e. a base58 encoding of [one-byte version][20-byte hash][4-byte checksum], where the 20-byte hash refers to
     ; the redeem script.</p>
     ;
     ; <p>P2SH is described by <a href="https://github.com/bitcoin/bips/blob/master/bip-0016.mediawiki">BIP 16</a> and
     ; <a href="https://bitcoin.org/en/developer-guide#p2sh-scripts">documented in the Bitcoin Developer Guide</a>.</p>
     ;
     ; @param networkParameters Needed to specify an address.
     ; @return null if the output script does not pay to a script hash.
     ; @return an address that belongs to the redeem script.
     ;;
    #_nilable
    #_public
    (§ method #_"Address" (§ fn getAddressFromP2SH) [#_"NetworkParameters" (§ name networkParameters)])
        (§ throws #_"ScriptException")
    (§ block
        (when (.. (getScriptPubKey) (isPayToScriptHash)) (.. (getScriptPubKey) (getToAddress networkParameters)))
    )

    #_override
    #_protected
    (§ method #_"void" (§ fn parse) [])
        (§ throws #_"ProtocolException")
    (§ block
        (§ ass (§ name value) (readInt64))
        (§ ass (§ name scriptLen) (§ cast #_"int" (readVarInt)))
        (§ ass (§ name length) (§ expr cursor - offset + scriptLen))
        (§ ass (§ name scriptBytes) (readBytes scriptLen))
        nil
    )

    #_override
    #_protected
    (§ method #_"void" (§ fn bitcoinSerializeToStream) [#_"OutputStream" (§ name stream)])
        (§ throws #_"IOException")
    (§ block
        (Preconditions/checkNotNull scriptBytes)

        (Utils/int64ToByteStreamLE value, stream)
        ;; TODO: Move script serialization into the Script class, where it belongs.
        (.. stream (write (.. (§ new #_"VarInt" (.. scriptBytes length)) (encode))))
        (.. stream (write scriptBytes))
        nil
    )

    ;;;
     ; Returns the value of this output.
     ; This is the amount of currency that the destination address receives.
     ;;
    #_public
    (§ method #_"Coin" (§ fn getValue) [])
    (§ block
        (§ try )
        (§ block
            (§ return (Coin/valueOf value))
        )
        (§ catch #_"IllegalArgumentException" (§ name e))
        (§ block
            (§ throw (§ new #_"IllegalStateException" (.. e (getMessage)), e))
        )
    )

    ;;;
     ; Sets the value of this output.
     ;;
    #_public
    (§ method #_"void" (§ fn setValue) [#_"Coin" (§ name value)])
    (§ block
        (Preconditions/checkNotNull value)

        (unCache)
        (§ ass (§ name (.. this value)) (.. value value))
        nil
    )

    ;;;
     ; Gets the index of this output in the parent transaction, or throws if this output is free standing.
     ; Iterates over the parents list to discover this.
     ;;
    #_public
    (§ method #_"int" (§ fn getIndex) [])
    (§ block
        (§ var #_"List<TransactionOutput>" (§ name outputs) (.. (getParentTransaction) (getOutputs)))
        (§ for (§ var #_"int" (§ name i) 0) :for (§ expr i < (.. outputs (size))) :for (§ ass (§ name i) (+ i 1)))
        (§ block
            (§ if (== (.. outputs (get i)) this))
            (§ block
                (§ return i)
            )
        )

        (§ throw (§ new #_"IllegalStateException" "Output linked to wrong parent transaction?"))
    )

    ;;;
     ; Will this transaction be relayable and mined by default miners?
     ;;
    #_public
    (§ method #_"boolean" (§ fn isDust) [])
    (§ block
        ;; Transactions that are OP_RETURN can't be dust regardless of their value.
        (if (.. (getScriptPubKey) (isOpReturn)) false (.. (getValue) (isLessThan (getMinNonDustValue))))
    )

    ;;;
     ; <p>Gets the minimum value for a txout of this size to be considered non-dust by Bitcoin Core
     ; (and thus relayed).  See CTxOut::IsDust() in Bitcoin Core.  The assumption is that any output that would
     ; consume more than a third of its value in fees is not something the Bitcoin system wants to deal with right now,
     ; so we call them "dust outputs" and they're made non standard.  The choice of one third is somewhat arbitrary and
     ; may change in future.</p>
     ;
     ; <p>You probably should use {@link org.bitcoinj.core.TransactionOutput#getMinNonDustValue()} which uses
     ; a safe fee-per-kb by default.</p>
     ;
     ; @param feePerKb The fee required per kilobyte.  Note that this is the same as Bitcoin Core's -minrelaytxfee * 3.
     ;;
    #_public
    (§ method #_"Coin" (§ fn getMinNonDustValue) [#_"Coin" (§ name feePerKb)])
    (§ block
        ;; A typical output is 33 bytes (pubkey hash + opcodes) and requires an input of 148 bytes to spend so we add
        ;; that together to find out the total amount of data used to transfer this amount of value.  Note that this
        ;; formula is wrong for anything that's not a pay-to-address output, unfortunately, we must follow Bitcoin Core's
        ;; wrongness in order to ensure we're considered standard.  A better formula would either estimate the
        ;; size of data needed to satisfy all different script types, or just hard code 33 below.
        (§ var #_"long" (§ name size) (+ (.. this (unsafeBitcoinSerialize) length) 148))
        (.. feePerKb (multiply size) (divide 1000))
    )

    ;;;
     ; Returns the minimum value for this output to be considered "not dust", i.e. the transaction will be relayable
     ; and mined by default miners.  For normal pay to address outputs, this is 2730 satoshis, the same as
     ; {@link Transaction#MIN_NONDUST_OUTPUT}.
     ;;
    #_public
    (§ method #_"Coin" (§ fn getMinNonDustValue) [])
    (§ block
        (getMinNonDustValue (.. Transaction/REFERENCE_DEFAULT_MIN_TX_FEE (multiply 3)))
    )

    ;;;
     ; Sets this objects availableForSpending flag to false and the spentBy pointer to the given input.
     ; If the input is null, it means this output was signed over to somebody else rather than one of our own keys.
     ; @throws IllegalStateException if the transaction was already marked as spent.
     ;;
    #_public
    (§ method #_"void" (§ fn markAsSpent) [#_"TransactionInput" (§ name input)])
    (§ block
        (Preconditions/checkState availableForSpending)

        (§ ass (§ name availableForSpending) false)
        (§ ass (§ name spentBy) input)

        (§ if (.. log (isDebugEnabled)))
        (§ block
            (§ if (some? parent))
            (§ block
                (.. log (debug "Marked {}:{} as spent by {}", (getParentTransactionHash), (getIndex), input))
            )
            (§ else )
            (§ block
                (.. log (debug "Marked floating output as spent by {}", input))
            )
        )
        nil
    )

    ;;;
     ; Resets the spent pointer / availableForSpending flag to null.
     ;;
    #_public
    (§ method #_"void" (§ fn markAsUnspent) [])
    (§ block
        (§ if (.. log (isDebugEnabled)))
        (§ block
            (§ if (some? parent))
            (§ block
                (.. log (debug "Un-marked {}:{} as spent by {}", (getParentTransactionHash), (getIndex), spentBy))
            )
            (§ else )
            (§ block
                (.. log (debug "Un-marked floating output as spent by {}", spentBy))
            )
        )

        (§ ass (§ name availableForSpending) true)
        (§ ass (§ name spentBy) nil)
        nil
    )

    ;;;
     ; Returns whether {@link TransactionOutput#markAsSpent(TransactionInput)} has been called on this class.
     ; A {@link Wallet} will mark a transaction output as spent once it sees a transaction input that is connected to it.
     ; Note that this flag can be false when an output has in fact been spent according to the rest of the network if
     ; the spending transaction wasn't downloaded yet, and it can be marked as spent when in reality the rest of the
     ; network believes it to be unspent if the signature or script connecting to it was not actually valid.
     ;;
    #_public
    (§ method #_"boolean" (§ fn isAvailableForSpending) [])
    (§ block
        availableForSpending
    )

    ;;;
     ; The backing script bytes which can be turned into a Script object.
     ; @return the scriptBytes
    ;;
    #_public
    (§ method #_"byte[]" (§ fn getScriptBytes) [])
    (§ block
        scriptBytes
    )

    ;;;
     ; Returns true if this output is to a key, or an address we have the keys for, in the wallet.
     ;;
    #_public
    (§ method #_"boolean" (§ fn isMine) [#_"TransactionBag" (§ name transactionBag)])
    (§ block
        (§ try )
        (§ block
            (§ var #_"Script" (§ name script) (getScriptPubKey))
            (§ if (.. script (isSentToRawPubKey)))
            (§ block
                (§ return (.. transactionBag (isPubKeyMine (.. script (getPubKey)))))
            )
            (§ if (.. script (isPayToScriptHash)))
            (§ block
                (§ return (.. transactionBag (isPayToScriptHashMine (.. script (getPubKeyHash)))))
            )
            (§ return (.. transactionBag (isPubKeyHashMine (.. script (getPubKeyHash)))))
        )
        (§ catch #_"ScriptException" (§ name e))
        (§ block
            ;; Just means we didn't understand the output of this transaction: ignore it.
            (.. log (debug "Could not parse tx {} output script: {}", (if (some? parent) (.. parent (getHash)) "(no parent)"), (.. e (toString))))
            (§ return false)
        )
    )

    ;;;
     ; Returns a human readable debug string.
     ;;
    #_override
    #_public
    (§ method #_"String" (§ fn toString) [])
    (§ block
        (§ try )
        (§ block
            (§ var #_"Script" (§ name script) (getScriptPubKey))
            (§ var #_"StringBuilder" (§ name sb) (§ new #_"StringBuilder" "TxOut of "))
            (.. sb (append (.. (Coin/valueOf value) (toFriendlyString))))
            (§ if (§ expr (.. script (isSentToAddress)) || (.. script (isPayToScriptHash))))
            (§ block
                (.. sb (append " to ") (append (.. script (getToAddress params))))
            )
            (§ elseif (.. script (isSentToRawPubKey)))
            (§ block
                (.. sb (append " to pubkey ") (append (.. Utils/HEX (encode (.. script (getPubKey))))))
            )
            (§ elseif (.. script (isSentToMultiSig)))
            (§ block
                (.. sb (append " to multisig"))
            )
            (§ else )
            (§ block
                (.. sb (append " (unknown type)"))
            )
            (.. sb (append " script:") (append script))
            (§ return (.. sb (toString)))
        )
        (§ catch #_"ScriptException" (§ name e))
        (§ block
            (§ throw (§ new #_"RuntimeException" e))
        )
    )

    ;;;
     ; Returns the connected input.
     ;;
    #_nilable
    #_public
    (§ method #_"TransactionInput" (§ fn getSpentBy) [])
    (§ block
        spentBy
    )

    ;;;
     ; Returns the transaction that owns this output.
     ;;
    #_nilable
    #_public
    (§ method #_"Transaction" (§ fn getParentTransaction) [])
    (§ block
        (§ cast #_"Transaction" parent)
    )

    ;;;
     ; Returns the transaction hash that owns this output.
     ;;
    #_nilable
    #_public
    (§ method #_"Sha256Hash" (§ fn getParentTransactionHash) [])
    (§ block
        (when (some? parent) (.. parent (getHash)))
    )

    ;;;
     ; Returns the depth in blocks of the parent tx.
     ;
     ; <p>If the transaction appears in the top block, the depth is one.
     ; If it's anything else (pending, dead, unknown), then -1.</p>
     ; @return the tx depth or -1.
     ;;
    #_public
    (§ method #_"int" (§ fn getParentTransactionDepthInBlocks) [])
    (§ block
        (§ if (!= (getParentTransaction) nil))
        (§ block
            (§ var #_"TransactionConfidence" (§ name confidence) (.. (getParentTransaction) (getConfidence)))
            (§ if (== (.. confidence (getConfidenceType)) TransactionConfidence/ConfidenceType/BUILDING))
            (§ block
                (§ return (.. confidence (getDepthInBlocks)))
            )
        )
        -1
    )

    ;;;
     ; Returns a new {@link TransactionOutPoint}, which is essentially a structure pointing to this output.
     ; Requires that this output is not detached.
     ;;
    #_public
    (§ method #_"TransactionOutPoint" (§ fn getOutPointFor) [])
    (§ block
        (§ new #_"TransactionOutPoint" params, (getIndex), (getParentTransaction))
    )

    ;;; Returns a copy of the output detached from its containing transaction, if need be. ;;
    #_public
    (§ method #_"TransactionOutput" (§ fn duplicateDetached) [])
    (§ block
        (§ new #_"TransactionOutput" params, nil, (Coin/valueOf value), (org.spongycastle.util.Arrays/clone scriptBytes))
    )

    #_override
    #_public
    (§ method #_"boolean" (§ fn equals) [#_"Object" (§ name o)])
    (§ block
        (§ if (§ expr this == o))
        (§ block
            (§ return true)
        )
        (§ if (§ expr o == nil || (getClass) != (.. o (getClass))))
        (§ block
            (§ return false)
        )
        (§ var #_"TransactionOutput" (§ name other) (§ cast #_"TransactionOutput" o))
        (§ expr value == (.. other value) && (§ expr parent == nil || (§ expr parent == (.. other parent) && (getIndex) == (.. other (getIndex)))) && (Arrays/equals scriptBytes, (.. other scriptBytes)))
    )

    #_override
    #_public
    (§ method #_"int" (§ fn hashCode) [])
    (§ block
        (Objects/hashCode value, parent, (Arrays/hashCode scriptBytes))
    )
)

#_(ns org.bitcoinj.core #_"TransactionOutputChanges"
    (:import [java.io IOException InputStream OutputStream]
             [java.util LinkedList List]))

;;;
 ; <p>TransactionOutputChanges represents a delta to the set of unspent outputs.  It used as a return value for
 ; {@link AbstractBlockChain#connectTransactions(int, Block)}.  It contains the full list of transaction outputs created
 ; and spent in a block.  It DOES contain outputs created that were spent later in the block, as those are needed for
 ; BIP30 (no duplicate txid creation if the previous one was not fully spent prior to this block) verification.</p>
 ;;
#_public
(§ class #_"TransactionOutputChanges"
    #_public
    (§ field #_"List<UTXO>" (§ name txOutsCreated))
    #_public
    (§ field #_"List<UTXO>" (§ name txOutsSpent))

    #_public
    (§ constructor #_"TransactionOutputChanges" [#_"List<UTXO>" (§ name txOutsCreated), #_"List<UTXO>" (§ name txOutsSpent)])
    (§ block
        (§ ass (§ name (.. this txOutsCreated)) txOutsCreated)
        (§ ass (§ name (.. this txOutsSpent)) txOutsSpent)
        this
    )

    #_private
    #_static
    (§ defn- #_"int" (§ fn read4x8le) [#_"InputStream" (§ name is)])
        (§ throws #_"IOException")
    (§ block
        (§ expr (& (.. is (read)) 0xff) | (<< (& (.. is (read)) 0xff) 8) | (<< (& (.. is (read)) 0xff) 16) | (<< (& (.. is (read)) 0xff) 24))
    )

    #_public
    (§ constructor #_"TransactionOutputChanges" [#_"InputStream" (§ name is)])
        (§ throws #_"IOException")
    (§ block
        (§ var #_"int" (§ name nCreated) (read4x8le is))
        (§ ass (§ name txOutsCreated) (§ new #_"LinkedList<>"))
        (§ for (§ var #_"int" (§ name i) 0) :for (< i nCreated) :for (§ ass (§ name i) (+ i 1)))
        (§ block
            (.. txOutsCreated (add (§ new #_"UTXO" is)))
        )

        (§ var #_"int" (§ name nSpent) (read4x8le is))
        (§ ass (§ name txOutsSpent) (§ new #_"LinkedList<>"))
        (§ for (§ var #_"int" (§ name i) 0) :for (< i nSpent) :for (§ ass (§ name i) (+ i 1)))
        (§ block
            (.. txOutsSpent (add (§ new #_"UTXO" is)))
        )
        this
    )

    #_private
    #_static
    (§ defn- #_"void" (§ fn write4x8le) [#_"OutputStream" (§ name os), #_"int" (§ name n)])
        (§ throws #_"IOException")
    (§ block
        (.. os (write (& 0xff n)))
        (.. os (write (§ expr 0xff & (>> n 8))))
        (.. os (write (§ expr 0xff & (>> n 16))))
        (.. os (write (§ expr 0xff & (>> n 24))))
        nil
    )

    #_public
    (§ method #_"void" (§ fn serializeToStream) [#_"OutputStream" (§ name os)])
        (§ throws #_"IOException")
    (§ block
        (write4x8le os, (.. txOutsCreated (size)))
        (§ for (§ var #_"UTXO" (§ name output)) :for txOutsCreated)
        (§ block
            (.. output (serializeToStream os))
        )

        (write4x8le os, (.. txOutsSpent (size)))
        (§ for (§ var #_"UTXO" (§ name output)) :for txOutsSpent)
        (§ block
            (.. output (serializeToStream os))
        )
        nil
    )
)

#_(ns org.bitcoinj.core #_"TxConfidenceTable"
    (:import [java.lang.ref *]
             [java.util *]
             [java.util.concurrent.locks *])
    (:import [com.google.common.base Preconditions])
   (:require [org.bitcoinj.utils *]))

;;;
 ; <p>Tracks transactions that are being announced across the network.  Typically one is created for you by a
 ; {@link PeerGroup} and then given to each Peer to update.  The current purpose is to let Peers update the confidence
 ; (number of peers broadcasting).  It helps address an attack scenario in which a malicious remote peer (or several)
 ; feeds you invalid transactions, e.g. ones that spend coins which don't exist.  If you don't see most of the peers
 ; announce the transaction within a reasonable time, it may be that the TX is not valid.  Alternatively, an attacker
 ; may control your entire internet connection: in this scenario counting broadcasting peers does not help you.</p>
 ;
 ; <p>It is <b>not</b> at this time directly equivalent to the Bitcoin Core memory pool, which tracks
 ; all transactions not currently included in the best chain - it's simply a cache.</p>
 ;;
#_public
(§ class #_"TxConfidenceTable"
    #_protected
    (§ field #_"ReentrantLock" (§ name lock) (Threading/lock "txconfidencetable"))

    #_private
    #_static
    (§ class #_"WeakConfidenceReference" (§ extends #_"WeakReference<TransactionConfidence>")
        #_public
        (§ field #_"Sha256Hash" (§ name hash))

        #_public
        (§ constructor #_"WeakConfidenceReference" [#_"TransactionConfidence" (§ name confidence), #_"ReferenceQueue<TransactionConfidence>" (§ name queue)])
        (§ block
            (§ super confidence, queue)

            (§ ass (§ name hash) (.. confidence (getTransactionHash)))
            this
        )
    )
    #_private
    (§ field- #_"LinkedHashMap<Sha256Hash, WeakConfidenceReference>" (§ name table))

    ;; This ReferenceQueue gets entries added to it when they are only weakly reachable, i.e. the TxConfidenceTable is
    ;; the only thing that is tracking the confidence data anymore.  We check it from time to time and delete table entries
    ;; corresponding to expired transactions.  In this way memory usage of the system is in line with however many
    ;; transactions you actually care to track the confidence of.  We can still end up with lots of hashes being stored
    ;; if our peers flood us with invs but the MAX_SIZE param caps this.
    #_private
    (§ field- #_"ReferenceQueue<TransactionConfidence>" (§ name referenceQueue))

    ;;; The max size of a table created with the no-args constructor. ;;
    #_public
    #_static
    (§ def #_"int" (§ name MAX_SIZE) 1000)

    ;;;
     ; Creates a table that will track at most the given number of transactions (allowing you to bound memory usage).
     ; @param size Max number of transactions to track.  The table will fill up to this size then stop growing.
     ;;
    #_public
    (§ constructor #_"TxConfidenceTable" [#_"int" (§ name size)])
    (§ block
        (§ ass (§ name table) (§ new #_"LinkedHashMap<Sha256Hash, WeakConfidenceReference>"
        (§ anon
            #_override
            #_protected
            (§ method #_"boolean" (§ fn removeEldestEntry) [#_"Map.Entry<Sha256Hash, WeakConfidenceReference>" (§ name entry)])
            (§ block
                ;; An arbitrary choice to stop the memory used by tracked transactions getting too huge in the event
                ;; of some kind of DoS attack.
                (< size (size))
            )
        )))
        (§ ass (§ name referenceQueue) (§ new #_"ReferenceQueue<>"))
        this
    )

    ;;;
     ; Creates a table that will track at most {@link TxConfidenceTable#MAX_SIZE} entries.
     ; You should normally use this constructor.
     ;;
    #_public
    (§ constructor #_"TxConfidenceTable" [])
    (§ block
        (§ this MAX_SIZE)
        this
    )

    ;;;
     ; If any transactions have expired due to being only weakly reachable through us, go ahead and delete their
     ; table entries - it means we downloaded the transaction and sent it to various event listeners, none of
     ; which bothered to keep a reference.  Typically, this is because the transaction does not involve any keys
     ; that are relevant to any of our wallets.
     ;;
    #_private
    (§ method- #_"void" (§ fn cleanTable) [])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ var #_"Reference<? extends TransactionConfidence>" (§ name ref))
            (§ while (!= (§ ass (§ name ref) (.. referenceQueue (poll))) nil))
            (§ block
                ;; Find which transaction got deleted by the GC.
                (§ var #_"WeakConfidenceReference" (§ name txRef) (§ cast #_"WeakConfidenceReference" ref))
                ;; And remove the associated map entry, so the other bits of memory can also be reclaimed.
                (.. table (remove (.. txRef hash)))
            )
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
        nil
    )

    ;;;
     ; Returns the number of peers that have seen the given hash recently.
     ;;
    #_public
    (§ method #_"int" (§ fn numBroadcastPeers) [#_"Sha256Hash" (§ name txHash)])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (cleanTable)
            (§ var #_"WeakConfidenceReference" (§ name entry) (.. table (get txHash)))
            (§ if (nil? entry))
            (§ block
                (§ return 0) ;; No such TX known.
            )

            (§ var #_"TransactionConfidence" (§ name confidence) (.. entry (get)))
            (§ if (nil? confidence))
            (§ block
                ;; Such a TX hash was seen, but nothing seemed to care, so we ended up throwing away the data.
                (.. table (remove txHash))
                (§ return 0)
            )

            (§ return (.. confidence (numBroadcastPeers)))
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    ;;;
     ; Called by peers when they see a transaction advertised in an "inv" message.  It passes the data on to the relevant
     ; {@link org.bitcoinj.core.TransactionConfidence} object, creating it if needed.
     ;
     ; @return the number of peers that have now announced this hash (including the caller).
     ;;
    #_public
    (§ method #_"TransactionConfidence" (§ fn seen) [#_"Sha256Hash" (§ name hash), #_"PeerAddress" (§ name byPeer)])
    (§ block
        (§ var #_"TransactionConfidence" (§ name confidence))
        (§ var #_"boolean" (§ name fresh) false)
        (.. lock (lock))
        (§ block
            (cleanTable)
            (§ ass (§ name confidence) (getOrCreate hash))
            (§ ass (§ name fresh) (.. confidence (markBroadcastBy byPeer)))
        )
        (.. lock (unlock))
        (§ if fresh)
        (§ block
            (.. confidence (queueListeners TransactionConfidence/Listener/ChangeReason/SEEN_PEERS))
        )
        confidence
    )

    ;;;
     ; Returns the {@link TransactionConfidence} for the given hash if we have downloaded it, or null if that tx hash
     ; is unknown to the system at this time.
     ;;
    #_public
    (§ method #_"TransactionConfidence" (§ fn getOrCreate) [#_"Sha256Hash" (§ name hash)])
    (§ block
        (Preconditions/checkNotNull hash)

        (.. lock (lock))
        (§ try )
        (§ block
            (§ var #_"WeakConfidenceReference" (§ name reference) (.. table (get hash)))
            (§ if (some? reference))
            (§ block
                (§ var #_"TransactionConfidence" (§ name confidence) (.. reference (get)))
                (§ if (some? confidence))
                (§ block
                    (§ return confidence)
                )
            )
            (§ var #_"TransactionConfidence" (§ name newConfidence) (§ new #_"TransactionConfidence" hash))
            (.. table (put hash, (§ new #_"WeakConfidenceReference" newConfidence, referenceQueue)))
            (§ return newConfidence)
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    ;;;
     ; Returns the {@link TransactionConfidence} for the given hash if we have downloaded it, or null if that tx hash
     ; is unknown to the system at this time.
     ;;
    #_nilable
    #_public
    (§ method #_"TransactionConfidence" (§ fn get) [#_"Sha256Hash" (§ name hash)])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ var #_"WeakConfidenceReference" (§ name ref) (.. table (get hash)))
            (§ return (when (some? ref) (.. ref (get))))
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )
)

#_(ns org.bitcoinj.core #_"UTXO"
    (:import [java.io *]
             [java.math *]
             [java.util Locale])
    (:import [com.google.common.base Objects])
   (:require [org.bitcoinj.script *]))

;; TODO: Fix this class: should not talk about addresses, height should be optional/support mempool height etc.

;;;
 ; A UTXO message contains the information necessary to check a spending transaction.
 ; It avoids having to store the entire parentTransaction just to get the hash and index.
 ; Useful when working with free standing outputs.
 ;;
#_public
(§ class #_"UTXO" (§ implements #_"Serializable")
    #_private
    (§ field- #_"Coin" (§ name value))
    #_private
    (§ field- #_"Script" (§ name script))
    #_private
    (§ field- #_"Sha256Hash" (§ name hash))
    #_private
    (§ field- #_"long" (§ name index))
    #_private
    (§ field- #_"int" (§ name height))
    #_private
    (§ field- #_"boolean" (§ name coinbase))
    #_private
    (§ field- #_"String" (§ name address))

    ;;;
     ; Creates a stored transaction output.
     ;
     ; @param hash     The hash of the containing transaction.
     ; @param index    The outpoint.
     ; @param value    The value available.
     ; @param height   The height this output was created in.
     ; @param coinbase The coinbase flag.
     ;;
    #_public
    (§ constructor #_"UTXO" [#_"Sha256Hash" (§ name hash), #_"long" (§ name index), #_"Coin" (§ name value), #_"int" (§ name height), #_"boolean" (§ name coinbase), #_"Script" (§ name script)])
    (§ block
        (§ ass (§ name (.. this hash)) hash)
        (§ ass (§ name (.. this index)) index)
        (§ ass (§ name (.. this value)) value)
        (§ ass (§ name (.. this height)) height)
        (§ ass (§ name (.. this script)) script)
        (§ ass (§ name (.. this coinbase)) coinbase)
        (§ ass (§ name (.. this address)) "")
        this
    )

    ;;;
     ; Creates a stored transaction output.
     ;
     ; @param hash     The hash of the containing transaction.
     ; @param index    The outpoint.
     ; @param value    The value available.
     ; @param height   The height this output was created in.
     ; @param coinbase The coinbase flag.
     ; @param address  The address.
     ;;
    #_public
    (§ constructor #_"UTXO" [#_"Sha256Hash" (§ name hash), #_"long" (§ name index), #_"Coin" (§ name value), #_"int" (§ name height), #_"boolean" (§ name coinbase), #_"Script" (§ name script), #_"String" (§ name address)])
    (§ block
        (§ this hash, index, value, height, coinbase, script)
        (§ ass (§ name (.. this address)) address)
        this
    )

    #_public
    (§ constructor #_"UTXO" [#_"InputStream" (§ name in)])
        (§ throws #_"IOException")
    (§ block
        (deserializeFromStream in)
        this
    )

    ;;; The value which this Transaction output holds. ;;
    #_public
    (§ method #_"Coin" (§ fn getValue) [])
    (§ block
        value
    )

    ;;; The Script object which you can use to get address, script bytes or script type. ;;
    #_public
    (§ method #_"Script" (§ fn getScript) [])
    (§ block
        script
    )

    ;;; The hash of the transaction which holds this output. ;;
    #_public
    (§ method #_"Sha256Hash" (§ fn getHash) [])
    (§ block
        hash
    )

    ;;; The index of this output in the transaction which holds it. ;;
    #_public
    (§ method #_"long" (§ fn getIndex) [])
    (§ block
        index
    )

    ;;; Gets the height of the block that created this output. ;;
    #_public
    (§ method #_"int" (§ fn getHeight) [])
    (§ block
        height
    )

    ;;; Gets the flag of whether this was created by a coinbase tx. ;;
    #_public
    (§ method #_"boolean" (§ fn isCoinbase) [])
    (§ block
        coinbase
    )

    ;;; The address of this output, can be the empty string if none was provided at construction time or was deserialized. ;;
    #_public
    (§ method #_"String" (§ fn getAddress) [])
    (§ block
        address
    )

    #_override
    #_public
    (§ method #_"String" (§ fn toString) [])
    (§ block
        (String/format Locale/US, "Stored TxOut of %s (%s:%d)", (.. value (toFriendlyString)), hash, index)
    )

    #_override
    #_public
    (§ method #_"int" (§ fn hashCode) [])
    (§ block
        (Objects/hashCode (getIndex), (getHash))
    )

    #_override
    #_public
    (§ method #_"boolean" (§ fn equals) [#_"Object" (§ name o)])
    (§ block
        (§ if (§ expr this == o))
        (§ block
            (§ return true)
        )
        (§ if (§ expr o == nil || (getClass) != (.. o (getClass))))
        (§ block
            (§ return false)
        )
        (§ var #_"UTXO" (§ name other) (§ cast #_"UTXO" o))
        (§ expr (getIndex) == (.. other (getIndex)) && (.. (getHash) (equals (.. other (getHash)))))
    )

    #_private
    #_static
    (§ defn- #_"void" (§ fn write4x8le) [#_"OutputStream" (§ name os), #_"int" (§ name n)])
        (§ throws #_"IOException")
    (§ block
        (.. os (write (& 0xff n)))
        (.. os (write (§ expr 0xff & (>> n 8))))
        (.. os (write (§ expr 0xff & (>> n 16))))
        (.. os (write (§ expr 0xff & (>> n 24))))
        nil
    )

    #_public
    (§ method #_"void" (§ fn serializeToStream) [#_"OutputStream" (§ name os)])
        (§ throws #_"IOException")
    (§ block
        (Utils/uint64ToByteStreamLE (BigInteger/valueOf (.. value value)), os)

        (§ var #_"byte[]" (§ name scriptBytes) (.. script (getProgram)))
        (write4x8le os, (.. scriptBytes length))
        (.. os (write scriptBytes))

        (.. os (write (.. hash (getBytes))))
        (Utils/uint32ToByteStreamLE index, os)

        (write4x8le os, height)
        (.. os (write (§ new #_"byte[]" (§ coll (§ cast #_"byte" (if coinbase 1 0)) ))))
        nil
    )

    #_private
    #_static
    (§ defn- #_"int" (§ fn read4x8le) [#_"InputStream" (§ name is)])
        (§ throws #_"IOException")
    (§ block
        (§ expr (& (.. is (read)) 0xff) | (<< (& (.. is (read)) 0xff) 8) | (<< (& (.. is (read)) 0xff) 16) | (<< (& (.. is (read)) 0xff) 24))
    )

    #_public
    (§ method #_"void" (§ fn deserializeFromStream) [#_"InputStream" (§ name is)])
        (§ throws #_"IOException")
    (§ block
        (§ var #_"byte[]" (§ name valueBytes) (§ new #_"byte[]" (§ count 8)))
        (§ if (!= (.. is (read valueBytes, 0, 8)) 8))
        (§ block
            (§ throw (§ new #_"EOFException"))
        )
        (§ ass (§ name value) (Coin/valueOf (Utils/readInt64 valueBytes, 0)))

        (§ var #_"int" (§ name scriptBytesLength) (read4x8le is))
        (§ var #_"byte[]" (§ name scriptBytes) (§ new #_"byte[]" (§ count scriptBytesLength)))
        (§ if (!= (.. is (read scriptBytes)) scriptBytesLength))
        (§ block
            (§ throw (§ new #_"EOFException"))
        )
        (§ ass (§ name script) (§ new #_"Script" scriptBytes))

        (§ var #_"byte[]" (§ name hashBytes) (§ new #_"byte[]" (§ count 32)))
        (§ if (!= (.. is (read hashBytes)) 32))
        (§ block
            (§ throw (§ new #_"EOFException"))
        )
        (§ ass (§ name hash) (Sha256Hash/wrap hashBytes))

        (§ var #_"byte[]" (§ name indexBytes) (§ new #_"byte[]" (§ count 4)))
        (§ if (!= (.. is (read indexBytes)) 4))
        (§ block
            (§ throw (§ new #_"EOFException"))
        )
        (§ ass (§ name index) (Utils/readUint32 indexBytes, 0))

        (§ ass (§ name height) (read4x8le is))

        (§ var #_"byte[]" (§ name coinbaseByte) (§ new #_"byte[]" (§ count 1)))
        (.. is (read coinbaseByte))
        (§ ass (§ name coinbase) (§ expr (§ ai coinbaseByte 0) == 1))
        nil
    )

    #_private
    (§ method- #_"void" (§ fn writeObject) [#_"ObjectOutputStream" (§ name o)])
        (§ throws #_"IOException")
    (§ block
        (serializeToStream o)
        nil
    )

    #_private
    (§ method- #_"void" (§ fn readObject) [#_"ObjectInputStream" (§ name o)])
        (§ throws #_"IOException", #_"ClassNotFoundException")
    (§ block
        (deserializeFromStream o)
        nil
    )
)

#_(ns org.bitcoinj.core #_"UnknownMessage")

;;;
 ; <p>Instances of this class are not safe for use by multiple threads.</p>
 ;;
#_public
(§ class #_"UnknownMessage" (§ extends #_"EmptyMessage")
    #_private
    (§ field- #_"String" (§ name name))

    #_public
    (§ constructor #_"UnknownMessage" [#_"NetworkParameters" (§ name params), #_"String" (§ name name), #_"byte[]" (§ name payloadBytes)])
        (§ throws #_"ProtocolException")
    (§ block
        (§ super params, payloadBytes, 0)

        (§ ass (§ name (.. this name)) name)
        this
    )

    #_override
    #_public
    (§ method #_"String" (§ fn toString) [])
    (§ block
        (§ str "Unknown message [" + name + "]: " + (if (some? payload) (.. Utils/HEX (encode payload)) ""))
    )
)

#_(ns org.bitcoinj.core #_"UnsafeByteArrayOutputStream"
    (:import [java.io ByteArrayOutputStream IOException OutputStream]))

;;;
 ; An unsynchronized implementation of ByteArrayOutputStream that will return the backing byte array
 ; if its length == size().  This avoids unneeded array copy where the BOS is simply being used to
 ; extract a byte array of known length from a 'serialized to stream' method.
 ;
 ; Unless the final length can be accurately predicted the only performance this will yield is due
 ; to unsynchronized methods.
 ;
 ; @author git
 ;;
#_public
(§ class #_"UnsafeByteArrayOutputStream" (§ extends #_"ByteArrayOutputStream")
    #_public
    (§ constructor #_"UnsafeByteArrayOutputStream" [])
    (§ block
        (§ super 32)
        this
    )

    #_public
    (§ constructor #_"UnsafeByteArrayOutputStream" [#_"int" (§ name size)])
    (§ block
        (§ super size)
        this
    )

    ;;;
     ; Writes the specified byte to this byte array output stream.
     ;
     ; @param b The byte to be written.
     ;;
    #_override
    #_public
    (§ method #_"void" (§ fn write) [#_"int" (§ name b)])
    (§ block
        (§ var #_"int" (§ name n) (+ count 1))
        (§ if (< (.. buf length) n))
        (§ block
            (§ ass (§ name buf) (Utils/copyOf buf, (Math/max (§ expr (.. buf length) << 1), n)))
        )
        (§ ass (§ name (§ ai buf count)) (§ cast #_"byte" b))
        (§ ass (§ name count) n)
        nil
    )

    ;;;
     ; Writes <code>len</code> bytes from the specified byte array
     ; starting at offset <code>off</code> to this byte array output stream.
     ;
     ; @param b   The data.
     ; @param off The start offset in the data.
     ; @param len The number of bytes to write.
     ;;
    #_override
    #_public
    (§ method #_"void" (§ fn write) [#_"byte[]" (§ name b), #_"int" (§ name off), #_"int" (§ name len)])
    (§ block
        (§ if (§ expr off < 0 || (.. b length) < off || len < 0 || (.. b length) < off + len || off + len < 0))
        (§ block
            (§ throw (§ new #_"IndexOutOfBoundsException"))
        )

        (§ if (§ expr len != 0))
        (§ block
            (§ var #_"int" (§ name n) (+ count len))
            (§ if (< (.. buf length) n))
            (§ block
                (§ ass (§ name buf) (Utils/copyOf buf, (Math/max (§ expr (.. buf length) << 1), n)))
            )
            (System/arraycopy b, off, buf, count, len)
            (§ ass (§ name count) n)
        )
        nil
    )

    ;;;
     ; Writes the complete contents of this byte array output stream to
     ; the specified output stream argument, as if by calling the output
     ; stream's write method using <code>out.write(buf, 0, count)</code>.
     ;
     ; @param out The output stream to which to write the data.
     ; @throws IOException if an I/O error occurs.
     ;;
    #_override
    #_public
    (§ method #_"void" (§ fn writeTo) [#_"OutputStream" (§ name out)])
        (§ throws #_"IOException")
    (§ block
        (.. out (write buf, 0, count))
        nil
    )

    ;;;
     ; Resets the <code>count</code> field of this byte array output
     ; stream to zero, so that all currently accumulated output in the
     ; output stream is discarded.  The output stream can be used again,
     ; reusing the already allocated buffer space.
     ;
     ; @see java.io.ByteArrayInputStream#count
     ;;
    #_override
    #_public
    (§ method #_"void" (§ fn reset) [])
    (§ block
        (§ ass (§ name count) 0)
        nil
    )

    ;;;
     ; Creates a newly allocated byte array.  Its size is the current
     ; size of this output stream and the valid contents of the buffer
     ; have been copied into it.
     ;
     ; @return the current contents of this output stream, as a byte array.
     ; @see java.io.ByteArrayOutputStream#size()
     ;;
    #_override
    #_public
    (§ method #_"byte[]" (§ fn toByteArray) [])
    (§ block
        (if (== count (.. buf length)) buf (Utils/copyOf buf, count))
    )

    ;;;
     ; Returns the current size of the buffer.
     ;
     ; @return the value of the <code>count</code> field, which is the number
     ;         of valid bytes in this output stream.
     ; @see java.io.ByteArrayOutputStream#count
     ;;
    #_override
    #_public
    (§ method #_"int" (§ fn size) [])
    (§ block
        count
    )
)

#_(ns org.bitcoinj.core #_"Utils"
    (:import [java.io ByteArrayOutputStream IOException InputStream OutputStream UnsupportedEncodingException]
             [java.math BigInteger]
             [java.net URL]
             [java.text DateFormat SimpleDateFormat]
             [java.util *]
             [java.util.concurrent ArrayBlockingQueue BlockingQueue TimeUnit])
    (:import [com.google.common.base Charsets Joiner Preconditions]
             [com.google.common.collect Lists Ordering]
             [com.google.common.io BaseEncoding Resources]
             [com.google.common.primitives Ints UnsignedLongs]
             #_static [com.google.common.util.concurrent.Uninterruptibles sleepUninterruptibly]
             [org.spongycastle.crypto.digests RIPEMD160Digest]))

;;;
 ; A collection of various utility methods that are helpful for working with the Bitcoin protocol.
 ; To enable debug logging from the library, run with -Dbitcoinj.logging=true on your command line.
 ;;
#_public
(§ class #_"Utils"
    ;;; The string that prefixes all text messages signed using Bitcoin keys. ;;
    #_public
    #_static
    (§ def #_"String" (§ name BITCOIN_SIGNED_MESSAGE_HEADER) "Bitcoin Signed Message:\n")
    #_public
    #_static
    (§ def #_"byte[]" (§ name BITCOIN_SIGNED_MESSAGE_HEADER_BYTES) (.. BITCOIN_SIGNED_MESSAGE_HEADER (getBytes Charsets/UTF_8)))

    #_public
    #_static
    (§ def #_"Joiner" (§ name SPACE_JOINER) (Joiner/on " "))

    #_private
    #_static
    (§ def- #_"BlockingQueue<Boolean>" (§ name mockSleepQueue))

    ;;;
     ; The regular {@link java.math.BigInteger#toByteArray()} includes the sign bit of the number and
     ; might result in an extra byte addition.  This method removes this extra byte.
     ;
     ; Assuming only positive numbers, it's possible to discriminate if an extra byte
     ; is added by checking if the first element of the array is 0 (0000_0000).
     ; Due to the minimal representation provided by BigInteger, it means that the bit sign
     ; is the least significant bit 0000_000<b>0</b>.  Otherwise the representation is not minimal.
     ; For example, if the sign bit is 0000_00<b>0</b>0, then the representation is not minimal due to the rightmost zero.
     ;
     ; @param b The integer to format into a byte array.
     ; @param numBytes The desired size of the resulting byte array.
     ; @return numBytes byte long array.
     ;;
    #_public
    #_static
    (§ defn #_"byte[]" (§ fn bigIntegerToBytes) [#_"BigInteger" (§ name b), #_"int" (§ name numBytes)])
    (§ block
        (Preconditions/checkArgument (§ expr 0 <= (.. b (signum))), "b must be positive or zero")
        (Preconditions/checkArgument (§ expr 0 < numBytes), "numBytes must be positive")

        (§ var #_"byte[]" (§ name src) (.. b (toByteArray)))
        (§ var #_"byte[]" (§ name dest) (§ new #_"byte[]" (§ count numBytes)))
        (§ var #_"boolean" (§ name isFirstByteOnlyForSign) (§ expr (§ ai src 0) == 0))
        (§ var #_"int" (§ name length) (if isFirstByteOnlyForSign (- (.. src length) 1) (.. src length)))

        (Preconditions/checkArgument (<= length numBytes), (§ str "The given number does not fit in " + numBytes))

        (§ var #_"int" (§ name srcPos) (if isFirstByteOnlyForSign 1 0))
        (§ var #_"int" (§ name destPos) (- numBytes length))
        (System/arraycopy src, srcPos, dest, destPos, length)
        dest
    )

    #_public
    #_static
    (§ defn #_"void" (§ fn uint32ToByteArrayBE) [#_"long" (§ name val), #_"byte[]" (§ name out), #_"int" (§ name offset)])
    (§ block
        (§ ass (§ name (§ ai out offset)) (§ cast #_"byte" (§ expr 0xff & (>> val 24))))
        (§ ass (§ name (§ ai out (§ expr offset + 1))) (§ cast #_"byte" (§ expr 0xff & (>> val 16))))
        (§ ass (§ name (§ ai out (§ expr offset + 2))) (§ cast #_"byte" (§ expr 0xff & (>> val 8))))
        (§ ass (§ name (§ ai out (§ expr offset + 3))) (§ cast #_"byte" (& 0xff val)))
        nil
    )

    #_public
    #_static
    (§ defn #_"void" (§ fn uint32ToByteArrayLE) [#_"long" (§ name val), #_"byte[]" (§ name out), #_"int" (§ name offset)])
    (§ block
        (§ ass (§ name (§ ai out offset)) (§ cast #_"byte" (& 0xff val)))
        (§ ass (§ name (§ ai out (§ expr offset + 1))) (§ cast #_"byte" (§ expr 0xff & (>> val 8))))
        (§ ass (§ name (§ ai out (§ expr offset + 2))) (§ cast #_"byte" (§ expr 0xff & (>> val 16))))
        (§ ass (§ name (§ ai out (§ expr offset + 3))) (§ cast #_"byte" (§ expr 0xff & (>> val 24))))
        nil
    )

    #_public
    #_static
    (§ defn #_"void" (§ fn uint64ToByteArrayLE) [#_"long" (§ name val), #_"byte[]" (§ name out), #_"int" (§ name offset)])
    (§ block
        (§ ass (§ name (§ ai out offset)) (§ cast #_"byte" (& 0xff val)))
        (§ ass (§ name (§ ai out (§ expr offset + 1))) (§ cast #_"byte" (§ expr 0xff & (>> val 8))))
        (§ ass (§ name (§ ai out (§ expr offset + 2))) (§ cast #_"byte" (§ expr 0xff & (>> val 16))))
        (§ ass (§ name (§ ai out (§ expr offset + 3))) (§ cast #_"byte" (§ expr 0xff & (>> val 24))))
        (§ ass (§ name (§ ai out (§ expr offset + 4))) (§ cast #_"byte" (§ expr 0xff & (>> val 32))))
        (§ ass (§ name (§ ai out (§ expr offset + 5))) (§ cast #_"byte" (§ expr 0xff & (>> val 40))))
        (§ ass (§ name (§ ai out (§ expr offset + 6))) (§ cast #_"byte" (§ expr 0xff & (>> val 48))))
        (§ ass (§ name (§ ai out (§ expr offset + 7))) (§ cast #_"byte" (§ expr 0xff & (>> val 56))))
        nil
    )

    #_public
    #_static
    (§ defn #_"void" (§ fn uint32ToByteStreamLE) [#_"long" (§ name val), #_"OutputStream" (§ name stream)])
        (§ throws #_"IOException")
    (§ block
        (.. stream (write (§ cast #_"int" (& 0xff val))))
        (.. stream (write (§ cast #_"int" (§ expr 0xff & (>> val 8)))))
        (.. stream (write (§ cast #_"int" (§ expr 0xff & (>> val 16)))))
        (.. stream (write (§ cast #_"int" (§ expr 0xff & (>> val 24)))))
        nil
    )

    #_public
    #_static
    (§ defn #_"void" (§ fn int64ToByteStreamLE) [#_"long" (§ name val), #_"OutputStream" (§ name stream)])
        (§ throws #_"IOException")
    (§ block
        (.. stream (write (§ cast #_"int" (& 0xff val))))
        (.. stream (write (§ cast #_"int" (§ expr 0xff & (>> val 8)))))
        (.. stream (write (§ cast #_"int" (§ expr 0xff & (>> val 16)))))
        (.. stream (write (§ cast #_"int" (§ expr 0xff & (>> val 24)))))
        (.. stream (write (§ cast #_"int" (§ expr 0xff & (>> val 32)))))
        (.. stream (write (§ cast #_"int" (§ expr 0xff & (>> val 40)))))
        (.. stream (write (§ cast #_"int" (§ expr 0xff & (>> val 48)))))
        (.. stream (write (§ cast #_"int" (§ expr 0xff & (>> val 56)))))
        nil
    )

    #_public
    #_static
    (§ defn #_"void" (§ fn uint64ToByteStreamLE) [#_"BigInteger" (§ name val), #_"OutputStream" (§ name stream)])
        (§ throws #_"IOException")
    (§ block
        (§ var #_"byte[]" (§ name bytes) (.. val (toByteArray)))
        (§ if (§ expr 8 < (.. bytes length)))
        (§ block
            (§ throw (§ new #_"RuntimeException" "Input too large to encode into a uint64"))
        )

        (§ ass (§ name bytes) (reverseBytes bytes))
        (.. stream (write bytes))
        (§ if (< (.. bytes length) 8))
        (§ block
            (§ for (§ var #_"int" (§ name i) 0) :for (§ expr i < 8 - (.. bytes length)) :for (§ ass (§ name i) (+ i 1)))
            (§ block
                (.. stream (write 0))
            )
        )
        nil
    )

    ;;;
     ; Work around lack of unsigned types in Java.
     ;;
    #_public
    #_static
    (§ defn #_"boolean" (§ fn isLessThanUnsigned) [#_"long" (§ name n1), #_"long" (§ name n2)])
    (§ block
        (< (UnsignedLongs/compare n1, n2) 0)
    )

    ;;;
     ; Work around lack of unsigned types in Java.
     ;;
    #_public
    #_static
    (§ defn #_"boolean" (§ fn isLessThanOrEqualToUnsigned) [#_"long" (§ name n1), #_"long" (§ name n2)])
    (§ block
        (<= (UnsignedLongs/compare n1, n2) 0)
    )

    ;;;
     ; Hex encoding used throughout the framework.  Use with HEX.encode(byte[]) or HEX.decode(CharSequence).
     ;;
    #_public
    #_static
    (§ def #_"BaseEncoding" (§ name HEX) (.. (BaseEncoding/base16) (lowerCase)))

    ;;;
     ; Returns a copy of the given byte array in reverse order.
     ;;
    #_public
    #_static
    (§ defn #_"byte[]" (§ fn reverseBytes) [#_"byte[]" (§ name bytes)])
    (§ block
        ;; We could use the XOR trick here, but it's easier to understand if we don't.
        ;; If we find this is really a performance issue, the matter can be revisited.
        (§ var #_"byte[]" (§ name buf) (§ new #_"byte[]" (§ count (.. bytes length))))
        (§ for (§ var #_"int" (§ name i) 0) :for (§ expr i < (.. bytes length)) :for (§ ass (§ name i) (+ i 1)))
        (§ block
            (§ ass (§ name (§ ai buf i)) (§ ai bytes (- (.. bytes length) 1 i)))
        )
        buf
    )

    ;;;
     ; Returns a copy of the given byte array with the bytes of each double-word (4 bytes) reversed.
     ;
     ; @param bytes Length must be divisible by 4.
     ; @param trimLength Trim output to this length.  If positive, must be divisible by 4.
     ;;
    #_public
    #_static
    (§ defn #_"byte[]" (§ fn reverseDwordBytes) [#_"byte[]" (§ name bytes), #_"int" (§ name trimLength)])
    (§ block
        (Preconditions/checkArgument (§ expr (.. bytes length) % 4 == 0))
        (Preconditions/checkArgument (§ expr trimLength < 0 || trimLength % 4 == 0))

        (§ var #_"byte[]" (§ name rev) (§ new #_"byte[]" (§ count (if (< -1 trimLength (.. bytes length)) trimLength (.. bytes length)))))

        (§ for (§ var #_"int" (§ name i) 0) :for (§ expr i < (.. rev length)) :for (§ ass (§ name i) (+ i 4)))
        (§ block
            (System/arraycopy bytes, i, rev, (§ expr i ), 4)
            (§ for (§ var #_"int" (§ name j) 0) :for (< j 4) :for (§ ass (§ name j) (+ j 1)))
            (§ block
                (§ ass (§ name (§ ai rev (§ expr i + j))) (§ ai bytes (§ expr i + 3 - j)))
            )
        )
        rev
    )

    ;;; Parse 4 bytes from the byte array (starting at the offset) as unsigned 32-bit integer in little endian format. ;;
    #_public
    #_static
    (§ defn #_"long" (§ fn readUint32) [#_"byte[]" (§ name bytes), #_"int" (§ name offset)])
    (§ block
        (§ expr (§ expr (§ ai bytes offset) & 0xff) | (<< (§ expr (§ ai bytes (§ expr offset + 1)) & 0xff) 8) | (<< (§ expr (§ ai bytes (§ expr offset + 2)) & 0xff) 16) | (<< (§ expr (§ ai bytes (§ expr offset + 3)) & 0xff) 24))
    )

    ;;; Parse 8 bytes from the byte array (starting at the offset) as signed 64-bit integer in little endian format. ;;
    #_public
    #_static
    (§ defn #_"long" (§ fn readInt64) [#_"byte[]" (§ name bytes), #_"int" (§ name offset)])
    (§ block
        (§ expr (§ expr (§ ai bytes offset) & 0xff) | (<< (§ expr (§ ai bytes (§ expr offset + 1)) & 0xff) 8) | (<< (§ expr (§ ai bytes (§ expr offset + 2)) & 0xff) 16) | (<< (§ expr (§ ai bytes (§ expr offset + 3)) & 0xff) 24) | (<< (§ expr (§ ai bytes (§ expr offset + 4)) & 0xff) 32) | (<< (§ expr (§ ai bytes (§ expr offset + 5)) & 0xff) 40) | (<< (§ expr (§ ai bytes (§ expr offset + 6)) & 0xff) 48) | (<< (§ expr (§ ai bytes (§ expr offset + 7)) & 0xff) 56))
    )

    ;;; Parse 4 bytes from the byte array (starting at the offset) as unsigned 32-bit integer in big endian format. ;;
    #_public
    #_static
    (§ defn #_"long" (§ fn readUint32BE) [#_"byte[]" (§ name bytes), #_"int" (§ name offset)])
    (§ block
        (§ expr (<< (§ expr (§ ai bytes offset) & 0xff) 24) |  (<< (§ expr (§ ai bytes (§ expr offset + 1)) & 0xff) 16) |  (<< (§ expr (§ ai bytes (§ expr offset + 2)) & 0xff) 8) |   (§ expr (§ ai bytes (§ expr offset + 3)) & 0xff))
    )

    ;;; Parse 2 bytes from the byte array (starting at the offset) as unsigned 16-bit integer in big endian format. ;;
    #_public
    #_static
    (§ defn #_"int" (§ fn readUint16BE) [#_"byte[]" (§ name bytes), #_"int" (§ name offset)])
    (§ block
        (§ expr (<< (§ expr (§ ai bytes offset) & 0xff) 8) |   (§ expr (§ ai bytes (§ expr offset + 1)) & 0xff))
    )

    ;;;
     ; Calculates RIPEMD160(SHA256(input)).  This is used in Address calculations.
     ;;
    #_public
    #_static
    (§ defn #_"byte[]" (§ fn sha256hash160) [#_"byte[]" (§ name input)])
    (§ block
        (§ var #_"byte[]" (§ name sha256) (Sha256Hash/hash input))
        (§ var #_"RIPEMD160Digest" (§ name digest) (§ new #_"RIPEMD160Digest"))
        (.. digest (update sha256, 0, (.. sha256 length)))
        (§ var #_"byte[]" (§ name out) (§ new #_"byte[]" (§ count 20)))
        (.. digest (doFinal out, 0))
        out
    )

    ;;;
     ; MPI encoded numbers are produced by the OpenSSL BN_bn2mpi function.  They consist of
     ; a 4 byte big endian length field, followed by the stated number of bytes representing
     ; the number in big endian format (with a sign bit).
     ; @param hasLength can be set to false if the given array is missing the 4 byte length field.
     ;;
    #_public
    #_static
    (§ defn #_"BigInteger" (§ fn decodeMPI) [#_"byte[]" (§ name mpi), #_"boolean" (§ name hasLength)])
    (§ block
        (§ var #_"byte[]" (§ name buf))
        (§ if hasLength)
        (§ block
            (§ var #_"int" (§ name length) (§ cast #_"int" (readUint32BE mpi, 0)))
            (§ ass (§ name buf) (§ new #_"byte[]" (§ count length)))
            (System/arraycopy mpi, 4, buf, 0, length)
        )
        (§ else )
        (§ block
            (§ ass (§ name buf) mpi)
        )
        (§ if (== (.. buf length) 0))
        (§ block
            (§ return BigInteger/ZERO)
        )

        (§ var #_"boolean" (§ name isNegative) (== (§ expr (§ ai buf 0) & 0x80) 0x80))
        (§ if isNegative)
        (§ block
            (§ ass (§ name (§ ai buf 0)) (§ expr (§ ai buf 0) & 0x7f))
        )
        (§ var #_"BigInteger" (§ name result) (§ new #_"BigInteger" buf))
        (if isNegative (.. result (negate)) result)
    )

    ;;;
     ; MPI encoded numbers are produced by the OpenSSL BN_bn2mpi function.  They consist of
     ; a 4 byte big endian length field, followed by the stated number of bytes representing
     ; the number in big endian format (with a sign bit).
     ; @param includeLength indicates whether the 4 byte length field should be included.
     ;;
    #_public
    #_static
    (§ defn #_"byte[]" (§ fn encodeMPI) [#_"BigInteger" (§ name value), #_"boolean" (§ name includeLength)])
    (§ block
        (§ if (.. value (equals BigInteger/ZERO)))
        (§ block
            (§ return (if includeLength (§ new #_"byte[]" (§ coll 0x00, 0x00, 0x00, 0x00 )) (§ new #_"byte[]")))
        )

        (§ var #_"boolean" (§ name isNegative) (< (.. value (signum)) 0))
        (§ if isNegative)
        (§ block
            (§ ass (§ name value) (.. value (negate)))
        )
        (§ var #_"byte[]" (§ name array) (.. value (toByteArray)))
        (§ var #_"int" (§ name length) (.. array length))
        (§ if (== (§ expr (§ ai array 0) & 0x80) 0x80))
        (§ block
            (§ ass (§ name length) (+ length 1))
        )

        (§ if includeLength)
        (§ block
            (§ var #_"byte[]" (§ name result) (§ new #_"byte[]" (§ count length + 4)))
            (System/arraycopy array, 0, result, (§ expr length - (.. array length) + 3), (.. array length))
            (uint32ToByteArrayBE length, result, 0)
            (§ if isNegative)
            (§ block
                (§ ass (§ name (§ ai result 4)) (§ expr (§ ai result 4) | 0x80))
            )
            (§ return result)
        )
        (§ else )
        (§ block
            (§ var #_"byte[]" (§ name result))
            (§ if (§ expr length != (.. array length)))
            (§ block
                (§ ass (§ name result) (§ new #_"byte[]" (§ count length)))
                (System/arraycopy array, 0, result, 1, (.. array length))
            )
            (§ else )
            (§ block
                (§ ass (§ name result) array)
            )
            (§ if isNegative)
            (§ block
                (§ ass (§ name (§ ai result 0)) (§ expr (§ ai result 0) | 0x80))
            )
            (§ return result)
        )
    )

    ;;;
     ; <p>The "compact" format is a representation of a whole number N using an unsigned 32 bit number similar to
     ; a floating point format.  The most significant 8 bits are the unsigned exponent of base 256.  This exponent
     ; can be thought of as "number of bytes of N".  The lower 23 bits are the mantissa.  Bit number 24 (0x800000)
     ; represents the sign of N.  Therefore, N = (-1^sign) * mantissa * 256^(exponent-3).</p>
     ;
     ; <p>Satoshi's original implementation used BN_bn2mpi() and BN_mpi2bn().  MPI uses the most significant bit of
     ; the first byte as sign.  Thus 0x1234560000 is compact 0x05123456 and 0xc0de000000 is compact 0x0600c0de.
     ; Compact 0x05c0de00 would be -0x40de000000.</p>
     ;
     ; <p>Bitcoin only uses this "compact" format for encoding difficulty targets, which are unsigned 256bit quantities.
     ; Thus, all the complexities of the sign bit and using base 256 are probably an implementation accident.</p>
     ;;
    #_public
    #_static
    (§ defn #_"BigInteger" (§ fn decodeCompactBits) [#_"long" (§ name compact)])
    (§ block
        (§ var #_"int" (§ name size) (& (§ cast #_"int" (>> compact 24)) 0xff))
        (§ var #_"byte[]" (§ name bytes) (§ new #_"byte[]" (§ count 4 + size)))
        (§ ass (§ name (§ ai bytes 3)) (§ cast #_"byte" size))
        (§ if (<= 1 size))
        (§ block
            (§ ass (§ name (§ ai bytes 4)) (§ cast #_"byte" (& (>> compact 16) 0xff)))
        )
        (§ if (<= 2 size))
        (§ block
            (§ ass (§ name (§ ai bytes 5)) (§ cast #_"byte" (& (>> compact 8) 0xff)))
        )
        (§ if (<= 3 size))
        (§ block
            (§ ass (§ name (§ ai bytes 6)) (§ cast #_"byte" (& compact 0xff)))
        )
        (decodeMPI bytes, true)
    )

    ;;;
     ; @see Utils#decodeCompactBits(long)
     ;;
    #_public
    #_static
    (§ defn #_"long" (§ fn encodeCompactBits) [#_"BigInteger" (§ name value)])
    (§ block
        (§ var #_"long" (§ name result))
        (§ var #_"int" (§ name size) (.. value (toByteArray) length))
        (§ if (<= size 3))
        (§ block
            (§ ass (§ name result) (§ expr (.. value (longValue)) << 8 * (- 3 size)))
        )
        (§ else )
        (§ block
            (§ ass (§ name result) (.. value (shiftRight (§ expr 8 * (- size 3))) (longValue)))
        )
        ;; The 0x00800000 bit denotes the sign.
        ;; Thus, if it is already set, divide the mantissa by 256 and increase the exponent.
        (§ if (!= (& result 0x00800000) 0))
        (§ block
            (§ ass (§ name result) (>> result 8))
            (§ ass (§ name size) (+ size 1))
        )
        (§ ass (§ name result) (§ expr result | (<< size 24)))
        (§ ass (§ name result) (§ expr result | (if (== (.. value (signum)) -1) 0x00800000 0)))
        result
    )

    ;;;
     ; If non-null, overrides the return value of now().
     ;;
    #_public
    #_static
    #_volatile
    (§ def #_"Date" (§ name mockTime))

    ;;;
     ; Advances (or rewinds) the mock clock by the given number of seconds.
     ;;
    #_public
    #_static
    (§ defn #_"Date" (§ fn rollMockClock) [#_"int" (§ name seconds)])
    (§ block
        (rollMockClockMillis (* seconds 1000))
    )

    ;;;
     ; Advances (or rewinds) the mock clock by the given number of milliseconds.
     ;;
    #_public
    #_static
    (§ defn #_"Date" (§ fn rollMockClockMillis) [#_"long" (§ name millis)])
    (§ block
        (§ if (nil? mockTime))
        (§ block
            (§ throw (§ new #_"IllegalStateException" "You need to use setMockClock() first."))
        )

        (§ ass (§ name mockTime) (§ new #_"Date" (+ (.. mockTime (getTime)) millis)))
        mockTime
    )

    ;;;
     ; Sets the mock clock to the current time.
     ;;
    #_public
    #_static
    (§ defn #_"void" (§ fn setMockClock) [])
    (§ block
        (§ ass (§ name mockTime) (§ new #_"Date"))
        nil
    )

    ;;;
     ; Sets the mock clock to the given time (in seconds).
     ;;
    #_public
    #_static
    (§ defn #_"void" (§ fn setMockClock) [#_"long" (§ name mockClockSeconds)])
    (§ block
        (§ ass (§ name mockTime) (§ new #_"Date" (* mockClockSeconds 1000)))
        nil
    )

    ;;;
     ; Returns the current time, or a mocked out equivalent.
     ;;
    #_public
    #_static
    (§ defn #_"Date" (§ fn now) [])
    (§ block
        (or mockTime (§ new #_"Date"))
    )

    ;; TODO: Replace usages of this where the result is / 1000 with currentTimeSeconds.
    ;;; Returns the current time in milliseconds since the epoch, or a mocked out equivalent. ;;
    #_public
    #_static
    (§ defn #_"long" (§ fn currentTimeMillis) [])
    (§ block
        (if (some? mockTime) (.. mockTime (getTime)) (System/currentTimeMillis))
    )

    #_public
    #_static
    (§ defn #_"long" (§ fn currentTimeSeconds) [])
    (§ block
        (/ (currentTimeMillis) 1000)
    )

    #_private
    #_static
    (§ def- #_"TimeZone" (§ name UTC) (TimeZone/getTimeZone "UTC"))

    ;;;
     ; Formats a given date+time value to an ISO 8601 string.
     ; @param dateTime value to format, as a Date
     ;;
    #_public
    #_static
    (§ defn #_"String" (§ fn dateTimeFormat) [#_"Date" (§ name dateTime)])
    (§ block
        (§ var #_"DateFormat" (§ name iso8601) (§ new #_"SimpleDateFormat" "yyyy-MM-dd'T'HH:mm:ss'Z'", Locale/US))
        (.. iso8601 (setTimeZone UTC))
        (.. iso8601 (format dateTime))
    )

    ;;;
     ; Formats a given date+time value to an ISO 8601 string.
     ; @param dateTime value to format, unix time (ms)
     ;;
    #_public
    #_static
    (§ defn #_"String" (§ fn dateTimeFormat) [#_"long" (§ name dateTime)])
    (§ block
        (§ var #_"DateFormat" (§ name iso8601) (§ new #_"SimpleDateFormat" "yyyy-MM-dd'T'HH:mm:ss'Z'", Locale/US))
        (.. iso8601 (setTimeZone UTC))
        (.. iso8601 (format dateTime))
    )

    #_public
    #_static
    (§ defn #_"byte[]" (§ fn copyOf) [#_"byte[]" (§ name in), #_"int" (§ name length)])
    (§ block
        (§ var #_"byte[]" (§ name out) (§ new #_"byte[]" (§ count length)))
        (System/arraycopy in, 0, out, 0, (Math/min length, (.. in length)))
        out
    )

    ;;;
     ; Creates a copy of bytes and appends b to the end of it.
     ;;
    #_public
    #_static
    (§ defn #_"byte[]" (§ fn appendByte) [#_"byte[]" (§ name bytes), #_"byte" (§ name b)])
    (§ block
        (§ var #_"byte[]" (§ name result) (Arrays/copyOf bytes, (§ expr (.. bytes length) + 1)))
        (§ ass (§ name (§ ai result (§ expr result.length - 1))) b)
        result
    )

    ;;;
     ; Constructs a new String by decoding the given bytes using the specified charset.
     ;
     ; This is a convenience method which wraps the checked exception with a RuntimeException.
     ; The exception can never occur given the charsets
     ; US-ASCII, ISO-8859-1, UTF-8, UTF-16, UTF-16LE or UTF-16BE.
     ;
     ; @param bytes The bytes to be decoded into characters.
     ; @param charsetName The name of a supported {@linkplain java.nio.charset.Charset charset}.
     ; @return the decoded String.
     ;;
    #_public
    #_static
    (§ defn #_"String" (§ fn toString) [#_"byte[]" (§ name bytes), #_"String" (§ name charsetName)])
    (§ block
        (§ try )
        (§ block
            (§ return (§ new #_"String" bytes, charsetName))
        )
        (§ catch #_"UnsupportedEncodingException" (§ name e))
        (§ block
            (§ throw (§ new #_"RuntimeException" e))
        )
    )

    ;;;
     ; Encodes the given string into a sequence of bytes using the named charset.
     ;
     ; This is a convenience method which wraps the checked exception with a RuntimeException.
     ; The exception can never occur given the charsets
     ; US-ASCII, ISO-8859-1, UTF-8, UTF-16, UTF-16LE or UTF-16BE.
     ;
     ; @param str The string to encode into bytes.
     ; @param charsetName The name of a supported {@linkplain java.nio.charset.Charset charset}.
     ; @return the encoded bytes.
     ;;
    #_public
    #_static
    (§ defn #_"byte[]" (§ fn toBytes) [#_"CharSequence" (§ name str), #_"String" (§ name charsetName)])
    (§ block
        (§ try )
        (§ block
            (§ return (.. str (toString) (getBytes charsetName)))
        )
        (§ catch #_"UnsupportedEncodingException" (§ name e))
        (§ block
            (§ throw (§ new #_"RuntimeException" e))
        )
    )

    ;;;
     ; Attempts to parse the given string as arbitrary-length hex or base58 and then return the results,
     ; or null if neither parse was successful.
     ;;
    #_public
    #_static
    (§ defn #_"byte[]" (§ fn parseAsHexOrBase58) [#_"String" (§ name data)])
    (§ block
        (§ try )
        (§ block
            (§ return (.. HEX (decode data)))
        )
        (§ catch #_"Exception" (§ name _))
        (§ block
            ;; Didn't decode as hex, try base58.
            (§ try )
            (§ block
                (§ return (Base58/decodeChecked data))
            )
            (§ catch #_"AddressFormatException" (§ name __))
            (§ block
                (§ return nil)
            )
        )
    )

    #_public
    #_static
    (§ defn #_"boolean" (§ fn isWindows) [])
    (§ block
        (.. (System/getProperty "os.name") (toLowerCase) (contains "win"))
    )

    ;;;
     ; <p>Given a textual message, returns a byte buffer formatted as follows:</p>
     ;
     ; <p><tt>[24] "Bitcoin Signed Message:\n" [message.length as a varint] message</tt>.</p>
     ;;
    #_public
    #_static
    (§ defn #_"byte[]" (§ fn formatMessageForSigning) [#_"String" (§ name message)])
    (§ block
        (§ try )
        (§ block
            (§ var #_"ByteArrayOutputStream" (§ name bos) (§ new #_"ByteArrayOutputStream"))
            (.. bos (write (.. BITCOIN_SIGNED_MESSAGE_HEADER_BYTES length)))
            (.. bos (write BITCOIN_SIGNED_MESSAGE_HEADER_BYTES))
            (§ var #_"byte[]" (§ name messageBytes) (.. message (getBytes Charsets/UTF_8)))
            (§ var #_"VarInt" (§ name size) (§ new #_"VarInt" (.. messageBytes length)))
            (.. bos (write (.. size (encode))))
            (.. bos (write messageBytes))
            (§ return (.. bos (toByteArray)))
        )
        (§ catch #_"IOException" (§ name e))
        (§ block
            (§ throw (§ new #_"RuntimeException" e)) ;; Cannot happen.
        )
    )

    ;; 00000001, 00000010, 00000100, 00001000, ...
    #_private
    #_static
    (§ def- #_"int[]" (§ name bitMask) (§ coll 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80 ))

    ;;; Checks if the given bit is set in data, using little endian (not the same as Java native big endian). ;;
    #_public
    #_static
    (§ defn #_"boolean" (§ fn checkBitLE) [#_"byte[]" (§ name data), #_"int" (§ name index)])
    (§ block
        (!= (§ expr (§ ai data (§ expr index >>> 3)) & (§ ai bitMask (§ expr 7 & index))) 0)
    )

    ;;; Sets the given bit in data to one, using little endian (not the same as Java native big endian). ;;
    #_public
    #_static
    (§ defn #_"void" (§ fn setBitLE) [#_"byte[]" (§ name data), #_"int" (§ name index)])
    (§ block
        (§ ass (§ name (§ ai data (§ expr index >>> 3))) (§ expr (§ ai data (§ expr index >>> 3)) | (§ ai bitMask (§ expr 7 & index))))
        nil
    )

    ;;; Sleep for a span of time, or mock sleep if enabled. ;;
    #_public
    #_static
    (§ defn #_"void" (§ fn sleep) [#_"long" (§ name millis)])
    (§ block
        (§ if (nil? mockSleepQueue))
        (§ block
            (sleepUninterruptibly millis, TimeUnit/MILLISECONDS)
        )
        (§ else )
        (§ block
            (§ try )
            (§ block
                (§ var #_"boolean" (§ name isMultiPass) (.. mockSleepQueue (take)))
                (rollMockClockMillis millis)
                (§ if isMultiPass)
                (§ block
                    (.. mockSleepQueue (offer true))
                )
            )
            (§ catch #_"InterruptedException" (§ name _))
            (§ block
                ;; Ignored.
            )
        )
        nil
    )

    ;;; Enable or disable mock sleep.  If enabled, set mock time to current time. ;;
    #_public
    #_static
    (§ defn #_"void" (§ fn setMockSleep) [#_"boolean" (§ name isEnable)])
    (§ block
        (§ if isEnable)
        (§ block
            (§ ass (§ name mockSleepQueue) (§ new #_"ArrayBlockingQueue<>" 1))
            (§ ass (§ name mockTime) (§ new #_"Date" (System/currentTimeMillis)))
        )
        (§ else )
        (§ block
            (§ ass (§ name mockSleepQueue) nil)
        )
        nil
    )

    ;;; Let sleeping thread pass the synchronization point. ;;
    #_public
    #_static
    (§ defn #_"void" (§ fn passMockSleep) [])
    (§ block
        (.. mockSleepQueue (offer false))
        nil
    )

    ;;; Let the sleeping thread pass the synchronization point any number of times. ;;
    #_public
    #_static
    (§ defn #_"void" (§ fn finishMockSleep) [])
    (§ block
        (§ if (some? mockSleepQueue))
        (§ block
            (.. mockSleepQueue (offer true))
        )
        nil
    )

    #_private
    #_static
    (§ def- #_"int" (§ name isAndroid) -1)
    #_public
    #_static
    (§ defn #_"boolean" (§ fn isAndroidRuntime) [])
    (§ block
        (§ if (§ expr isAndroid == -1))
        (§ block
            (§ var #_"String" (§ name runtime) (System/getProperty "java.runtime.name"))
            (§ ass (§ name isAndroid) (if (§ and (some? runtime) && (.. runtime (equals "Android Runtime"))) 1 0))
        )
        (§ expr isAndroid == 1)
    )

    #_private
    #_static
    (§ class #_"Pair" (§ implements #_"Comparable<Pair>")
        (§ var #_"int" (§ name item))
        (§ var #_"int" (§ name count))

        #_public
        (§ constructor #_"Pair" [#_"int" (§ name item), #_"int" (§ name count)])
        (§ block
            (§ ass (§ name (.. this count)) count)
            (§ ass (§ name (.. this item)) item)
            this
        )

        ;; Note that in this implementation compareTo() is not consistent with equals().
        #_override
        #_public
        (§ method #_"int" (§ fn compareTo) [#_"Pair" (§ name o)])
        (§ block
            (§ neg (Ints/compare count, (.. o count)))
        )
    )

    #_public
    #_static
    (§ defn #_"int" (§ fn maxOfMostFreq) [#_"int..." (§ name items)])
    (§ block
        ;; Java 6 sucks.
        (§ var #_"ArrayList<Integer>" (§ name list) (§ new #_"ArrayList<>" (.. items length)))
        (§ for (§ var #_"int" (§ name item)) :for items)
        (§ block
            (.. list (add item))
        )
        (maxOfMostFreq list)
    )

    #_public
    #_static
    (§ defn #_"int" (§ fn maxOfMostFreq) [#_"List<Integer>" (§ name items)])
    (§ block
        (§ if (.. items (isEmpty)))
        (§ block
            (§ return 0)
        )

        ;; This would be much easier in a functional language (or in Java 8).
        (§ ass (§ name items) (.. (Ordering/natural) (reverse) (sortedCopy items)))
        (§ var #_"LinkedList<Pair>" (§ name pairs) (Lists/newLinkedList))
        (.. pairs (add (§ new #_"Pair" (.. items (get 0)), 0)))
        (§ for (§ var #_"int" (§ name item)) :for items)
        (§ block
            (§ var #_"Pair" (§ name pair) (.. pairs (getLast)))
            (§ if (!= (.. pair item) item))
            (§ block
                (.. pairs (add (§ ass (§ name pair) (§ new #_"Pair" item, 0))))
            )
            (§ ass (§ name (.. pair count)) (+ (.. pair count) 1))
        )
        ;; pairs now contains a uniqified list of the sorted inputs, with counts for how often that item appeared.
        ;; Now sort by how frequently they occur, and pick the max of the most frequent.
        (Collections/sort pairs)
        (§ var #_"int" (§ name maxCount) (.. pairs (getFirst) count))
        (§ var #_"int" (§ name maxItem) (.. pairs (getFirst) item))
        (§ for (§ var #_"Pair" (§ name pair)) :for pairs)
        (§ block
            (§ if (!= (.. pair count) maxCount))
            (§ block
                (§ break )
            )
            (§ ass (§ name maxItem) (Math/max maxItem, (.. pair item)))
        )
        maxItem
    )

    ;;;
     ; Reads and joins together with LF char (\n) all the lines from given file.
     ; It's assumed that file is in UTF-8.
     ;;
    #_public
    #_static
    (§ defn #_"String" (§ fn getResourceAsString) [#_"URL" (§ name url)])
        (§ throws #_"IOException")
    (§ block
        (§ var #_"List<String>" (§ name lines) (Resources/readLines url, Charsets/UTF_8))
        (.. (Joiner/on "\n") (join lines))
    )

    ;; Can't use Closeable here because it's Java 7 only and Android devices only got that with KitKat.
    #_public
    #_static
    (§ defn #_"InputStream" (§ fn closeUnchecked) [#_"InputStream" (§ name stream)])
    (§ block
        (§ try )
        (§ block
            (.. stream (close))
            (§ return stream)
        )
        (§ catch #_"IOException" (§ name e))
        (§ block
            (§ throw (§ new #_"RuntimeException" e))
        )
    )

    #_public
    #_static
    (§ defn #_"OutputStream" (§ fn closeUnchecked) [#_"OutputStream" (§ name stream)])
    (§ block
        (§ try )
        (§ block
            (.. stream (close))
            (§ return stream)
        )
        (§ catch #_"IOException" (§ name e))
        (§ block
            (§ throw (§ new #_"RuntimeException" e))
        )
    )
)

#_(ns org.bitcoinj.core #_"VarInt")

;;;
 ; A variable-length encoded unsigned integer using Satoshi's encoding (a.k.a. "CompactSize").
 ;;
#_public
(§ class #_"VarInt"
    #_public
    (§ field #_"long" (§ name value))
    #_private
    (§ field- #_"int" (§ name originallyEncodedSize))

    ;;;
     ; Constructs a new VarInt with the given unsigned long value.
     ;
     ; @param value the unsigned long value (beware widening conversion of negatives!)
     ;;
    #_public
    (§ constructor #_"VarInt" [#_"long" (§ name value)])
    (§ block
        (§ ass (§ name (.. this value)) value)
        (§ ass (§ name originallyEncodedSize) (getSizeInBytes))
        this
    )

    ;;;
     ; Constructs a new VarInt with the value parsed from the specified offset of the given buffer.
     ;
     ; @param buf The buffer containing the value.
     ; @param offset The offset of the value.
     ;;
    #_public
    (§ constructor #_"VarInt" [#_"byte[]" (§ name buf), #_"int" (§ name offset)])
    (§ block
        (§ var #_"int" (§ name first) (§ expr 0xff & (§ ai buf offset)))
        (§ if (< first 253))
        (§ block
            (§ ass (§ name value) first)
            (§ ass (§ name originallyEncodedSize) 1) ;; 1 data byte (8 bits)
        )
        (§ elseif (§ expr first == 253))
        (§ block
            (§ ass (§ name value) (| (§ expr 0xff & (§ ai buf (§ expr offset + 1))) (<< (§ expr 0xff & (§ ai buf (§ expr offset + 2))) 8)))
            (§ ass (§ name originallyEncodedSize) 3) ;; 1 marker + 2 data bytes (16 bits)
        )
        (§ elseif (§ expr first == 254))
        (§ block
            (§ ass (§ name value) (Utils/readUint32 buf, (§ expr offset + 1)))
            (§ ass (§ name originallyEncodedSize) 5) ;; 1 marker + 4 data bytes (32 bits)
        )
        (§ else )
        (§ block
            (§ ass (§ name value) (Utils/readInt64 buf, (§ expr offset + 1)))
            (§ ass (§ name originallyEncodedSize) 9) ;; 1 marker + 8 data bytes (64 bits)
        )
        this
    )

    ;;;
     ; Returns the original number of bytes used to encode the value if it was
     ; deserialized from a byte array, or the minimum encoded size if it was not.
     ;;
    #_public
    (§ method #_"int" (§ fn getOriginalSizeInBytes) [])
    (§ block
        originallyEncodedSize
    )

    ;;;
     ; Returns the minimum encoded size of the value.
     ;;
    #_public
    (§ method #_"int" (§ fn getSizeInBytes) [])
    (§ block
        (sizeOf value)
    )

    ;;;
     ; Returns the minimum encoded size of the given unsigned long value.
     ;
     ; @param value the unsigned long value (beware widening conversion of negatives!)
     ;;
    #_public
    #_static
    (§ defn #_"int" (§ fn sizeOf) [#_"long" (§ name value)])
    (§ block
        ;; if negative, it's actually a very large unsigned long value
        (§ if (< value 0))
        (§ block
            (§ return 9) ;; 1 marker + 8 data bytes
        )
        (§ if (< value 253))
        (§ block
            (§ return 1) ;; 1 data byte
        )
        (§ if (<= value 0xffff))
        (§ block
            (§ return 3) ;; 1 marker + 2 data bytes
        )
        (§ if (<= value 0xffffffff))
        (§ block
            (§ return 5) ;; 1 marker + 4 data bytes
        )
        9 ;; 1 marker + 8 data bytes
    )

    ;;;
     ; Encodes the value into its minimal representation.
     ;
     ; @return the minimal encoded bytes of the value.
     ;;
    #_public
    (§ method #_"byte[]" (§ fn encode) [])
    (§ block
        (§ var #_"byte[]" (§ name bytes))
        (§ switch (sizeOf value))
        (§ block
            (§ case 1)
            (§ block
                (§ return (§ new #_"byte[]" (§ coll (§ cast #_"byte" value) )))
            )
            (§ case 3)
            (§ block
                (§ return (§ new #_"byte[]" (§ coll (§ cast #_"byte" 253), (§ cast #_"byte" value), (§ cast #_"byte" (>> value 8)) )))
            )
            (§ case 5)
            (§ block
                (§ ass (§ name bytes) (§ new #_"byte[]" (§ count 5)))
                (§ ass (§ name (§ ai bytes 0)) (§ cast #_"byte" 254))
                (Utils/uint32ToByteArrayLE value, bytes, 1)
                (§ return bytes)
            )
            (§ default )
            (§ block
                (§ ass (§ name bytes) (§ new #_"byte[]" (§ count 9)))
                (§ ass (§ name (§ ai bytes 0)) (§ cast #_"byte" 255))
                (Utils/uint64ToByteArrayLE value, bytes, 1)
                (§ return bytes)
            )
        )
    )
)

#_(ns org.bitcoinj.core #_"VerificationException")

#_public
(§ class #_"VerificationException" (§ extends #_"RuntimeException")
    #_public
    (§ constructor #_"VerificationException" [#_"String" (§ name msg)])
    (§ block
        (§ super msg)
        this
    )

    #_public
    (§ constructor #_"VerificationException" [#_"Exception" (§ name e)])
    (§ block
        (§ super e)
        this
    )

    #_public
    (§ constructor #_"VerificationException" [#_"String" (§ name msg), #_"Throwable" (§ name t)])
    (§ block
        (§ super msg, t)
        this
    )

    #_public
    #_static
    (§ class #_"EmptyInputsOrOutputs" (§ extends #_"VerificationException")
        #_public
        (§ constructor #_"EmptyInputsOrOutputs" [])
        (§ block
            (§ super "Transaction had no inputs or no outputs.")
            this
        )
    )

    #_public
    #_static
    (§ class #_"LargerThanMaxBlockSize" (§ extends #_"VerificationException")
        #_public
        (§ constructor #_"LargerThanMaxBlockSize" [])
        (§ block
            (§ super "Transaction larger than MAX_BLOCK_SIZE")
            this
        )
    )

    #_public
    #_static
    (§ class #_"DuplicatedOutPoint" (§ extends #_"VerificationException")
        #_public
        (§ constructor #_"DuplicatedOutPoint" [])
        (§ block
            (§ super "Duplicated outpoint")
            this
        )
    )

    #_public
    #_static
    (§ class #_"NegativeValueOutput" (§ extends #_"VerificationException")
        #_public
        (§ constructor #_"NegativeValueOutput" [])
        (§ block
            (§ super "Transaction output negative")
            this
        )
    )

    #_public
    #_static
    (§ class #_"ExcessiveValue" (§ extends #_"VerificationException")
        #_public
        (§ constructor #_"ExcessiveValue" [])
        (§ block
            (§ super "Total transaction output value greater than possible")
            this
        )
    )

    #_public
    #_static
    (§ class #_"CoinbaseScriptSizeOutOfRange" (§ extends #_"VerificationException")
        #_public
        (§ constructor #_"CoinbaseScriptSizeOutOfRange" [])
        (§ block
            (§ super "Coinbase script size out of range")
            this
        )
    )

    #_public
    #_static
    (§ class #_"BlockVersionOutOfDate" (§ extends #_"VerificationException")
        #_public
        (§ constructor #_"BlockVersionOutOfDate" [#_"long" (§ name version)])
        (§ block
            (§ super (§ expr "Block version #" + version + " is outdated."))
            this
        )
    )

    #_public
    #_static
    (§ class #_"UnexpectedCoinbaseInput" (§ extends #_"VerificationException")
        #_public
        (§ constructor #_"UnexpectedCoinbaseInput" [])
        (§ block
            (§ super "Coinbase input as input in non-coinbase transaction")
            this
        )
    )

    #_public
    #_static
    (§ class #_"CoinbaseHeightMismatch" (§ extends #_"VerificationException")
        #_public
        (§ constructor #_"CoinbaseHeightMismatch" [#_"String" (§ name message)])
        (§ block
            (§ super message)
            this
        )
    )
)

#_(ns org.bitcoinj.core #_"VersionAck")

;;;
 ; <p>The verack message, sent by a client accepting the version message they
 ; received from their peer.</p>
 ;
 ; <p>Instances of this class are not safe for use by multiple threads.</p>
 ;;
#_public
(§ class #_"VersionAck" (§ extends #_"EmptyMessage")
    #_public
    (§ constructor #_"VersionAck" [])
    (§ block
        this
    )

    ;; this is needed by the BitcoinSerializer
    #_public
    (§ constructor #_"VersionAck" [#_"NetworkParameters" (§ name params), #_"byte[]" (§ name payload)])
    (§ block
        this
    )
)

#_(ns org.bitcoinj.core #_"VersionMessage"
    (:import [java.io IOException OutputStream]
             [java.math BigInteger]
             [java.net InetAddress UnknownHostException]
             [java.util Locale])
    (:import [com.google.common.base Objects]
             [com.google.common.net InetAddresses]))

;;;
 ; <p>A VersionMessage holds information exchanged during connection setup with another peer.  Most of the fields are
 ; not particularly interesting.  The subVer field, since BIP 14, acts as a User-Agent string would.  You can and should
 ; append to or change the subVer for your own software so other implementations can identify it, and you can look at
 ; the subVer field received from other nodes to see what they are running.</p>
 ;
 ; <p>After creating yourself a VersionMessage, you can pass it to {@link PeerGroup#setVersionMessage(VersionMessage)}
 ; to ensure it will be used for each new connection.</p>
 ;
 ; <p>Instances of this class are not safe for use by multiple threads.</p>
 ;;
#_public
(§ class #_"VersionMessage" (§ extends #_"Message")
    ;;; The version of this library release, as a string. ;;
    #_public
    #_static
    (§ def #_"String" (§ name BITCOINJ_VERSION) "0.15-SNAPSHOT")
    ;;; The value that is prepended to the subVer field of this application. ;;
    #_public
    #_static
    (§ def #_"String" (§ name LIBRARY_SUBVER) (§ expr "/bitcoinj:" + BITCOINJ_VERSION + "/"))

    ;;; A services flag that denotes whether the peer has a copy of the block chain or not. ;;
    #_public
    #_static
    (§ def #_"int" (§ name NODE_NETWORK) 1)

    ;;;
     ; The version number of the protocol spoken.
     ;;
    #_public
    (§ field #_"int" (§ name clientVersion))
    ;;;
     ; Flags defining what optional services are supported.
     ;;
    #_public
    (§ field #_"long" (§ name localServices))
    ;;;
     ; What the other side believes the current time to be, in seconds.
     ;;
    #_public
    (§ field #_"long" (§ name time))
    ;;;
     ; What the other side believes the address of this program is.  Not used.
     ;;
    #_public
    (§ field #_"PeerAddress" (§ name myAddr))
    ;;;
     ; What the other side believes their own address is.  Not used.
     ;;
    #_public
    (§ field #_"PeerAddress" (§ name theirAddr))
    ;;;
     ; User-Agent as defined in <a href="https://github.com/bitcoin/bips/blob/master/bip-0014.mediawiki">BIP 14</a>.
     ; Bitcoin Core sets it to something like "/Satoshi:0.9.1/".
     ;;
    #_public
    (§ field #_"String" (§ name subVer))
    ;;;
     ; How many blocks are in the chain, according to the other side.
     ;;
    #_public
    (§ field #_"long" (§ name bestHeight))
    ;;;
     ; Whether or not to relay tx invs before a filter is received.
     ; See <a href="https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki#extensions-to-existing-messages">BIP 37</a>.
     ;;
    #_public
    (§ field #_"boolean" (§ name relayTxesBeforeFilter))

    #_public
    (§ constructor #_"VersionMessage" [#_"NetworkParameters" (§ name params), #_"byte[]" (§ name payload)])
        (§ throws #_"ProtocolException")
    (§ block
        (§ super params, payload, 0)
        this
    )

    ;; It doesn't really make sense to ever lazily parse a version message or to retain the backing bytes.
    ;; If you're receiving this on the wire you need to check the protocol version and it will never need
    ;; to be sent back down the wire.

    #_public
    (§ constructor #_"VersionMessage" [#_"NetworkParameters" (§ name params), #_"int" (§ name newBestHeight)])
    (§ block
        (§ super params)

        (§ ass (§ name clientVersion) (.. params (getProtocolVersionNum NetworkParameters/ProtocolVersion/CURRENT)))
        (§ ass (§ name localServices) 0)
        (§ ass (§ name time) (/ (System/currentTimeMillis) 1000))
        ;; Note that the Bitcoin Core doesn't do anything with these, and finding out your own external IP address
        ;; is kind of tricky anyway, so we just put nonsense here for now.
        (§ var #_"InetAddress" (§ name localhost) (InetAddresses/forString "127.0.0.1"))
        (§ ass (§ name myAddr) (§ new #_"PeerAddress" params, localhost, (.. params (getPort)), 0, BigInteger/ZERO))
        (§ ass (§ name theirAddr) (§ new #_"PeerAddress" params, localhost, (.. params (getPort)), 0, BigInteger/ZERO))
        (§ ass (§ name subVer) LIBRARY_SUBVER)
        (§ ass (§ name bestHeight) newBestHeight)
        (§ ass (§ name relayTxesBeforeFilter) true)

        (§ ass (§ name length) 85)
        (§ if (< 31402 protocolVersion))
        (§ block
            (§ ass (§ name length) (+ length 8))
        )
        (§ ass (§ name length) (§ expr length + (VarInt/sizeOf (.. subVer (length))) + (.. subVer (length))))
        this
    )

    #_override
    #_protected
    (§ method #_"void" (§ fn parse) [])
        (§ throws #_"ProtocolException")
    (§ block
        (§ ass (§ name clientVersion) (§ cast #_"int" (readUint32)))
        (§ ass (§ name localServices) (.. (readUint64) (longValue)))
        (§ ass (§ name time) (.. (readUint64) (longValue)))
        (§ ass (§ name myAddr) (§ new #_"PeerAddress" params, payload, cursor, 0))
        (§ ass (§ name cursor) (§ expr cursor + (.. myAddr (getMessageSize))))
        (§ ass (§ name theirAddr) (§ new #_"PeerAddress" params, payload, cursor, 0))
        (§ ass (§ name cursor) (§ expr cursor + (.. theirAddr (getMessageSize))))
        ;; uint64 localHostNonce (random data)
        ;; We don't care about the localhost nonce.  It's used to detect connecting back to yourself in cases where
        ;; there are NATs and proxies in the way.  However we don't listen for inbound connections so it's irrelevant.
        (readUint64)
        (§ try )
        (§ block
            ;; Initialize default values for flags which may not be sent by old nodes.
            (§ ass (§ name subVer) "")
            (§ ass (§ name bestHeight) 0)
            (§ ass (§ name relayTxesBeforeFilter) true)
            (§ if (§ not (hasMoreBytes)))
            (§ block
                (§ return nil)
            )

            ;; string subVer (currently "")
            (§ ass (§ name subVer) (readStr))
            (§ if (§ not (hasMoreBytes)))
            (§ block
                (§ return nil)
            )

            ;; int bestHeight (size of known block chain)
            (§ ass (§ name bestHeight) (readUint32))
            (§ if (§ not (hasMoreBytes)))
            (§ block
                (§ return nil)
            )

            (§ ass (§ name relayTxesBeforeFilter) (§ expr (readBytes 1)[0] != 0))
        )
        (§ finally )
        (§ block
            (§ ass (§ name length) (- cursor offset))
        )
        nil
    )

    #_override
    #_public
    (§ method #_"void" (§ fn bitcoinSerializeToStream) [#_"OutputStream" (§ name buf)])
        (§ throws #_"IOException")
    (§ block
        (Utils/uint32ToByteStreamLE clientVersion, buf)
        (Utils/uint32ToByteStreamLE localServices, buf)
        (Utils/uint32ToByteStreamLE (§ expr localServices >> 32), buf)
        (Utils/uint32ToByteStreamLE time, buf)
        (Utils/uint32ToByteStreamLE (§ expr time >> 32), buf)
        (§ try )
        (§ block
            ;; My address.
            (.. myAddr (bitcoinSerialize buf))
            ;; Their address.
            (.. theirAddr (bitcoinSerialize buf))
        )
        (§ catch #_"UnknownHostException" (§ name e))
        (§ block
            (§ throw (§ new #_"RuntimeException" e)) ;; Can't happen.
        )
        (§ catch #_"IOException" (§ name e))
        (§ block
            (§ throw (§ new #_"RuntimeException" e)) ;; Can't happen.
        )
        ;; Next up is the "local host nonce", this is to detect the case of connecting back to yourself.
        ;; We don't care about this as we won't be accepting inbound connections.
        (Utils/uint32ToByteStreamLE 0, buf)
        (Utils/uint32ToByteStreamLE 0, buf)
        ;; Now comes subVer.
        (§ var #_"byte[]" (§ name subVerBytes) (.. subVer (getBytes "UTF-8")))
        (.. buf (write (.. (§ new #_"VarInt" (.. subVerBytes length)) (encode))))
        (.. buf (write subVerBytes))
        ;; Size of known block chain.
        (Utils/uint32ToByteStreamLE bestHeight, buf)
        (.. buf (write (if relayTxesBeforeFilter 1 0)))
        nil
    )

    ;;;
     ; Returns true if the version message indicates the sender has a full copy of the block chain,
     ; or if it's running in client mode (only has the headers).
     ;;
    #_public
    (§ method #_"boolean" (§ fn hasBlockChain) [])
    (§ block
        (== (& localServices NODE_NETWORK) NODE_NETWORK)
    )

    #_override
    #_public
    (§ method #_"boolean" (§ fn equals) [#_"Object" (§ name o)])
    (§ block
        (§ if (§ expr this == o))
        (§ block
            (§ return true)
        )
        (§ if (§ expr o == nil || (getClass) != (.. o (getClass))))
        (§ block
            (§ return false)
        )
        (§ var #_"VersionMessage" (§ name other) (§ cast #_"VersionMessage" o))
        (§ expr (.. other bestHeight) == bestHeight && (.. other clientVersion) == clientVersion && (.. other localServices) == localServices && (.. other time) == time && (.. other subVer (equals subVer)) && (.. other myAddr (equals myAddr)) && (.. other theirAddr (equals theirAddr)) && (.. other relayTxesBeforeFilter) == relayTxesBeforeFilter)
    )

    #_override
    #_public
    (§ method #_"int" (§ fn hashCode) [])
    (§ block
        (Objects/hashCode bestHeight, clientVersion, localServices, time, subVer, myAddr, theirAddr, relayTxesBeforeFilter)
    )

    #_override
    #_public
    (§ method #_"String" (§ fn toString) [])
    (§ block
        (§ var #_"StringBuilder" (§ name sb) (§ new #_"StringBuilder"))
        (.. sb (append "\n"))
        (.. sb (append "client version: ") (append clientVersion) (append "\n"))
        (.. sb (append "local services: ") (append localServices) (append "\n"))
        (.. sb (append "time:           ") (append time) (append "\n"))
        (.. sb (append "my addr:        ") (append myAddr) (append "\n"))
        (.. sb (append "their addr:     ") (append theirAddr) (append "\n"))
        (.. sb (append "sub version:    ") (append subVer) (append "\n"))
        (.. sb (append "best height:    ") (append bestHeight) (append "\n"))
        (.. sb (append "delay tx relay: ") (append (§ not relayTxesBeforeFilter)) (append "\n"))
        (.. sb (toString))
    )

    #_public
    (§ method #_"VersionMessage" (§ fn duplicate) [])
    (§ block
        (§ var #_"VersionMessage" (§ name v) (§ new #_"VersionMessage" params, (§ cast #_"int" bestHeight)))
        (§ ass (§ name (.. v clientVersion)) clientVersion)
        (§ ass (§ name (.. v localServices)) localServices)
        (§ ass (§ name (.. v time)) time)
        (§ ass (§ name (.. v myAddr)) myAddr)
        (§ ass (§ name (.. v theirAddr)) theirAddr)
        (§ ass (§ name (.. v subVer)) subVer)
        (§ ass (§ name (.. v relayTxesBeforeFilter)) relayTxesBeforeFilter)
        v
    )

    ;;;
     ; Appends the given user-agent information to the subVer field.  The subVer is composed of a series of
     ; name:version pairs separated by slashes in the form of a path.  For example a typical subVer field for bitcoinj
     ; users might look like "/bitcoinj:0.13/MultiBit:1.2/" where libraries come further to the left.
     ;
     ; There can be as many components as you feel a need for, and the version string can be anything, but it is
     ; recommended to use A.B.C where A = major, B = minor and C = revision for software releases, and dates for
     ; auto-generated source repository snapshots.  A valid subVer begins and ends with a slash, therefore name
     ; and version are not allowed to contain such characters.
     ;
     ; Anything put in the "comments" field will appear in brackets and may be used for platform info, or anything
     ; else.  For example, calling <tt>appendToSubVer("MultiBit", "1.0", "Windows")</tt> will result in a subVer being
     ; set of "/bitcoinj:1.0/MultiBit:1.0(Windows)/".  Therefore the / ( and ) characters are reserved in all these
     ; components.  If you don't want to add a comment (recommended), pass null.
     ;
     ; See <a href="https://github.com/bitcoin/bips/blob/master/bip-0014.mediawiki">BIP 14</a> for more information.
     ;
     ; @param comments Optional (can be null) platform or other node specific information.
     ; @throws IllegalArgumentException if name, version or comments contains invalid characters.
     ;;
    #_public
    (§ method #_"void" (§ fn appendToSubVer) [#_"String" (§ name name), #_"String" (§ name version), #_nilable #_"String" (§ name comments)])
    (§ block
        (checkSubVerComponent name)
        (checkSubVerComponent version)

        (§ if (some? comments))
        (§ block
            (checkSubVerComponent comments)
            (§ ass (§ name subVer) (.. subVer (concat (String/format Locale/US, "%s:%s(%s)/", name, version, comments))))
        )
        (§ else )
        (§ block
            (§ ass (§ name subVer) (.. subVer (concat (String/format Locale/US, "%s:%s/", name, version))))
        )
        nil
    )

    #_private
    #_static
    (§ defn- #_"void" (§ fn checkSubVerComponent) [#_"String" (§ name component)])
    (§ block
        (§ if (§ expr (.. component (contains "/")) || (.. component (contains "(")) || (.. component (contains ")"))))
        (§ block
            (§ throw (§ new #_"IllegalArgumentException" "name contains invalid characters"))
        )
        nil
    )

    ;;;
     ; Returns true if the clientVersion field is >= Pong.MIN_PROTOCOL_VERSION.  If it is then ping() is usable.
     ;;
    #_public
    (§ method #_"boolean" (§ fn isPingPongSupported) [])
    (§ block
        (<= (.. params (getProtocolVersionNum NetworkParameters/ProtocolVersion/PONG)) clientVersion)
    )

    ;;;
     ; Returns true if the clientVersion field is >= FilteredBlock.MIN_PROTOCOL_VERSION.  If it is then Bloom filtering
     ; is available and the memory pool of the remote peer will be queried when the downloadData property is true.
     ;;
    #_public
    (§ method #_"boolean" (§ fn isBloomFilteringSupported) [])
    (§ block
        (<= (.. params (getProtocolVersionNum NetworkParameters/ProtocolVersion/BLOOM_FILTER)) clientVersion)
    )
)

#_(ns org.bitcoinj.core #_"VersionedChecksummedBytes"
    (:import [java.io Serializable]
             [java.util Arrays])
    (:import [com.google.common.base Objects Preconditions]
             [com.google.common.primitives Ints UnsignedBytes]))

;;;
 ; <p>In Bitcoin the following format is often used to represent some type of key:</p>
 ;
 ; <pre>[one version byte] [data bytes] [4 checksum bytes]</pre>
 ;
 ; <p>and the result is then Base58 encoded.
 ; This format is used for addresses, and private keys exported using the dumpprivkey command.</p>
 ;;
#_public
(§ class #_"VersionedChecksummedBytes" (§ implements #_"Serializable", #_"Cloneable", #_"Comparable<VersionedChecksummedBytes>")
    #_protected
    (§ field #_"int" (§ name version))
    #_protected
    (§ field #_"byte[]" (§ name bytes))

    #_protected
    (§ constructor #_"VersionedChecksummedBytes" [#_"String" (§ name encoded)])
        (§ throws #_"AddressFormatException")
    (§ block
        (§ var #_"byte[]" (§ name versionAndDataBytes) (Base58/decodeChecked encoded))
        (§ var #_"byte" (§ name versionByte) (§ ai versionAndDataBytes 0))
        (§ ass (§ name version) (& versionByte 0xff))
        (§ ass (§ name bytes) (§ new #_"byte[]" (§ count (.. versionAndDataBytes length) - 1)))
        (System/arraycopy versionAndDataBytes, 1, bytes, 0, (§ expr (.. versionAndDataBytes length) - 1))
        this
    )

    #_protected
    (§ constructor #_"VersionedChecksummedBytes" [#_"int" (§ name version), #_"byte[]" (§ name bytes)])
    (§ block
        (Preconditions/checkArgument (§ expr 0 <= version && version < 256))

        (§ ass (§ name (.. this version)) version)
        (§ ass (§ name (.. this bytes)) bytes)
        this
    )

    ;;;
     ; Returns the base-58 encoded String representation of this object,
     ; including version and checksum bytes.
     ;;
    #_public
    (§ method #_"String" (§ fn toBase58) [])
    (§ block
        ;; A stringified buffer is: 1 byte version + data bytes + 4 bytes check code (a truncated hash).
        (§ var #_"byte[]" (§ name addressBytes) (§ new #_"byte[]" (§ count 1 + (.. bytes length) + 4)))
        (§ ass (§ name (§ ai addressBytes 0)) (§ cast #_"byte" version))
        (System/arraycopy bytes, 0, addressBytes, 1, (.. bytes length))
        (§ var #_"byte[]" (§ name checksum) (Sha256Hash/hashTwice addressBytes, 0, (§ expr (.. bytes length) + 1)))
        (System/arraycopy checksum, 0, addressBytes, (§ expr (.. bytes length) + 1), 4)
        (Base58/encode addressBytes)
    )

    #_override
    #_public
    (§ method #_"String" (§ fn toString) [])
    (§ block
        (toBase58)
    )

    #_override
    #_public
    (§ method #_"int" (§ fn hashCode) [])
    (§ block
        (Objects/hashCode version, (Arrays/hashCode bytes))
    )

    #_override
    #_public
    (§ method #_"boolean" (§ fn equals) [#_"Object" (§ name o)])
    (§ block
        (§ if (§ expr this == o))
        (§ block
            (§ return true)
        )
        (§ if (§ expr o == nil || (getClass) != (.. o (getClass))))
        (§ block
            (§ return false)
        )
        (§ var #_"VersionedChecksummedBytes" (§ name other) (§ cast #_"VersionedChecksummedBytes" o))
        (§ expr (.. this version) == (.. other version) && (Arrays/equals (.. this bytes), (.. other bytes)))
    )

    ;;;
     ; {@inheritDoc}
     ;
     ; This implementation narrows the return type to <code>VersionedChecksummedBytes</code>
     ; and allows subclasses to throw <code>CloneNotSupportedException</code> even though it
     ; is never thrown by this implementation.
     ;;
    #_override
    #_public
    (§ method #_"VersionedChecksummedBytes" (§ fn clone) [])
        (§ throws #_"CloneNotSupportedException")
    (§ block
        (§ cast #_"VersionedChecksummedBytes" (.. super (clone)))
    )

    ;;;
     ; {@inheritDoc}
     ;
     ; This implementation uses an optimized Google Guava method to compare <code>bytes</code>.
     ;;
    #_override
    #_public
    (§ method #_"int" (§ fn compareTo) [#_"VersionedChecksummedBytes" (§ name o)])
    (§ block
        (§ var #_"int" (§ name result) (Ints/compare (.. this version), (.. o version)))
        (if (!= result 0) result (.. (UnsignedBytes/lexicographicalComparator) (compare (.. this bytes), (.. o bytes))))
    )

    ;;;
     ; Returns the "version" or "header" byte: the first byte of the data.  This is used to disambiguate what
     ; the contents apply to, for example, which network the key or address is valid on.
     ;
     ; @return a positive number between 0 and 255.
     ;;
    #_public
    (§ method #_"int" (§ fn getVersion) [])
    (§ block
        version
    )
)

#_(ns org.bitcoinj.core #_"WrongNetworkException"
    (:import [java.util Arrays]))

;;;
 ; This exception is thrown by the Address class when you try and decode an address with a version code that isn't
 ; used by that network.  You shouldn't allow the user to proceed in this case as they are trying to send money across
 ; different chains, an operation that is guaranteed to destroy the money.
 ;;
#_public
(§ class #_"WrongNetworkException" (§ extends #_"AddressFormatException")
    ;;; The version code that was provided in the address. ;;
    #_public
    (§ field #_"int" (§ name verCode))
    ;;; The list of acceptable versions that were expected given the addresses network parameters. ;;
    #_public
    (§ field #_"int[]" (§ name acceptableVersions))

    #_public
    (§ constructor #_"WrongNetworkException" [#_"int" (§ name verCode), #_"int[]" (§ name acceptableVersions)])
    (§ block
        (§ super (§ expr "Version code of address did not match acceptable versions for network: " + verCode + " not in " + (Arrays/toString acceptableVersions)))

        (§ ass (§ name (.. this verCode)) verCode)
        (§ ass (§ name (.. this acceptableVersions)) acceptableVersions)
        this
    )
)

#_(ns org.bitcoinj.core.listeners #_"AbstractPeerDataEventListener"
    (:import [java.util *])
   (:require [org.bitcoinj.core *]))

;;;
 ; Deprecated: implement the more specific event listener interfaces instead to fill out only what you need.
 ;;
#_deprecated
#_public
#_abstract
(§ class #_"AbstractPeerDataEventListener" (§ implements #_"PeerDataEventListener")
    #_override
    #_public
    (§ method #_"void" (§ fn onBlocksDownloaded) [#_"Peer" (§ name peer), #_"Block" (§ name block), #_nilable #_"FilteredBlock" (§ name filteredBlock), #_"int" (§ name blocksLeft)])
    (§ block
        nil
    )

    #_override
    #_public
    (§ method #_"void" (§ fn onChainDownloadStarted) [#_"Peer" (§ name peer), #_"int" (§ name blocksLeft)])
    (§ block
        nil
    )

    #_override
    #_public
    (§ method #_"Message" (§ fn onPreMessageReceived) [#_"Peer" (§ name peer), #_"Message" (§ name m)])
    (§ block
        ;; Just pass the message right through for further processing.
        m
    )

    #_override
    #_public
    (§ method #_"List<Message>" (§ fn getData) [#_"Peer" (§ name peer), #_"GetDataMessage" (§ name m)])
    (§ block
        nil
    )
)

#_(ns org.bitcoinj.core.listeners #_"BlockChainListener")

;;;
 ; Old interface for backwards compatibility. Implement the more specific interfaces instead.
 ;;
#_deprecated
#_public
(§ interface #_"BlockChainListener" (§ extends #_"NewBestBlockListener", #_"TransactionReceivedInBlockListener", #_"ReorganizeListener"))

#_(ns org.bitcoinj.core.listeners #_"BlocksDownloadedEventListener"
   (:require [org.bitcoinj.core *]))

;;;
 ; <p>Implementors can listen to events like blocks being downloaded/transactions being broadcast/connect/disconnects,
 ; they can pre-filter messages before they are procesesed by a {@link Peer} or {@link PeerGroup}, and they can
 ; provide transactions to remote peers when they ask for them.</p>
 ;;
#_public
(§ interface #_"BlocksDownloadedEventListener"
    ;; TODO: Fix the Block/FilteredBlock type hierarchy so we can avoid the stupid typeless API here.
    ;;;
     ; <p>Called on a Peer thread when a block is received.</p>
     ;
     ; <p>The block may be a Block object that contains transactions, a Block object that is only a header when
     ; fast catchup is being used.  If set, filteredBlock can be used to retrieve the list of associated transactions.</p>
     ;
     ; @param peer The peer receiving the block.
     ; @param block The downloaded block.
     ; @param filteredBlock If non-null, the object that wraps the block header passed as the block param.
     ; @param blocksLeft The number of blocks left to download.
     ;;
    (§ method #_"void" (§ fn onBlocksDownloaded) [#_"Peer" (§ name peer), #_"Block" (§ name block), #_nilable #_"FilteredBlock" (§ name filteredBlock), #_"int" (§ name blocksLeft)])
)

#_(ns org.bitcoinj.core.listeners #_"ChainDownloadStartedEventListener"
   (:require [org.bitcoinj.core *]))

;;;
 ; <p>Implementors can listen to events like blocks being downloaded/transactions being broadcast/connect/disconnects,
 ; they can pre-filter messages before they are procesesed by a {@link Peer} or {@link PeerGroup}, and they can
 ; provide transactions to remote peers when they ask for them.</p>
 ;;
#_public
(§ interface #_"ChainDownloadStartedEventListener"
    ;;;
     ; Called when a download is started with the initial number of blocks to be downloaded.
     ;
     ; @param peer The peer receiving the block.
     ; @param blocksLeft The number of blocks left to download.
     ;;
    (§ method #_"void" (§ fn onChainDownloadStarted) [#_"Peer" (§ name peer), #_"int" (§ name blocksLeft)])
)

#_(ns org.bitcoinj.core.listeners #_"DownloadProgressTracker"
    (:import [java.util Date Locale]
             [java.util.concurrent ExecutionException])
    (:import [com.google.common.util.concurrent ListenableFuture SettableFuture]
             [org.slf4j Logger LoggerFactory])
   (:require [org.bitcoinj.core Block FilteredBlock Peer Utils]))

;;;
 ; <p>An implementation of {@link AbstractPeerDataEventListener} that listens to chain download events and tracks
 ; progress as a percentage.  The default implementation prints progress to stdout, but you can subclass it and
 ; override the progress method to update a GUI instead.</p>
 ;;
#_public
(§ class #_"DownloadProgressTracker" (§ extends #_"AbstractPeerDataEventListener")
    #_private
    #_static
    (§ def- #_"Logger" (§ name log) (LoggerFactory/getLogger (§ klass #_"DownloadProgressTracker")))

    #_private
    (§ field- #_"int" (§ name originalBlocksLeft) -1)
    #_private
    (§ field- #_"int" (§ name lastPercent) 0)
    #_private
    (§ field- #_"SettableFuture<Long>" (§ name future) (SettableFuture/create))
    #_private
    (§ field- #_"boolean" (§ name caughtUp) false)

    #_override
    #_public
    (§ method #_"void" (§ fn onChainDownloadStarted) [#_"Peer" (§ name peer), #_"int" (§ name blocksLeft)])
    (§ block
        (§ if (§ expr 0 < blocksLeft && originalBlocksLeft == -1))
        (§ block
            (startDownload blocksLeft)
        )
        ;; Only mark this the first time, because this method can be called more than once during a chain download
        ;; if we switch peers during it.
        (§ if (§ expr originalBlocksLeft == -1))
        (§ block
            (§ ass (§ name originalBlocksLeft) blocksLeft)
        )
        (§ else )
        (§ block
            (.. log (info "Chain download switched to {}", peer))
        )
        (§ if (§ expr blocksLeft == 0))
        (§ block
            (doneDownload)
            (.. future (set (.. peer (getBestHeight))))
        )
        nil
    )

    #_override
    #_public
    (§ method #_"void" (§ fn onBlocksDownloaded) [#_"Peer" (§ name peer), #_"Block" (§ name block), #_nilable #_"FilteredBlock" (§ name filteredBlock), #_"int" (§ name blocksLeft)])
    (§ block
        (§ if caughtUp)
        (§ block
            (§ return nil)
        )

        (§ if (§ expr blocksLeft == 0))
        (§ block
            (§ ass (§ name caughtUp) true)
            (doneDownload)
            (.. future (set (.. peer (getBestHeight))))
        )

        (§ if (§ expr blocksLeft < 0 || originalBlocksLeft <= 0))
        (§ block
            (§ return nil)
        )

        (§ var #_"double" (§ name pct) (§ expr 100.0 - (§ expr 100.0 * (§ expr blocksLeft / (§ cast #_"double" originalBlocksLeft)))))
        (§ if (!= (§ cast #_"int" pct) lastPercent))
        (§ block
            (progress pct, blocksLeft, (§ expr (§ new #_"Date" (* (.. block (getTimeSeconds)) 1000))))
            (§ ass (§ name lastPercent) (§ cast #_"int" pct))
        )
        nil
    )

    ;;;
     ; Called when download progress is made.
     ;
     ; @param pct The percentage of chain downloaded, estimated.
     ; @param date The date of the last block downloaded.
     ;;
    #_protected
    (§ method #_"void" (§ fn progress) [#_"double" (§ name pct), #_"int" (§ name blocksSoFar), #_"Date" (§ name date)])
    (§ block
        (.. log (info (String/format Locale/US, "Chain download %d%% done with %d blocks to go, block date %s", (§ cast #_"int" pct), blocksSoFar, (Utils/dateTimeFormat date))))
        nil
    )

    ;;;
     ; Called when download is initiated.
     ;
     ; @param blocks The number of blocks to download, estimated.
     ;;
    #_protected
    (§ method #_"void" (§ fn startDownload) [#_"int" (§ name blocks)])
    (§ block
        (.. log (info (§ str "Downloading block chain of size " + blocks + ". " + (if (< 1000 blocks) "This may take a while." ""))))
        nil
    )

    ;;;
     ; Called when we are done downloading the block chain.
     ;;
    #_protected
    (§ method #_"void" (§ fn doneDownload) [])
    (§ block
        nil
    )

    ;;;
     ; Wait for the chain to be downloaded.
     ;;
    #_public
    (§ method #_"void" (§ fn await) [])
        (§ throws #_"InterruptedException")
    (§ block
        (§ try )
        (§ block
            (.. future (get))
        )
        (§ catch #_"ExecutionException" (§ name e))
        (§ block
            (§ throw (§ new #_"RuntimeException" e))
        )
        nil
    )

    ;;;
     ; Returns a listenable future that completes with the height of the best chain (as reported by the peer) once chain
     ; download seems to be finished.
     ;;
    #_public
    (§ method #_"ListenableFuture<Long>" (§ fn getFuture) [])
    (§ block
        future
    )
)

#_(ns org.bitcoinj.core.listeners #_"GetDataEventListener"
    (:import [java.util *])
   (:require [org.bitcoinj.core *]))

;;;
 ; <p>Implementors can listen to events like blocks being downloaded/transactions being broadcast/connect/disconnects,
 ; they can pre-filter messages before they are procesesed by a {@link Peer} or {@link PeerGroup}, and they can
 ; provide transactions to remote peers when they ask for them.</p>
 ;;
#_public
(§ interface #_"GetDataEventListener"
    ;;;
     ; <p>Called when a peer receives a getdata message, usually in response to an "inv" being broadcast.  Return as many
     ; items as possible which appear in the {@link GetDataMessage}, or null if you're not interested in responding.</p>
     ;
     ; <p>Note that this will never be called if registered with any executor other than
     ; {@link org.bitcoinj.utils.Threading#SAME_THREAD}</p>
     ;;
    #_nilable
    (§ method #_"List<Message>" (§ fn getData) [#_"Peer" (§ name peer), #_"GetDataMessage" (§ name m)])
)

#_(ns org.bitcoinj.core.listeners #_"NewBestBlockListener"
   (:require [org.bitcoinj.core StoredBlock VerificationException]))

;;;
 ; Listener interface for when a new block on the best chain is seen.
 ;;
#_public
(§ interface #_"NewBestBlockListener"
    ;;;
     ; Called when a new block on the best chain is seen, after relevant transactions are extracted and sent to us via either
     ; {@link TransactionReceivedInBlockListener#receiveFromBlock(org.bitcoinj.core.Transaction, org.bitcoinj.core.StoredBlock, org.bitcoinj.core.BlockChain.NewBlockType, int relativityOffset)}
     ; or {@link TransactionReceivedInBlockListener#notifyTransactionIsInBlock(org.bitcoinj.core.Sha256Hash, org.bitcoinj.core.StoredBlock, org.bitcoinj.core.BlockChain.NewBlockType, int)}.
     ;
     ; If this block is causing a re-organise to a new chain, this method is NOT
     ; called even though the block may be the new best block: your reorganize
     ; implementation is expected to do whatever would normally be done do for a
     ; new best block in this case.
     ;;
    (§ method #_"void" (§ fn notifyNewBestBlock) [#_"StoredBlock" (§ name block)])
        (§ throws #_"VerificationException")
)

#_(ns org.bitcoinj.core.listeners #_"OnTransactionBroadcastListener"
   (:require [org.bitcoinj.core *]))

;;;
 ; Called when a new transaction is broadcast over the network.
 ;;
#_public
(§ interface #_"OnTransactionBroadcastListener"
    ;;;
     ; Called when a new transaction is broadcast over the network.
     ;;
    (§ method #_"void" (§ fn onTransaction) [#_"Peer" (§ name peer), #_"Transaction" (§ name t)])
)

#_(ns org.bitcoinj.core.listeners #_"PeerConnectedEventListener"
   (:require [org.bitcoinj.core Peer]))

;;;
 ; <p>Implementors can listen to events indicating a new peer connecting.</p>
 ;;
#_public
(§ interface #_"PeerConnectedEventListener"
    ;;;
     ; Called when a peer is connected.  If this listener is registered to a {@link Peer} instead of a {@link PeerGroup},
     ; peerCount will always be 1.
     ;
     ; @param peer
     ; @param peerCount The total number of connected peers.
     ;;
    (§ method #_"void" (§ fn onPeerConnected) [#_"Peer" (§ name peer), #_"int" (§ name peerCount)])
)

#_(ns org.bitcoinj.core.listeners #_"PeerDataEventListener"
   (:require [org.bitcoinj.core *]))

;;;
 ; <p>Implementors can listen to events like blocks being downloaded/transactions being broadcast/connect/disconnects,
 ; they can pre-filter messages before they are processed by a {@link Peer} or {@link PeerGroup}, and they can
 ; provide transactions to remote peers when they ask for them.</p>
 ;;
#_public
(§ interface #_"PeerDataEventListener" (§ extends #_"BlocksDownloadedEventListener", #_"ChainDownloadStartedEventListener", #_"GetDataEventListener", #_"PreMessageReceivedEventListener"))

#_(ns org.bitcoinj.core.listeners #_"PeerDisconnectedEventListener"
   (:require [org.bitcoinj.core Peer]))

;;;
 ; <p>Implementors can listen to events indicating a peer disconnecting.</p>
 ;;
#_public
(§ interface #_"PeerDisconnectedEventListener"
    ;;;
     ; Called when a peer is disconnected.  Note that this won't be called if the listener is registered on
     ; a {@link PeerGroup} and the group is in the process of shutting down.  If this listener is registered to
     ; a {@link Peer} instead of a {@link PeerGroup}, peerCount will always be 0.  This handler can be called
     ; without a corresponding invocation of onPeerConnected if the initial connection is never successful.
     ;
     ; @param peer
     ; @param peerCount The total number of connected peers.
     ;;
    (§ method #_"void" (§ fn onPeerDisconnected) [#_"Peer" (§ name peer), #_"int" (§ name peerCount)])
)

#_(ns org.bitcoinj.core.listeners #_"PeerDiscoveredEventListener"
    (:import [java.util Set])
   (:require [org.bitcoinj.core Peer PeerAddress]))

;;;
 ; <p>Implementors can listen to events for peers being discovered.</p>
 ;;
#_public
(§ interface #_"PeerDiscoveredEventListener"
    ;;;
     ; <p>Called when peers are discovered, this happens at startup of {@link PeerGroup}
     ; or if we run out of suitable {@link Peer}s to connect to.</p>
     ;
     ; @param peerAddresses The set of discovered {@link PeerAddress}es.
     ;;
    (§ method #_"void" (§ fn onPeersDiscovered) [#_"Set<PeerAddress>" (§ name peerAddresses)])
)

#_(ns org.bitcoinj.core.listeners #_"PreMessageReceivedEventListener"
   (:require [org.bitcoinj.core *]))

;;;
 ; <p>Implementors can listen to events like blocks being downloaded/transactions being broadcast/connect/disconnects,
 ; they can pre-filter messages before they are procesesed by a {@link Peer} or {@link PeerGroup}, and they can
 ; provide transactions to remote peers when they ask for them.</p>
 ;;
#_public
(§ interface #_"PreMessageReceivedEventListener"
    ;;;
     ; <p>Called when a message is received by a peer, before the message is processed.  The returned message is
     ; processed instead.  Returning null will cause the message to be ignored by the Peer returning the same message
     ; object allows you to see the messages received but not change them.  The result from one event listeners
     ; callback is passed as "m" to the next, forming a chain.</p>
     ;
     ; <p>Note that this will never be called if registered with any executor other than
     ; {@link org.bitcoinj.utils.Threading#SAME_THREAD}.</p>
     ;;
    (§ method #_"Message" (§ fn onPreMessageReceived) [#_"Peer" (§ name peer), #_"Message" (§ name m)])
)

#_(ns org.bitcoinj.core.listeners #_"ReorganizeListener"
    (:import [java.util List])
   (:require [org.bitcoinj.core StoredBlock VerificationException]))

;;;
 ; Listener interface for when the best chain has changed.
 ;;
#_public
(§ interface #_"ReorganizeListener"
    ;;;
     ; Called by the {@link org.bitcoinj.core.BlockChain} when the best chain (representing total work done)
     ; has changed.  In this case, we need to go through our transactions and find out if any have become invalid.
     ; It's possible for our balance to go down in this case: money we thought we had can suddenly vanish
     ; if the rest of the network agrees it should be so.
     ;
     ; The oldBlocks/newBlocks lists are ordered height-wise from top first to bottom last (i.e. newest blocks first).
     ;;
    (§ method #_"void" (§ fn reorganize) [#_"StoredBlock" (§ name splitPoint), #_"List<StoredBlock>" (§ name oldBlocks), #_"List<StoredBlock>" (§ name newBlocks)])
        (§ throws #_"VerificationException")
)

#_(ns org.bitcoinj.core.listeners #_"TransactionConfidenceEventListener"
   (:require [org.bitcoinj.core Transaction]
             [org.bitcoinj.wallet Wallet]))

;;;
 ; <p>Implementors are called when confidence of a transaction changes.</p>
 ;;
#_public
(§ interface #_"TransactionConfidenceEventListener"
    ;;;
     ; <p>Called when a transaction changes its confidence level.  You can also attach event listeners to
     ; the individual transactions, if you don't care about all of them.  Usually you would save the wallet to disk
     ; after receiving this callback unless you already set up autosaving.</p>
     ;
     ; <p>You should pay attention to this callback in case a transaction becomes <i>dead</i>, that is, a transaction
     ; you believed to be active (send or receive) becomes overridden by the network.  This can happen if</p>
     ;
     ; <ol>
     ;     <li>You are sharing keys between wallets and accidentally create/broadcast a double spend.</li>
     ;     <li>Somebody is attacking the network and reversing transactions, i.e. the user is a victim of fraud.</li>
     ;     <li>A bug: for example you create a transaction, broadcast it but fail to commit it.
     ;     The {@link Wallet} will then re-use the same outputs when creating the next spend.</li>
     ; </ol>
     ;
     ; <p>To find if the transaction is dead, you can use <tt>tx.getConfidence().getConfidenceType() ==
     ; TransactionConfidence.ConfidenceType.DEAD</tt>.  If it is, you should notify the user in some way
     ; so they know the thing they bought may not arrive/the thing they sold should not be dispatched.</p>
     ;
     ; <p>Note that this callback will be invoked for every transaction in the wallet, for every new block that is
     ; received (because the depth has changed).  <b>If you want to update a UI view from the contents of the wallet
     ; it is more efficient to use onWalletChanged instead.</b></p>
     ;;
    (§ method #_"void" (§ fn onTransactionConfidenceChanged) [#_"Wallet" (§ name wallet), #_"Transaction" (§ name tx)])
)

#_(ns org.bitcoinj.core.listeners #_"TransactionReceivedInBlockListener"
   (:require [org.bitcoinj.core BlockChain Sha256Hash StoredBlock Transaction VerificationException]))

;;;
 ; Listener interface for when we receive a new block that contains a relevant transaction.
 ;;
#_public
(§ interface #_"TransactionReceivedInBlockListener"
    ;;;
     ; <p>Called by the {@link BlockChain} when we receive a new block that contains a relevant transaction.</p>
     ;
     ; <p>A transaction may be received multiple times if is included into blocks in parallel chains.  The blockType
     ; parameter describes whether the containing block is on the main/best chain or whether it's on a presently
     ; inactive side chain.</p>
     ;
     ; <p>The relativityOffset parameter is an arbitrary number used to establish an ordering between transactions
     ; within the same block.  In the case where full blocks are being downloaded, it is simply the index of the
     ; transaction within that block.  When Bloom filtering is in use, we don't find out the exact offset into a block
     ; that a transaction occurred at, so the relativity count is not reflective of anything in an absolute sense but
     ; rather exists only to order the transaction relative to the others.</p>
     ;;
    (§ method #_"void" (§ fn receiveFromBlock) [#_"Transaction" (§ name tx), #_"StoredBlock" (§ name block), #_"BlockChain.NewBlockType" (§ name blockType), #_"int" (§ name relativityOffset)])
        (§ throws #_"VerificationException")

    ;;;
     ; <p>Called by the {@link BlockChain} when we receive a new {@link FilteredBlock} that contains the given
     ; transaction hash in its merkle tree.</p>
     ;
     ; <p>A transaction may be received multiple times if is included into blocks in parallel chains.  The blockType
     ; parameter describes whether the containing block is on the main/best chain or whether it's on a presently
     ; inactive side chain.</p>
     ;
     ; <p>The relativityOffset parameter in this case is an arbitrary (meaningless) number, that is useful only when
     ; compared to the relativity count of another transaction received inside the same block.  It is used to establish
     ; an ordering of transactions relative to one another.</p>
     ;
     ; <p>This method should return false if the given tx hash isn't known about, e.g. because the the transaction was
     ; a Bloom false positive.  If it was known about and stored, it should return true.  The caller may need to know
     ; this to calculate the effective FP rate.</p>
     ;
     ; @return whether the transaction is known about i.e. was considered relevant previously.
     ;;
    (§ method #_"boolean" (§ fn notifyTransactionIsInBlock) [#_"Sha256Hash" (§ name txHash), #_"StoredBlock" (§ name block), #_"BlockChain.NewBlockType" (§ name blockType), #_"int" (§ name relativityOffset)])
        (§ throws #_"VerificationException")
)

#_(ns org.bitcoinj.crypto #_"ChildNumber"
    (:import [java.util Locale])
    (:import [com.google.common.primitives Ints]))

;;;
 ; <p>This is just a wrapper for the i (child number) as per BIP 32 with a boolean getter for the most significant bit
 ; and a getter for the actual 0-based child number.  A {@link java.util.List} of these forms a <i>path</i> through a
 ; {@link DeterministicHierarchy}.  This class is immutable.
 ;;
#_public
(§ class #_"ChildNumber" (§ implements #_"Comparable<ChildNumber>")
    ;;;
     ; The bit that's set in the child number to indicate whether this key is "hardened".  Given a hardened key, it is
     ; not possible to derive a child public key if you know only the hardened public key.  With a non-hardened key this
     ; is possible, so you can derive trees of public keys given only a public parent, but the downside is that it's
     ; possible to leak private keys if you disclose a parent public key and a child private key (elliptic curve maths
     ; allows you to work upwards).
     ;;
    #_public
    #_static
    (§ def #_"int" (§ name HARDENED_BIT) 0x80000000)

    #_public
    #_static
    (§ def #_"ChildNumber" (§ name ZERO) (§ new #_"ChildNumber" 0))
    #_public
    #_static
    (§ def #_"ChildNumber" (§ name ONE) (§ new #_"ChildNumber" 1))
    #_public
    #_static
    (§ def #_"ChildNumber" (§ name ZERO_HARDENED) (§ new #_"ChildNumber" 0, true))

    ;;; Integer i as per BIP 32 spec, including the MSB denoting derivation type (0 = public, 1 = private). ;;
    #_private
    (§ field- #_"int" (§ name i))

    #_public
    (§ constructor #_"ChildNumber" [#_"int" (§ name childNumber), #_"boolean" (§ name isHardened)])
    (§ block
        (§ if (hasHardenedBit childNumber))
        (§ block
            (§ throw (§ new #_"IllegalArgumentException" (§ expr "Most significant bit is reserved and shouldn't be set: " + childNumber)))
        )

        (§ ass (§ name i) (if isHardened (| childNumber HARDENED_BIT) childNumber))
        this
    )

    #_public
    (§ constructor #_"ChildNumber" [#_"int" (§ name i)])
    (§ block
        (§ ass (§ name (.. this i)) i)
        this
    )

    ;;; Returns the uint32 encoded form of the path element, including the most significant bit. ;;
    #_public
    (§ method #_"int" (§ fn getI) [])
    (§ block
        i
    )

    ;;; Returns the uint32 encoded form of the path element, including the most significant bit. ;;
    #_public
    (§ method #_"int" (§ fn i) [])
    (§ block
        i
    )

    #_public
    (§ method #_"boolean" (§ fn isHardened) [])
    (§ block
        (hasHardenedBit i)
    )

    #_private
    #_static
    (§ defn- #_"boolean" (§ fn hasHardenedBit) [#_"int" (§ name a)])
    (§ block
        (!= (& a HARDENED_BIT) 0)
    )

    ;;; Returns the child number without the hardening bit set (i.e. index in that part of the tree). ;;
    #_public
    (§ method #_"int" (§ fn num) [])
    (§ block
        (§ expr i & (§ flip HARDENED_BIT))
    )

    #_override
    #_public
    (§ method #_"String" (§ fn toString) [])
    (§ block
        (String/format Locale/US, "%d%s", (num), (if (isHardened) "H" ""))
    )

    #_override
    #_public
    (§ method #_"boolean" (§ fn equals) [#_"Object" (§ name o)])
    (§ block
        (§ if (§ expr this == o))
        (§ block
            (§ return true)
        )
        (§ if (§ expr o == nil || (getClass) != (.. o (getClass))))
        (§ block
            (§ return false)
        )
        (§ expr i == (.. (§ cast #_"ChildNumber" o) i))
    )

    #_override
    #_public
    (§ method #_"int" (§ fn hashCode) [])
    (§ block
        i
    )

    #_override
    #_public
    (§ method #_"int" (§ fn compareTo) [#_"ChildNumber" (§ name other)])
    (§ block
        ;; Note that in this implementation compareTo() is not consistent with equals().
        (Ints/compare (.. this (num)), (.. other (num)))
    )
)

#_(ns org.bitcoinj.crypto #_"DeterministicHierarchy"
    (:import [java.util List Locale Map])
    (:import [com.google.common.base Preconditions]
             [com.google.common.collect ImmutableList Maps]))

;; TODO: This whole API feels a bit object heavy.  Do we really need ChildNumber and so many maps, etc?
;; TODO: Should we be representing this using an actual tree arrangement in memory instead of a bunch of hashmaps?

;;;
 ; <p>A DeterministicHierarchy calculates and keeps a whole tree (hierarchy) of keys originating from a single
 ; root key.  This implements part of the BIP 32 specification.  A deterministic key tree is useful because
 ; Bitcoin's privacy system require new keys to be created for each transaction, but managing all these
 ; keys quickly becomes unwieldy.  In particular it becomes hard to back up and distribute them.  By having
 ; a way to derive random-looking but deterministic keys we can make wallet backup simpler and gain the
 ; ability to hand out {@link DeterministicKey}s to other people who can then create new addresses
 ; on the fly, without having to contact us.</p>
 ;
 ; <p>The hierarchy is started from a single root key, and a location in the tree is given by a path which
 ; is a list of {@link ChildNumber}s.</p>
 ;;
#_public
(§ class #_"DeterministicHierarchy"
    #_private
    (§ field- #_"Map<ImmutableList<ChildNumber>, DeterministicKey>" (§ name keys) (Maps/newHashMap))
    #_private
    (§ field- #_"ImmutableList<ChildNumber>" (§ name rootPath))
    ;; Keep track of how many child keys each node has.  This is kind of weak.
    #_private
    (§ field- #_"Map<ImmutableList<ChildNumber>, ChildNumber>" (§ name lastChildNumbers) (Maps/newHashMap))

    #_public
    #_static
    (§ def #_"int" (§ name BIP32_STANDARDISATION_TIME_SECS) 1369267200)

    ;;;
     ; Constructs a new hierarchy rooted at the given key.  Note that this does not have to be the top of the tree.
     ; You can construct a DeterministicHierarchy for a subtree of a larger tree that you may not own.
     ;;
    #_public
    (§ constructor #_"DeterministicHierarchy" [#_"DeterministicKey" (§ name rootKey)])
    (§ block
        (putKey rootKey)
        (§ ass (§ name rootPath) (.. rootKey (getPath)))
        this
    )

    ;;;
     ; Inserts a key into the heirarchy.  Used during deserialization: you normally don't need this.  Keys must be
     ; inserted in order.
     ;;
    #_public
    (§ method #_"void" (§ fn putKey) [#_"DeterministicKey" (§ name key)])
    (§ block
        (§ var #_"ImmutableList<ChildNumber>" (§ name path) (.. key (getPath)))
        ;; Update our tracking of what the next child in each branch of the tree should be.  Just assume that keys
        ;; are inserted in order here.
        (§ var #_"DeterministicKey" (§ name parent) (.. key (getParent)))
        (§ if (some? parent))
        (§ block
            (.. lastChildNumbers (put (.. parent (getPath)), (.. key (getChildNumber))))
        )
        (.. keys (put path, key))
        nil
    )

    ;;;
     ; Returns a key for the given path, optionally creating it.
     ;
     ; @param path The path to the key.
     ; @param relativePath Whether the path is relative to the root path.
     ; @param create Whether the key corresponding to path should be created (with any necessary ancestors) if it doesn't exist already.
     ; @return next newly created key using the child derivation function.
     ; @throws IllegalArgumentException if create is false and the path was not found.
     ;;
    #_public
    (§ method #_"DeterministicKey" (§ fn get) [#_"List<ChildNumber>" (§ name path), #_"boolean" (§ name relativePath), #_"boolean" (§ name create)])
    (§ block
        (§ var #_"ImmutableList<ChildNumber>" (§ name absolutePath) (if relativePath (.. (ImmutableList/builder #_"ImmutableList<ChildNumber>") (addAll rootPath) (addAll path) (build)) (ImmutableList/copyOf path)))
        (§ if (§ not (.. keys (containsKey absolutePath))))
        (§ block
            (§ if (§ not create))
            (§ block
                (§ throw (§ new #_"IllegalArgumentException" (String/format Locale/US, "No key found for %s path %s.", (if relativePath "relative" "absolute"), (HDUtils/formatPath path))))
            )
            (Preconditions/checkArgument (§ expr 0 < (.. absolutePath (size))), "Can't derive the master key: nothing to derive from.")
            (§ var #_"DeterministicKey" (§ name parent) (get (.. absolutePath (subList 0, (§ expr (.. absolutePath (size)) - 1))), false, true))
            (putKey (HDKeyDerivation/deriveChildKey parent, (§ expr (.. absolutePath (get (- (.. absolutePath (size)) 1))))))
        )
        (.. keys (get absolutePath))
    )

    ;;;
     ; Extends the tree by calculating the next key that hangs off the given parent path.  For example, if you pass
     ; a path of 1/2 here and there are already keys 1/2/1 and 1/2/2 then it will derive 1/2/3.
     ;
     ; @param parentPath The path to the parent.
     ; @param relative Whether the path is relative to the root path.
     ; @param createParent Whether the parent corresponding to path should be created (with any necessary ancestors) if it doesn't exist already.
     ; @param privateDerivation Whether to use private or public derivation.
     ; @return next newly created key using the child derivation funtcion.
     ; @throws IllegalArgumentException if the parent doesn't exist and createParent is false.
     ;;
    #_public
    (§ method #_"DeterministicKey" (§ fn deriveNextChild) [#_"ImmutableList<ChildNumber>" (§ name parentPath), #_"boolean" (§ name relative), #_"boolean" (§ name createParent), #_"boolean" (§ name privateDerivation)])
    (§ block
        (§ var #_"DeterministicKey" (§ name parent) (get parentPath, relative, createParent))
        (§ for (§ var #_"int" (§ name i) 0) :for (< i HDKeyDerivation/MAX_CHILD_DERIVATION_ATTEMPTS) :for (§ ass (§ name i) (+ i 1)))
        (§ block
            (§ try )
            (§ block
                (§ var #_"ChildNumber" (§ name createChildNumber) (getNextChildNumberToDerive (.. parent (getPath)), privateDerivation))
                (§ return (deriveChild parent, createChildNumber))
            )
            (§ catch #_"HDDerivationException" (§ name _))
            (§ block
            )
        )
        (§ throw (§ new #_"HDDerivationException" "Maximum number of child derivation attempts reached, this is probably an indication of a bug."))
    )

    #_private
    (§ method- #_"ChildNumber" (§ fn getNextChildNumberToDerive) [#_"ImmutableList<ChildNumber>" (§ name path), #_"boolean" (§ name privateDerivation)])
    (§ block
        (§ var #_"ChildNumber" (§ name lastChildNumber) (.. lastChildNumbers (get path)))
        (§ var #_"ChildNumber" (§ name nextChildNumber) (§ new #_"ChildNumber" (if (some? lastChildNumber) (+ (.. lastChildNumber (num)) 1) 0), privateDerivation))
        (.. lastChildNumbers (put path, nextChildNumber))
        nextChildNumber
    )

    #_public
    (§ method #_"int" (§ fn getNumChildren) [#_"ImmutableList<ChildNumber>" (§ name path)])
    (§ block
        (§ var #_"ChildNumber" (§ name cn) (.. lastChildNumbers (get path)))
        ;; Children start with zero based childnumbers.
        (if (some? cn) (+ 1 (.. cn (num))) 0)
    )

    ;;;
     ; Extends the tree by calculating the requested child for the given path.  For example, to get the key at position
     ; 1/2/3 you would pass 1/2 as the parent path and 3 as the child number.
     ;
     ; @param parentPath The path to the parent.
     ; @param relative Whether the path is relative to the root path.
     ; @param createParent Whether the parent corresponding to path should be created (with any necessary ancestors) if it doesn't exist already.
     ; @return the requested key.
     ; @throws IllegalArgumentException if the parent doesn't exist and createParent is false.
     ;;
    #_public
    (§ method #_"DeterministicKey" (§ fn deriveChild) [#_"List<ChildNumber>" (§ name parentPath), #_"boolean" (§ name relative), #_"boolean" (§ name createParent), #_"ChildNumber" (§ name createChildNumber)])
    (§ block
        (deriveChild (get parentPath, relative, createParent), createChildNumber)
    )

    #_private
    (§ method- #_"DeterministicKey" (§ fn deriveChild) [#_"DeterministicKey" (§ name parent), #_"ChildNumber" (§ name createChildNumber)])
    (§ block
        (§ var #_"DeterministicKey" (§ name childKey) (HDKeyDerivation/deriveChildKey parent, createChildNumber))
        (putKey childKey)
        childKey
    )

    ;;;
     ; Returns the root key that the {@link DeterministicHierarchy} was created with.
     ;;
    #_public
    (§ method #_"DeterministicKey" (§ fn getRootKey) [])
    (§ block
        (get rootPath, false, false)
    )
)

#_(ns org.bitcoinj.crypto #_"DeterministicKey"
    (:import [java.math BigInteger]
             [java.nio ByteBuffer]
             [java.util Arrays Comparator])
    (:import [com.google.common.base MoreObjects Objects Preconditions]
             [com.google.common.collect ImmutableList]
             [org.spongycastle.crypto.params KeyParameter]
             [org.spongycastle.math.ec ECPoint])
   (:require [org.bitcoinj.core *]
             #_static [org.bitcoinj.core.Utils HEX]))

;;;
 ; A deterministic key is a node in a {@link DeterministicHierarchy}.  As per
 ; <a href="https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki">the BIP 32 specification</a> it is a pair
 ; (key, chaincode).  If you know its path in the tree and its chain code you can derive more keys from this.
 ; To obtain one of these, you can call {@link HDKeyDerivation#createMasterPrivateKey(byte[])}.
 ;;
#_public
(§ class #_"DeterministicKey" (§ extends #_"ECKey")
    ;;; Sorts deterministic keys in the order of their child number.  That's <i>usually</i> the order used to derive them. ;;
    #_public
    #_static
    (§ def #_"Comparator<ECKey>" (§ name CHILDNUM_ORDER) (§ new #_"Comparator<ECKey>"
        (§ anon
            #_override
            #_public
            (§ method #_"int" (§ fn compare) [#_"ECKey" (§ name k1), #_"ECKey" (§ name k2)])
            (§ block
                (§ var #_"ChildNumber" (§ name cn1) (.. (§ cast #_"DeterministicKey" k1) (getChildNumber)))
                (§ var #_"ChildNumber" (§ name cn2) (.. (§ cast #_"DeterministicKey" k2) (getChildNumber)))
                (.. cn1 (compareTo cn2))
            )
        )))

    #_private
    (§ field- #_"DeterministicKey" (§ name parent))
    #_private
    (§ field- #_"ImmutableList<ChildNumber>" (§ name childNumberPath))
    #_private
    (§ field- #_"int" (§ name depth))
    #_private
    (§ field- #_"int" (§ name parentFingerprint)) ;; 0 if this key is root node of key hierarchy

    ;;; 32 bytes ;;
    #_private
    (§ field- #_"byte[]" (§ name chainCode))

    ;;; Constructs a key from its components.  This is not normally something you should use. ;;
    #_public
    (§ constructor #_"DeterministicKey" [#_"ImmutableList<ChildNumber>" (§ name childNumberPath), #_"byte[]" (§ name chainCode), #_"LazyECPoint" (§ name publicAsPoint), #_nilable #_"BigInteger" (§ name priv), #_nilable #_"DeterministicKey" (§ name parent)])
    (§ block
        (§ super priv, (compressPoint (Preconditions/checkNotNull publicAsPoint)))

        (Preconditions/checkArgument (== (.. chainCode length) 32))

        (§ ass (§ name (.. this parent)) parent)
        (§ ass (§ name (.. this childNumberPath)) (Preconditions/checkNotNull childNumberPath))
        (§ ass (§ name (.. this chainCode)) (Arrays/copyOf chainCode, (.. chainCode length)))
        (§ ass (§ name (.. this depth)) (if (some? parent) (+ (.. parent depth) 1) 0))
        (§ ass (§ name (.. this parentFingerprint)) (if (some? parent) (.. parent (getFingerprint)) 0))
        this
    )

    #_public
    (§ constructor #_"DeterministicKey" [#_"ImmutableList<ChildNumber>" (§ name childNumberPath), #_"byte[]" (§ name chainCode), #_"ECPoint" (§ name publicAsPoint), #_nilable #_"BigInteger" (§ name priv), #_nilable #_"DeterministicKey" (§ name parent)])
    (§ block
        (§ this childNumberPath, chainCode, (§ new #_"LazyECPoint" publicAsPoint), priv, parent)
        this
    )

    ;;; Constructs a key from its components.  This is not normally something you should use. ;;
    #_public
    (§ constructor #_"DeterministicKey" [#_"ImmutableList<ChildNumber>" (§ name childNumberPath), #_"byte[]" (§ name chainCode), #_"BigInteger" (§ name priv), #_nilable #_"DeterministicKey" (§ name parent)])
    (§ block
        (§ super priv, (compressPoint (ECKey/publicPointFromPrivate priv)))

        (Preconditions/checkArgument (== (.. chainCode length) 32))

        (§ ass (§ name (.. this parent)) parent)
        (§ ass (§ name (.. this childNumberPath)) (Preconditions/checkNotNull childNumberPath))
        (§ ass (§ name (.. this chainCode)) (Arrays/copyOf chainCode, (.. chainCode length)))
        (§ ass (§ name (.. this depth)) (if (some? parent) (+ (.. parent depth) 1) 0))
        (§ ass (§ name (.. this parentFingerprint)) (if (some? parent) (.. parent (getFingerprint)) 0))
        this
    )

    ;;; Constructs a key from its components.  This is not normally something you should use. ;;
    #_public
    (§ constructor #_"DeterministicKey" [#_"ImmutableList<ChildNumber>" (§ name childNumberPath), #_"byte[]" (§ name chainCode), #_"KeyCrypter" (§ name crypter), #_"LazyECPoint" (§ name pub), #_"EncryptedData" (§ name priv), #_nilable #_"DeterministicKey" (§ name parent)])
    (§ block
        (§ this childNumberPath, chainCode, pub, nil, parent)
        (§ ass (§ name (.. this encryptedPrivateKey)) (Preconditions/checkNotNull priv))
        (§ ass (§ name (.. this keyCrypter)) (Preconditions/checkNotNull crypter))
        this
    )

    ;;;
     ; Return the fingerprint of this key's parent as an int value, or zero if this key is the
     ; root node of the key hierarchy.  Raise an exception if the arguments are inconsistent.
     ; This method exists to avoid code repetition in the constructors.
     ;;
    #_private
    (§ method- #_"int" (§ fn ascertainParentFingerprint) [#_"DeterministicKey" (§ name parentKey), #_"int" (§ name parentFingerprint)])
        (§ throws #_"IllegalArgumentException")
    (§ block
        (§ if (§ expr parentFingerprint != 0))
        (§ block
            (§ if (some? parent))
            (§ block
                (Preconditions/checkArgument (== (.. parent (getFingerprint)) parentFingerprint), "parent fingerprint mismatch", (Integer/toHexString (.. parent (getFingerprint))), (Integer/toHexString parentFingerprint))
            )
            (§ return parentFingerprint)
        )

        0
    )

    ;;;
     ; Constructs a key from its components, including its public key data and possibly-redundant
     ; information about its parent key.  Invoked when deserializing, but otherwise not something
     ; that you normally should use.
     ;;
    #_public
    (§ constructor #_"DeterministicKey" [#_"ImmutableList<ChildNumber>" (§ name childNumberPath), #_"byte[]" (§ name chainCode), #_"LazyECPoint" (§ name publicAsPoint), #_nilable #_"DeterministicKey" (§ name parent), #_"int" (§ name depth), #_"int" (§ name parentFingerprint)])
    (§ block
        (§ super nil, (compressPoint (Preconditions/checkNotNull publicAsPoint)))

        (Preconditions/checkArgument (== (.. chainCode length) 32))

        (§ ass (§ name (.. this parent)) parent)
        (§ ass (§ name (.. this childNumberPath)) (Preconditions/checkNotNull childNumberPath))
        (§ ass (§ name (.. this chainCode)) (Arrays/copyOf chainCode, (.. chainCode length)))
        (§ ass (§ name (.. this depth)) depth)
        (§ ass (§ name (.. this parentFingerprint)) (ascertainParentFingerprint parent, parentFingerprint))
        this
    )

    ;;;
     ; Constructs a key from its components, including its private key data and possibly-redundant
     ; information about its parent key.  Invoked when deserializing, but otherwise not something that
     ; you normally should use.
     ;;
    #_public
    (§ constructor #_"DeterministicKey" [#_"ImmutableList<ChildNumber>" (§ name childNumberPath), #_"byte[]" (§ name chainCode), #_"BigInteger" (§ name priv), #_nilable #_"DeterministicKey" (§ name parent), #_"int" (§ name depth), #_"int" (§ name parentFingerprint)])
    (§ block
        (§ super priv, (compressPoint (ECKey/publicPointFromPrivate priv)))

        (Preconditions/checkArgument (== (.. chainCode length) 32))

        (§ ass (§ name (.. this parent)) parent)
        (§ ass (§ name (.. this childNumberPath)) (Preconditions/checkNotNull childNumberPath))
        (§ ass (§ name (.. this chainCode)) (Arrays/copyOf chainCode, (.. chainCode length)))
        (§ ass (§ name (.. this depth)) depth)
        (§ ass (§ name (.. this parentFingerprint)) (ascertainParentFingerprint parent, parentFingerprint))
        this
    )

    ;;; Clones the key. ;;
    #_public
    (§ constructor #_"DeterministicKey" [#_"DeterministicKey" (§ name keyToClone), #_"DeterministicKey" (§ name newParent)])
    (§ block
        (§ super (.. keyToClone priv), (.. keyToClone pub (get)))

        (§ ass (§ name (.. this parent)) newParent)
        (§ ass (§ name (.. this childNumberPath)) (.. keyToClone childNumberPath))
        (§ ass (§ name (.. this chainCode)) (.. keyToClone chainCode))
        (§ ass (§ name (.. this encryptedPrivateKey)) (.. keyToClone encryptedPrivateKey))
        (§ ass (§ name (.. this depth)) (.. this childNumberPath (size)))
        (§ ass (§ name (.. this parentFingerprint)) (.. this parent (getFingerprint)))
        this
    )

    ;;;
     ; Returns the path through some {@link DeterministicHierarchy} which reaches this keys position in the tree.
     ; A path can be written as 1/2/1 which means the first child of the root, the second child of that node, then
     ; the first child of that node.
     ;;
    #_public
    (§ method #_"ImmutableList<ChildNumber>" (§ fn getPath) [])
    (§ block
        childNumberPath
    )

    ;;;
     ; Returns the path of this key as a human readable string starting with M to indicate the master key.
     ;;
    #_public
    (§ method #_"String" (§ fn getPathAsString) [])
    (§ block
        (HDUtils/formatPath (getPath))
    )

    ;;;
     ; Return this key's depth in the hierarchy, where the root node is at depth zero.
     ; This may be different than the number of segments in the path if this key was
     ; deserialized without access to its parent.
     ;;
    #_public
    (§ method #_"int" (§ fn getDepth) [])
    (§ block
        depth
    )

    ;;; Returns the last element of the path returned by {@link DeterministicKey#getPath()}. ;;
    #_public
    (§ method #_"ChildNumber" (§ fn getChildNumber) [])
    (§ block
        (if (== (.. childNumberPath (size)) 0) ChildNumber/ZERO (.. childNumberPath (get (- (.. childNumberPath (size)) 1))))
    )

    ;;;
     ; Returns the chain code associated with this key.  See the specification to learn more about chain codes.
     ;;
    #_public
    (§ method #_"byte[]" (§ fn getChainCode) [])
    (§ block
        chainCode
    )

    ;;;
     ; Returns RIPE-MD160(SHA256(pub key bytes)).
     ;;
    #_public
    (§ method #_"byte[]" (§ fn getIdentifier) [])
    (§ block
        (Utils/sha256hash160 (getPubKey))
    )

    ;;; Returns the first 32 bits of the result of {@link #getIdentifier()}. ;;
    #_public
    (§ method #_"int" (§ fn getFingerprint) [])
    (§ block
        ;; TODO: Why is this different than armory's fingerprint?  BIP 32: "The first 32 bits of the identifier are called the fingerprint."
        (.. (ByteBuffer/wrap (Arrays/copyOfRange (getIdentifier), 0, 4)) (getInt))
    )

    #_nilable
    #_public
    (§ method #_"DeterministicKey" (§ fn getParent) [])
    (§ block
        parent
    )

    ;;;
     ; Return the fingerprint of the key from which this key was derived, if this is
     ; a child key, or else an array of four zero-value bytes.
     ;;
    #_public
    (§ method #_"int" (§ fn getParentFingerprint) [])
    (§ block
        parentFingerprint
    )

    ;;;
     ; Returns private key bytes, padded with zeros to 33 bytes.
     ; @throws java.lang.IllegalStateException if the private key bytes are missing.
     ;;
    #_public
    (§ method #_"byte[]" (§ fn getPrivKeyBytes33) [])
    (§ block
        (§ var #_"byte[]" (§ name bytes33) (§ new #_"byte[]" (§ count 33)))
        (§ var #_"byte[]" (§ name priv) (getPrivKeyBytes))
        (System/arraycopy priv, 0, bytes33, (§ expr 33 - (.. priv length)), (.. priv length))
        bytes33
    )

    ;;;
     ; Returns the same key with the private bytes removed.  May return the same instance.  The purpose of this is to
     ; save memory: the private key can always be very efficiently rederived from a parent that a private key, so storing
     ; all the private keys in RAM is a poor tradeoff especially on constrained devices.  This means that the returned
     ; key may still be usable for signing and so on, so don't expect it to be a true pubkey-only object!  If you want
     ; that then you should follow this call with a call to {@link #dropParent()}.
     ;;
    #_public
    (§ method #_"DeterministicKey" (§ fn dropPrivateBytes) [])
    (§ block
        (if (isPubKeyOnly) this (§ new #_"DeterministicKey" (getPath), (getChainCode), pub, nil, parent))
    )

    ;;;
     ; <p>Returns the same key with the parent pointer removed (it still knows its own path and the parent fingerprint).</p>
     ;
     ; <p>If this key doesn't have private key bytes stored/cached itself, but could rederive them from the parent, then
     ; the new key returned by this method won't be able to do that.  Thus, using dropPrivateBytes().dropParent() on a
     ; regular DeterministicKey will yield a new DeterministicKey that cannot sign or do other things involving the
     ; private key at all.</p>
     ;;
    #_public
    (§ method #_"DeterministicKey" (§ fn dropParent) [])
    (§ block
        (§ var #_"DeterministicKey" (§ name key) (§ new #_"DeterministicKey" (getPath), (getChainCode), pub, priv, nil))
        (§ ass (§ name (.. key parentFingerprint)) parentFingerprint)
        key
    )

    #_static
    (§ defn #_"byte[]" (§ fn addChecksum) [#_"byte[]" (§ name input)])
    (§ block
        (§ var #_"int" (§ name inputLength) (.. input length))
        (§ var #_"byte[]" (§ name checksummed) (§ new #_"byte[]" (§ count inputLength + 4)))
        (System/arraycopy input, 0, checksummed, 0, inputLength)
        (§ var #_"byte[]" (§ name checksum) (Sha256Hash/hashTwice input))
        (System/arraycopy checksum, 0, checksummed, inputLength, 4)
        checksummed
    )

    #_override
    #_public
    (§ method #_"DeterministicKey" (§ fn encrypt) [#_"KeyCrypter" (§ name keyCrypter), #_"KeyParameter" (§ name aesKey)])
        (§ throws #_"KeyCrypterException")
    (§ block
        (§ throw (§ new #_"UnsupportedOperationException" "Must supply a new parent for encryption"))
    )

    #_public
    (§ method #_"DeterministicKey" (§ fn encrypt) [#_"KeyCrypter" (§ name keyCrypter), #_"KeyParameter" (§ name aesKey), #_nilable #_"DeterministicKey" (§ name newParent)])
        (§ throws #_"KeyCrypterException")
    (§ block
        ;; Same as the parent code, except we construct a DeterministicKey instead of an ECKey.
        (Preconditions/checkNotNull keyCrypter)
        (§ if (some? newParent))
        (§ block
            (Preconditions/checkArgument (.. newParent (isEncrypted)))
        )

        (§ var #_"byte[]" (§ name privKeyBytes) (getPrivKeyBytes))
        (Preconditions/checkState (some? privKeyBytes), "Private key is not available")

        (§ var #_"EncryptedData" (§ name encryptedPrivateKey) (.. keyCrypter (encrypt privKeyBytes, aesKey)))
        (§ var #_"DeterministicKey" (§ name key) (§ new #_"DeterministicKey" childNumberPath, chainCode, keyCrypter, pub, encryptedPrivateKey, newParent))
        (§ if (nil? newParent))
        (§ block
            (.. key (setCreationTimeSeconds (getCreationTimeSeconds)))
        )
        key
    )

    ;;;
     ; A deterministic key is considered to be 'public key only' if it hasn't got a private key part and it cannot be
     ; rederived.  If the hierarchy is encrypted this returns true.
     ;;
    #_override
    #_public
    (§ method #_"boolean" (§ fn isPubKeyOnly) [])
    (§ block
        (§ expr (.. super (isPubKeyOnly)) && (§ expr parent == nil || (.. parent (isPubKeyOnly))))
    )

    ;;; {@inheritDoc} ;;
    #_override
    #_public
    (§ method #_"boolean" (§ fn hasPrivKey) [])
    (§ block
        (some? (findParentWithPrivKey))
    )

    #_nilable
    #_override
    #_public
    (§ method #_"byte[]" (§ fn getSecretBytes) [])
    (§ block
        (when (some? priv) (getPrivKeyBytes))
    )

    ;;;
     ; A deterministic key is considered to be encrypted if it has access to encrypted private key bytes, OR if its
     ; parent does.  The reason is because the parent would be encrypted under the same key and this key knows how to
     ; rederive its own private key bytes from the parent, if needed.
     ;;
    #_override
    #_public
    (§ method #_"boolean" (§ fn isEncrypted) [])
    (§ block
        (§ expr priv == nil && (§ expr (.. super (isEncrypted)) || (§ expr parent != nil && (.. parent (isEncrypted)))))
    )

    ;;;
     ; Returns this keys {@link org.bitcoinj.crypto.KeyCrypter} <b>or</b> the keycrypter of its parent key.
     ;;
    #_override
    #_nilable
    #_public
    (§ method #_"KeyCrypter" (§ fn getKeyCrypter) [])
    (§ block
        (§ if (some? keyCrypter))
        (§ block
            (§ return keyCrypter)
        )
        (§ if (some? parent))
        (§ block
            (§ return (.. parent (getKeyCrypter)))
        )

        nil
    )

    #_override
    #_public
    (§ method #_"ECDSASignature" (§ fn sign) [#_"Sha256Hash" (§ name input), #_nilable #_"KeyParameter" (§ name aesKey)])
        (§ throws #_"KeyCrypterException")
    (§ block
        (§ if (isEncrypted))
        (§ block
            ;; If the key is encrypted, ECKey.sign will decrypt it first before rerunning sign.  Decryption walks
            ;; the key heirarchy to find the private key (see below), so, we can just run the inherited method.
            (§ return (.. super (sign input, aesKey)))
        )
        (§ else )
        (§ block
            ;; If it's not encrypted, derive the private via the parents.
            (§ var #_"BigInteger" (§ name privateKey) (findOrDerivePrivateKey))
            ;; This key is a part of a public-key only heirarchy and cannot be used for signing.
            (§ if (nil? privateKey))
            (§ block
                (§ throw (§ new #_"MissingPrivateKeyException"))
            )

            (§ return (.. super (doSign input, privateKey)))
        )
    )

    #_override
    #_public
    (§ method #_"DeterministicKey" (§ fn decrypt) [#_"KeyCrypter" (§ name keyCrypter), #_"KeyParameter" (§ name aesKey)])
        (§ throws #_"KeyCrypterException")
    (§ block
        (Preconditions/checkNotNull keyCrypter)
        ;; Check that the keyCrypter matches the one used to encrypt the keys, if set.
        (§ if (§ expr (.. this keyCrypter) != nil && (§ not (.. this keyCrypter (equals keyCrypter)))))
        (§ block
            (§ throw (§ new #_"KeyCrypterException" "The keyCrypter being used to decrypt the key is different to the one that was used to encrypt it"))
        )

        (§ var #_"BigInteger" (§ name privKey) (findOrDeriveEncryptedPrivateKey keyCrypter, aesKey))
        (§ var #_"DeterministicKey" (§ name key) (§ new #_"DeterministicKey" childNumberPath, chainCode, privKey, parent))
        (§ if (§ not (Arrays/equals (.. key (getPubKey)), (getPubKey))))
        (§ block
            (§ throw (§ new #_"KeyCrypterException" "Provided AES key is wrong"))
        )

        (§ if (nil? parent))
        (§ block
            (.. key (setCreationTimeSeconds (getCreationTimeSeconds)))
        )
        key
    )

    #_override
    #_public
    (§ method #_"DeterministicKey" (§ fn decrypt) [#_"KeyParameter" (§ name aesKey)])
        (§ throws #_"KeyCrypterException")
    (§ block
        (§ cast #_"DeterministicKey" (.. super (decrypt aesKey)))
    )

    ;; For when a key is encrypted, either decrypt our encrypted private key bytes, or work up the tree asking parents
    ;; to decrypt and re-derive.
    #_private
    (§ method- #_"BigInteger" (§ fn findOrDeriveEncryptedPrivateKey) [#_"KeyCrypter" (§ name keyCrypter), #_"KeyParameter" (§ name aesKey)])
    (§ block
        (§ if (some? encryptedPrivateKey))
        (§ block
            (§ return (§ new #_"BigInteger" 1, (.. keyCrypter (decrypt encryptedPrivateKey, aesKey))))
        )

        ;; Otherwise we don't have it, but maybe we can figure it out from our parents.  Walk up the tree looking for
        ;; the first key that has some encrypted private key data.
        (§ var #_"DeterministicKey" (§ name cursor) parent)
        (§ while (some? cursor))
        (§ block
            (§ if (!= (.. cursor encryptedPrivateKey) nil))
            (§ block
                (§ break )
            )
            (§ ass (§ name cursor) (.. cursor parent))
        )
        (§ if (nil? cursor))
        (§ block
            (§ throw (§ new #_"KeyCrypterException" "Neither this key nor its parents have an encrypted private key"))
        )

        (§ var #_"byte[]" (§ name parentalPrivateKeyBytes) (.. keyCrypter (decrypt (.. cursor encryptedPrivateKey), aesKey)))
        (derivePrivateKeyDownwards cursor, parentalPrivateKeyBytes)
    )

    #_private
    (§ method- #_"DeterministicKey" (§ fn findParentWithPrivKey) [])
    (§ block
        (§ var #_"DeterministicKey" (§ name cursor) this)
        (§ while (some? cursor))
        (§ block
            (§ if (!= (.. cursor priv) nil))
            (§ block
                (§ break )
            )
            (§ ass (§ name cursor) (.. cursor parent))
        )
        cursor
    )

    #_nilable
    #_private
    (§ method- #_"BigInteger" (§ fn findOrDerivePrivateKey) [])
    (§ block
        (§ var #_"DeterministicKey" (§ name cursor) (findParentWithPrivKey))
        (§ if (nil? cursor))
        (§ block
            (§ return nil)
        )

        (derivePrivateKeyDownwards cursor, (.. cursor priv (toByteArray)))
    )

    #_private
    (§ method- #_"BigInteger" (§ fn derivePrivateKeyDownwards) [#_"DeterministicKey" (§ name cursor), #_"byte[]" (§ name parentalPrivateKeyBytes)])
    (§ block
        (§ var #_"DeterministicKey" (§ name downCursor) (§ new #_"DeterministicKey" (.. cursor childNumberPath), (.. cursor chainCode), (.. cursor pub), (§ new #_"BigInteger" 1, parentalPrivateKeyBytes), (.. cursor parent)))
        ;; Now we have to rederive the keys along the path back to ourselves.  That path can be found by just truncating
        ;; our path with the length of the parents path.
        (§ var #_"ImmutableList<ChildNumber>" (§ name path) (.. childNumberPath (subList (.. cursor (getPath) (size)), (.. childNumberPath (size)))))
        (§ for (§ var #_"ChildNumber" (§ name num)) :for path)
        (§ block
            (§ ass (§ name downCursor) (HDKeyDerivation/deriveChildKey downCursor, num))
        )
        ;; downCursor is now the same key as us, but with private key bytes.
        ;; If it's not, it means we tried decrypting with an invalid password and earlier checks e.g. for padding didn't
        ;; catch it.
        (§ if (§ not (.. downCursor pub (equals pub))))
        (§ block
            (§ throw (§ new #_"KeyCrypterException" "Could not decrypt bytes"))
        )

        (Preconditions/checkNotNull (.. downCursor priv))
    )

    ;;;
     ; Derives a child at the given index using hardened derivation.  Note: <code>index</code>
     ; is not the "i" value.  If you want the softened derivation, then use instead
     ; <code>HDKeyDerivation.deriveChildKey(this, new ChildNumber(child, false))</code>.
     ;;
    #_public
    (§ method #_"DeterministicKey" (§ fn derive) [#_"int" (§ name child)])
    (§ block
        (HDKeyDerivation/deriveChildKey this, (§ new #_"ChildNumber" child, true))
    )

    ;;;
     ; Returns the private key of this deterministic key.  Even if this object isn't storing the private key,
     ; it can be re-derived by walking up to the parents if necessary and this is what will happen.
     ; @throws java.lang.IllegalStateException if the parents are encrypted or a watching chain.
     ;;
    #_override
    #_public
    (§ method #_"BigInteger" (§ fn getPrivKey) [])
    (§ block
        (§ var #_"BigInteger" (§ name key) (findOrDerivePrivateKey))
        (Preconditions/checkState (some? key), "Private key bytes not available")
        key
    )

    #_public
    (§ method #_"byte[]" (§ fn serializePublic) [#_"NetworkParameters" (§ name params)])
    (§ block
        (serialize params, true)
    )

    #_public
    (§ method #_"byte[]" (§ fn serializePrivate) [#_"NetworkParameters" (§ name params)])
    (§ block
        (serialize params, false)
    )

    #_private
    (§ method- #_"byte[]" (§ fn serialize) [#_"NetworkParameters" (§ name params), #_"boolean" (§ name pub)])
    (§ block
        (§ var #_"ByteBuffer" (§ name ser) (ByteBuffer/allocate 78))
        (.. ser (putInt (if pub (.. params (getBip32HeaderPub)) (.. params (getBip32HeaderPriv)))))
        (.. ser (put (§ cast #_"byte" (getDepth))))
        (.. ser (putInt (getParentFingerprint)))
        (.. ser (putInt (.. (getChildNumber) (i))))
        (.. ser (put (getChainCode)))
        (.. ser (put (if pub (getPubKey) (getPrivKeyBytes33))))
        (Preconditions/checkState (== (.. ser (position)) 78))
        (.. ser (array))
    )

    #_public
    (§ method #_"String" (§ fn serializePubB58) [#_"NetworkParameters" (§ name params)])
    (§ block
        (toBase58 (serialize params, true))
    )

    #_public
    (§ method #_"String" (§ fn serializePrivB58) [#_"NetworkParameters" (§ name params)])
    (§ block
        (toBase58 (serialize params, false))
    )

    #_static
    (§ defn #_"String" (§ fn toBase58) [#_"byte[]" (§ name ser)])
    (§ block
        (Base58/encode (addChecksum ser))
    )

    ;;; Deserialize a base-58-encoded HD Key with no parent. ;;
    #_public
    #_static
    (§ defn #_"DeterministicKey" (§ fn deserializeB58) [#_"String" (§ name base58), #_"NetworkParameters" (§ name params)])
    (§ block
        (deserializeB58 nil, base58, params)
    )

    ;;;
     ; Deserialize a base-58-encoded HD Key.
     ; @param parent The parent node in the given key's deterministic hierarchy.
     ; @throws IllegalArgumentException if the base58 encoded key could not be parsed.
     ;;
    #_public
    #_static
    (§ defn #_"DeterministicKey" (§ fn deserializeB58) [#_nilable #_"DeterministicKey" (§ name parent), #_"String" (§ name base58), #_"NetworkParameters" (§ name params)])
    (§ block
        (deserialize params, (Base58/decodeChecked base58), parent)
    )

    ;;;
     ; Deserialize an HD Key with no parent.
     ;;
    #_public
    #_static
    (§ defn #_"DeterministicKey" (§ fn deserialize) [#_"NetworkParameters" (§ name params), #_"byte[]" (§ name serializedKey)])
    (§ block
        (deserialize params, serializedKey, nil)
    )

    ;;;
     ; Deserialize an HD Key.
     ; @param parent The parent node in the given key's deterministic hierarchy.
     ;;
    #_public
    #_static
    (§ defn #_"DeterministicKey" (§ fn deserialize) [#_"NetworkParameters" (§ name params), #_"byte[]" (§ name serializedKey), #_nilable #_"DeterministicKey" (§ name parent)])
    (§ block
        (§ var #_"ByteBuffer" (§ name buffer) (ByteBuffer/wrap serializedKey))
        (§ var #_"int" (§ name header) (.. buffer (getInt)))
        (§ if (§ expr header != (.. params (getBip32HeaderPriv)) && header != (.. params (getBip32HeaderPub))))
        (§ block
            (§ throw (§ new #_"IllegalArgumentException" (§ str "Unknown header bytes: " + (.. (toBase58 serializedKey) (substring 0, 4)))))
        )

        (§ var #_"boolean" (§ name pub) (§ expr header == (.. params (getBip32HeaderPub))))
        (§ var #_"int" (§ name depth) (& (.. buffer (get)) 0xff)) ;; convert signed byte to positive int since depth cannot be negative
        (§ var #_"int" (§ name parentFingerprint) (.. buffer (getInt)))
        (§ var #_"int" (§ name i) (.. buffer (getInt)))
        (§ var #_"ChildNumber" (§ name childNumber) (§ new #_"ChildNumber" i))
        (§ var #_"ImmutableList<ChildNumber>" (§ name path))
        (§ if (some? parent))
        (§ block
            (§ if (§ expr parentFingerprint == 0))
            (§ block
                (§ throw (§ new #_"IllegalArgumentException" "Parent was provided but this key doesn't have one"))
            )
            (§ if (!= (.. parent (getFingerprint)) parentFingerprint))
            (§ block
                (§ throw (§ new #_"IllegalArgumentException" "Parent fingerprints don't match"))
            )
            (§ ass (§ name path) (HDUtils/append (.. parent (getPath)), childNumber))
            (§ if (!= (.. path (size)) depth))
            (§ block
                (§ throw (§ new #_"IllegalArgumentException" "Depth does not match"))
            )
        )
        (§ else )
        (§ block
            ;; We have been given a key that is not a root key, yet we lack the object representing the parent.
            ;; This can happen when deserializing an account key for a watching wallet.  In this case, we assume that
            ;; the client wants to conceal the key's position in the hierarchy.  The path is truncated at the
            ;; parent's node.
            (§ if (<= 1 depth))
            (§ block
                (§ ass (§ name path) (ImmutableList/of childNumber))
            )
            (§ else )
            (§ block
                (§ ass (§ name path) (ImmutableList/of))
            )
        )
        (§ var #_"byte[]" (§ name chainCode) (§ new #_"byte[]" (§ count 32)))
        (.. buffer (get chainCode))
        (§ var #_"byte[]" (§ name data) (§ new #_"byte[]" (§ count 33)))
        (.. buffer (get data))
        (Preconditions/checkArgument (§ not (.. buffer (hasRemaining))), "Found unexpected data in key")
        (§ if pub)
        (§ block
            (§ return (§ new #_"DeterministicKey" path, chainCode, (§ new #_"LazyECPoint" (.. ECKey/CURVE (getCurve)), data), parent, depth, parentFingerprint))
        )
        (§ else )
        (§ block
            (§ return (§ new #_"DeterministicKey" path, chainCode, (§ new #_"BigInteger" 1, data), parent, depth, parentFingerprint))
        )
    )

    ;;;
     ; The creation time of a deterministic key is equal to that of its parent, unless this key is the root of a tree
     ; in which case the time is stored alongside the key as per normal, see {@link org.bitcoinj.core.ECKey#getCreationTimeSeconds()}.
     ;;
    #_override
    #_public
    (§ method #_"long" (§ fn getCreationTimeSeconds) [])
    (§ block
        (§ if (some? parent))
        (§ block
            (§ return (.. parent (getCreationTimeSeconds)))
        )
        (§ else )
        (§ block
            (§ return (.. super (getCreationTimeSeconds)))
        )
    )

    ;;;
     ; The creation time of a deterministic key is equal to that of its parent, unless this key is the root of a tree.
     ; Thus, setting the creation time on a leaf is forbidden.
     ;;
    #_override
    #_public
    (§ method #_"void" (§ fn setCreationTimeSeconds) [#_"long" (§ name newCreationTimeSeconds)])
    (§ block
        (§ if (some? parent))
        (§ block
            (§ throw (§ new #_"IllegalStateException" "Creation time can only be set on root keys."))
        )
        (§ else )
        (§ block
            (.. super (setCreationTimeSeconds newCreationTimeSeconds))
        )
        nil
    )

    ;;;
     ; Verifies equality of all fields but NOT the parent pointer (thus the same key derived in two separate heirarchy
     ; objects will equal each other.
     ;;
    #_override
    #_public
    (§ method #_"boolean" (§ fn equals) [#_"Object" (§ name o)])
    (§ block
        (§ if (§ expr this == o))
        (§ block
            (§ return true)
        )
        (§ if (§ expr o == nil || (getClass) != (.. o (getClass))))
        (§ block
            (§ return false)
        )
        (§ var #_"DeterministicKey" (§ name other) (§ cast #_"DeterministicKey" o))
        (§ expr (.. super (equals other)) && (Arrays/equals (.. this chainCode), (.. other chainCode)) && (Objects/equal (.. this childNumberPath), (.. other childNumberPath)))
    )

    #_override
    #_public
    (§ method #_"int" (§ fn hashCode) [])
    (§ block
        (Objects/hashCode (.. super (hashCode)), (Arrays/hashCode chainCode), childNumberPath)
    )

    #_override
    #_public
    (§ method #_"String" (§ fn toString) [])
    (§ block
        (§ var #_"MoreObjects.ToStringHelper" (§ name helper) (.. (MoreObjects/toStringHelper this) (omitNullValues)))
        (.. helper (add "pub", (.. Utils/HEX (encode (.. pub (getEncoded))))))
        (.. helper (add "chainCode", (.. HEX (encode chainCode))))
        (.. helper (add "path", (getPathAsString)))
        (§ if (< 0 creationTimeSeconds))
        (§ block
            (.. helper (add "creationTimeSeconds", creationTimeSeconds))
        )
        (.. helper (add "isEncrypted", (isEncrypted)))
        (.. helper (add "isPubKeyOnly", (isPubKeyOnly)))
        (.. helper (toString))
    )

    #_override
    #_public
    (§ method #_"void" (§ fn formatKeyWithAddress) [#_"boolean" (§ name includePrivateKeys), #_"StringBuilder" (§ name sb), #_"NetworkParameters" (§ name params)])
    (§ block
        (§ var #_"Address" (§ name address) (toAddress params))
        (.. sb (append "  addr:") (append address))
        (.. sb (append "  hash160:") (append (.. Utils/HEX (encode (getPubKeyHash)))))
        (.. sb (append "  (") (append (getPathAsString)) (append ")\n"))
        (§ if includePrivateKeys)
        (§ block
            (.. sb (append "  ") (append (toStringWithPrivate params)) (append "\n"))
        )
        nil
    )
)

#_(ns org.bitcoinj.crypto #_"EncryptableItem"
   (:require [org.bitcoinj.wallet Protos]))

;;;
 ; Provides a uniform way to access something that can be optionally encrypted with a
 ; {@link org.bitcoinj.crypto.KeyCrypter}, yielding an {@link org.bitcoinj.crypto.EncryptedData},
 ; and which can have a creation time associated with it.
 ;;
#_public
(§ interface #_"EncryptableItem"
    ;;; Returns whether the item is encrypted or not.  If it is, then {@link #getSecretBytes()} will return null. ;;
    (§ method #_"boolean" (§ fn isEncrypted) [])

    ;;; Returns the raw bytes of the item, if not encrypted, or null if encrypted or the secret is missing. ;;
    #_nilable
    (§ method #_"byte[]" (§ fn getSecretBytes) [])

    ;;; Returns the initialization vector and encrypted secret bytes, or null if not encrypted. ;;
    #_nilable
    (§ method #_"EncryptedData" (§ fn getEncryptedData) [])

    ;;; Returns an enum constant describing what algorithm was used to encrypt the key or UNENCRYPTED. ;;
    (§ method #_"Protos.Wallet.EncryptionType" (§ fn getEncryptionType) [])

    ;;; Returns the time in seconds since the UNIX epoch at which this encryptable item was first created/derived. ;;
    (§ method #_"long" (§ fn getCreationTimeSeconds) [])
)

#_(ns org.bitcoinj.crypto #_"EncryptedData"
    (:import [java.util Arrays])
    (:import [com.google.common.base Objects]))

;;;
 ; <p>An instance of EncryptedData is a holder for an initialization vector and encrypted bytes.
 ; It is typically used to hold encrypted private key bytes.</p>
 ;
 ; <p>The initialisation vector is random data that is used to initialise the AES block cipher when
 ; the private key bytes were encrypted.  You need these for decryption.</p>
 ;;
#_public
(§ class #_"EncryptedData"
    #_public
    (§ field #_"byte[]" (§ name initialisationVector))
    #_public
    (§ field #_"byte[]" (§ name encryptedBytes))

    #_public
    (§ constructor #_"EncryptedData" [#_"byte[]" (§ name initialisationVector), #_"byte[]" (§ name encryptedBytes)])
    (§ block
        (§ ass (§ name (.. this initialisationVector)) (Arrays/copyOf initialisationVector, (.. initialisationVector length)))
        (§ ass (§ name (.. this encryptedBytes)) (Arrays/copyOf encryptedBytes, (.. encryptedBytes length)))
        this
    )

    #_override
    #_public
    (§ method #_"boolean" (§ fn equals) [#_"Object" (§ name o)])
    (§ block
        (§ if (§ expr this == o))
        (§ block
            (§ return true)
        )
        (§ if (§ expr o == nil || (getClass) != (.. o (getClass))))
        (§ block
            (§ return false)
        )
        (§ var #_"EncryptedData" (§ name other) (§ cast #_"EncryptedData" o))
        (§ expr (Arrays/equals encryptedBytes, (.. other encryptedBytes)) && (Arrays/equals initialisationVector, (.. other initialisationVector)))
    )

    #_override
    #_public
    (§ method #_"int" (§ fn hashCode) [])
    (§ block
        (Objects/hashCode (Arrays/hashCode encryptedBytes), (Arrays/hashCode initialisationVector))
    )

    #_override
    #_public
    (§ method #_"String" (§ fn toString) [])
    (§ block
        (§ expr "EncryptedData [initialisationVector=" + (Arrays/toString initialisationVector) + ", encryptedPrivateKey=" + (Arrays/toString encryptedBytes) + "]")
    )
)

#_(ns org.bitcoinj.crypto #_"HDDerivationException")

#_public
(§ class #_"HDDerivationException" (§ extends #_"RuntimeException")
    #_public
    (§ constructor #_"HDDerivationException" [#_"String" (§ name message)])
    (§ block
        (§ super message)
        this
    )
)

#_(ns org.bitcoinj.crypto #_"HDKeyDerivation"
    (:import [java.math *]
             [java.nio *]
             [java.security *]
             [java.util *])
    (:import [com.google.common.base Preconditions]
             [com.google.common.collect *]
             [org.spongycastle.math.ec *])
   (:require [org.bitcoinj.core *]))

;;;
 ; Implementation of the <a href="https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki">BIP 32</a>
 ; deterministic wallet child key generation algorithm.
 ;;
#_public
(§ class #_"HDKeyDerivation"
    #_static
    (§ block
        ;; Init proper random number generator, as some old Android installations have bugs that make it unsecure.
        (§ if (Utils/isAndroidRuntime))
        (§ block
            (§ new #_"LinuxSecureRandom")
        )

        (§ ass (§ name RAND_INT) (§ new #_"BigInteger" 256, (§ new #_"SecureRandom")))
    )

    ;; Some arbitrary random number.  Doesn't matter what it is.
    #_private
    #_static
    (§ def- #_"BigInteger" (§ name RAND_INT))

    #_private
    (§ constructor- #_"HDKeyDerivation" [])
    (§ block
        this
    )

    ;;;
     ; Child derivation may fail (although with extremely low probability); in such case it is re-attempted.
     ; This is the maximum number of re-attempts (to avoid an infinite loop in case of bugs etc.)
     ;;
    #_public
    #_static
    (§ def #_"int" (§ name MAX_CHILD_DERIVATION_ATTEMPTS) 100)

    ;;;
     ; Generates a new deterministic key from the given seed, which can be any arbitrary byte array.
     ; However resist the temptation to use a string as the seed - any key derived from a password
     ; is likely to be weak and easily broken by attackers (this is not theoretical, people have had
     ; money stolen that way).  This method checks that the given seed is at least 64 bits long.
     ;
     ; @throws HDDerivationException if generated master key is invalid (private key 0 or >= n).
     ; @throws IllegalArgumentException if the seed is less than 8 bytes and could be brute forced.
     ;;
    #_public
    #_static
    (§ defn #_"DeterministicKey" (§ fn createMasterPrivateKey) [#_"byte[]" (§ name seed)])
        (§ throws #_"HDDerivationException")
    (§ block
        (Preconditions/checkArgument (§ expr 8 < (.. seed length)), "Seed is too short and could be brute forced")

        ;; Calculate I = HMAC-SHA512(key="Bitcoin seed", msg=S).
        (§ var #_"byte[]" (§ name i) (HDUtils/hmacSha512 (§ expr (HDUtils/createHmacSha512Digest (.. "Bitcoin seed" (getBytes)))), seed))
        ;; Split I into two 32-byte sequences, Il and Ir.
        ;; Use Il as master secret key, and Ir as master chain code.
        (Preconditions/checkState (§ expr (.. i length) == 64), (.. i length))

        (§ var #_"byte[]" (§ name il) (Arrays/copyOfRange i, 0, 32))
        (§ var #_"byte[]" (§ name ir) (Arrays/copyOfRange i, 32, 64))
        (Arrays/fill i, (§ cast #_"byte" 0))
        (§ var #_"DeterministicKey" (§ name masterPrivKey) (createMasterPrivKeyFromBytes il, ir))
        (Arrays/fill il, (§ cast #_"byte" 0))
        (Arrays/fill ir, (§ cast #_"byte" 0))

        ;; Child deterministic keys will chain up to their parents to find the keys.
        (.. masterPrivKey (setCreationTimeSeconds (Utils/currentTimeSeconds)))
        masterPrivKey
    )

    ;;;
     ; @throws HDDerivationException if privKeyBytes is invalid (0 or >= n).
     ;;
    #_public
    #_static
    (§ defn #_"DeterministicKey" (§ fn createMasterPrivKeyFromBytes) [#_"byte[]" (§ name privKeyBytes), #_"byte[]" (§ name chainCode)])
        (§ throws #_"HDDerivationException")
    (§ block
        (§ var #_"BigInteger" (§ name priv) (§ new #_"BigInteger" 1, privKeyBytes))
        (assertNonZero priv, "Generated master key is invalid.")
        (assertLessThanN priv, "Generated master key is invalid.")
        (§ new #_"DeterministicKey" (ImmutableList/of #_"ImmutableList<ChildNumber>"), chainCode, priv, nil)
    )

    #_public
    #_static
    (§ defn #_"DeterministicKey" (§ fn createMasterPubKeyFromBytes) [#_"byte[]" (§ name pubKeyBytes), #_"byte[]" (§ name chainCode)])
    (§ block
        (§ new #_"DeterministicKey" (ImmutableList/of #_"ImmutableList<ChildNumber>"), chainCode, (§ new #_"LazyECPoint" (.. ECKey/CURVE (getCurve)), pubKeyBytes), nil, nil)
    )

    ;;;
     ; Derives a key given the "extended" child number, i.e. the 0x80000000 bit of the value that you
     ; pass for <code>childNumber</code> will determine whether to use hardened derivation or not.
     ; Consider whether your code would benefit from the clarity of the equivalent, but explicit, form
     ; of this method that takes a <code>ChildNumber</code> rather than an <code>int</code>, for example:
     ; <code>deriveChildKey(parent, new ChildNumber(childNumber, true))</code>
     ; where the value of the hardened bit of <code>childNumber</code> is zero.
     ;;
    #_public
    #_static
    (§ defn #_"DeterministicKey" (§ fn deriveChildKey) [#_"DeterministicKey" (§ name parent), #_"int" (§ name childNumber)])
    (§ block
        (deriveChildKey parent, (§ new #_"ChildNumber" childNumber))
    )

    ;;;
     ; Derives a key of the "extended" child number, i.e. with the 0x80000000 bit specifying whether
     ; to use hardened derivation or not.  If derivation fails, tries a next child.
     ;;
    #_public
    #_static
    (§ defn #_"DeterministicKey" (§ fn deriveThisOrNextChildKey) [#_"DeterministicKey" (§ name parent), #_"int" (§ name childNumber)])
    (§ block
        (§ var #_"ChildNumber" (§ name child) (§ new #_"ChildNumber" childNumber))
        (§ var #_"boolean" (§ name isHardened) (.. child (isHardened)))
        (§ for (§ var #_"int" (§ name i) 0) :for (< i MAX_CHILD_DERIVATION_ATTEMPTS) :for (§ ass (§ name i) (+ i 1)))
        (§ block
            (§ try )
            (§ block
                (§ ass (§ name child) (§ new #_"ChildNumber" (§ expr (.. child (num)) + i), isHardened))
                (§ return (deriveChildKey parent, child))
            )
            (§ catch #_"HDDerivationException" (§ name _))
            (§ block
            )
        )
        (§ throw (§ new #_"HDDerivationException" "Maximum number of child derivation attempts reached, this is probably an indication of a bug."))
    )

    ;;;
     ; @throws HDDerivationException if private derivation is attempted for a public-only parent key, or
     ; if the resulting derived key is invalid (e.g. private key == 0).
     ;;
    #_public
    #_static
    (§ defn #_"DeterministicKey" (§ fn deriveChildKey) [#_"DeterministicKey" (§ name parent), #_"ChildNumber" (§ name childNumber)])
        (§ throws #_"HDDerivationException")
    (§ block
        (§ if (§ not (.. parent (hasPrivKey))))
        (§ block
            (§ var #_"RawKeyBytes" (§ name rawKey) (deriveChildKeyBytesFromPublic parent, childNumber, PublicDeriveMode/NORMAL))
            (§ return (§ new #_"DeterministicKey" (HDUtils/append (.. parent (getPath)), childNumber), (.. rawKey chainCode), (§ new #_"LazyECPoint" (.. ECKey/CURVE (getCurve)), (.. rawKey keyBytes)), nil, parent))
        )
        (§ else )
        (§ block
            (§ var #_"RawKeyBytes" (§ name rawKey) (deriveChildKeyBytesFromPrivate parent, childNumber))
            (§ return (§ new #_"DeterministicKey" (HDUtils/append (.. parent (getPath)), childNumber), (.. rawKey chainCode), (§ new #_"BigInteger" 1, (.. rawKey keyBytes)), parent))
        )
    )

    #_public
    #_static
    (§ defn #_"RawKeyBytes" (§ fn deriveChildKeyBytesFromPrivate) [#_"DeterministicKey" (§ name parent), #_"ChildNumber" (§ name childNumber)])
        (§ throws #_"HDDerivationException")
    (§ block
        (Preconditions/checkArgument (.. parent (hasPrivKey)), "Parent key must have private key bytes for this method.")

        (§ var #_"byte[]" (§ name parentPublicKey) (.. parent (getPubKeyPoint) (getEncoded true)))
        (Preconditions/checkState (== (.. parentPublicKey length) 33), (§ str "Parent pubkey must be 33 bytes, but is " + (.. parentPublicKey length)))

        (§ var #_"ByteBuffer" (§ name data) (ByteBuffer/allocate 37))
        (.. data (put (if (.. childNumber (isHardened)) (.. parent (getPrivKeyBytes33)) parentPublicKey)))
        (.. data (putInt (.. childNumber (i))))

        (§ var #_"byte[]" (§ name i) (HDUtils/hmacSha512 (.. parent (getChainCode)), (.. data (array))))
        (Preconditions/checkState (§ expr (.. i length) == 64), (.. i length))

        (§ var #_"byte[]" (§ name il) (Arrays/copyOfRange i, 0, 32))
        (§ var #_"byte[]" (§ name chainCode) (Arrays/copyOfRange i, 32, 64))
        (§ var #_"BigInteger" (§ name ilInt) (§ new #_"BigInteger" 1, il))
        (assertLessThanN ilInt, "Illegal derived key: I_L >= n")

        (§ var #_"BigInteger" (§ name priv) (.. parent (getPrivKey)))
        (§ var #_"BigInteger" (§ name ki) (.. priv (add ilInt) (mod (.. ECKey/CURVE (getN)))))
        (assertNonZero ki, "Illegal derived key: derived private key equals 0.")

        (§ new #_"RawKeyBytes" (.. ki (toByteArray)), chainCode)
    )

    #_public
    (§ enum #_"PublicDeriveMode"
        (§ item NORMAL)
        (§ item WITH_INVERSION)
    )

    #_public
    #_static
    (§ defn #_"RawKeyBytes" (§ fn deriveChildKeyBytesFromPublic) [#_"DeterministicKey" (§ name parent), #_"ChildNumber" (§ name childNumber), #_"PublicDeriveMode" (§ name mode)])
        (§ throws #_"HDDerivationException")
    (§ block
        (Preconditions/checkArgument (§ not (.. childNumber (isHardened))), "Can't use private derivation with public keys only.")

        (§ var #_"byte[]" (§ name parentPublicKey) (.. parent (getPubKeyPoint) (getEncoded true)))
        (Preconditions/checkState (== (.. parentPublicKey length) 33), (§ str "Parent pubkey must be 33 bytes, but is " + (.. parentPublicKey length)))

        (§ var #_"ByteBuffer" (§ name data) (ByteBuffer/allocate 37))
        (.. data (put parentPublicKey))
        (.. data (putInt (.. childNumber (i))))

        (§ var #_"byte[]" (§ name i) (HDUtils/hmacSha512 (.. parent (getChainCode)), (.. data (array))))
        (Preconditions/checkState (§ expr (.. i length) == 64), (.. i length))

        (§ var #_"byte[]" (§ name il) (Arrays/copyOfRange i, 0, 32))
        (§ var #_"byte[]" (§ name chainCode) (Arrays/copyOfRange i, 32, 64))
        (§ var #_"BigInteger" (§ name ilInt) (§ new #_"BigInteger" 1, il))
        (assertLessThanN ilInt, "Illegal derived key: I_L >= n")

        (§ var #_"BigInteger" (§ name N) (.. ECKey/CURVE (getN)))
        (§ var #_"ECPoint" (§ name Ki))
        (§ switch mode)
        (§ block
            (§ case NORMAL)
            (§ block
                (§ ass (§ name Ki) (.. (ECKey/publicPointFromPrivate ilInt) (add (.. parent (getPubKeyPoint)))))
                (§ break )
            )
            (§ case WITH_INVERSION)
            (§ block
                ;; This trick comes from Gregory Maxwell.  Check the homomorphic properties of our curve hold.  The
                ;; below calculations should be redundant and give the same result as NORMAL but if the precalculated
                ;; tables have taken a bit flip will yield a different answer.  This mode is used when vending a key
                ;; to perform a last-ditch sanity check trying to catch bad RAM.
                (§ ass (§ name Ki) (ECKey/publicPointFromPrivate (.. ilInt (add RAND_INT) (mod N))))
                (§ var #_"BigInteger" (§ name additiveInverse) (.. RAND_INT (negate) (mod N)))
                (§ ass (§ name Ki) (Ki/add (ECKey/publicPointFromPrivate additiveInverse)))
                (§ ass (§ name Ki) (Ki/add (.. parent (getPubKeyPoint))))
                (§ break )
            )
            (§ default )
            (§ block
                (§ throw (§ new #_"AssertionError"))
            )
        )

        (assertNonInfinity Ki, "Illegal derived key: derived public key equals infinity.")
        (§ new #_"RawKeyBytes" (Ki/getEncoded true), chainCode)
    )

    #_private
    #_static
    (§ defn- #_"void" (§ fn assertNonZero) [#_"BigInteger" (§ name integer), #_"String" (§ name errorMessage)])
    (§ block
        (§ if (.. integer (equals BigInteger/ZERO)))
        (§ block
            (§ throw (§ new #_"HDDerivationException" errorMessage))
        )
        nil
    )

    #_private
    #_static
    (§ defn- #_"void" (§ fn assertNonInfinity) [#_"ECPoint" (§ name point), #_"String" (§ name errorMessage)])
    (§ block
        (§ if (.. point (equals (.. ECKey/CURVE (getCurve) (getInfinity)))))
        (§ block
            (§ throw (§ new #_"HDDerivationException" errorMessage))
        )
        nil
    )

    #_private
    #_static
    (§ defn- #_"void" (§ fn assertLessThanN) [#_"BigInteger" (§ name integer), #_"String" (§ name errorMessage)])
    (§ block
        (§ if (> (.. integer (compareTo (.. ECKey/CURVE (getN)))) 0))
        (§ block
            (§ throw (§ new #_"HDDerivationException" errorMessage))
        )
        nil
    )

    #_public
    #_static
    (§ class #_"RawKeyBytes"
        #_public
        (§ field #_"byte[]" (§ name keyBytes))
        #_public
        (§ field #_"byte[]" (§ name chainCode))

        #_public
        (§ constructor #_"RawKeyBytes" [#_"byte[]" (§ name keyBytes), #_"byte[]" (§ name chainCode)])
        (§ block
            (§ ass (§ name (.. this keyBytes)) keyBytes)
            (§ ass (§ name (.. this chainCode)) chainCode)
            this
        )
    )
)

#_(ns org.bitcoinj.crypto #_"HDUtils"
    (:import [java.nio ByteBuffer]
             [java.util ArrayList Arrays Collections List])
    (:import [com.google.common.base Joiner]
             [com.google.common.collect ImmutableList Iterables]
             [org.spongycastle.crypto.digests SHA512Digest]
             [org.spongycastle.crypto.macs HMac]
             [org.spongycastle.crypto.params KeyParameter])
   (:require [org.bitcoinj.core ECKey]))

;;;
 ; Static utilities used in BIP 32 Hierarchical Deterministic Wallets (HDW).
 ;;
#_public
(§ class #_"HDUtils"
    #_private
    #_static
    (§ def- #_"Joiner" (§ name PATH_JOINER) (Joiner/on "/"))

    #_static
    (§ defn #_"HMac" (§ fn createHmacSha512Digest) [#_"byte[]" (§ name key)])
    (§ block
        (§ var #_"SHA512Digest" (§ name digest) (§ new #_"SHA512Digest"))
        (§ var #_"HMac" (§ name hMac) (§ new #_"HMac" digest))
        (.. hMac (init (§ new #_"KeyParameter" key)))
        hMac
    )

    #_static
    (§ defn #_"byte[]" (§ fn hmacSha512) [#_"HMac" (§ name hmacSha512), #_"byte[]" (§ name input)])
    (§ block
        (.. hmacSha512 (reset))
        (.. hmacSha512 (update input, 0, (.. input length)))
        (§ var #_"byte[]" (§ name out) (§ new #_"byte[]" (§ count 64)))
        (.. hmacSha512 (doFinal out, 0))
        out
    )

    #_public
    #_static
    (§ defn #_"byte[]" (§ fn hmacSha512) [#_"byte[]" (§ name key), #_"byte[]" (§ name data)])
    (§ block
        (hmacSha512 (createHmacSha512Digest key), data)
    )

    #_static
    (§ defn #_"byte[]" (§ fn toCompressed) [#_"byte[]" (§ name uncompressedPoint)])
    (§ block
        (.. ECKey/CURVE (getCurve) (decodePoint uncompressedPoint) (getEncoded true))
    )

    #_static
    (§ defn #_"byte[]" (§ fn longTo4ByteArray) [#_"long" (§ name n)])
    (§ block
        (§ var #_"byte[]" (§ name bytes) (Arrays/copyOfRange (.. (ByteBuffer/allocate 8) (putLong n) (array)), 4, 8))
        (§ assert (== (.. bytes length) 4) :assert (.. bytes length))
        bytes
    )

    ;;; Append a derivation level to an existing path. ;;
    #_public
    #_static
    (§ defn #_"ImmutableList<ChildNumber>" (§ fn append) [#_"List<ChildNumber>" (§ name path), #_"ChildNumber" (§ name childNumber)])
    (§ block
        (.. (ImmutableList/builder #_"ImmutableList<ChildNumber>") (addAll path) (add childNumber) (build))
    )

    ;;; Concatenate two derivation paths. ;;
    #_public
    #_static
    (§ defn #_"ImmutableList<ChildNumber>" (§ fn concat) [#_"List<ChildNumber>" (§ name path), #_"List<ChildNumber>" (§ name path2)])
    (§ block
        (.. (ImmutableList/builder #_"ImmutableList<ChildNumber>") (addAll path) (addAll path2) (build))
    )

    ;;; Convert to a string path, starting with "M/". ;;
    #_public
    #_static
    (§ defn #_"String" (§ fn formatPath) [#_"List<ChildNumber>" (§ name path)])
    (§ block
        (.. PATH_JOINER (join (Iterables/concat (Collections/singleton "M"), path)))
    )

    ;;;
     ; The path is a human-friendly representation of the deterministic path.  For example:
     ;
     ; "44H / 0H / 0H / 1 / 1"
     ;
     ; Where a letter "H" means hardened key.  Spaces are ignored.
     ;;
    #_public
    #_static
    (§ defn #_"List<ChildNumber>" (§ fn parsePath) [#_non-nil #_"String" (§ name path)])
    (§ block
        (§ var #_"String[]" (§ name parsedNodes) (.. path (replace "M", "") (split "/")))
        (§ var #_"List<ChildNumber>" (§ name nodes) (§ new #_"ArrayList<>"))

        (§ for (§ var #_"String" (§ name n)) :for parsedNodes)
        (§ block
            (§ ass (§ name n) (.. n (replaceAll " ", "")))
            (§ if (!= (.. n (length)) 0))
            (§ block
                (§ var #_"boolean" (§ name isHard) (.. n (endsWith "H")))
                (§ if isHard)
                (§ block
                    (§ ass (§ name n) (.. n (substring 0, (§ expr (.. n (length)) - 1))))
                )
                (§ var #_"int" (§ name nodeNumber) (Integer/parseInt n))
                (.. nodes (add (§ new #_"ChildNumber" nodeNumber, isHard)))
            )
        )

        nodes
    )
)

#_(ns org.bitcoinj.crypto #_"KeyCrypter"
    (:import [java.io Serializable])
    (:import [org.spongycastle.crypto.params KeyParameter])
   (:require [org.bitcoinj.wallet.Protos.Wallet EncryptionType]))

;;;
 ; <p>A KeyCrypter can be used to encrypt and decrypt a message.  The sequence of events to encrypt and then decrypt
 ; a message are as follows:</p>
 ;
 ; <p>(1) Ask the user for a password.  deriveKey() is then called to create an KeyParameter.  This contains the AES
 ; key that will be used for encryption.</p>
 ; <p>(2) Encrypt the message using encrypt(), providing the message bytes and the KeyParameter from (1).  This returns
 ; an EncryptedData which contains the encryptedPrivateKey bytes and an initialisation vector.</p>
 ; <p>(3) To decrypt an EncryptedData, repeat step (1) to get a KeyParameter, then call decrypt().</p>
 ;
 ; <p>There can be different algorithms used for encryption/ decryption so the getUnderstoodEncryptionType is used
 ; to determine whether any given KeyCrypter can understand the type of encrypted data you have.</p>
 ;;
#_public
(§ interface #_"KeyCrypter" (§ extends #_"Serializable")
    ;;;
     ; Return the EncryptionType enum value which denotes the type of encryption/ decryption that this KeyCrypter
     ; can understand.
     ;;
    (§ method #_"EncryptionType" (§ fn getUnderstoodEncryptionType) [])

    ;;;
     ; Create a KeyParameter (which typically contains an AES key).
     ; @param password
     ; @return the KeyParameter which typically contains the AES key to use for encrypting and decrypting.
     ; @throws KeyCrypterException
     ;;
    (§ method #_"KeyParameter" (§ fn deriveKey) [#_"CharSequence" (§ name password)])
        (§ throws #_"KeyCrypterException")

    ;;;
     ; Decrypt the provided encrypted bytes, converting them into unencrypted bytes.
     ;
     ; @throws KeyCrypterException if decryption was unsuccessful.
     ;;
    (§ method #_"byte[]" (§ fn decrypt) [#_"EncryptedData" (§ name encryptedBytesToDecode), #_"KeyParameter" (§ name aesKey)])
        (§ throws #_"KeyCrypterException")

    ;;;
     ; Encrypt the supplied bytes, converting them into ciphertext.
     ;
     ; @return an encryptedPrivateKey containing the encrypted bytes and an initialisation vector.
     ; @throws KeyCrypterException if encryption was unsuccessful.
     ;;
    (§ method #_"EncryptedData" (§ fn encrypt) [#_"byte[]" (§ name plainBytes), #_"KeyParameter" (§ name aesKey)])
        (§ throws #_"KeyCrypterException")
)

#_(ns org.bitcoinj.crypto #_"KeyCrypterException")

;;;
 ; <p>Exception to provide the following:</p>
 ; <ul>
 ; <li>Provision of encryption / decryption exception.</li>
 ; </ul>
 ; <p>This base exception acts as a general failure mode not attributable to a specific cause (other than
 ; that reported in the exception message).  Since this is in English, it may not be worth reporting directly
 ; to the user other than as part of a "general failure to parse" response.</p>
 ;;
#_public
(§ class #_"KeyCrypterException" (§ extends #_"RuntimeException")
    #_public
    (§ constructor #_"KeyCrypterException" [#_"String" (§ name s)])
    (§ block
        (§ super s)
        this
    )

    #_public
    (§ constructor #_"KeyCrypterException" [#_"String" (§ name s), #_"Throwable" (§ name throwable)])
    (§ block
        (§ super s, throwable)
        this
    )
)

#_(ns org.bitcoinj.crypto #_"KeyCrypterScrypt"
    (:import [java.security SecureRandom]
             [java.util Arrays])
    (:import [com.google.common.base Objects Preconditions Stopwatch]
             [com.google.protobuf ByteString]
             [com.lambdaworks.crypto SCrypt]
             [org.slf4j Logger LoggerFactory]
             [org.spongycastle.crypto BufferedBlockCipher]
             [org.spongycastle.crypto.engines AESFastEngine]
             [org.spongycastle.crypto.modes CBCBlockCipher]
             [org.spongycastle.crypto.paddings PaddedBufferedBlockCipher]
             [org.spongycastle.crypto.params KeyParameter ParametersWithIV])
   (:require [org.bitcoinj.core Utils]
             [org.bitcoinj.wallet Protos]
             [org.bitcoinj.wallet.Protos ScryptParameters]
             [org.bitcoinj.wallet.Protos.Wallet EncryptionType]))

;;;
 ; <p>This class encrypts and decrypts byte arrays and strings using scrypt as the
 ; key derivation function and AES for the encryption.</p>
 ;
 ; <p>You can use this class to:</p>
 ;
 ; <p>1. Using a user password, create an AES key that can encrypt and decrypt your private keys.
 ; To convert the password to the AES key, scrypt is used.  This is an algorithm resistant
 ; to brute force attacks.  You can use the ScryptParameters to tune how difficult you
 ; want this to be generation to be.</p>
 ;
 ; <p>2. Using the AES Key generated above, you then can encrypt and decrypt any bytes using
 ; the AES symmetric cipher.  Eight bytes of salt is used to prevent dictionary attacks.</p>
 ;;
#_public
(§ class #_"KeyCrypterScrypt" (§ implements #_"KeyCrypter")
    #_private
    #_static
    (§ def- #_"Logger" (§ name log) (LoggerFactory/getLogger (§ klass #_"KeyCrypterScrypt")))

    ;;;
     ; Key length in bytes.
     ;;
    #_public
    #_static
    (§ def #_"int" (§ name KEY_LENGTH) 32) ;; = 256 bits.

    ;;;
     ; The size of an AES block in bytes.
     ; This is also the length of the initialisation vector.
     ;;
    #_public
    #_static
    (§ def #_"int" (§ name BLOCK_LENGTH) 16) ;; = 128 bits.

    ;;;
     ; The length of the salt used.
     ;;
    #_public
    #_static
    (§ def #_"int" (§ name SALT_LENGTH) 8)

    #_static
    (§ block
        ;; Init proper random number generator, as some old Android installations have bugs that make it unsecure.
        (§ if (Utils/isAndroidRuntime))
        (§ block
            (§ new #_"LinuxSecureRandom")
        )

        (§ ass (§ name secureRandom) (§ new #_"SecureRandom"))
    )

    #_private
    #_static
    (§ def- #_"SecureRandom" (§ name secureRandom))

    ;;; Returns SALT_LENGTH (8) bytes of random data. ;;
    #_public
    #_static
    (§ defn #_"byte[]" (§ fn randomSalt) [])
    (§ block
        (§ var #_"byte[]" (§ name salt) (§ new #_"byte[]" (§ count SALT_LENGTH)))
        (.. secureRandom (nextBytes salt))
        salt
    )

    ;; Scrypt parameters.
    #_private
    (§ field- #_"ScryptParameters" (§ name scryptParameters))

    ;;;
     ; Encryption/Decryption using default parameters and a random salt.
     ;;
    #_public
    (§ constructor #_"KeyCrypterScrypt" [])
    (§ block
        (§ var #_"Protos.ScryptParameters.Builder" (§ name builder) (.. (Protos/ScryptParameters/newBuilder) (setSalt (ByteString/copyFrom (randomSalt)))))
        (§ ass (§ name (.. this scryptParameters)) (.. builder (build)))
        this
    )

    ;;;
     ; Encryption/Decryption using custom number of iterations parameters and a random salt.
     ; As of August 2016, a useful value for mobile devices is 4096 (derivation takes about 1 second).
     ;
     ; @param iterations Number of scrypt iterations.
     ;;
    #_public
    (§ constructor #_"KeyCrypterScrypt" [#_"int" (§ name iterations)])
    (§ block
        (§ var #_"Protos.ScryptParameters.Builder" (§ name builder) (.. (Protos/ScryptParameters/newBuilder) (setSalt (ByteString/copyFrom (randomSalt))) (setN iterations)))
        (§ ass (§ name (.. this scryptParameters)) (.. builder (build)))
        this
    )

    ;;;
     ; Encryption/ Decryption using specified Scrypt parameters.
     ;
     ; @param scryptParameters ScryptParameters to use.
     ; @throws NullPointerException if the scryptParameters or any of its N, R or P is null.
     ;;
    #_public
    (§ constructor #_"KeyCrypterScrypt" [#_"ScryptParameters" (§ name scryptParameters)])
    (§ block
        (§ ass (§ name (.. this scryptParameters)) (Preconditions/checkNotNull scryptParameters))

        ;; Check there is a non-empty salt.  Some early MultiBit wallets has a missing salt, so it is not a hard fail.
        (§ if (§ expr (.. scryptParameters (getSalt)) == nil || (.. scryptParameters (getSalt) (toByteArray)) == nil || (.. scryptParameters (getSalt) (toByteArray) length) == 0))
        (§ block
            (.. log (warn "You are using a ScryptParameters with no salt. Your encryption may be vulnerable to a dictionary attack."))
        )
        this
    )

    ;;;
     ; Generate AES key.
     ;
     ; This is a very slow operation compared to encrypt/ decrypt so it is normally worth caching the result.
     ;
     ; @param password The password to use in key generation.
     ; @return the KeyParameter containing the created AES key.
     ; @throws KeyCrypterException
     ;;
    #_override
    #_public
    (§ method #_"KeyParameter" (§ fn deriveKey) [#_"CharSequence" (§ name password)])
        (§ throws #_"KeyCrypterException")
    (§ block
        (§ var #_"byte[]" (§ name passwordBytes) nil)
        (§ try )
        (§ block
            (§ ass (§ name passwordBytes) (convertToByteArray password))
            (§ var #_"byte[]" (§ name salt) (§ new #_"byte[]" (§ count 0)))
            (§ if (!= (.. scryptParameters (getSalt)) nil))
            (§ block
                (§ ass (§ name salt) (.. scryptParameters (getSalt) (toByteArray)))
            )
            (§ else )
            (§ block
                ;; Warn the user that they are not using a salt.  Some early MultiBit wallets had a blank salt.
                (.. log (warn "You are using a ScryptParameters with no salt. Your encryption may be vulnerable to a dictionary attack."))
            )

            (§ var #_"Stopwatch" (§ name watch) (Stopwatch/createStarted))
            (§ var #_"byte[]" (§ name keyBytes) (SCrypt/scrypt passwordBytes, salt, (§ cast #_"int" (.. scryptParameters (getN))), (.. scryptParameters (getR)), (.. scryptParameters (getP)), KEY_LENGTH))
            (.. watch (stop))
            (.. log (info "Deriving key took {} for {} scrypt iterations.", watch, (.. scryptParameters (getN))))
            (§ return (§ new #_"KeyParameter" keyBytes))
        )
        (§ catch #_"Exception" (§ name e))
        (§ block
            (§ throw (§ new #_"KeyCrypterException" "Could not generate key from password and salt.", e))
        )
        (§ finally )
        (§ block
            ;; Zero the password bytes.
            (§ if (some? passwordBytes))
            (§ block
                (java.util.Arrays/fill passwordBytes, (§ cast #_"byte" 0))
            )
        )
    )

    ;;;
     ; Password based encryption using AES - CBC 256 bits.
     ;;
    #_override
    #_public
    (§ method #_"EncryptedData" (§ fn encrypt) [#_"byte[]" (§ name plainBytes), #_"KeyParameter" (§ name aesKey)])
        (§ throws #_"KeyCrypterException")
    (§ block
        (Preconditions/checkNotNull plainBytes)
        (Preconditions/checkNotNull aesKey)

        (§ try )
        (§ block
            ;; Generate iv - each encryption call has a different iv.
            (§ var #_"byte[]" (§ name iv) (§ new #_"byte[]" (§ count BLOCK_LENGTH)))
            (.. secureRandom (nextBytes iv))

            (§ var #_"ParametersWithIV" (§ name keyWithIv) (§ new #_"ParametersWithIV" aesKey, iv))

            ;; Encrypt using AES.
            (§ var #_"BufferedBlockCipher" (§ name cipher) (§ new #_"PaddedBufferedBlockCipher" (§ new #_"CBCBlockCipher" (§ new #_"AESFastEngine"))))
            (.. cipher (init true, keyWithIv))
            (§ var #_"byte[]" (§ name encryptedBytes) (§ new #_"byte[]" (§ count (.. cipher (getOutputSize (.. plainBytes length))))))
            (§ var #_"int" (§ name length1) (.. cipher (processBytes plainBytes, 0, (.. plainBytes length), encryptedBytes, 0)))
            (§ var #_"int" (§ name length2) (.. cipher (doFinal encryptedBytes, length1)))

            (§ return (§ new #_"EncryptedData" iv, (Arrays/copyOf encryptedBytes, (§ expr length1 + length2))))
        )
        (§ catch #_"Exception" (§ name e))
        (§ block
            (§ throw (§ new #_"KeyCrypterException" "Could not encrypt bytes.", e))
        )
    )

    ;;;
     ; Decrypt bytes previously encrypted with this class.
     ;
     ; @param dataToDecrypt The data to decrypt.
     ; @param aesKey The AES key to use for decryption.
     ; @return the decrypted bytes.
     ; @throws KeyCrypterException if bytes could not be decrypted.
     ;;
    #_override
    #_public
    (§ method #_"byte[]" (§ fn decrypt) [#_"EncryptedData" (§ name dataToDecrypt), #_"KeyParameter" (§ name aesKey)])
        (§ throws #_"KeyCrypterException")
    (§ block
        (Preconditions/checkNotNull dataToDecrypt)
        (Preconditions/checkNotNull aesKey)

        (§ try )
        (§ block
            (§ var #_"ParametersWithIV" (§ name keyWithIv) (§ new #_"ParametersWithIV" (§ new #_"KeyParameter" (.. aesKey (getKey))), (.. dataToDecrypt initialisationVector)))

            ;; Decrypt the message.
            (§ var #_"BufferedBlockCipher" (§ name cipher) (§ new #_"PaddedBufferedBlockCipher" (§ new #_"CBCBlockCipher" (§ new #_"AESFastEngine"))))
            (.. cipher (init false, keyWithIv))

            (§ var #_"byte[]" (§ name cipherBytes) (.. dataToDecrypt encryptedBytes))
            (§ var #_"byte[]" (§ name decryptedBytes) (§ new #_"byte[]" (§ count (.. cipher (getOutputSize (.. cipherBytes length))))))
            (§ var #_"int" (§ name length1) (.. cipher (processBytes cipherBytes, 0, (.. cipherBytes length), decryptedBytes, 0)))
            (§ var #_"int" (§ name length2) (.. cipher (doFinal decryptedBytes, length1)))

            (§ return (Arrays/copyOf decryptedBytes, (§ expr length1 + length2)))
        )
        (§ catch #_"Exception" (§ name e))
        (§ block
            (§ throw (§ new #_"KeyCrypterException" "Could not decrypt bytes", e))
        )
    )

    ;;;
     ; Convert a CharSequence (which are UTF16) into a byte array.
     ;
     ; Note: a String.getBytes() is not used to avoid creating a String of the password in the JVM.
     ;;
    #_private
    #_static
    (§ defn- #_"byte[]" (§ fn convertToByteArray) [#_"CharSequence" (§ name charSequence)])
    (§ block
        (Preconditions/checkNotNull charSequence)

        (§ var #_"byte[]" (§ name byteArray) (§ new #_"byte[]" (§ count (.. charSequence (length)) << 1)))
        (§ for (§ var #_"int" (§ name i) 0) :for (§ expr i < (.. charSequence (length))) :for (§ ass (§ name i) (+ i 1)))
        (§ block
            (§ var #_"int" (§ name bytePosition) (<< i 1))
            (§ ass (§ name (§ ai byteArray bytePosition)) (§ cast #_"byte" (>> (& (.. charSequence (charAt i)) 0xff00) 8)))
            (§ ass (§ name (§ ai byteArray (§ expr bytePosition + 1))) (§ cast #_"byte" (& (.. charSequence (charAt i)) 0x00ff)))
        )
        byteArray
    )

    #_public
    (§ method #_"ScryptParameters" (§ fn getScryptParameters) [])
    (§ block
        scryptParameters
    )

    ;;;
     ; Return the EncryptionType enum value which denotes the type of encryption/ decryption that this KeyCrypter
     ; can understand.
     ;;
    #_override
    #_public
    (§ method #_"EncryptionType" (§ fn getUnderstoodEncryptionType) [])
    (§ block
        EncryptionType/ENCRYPTED_SCRYPT_AES
    )

    #_override
    #_public
    (§ method #_"String" (§ fn toString) [])
    (§ block
        (§ expr "AES-" + KEY_LENGTH * 8 + "-CBC, Scrypt (N: " + (.. scryptParameters (getN)) + ")")
    )

    #_override
    #_public
    (§ method #_"int" (§ fn hashCode) [])
    (§ block
        (Objects/hashCode scryptParameters)
    )

    #_override
    #_public
    (§ method #_"boolean" (§ fn equals) [#_"Object" (§ name o)])
    (§ block
        (§ if (§ expr this == o))
        (§ block
            (§ return true)
        )
        (§ if (§ expr o == nil || (getClass) != (.. o (getClass))))
        (§ block
            (§ return false)
        )
        (Objects/equal scryptParameters, (§ expr (.. (§ cast #_"KeyCrypterScrypt" o) scryptParameters)))
    )
)

#_(ns org.bitcoinj.crypto #_"LazyECPoint"
    (:import [java.math BigInteger]
             [java.util Arrays])
    (:import [com.google.common.base Preconditions]
             [org.spongycastle.math.ec ECCurve ECFieldElement ECPoint]))

;;;
 ; A wrapper around ECPoint that delays decoding of the point for as long as possible.  This is useful because point
 ; encode/decode in Bouncy Castle is quite slow especially on Dalvik, as it often involves decompression/recompression.
 ;;
#_public
(§ class #_"LazyECPoint"
    ;; If curve is set, bits is also set.  If curve is unset, point is set and bits is unset.  Point can be set along
    ;; with curve and bits when the cached form has been accessed and thus must have been converted.
    #_private
    (§ field- #_"ECCurve" (§ name curve))
    #_private
    (§ field- #_"byte[]" (§ name bits))

    ;; This field is effectively final - once set it won't change again.  However it can be set after construction.
    #_nilable
    #_private
    (§ field- #_"ECPoint" (§ name point))

    #_public
    (§ constructor #_"LazyECPoint" [#_"ECCurve" (§ name curve), #_"byte[]" (§ name bits)])
    (§ block
        (§ ass (§ name (.. this curve)) curve)
        (§ ass (§ name (.. this bits)) bits)
        this
    )

    #_public
    (§ constructor #_"LazyECPoint" [#_"ECPoint" (§ name point)])
    (§ block
        (§ ass (§ name (.. this point)) (Preconditions/checkNotNull point))
        (§ ass (§ name (.. this curve)) nil)
        (§ ass (§ name (.. this bits)) nil)
        this
    )

    #_public
    (§ method #_"ECPoint" (§ fn get) [])
    (§ block
        (§ if (nil? point))
        (§ block
            (§ ass (§ name point) (.. curve (decodePoint bits)))
        )
        point
    )

    ;; Delegated methods.

    #_public
    (§ method #_"ECPoint" (§ fn getDetachedPoint) [])
    (§ block
        (.. (get) (getDetachedPoint))
    )

    #_public
    (§ method #_"byte[]" (§ fn getEncoded) [])
    (§ block
        (§ if (some? bits))
        (§ block
            (§ return (Arrays/copyOf bits, (.. bits length)))
        )
        (§ else )
        (§ block
            (§ return (.. (get) (getEncoded)))
        )
    )

    #_public
    (§ method #_"boolean" (§ fn isInfinity) [])
    (§ block
        (.. (get) (isInfinity))
    )

    #_public
    (§ method #_"ECPoint" (§ fn timesPow2) [#_"int" (§ name e)])
    (§ block
        (.. (get) (timesPow2 e))
    )

    #_public
    (§ method #_"ECFieldElement" (§ fn getYCoord) [])
    (§ block
        (.. (get) (getYCoord))
    )

    #_public
    (§ method #_"ECFieldElement[]" (§ fn getZCoords) [])
    (§ block
        (.. (get) (getZCoords))
    )

    #_public
    (§ method #_"boolean" (§ fn isNormalized) [])
    (§ block
        (.. (get) (isNormalized))
    )

    #_public
    (§ method #_"boolean" (§ fn isCompressed) [])
    (§ block
        (§ if (some? bits))
        (§ block
            (§ return (§ expr (§ ai bits 0) == 2 || (§ ai bits 0) == 3))
        )
        (§ else )
        (§ block
            (§ return (.. (get) (isCompressed)))
        )
    )

    #_public
    (§ method #_"ECPoint" (§ fn multiply) [#_"BigInteger" (§ name k)])
    (§ block
        (.. (get) (multiply k))
    )

    #_public
    (§ method #_"ECPoint" (§ fn subtract) [#_"ECPoint" (§ name b)])
    (§ block
        (.. (get) (subtract b))
    )

    #_public
    (§ method #_"boolean" (§ fn isValid) [])
    (§ block
        (.. (get) (isValid))
    )

    #_public
    (§ method #_"ECPoint" (§ fn scaleY) [#_"ECFieldElement" (§ name scale)])
    (§ block
        (.. (get) (scaleY scale))
    )

    #_public
    (§ method #_"ECFieldElement" (§ fn getXCoord) [])
    (§ block
        (.. (get) (getXCoord))
    )

    #_public
    (§ method #_"ECPoint" (§ fn scaleX) [#_"ECFieldElement" (§ name scale)])
    (§ block
        (.. (get) (scaleX scale))
    )

    #_public
    (§ method #_"boolean" (§ fn equals) [#_"ECPoint" (§ name other)])
    (§ block
        (.. (get) (equals other))
    )

    #_public
    (§ method #_"ECPoint" (§ fn negate) [])
    (§ block
        (.. (get) (negate))
    )

    #_public
    (§ method #_"ECPoint" (§ fn threeTimes) [])
    (§ block
        (.. (get) (threeTimes))
    )

    #_public
    (§ method #_"ECFieldElement" (§ fn getZCoord) [#_"int" (§ name index)])
    (§ block
        (.. (get) (getZCoord index))
    )

    #_public
    (§ method #_"byte[]" (§ fn getEncoded) [#_"boolean" (§ name compressed)])
    (§ block
        (§ if (§ expr compressed == (isCompressed) && bits != nil))
        (§ block
            (§ return (Arrays/copyOf bits, (.. bits length)))
        )
        (§ else )
        (§ block
            (§ return (.. (get) (getEncoded compressed)))
        )
    )

    #_public
    (§ method #_"ECPoint" (§ fn add) [#_"ECPoint" (§ name b)])
    (§ block
        (.. (get) (add b))
    )

    #_public
    (§ method #_"ECPoint" (§ fn twicePlus) [#_"ECPoint" (§ name b)])
    (§ block
        (.. (get) (twicePlus b))
    )

    #_public
    (§ method #_"ECCurve" (§ fn getCurve) [])
    (§ block
        (.. (get) (getCurve))
    )

    #_public
    (§ method #_"ECPoint" (§ fn normalize) [])
    (§ block
        (.. (get) (normalize))
    )

    #_public
    (§ method #_"ECFieldElement" (§ fn getY) [])
    (§ block
        (.. this (normalize) (getYCoord))
    )

    #_public
    (§ method #_"ECPoint" (§ fn twice) [])
    (§ block
        (.. (get) (twice))
    )

    #_public
    (§ method #_"ECFieldElement" (§ fn getAffineYCoord) [])
    (§ block
        (.. (get) (getAffineYCoord))
    )

    #_public
    (§ method #_"ECFieldElement" (§ fn getAffineXCoord) [])
    (§ block
        (.. (get) (getAffineXCoord))
    )

    #_public
    (§ method #_"ECFieldElement" (§ fn getX) [])
    (§ block
        (.. this (normalize) (getXCoord))
    )

    #_override
    #_public
    (§ method #_"boolean" (§ fn equals) [#_"Object" (§ name o)])
    (§ block
        (§ if (§ expr this == o))
        (§ block
            (§ return true)
        )
        (§ if (§ expr o == nil || (getClass) != (.. o (getClass))))
        (§ block
            (§ return false)
        )
        (Arrays/equals (getCanonicalEncoding), (.. (§ cast #_"LazyECPoint" o) (getCanonicalEncoding)))
    )

    #_override
    #_public
    (§ method #_"int" (§ fn hashCode) [])
    (§ block
        (Arrays/hashCode (getCanonicalEncoding))
    )

    #_private
    (§ method- #_"byte[]" (§ fn getCanonicalEncoding) [])
    (§ block
        (getEncoded true)
    )
)

#_(ns org.bitcoinj.crypto #_"LinuxSecureRandom"
    (:import [java.io *]
             [java.security *])
    (:import [org.slf4j *]))

;;;
 ; A SecureRandom implementation that is able to override the standard JVM provided implementation, and which simply
 ; serves random numbers by reading /dev/urandom.  That is, it delegates to the kernel on UNIX systems and is unusable
 ; on other platforms.  Attempts to manually set the seed are ignored.  There is no difference between seed bytes and
 ; non-seed bytes, they are all from the same source.
 ;;
#_public
(§ class #_"LinuxSecureRandom" (§ extends #_"SecureRandomSpi")
    #_private
    #_static
    (§ def- #_"FileInputStream" (§ name urandom))

    #_private
    #_static
    (§ class #_"LinuxSecureRandomProvider" (§ extends #_"Provider")
        #_public
        (§ constructor #_"LinuxSecureRandomProvider" [])
        (§ block
            (§ super "LinuxSecureRandom", 1.0, "A Linux specific random number provider that uses /dev/urandom")

            (put "SecureRandom.LinuxSecureRandom", (§ expr (.. (§ klass #_"LinuxSecureRandom") (getName))))
            this
        )
    )

    #_private
    #_static
    (§ def- #_"Logger" (§ name log) (LoggerFactory/getLogger (§ klass #_"LinuxSecureRandom")))

    #_static
    (§ block
        (§ try )
        (§ block
            (§ var #_"File" (§ name file) (§ new #_"File" "/dev/urandom"))
            ;; This stream is deliberately leaked.
            (§ ass (§ name urandom) (§ new #_"FileInputStream" file))
            (§ if (== (.. urandom (read)) -1))
            (§ block
                (§ throw (§ new #_"RuntimeException" "/dev/urandom not readable?"))
            )

            ;; Now override the default SecureRandom implementation with this one.
            (§ var #_"int" (§ name position) (Security/insertProviderAt (§ new #_"LinuxSecureRandomProvider"), 1))

            (§ if (§ expr position != -1))
            (§ block
                (.. log (info "Secure randomness will be read from {} only.", file))
            )
            (§ else )
            (§ block
                (.. log (info "Randomness is already secure."))
            )
        )
        (§ catch #_"FileNotFoundException" (§ name e))
        (§ block
            ;; Should never happen.
            (.. log (error "/dev/urandom does not appear to exist or is not openable"))
            (§ throw (§ new #_"RuntimeException" e))
        )
        (§ catch #_"IOException" (§ name e))
        (§ block
            (.. log (error "/dev/urandom does not appear to be readable"))
            (§ throw (§ new #_"RuntimeException" e))
        )
    )

    #_private
    (§ field- #_"DataInputStream" (§ name dis))

    #_public
    (§ constructor #_"LinuxSecureRandom" [])
    (§ block
        ;; DataInputStream is not thread safe, so each random object has its own.
        (§ ass (§ name dis) (§ new #_"DataInputStream" urandom))
        this
    )

    #_override
    #_protected
    (§ method #_"void" (§ fn engineSetSeed) [#_"byte[]" (§ name bytes)])
    (§ block
        ;; Ignore.
        nil
    )

    #_override
    #_protected
    (§ method #_"void" (§ fn engineNextBytes) [#_"byte[]" (§ name bytes)])
    (§ block
        (§ try )
        (§ block
            (.. dis (readFully bytes)) ;; This will block until all the bytes can be read.
        )
        (§ catch #_"IOException" (§ name e))
        (§ block
            (§ throw (§ new #_"RuntimeException" e)) ;; Fatal error.  Do not attempt to recover from this.
        )
        nil
    )

    #_override
    #_protected
    (§ method #_"byte[]" (§ fn engineGenerateSeed) [#_"int" (§ name i)])
    (§ block
        (§ var #_"byte[]" (§ name bits) (§ new #_"byte[]" (§ count i)))
        (engineNextBytes bits)
        bits
    )
)

#_(ns org.bitcoinj.crypto #_"MnemonicCode"
    (:import [java.io BufferedReader FileNotFoundException IOException InputStream InputStreamReader]
             [java.security MessageDigest]
             [java.util ArrayList Collections List])
    (:import [com.google.common.base Stopwatch]
             [org.slf4j Logger LoggerFactory])
   (:require [org.bitcoinj.core Sha256Hash Utils]
             #_static [org.bitcoinj.core.Utils HEX]))

;;;
 ; A MnemonicCode object may be used to convert between binary seed values and lists of words per
 ; <a href="https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki">the BIP 39 specification</a>.
 ;;

#_public
(§ class #_"MnemonicCode"
    #_private
    #_static
    (§ def- #_"Logger" (§ name log) (LoggerFactory/getLogger (§ klass #_"MnemonicCode")))

    #_private
    (§ field- #_"ArrayList<String>" (§ name wordList))

    #_private
    #_static
    (§ def- #_"String" (§ name BIP39_ENGLISH_RESOURCE_NAME) "mnemonic/wordlist/english.txt")
    #_private
    #_static
    (§ def- #_"String" (§ name BIP39_ENGLISH_SHA256) "ad90bf3beb7b0eb7e5acd74727dc0da96e0a280a258354e7293fb7e211ac03db")

    ;;; UNIX time for when the BIP39 standard was finalised.  This can be used as a default seed birthday. ;;
    #_public
    #_static
    (§ def #_"long" (§ name BIP39_STANDARDISATION_TIME_SECS) 1381276800)

    #_private
    #_static
    (§ def- #_"int" (§ name PBKDF2_ROUNDS) 2048)

    #_public
    #_static
    (§ def #_"MnemonicCode" (§ name INSTANCE))

    #_static
    (§ block
        (§ try )
        (§ block
            (§ ass (§ name INSTANCE) (§ new #_"MnemonicCode"))
        )
        (§ catch #_"FileNotFoundException" (§ name e))
        (§ block
            ;; We expect failure on Android.  The developer has to set INSTANCE themselves.
            (§ if (§ not (Utils/isAndroidRuntime)))
            (§ block
                (.. log (error "Could not find word list", e))
            )
        )
        (§ catch #_"IOException" (§ name e))
        (§ block
            (.. log (error "Failed to load word list", e))
        )
    )

    ;;; Initialise from the included word list.  Won't work on Android. ;;
    #_public
    (§ constructor #_"MnemonicCode" [])
        (§ throws #_"IOException")
    (§ block
        (§ this (openDefaultWords), BIP39_ENGLISH_SHA256)
        this
    )

    #_private
    #_static
    (§ defn- #_"InputStream" (§ fn openDefaultWords) [])
        (§ throws #_"IOException")
    (§ block
        (§ var #_"InputStream" (§ name stream) (.. (§ klass #_"MnemonicCode") (getResourceAsStream BIP39_ENGLISH_RESOURCE_NAME)))
        (§ if (nil? stream))
        (§ block
            (§ throw (§ new #_"FileNotFoundException" BIP39_ENGLISH_RESOURCE_NAME))
        )
        stream
    )

    ;;;
     ; Creates an MnemonicCode object, initializing with words read from the supplied input stream.
     ; If a wordListDigest is supplied, the digest of the words will be checked.
     ;;
    #_public
    (§ constructor #_"MnemonicCode" [#_"InputStream" (§ name wordstream), #_"String" (§ name wordListDigest)])
        (§ throws #_"IOException", #_"IllegalArgumentException")
    (§ block
        (§ var #_"BufferedReader" (§ name br) (§ new #_"BufferedReader" (§ new #_"InputStreamReader" wordstream, "UTF-8")))
        (§ ass (§ name (.. this wordList)) (§ new #_"ArrayList<>" 2048))
        (§ var #_"MessageDigest" (§ name md) (Sha256Hash/newDigest))
        (§ var #_"String" (§ name word))
        (§ while (!= (§ ass (§ name word) (.. br (readLine))) nil))
        (§ block
            (.. md (update (.. word (getBytes))))
            (.. this wordList (add word))
        )
        (.. br (close))

        (§ if (!= (.. this wordList (size)) 2048))
        (§ block
            (§ throw (§ new #_"IllegalArgumentException" "input stream did not contain 2048 words"))
        )

        ;; If a wordListDigest is supplied, check to make sure it matches.
        (§ if (some? wordListDigest))
        (§ block
            (§ var #_"byte[]" (§ name digest) (.. md (digest)))
            (§ var #_"String" (§ name hexdigest) (.. HEX (encode digest)))
            (§ if (§ not (.. hexdigest (equals wordListDigest))))
            (§ block
                (§ throw (§ new #_"IllegalArgumentException" "wordlist digest mismatch"))
            )
        )
        this
    )

    ;;;
     ; Gets the word list this code uses.
     ;;
    #_public
    (§ method #_"List<String>" (§ fn getWordList) [])
    (§ block
        wordList
    )

    ;;;
     ; Convert mnemonic word list to seed.
     ;;
    #_public
    #_static
    (§ defn #_"byte[]" (§ fn toSeed) [#_"List<String>" (§ name words), #_"String" (§ name passphrase)])
    (§ block
        ;; To create binary seed from mnemonic, we use PBKDF2 function with mnemonic sentence (in UTF-8) used as a password
        ;; and string "mnemonic" + passphrase (again in UTF-8) used as a salt.  Iteration count is set to 4096 and HMAC-SHA512
        ;; is used as a pseudo-random function.  Desired length of the derived key is 512 bits (= 64 bytes).

        (§ var #_"String" (§ name pass) (.. Utils/SPACE_JOINER (join words)))
        (§ var #_"String" (§ name salt) (§ expr "mnemonic" + passphrase))

        (§ var #_"Stopwatch" (§ name watch) (Stopwatch/createStarted))
        (§ var #_"byte[]" (§ name seed) (PBKDF2SHA512/derive pass, salt, PBKDF2_ROUNDS, 64))
        (.. watch (stop))
        (.. log (info "PBKDF2 took {}", watch))
        seed
    )

    ;;;
     ; Convert mnemonic word list to original entropy value.
     ;;
    #_public
    (§ method #_"byte[]" (§ fn toEntropy) [#_"List<String>" (§ name words)])
        (§ throws #_"MnemonicException.MnemonicLengthException", #_"MnemonicException.MnemonicWordException", #_"MnemonicException.MnemonicChecksumException")
    (§ block
        (§ if (§ expr 0 < (.. words (size)) % 3))
        (§ block
            (§ throw (§ new #_"MnemonicException.MnemonicLengthException" "Word list size must be multiple of three words."))
        )

        (§ if (== (.. words (size)) 0))
        (§ block
            (§ throw (§ new #_"MnemonicException.MnemonicLengthException" "Word list is empty."))
        )

        ;; Look up all the words in the list and construct the concatenation of the original entropy and the checksum.

        (§ var #_"int" (§ name concatLenBits) (* (.. words (size)) 11))
        (§ var #_"boolean[]" (§ name concatBits) (§ new #_"boolean[]" (§ count concatLenBits)))
        (§ var #_"int" (§ name wordindex) 0)
        (§ for (§ var #_"String" (§ name word)) :for words)
        (§ block
            ;; Find the words index in the wordlist.
            (§ var #_"int" (§ name ndx) (Collections/binarySearch (.. this wordList), word))
            (§ if (< ndx 0))
            (§ block
                (§ throw (§ new #_"MnemonicException.MnemonicWordException" word))
            )

            ;; Set the next 11 bits to the value of the index.
            (§ for (§ var #_"int" (§ name i) 0) :for (< i 11) :for (§ ass (§ name i) (+ i 1)))
            (§ block
                (§ ass (§ name (§ ai concatBits (§ expr (* wordindex 11) + i))) (!= (§ expr ndx & (§ expr 1 << (- 10 i))) 0))
            )
            (§ ass (§ name wordindex) (+ wordindex 1))
        )

        (§ var #_"int" (§ name checksumLengthBits) (/ concatLenBits 33))
        (§ var #_"int" (§ name entropyLengthBits) (- concatLenBits checksumLengthBits))

        ;; Extract original entropy as bytes.
        (§ var #_"byte[]" (§ name entropy) (§ new #_"byte[]" (§ count entropyLengthBits / 8)))
        (§ for (§ var #_"int" (§ name i) 0) :for (§ expr i < (.. entropy length)) :for (§ ass (§ name i) (+ i 1)))
        (§ block
            (§ for (§ var #_"int" (§ name j) 0) :for (< j 8) :for (§ ass (§ name j) (+ j 1)))
            (§ block
                (§ if (§ ai concatBits (§ expr (* i 8) + j)))
                (§ block
                    (§ ass (§ name (§ ai entropy i)) (§ expr (§ ai entropy i) | (§ expr 1 << (- 7 j))))
                )
            )
        )

        ;; Take the digest of the entropy.
        (§ var #_"byte[]" (§ name hash) (Sha256Hash/hash entropy))
        (§ var #_"boolean[]" (§ name hashBits) (bytesToBits hash))

        ;; Check all the checksum bits.
        (§ for (§ var #_"int" (§ name i) 0) :for (< i checksumLengthBits) :for (§ ass (§ name i) (+ i 1)))
        (§ block
            (§ if (§ expr (§ ai concatBits (§ expr entropyLengthBits + i)) != (§ ai hashBits i)))
            (§ block
                (§ throw (§ new #_"MnemonicException.MnemonicChecksumException"))
            )
        )

        entropy
    )

    ;;;
     ; Convert entropy data to mnemonic word list.
     ;;
    #_public
    (§ method #_"List<String>" (§ fn toMnemonic) [#_"byte[]" (§ name entropy)])
        (§ throws #_"MnemonicException.MnemonicLengthException")
    (§ block
        (§ if (§ expr 0 < (.. entropy length) % 4))
        (§ block
            (§ throw (§ new #_"MnemonicException.MnemonicLengthException" "Entropy length not multiple of 32 bits."))
        )

        (§ if (== (.. entropy length) 0))
        (§ block
            (§ throw (§ new #_"MnemonicException.MnemonicLengthException" "Entropy is empty."))
        )

        ;; We take initial entropy of ENT bits and compute its checksum by taking first ENT / 32 bits of its SHA256 hash.

        (§ var #_"byte[]" (§ name hash) (Sha256Hash/hash entropy))
        (§ var #_"boolean[]" (§ name hashBits) (bytesToBits hash))

        (§ var #_"boolean[]" (§ name entropyBits) (bytesToBits entropy))
        (§ var #_"int" (§ name checksumLengthBits) (/ (.. entropyBits length) 32))

        ;; We append these bits to the end of the initial entropy.
        (§ var #_"boolean[]" (§ name concatBits) (§ new #_"boolean[]" (§ count (.. entropyBits length) + checksumLengthBits)))
        (System/arraycopy entropyBits, 0, concatBits, 0, (.. entropyBits length))
        (System/arraycopy hashBits, 0, concatBits, (.. entropyBits length), checksumLengthBits)

        ;; Next we take these concatenated bits and split them into groups of 11 bits.  Each group encodes number from 0-2047
        ;; which is a position in a wordlist.  We convert numbers into words and use joined words as mnemonic sentence.

        (§ var #_"ArrayList<String>" (§ name words) (§ new #_"ArrayList<>"))
        (§ var #_"int" (§ name nwords) (/ (.. concatBits length) 11))
        (§ for (§ var #_"int" (§ name i) 0) :for (< i nwords) :for (§ ass (§ name i) (+ i 1)))
        (§ block
            (§ var #_"int" (§ name index) 0)
            (§ for (§ var #_"int" (§ name j) 0) :for (< j 11) :for (§ ass (§ name j) (+ j 1)))
            (§ block
                (§ ass (§ name index) (<< index 1))
                (§ if (§ ai concatBits (§ expr (* i 11) + j)))
                (§ block
                    (§ ass (§ name index) (| index 0x1))
                )
            )
            (.. words (add (.. this wordList (get index))))
        )

        words
    )

    ;;;
     ; Check to see if a mnemonic word list is valid.
     ;;
    #_public
    (§ method #_"void" (§ fn check) [#_"List<String>" (§ name words)])
        (§ throws #_"MnemonicException")
    (§ block
        (toEntropy words)
        nil
    )

    #_private
    #_static
    (§ defn- #_"boolean[]" (§ fn bytesToBits) [#_"byte[]" (§ name data)])
    (§ block
        (§ var #_"boolean[]" (§ name bits) (§ new #_"boolean[]" (§ count (.. data length) * 8)))
        (§ for (§ var #_"int" (§ name i) 0) :for (§ expr i < (.. data length)) :for (§ ass (§ name i) (+ i 1)))
        (§ block
            (§ for (§ var #_"int" (§ name j) 0) :for (< j 8) :for (§ ass (§ name j) (+ j 1)))
            (§ block
                (§ ass (§ name (§ ai bits (§ expr (* i 8) + j))) (!= (§ expr (§ ai data i) & (§ expr 1 << (- 7 j))) 0))
            )
        )
        bits
    )
)

#_(ns org.bitcoinj.crypto #_"MnemonicException")

;;;
 ; Exceptions thrown by the MnemonicCode module.
 ;;
#_public
(§ class #_"MnemonicException" (§ extends #_"Exception")
    #_public
    (§ constructor #_"MnemonicException" [])
    (§ block
        (§ super)
        this
    )

    #_public
    (§ constructor #_"MnemonicException" [#_"String" (§ name msg)])
    (§ block
        (§ super msg)
        this
    )

    ;;;
     ; Thrown when an argument to MnemonicCode is the wrong length.
     ;;
    #_public
    #_static
    (§ class #_"MnemonicLengthException" (§ extends #_"MnemonicException")
        #_public
        (§ constructor #_"MnemonicLengthException" [#_"String" (§ name msg)])
        (§ block
            (§ super msg)
            this
        )
    )

    ;;;
     ; Thrown when a list of MnemonicCode words fails the checksum check.
     ;;
    #_public
    #_static
    (§ class #_"MnemonicChecksumException" (§ extends #_"MnemonicException")
        #_public
        (§ constructor #_"MnemonicChecksumException" [])
        (§ block
            (§ super)
            this
        )
    )

    ;;;
     ; Thrown when a word is encountered which is not in the MnemonicCode's word list.
     ;;
    #_public
    #_static
    (§ class #_"MnemonicWordException" (§ extends #_"MnemonicException")
        ;;; Contains the word that was not found in the word list. ;;
        #_public
        (§ field #_"String" (§ name badWord))

        #_public
        (§ constructor #_"MnemonicWordException" [#_"String" (§ name badWord)])
        (§ block
            (§ super)
            (§ ass (§ name (.. this badWord)) badWord)
            this
        )
    )
)

#_(ns org.bitcoinj.crypto #_"PBKDF2SHA512"
    (:import [java.io ByteArrayOutputStream]
             [java.nio ByteBuffer ByteOrder]
             [javax.crypto Mac]
             [javax.crypto.spec SecretKeySpec]))

;;;
 ; This is a clean-room implementation of PBKDF2 using RFC 2898 as a reference.
 ;
 ; RFC 2898: http://tools.ietf.org/html/rfc2898#section-5.2
 ;
 ; This code passes all RFC 6070 test vectors: http://tools.ietf.org/html/rfc6070
 ;
 ; http://cryptofreek.org/2012/11/29/pbkdf2-pure-java-implementation/
 ; Modified to use SHA-512 - Ken Sedgwick ken@bonsai.com
 ;;
#_public
(§ class #_"PBKDF2SHA512"
    #_public
    #_static
    (§ defn #_"byte[]" (§ fn derive) [#_"String" (§ name P), #_"String" (§ name S), #_"int" (§ name c), #_"int" (§ name dkLen)])
    (§ block
        (§ var #_"ByteArrayOutputStream" (§ name baos) (§ new #_"ByteArrayOutputStream"))

        (§ try )
        (§ block
            (§ var #_"int" (§ name hLen) 20)

            (§ if (§ expr (- (Math/pow 2, 32) 1) * hLen < dkLen))
            (§ block
                (§ throw (§ new #_"IllegalArgumentException" "derived key too long"))
            )

            (§ var #_"int" (§ name l) (§ cast #_"int" (Math/ceil (/ (§ cast #_"double" dkLen) (§ cast #_"double" hLen)))))
         ;; int r = dkLen - (l - 1) * hLen;

            (§ for (§ var #_"int" (§ name i) 1) :for (<= i l) :for (§ ass (§ name i) (+ i 1)))
            (§ block
                (§ var #_"byte[]" (§ name T) (F P, S, c, i))
                (.. baos (write T))
            )
        )
        (§ catch #_"Exception" (§ name e))
        (§ block
            (§ throw (§ new #_"RuntimeException" e))
        )

        (§ var #_"byte[]" (§ name baDerived) (§ new #_"byte[]" (§ count dkLen)))
        (System/arraycopy (.. baos (toByteArray)), 0, baDerived, 0, (.. baDerived length))

        baDerived
    )

    #_private
    #_static
    (§ defn- #_"byte[]" (§ fn F) [#_"String" (§ name P), #_"String" (§ name S), #_"int" (§ name c), #_"int" (§ name i)])
        (§ throws #_"Exception")
    (§ block
        (§ var #_"byte[]" (§ name U_LAST) nil)
        (§ var #_"byte[]" (§ name U_XOR) nil)

        (§ var #_"SecretKeySpec" (§ name key) (§ new #_"SecretKeySpec" (.. P (getBytes "UTF-8")), "HmacSHA512"))
        (§ var #_"Mac" (§ name mac) (Mac/getInstance (.. key (getAlgorithm))))
        (.. mac (init key))

        (§ for (§ var #_"int" (§ name j) 0) :for (< j c) :for (§ ass (§ name j) (+ j 1)))
        (§ block
            (§ if (§ expr j == 0))
            (§ block
                (§ var #_"byte[]" (§ name baS) (.. S (getBytes "UTF-8")))
                (§ var #_"byte[]" (§ name baI) (INT i))
                (§ var #_"byte[]" (§ name baU) (§ new #_"byte[]" (§ count (.. baS length) + (.. baI length))))

                (System/arraycopy baS, 0, baU, 0, (.. baS length))
                (System/arraycopy baI, 0, baU, (.. baS length), (.. baI length))

                (§ ass (§ name U_XOR) (.. mac (doFinal baU)))
                (§ ass (§ name U_LAST) U_XOR)
                (.. mac (reset))
            )
            (§ else )
            (§ block
                (§ var #_"byte[]" (§ name baU) (.. mac (doFinal U_LAST)))
                (.. mac (reset))

                (§ for (§ var #_"int" (§ name k) 0) :for (§ expr k < (.. U_XOR length)) :for (§ ass (§ name k) (+ k 1)))
                (§ block
                    (§ ass (§ name (§ ai U_XOR k)) (§ cast #_"byte" (§ expr (§ ai U_XOR k) :xor (§ ai baU k))))
                )

                (§ ass (§ name U_LAST) baU)
            )
        )

        U_XOR
    )

    #_private
    #_static
    (§ defn- #_"byte[]" (§ fn INT) [#_"int" (§ name i)])
    (§ block
        (§ var #_"ByteBuffer" (§ name bb) (ByteBuffer/allocate 4))
        (.. bb (order ByteOrder/BIG_ENDIAN))
        (.. bb (putInt i))

        (.. bb (array))
    )
)

#_(ns org.bitcoinj.crypto #_"TransactionSignature"
    (:import [java.io ByteArrayOutputStream IOException]
             [java.math BigInteger])
    (:import [com.google.common.base Preconditions])
   (:require [org.bitcoinj.core ECKey Transaction VerificationException]
             [org.bitcoinj.core.Transaction SigHash]))

;;;
 ; A TransactionSignature wraps an {@link org.bitcoinj.core.ECKey.ECDSASignature} and adds methods for handling
 ; the additional SIGHASH mode byte that is used.
 ;;
#_public
(§ class #_"TransactionSignature" (§ extends #_"ECKey.ECDSASignature")
    ;;;
     ; A byte that controls which parts of a transaction are signed.  This is exposed because signatures
     ; parsed off the wire may have sighash flags that aren't "normal" serializations of the enum values.
     ; Because Bitcoin Core works via bit testing, we must not lose the exact value when round-tripping
     ; otherwise we'll fail to verify signature hashes.
     ;;
    #_public
    (§ field #_"int" (§ name sighashFlags))

    ;;; Constructs a signature with the given components and SIGHASH_ALL. ;;
    #_public
    (§ constructor #_"TransactionSignature" [#_"BigInteger" (§ name r), #_"BigInteger" (§ name s)])
    (§ block
        (§ this r, s, (.. Transaction/SigHash/ALL value))
        this
    )

    ;;; Constructs a signature with the given components and raw sighash flag bytes (needed for rule compatibility). ;;
    #_public
    (§ constructor #_"TransactionSignature" [#_"BigInteger" (§ name r), #_"BigInteger" (§ name s), #_"int" (§ name sighashFlags)])
    (§ block
        (§ super r, s)
        (§ ass (§ name (.. this sighashFlags)) sighashFlags)
        this
    )

    ;;; Constructs a transaction signature based on the ECDSA signature. ;;
    #_public
    (§ constructor #_"TransactionSignature" [#_"ECKey.ECDSASignature" (§ name signature), #_"Transaction.SigHash" (§ name mode), #_"boolean" (§ name anyoneCanPay)])
    (§ block
        (§ super (.. signature r), (.. signature s))
        (§ ass (§ name sighashFlags) (calcSigHashValue mode, anyoneCanPay))
        this
    )

    ;;;
     ; Returns a dummy invalid signature whose R/S values are set such that they will take up the same number of
     ; encoded bytes as a real signature.  This can be useful when you want to fill out a transaction to be of
     ; the right size (e.g. for fee calculations) but don't have the requisite signing key yet and will fill out
     ; the real signature later.
     ;;
    #_public
    #_static
    (§ defn #_"TransactionSignature" (§ fn dummy) [])
    (§ block
        (§ var #_"BigInteger" (§ name val) ECKey/HALF_CURVE_ORDER)
        (§ new #_"TransactionSignature" val, val)
    )

    ;;; Calculates the byte used in the protocol to represent the combination of mode and anyoneCanPay. ;;
    #_public
    #_static
    (§ defn #_"int" (§ fn calcSigHashValue) [#_"Transaction.SigHash" (§ name mode), #_"boolean" (§ name anyoneCanPay)])
    (§ block
        ;; Enforce compatibility since this code was made before the SigHash enum was updated.
        (Preconditions/checkArgument (§ expr SigHash/ALL == mode || SigHash/NONE == mode || SigHash/SINGLE == mode))

        (§ var #_"int" (§ name sighashFlags) (.. mode value))
        (§ if anyoneCanPay)
        (§ block
            (§ ass (§ name sighashFlags) (§ expr sighashFlags | (.. Transaction/SigHash/ANYONECANPAY value)))
        )
        sighashFlags
    )

    ;;;
     ; Returns true if the given signature is has canonical encoding, and will thus be accepted as standard by
     ; Bitcoin Core.  DER and the SIGHASH encoding allow for quite some flexibility in how the same structures
     ; are encoded, and this can open up novel attacks in which a man in the middle takes a transaction and then
     ; changes its signature such that the transaction hash is different but it's still valid.  This can confuse
     ; wallets and generally violates people's mental model of how Bitcoin should work, thus non-canonical
     ; signatures are now not relayed by default.
     ;;
    #_public
    #_static
    (§ defn #_"boolean" (§ fn isEncodingCanonical) [#_"byte[]" (§ name signature)])
    (§ block
        ;; See Bitcoin Core's IsCanonicalSignature, https://bitcointalk.org/index.php?topic=8392.msg127623#msg127623
        ;; A canonical signature exists of: <30> <total len> <02> <len R> <R> <02> <len S> <S> <hashtype>
        ;; Where R and S are not negative (their first byte has its highest bit not set), and not
        ;; excessively padded (do not start with a 0 byte, unless an otherwise negative number follows,
        ;; in which case a single 0 byte is necessary and even required).
        (§ if (§ expr (.. signature length) < 9 || 73 < (.. signature length)))
        (§ block
            (§ return false)
        )

        (§ var #_"int" (§ name hashType) (& (& (§ ai signature (- (.. signature length) 1)) 0xff) (§ flip (.. Transaction/SigHash/ANYONECANPAY value)))) ;; mask the byte to prevent sign-extension hurting us
        (§ if (§ expr hashType < (.. Transaction/SigHash/ALL value) || (.. Transaction/SigHash/SINGLE value) < hashType))
        (§ block
            (§ return false)
        )

        ;;                   "wrong type"                  "wrong length marker"
        (§ if (§ expr (§ expr (§ ai signature 0) & 0xff) != 0x30 || (§ expr (§ ai signature 1) & 0xff) != (.. signature length) - 3))
        (§ block
            (§ return false)
        )

        (§ var #_"int" (§ name lenR) (§ expr (§ ai signature 3) & 0xff))
        (§ if (§ expr (.. signature length) <= 5 + lenR || lenR == 0))
        (§ block
            (§ return false)
        )
        (§ var #_"int" (§ name lenS) (§ expr (§ ai signature (§ expr 5 + lenR)) & 0xff))
        (§ if (§ expr lenR + lenS + 7 != (.. signature length) || lenS == 0))
        (§ block
            (§ return false)
        )

        ;;    R value type mismatch          R value negative
        (§ if (§ expr (§ ai signature (§ expr 4 - 2)) != 0x02 || (§ expr (§ ai signature 4) & 0x80) == 0x80))
        (§ block
            (§ return false)
        )
        (§ if (§ expr 1 < lenR && (§ ai signature 4) == 0x00 && (§ expr (§ ai signature (§ expr 4 + 1)) & 0x80) != 0x80))
        (§ block
            (§ return false) ;; R value excessively padded
        )

        ;;       S value type mismatch                    S value negative
        (§ if (§ expr (§ ai signature (§ expr 6 + lenR - 2)) != 0x02 || (§ expr (§ ai signature (§ expr 6 + lenR)) & 0x80) == 0x80))
        (§ block
            (§ return false)
        )
        (§ if (§ expr 1 < lenS && (§ ai signature (§ expr 6 + lenR)) == 0x00 && (§ expr (§ ai signature (§ expr 6 + lenR + 1)) & 0x80) != 0x80))
        (§ block
            (§ return false) ;; S value excessively padded
        )

        true
    )

    #_public
    (§ method #_"boolean" (§ fn anyoneCanPay) [])
    (§ block
        (!= (§ expr sighashFlags & (.. Transaction/SigHash/ANYONECANPAY value)) 0)
    )

    #_public
    (§ method #_"Transaction.SigHash" (§ fn sigHashMode) [])
    (§ block
        (§ var #_"int" (§ name mode) (& sighashFlags 0x1f))

        (§ if (§ expr mode == (.. Transaction/SigHash/NONE value)))
        (§ block
            (§ return Transaction/SigHash/NONE)
        )
        (§ if (§ expr mode == (.. Transaction/SigHash/SINGLE value)))
        (§ block
            (§ return Transaction/SigHash/SINGLE)
        )

        Transaction/SigHash/ALL
    )

    ;;;
     ; What we get back from the signer are the two components of a signature, r and s.  To get a flat byte stream
     ; of the type used by Bitcoin we have to encode them using DER encoding, which is just a way to pack the two
     ; components into a structure, and then we append a byte to the end for the sighash flags.
     ;;
    #_public
    (§ method #_"byte[]" (§ fn encodeToBitcoin) [])
    (§ block
        (§ try )
        (§ block
            (§ var #_"ByteArrayOutputStream" (§ name bos) (derByteStream))
            (.. bos (write sighashFlags))
            (§ return (.. bos (toByteArray)))
        )
        (§ catch #_"IOException" (§ name e))
        (§ block
            (§ throw (§ new #_"RuntimeException" e)) ;; Cannot happen.
        )
    )

    #_override
    #_public
    (§ method #_"ECKey.ECDSASignature" (§ fn toCanonicalised) [])
    (§ block
        (§ new #_"TransactionSignature" (.. super (toCanonicalised)), (sigHashMode), (anyoneCanPay))
    )

    ;;;
     ; Returns a decoded signature.
     ;
     ; @param requireCanonicalEncoding if the encoding of the signature must be canonical.
     ; @throws RuntimeException if the signature is invalid or unparseable in some way.
     ; @deprecated use {@link #decodeFromBitcoin(byte[], boolean, boolean)} instead.
     ;;
    #_deprecated
    #_public
    #_static
    (§ defn #_"TransactionSignature" (§ fn decodeFromBitcoin) [#_"byte[]" (§ name bytes), #_"boolean" (§ name requireCanonicalEncoding)])
        (§ throws #_"VerificationException")
    (§ block
        (decodeFromBitcoin bytes, requireCanonicalEncoding, false)
    )

    ;;;
     ; Returns a decoded signature.
     ;
     ; @param requireCanonicalEncoding if the encoding of the signature must be canonical.
     ; @param requireCanonicalSValue if the S-value must be canonical (below half the order of the curve).
     ; @throws RuntimeException if the signature is invalid or unparseable in some way.
     ;;
    #_public
    #_static
    (§ defn #_"TransactionSignature" (§ fn decodeFromBitcoin) [#_"byte[]" (§ name bytes), #_"boolean" (§ name requireCanonicalEncoding), #_"boolean" (§ name requireCanonicalSValue)])
        (§ throws #_"VerificationException")
    (§ block
        ;; Bitcoin encoding is DER signature + sighash byte.
        (§ if (§ expr requireCanonicalEncoding && (§ not (isEncodingCanonical bytes))))
        (§ block
            (§ throw (§ new #_"VerificationException" "Signature encoding is not canonical."))
        )

        (§ var #_"ECKey.ECDSASignature" (§ name sig))
        (§ try )
        (§ block
            (§ ass (§ name sig) (.. ECKey/ECDSASignature (decodeFromDER bytes)))
        )
        (§ catch #_"IllegalArgumentException" (§ name e))
        (§ block
            (§ throw (§ new #_"VerificationException" "Could not decode DER", e))
        )
        (§ if (§ expr requireCanonicalSValue && (§ not (.. sig (isCanonical)))))
        (§ block
            (§ throw (§ new #_"VerificationException" "S-value is not canonical."))
        )

        ;; In Bitcoin, any value of the final byte is valid, but not necessarily canonical.  See javadocs
        ;; for isEncodingCanonical to learn more about this.  So we must store the exact byte found.
        (§ new #_"TransactionSignature" (.. sig r), (.. sig s), (§ ai bytes (- (.. bytes length) 1)))
    )
)

#_(ns org.bitcoinj.kits #_"WalletAppKit"
    (:import [java.io *]
             [java.net *]
             [java.nio.channels *]
             [java.util *]
             [java.util.concurrent *])
    (:import [com.google.common.base Preconditions]
             [com.google.common.collect *]
             [com.google.common.util.concurrent *]
             [org.slf4j *])
   (:require [org.bitcoinj.core.listeners *]
             [org.bitcoinj.core *]
             [org.bitcoinj.net.discovery *]
             [org.bitcoinj.store *]
             [org.bitcoinj.wallet *]))

;;;
 ; <p>Utility class that wraps the boilerplate needed to set up a new SPV bitcoinj app.  Instantiate it with a directory
 ; and file prefix, optionally configure a few things, then use startAsync and optionally awaitRunning.  The object will
 ; construct and configure a {@link BlockChain}, {@link SPVBlockStore}, {@link Wallet} and {@link PeerGroup}.  Depending
 ; on the value of the blockingStartup property, startup will be considered complete once the block chain has fully
 ; synchronized, so it can take a while.</p>
 ;
 ; <p>To add listeners and modify the objects that are constructed, you can either do that by overriding the
 ; {@link #onSetupCompleted()} method (which will run on a background thread) and make your changes there,
 ; or by waiting for the service to start and then accessing the objects from wherever you want.  However, you cannot
 ; access the objects this class creates until startup is complete.</p>
 ;
 ; <p>The asynchronous design of this class may seem puzzling (just use {@link #awaitRunning()} if you don't want that).
 ; It is to make it easier to fit bitcoinj into GUI apps, which require a high degree of responsiveness on their main
 ; thread which handles all the animation and user interaction.  Even when blockingStart is false, initializing bitcoinj
 ; means doing potentially blocking file IO, generating keys and other potentially intensive operations.  By running it
 ; on a background thread, there's no risk of accidentally causing UI lag.</p>
 ;
 ; <p>Note that {@link #awaitRunning()} can throw an unchecked {@link java.lang.IllegalStateException}
 ; if anything goes wrong during startup - you should probably handle it and use {@link Exception#getCause()} to figure
 ; out what went wrong more precisely.  Same thing if you just use the {@link #startAsync()} method.</p>
 ;;
#_public
(§ class #_"WalletAppKit" (§ extends #_"AbstractIdleService")
    #_protected
    #_static
    (§ def #_"Logger" (§ name log) (LoggerFactory/getLogger (§ klass #_"WalletAppKit")))

    #_protected
    (§ field #_"String" (§ name filePrefix))
    #_protected
    (§ field #_"NetworkParameters" (§ name params))
    #_protected
    #_volatile
    (§ field #_"BlockChain" (§ name vChain))
    #_protected
    #_volatile
    (§ field #_"BlockStore" (§ name vStore))
    #_protected
    #_volatile
    (§ field #_"Wallet" (§ name vWallet))
    #_protected
    #_volatile
    (§ field #_"PeerGroup" (§ name vPeerGroup))

    #_protected
    (§ field #_"File" (§ name directory))
    #_protected
    #_volatile
    (§ field #_"File" (§ name vWalletFile))

    #_protected
    (§ field #_"boolean" (§ name useAutoSave) true)
    #_protected
    (§ field #_"PeerAddress[]" (§ name peerAddresses))
    #_protected
    (§ field #_"DownloadProgressTracker" (§ name downloadListener))
    #_protected
    (§ field #_"boolean" (§ name autoStop) true)
    #_protected
    (§ field #_"InputStream" (§ name checkpoints))
    #_protected
    (§ field #_"boolean" (§ name blockingStartup) true)
    #_protected
    (§ field #_"String" (§ name userAgent))
    #_protected
    (§ field #_"String" (§ name version))
    #_protected
    (§ field #_"WalletProtobufSerializer.WalletFactory" (§ name walletFactory))
    #_nilable
    #_protected
    (§ field #_"DeterministicSeed" (§ name restoreFromSeed))
    #_nilable
    #_protected
    (§ field #_"PeerDiscovery" (§ name discovery))

    #_protected
    #_volatile
    (§ field #_"Context" (§ name context))

    ;;;
     ; Creates a new WalletAppKit, with a newly created {@link Context}.  Files will be stored in the given directory.
     ;;
    #_public
    (§ constructor #_"WalletAppKit" [#_"NetworkParameters" (§ name params), #_"File" (§ name directory), #_"String" (§ name filePrefix)])
    (§ block
        (§ this (§ new #_"Context" params), directory, filePrefix)
        this
    )

    ;;;
     ; Creates a new WalletAppKit, with the given {@link Context}.  Files will be stored in the given directory.
     ;;
    #_public
    (§ constructor #_"WalletAppKit" [#_"Context" (§ name context), #_"File" (§ name directory), #_"String" (§ name filePrefix)])
    (§ block
        (§ ass (§ name (.. this context)) context)
        (§ ass (§ name (.. this params)) (Preconditions/checkNotNull (.. context (getParams))))
        (§ ass (§ name (.. this directory)) (Preconditions/checkNotNull directory))
        (§ ass (§ name (.. this filePrefix)) (Preconditions/checkNotNull filePrefix))
        this
    )

    ;;; Will only connect to the given addresses.  Cannot be called after startup. ;;
    #_public
    (§ method #_"WalletAppKit" (§ fn setPeerNodes) [#_"PeerAddress..." (§ name addresses)])
    (§ block
        (Preconditions/checkState (§ expr (state) == State/NEW), "Cannot call after startup")
        (§ ass (§ name (.. this peerAddresses)) addresses)
        this
    )

    ;;; Will only connect to localhost.  Cannot be called after startup. ;;
    #_public
    (§ method #_"WalletAppKit" (§ fn connectToLocalHost) [])
    (§ block
        (§ try )
        (§ block
            (§ var #_"InetAddress" (§ name localHost) (InetAddress/getLocalHost))
            (§ return (setPeerNodes (§ new #_"PeerAddress" params, localHost, (.. params (getPort)))))
        )
        (§ catch #_"UnknownHostException" (§ name e))
        (§ block
            ;; Borked machine with no loopback adapter configured properly.
            (§ throw (§ new #_"RuntimeException" e))
        )
    )

    ;;; If true, the wallet will save itself to disk automatically whenever it changes. ;;
    #_public
    (§ method #_"WalletAppKit" (§ fn setAutoSave) [#_"boolean" (§ name value)])
    (§ block
        (Preconditions/checkState (§ expr (state) == State/NEW), "Cannot call after startup")
        (§ ass (§ name useAutoSave) value)
        this
    )

    ;;;
     ; If you want to learn about the sync process, you can provide a listener here.  For instance,
     ; a {@link org.bitcoinj.core.DownloadProgressTracker} is a good choice.  This has no effect unless
     ; setBlockingStartup(false) has been called too, due to some missing implementation code.
     ;;
    #_public
    (§ method #_"WalletAppKit" (§ fn setDownloadListener) [#_"DownloadProgressTracker" (§ name listener)])
    (§ block
        (§ ass (§ name (.. this downloadListener)) listener)
        this
    )

    ;;; If true, will register a shutdown hook to stop the library.  Defaults to true. ;;
    #_public
    (§ method #_"WalletAppKit" (§ fn setAutoStop) [#_"boolean" (§ name autoStop)])
    (§ block
        (§ ass (§ name (.. this autoStop)) autoStop)
        this
    )

    ;;;
     ; If set, the file is expected to contain a checkpoints file calculated with BuildCheckpoints.
     ; It makes initial block sync faster for new users - please refer to the documentation on the
     ; bitcoinj website (https://bitcoinj.github.io/speeding-up-chain-sync) for further details.
     ;;
    #_public
    (§ method #_"WalletAppKit" (§ fn setCheckpoints) [#_"InputStream" (§ name checkpoints)])
    (§ block
        (§ if (!= (.. this checkpoints) nil))
        (§ block
            (Utils/closeUnchecked (.. this checkpoints))
        )
        (§ ass (§ name (.. this checkpoints)) (Preconditions/checkNotNull checkpoints))
        this
    )

    ;;;
     ; If true (the default) then the startup of this service won't be considered complete until the network has been
     ; brought up, peer connections established and the block chain synchronised.  Therefore {@link #awaitRunning()} can
     ; potentially take a very long time.  If false, then startup is considered complete once the network activity
     ; begins and peer connections/block chain sync will continue in the background.
     ;;
    #_public
    (§ method #_"WalletAppKit" (§ fn setBlockingStartup) [#_"boolean" (§ name blockingStartup)])
    (§ block
        (§ ass (§ name (.. this blockingStartup)) blockingStartup)
        this
    )

    ;;;
     ; Sets the string that will appear in the subver field of the version message.
     ; @param userAgent A short string that should be the name of your app, e.g. "My Wallet".
     ; @param version A short string that contains the version number, e.g. "1.0-BETA".
     ;;
    #_public
    (§ method #_"WalletAppKit" (§ fn setUserAgent) [#_"String" (§ name userAgent), #_"String" (§ name version)])
    (§ block
        (§ ass (§ name (.. this userAgent)) (Preconditions/checkNotNull userAgent))
        (§ ass (§ name (.. this version)) (Preconditions/checkNotNull version))
        this
    )

    ;;;
     ; Sets a wallet factory which will be used when the kit creates a new wallet.
     ;;
    #_public
    (§ method #_"WalletAppKit" (§ fn setWalletFactory) [#_"WalletProtobufSerializer.WalletFactory" (§ name walletFactory)])
    (§ block
        (§ ass (§ name (.. this walletFactory)) walletFactory)
        this
    )

    ;;;
     ; If a seed is set here then any existing wallet that matches the file name will be renamed to a backup name,
     ; the chain file will be deleted, and the wallet object will be instantiated with the given seed instead of
     ; a fresh one being created.  This is intended for restoring a wallet from the original seed.  To implement
     ; restore, you would shut down the existing appkit, if any, then recreate it with the seed given by the user,
     ; then start up the new kit.  The next time your app starts it should work as normal (that is, don't keep
     ; calling this each time).
     ;;
    #_public
    (§ method #_"WalletAppKit" (§ fn restoreWalletFromSeed) [#_"DeterministicSeed" (§ name seed)])
    (§ block
        (§ ass (§ name (.. this restoreFromSeed)) seed)
        this
    )

    ;;;
     ; Sets the peer discovery class to use.  If none is provided then DNS is used, which is a reasonable default.
     ;;
    #_public
    (§ method #_"WalletAppKit" (§ fn setDiscovery) [#_nilable #_"PeerDiscovery" (§ name discovery)])
    (§ block
        (§ ass (§ name (.. this discovery)) discovery)
        this
    )

    ;;;
     ; Override this to use a {@link BlockStore} that isn't the default of {@link SPVBlockStore}.
     ;;
    #_protected
    (§ method #_"BlockStore" (§ fn provideBlockStore) [#_"File" (§ name file)])
        (§ throws #_"BlockStoreException")
    (§ block
        (§ new #_"SPVBlockStore" params, file)
    )

    ;;;
     ; This method is invoked on a background thread after all objects are initialised, but before the peer group
     ; or block chain download is started.  You can tweak the objects configuration here.
     ;;
    #_protected
    (§ method #_"void" (§ fn onSetupCompleted) [])
    (§ block
        nil
    )

    ;;;
     ; Tests to see if the spvchain file has an operating system file lock on it.  Useful for checking if your app
     ; is already running.  If another copy of your app is running and you start the appkit anyway, an exception will
     ; be thrown during the startup process.  Returns false if the chain file does not exist or is a directory.
     ;;
    #_public
    (§ method #_"boolean" (§ fn isChainFileLocked) [])
        (§ throws #_"IOException")
    (§ block
        (§ var #_"RandomAccessFile" (§ name file2) nil)
        (§ try )
        (§ block
            (§ var #_"File" (§ name file) (§ new #_"File" directory, (§ expr filePrefix + ".spvchain")))
            (§ if (§ not (.. file (exists))))
            (§ block
                (§ return false)
            )
            (§ if (.. file (isDirectory)))
            (§ block
                (§ return false)
            )
            (§ ass (§ name file2) (§ new #_"RandomAccessFile" file, "rw"))
            (§ var #_"FileLock" (§ name lock) (.. file2 (getChannel) (tryLock)))
            (§ if (nil? lock))
            (§ block
                (§ return true)
            )
            (.. lock (release))
            (§ return false)
        )
        (§ finally )
        (§ block
            (§ if (some? file2))
            (§ block
                (.. file2 (close))
            )
        )
    )

    #_override
    #_protected
    (§ method #_"void" (§ fn startUp) [])
        (§ throws #_"Exception")
    (§ block
        ;; Runs in a separate thread.
        (Context/propagate context)
        (§ if (§ expr (§ not (.. directory (exists))) && (§ not (.. directory (mkdirs)))))
        (§ block
            (§ throw (§ new #_"IOException" (§ expr "Could not create directory " + (.. directory (getAbsolutePath)))))
        )

        (.. log (info "Starting up with directory = {}", directory))
        (§ try )
        (§ block
            (§ var #_"File" (§ name chainFile) (§ new #_"File" directory, (§ expr filePrefix + ".spvchain")))
            (§ var #_"boolean" (§ name chainFileExists) (.. chainFile (exists)))
            (§ ass (§ name vWalletFile) (§ new #_"File" directory, (§ expr filePrefix + ".wallet")))
            (§ var #_"boolean" (§ name shouldReplayWallet) (§ expr (§ expr (.. vWalletFile (exists)) && (§ not chainFileExists)) || restoreFromSeed != nil))
            (§ ass (§ name vWallet) (createOrLoadWallet shouldReplayWallet))

            ;; Initiate Bitcoin network objects (block store, blockchain and peer group).
            (§ ass (§ name vStore) (provideBlockStore chainFile))
            (§ if (§ expr (§ not chainFileExists) || restoreFromSeed != nil))
            (§ block
                (§ if (§ expr checkpoints == nil && (§ not (Utils/isAndroidRuntime))))
                (§ block
                    (§ ass (§ name checkpoints) (CheckpointManager/openStream params))
                )

                (§ if (some? checkpoints))
                (§ block
                    ;; Initialize the chain file with a checkpoint to speed up first-run sync.
                    (§ var #_"long" (§ name time))
                    (§ if (some? restoreFromSeed))
                    (§ block
                        (§ ass (§ name time) (.. restoreFromSeed (getCreationTimeSeconds)))
                        (§ if chainFileExists)
                        (§ block
                            (.. log (info "Deleting the chain file in preparation from restore."))
                            (.. vStore (close))
                            (§ if (§ not (.. chainFile (delete))))
                            (§ block
                                (§ throw (§ new #_"IOException" "Failed to delete chain file in preparation for restore."))
                            )

                            (§ ass (§ name vStore) (§ new #_"SPVBlockStore" params, chainFile))
                        )
                    )
                    (§ else )
                    (§ block
                        (§ ass (§ name time) (.. vWallet (getEarliestKeyCreationTime)))
                    )
                    (§ if (< 0 time))
                    (§ block
                        (CheckpointManager/checkpoint params, checkpoints, vStore, time)
                    )
                    (§ else )
                    (§ block
                        (.. log (warn "Creating a new uncheckpointed block store due to a wallet with a creation time of zero: this will result in a very slow chain sync"))
                    )
                )
                (§ elseif chainFileExists)
                (§ block
                    (.. log (info "Deleting the chain file in preparation from restore."))
                    (.. vStore (close))
                    (§ if (§ not (.. chainFile (delete))))
                    (§ block
                        (§ throw (§ new #_"IOException" "Failed to delete chain file in preparation for restore."))
                    )

                    (§ ass (§ name vStore) (§ new #_"SPVBlockStore" params, chainFile))
                )
            )
            (§ ass (§ name vChain) (§ new #_"BlockChain" params, vStore))
            (§ ass (§ name vPeerGroup) (createPeerGroup))
            (§ if (!= (.. this userAgent) nil))
            (§ block
                (.. vPeerGroup (setUserAgent userAgent, version))
            )

            ;; Set up peer addresses or discovery first, so if wallet extensions try to broadcast a transaction
            ;; before we're actually connected the broadcast waits for an appropriate number of connections.
            (§ if (some? peerAddresses))
            (§ block
                (§ for (§ var #_"PeerAddress" (§ name addr)) :for peerAddresses)
                (§ block
                    (.. vPeerGroup (addAddress addr))
                )
                (.. vPeerGroup (setMaxConnections (.. peerAddresses length)))
                (§ ass (§ name peerAddresses) nil)
            )
            (§ else )
            (§ block
                (.. vPeerGroup (addPeerDiscovery (or discovery (§ new #_"DnsDiscovery" params))))
            )
            (.. vChain (addWallet vWallet))
            (.. vPeerGroup (addWallet vWallet))
            (onSetupCompleted)

            (§ if blockingStartup)
            (§ block
                (.. vPeerGroup (start))
                ;; Make sure we shut down cleanly.
                (installShutdownHook)

                ;; TODO: Be able to use the provided download listener when doing a blocking startup.
                (§ var #_"DownloadProgressTracker" (§ name listener) (§ new #_"DownloadProgressTracker"))
                (.. vPeerGroup (startBlockChainDownload listener))
                (.. listener (await))
            )
            (§ else )
            (§ block
                (Futures/addCallback (.. vPeerGroup (startAsync)), (§ new #_"FutureCallback")
                (§ anon
                    #_override
                    #_public
                    (§ method #_"void" (§ fn onSuccess) [#_nilable #_"Object" (§ name result)])
                    (§ block
                        (§ var #_"DownloadProgressTracker" (§ name l) (or downloadListener (§ new #_"DownloadProgressTracker")))
                        (.. vPeerGroup (startBlockChainDownload l))
                        nil
                    )

                    #_override
                    #_public
                    (§ method #_"void" (§ fn onFailure) [#_"Throwable" (§ name t)])
                    (§ block
                        (§ throw (§ new #_"RuntimeException" t))
                    )
                ))
            )
        )
        (§ catch #_"BlockStoreException" (§ name e))
        (§ block
            (§ throw (§ new #_"IOException" e))
        )
        nil
    )

    #_private
    (§ method- #_"Wallet" (§ fn createOrLoadWallet) [#_"boolean" (§ name shouldReplayWallet)])
        (§ throws #_"Exception")
    (§ block
        (§ var #_"Wallet" (§ name wallet))

        (maybeMoveOldWalletOutOfTheWay)

        (§ if (.. vWalletFile (exists)))
        (§ block
            (§ ass (§ name wallet) (loadWallet shouldReplayWallet))
        )
        (§ else )
        (§ block
            (§ ass (§ name wallet) (createWallet))
            (.. wallet (freshReceiveKey))

            ;; Currently the only way we can be sure that an extension is aware of its containing wallet is
            ;; by deserializing the extension.
            ;; Hence, we first save and then load wallet to ensure any extensions are correctly initialized.
            (.. wallet (saveToFile vWalletFile))
            (§ ass (§ name wallet) (loadWallet false))
        )

        (§ if useAutoSave)
        (§ block
            (.. this (setupAutoSave wallet))
        )

        wallet
    )

    #_protected
    (§ method #_"void" (§ fn setupAutoSave) [#_"Wallet" (§ name wallet)])
    (§ block
        (.. wallet (autosaveToFile vWalletFile, 5, TimeUnit/SECONDS, nil))
        nil
    )

    #_private
    (§ method- #_"Wallet" (§ fn loadWallet) [#_"boolean" (§ name shouldReplayWallet)])
        (§ throws #_"Exception")
    (§ block
        (§ var #_"Wallet" (§ name wallet))
        (§ var #_"FileInputStream" (§ name walletStream) (§ new #_"FileInputStream" vWalletFile))
        (§ try )
        (§ block
            (§ var #_"Protos.Wallet" (§ name proto) (WalletProtobufSerializer/parseToProto walletStream))
            (§ var #_"WalletProtobufSerializer" (§ name serializer))
            (§ if (some? walletFactory))
            (§ block
                (§ ass (§ name serializer) (§ new #_"WalletProtobufSerializer" walletFactory))
            )
            (§ else )
            (§ block
                (§ ass (§ name serializer) (§ new #_"WalletProtobufSerializer"))
            )
            (§ ass (§ name wallet) (.. serializer (readWallet params, proto)))
            (§ if shouldReplayWallet)
            (§ block
                (.. wallet (reset))
            )
        )
        (§ finally )
        (§ block
            (.. walletStream (close))
        )
        wallet
    )

    #_protected
    (§ method #_"Wallet" (§ fn createWallet) [])
    (§ block
        (§ var #_"KeyChainGroup" (§ name kcg))
        (§ if (some? restoreFromSeed))
        (§ block
            (§ ass (§ name kcg) (§ new #_"KeyChainGroup" params, restoreFromSeed))
        )
        (§ else )
        (§ block
            (§ ass (§ name kcg) (§ new #_"KeyChainGroup" params))
        )
        (if (some? walletFactory) (.. walletFactory (create params, kcg)) (§ new #_"Wallet" params, kcg)) ;; default
    )

    #_private
    (§ method- #_"void" (§ fn maybeMoveOldWalletOutOfTheWay) [])
    (§ block
        (§ if (nil? restoreFromSeed))
        (§ block
            (§ return nil)
        )
        (§ if (§ not (.. vWalletFile (exists))))
        (§ block
            (§ return nil)
        )

        (§ var #_"int" (§ name counter) 1)
        (§ var #_"File" (§ name newName))
        (§ do )
        (§ block
            (§ ass (§ name newName) (§ new #_"File" (.. vWalletFile (getParent)), (§ str "Backup " + counter + " for " + (.. vWalletFile (getName)))))
            (§ ass (§ name counter) (+ counter 1))
        )
        (§ again (.. newName (exists)))

        (.. log (info "Renaming old wallet file {} to {}", vWalletFile, newName))

        ;; This should not happen unless something is really messed up.
        (§ if (§ not (.. vWalletFile (renameTo newName))))
        (§ block
            (§ throw (§ new #_"RuntimeException" "Failed to rename wallet for restore"))
        )
        nil
    )

    #_protected
    (§ method #_"PeerGroup" (§ fn createPeerGroup) [])
        (§ throws #_"TimeoutException")
    (§ block
        (§ new #_"PeerGroup" params, vChain)
    )

    #_private
    (§ method- #_"void" (§ fn installShutdownHook) [])
    (§ block
        (§ if autoStop)
        (§ block
            (.. (Runtime/getRuntime) (addShutdownHook (§ new #_"Thread")
            (§ anon
                #_override
                #_public
                (§ method #_"void" (§ fn run) [])
                (§ block
                    (§ try )
                    (§ block
                        (.. (§ dhis WalletAppKit) (stopAsync))
                        (.. (§ dhis WalletAppKit) (awaitTerminated))
                    )
                    (§ catch #_"Exception" (§ name e))
                    (§ block
                        (§ throw (§ new #_"RuntimeException" e))
                    )
                    nil
                )
            )))
        )
        nil
    )

    #_override
    #_protected
    (§ method #_"void" (§ fn shutDown) [])
        (§ throws #_"Exception")
    (§ block
        ;; Runs in a separate thread.
        (§ try )
        (§ block
            (Context/propagate context)
            (.. vPeerGroup (stop))
            (.. vWallet (saveToFile vWalletFile))
            (.. vStore (close))

            (§ ass (§ name vPeerGroup) nil)
            (§ ass (§ name vWallet) nil)
            (§ ass (§ name vStore) nil)
            (§ ass (§ name vChain) nil)
        )
        (§ catch #_"BlockStoreException" (§ name e))
        (§ block
            (§ throw (§ new #_"IOException" e))
        )
        nil
    )

    #_public
    (§ method #_"NetworkParameters" (§ fn params) [])
    (§ block
        params
    )

    #_public
    (§ method #_"BlockChain" (§ fn chain) [])
    (§ block
        (Preconditions/checkState (§ expr (state) == State/STARTING || (state) == State/RUNNING), "Cannot call until startup is complete")
        vChain
    )

    #_public
    (§ method #_"BlockStore" (§ fn store) [])
    (§ block
        (Preconditions/checkState (§ expr (state) == State/STARTING || (state) == State/RUNNING), "Cannot call until startup is complete")
        vStore
    )

    #_public
    (§ method #_"Wallet" (§ fn wallet) [])
    (§ block
        (Preconditions/checkState (§ expr (state) == State/STARTING || (state) == State/RUNNING), "Cannot call until startup is complete")
        vWallet
    )

    #_public
    (§ method #_"PeerGroup" (§ fn peerGroup) [])
    (§ block
        (Preconditions/checkState (§ expr (state) == State/STARTING || (state) == State/RUNNING), "Cannot call until startup is complete")
        vPeerGroup
    )

    #_public
    (§ method #_"File" (§ fn directory) [])
    (§ block
        directory
    )
)

#_(ns org.bitcoinj.net #_"AbstractTimeoutHandler"
    (:import [java.util Timer TimerTask]))

;;;
 ; <p>A base class which provides basic support for socket timeouts.  It is used instead of integrating timeouts into the
 ; NIO select thread both for simplicity and to keep code shared between NIO and blocking sockets as much as possible.
 ; </p>
 ;;
#_public
#_abstract
(§ class #_"AbstractTimeoutHandler"
    ;; TimerTask and timeout value which are added to a timer to kill the connection on timeout.
    #_private
    (§ field- #_"TimerTask" (§ name timeoutTask))
    #_private
    (§ field- #_"long" (§ name timeoutMillis) 0)
    #_private
    (§ field- #_"boolean" (§ name timeoutEnabled) true)

    ;; A timer which manages expiring channels as their timeouts occur (if configured).
    #_private
    #_static
    (§ def- #_"Timer" (§ name timeoutTimer) (§ new #_"Timer" "AbstractTimeoutHandler timeouts", true))

    ;;;
     ; <p>Enables or disables the timeout entirely.  This may be useful if you want to store the timeout value
     ; but wish to temporarily disable/enable timeouts.</p>
     ;
     ; <p>The default is for timeoutEnabled to be true but timeoutMillis to be set to 0 (i.e. disabled).</p>
     ;
     ; <p>This call will reset the current progress towards the timeout.</p>
     ;;
    #_public
    #_synchronized
    (§ method #_"void" (§ fn setTimeoutEnabled) [#_"boolean" (§ name timeoutEnabled)])
    (§ block
        (§ ass (§ name (.. this timeoutEnabled)) timeoutEnabled)
        (resetTimeout)
        nil
    )

    ;;;
     ; <p>Sets the receive timeout to the given number of milliseconds, automatically killing the connection
     ; if no messages are received for this long.</p>
     ;
     ; <p>A timeout of 0 is interpreted as no timeout.</p>
     ;
     ; <p>The default is for timeoutEnabled to be true but timeoutMillis to be set to 0 (i.e. disabled).</p>
     ;
     ; <p>This call will reset the current progress towards the timeout.</p>
     ;;
    #_public
    #_synchronized
    (§ method #_"void" (§ fn setSocketTimeout) [#_"int" (§ name timeoutMillis)])
    (§ block
        (§ ass (§ name (.. this timeoutMillis)) timeoutMillis)
        (resetTimeout)
        nil
    )

    ;;;
     ; Resets the current progress towards timeout to 0.
     ;;
    #_protected
    #_synchronized
    (§ method #_"void" (§ fn resetTimeout) [])
    (§ block
        (§ if (some? timeoutTask))
        (§ block
            (.. timeoutTask (cancel))
        )
        (§ if (§ expr timeoutMillis == 0 || (§ not timeoutEnabled)))
        (§ block
            (§ return nil)
        )

        (§ ass (§ name timeoutTask) (§ new #_"TimerTask"
        (§ anon
            #_override
            #_public
            (§ method #_"void" (§ fn run) [])
            (§ block
                (timeoutOccurred)
                nil
            )
        )))
        (.. timeoutTimer (schedule timeoutTask, timeoutMillis))
        nil
    )

    #_protected
    #_abstract
    (§ method #_"void" (§ fn timeoutOccurred) [])
)

#_(ns org.bitcoinj.net #_"BlockingClient"
    (:import [java.io *]
             [java.net *]
             [java.nio *]
             [java.util *]
             [javax.net *])
    (:import [com.google.common.base Preconditions]
             [com.google.common.util.concurrent *]
             [org.slf4j Logger LoggerFactory])
   (:require [org.bitcoinj.core *]))

;;;
 ; <p>Creates a simple connection to a server using a {@link StreamConnection} to process data.</p>
 ;
 ; <p>Generally, using {@link NioClient} and {@link NioClientManager} should be preferred over {@link BlockingClient}
 ; and {@link BlockingClientManager}, unless you wish to connect over a proxy or use some other network settings that
 ; cannot be set using NIO.</p>
 ;;
#_public
(§ class #_"BlockingClient" (§ implements #_"MessageWriteTarget")
    #_private
    #_static
    (§ def- #_"Logger" (§ name log) (LoggerFactory/getLogger (§ klass #_"BlockingClient")))

    #_private
    #_static
    (§ def- #_"int" (§ name BUFFER_SIZE_LOWER_BOUND) 4096)
    #_private
    #_static
    (§ def- #_"int" (§ name BUFFER_SIZE_UPPER_BOUND) 65536)

    #_private
    (§ field- #_"Socket" (§ name socket))
    #_private
    #_volatile
    (§ field- #_"boolean" (§ name vCloseRequested) false)
    #_private
    (§ field- #_"SettableFuture<SocketAddress>" (§ name connectFuture))

    ;;;
     ; <p>Creates a new client to the given server address using the given {@link StreamConnection} to decode the data.
     ; The given connection <b>MUST</b> be unique to this object.  This does not block while waiting for the connection
     ; to open, but will call either the {@link StreamConnection#connectionOpened()} or
     ; {@link StreamConnection#connectionClosed()} callback on the created network event processing thread.</p>
     ;
     ; @param connectTimeoutMillis The connect timeout set on the connection (in milliseconds).
     ;                             0 is interpreted as no timeout.
     ; @param socketFactory An object that creates {@link Socket} objects on demand, which may be customised to control
     ;                      how this client connects to the internet.  If not sure, use SocketFactory.getDefault().
     ; @param clientSet A set which this object will add itself to after initialization, and then remove itself from.
     ;;
    #_public
    (§ constructor #_"BlockingClient" [#_"SocketAddress" (§ name serverAddress), #_"StreamConnection" (§ name connection), #_"int" (§ name connectTimeoutMillis), #_"SocketFactory" (§ name socketFactory), #_nilable #_"Set<BlockingClient>" (§ name clientSet)])
        (§ throws #_"IOException")
    (§ block
        (§ ass (§ name connectFuture) (SettableFuture/create))
        ;; Try to fit at least one message in the network buffer, but place an upper and lower limit on its size to make
        ;; sure it doesnt get too large or have to call read too often.
        (.. connection (setWriteTarget this))
        (§ ass (§ name socket) (.. socketFactory (createSocket)))
        (§ var #_"Context" (§ name context) (Context/get))
        (§ var #_"Thread" (§ name t) (§ new #_"Thread"
        (§ anon
            #_override
            #_public
            (§ method #_"void" (§ fn run) [])
            (§ block
                (Context/propagate context)
                (§ if (some? clientSet))
                (§ block
                    (.. clientSet (add (§ dhis BlockingClient)))
                )
                (§ try )
                (§ block
                    (.. socket (connect serverAddress, connectTimeoutMillis))
                    (.. connection (connectionOpened))
                    (.. connectFuture (set serverAddress))
                    (§ var #_"InputStream" (§ name stream) (.. socket (getInputStream)))
                    (runReadLoop stream, connection)
                )
                (§ catch #_"Exception" (§ name e))
                (§ block
                    (§ if (§ not vCloseRequested))
                    (§ block
                        (.. log (error "Error trying to open/read from connection: {}: {}", serverAddress, (.. e (getMessage))))
                        (.. connectFuture (setException e))
                    )
                )
                (§ finally )
                (§ block
                    (§ try )
                    (§ block
                        (.. socket (close))
                    )
                    (§ catch #_"IOException" (§ name e1))
                    (§ block
                        ;; At this point there isn't much we can do, and we can probably assume the channel is closed.
                    )
                    (§ if (some? clientSet))
                    (§ block
                        (.. clientSet (remove (§ dhis BlockingClient)))
                    )
                    (.. connection (connectionClosed))
                )
                nil
            )
        )))
        (.. t (setName (§ expr "BlockingClient network thread for " + serverAddress)))
        (.. t (setDaemon true))
        (.. t (start))
        this
    )

    ;;;
     ; A blocking call that never returns, except by throwing an exception.  It reads bytes from the input stream
     ; and feeds them to the provided {@link StreamConnection}, for example, a {@link Peer}.
     ;;
    #_public
    #_static
    (§ defn #_"void" (§ fn runReadLoop) [#_"InputStream" (§ name stream), #_"StreamConnection" (§ name connection)])
        (§ throws #_"Exception")
    (§ block
        (§ var #_"ByteBuffer" (§ name dbuf) (ByteBuffer/allocateDirect (Math/min (Math/max (.. connection (getMaxMessageSize)), BUFFER_SIZE_LOWER_BOUND), BUFFER_SIZE_UPPER_BOUND)))
        (§ var #_"byte[]" (§ name readBuff) (§ new #_"byte[]" (§ count (.. dbuf (capacity)))))
        (§ while true)
        (§ block
            ;; TODO: Kill the message duplication here.
            (Preconditions/checkState (§ expr 0 < (.. dbuf (remaining)) && (.. dbuf (remaining)) <= (.. readBuff length)))
            (§ var #_"int" (§ name read) (.. stream (read readBuff, 0, (Math/max 1, (Math/min (.. dbuf (remaining)), (.. stream (available)))))))
            (§ if (§ expr read == -1))
            (§ block
                (§ return nil)
            )

            (.. dbuf (put readBuff, 0, read))
            ;; "flip" the buffer - setting the limit to the current position and setting position to 0
            (.. dbuf (flip))
            ;; Use connection.receiveBytes's return value as a double-check that it stopped reading at the right location.
            (§ var #_"int" (§ name bytesConsumed) (.. connection (receiveBytes dbuf)))
            (Preconditions/checkState (== (.. dbuf (position)) bytesConsumed))
            ;; Now drop the bytes which were read by compacting dbuf (resetting limit and keeping relative position).
            (.. dbuf (compact))
        )
        nil
    )

    ;;;
     ; Closes the connection to the server, triggering the {@link StreamConnection#connectionClosed()}
     ; event on the network-handling thread where all callbacks occur.
     ;;
    #_override
    #_public
    (§ method #_"void" (§ fn closeConnection) [])
    (§ block
        ;; Closes the channel, triggering an exception in the network-handling thread triggering connectionClosed().
        (§ try )
        (§ block
            (§ ass (§ name vCloseRequested) true)
            (.. socket (close))
        )
        (§ catch #_"IOException" (§ name e))
        (§ block
            (§ throw (§ new #_"RuntimeException" e))
        )
        nil
    )

    #_override
    #_public
    #_synchronized
    (§ method #_"void" (§ fn writeBytes) [#_"byte[]" (§ name message)])
        (§ throws #_"IOException")
    (§ block
        (§ try )
        (§ block
            (§ var #_"OutputStream" (§ name stream) (.. socket (getOutputStream)))
            (.. stream (write message))
            (.. stream (flush))
        )
        (§ catch #_"IOException" (§ name e))
        (§ block
            (.. log (error "Error writing message to connection, closing connection", e))
            (closeConnection)
            (§ throw e)
        )
        nil
    )

    ;;; Returns a future that completes once connection has occurred at the socket level or with an exception if failed to connect. ;;
    #_public
    (§ method #_"ListenableFuture<SocketAddress>" (§ fn getConnectFuture) [])
    (§ block
        connectFuture
    )
)

#_(ns org.bitcoinj.net #_"BlockingClientManager"
    (:import [java.io IOException]
             [java.net SocketAddress]
             [java.util Collections HashSet Iterator Set]
             [javax.net SocketFactory])
    (:import [com.google.common.base Preconditions]
             [com.google.common.util.concurrent AbstractIdleService ListenableFuture]))

;;;
 ; <p>A thin wrapper around a set of {@link BlockingClient}s.</p>
 ;
 ; <p>Generally, using {@link NioClient} and {@link NioClientManager} should be preferred over {@link BlockingClient}
 ; and {@link BlockingClientManager} as they scale significantly better, unless you wish to connect over a proxy or use
 ; some other network settings that cannot be set using NIO.</p>
 ;;
#_public
(§ class #_"BlockingClientManager" (§ extends #_"AbstractIdleService") (§ implements #_"ClientConnectionManager")
    #_private
    (§ field- #_"SocketFactory" (§ name socketFactory))
    #_private
    (§ field- #_"Set<BlockingClient>" (§ name clients) (Collections/synchronizedSet (§ new #_"HashSet<BlockingClient>")))

    #_private
    (§ field- #_"int" (§ name connectTimeoutMillis) 1000)

    #_public
    (§ constructor #_"BlockingClientManager" [])
    (§ block
        (§ ass (§ name socketFactory) (SocketFactory/getDefault))
        this
    )

    ;;;
     ; Creates a blocking client manager that will obtain sockets from the given factory.
     ; Useful for customising how bitcoinj connects to the P2P network.
     ;;
    #_public
    (§ constructor #_"BlockingClientManager" [#_"SocketFactory" (§ name socketFactory)])
    (§ block
        (§ ass (§ name (.. this socketFactory)) (Preconditions/checkNotNull socketFactory))
        this
    )

    #_override
    #_public
    (§ method #_"ListenableFuture<SocketAddress>" (§ fn openConnection) [#_"SocketAddress" (§ name serverAddress), #_"StreamConnection" (§ name connection)])
    (§ block
        (§ try )
        (§ block
            (§ if (§ not (isRunning)))
            (§ block
                (§ throw (§ new #_"IllegalStateException"))
            )

            (§ return (.. (§ new #_"BlockingClient" serverAddress, connection, connectTimeoutMillis, socketFactory, clients) (getConnectFuture)))
        )
        (§ catch #_"IOException" (§ name e))
        (§ block
            (§ throw (§ new #_"RuntimeException" e)) ;; This should only happen if we are, e.g. out of system resources.
        )
    )

    ;;; Sets the number of milliseconds to wait before giving up on a connect attempt. ;;
    #_public
    (§ method #_"void" (§ fn setConnectTimeoutMillis) [#_"int" (§ name connectTimeoutMillis)])
    (§ block
        (§ ass (§ name (.. this connectTimeoutMillis)) connectTimeoutMillis)
        nil
    )

    #_override
    #_protected
    (§ method #_"void" (§ fn startUp) [])
        (§ throws #_"Exception")
    (§ block
        nil
    )

    #_override
    #_protected
    (§ method #_"void" (§ fn shutDown) [])
        (§ throws #_"Exception")
    (§ block
        (§ sync clients)
        (§ block
            (§ for (§ var #_"BlockingClient" (§ name client)) :for clients)
            (§ block
                (.. client (closeConnection))
            )
        )
        nil
    )

    #_override
    #_public
    (§ method #_"int" (§ fn getConnectedClientCount) [])
    (§ block
        (.. clients (size))
    )

    #_override
    #_public
    (§ method #_"void" (§ fn closeConnections) [#_"int" (§ name n)])
    (§ block
        (§ if (§ not (isRunning)))
        (§ block
            (§ throw (§ new #_"IllegalStateException"))
        )

        (§ sync clients)
        (§ block
            (§ for (§ var #_"Iterator<BlockingClient>" (§ name it) (.. clients (iterator))) :for (§ expr 0 < n && (.. it (hasNext))) :for (§ ass (§ name n) (- n 1)))
            (§ block
                (.. it (next) (closeConnection))
            )
        )
        nil
    )
)

#_(ns org.bitcoinj.net #_"ClientConnectionManager"
    (:import [java.net SocketAddress])
    (:import [com.google.common.util.concurrent ListenableFuture Service]))

;;;
 ; <p>A generic interface for an object which keeps track of a set of open client connections, creates new ones and
 ; ensures they are serviced properly.</p>
 ;
 ; <p>When the service is {@link com.google.common.util.concurrent.Service#stop()}ed, all connections will be closed
 ; and the appropriate connectionClosed() calls must be made.</p>
 ;;
#_public
(§ interface #_"ClientConnectionManager" (§ extends #_"Service")
    ;;;
     ; Creates a new connection to the given address, with the given connection used to handle incoming data.  Any errors
     ; that occur during connection will be returned in the given future, including errors that can occur immediately.
     ;;
    (§ method #_"ListenableFuture<SocketAddress>" (§ fn openConnection) [#_"SocketAddress" (§ name serverAddress), #_"StreamConnection" (§ name connection)])

    ;;; Gets the number of connected peers. ;;
    (§ method #_"int" (§ fn getConnectedClientCount) [])

    ;;; Closes n peer connections. ;;
    (§ method #_"void" (§ fn closeConnections) [#_"int" (§ name n)])
)

#_(ns org.bitcoinj.net #_"ConnectionHandler"
    (:import [java.io IOException]
             [java.nio ByteBuffer]
             [java.nio.channels CancelledKeyException SelectionKey SocketChannel]
             [java.util Arrays Iterator LinkedList Set]
             [java.util.concurrent.locks ReentrantLock]
             [javax.annotation.concurrent GuardedBy])
    (:import [com.google.common.base Preconditions Throwables]
             [org.slf4j Logger LoggerFactory])
   (:require [org.bitcoinj.core Message]
             [org.bitcoinj.utils Threading]))

;; TODO: The locking in all this class is horrible and not really necessary.  We should just run all network stuff on one thread.

;;;
 ; A simple NIO MessageWriteTarget which handles all the business logic of a connection (reading+writing bytes).
 ; Used only by the NioClient and NioServer classes.
 ;;
(§ class #_"ConnectionHandler" (§ implements #_"MessageWriteTarget")
    #_private
    #_static
    (§ def- #_"Logger" (§ name log) (LoggerFactory/getLogger (§ klass #_"ConnectionHandler")))

    #_private
    #_static
    (§ def- #_"int" (§ name BUFFER_SIZE_LOWER_BOUND) 4096)
    #_private
    #_static
    (§ def- #_"int" (§ name BUFFER_SIZE_UPPER_BOUND) 65536)

    #_private
    #_static
    (§ def- #_"int" (§ name OUTBOUND_BUFFER_BYTE_COUNT) (+ Message/MAX_SIZE 24)) ;; 24 byte message header

    ;; We lock when touching local flags and when writing data, but NEVER when calling any methods which leave
    ;; this class into non-Java classes.
    #_private
    (§ field- #_"ReentrantLock" (§ name lock) (Threading/lock "nioConnectionHandler"))
    #_guarded-by(§ opt "lock")
    #_private
    (§ field- #_"ByteBuffer" (§ name readBuff))
    #_guarded-by(§ opt "lock")
    #_private
    (§ field- #_"SocketChannel" (§ name channel))
    #_guarded-by(§ opt "lock")
    #_private
    (§ field- #_"SelectionKey" (§ name key))
    #_guarded-by(§ opt "lock")
    (§ field #_"StreamConnection" (§ name connection))
    #_guarded-by(§ opt "lock")
    #_private
    (§ field- #_"boolean" (§ name closeCalled) false)

    #_guarded-by(§ opt "lock")
    #_private
    (§ field- #_"long" (§ name bytesToWriteRemaining) 0)
    #_guarded-by(§ opt "lock")
    #_private
    (§ field- #_"LinkedList<ByteBuffer>" (§ name bytesToWrite) (§ new #_"LinkedList<>"))

    #_private
    (§ field- #_"Set<ConnectionHandler>" (§ name connectedHandlers))

    #_public
    (§ constructor #_"ConnectionHandler" [#_"StreamConnectionFactory" (§ name connectionFactory), #_"SelectionKey" (§ name key)])
        (§ throws #_"IOException")
    (§ block
        (§ this (.. connectionFactory (getNewConnection (.. (§ cast #_"SocketChannel" (.. key (channel))) (socket) (getInetAddress)), (.. (§ cast #_"SocketChannel" (.. key (channel))) (socket) (getPort)))), key)
        (§ if (nil? connection))
        (§ block
            (§ throw (§ new #_"IOException" "Parser factory.getNewConnection returned nil"))
        )
        this
    )

    #_private
    (§ constructor- #_"ConnectionHandler" [#_nilable #_"StreamConnection" (§ name connection), #_"SelectionKey" (§ name key)])
    (§ block
        (§ ass (§ name (.. this key)) key)
        (§ ass (§ name (.. this channel)) (Preconditions/checkNotNull (§ cast #_"SocketChannel" (.. key (channel)))))
        (§ if (nil? connection))
        (§ block
            (§ ass (§ name readBuff) nil)
            (§ return nil)
        )

        (§ ass (§ name (.. this connection)) connection)
        (§ ass (§ name readBuff) (ByteBuffer/allocateDirect (Math/min (Math/max (.. connection (getMaxMessageSize)), BUFFER_SIZE_LOWER_BOUND), BUFFER_SIZE_UPPER_BOUND)))
        (.. connection (setWriteTarget this)) ;; May callback into us (e.g. closeConnection() now).
        (§ ass (§ name connectedHandlers) nil)
        this
    )

    #_public
    (§ constructor #_"ConnectionHandler" [#_"StreamConnection" (§ name connection), #_"SelectionKey" (§ name key), #_"Set<ConnectionHandler>" (§ name connectedHandlers)])
    (§ block
        (§ this (Preconditions/checkNotNull connection), key)

        ;; closeConnection() may have already happened because we invoked the other c'tor above, which called
        ;; connection.setWriteTarget which might have re-entered already.  In this case we shouldn't add ourselves
        ;; to the connectedHandlers set.
        (.. lock (lock))
        (§ try )
        (§ block
            (§ ass (§ name (.. this connectedHandlers)) connectedHandlers)
            (§ if (§ not closeCalled))
            (§ block
                (Preconditions/checkState (.. this connectedHandlers (add this)))
            )
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
        this
    )

    #_guarded-by(§ opt "lock")
    #_private
    (§ method- #_"void" (§ fn setWriteOps) [])
    (§ block
        ;; Make sure we are registered to get updated when writing is available again.
        (.. key (interestOps (| (.. key (interestOps)) SelectionKey/OP_WRITE)))
        ;; Refresh the selector to make sure it gets the new interestOps.
        (.. key (selector) (wakeup))
        nil
    )

    ;; Tries to write any outstanding write bytes, runs in any thread (possibly unlocked).
    #_private
    (§ method- #_"void" (§ fn tryWriteBytes) [])
        (§ throws #_"IOException")
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            ;; Iterate through the outbound ByteBuff queue, pushing as much as possible into the OS' network buffer.
            (§ var #_"Iterator<ByteBuffer>" (§ name bytesIterator) (.. bytesToWrite (iterator)))
            (§ while (.. bytesIterator (hasNext)))
            (§ block
                (§ var #_"ByteBuffer" (§ name buff) (.. bytesIterator (next)))
                (§ ass (§ name bytesToWriteRemaining) (§ expr bytesToWriteRemaining - (.. channel (write buff))))
                (§ if (§ not (.. buff (hasRemaining))))
                (§ block
                    (.. bytesIterator (remove))
                )
                (§ else )
                (§ block
                    (setWriteOps)
                    (§ break )
                )
            )
            ;; If we are done writing, clear the OP_WRITE interestOps.
            (§ if (.. bytesToWrite (isEmpty)))
            (§ block
                (.. key (interestOps (& (.. key (interestOps)) (§ flip SelectionKey/OP_WRITE))))
            )
            ;; Don't bother waking up the selector here, since we're just removing an op, not adding.
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
        nil
    )

    #_override
    #_public
    (§ method #_"void" (§ fn writeBytes) [#_"byte[]" (§ name message)])
        (§ throws #_"IOException")
    (§ block
        (§ var #_"boolean" (§ name andUnlock) true)
        (.. lock (lock))
        (§ try )
        (§ block
            ;; Network buffers are not unlimited (and are often smaller than some messages we may wish to send), and
            ;; thus we have to buffer outbound messages sometimes.  To do this, we use a queue of ByteBuffers and just
            ;; append to it when we want to send a message.  We then let tryWriteBytes() either send the message or
            ;; register our SelectionKey to wakeup when we have free outbound buffer space available.
            (§ if (§ expr OUTBOUND_BUFFER_BYTE_COUNT < bytesToWriteRemaining + (.. message length)))
            (§ block
                (§ throw (§ new #_"IOException" "Outbound buffer overflowed"))
            )

            ;; Just dump the message onto the write buffer and call tryWriteBytes.
            ;; TODO: Kill the needless message duplication when the write completes right away.
            (.. bytesToWrite (offer (ByteBuffer/wrap (Arrays/copyOf message, (.. message length)))))
            (§ ass (§ name bytesToWriteRemaining) (§ expr bytesToWriteRemaining + (.. message length)))
            (setWriteOps)
        )
        (§ catch #_"IOException" (§ name e))
        (§ block
            (.. lock (unlock))
            (§ ass (§ name andUnlock) false)
            (.. log (warn "Error writing message to connection, closing connection", e))
            (closeConnection)
            (§ throw e)
        )
        (§ catch #_"CancelledKeyException" (§ name e))
        (§ block
            (.. lock (unlock))
            (§ ass (§ name andUnlock) false)
            (.. log (warn "Error writing message to connection, closing connection", e))
            (closeConnection)
            (§ throw (§ new #_"IOException" e))
        )
        (§ finally )
        (§ block
            (§ if andUnlock)
            (§ block
                (.. lock (unlock))
            )
        )
        nil
    )

    ;; May NOT be called with lock held.
    #_override
    #_public
    (§ method #_"void" (§ fn closeConnection) [])
    (§ block
        (Preconditions/checkState (§ not (.. lock (isHeldByCurrentThread))))
        (§ try )
        (§ block
            (.. channel (close))
        )
        (§ catch #_"IOException" (§ name e))
        (§ block
            (§ throw (§ new #_"RuntimeException" e))
        )
        (connectionClosed)
        nil
    )

    #_private
    (§ method- #_"void" (§ fn connectionClosed) [])
    (§ block
        (§ var #_"boolean" (§ name callClosed) false)
        (.. lock (lock))
        (§ try )
        (§ block
            (§ ass (§ name callClosed) (§ not closeCalled))
            (§ ass (§ name closeCalled) true)
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
        (§ if callClosed)
        (§ block
            (Preconditions/checkState (§ expr connectedHandlers == nil || (.. connectedHandlers (remove this))))
            (.. connection (connectionClosed))
        )
        nil
    )

    ;; Handle a SelectionKey which was selected.
    ;; Runs unlocked as the caller is single-threaded (or if not, should enforce that handleKey is only called
    ;; atomically for a given ConnectionHandler).
    #_public
    #_static
    (§ defn #_"void" (§ fn handleKey) [#_"SelectionKey" (§ name key)])
    (§ block
        (§ var #_"ConnectionHandler" (§ name handler) (§ cast #_"ConnectionHandler" (.. key (attachment))))
        (§ try )
        (§ block
            (§ if (nil? handler))
            (§ block
                (§ return nil)
            )
            (§ if (§ not (.. key (isValid))))
            (§ block
                (.. handler (closeConnection)) ;; Key has been cancelled, make sure the socket gets closed.
                (§ return nil)
            )
            (§ if (.. key (isReadable)))
            (§ block
                ;; Do a socket read and invoke the connection's receiveBytes message.
                (§ var #_"int" (§ name read) (.. handler channel (read (.. handler readBuff))))
                (§ if (§ expr read == 0))
                (§ block
                    (§ return nil) ;; Was probably waiting on a write.
                )
                (§ elseif (§ expr read == -1)) ;; Socket was closed.
                (§ block
                    (.. key (cancel))
                    (.. handler (closeConnection))
                    (§ return nil)
                )
                ;; "flip" the buffer - setting the limit to the current position and setting position to 0
                (.. handler readBuff (flip))
                ;; Use connection.receiveBytes's return value as a check that it stopped reading at the right location.
                (§ var #_"int" (§ name bytesConsumed) (.. (Preconditions/checkNotNull (.. handler connection)) (receiveBytes (.. handler readBuff))))
                (Preconditions/checkState (== (.. handler readBuff (position)) bytesConsumed))
                ;; Now drop the bytes which were read by compacting readBuff (resetting limit and keeping relative position).
                (.. handler readBuff (compact))
            )
            (§ if (.. key (isWritable)))
            (§ block
                (.. handler (tryWriteBytes))
            )
        )
        (§ catch #_"Exception" (§ name e))
        (§ block
            ;; This can happen e.g. if the channel closes while the thread is about to get killed
            ;; (ClosedByInterruptException), or if handler.connection.receiveBytes throws something.
            (§ var #_"Throwable" (§ name t) (Throwables/getRootCause e))
            (.. log (warn "Error handling SelectionKey: {} {}", (.. t (getClass) (getName)), (if (some? (.. t (getMessage))) (.. t (getMessage)) ""), e))
            (.. handler (closeConnection))
        )
        nil
    )
)

#_(ns org.bitcoinj.net #_"FilterMerger"
    (:import [java.util LinkedList])
    (:import [com.google.common.collect ImmutableList Lists])
   (:require [org.bitcoinj.core BloomFilter PeerFilterProvider]))

;;;
 ; <p>A reusable object that will calculate, given a list of {@link org.bitcoinj.core.PeerFilterProvider}s, a merged
 ; {@link org.bitcoinj.core.BloomFilter} and earliest key time for all of them.
 ; Used by the {@link org.bitcoinj.core.PeerGroup} class internally.</p>
 ;
 ; <p>Thread safety: threading here can be complicated.  Each filter provider is given a begin event, which may acquire
 ; a lock (and is guaranteed to receive an end event).  This class is mostly thread unsafe and is meant to be used from
 ; a single thread only, PeerGroup ensures this by only accessing it from the dedicated PeerGroup thread.  PeerGroup
 ; does not hold any locks whilst this object is used, relying on the single thread to prevent multiple filters being
 ; calculated in parallel, thus a filter provider can do things like make blocking calls into PeerGroup from a separate
 ; thread.  However the bloomFilterFPRate property IS thread safe, for convenience.</p>
 ;;
#_public
(§ class #_"FilterMerger"
    ;; We use a constant tweak to avoid giving up privacy when we regenerate our filter with new keys.
    #_private
    (§ field- #_"long" (§ name bloomFilterTweak) (§ cast #_"long" (* (Math/random) Long/MAX_VALUE)))

    #_private
    #_volatile
    (§ field- #_"double" (§ name vBloomFilterFPRate))
    #_private
    (§ field- #_"int" (§ name lastBloomFilterElementCount))
    #_private
    (§ field- #_"BloomFilter" (§ name lastFilter))

    #_public
    (§ constructor #_"FilterMerger" [#_"double" (§ name bloomFilterFPRate)])
    (§ block
        (§ ass (§ name (.. this vBloomFilterFPRate)) bloomFilterFPRate)
        this
    )

    #_public
    #_static
    (§ class #_"Result"
        #_public
        (§ field #_"BloomFilter" (§ name filter))
        #_public
        (§ field #_"long" (§ name earliestKeyTimeSecs))
        #_public
        (§ field #_"boolean" (§ name changed))
    )

    #_public
    (§ method #_"Result" (§ fn calculate) [#_"ImmutableList<PeerFilterProvider>" (§ name providers)])
    (§ block
        (§ var #_"LinkedList<PeerFilterProvider>" (§ name begunProviders) (Lists/newLinkedList))
        (§ try )
        (§ block
            ;; All providers must be in a consistent, unchanging state because the filter is a merged one that's
            ;; large enough for all providers elements: if a provider were to get more elements in the middle of the
            ;; calculation, we might assert or calculate the filter wrongly.  Most providers use a lock here but
            ;; snapshotting required state is also a legitimate strategy.
            (§ for (§ var #_"PeerFilterProvider" (§ name provider)) :for providers)
            (§ block
                (.. provider (beginBloomFilterCalculation))
                (.. begunProviders (add provider))
            )
            (§ var #_"Result" (§ name result) (§ new #_"Result"))
            (§ ass (§ name (.. result earliestKeyTimeSecs)) Long/MAX_VALUE)
            (§ var #_"int" (§ name elements) 0)
            (§ var #_"boolean" (§ name requiresUpdateAll) false)
            (§ for (§ var #_"PeerFilterProvider" (§ name p)) :for providers)
            (§ block
                (§ ass (§ name (.. result earliestKeyTimeSecs)) (Math/min (.. result earliestKeyTimeSecs), (.. p (getEarliestKeyCreationTime))))
                (§ ass (§ name elements) (§ expr elements + (.. p (getBloomFilterElementCount))))
            )

            (§ if (< 0 elements))
            (§ block
                ;; We stair-step our element count so that we avoid creating a filter with different parameters
                ;; as much as possible as that results in a loss of privacy.
                ;; The constant 100 here is somewhat arbitrary, but makes sense for small to medium wallets -
                ;; it will likely mean we never need to create a filter with different parameters.
                (§ ass (§ name lastBloomFilterElementCount) (if (< lastBloomFilterElementCount elements) (+ elements 100) lastBloomFilterElementCount))
                (§ var #_"BloomFilter.BloomUpdate" (§ name bloomFlags) (if requiresUpdateAll BloomFilter/BloomUpdate/UPDATE_ALL BloomFilter/BloomUpdate/UPDATE_P2PUBKEY_ONLY))
                (§ var #_"double" (§ name fpRate) vBloomFilterFPRate)
                (§ var #_"BloomFilter" (§ name filter) (§ new #_"BloomFilter" lastBloomFilterElementCount, fpRate, bloomFilterTweak, bloomFlags))
                (§ for (§ var #_"PeerFilterProvider" (§ name p)) :for providers)
                (§ block
                    (.. filter (merge (.. p (getBloomFilter lastBloomFilterElementCount, fpRate, bloomFilterTweak))))
                )

                (§ ass (§ name (.. result changed)) (§ not (.. filter (equals lastFilter))))
                (§ ass (§ name (.. result filter)) (§ ass (§ name lastFilter) filter))
            )
            ;; Now adjust the earliest key time backwards by a week to handle the case of clock drift.  This can occur
            ;; both in block header timestamps and if the users clock was out of sync when the key was first created
            ;; (to within a small amount of tolerance).
            (§ ass (§ name (.. result earliestKeyTimeSecs)) (§ expr earliestKeyTimeSecs - (* 86400 7)))
            (§ return result)
        )
        (§ finally )
        (§ block
            (§ for (§ var #_"PeerFilterProvider" (§ name provider)) :for begunProviders)
            (§ block
                (.. provider (endBloomFilterCalculation))
            )
        )
    )

    #_public
    (§ method #_"void" (§ fn setBloomFilterFPRate) [#_"double" (§ name bloomFilterFPRate)])
    (§ block
        (§ ass (§ name (.. this vBloomFilterFPRate)) bloomFilterFPRate)
        nil
    )

    #_public
    (§ method #_"double" (§ fn getBloomFilterFPRate) [])
    (§ block
        vBloomFilterFPRate
    )

    #_public
    (§ method #_"BloomFilter" (§ fn getLastFilter) [])
    (§ block
        lastFilter
    )
)

#_(ns org.bitcoinj.net #_"MessageWriteTarget"
    (:import [java.io IOException]))

;;;
 ; A target to which messages can be written/connection can be closed.
 ;;
#_public
(§ interface #_"MessageWriteTarget"
    ;;;
     ; Writes the given bytes to the remote server.
     ;;
    (§ method #_"void" (§ fn writeBytes) [#_"byte[]" (§ name message)])
        (§ throws #_"IOException")
    ;;;
     ; Closes the connection to the server, triggering the {@link StreamConnection#connectionClosed()}
     ; event on the network-handling thread where all callbacks occur.
     ;;
    (§ method #_"void" (§ fn closeConnection) [])
)

#_(ns org.bitcoinj.net #_"NioClient"
    (:import [java.io *]
             [java.net *]
             [java.nio *])
    (:import [com.google.common.base *]
             [com.google.common.util.concurrent *]
             [org.slf4j *]))

;;;
 ; Creates a simple connection to a server using a {@link StreamConnection} to process data.
 ;;
#_public
(§ class #_"NioClient" (§ implements #_"MessageWriteTarget")
    #_private
    #_static
    (§ def- #_"Logger" (§ name log) (LoggerFactory/getLogger (§ klass #_"NioClient")))

    #_private
    (§ field- #_"Handler" (§ name handler))
    #_private
    (§ field- #_"NioClientManager" (§ name manager) (§ new #_"NioClientManager"))

    (§ class #_"Handler" (§ extends #_"AbstractTimeoutHandler") (§ implements #_"StreamConnection")
        #_private
        (§ field- #_"StreamConnection" (§ name upstreamConnection))
        #_private
        (§ field- #_"MessageWriteTarget" (§ name writeTarget))
        #_private
        (§ field- #_"boolean" (§ name closeOnOpen))
        #_private
        (§ field- #_"boolean" (§ name closeCalled))

        (§ constructor #_"Handler" [#_"StreamConnection" (§ name upstreamConnection), #_"int" (§ name connectTimeoutMillis)])
        (§ block
            (§ ass (§ name (.. this upstreamConnection)) upstreamConnection)
            (setSocketTimeout connectTimeoutMillis)
            (setTimeoutEnabled true)
            this
        )

        #_override
        #_protected
        #_synchronized
        (§ method #_"void" (§ fn timeoutOccurred) [])
        (§ block
            (§ ass (§ name closeOnOpen) true)
            (connectionClosed)
            nil
        )

        #_override
        #_public
        #_synchronized
        (§ method #_"void" (§ fn connectionClosed) [])
        (§ block
            (.. manager (stopAsync))
            (§ if (§ not closeCalled))
            (§ block
                (§ ass (§ name closeCalled) true)
                (.. upstreamConnection (connectionClosed))
            )
            nil
        )

        #_override
        #_public
        #_synchronized
        (§ method #_"void" (§ fn connectionOpened) [])
        (§ block
            (§ if (§ not closeOnOpen))
            (§ block
                (.. upstreamConnection (connectionOpened))
            )
            nil
        )

        #_override
        #_public
        (§ method #_"int" (§ fn receiveBytes) [#_"ByteBuffer" (§ name buff)])
            (§ throws #_"Exception")
        (§ block
            (.. upstreamConnection (receiveBytes buff))
        )

        #_override
        #_public
        #_synchronized
        (§ method #_"void" (§ fn setWriteTarget) [#_"MessageWriteTarget" (§ name writeTarget)])
        (§ block
            (§ if closeOnOpen)
            (§ block
                (.. writeTarget (closeConnection))
            )
            (§ else )
            (§ block
                (setTimeoutEnabled false)
                (§ ass (§ name (.. this writeTarget)) writeTarget)
                (.. upstreamConnection (setWriteTarget writeTarget))
            )
            nil
        )

        #_override
        #_public
        (§ method #_"int" (§ fn getMaxMessageSize) [])
        (§ block
            (.. upstreamConnection (getMaxMessageSize))
        )
    )

    ;;;
     ; <p>Creates a new client to the given server address using the given {@link StreamConnection} to decode the data.
     ; The given connection <b>MUST</b> be unique to this object.  This does not block while waiting for the connection
     ; to open, but will call either the {@link StreamConnection#connectionOpened()} or
     ; {@link StreamConnection#connectionClosed()} callback on the created network event processing thread.</p>
     ;
     ; @param connectTimeoutMillis The connect timeout set on the connection (in milliseconds).
     ;                             0 is interpreted as no timeout.
     ;;
    #_public
    (§ constructor #_"NioClient" [#_"SocketAddress" (§ name serverAddress), #_"StreamConnection" (§ name parser), #_"int" (§ name connectTimeoutMillis)])
        (§ throws #_"IOException")
    (§ block
        (.. manager (startAsync))
        (.. manager (awaitRunning))
        (§ ass (§ name handler) (§ new #_"Handler" parser, connectTimeoutMillis))
        (Futures/addCallback (.. manager (openConnection serverAddress, handler)), (§ new #_"FutureCallback<SocketAddress>")
        (§ anon
            #_override
            #_public
            (§ method #_"void" (§ fn onSuccess) [#_"SocketAddress" (§ name result)])
            (§ block
                nil
            )

            #_override
            #_public
            (§ method #_"void" (§ fn onFailure) [#_"Throwable" (§ name t)])
            (§ block
                (.. log (error "Connect to {} failed: {}", serverAddress, (Throwables/getRootCause t)))
                nil
            )
        ))
        this
    )

    #_override
    #_public
    (§ method #_"void" (§ fn closeConnection) [])
    (§ block
        (.. handler writeTarget (closeConnection))
        nil
    )

    #_override
    #_public
    #_synchronized
    (§ method #_"void" (§ fn writeBytes) [#_"byte[]" (§ name message)])
        (§ throws #_"IOException")
    (§ block
        (.. handler writeTarget (writeBytes message))
        nil
    )
)

#_(ns org.bitcoinj.net #_"NioClientManager"
    (:import [java.io IOException]
             [java.net ConnectException SocketAddress]
             [java.nio.channels *]
             [java.nio.channels.spi SelectorProvider]
             [java.util *]
             [java.util.concurrent *])
    (:import [com.google.common.base Throwables]
             [com.google.common.util.concurrent *]
             [org.slf4j Logger LoggerFactory])
   (:require [org.bitcoinj.utils *]))

;;;
 ; A class which manages a set of client connections.  Uses Java NIO to select network events and processes them
 ; in a single network processing thread.
 ;;
#_public
(§ class #_"NioClientManager" (§ extends #_"AbstractExecutionThreadService") (§ implements #_"ClientConnectionManager")
    #_private
    #_static
    (§ def- #_"Logger" (§ name log) (LoggerFactory/getLogger (§ klass #_"NioClientManager")))

    #_private
    (§ field- #_"Selector" (§ name selector))

    (§ class #_"PendingConnect"
        (§ var #_"SocketChannel" (§ name sc))
        (§ var #_"StreamConnection" (§ name connection))
        (§ var #_"SocketAddress" (§ name address))
        (§ var #_"SettableFuture<SocketAddress>" (§ name future) (SettableFuture/create))

        (§ constructor #_"PendingConnect" [#_"SocketChannel" (§ name sc), #_"StreamConnection" (§ name connection), #_"SocketAddress" (§ name address)])
        (§ block
            (§ ass (§ name (.. this sc)) sc)
            (§ ass (§ name (.. this connection)) connection)
            (§ ass (§ name (.. this address)) address)
            this
        )
    )
    (§ field #_"Queue<PendingConnect>" (§ name newConnectionChannels) (§ new #_"LinkedBlockingQueue<>"))

    ;; Added to/removed from by the individual ConnectionHandler's, thus must by synchronized on its own.
    #_private
    (§ field- #_"Set<ConnectionHandler>" (§ name connectedHandlers) (Collections/synchronizedSet (§ new #_"HashSet<ConnectionHandler>")))

    ;; Handle a SelectionKey which was selected.
    #_private
    (§ method- #_"void" (§ fn handleKey) [#_"SelectionKey" (§ name key)])
        (§ throws #_"IOException")
    (§ block
        ;; We could have a !isValid() key here if the connection is already closed at this point,
        ;; i.e. a client connection which has finished the initial connect process.
        (§ if (§ expr (.. key (isValid)) && (.. key (isConnectable))))
        (§ block
            ;; Create a ConnectionHandler and hook everything together.
            (§ var #_"PendingConnect" (§ name data) (§ cast #_"PendingConnect" (.. key (attachment))))
            (§ var #_"StreamConnection" (§ name connection) (.. data connection))
            (§ var #_"SocketChannel" (§ name sc) (§ cast #_"SocketChannel" (.. key (channel))))
            (§ var #_"ConnectionHandler" (§ name handler) (§ new #_"ConnectionHandler" connection, key, connectedHandlers))
            (§ try )
            (§ block
                (§ if (.. sc (finishConnect)))
                (§ block
                    (.. log (info "Connected to {}", (.. sc (socket) (getRemoteSocketAddress))))
                    (.. key (interestOps (& (| (.. key (interestOps)) SelectionKey/OP_READ) (§ flip SelectionKey/OP_CONNECT))) (attach handler))
                    (.. connection (connectionOpened))
                    (.. data future (set (.. data address)))
                )
                (§ else )
                (§ block
                    (.. log (warn "Failed to connect to {}", (.. sc (socket) (getRemoteSocketAddress))))
                    (.. handler (closeConnection)) ;; Failed to connect for some reason.
                    (.. data future (setException (§ new #_"ConnectException" "Unknown reason")))
                    (§ ass (§ name (.. data future)) nil)
                )
            )
            (§ catch #_"Exception" (§ name e))
            (§ block
                ;; If e is a CancelledKeyException, there is a race to get to interestOps after finishConnect() which
                ;; may cause this.  Otherwise it may be any arbitrary kind of connection failure.
                ;; Calling sc.socket().getRemoteSocketAddress() here throws an exception, so we can only log the error itself.
                (§ var #_"Throwable" (§ name cause) (Throwables/getRootCause e))
                (.. log (warn "Failed to connect with exception: {}: {}", (.. cause (getClass) (getName)), (.. cause (getMessage)), e))
                (.. handler (closeConnection))
                (.. data future (setException cause))
                (§ ass (§ name (.. data future)) nil)
            )
        )
        (§ else ) ;; Process bytes read.
        (§ block
            (ConnectionHandler/handleKey key)
        )
        nil
    )

    ;;;
     ; Creates a new client manager which uses Java NIO for socket management.
     ; Uses a single thread to handle all select calls.
     ;;
    #_public
    (§ constructor #_"NioClientManager" [])
    (§ block
        (§ try )
        (§ block
            (§ ass (§ name selector) (.. (SelectorProvider/provider) (openSelector)))
        )
        (§ catch #_"IOException" (§ name e))
        (§ block
            (§ throw (§ new #_"RuntimeException" e)) ;; Shouldn't ever happen.
        )
        this
    )

    #_override
    #_public
    (§ method #_"void" (§ fn run) [])
    (§ block
        (§ try )
        (§ block
            (.. (Thread/currentThread) (setPriority Thread/MIN_PRIORITY))
            (§ while (isRunning))
            (§ block
                (§ var #_"PendingConnect" (§ name conn))
                (§ while (!= (§ ass (§ name conn) (.. newConnectionChannels (poll))) nil))
                (§ block
                    (§ try )
                    (§ block
                        (§ var #_"SelectionKey" (§ name key) (.. conn sc (register selector, SelectionKey/OP_CONNECT)))
                        (.. key (attach conn))
                    )
                    (§ catch #_"ClosedChannelException" (§ name _))
                    (§ block
                        (.. log (warn "SocketChannel was closed before it could be registered"))
                    )
                )

                (.. selector (select))

                (§ var #_"Iterator<SelectionKey>" (§ name keyIterator) (.. selector (selectedKeys) (iterator)))
                (§ while (.. keyIterator (hasNext)))
                (§ block
                    (§ var #_"SelectionKey" (§ name key) (.. keyIterator (next)))
                    (.. keyIterator (remove))
                    (handleKey key)
                )
            )
        )
        (§ catch #_"Exception" (§ name e))
        (§ block
            (.. log (warn "Error trying to open/read from connection: ", e))
        )
        (§ finally )
        (§ block
            ;; Go through and close everything, without letting IOExceptions get in our way.
            (§ for (§ var #_"SelectionKey" (§ name key)) :for (.. selector (keys)))
            (§ block
                (§ try )
                (§ block
                    (.. key (channel) (close))
                )
                (§ catch #_"IOException" (§ name e))
                (§ block
                    (.. log (warn "Error closing channel", e))
                )
                (.. key (cancel))
                (§ if (§ insta (.. key (attachment)) #_"ConnectionHandler"))
                (§ block
                    (ConnectionHandler/handleKey key) ;; Close connection if relevant.
                )
            )
            (§ try )
            (§ block
                (.. selector (close))
            )
            (§ catch #_"IOException" (§ name e))
            (§ block
                (.. log (warn "Error closing client manager selector", e))
            )
        )
        nil
    )

    #_override
    #_public
    (§ method #_"ListenableFuture<SocketAddress>" (§ fn openConnection) [#_"SocketAddress" (§ name serverAddress), #_"StreamConnection" (§ name connection)])
    (§ block
        (§ if (§ not (isRunning)))
        (§ block
            (§ throw (§ new #_"IllegalStateException"))
        )

        ;; Create a new connection, give it a connection as an attachment.
        (§ try )
        (§ block
            (§ var #_"SocketChannel" (§ name sc) (SocketChannel/open))
            (.. sc (configureBlocking false))
            (.. sc (connect serverAddress))
            (§ var #_"PendingConnect" (§ name data) (§ new #_"PendingConnect" sc, connection, serverAddress))
            (.. newConnectionChannels (offer data))
            (.. selector (wakeup))
            (§ return (.. data future))
        )
        (§ catch #_"Throwable" (§ name e))
        (§ block
            (§ return (Futures/immediateFailedFuture e))
        )
    )

    #_override
    #_public
    (§ method #_"void" (§ fn triggerShutdown) [])
    (§ block
        (.. selector (wakeup))
        nil
    )

    #_override
    #_public
    (§ method #_"int" (§ fn getConnectedClientCount) [])
    (§ block
        (.. connectedHandlers (size))
    )

    #_override
    #_public
    (§ method #_"void" (§ fn closeConnections) [#_"int" (§ name n)])
    (§ block
        (§ for (§ var ) :for (< 0 n) :for (§ ass (§ name n) (- n 1)))
        (§ block
            (§ var #_"ConnectionHandler" (§ name handler))
            (§ sync connectedHandlers)
            (§ block
                (§ ass (§ name handler) (.. connectedHandlers (iterator) (next)))
            )
            (§ if (some? handler))
            (§ block
                (.. handler (closeConnection)) ;; Removes handler from connectedHandlers before returning.
            )
        )
        nil
    )

    #_override
    #_protected
    (§ method #_"Executor" (§ fn executor) [])
    (§ block
        (§ return (§ new #_"Executor")
        (§ anon
            #_override
            #_public
            (§ method #_"void" (§ fn execute) [#_"Runnable" (§ name command)])
            (§ block
                (.. (§ new #_"ContextPropagatingThreadFactory" "NioClientManager") (newThread command) (start))
                nil
            )
        ))
    )
)

#_(ns org.bitcoinj.net #_"NioServer"
    (:import [java.io IOException]
             [java.net InetSocketAddress]
             [java.nio.channels *]
             [java.nio.channels.spi SelectorProvider]
             [java.util Iterator])
    (:import [com.google.common.annotations VisibleForTesting]
             [com.google.common.base Throwables]
             [com.google.common.util.concurrent AbstractExecutionThreadService]
             [org.slf4j Logger LoggerFactory]))

;;;
 ; Creates a simple server listener which listens for incoming client connections and uses a {@link StreamConnection}
 ; to process data.
 ;;
#_public
(§ class #_"NioServer" (§ extends #_"AbstractExecutionThreadService")
    #_private
    #_static
    (§ def- #_"Logger" (§ name log) (LoggerFactory/getLogger (§ klass #_"NioServer")))

    #_private
    (§ field- #_"StreamConnectionFactory" (§ name connectionFactory))

    #_private
    (§ field- #_"ServerSocketChannel" (§ name sc))
    #_testing
    (§ field #_"Selector" (§ name selector))

    ;; Handle a SelectionKey which was selected.
    #_private
    (§ method- #_"void" (§ fn handleKey) [#_"Selector" (§ name selector), #_"SelectionKey" (§ name key)])
        (§ throws #_"IOException")
    (§ block
        (§ if (§ expr (.. key (isValid)) && (.. key (isAcceptable))))
        (§ block
            ;; Accept a new connection, give it a stream connection as an attachment.
            (§ var #_"SocketChannel" (§ name newChannel) (.. sc (accept)))
            (.. newChannel (configureBlocking false))
            (§ var #_"SelectionKey" (§ name newKey) (.. newChannel (register selector, SelectionKey/OP_READ)))
            (§ try )
            (§ block
                (§ var #_"ConnectionHandler" (§ name handler) (§ new #_"ConnectionHandler" connectionFactory, newKey))
                (.. newKey (attach handler))
                (.. handler connection (connectionOpened))
            )
            (§ catch #_"IOException" (§ name e))
            (§ block
                ;; This can happen if ConnectionHandler's call to get a new handler returned null.
                (.. log (error "Error handling new connection", (§ expr (.. (Throwables/getRootCause e) (getMessage)))))
                (.. newKey (channel) (close))
            )
        )
        (§ else ) ;; Got a closing channel or a channel to a client connection.
        (§ block
            (ConnectionHandler/handleKey key)
        )
        nil
    )

    ;;;
     ; Creates a new server which is capable of listening for incoming connections and processing client provided data
     ; using {@link StreamConnection}s created by the given {@link StreamConnectionFactory}.
     ;
     ; @throws IOException if there is an issue opening the server socket or binding fails for some reason.
     ;;
    #_public
    (§ constructor #_"NioServer" [#_"StreamConnectionFactory" (§ name connectionFactory), #_"InetSocketAddress" (§ name bindAddress)])
        (§ throws #_"IOException")
    (§ block
        (§ ass (§ name (.. this connectionFactory)) connectionFactory)

        (§ ass (§ name sc) (ServerSocketChannel/open))
        (.. sc (configureBlocking false))
        (.. sc (socket) (bind bindAddress))
        (§ ass (§ name selector) (.. (SelectorProvider/provider) (openSelector)))
        (.. sc (register selector, SelectionKey/OP_ACCEPT))
        this
    )

    #_override
    #_protected
    (§ method #_"void" (§ fn run) [])
        (§ throws #_"Exception")
    (§ block
        (§ try )
        (§ block
            (§ while (isRunning))
            (§ block
                (.. selector (select))

                (§ var #_"Iterator<SelectionKey>" (§ name keyIterator) (.. selector (selectedKeys) (iterator)))
                (§ while (.. keyIterator (hasNext)))
                (§ block
                    (§ var #_"SelectionKey" (§ name key) (.. keyIterator (next)))
                    (.. keyIterator (remove))

                    (handleKey selector, key)
                )
            )
        )
        (§ catch #_"Exception" (§ name e))
        (§ block
            (.. log (error "Error trying to open/read from connection: {}", e))
        )
        (§ finally )
        (§ block
            ;; Go through and close everything, without letting IOExceptions get in our way.
            (§ for (§ var #_"SelectionKey" (§ name key)) :for (.. selector (keys)))
            (§ block
                (§ try )
                (§ block
                    (.. key (channel) (close))
                )
                (§ catch #_"IOException" (§ name e))
                (§ block
                    (.. log (error "Error closing channel", e))
                )
                (§ try )
                (§ block
                    (.. key (cancel))
                    (handleKey selector, key)
                )
                (§ catch #_"IOException" (§ name e))
                (§ block
                    (.. log (error "Error closing selection key", e))
                )
            )
            (§ try )
            (§ block
                (.. selector (close))
            )
            (§ catch #_"IOException" (§ name e))
            (§ block
                (.. log (error "Error closing server selector", e))
            )
            (§ try )
            (§ block
                (.. sc (close))
            )
            (§ catch #_"IOException" (§ name e))
            (§ block
                (.. log (error "Error closing server channel", e))
            )
        )
        nil
    )

    ;;;
     ; Invoked by the Execution service when it's time to stop.
     ; Calling this method directly will NOT stop the service, call
     ; {@link com.google.common.util.concurrent.AbstractExecutionThreadService#stop()} instead.
     ;;
    #_override
    #_public
    (§ method #_"void" (§ fn triggerShutdown) [])
    (§ block
        ;; Wake up the selector and let the selection thread break its loop as the ExecutionService !isRunning().
        (.. selector (wakeup))
        nil
    )
)

#_(ns org.bitcoinj.net #_"ProtobufConnection"
    (:import [java.io IOException]
             [java.nio ByteBuffer ByteOrder]
             [java.util.concurrent.atomic AtomicReference]
             [java.util.concurrent.locks ReentrantLock]
             [javax.annotation.concurrent GuardedBy])
    (:import [com.google.common.annotations VisibleForTesting]
             [com.google.common.base Preconditions]
             [com.google.protobuf ByteString MessageLite]
             [org.slf4j Logger LoggerFactory])
   (:require [org.bitcoinj.core Utils]
             [org.bitcoinj.utils Threading]))

;;;
 ; <p>A handler which is used in {@link NioServer} and {@link NioClient} to split up incoming data streams
 ; into protobufs and provide an interface for writing protobufs to the connections.</p>
 ;
 ; <p>Messages are encoded with a 4-byte signed integer (big endian) prefix to indicate their length followed
 ; by the serialized protobuf.</p>
 ;;
#_public
(§ class #_"ProtobufConnection<MessageType extends MessageLite>" (§ extends #_"AbstractTimeoutHandler") (§ implements #_"StreamConnection")
    #_private
    #_static
    (§ def- #_"Logger" (§ name log) (LoggerFactory/getLogger (§ klass #_"ProtobufConnection")))

    ;;;
     ; An interface which can be implemented to handle callbacks as new messages are generated and socket events occur.
     ; @param <MessageType> The protobuf type which is used on this socket.
     ;                      This <b>MUST</b> match the MessageType used in the parent {@link ProtobufConnection}.
     ;;
    #_public
    (§ interface #_"Listener<MessageType extends MessageLite>"
        ;;; Called when a new protobuf is received from the remote side. ;;
        (§ method #_"void" (§ fn messageReceived) [#_"ProtobufConnection<MessageType>" (§ name handler), #_"MessageType" (§ name msg)])
        ;;; Called when the connection is opened and available for writing data to. ;;
        (§ method #_"void" (§ fn connectionOpen) [#_"ProtobufConnection<MessageType>" (§ name handler)])
        ;;; Called when the connection is closed and no more data should be provided. ;;
        (§ method #_"void" (§ fn connectionClosed) [#_"ProtobufConnection<MessageType>" (§ name handler)])
    )

    ;; The callback listener.
    #_private
    (§ field- #_"Listener<MessageType>" (§ name handler))
    ;; The prototype which is used to deserialize messages.
    #_private
    (§ field- #_"MessageLite" (§ name prototype))

    ;; The maximum message size (NOT INCLUDING LENGTH PREFIX).
    (§ field #_"int" (§ name maxMessageSize))

    ;; A temporary buffer used when the message size is larger than the buffer being used by the network code.
    ;; Because the networking code uses a constant size buffer and we want to allow for very large message sizes, we use
    ;; a smaller network buffer per client and only allocate more memory when we need it to deserialize large messages.
    ;; Though this is not in of itself a DoS protection, it allows for handling more legitimate clients per server and
    ;; attacking clients can be made to timeout/get blocked if they are sending crap to fill buffers.
    #_guarded-by(§ opt "lock")
    #_private
    (§ field- #_"int" (§ name messageBytesOffset) 0)
    #_guarded-by(§ opt "lock")
    #_private
    (§ field- #_"byte[]" (§ name messageBytes))
    #_private
    (§ field- #_"ReentrantLock" (§ name lock) (Threading/lock "ProtobufConnection"))

    #_testing
    (§ field #_"AtomicReference<MessageWriteTarget>" (§ name writeTarget) (§ new #_"AtomicReference<>"))

    ;;;
     ; Creates a new protobuf handler.
     ;
     ; @param handler The callback listener.
     ; @param prototype The default instance of the message type used in both directions of this channel.
     ;                  This should be the return value from {@link MessageType#getDefaultInstanceForType()}.
     ; @param maxMessageSize The maximum message size (not including the 4-byte length prefix).
     ;                       Note that this has an upper bound of {@link Integer#MAX_VALUE} - 4.
     ; @param timeoutMillis The timeout between messages before the connection is automatically closed.
     ;                      Only enabled after the connection is established.
     ;;
    #_public
    (§ constructor #_"ProtobufConnection" [#_"Listener<MessageType>" (§ name handler), #_"MessageType" (§ name prototype), #_"int" (§ name maxMessageSize), #_"int" (§ name timeoutMillis)])
    (§ block
        (§ ass (§ name (.. this handler)) handler)
        (§ ass (§ name (.. this prototype)) prototype)
        (§ ass (§ name (.. this maxMessageSize)) (Math/min maxMessageSize, (§ expr Integer/MAX_VALUE - 4)))
        (setTimeoutEnabled false)
        (setSocketTimeout timeoutMillis)
        this
    )

    #_override
    #_public
    (§ method #_"void" (§ fn setWriteTarget) [#_"MessageWriteTarget" (§ name writeTarget)])
    (§ block
        ;; Only allow it to be set once.
        (Preconditions/checkState (== (.. this writeTarget (getAndSet (Preconditions/checkNotNull writeTarget))) nil))
        nil
    )

    #_override
    #_public
    (§ method #_"int" (§ fn getMaxMessageSize) [])
    (§ block
        maxMessageSize
    )

    ;;;
     ; Closes this connection, eventually triggering a {@link ProtobufConnection.Listener#connectionClosed()} event.
     ;;
    #_public
    (§ method #_"void" (§ fn closeConnection) [])
    (§ block
        (.. this writeTarget (get) (closeConnection))
        nil
    )

    #_override
    #_protected
    (§ method #_"void" (§ fn timeoutOccurred) [])
    (§ block
        (.. log (warn (§ expr "Timeout occurred for " + handler)))
        (closeConnection)
        nil
    )

    ;; Deserializes and provides a listener event (buff must not have the length prefix in it).
    ;; Does set the buffers's position to its limit.
    #_suppress(§ opt "unchecked")
    ;; The warning 'unchecked cast' being suppressed here comes from the build() formally returning
    ;; a MessageLite-derived class that cannot be statically guaranteed to be the MessageType.
    #_private
    (§ method- #_"void" (§ fn deserializeMessage) [#_"ByteBuffer" (§ name buff)])
        (§ throws #_"Exception")
    (§ block
        (§ var #_"MessageType" (§ name msg) (§ cast #_"MessageType" (.. prototype (newBuilderForType) (mergeFrom (ByteString/copyFrom buff)) (build))))
        (resetTimeout)
        (.. handler (messageReceived this, msg))
        nil
    )

    #_override
    #_public
    (§ method #_"int" (§ fn receiveBytes) [#_"ByteBuffer" (§ name buff)])
        (§ throws #_"Exception")
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ if (some? messageBytes))
            (§ block
                ;; Just keep filling up the currently being worked on message.
                (§ var #_"int" (§ name bytesToGet) (Math/min (§ expr (.. messageBytes length) - messageBytesOffset), (.. buff (remaining))))
                (.. buff (get messageBytes, messageBytesOffset, bytesToGet))
                (§ ass (§ name messageBytesOffset) (+ messageBytesOffset bytesToGet))
                (§ if (§ expr messageBytesOffset == (.. messageBytes length)))
                (§ block
                    ;; Filled up our buffer, decode the message.
                    (deserializeMessage (ByteBuffer/wrap messageBytes))
                    (§ ass (§ name messageBytes) nil)
                    (§ if (.. buff (hasRemaining)))
                    (§ block
                        (§ return (§ expr bytesToGet + (receiveBytes buff)))
                    )
                )
                (§ return bytesToGet)
            )

            ;; If we cant read the length prefix yet, give up.
            (§ if (< (.. buff (remaining)) 4))
            (§ block
                (§ return 0)
            )

            ;; Read one integer in big endian.
            (.. buff (order ByteOrder/BIG_ENDIAN))
            (§ var #_"int" (§ name len) (.. buff (getInt)))

            ;; If length is larger than the maximum message size (or is negative/overflows) throw an exception and close
            ;; the connection.
            (§ if (§ expr maxMessageSize < len || len + 4 < 4))
            (§ block
                (§ throw (§ new #_"IllegalStateException" "Message too large or length underflowed"))
            )

            ;; If the buffer's capacity is less than the next messages length + 4 (length prefix), we must use messageBytes
            ;; as a temporary buffer to store the message.
            (§ if (§ expr (.. buff (capacity)) < len + 4))
            (§ block
                (§ ass (§ name messageBytes) (§ new #_"byte[]" (§ count len)))
                ;; Now copy all remaining bytes into the new buffer, set messageBytesOffset and tell the caller how many
                ;; bytes we consumed.
                (§ var #_"int" (§ name bytesToRead) (.. buff (remaining)))
                (.. buff (get messageBytes, 0, bytesToRead))
                (§ ass (§ name messageBytesOffset) bytesToRead)
                (§ return (+ bytesToRead 4))
            )

            ;; Wait until the whole message is available in the buffer.
            (§ if (< (.. buff (remaining)) len))
            (§ block
                ;; Make sure the buffer's position is right at the end.
                (.. buff (position (- (.. buff (position)) 4)))
                (§ return 0)
            )

            ;; Temporarily limit the buffer to the size of the message, so that the protobuf decode doesn't get messed up.
            (§ var #_"int" (§ name limit) (.. buff (limit)))
            (.. buff (limit (+ (.. buff (position)) len)))
            (deserializeMessage buff)
            (Preconditions/checkState (== (.. buff (remaining)) 0))
            ;; Reset the limit in case we have to recurse.
            (.. buff (limit limit))

            ;; If there are still bytes remaining, see if we can pull out another message since we won't get called again.
            (§ if (.. buff (hasRemaining)))
            (§ block
                (§ return (§ expr len + 4 + (receiveBytes buff)))
            )
            (§ else )
            (§ block
                (§ return (+ len 4))
            )
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    #_override
    #_public
    (§ method #_"void" (§ fn connectionClosed) [])
    (§ block
        (.. handler (connectionClosed this))
        nil
    )

    #_override
    #_public
    (§ method #_"void" (§ fn connectionOpened) [])
    (§ block
        (setTimeoutEnabled true)
        (.. handler (connectionOpen this))
        nil
    )

    ;;;
     ; <p>Writes the given message to the other side of the connection, prefixing it with the proper 4-byte prefix.</p>
     ;
     ; <p>Provides a write-order guarantee.</p>
     ;
     ; @throws IllegalStateException if the encoded message is larger than the maximum message size.
     ;;
    #_public
    (§ method #_"void" (§ fn write) [#_"MessageType" (§ name msg)])
        (§ throws #_"IllegalStateException")
    (§ block
        (§ var #_"byte[]" (§ name messageBytes) (.. msg (toByteArray)))
        (Preconditions/checkState (<= (.. messageBytes length) maxMessageSize))

        (§ var #_"byte[]" (§ name messageLength) (§ new #_"byte[]" (§ count 4)))
        (Utils/uint32ToByteArrayBE (.. messageBytes length), messageLength, 0)
        (§ try )
        (§ block
            (§ var #_"MessageWriteTarget" (§ name target) (.. writeTarget (get)))
            (.. target (writeBytes messageLength))
            (.. target (writeBytes messageBytes))
        )
        (§ catch #_"IOException" (§ name e))
        (§ block
            (closeConnection)
        )
        nil
    )
)

#_(ns org.bitcoinj.net #_"StreamConnection"
    (:import [java.nio ByteBuffer]))

;;;
 ; A generic handler which is used in {@link NioServer}, {@link NioClient} and {@link BlockingClient} to handle incoming
 ; data streams.
 ;;
#_public
(§ interface #_"StreamConnection"
    ;;; Called when the connection socket is closed. ;;
    (§ method #_"void" (§ fn connectionClosed) [])

    ;;; Called when the connection socket is first opened. ;;
    (§ method #_"void" (§ fn connectionOpened) [])

    ;;;
     ; <p>Called when new bytes are available from the remote end.  This should only ever be called by the single
     ; writeTarget associated with any given StreamConnection, multiple callers will likely confuse implementations.</p>
     ;
     ; Implementers/callers must follow the following conventions exactly:
     ; <ul>
     ; <li>buff will start with its limit set to the position we can read to and its position set to the location we
     ;     will start reading at (always 0).</li>
     ; <li>May read more than one message (recursively) if there are enough bytes available.</li>
     ; <li>Uses some internal buffering to store message which are larger (incl. their length prefix) than buff's
     ;     capacity(), i.e. it is up to this method to ensure we dont run out of buffer space to decode the next message.</li>
     ; <li>buff will end with its limit the same as it was previously, and its position set to the position up to which
     ;     bytes have been read (the same as its return value).</li>
     ; <li>buff must be at least the size of a Bitcoin header (incl. magic bytes).</li>
     ; </ul>
     ;
     ; @return the amount of bytes consumed which should not be provided again.
     ;;
    (§ method #_"int" (§ fn receiveBytes) [#_"ByteBuffer" (§ name buff)])
        (§ throws #_"Exception")

    ;;;
     ; Called when this connection is attached to an upstream write target (i.e. a low-level connection handler).
     ; This writeTarget should be stored and used to close the connection or write data to the socket.
     ;;
    (§ method #_"void" (§ fn setWriteTarget) [#_"MessageWriteTarget" (§ name writeTarget)])

    ;;;
     ; Returns the maximum message size of a message on the socket. This is used in calculating size of buffers
     ; to allocate.
     ;;
    (§ method #_"int" (§ fn getMaxMessageSize) [])
)

#_(ns org.bitcoinj.net #_"StreamConnectionFactory"
    (:import [java.net InetAddress]))

;;;
 ; A factory which generates new {@link StreamConnection}s when a new connection is opened.
 ;;
#_public
(§ interface #_"StreamConnectionFactory"
    ;;;
     ; Returns a new handler or null to have the connection close.
     ; @param inetAddress The client's (IP) address.
     ; @param port The remote port on the client side.
     ;;
    #_nilable
    (§ method #_"StreamConnection" (§ fn getNewConnection) [#_"InetAddress" (§ name inetAddress), #_"int" (§ name port)])
)

#_(ns org.bitcoinj.net.discovery #_"DnsDiscovery"
    (:import [java.net *]
             [java.util *]
             [java.util.concurrent *])
   (:require [org.bitcoinj.core *]
             [org.bitcoinj.utils *]))

;;;
 ; <p>Supports peer discovery through DNS.</p>
 ;
 ; <p>Failure to resolve individual host names will not cause an Exception to be thrown.
 ; However, if all hosts passed fail to resolve a PeerDiscoveryException will be thrown during getPeers().</p>
 ;
 ; <p>DNS seeds do not attempt to enumerate every peer on the network.
 ; {@link DnsDiscovery#getPeers(long, java.util.concurrent.TimeUnit)} will return up to 30 random peers
 ; from the set of those returned within the timeout period.  If you want more peers to connect to,
 ; you need to discover them via other means (like addr broadcasts).</p>
 ;;
#_public
(§ class #_"DnsDiscovery" (§ extends #_"MultiplexingDiscovery")
    ;;;
     ; Supports finding peers through DNS A records.  Community run DNS entry points will be used.
     ;
     ; @param netParams Network parameters to be used for port information.
     ;;
    #_public
    (§ constructor #_"DnsDiscovery" [#_"NetworkParameters" (§ name netParams)])
    (§ block
        (§ this (.. netParams (getDnsSeeds)), netParams)
        this
    )

    ;;;
     ; Supports finding peers through DNS A records.
     ;
     ; @param dnsSeeds Host names to be examined for seed addresses.
     ; @param params Network parameters to be used for port information.
     ;;
    #_public
    (§ constructor #_"DnsDiscovery" [#_"String[]" (§ name dnsSeeds), #_"NetworkParameters" (§ name params)])
    (§ block
        (§ super params, (buildDiscoveries params, dnsSeeds))
        this
    )

    #_private
    #_static
    (§ defn- #_"List<PeerDiscovery>" (§ fn buildDiscoveries) [#_"NetworkParameters" (§ name params), #_"String[]" (§ name seeds)])
    (§ block
        (§ var #_"List<PeerDiscovery>" (§ name discoveries) (§ new #_"ArrayList<>"))
        (§ if (some? seeds))
        (§ block
            (§ for (§ var #_"String" (§ name seed)) :for seeds)
            (§ block
                (.. discoveries (add (§ new #_"DnsSeedDiscovery" params, seed)))
            )
        )
        discoveries
    )

    #_override
    #_protected
    (§ method #_"ExecutorService" (§ fn createExecutor) [])
    (§ block
        ;; Attempted workaround for reported bugs on Linux in which gethostbyname does not appear to be properly
        ;; thread safe and can cause segfaults on some libc versions.
        (§ if (.. (System/getProperty "os.name") (toLowerCase) (contains "linux")))
        (§ block
            (§ return (Executors/newSingleThreadExecutor (§ new #_"ContextPropagatingThreadFactory" "DNS seed lookups")))
        )
        (§ else )
        (§ block
            (§ return (Executors/newFixedThreadPool (.. seeds (size)), (§ new #_"DaemonThreadFactory" "DNS seed lookups")))
        )
    )

    ;;; Implements discovery from a single DNS host. ;;
    #_public
    #_static
    (§ class #_"DnsSeedDiscovery" (§ implements #_"PeerDiscovery")
        #_private
        (§ field- #_"String" (§ name hostname))
        #_private
        (§ field- #_"NetworkParameters" (§ name params))

        #_public
        (§ constructor #_"DnsSeedDiscovery" [#_"NetworkParameters" (§ name params), #_"String" (§ name hostname)])
        (§ block
            (§ ass (§ name (.. this hostname)) hostname)
            (§ ass (§ name (.. this params)) params)
            this
        )

        #_override
        #_public
        (§ method #_"InetSocketAddress[]" (§ fn getPeers) [#_"long" (§ name services), #_"long" (§ name timeoutValue), #_"TimeUnit" (§ name timeoutUnit)])
            (§ throws #_"PeerDiscoveryException")
        (§ block
            (§ if (§ expr services != 0))
            (§ block
                (§ throw (§ new #_"PeerDiscoveryException" (§ expr "DNS seeds cannot filter by services: " + services)))
            )

            (§ try )
            (§ block
                (§ var #_"InetAddress[]" (§ name response) (InetAddress/getAllByName hostname))
                (§ var #_"InetSocketAddress[]" (§ name result) (§ new #_"InetSocketAddress[]" (§ count (.. response length))))
                (§ for (§ var #_"int" (§ name i) 0) :for (§ expr i < (.. response length)) :for (§ ass (§ name i) (+ i 1)))
                (§ block
                    (§ ass (§ name (§ ai result i)) (§ new #_"InetSocketAddress" (§ ai response i), (.. params (getPort))))
                )
                (§ return result)
            )
            (§ catch #_"UnknownHostException" (§ name e))
            (§ block
                (§ throw (§ new #_"PeerDiscoveryException" e))
            )
        )

        #_override
        #_public
        (§ method #_"void" (§ fn shutdown) [])
        (§ block
            nil
        )

        #_override
        #_public
        (§ method #_"String" (§ fn toString) [])
        (§ block
            hostname
        )
    )
)

#_(ns org.bitcoinj.net.discovery #_"MultiplexingDiscovery"
    (:import [java.net InetSocketAddress]
             [java.util ArrayList Collections List]
             [java.util.concurrent *])
    (:import [com.google.common.base Preconditions]
             [com.google.common.collect Lists]
             [org.slf4j Logger LoggerFactory])
   (:require [org.bitcoinj.core NetworkParameters VersionMessage]
             [org.bitcoinj.net.discovery.DnsDiscovery DnsSeedDiscovery]
             [org.bitcoinj.utils *]))

;;;
 ; MultiplexingDiscovery queries multiple PeerDiscovery objects, shuffles their responses and then returns the results,
 ; thus selecting randomly between them and reducing the influence of any particular seed.  Any that don't respond
 ; within the timeout are ignored.  Backends are queried in parallel.  Backends may block.
 ;;
#_public
(§ class #_"MultiplexingDiscovery" (§ implements #_"PeerDiscovery")
    #_private
    #_static
    (§ def- #_"Logger" (§ name log) (LoggerFactory/getLogger (§ klass #_"MultiplexingDiscovery")))

    #_protected
    (§ field #_"List<PeerDiscovery>" (§ name seeds))
    #_protected
    (§ field #_"NetworkParameters" (§ name netParams))
    #_private
    #_volatile
    (§ field- #_"ExecutorService" (§ name vThreadPool))

    ;;;
     ; Builds a suitable set of peer discoveries.  Will query them in parallel before producing a merged response.
     ; If specific services are required, DNS is not used as the protocol can't handle it.
     ; @param params Network to use.
     ; @param services Required services as a bitmask, e.g. {@link VersionMessage#NODE_NETWORK}.
     ;;
    #_public
    #_static
    (§ defn #_"MultiplexingDiscovery" (§ fn forServices) [#_"NetworkParameters" (§ name params), #_"long" (§ name services)])
    (§ block
        (§ var #_"List<PeerDiscovery>" (§ name discoveries) (Lists/newArrayList))
        ;; Also use DNS seeds if there is no specific service requirement.
        (§ if (§ expr services == 0))
        (§ block
            (§ var #_"String[]" (§ name dnsSeeds) (.. params (getDnsSeeds)))
            (§ if (some? dnsSeeds))
            (§ block
                (§ for (§ var #_"String" (§ name dnsSeed)) :for dnsSeeds)
                (§ block
                    (.. discoveries (add (§ new #_"DnsSeedDiscovery" params, dnsSeed)))
                )
            )
        )
        (§ new #_"MultiplexingDiscovery" params, discoveries)
    )

    ;;;
     ; Will query the given seeds in parallel before producing a merged response.
     ;;
    #_public
    (§ constructor #_"MultiplexingDiscovery" [#_"NetworkParameters" (§ name params), #_"List<PeerDiscovery>" (§ name seeds)])
    (§ block
        (Preconditions/checkArgument (§ not (.. seeds (isEmpty))))

        (§ ass (§ name (.. this netParams)) params)
        (§ ass (§ name (.. this seeds)) seeds)
        this
    )

    #_override
    #_public
    (§ method #_"InetSocketAddress[]" (§ fn getPeers) [#_"long" (§ name services), #_"long" (§ name timeoutValue), #_"TimeUnit" (§ name timeoutUnit)])
        (§ throws #_"PeerDiscoveryException")
    (§ block
        (§ ass (§ name vThreadPool) (createExecutor))
        (§ try )
        (§ block
            (§ var #_"List<Callable<InetSocketAddress[]>>" (§ name tasks) (Lists/newArrayList))
            (§ for (§ var PeerDiscovery seed) :for seeds)
            (§ block
                (.. tasks (add (§ new #_"Callable<InetSocketAddress[]>"
                (§ anon
                    #_override
                    #_public
                    (§ method #_"InetSocketAddress[]" (§ fn call) [])
                        (§ throws #_"Exception")
                    (§ block
                        (.. seed (getPeers services, timeoutValue, (§ expr  timeoutUnit)))
                    )
                ))))
            )
            (§ var #_"List<Future<InetSocketAddress[]>>" (§ name futures) (.. vThreadPool (invokeAll tasks, timeoutValue, timeoutUnit)))
            (§ var #_"ArrayList<InetSocketAddress>" (§ name addrs) (Lists/newArrayList))
            (§ for (§ var #_"int" (§ name i) 0) :for (§ expr i < (.. futures (size))) :for (§ ass (§ name i) (+ i 1)))
            (§ block
                (§ var #_"Future<InetSocketAddress[]>" (§ name future) (.. futures (get i)))
                (§ if (.. future (isCancelled)))
                (§ block
                    (.. log (warn "Seed {}: timed out", (.. seeds (get i))))
                    (§ continue ) ;; Timed out.
                )
                (§ var #_"InetSocketAddress[]" (§ name inetAddresses))
                (§ try )
                (§ block
                    (§ ass (§ name inetAddresses) (.. future (get)))
                )
                (§ catch #_"ExecutionException" (§ name e))
                (§ block
                    (.. log (warn "Seed {}: failed to look up: {}", (.. seeds (get i)), (.. e (getMessage))))
                    (§ continue )
                )
                (Collections/addAll addrs, inetAddresses)
            )
            (§ if (== (.. addrs (size)) 0))
            (§ block
                (§ throw (§ new #_"PeerDiscoveryException" (§ expr "No peer discovery returned any results in " + (.. timeoutUnit (toMillis timeoutValue)) + "ms. Check internet connection?")))
            )

            (Collections/shuffle addrs)
            (.. vThreadPool (shutdownNow))
            (§ return (.. addrs (toArray (§ new #_"InetSocketAddress[]" (§ count (.. addrs (size)))))))
        )
        (§ catch #_"InterruptedException" (§ name e))
        (§ block
            (§ throw (§ new #_"PeerDiscoveryException" e))
        )
        (§ finally )
        (§ block
            (.. vThreadPool (shutdown))
        )
    )

    #_protected
    (§ method #_"ExecutorService" (§ fn createExecutor) [])
    (§ block
        (Executors/newFixedThreadPool (.. seeds (size)), (§ new #_"ContextPropagatingThreadFactory" "Multiplexing discovery"))
    )

    #_override
    #_public
    (§ method #_"void" (§ fn shutdown) [])
    (§ block
        (§ var #_"ExecutorService" (§ name tp) vThreadPool)
        (§ if (some? tp))
        (§ block
            (.. tp (shutdown))
        )
        nil
    )
)

#_(ns org.bitcoinj.net.discovery #_"PeerDiscovery"
    (:import [java.net InetSocketAddress]
             [java.util.concurrent TimeUnit]))

;;;
 ; A PeerDiscovery object is responsible for finding addresses of other nodes in the Bitcoin P2P network.
 ; Note that the addresses returned may or may not be accepting connections.
 ;;
#_public
(§ interface #_"PeerDiscovery"
    ;; TODO: Flesh out this interface a lot more.

    ;;;
     ; Returns an array of addresses.  This method may block.
     ; @param services Required services as a bitmask, e.g. {@link VersionMessage#NODE_NETWORK}.
     ;;
    (§ method #_"InetSocketAddress[]" (§ fn getPeers) [#_"long" (§ name services), #_"long" (§ name timeoutValue), #_"TimeUnit" (§ name timeoutUnit)])
        (§ throws #_"PeerDiscoveryException")

    ;;; Stops any discovery in progress when we want to shut down quickly. ;;
    (§ method #_"void" (§ fn shutdown) [])
)

#_(ns org.bitcoinj.net.discovery #_"PeerDiscoveryException")

#_public
(§ class #_"PeerDiscoveryException" (§ extends #_"Exception")
    #_public
    (§ constructor #_"PeerDiscoveryException" [])
    (§ block
        (§ super)
        this
    )

    #_public
    (§ constructor #_"PeerDiscoveryException" [#_"String" (§ name message)])
    (§ block
        (§ super message)
        this
    )

    #_public
    (§ constructor #_"PeerDiscoveryException" [#_"Throwable" (§ name arg0)])
    (§ block
        (§ super arg0)
        this
    )

    #_public
    (§ constructor #_"PeerDiscoveryException" [#_"String" (§ name message), #_"Throwable" (§ name arg0)])
    (§ block
        (§ super message, arg0)
        this
    )
)

#_(ns org.bitcoinj.net.discovery #_"SeedPeers"
    (:import [java.net InetAddress InetSocketAddress UnknownHostException]
             [java.util.concurrent TimeUnit])
   (:require [org.bitcoinj.core NetworkParameters]))

;;;
 ; SeedPeers stores a pre-determined list of Bitcoin node addresses.  These nodes are selected based on
 ; being active on the network for a long period of time.  The intention is to be a last resort way of finding
 ; a connection to the network, in case IRC and DNS fail.  The list comes from the Bitcoin C++ source code.
 ;;
#_public
(§ class #_"SeedPeers" (§ implements #_"PeerDiscovery")
    #_private
    (§ field- #_"NetworkParameters" (§ name params))
    #_private
    (§ field- #_"int[]" (§ name seedAddrs))
    #_private
    (§ field- #_"int" (§ name pnseedIndex))

    ;;;
     ; Supports finding peers by IP addresses.
     ;
     ; @param params Network parameters to be used for port information.
     ;;
    #_public
    (§ constructor #_"SeedPeers" [#_"NetworkParameters" (§ name params)])
    (§ block
        (§ this (.. params (getAddrSeeds)), params)
        this
    )

    ;;;
     ; Supports finding peers by IP addresses.
     ;
     ; @param seedAddrs IP addresses for seed addresses.
     ; @param params Network parameters to be used for port information.
     ;;
    #_public
    (§ constructor #_"SeedPeers" [#_"int[]" (§ name seedAddrs), #_"NetworkParameters" (§ name params)])
    (§ block
        (§ ass (§ name (.. this seedAddrs)) seedAddrs)
        (§ ass (§ name (.. this params)) params)
        this
    )

    ;;;
     ; Acts as an iterator, returning the address of each node in the list sequentially.
     ; Once all the list has been iterated, null will be returned for each subsequent query.
     ;
     ; @return InetSocketAddress - the address/port of the next node.
     ; @throws PeerDiscoveryException
     ;;
    #_nilable
    #_public
    (§ method #_"InetSocketAddress" (§ fn getPeer) [])
        (§ throws #_"PeerDiscoveryException")
    (§ block
        (§ try )
        (§ block
            (§ return (nextPeer))
        )
        (§ catch #_"UnknownHostException" (§ name e))
        (§ block
            (§ throw (§ new #_"PeerDiscoveryException" e))
        )
    )

    #_nilable
    #_private
    (§ method- #_"InetSocketAddress" (§ fn nextPeer) [])
        (§ throws #_"UnknownHostException", #_"PeerDiscoveryException")
    (§ block
        (§ if (§ expr seedAddrs == nil || (.. seedAddrs length) == 0))
        (§ block
            (§ throw (§ new #_"PeerDiscoveryException" "No IP address seeds configured; unable to find any peers"))
        )

        (§ if (<= (.. seedAddrs length) pnseedIndex))
        (§ block
            (§ return nil)
        )

        (§ var #_"int" (§ name i) pnseedIndex)
        (§ ass (§ name pnseedIndex) (+ pnseedIndex 1))
        (§ new #_"InetSocketAddress" (convertAddress (§ ai seedAddrs i)), (.. params (getPort)))
    )

    ;;;
     ; Returns an array containing all the Bitcoin nodes within the list.
     ;;
    #_override
    #_public
    (§ method #_"InetSocketAddress[]" (§ fn getPeers) [#_"long" (§ name services), #_"long" (§ name timeoutValue), #_"TimeUnit" (§ name timeoutUnit)])
        (§ throws #_"PeerDiscoveryException")
    (§ block
        (§ if (§ expr services != 0))
        (§ block
            (§ throw (§ new #_"PeerDiscoveryException" (§ expr "Pre-determined peers cannot be filtered by services: " + services)))
        )

        (§ try )
        (§ block
            (§ return (allPeers))
        )
        (§ catch #_"UnknownHostException" (§ name e))
        (§ block
            (§ throw (§ new #_"PeerDiscoveryException" e))
        )
    )

    #_private
    (§ method- #_"InetSocketAddress[]" (§ fn allPeers) [])
        (§ throws #_"UnknownHostException")
    (§ block
        (§ var #_"InetSocketAddress[]" (§ name addresses) (§ new #_"InetSocketAddress[]" (§ count (.. seedAddrs length))))
        (§ for (§ var #_"int" (§ name i) 0) :for (§ expr i < (.. seedAddrs length)) :for (§ ass (§ name i) (+ i 1)))
        (§ block
            (§ ass (§ name (§ ai addresses i)) (§ new #_"InetSocketAddress" (convertAddress (§ ai seedAddrs i)), (.. params (getPort))))
        )
        addresses
    )

    #_private
    (§ method- #_"InetAddress" (§ fn convertAddress) [#_"int" (§ name seed)])
        (§ throws #_"UnknownHostException")
    (§ block
        (§ var #_"byte[]" (§ name v4addr) (§ new #_"byte[]" (§ count 4)))
        (§ ass (§ name (§ ai v4addr 0)) (§ cast #_"byte" (& 0xff seed)))
        (§ ass (§ name (§ ai v4addr 1)) (§ cast #_"byte" (§ expr 0xff & (>> seed 8))))
        (§ ass (§ name (§ ai v4addr 2)) (§ cast #_"byte" (§ expr 0xff & (>> seed 16))))
        (§ ass (§ name (§ ai v4addr 3)) (§ cast #_"byte" (§ expr 0xff & (>> seed 24))))
        (InetAddress/getByAddress v4addr)
    )

    #_override
    #_public
    (§ method #_"void" (§ fn shutdown) [])
    (§ block
        nil
    )
)

#_(ns org.bitcoinj.params #_"AbstractBitcoinNetParams"
    (:import [java.math BigInteger]
             [java.util.concurrent TimeUnit])
    (:import [com.google.common.base Preconditions Stopwatch]
             [org.slf4j Logger LoggerFactory])
   (:require [org.bitcoinj.core BitcoinSerializer Block Coin NetworkParameters Sha256Hash StoredBlock Transaction Utils VerificationException]
             [org.bitcoinj.utils MonetaryFormat]
             [org.bitcoinj.store BlockStore BlockStoreException]))

;;;
 ; Parameters for Bitcoin-like networks.
 ;;
#_public
#_abstract
(§ class #_"AbstractBitcoinNetParams" (§ extends #_"NetworkParameters")
    ;;;
     ; Scheme part for Bitcoin URIs.
     ;;
    #_public
    #_static
    (§ def #_"String" (§ name BITCOIN_SCHEME) "bitcoin")
    #_public
    #_static
    (§ def #_"int" (§ name REWARD_HALVING_INTERVAL) 210000)

    #_private
    #_static
    (§ def- #_"Logger" (§ name log) (LoggerFactory/getLogger (§ klass #_"AbstractBitcoinNetParams")))

    #_public
    (§ constructor #_"AbstractBitcoinNetParams" [])
    (§ block
        (§ super)
        this
    )

    ;;;
     ; Checks if we are at a reward halving point.
     ; @param height The height of the previous stored block.
     ; @return if this is a reward halving point.
     ;;
    #_public
    (§ method #_"boolean" (§ fn isRewardHalvingPoint) [#_"int" (§ name height)])
    (§ block
        (== (§ expr (+ height 1) % REWARD_HALVING_INTERVAL) 0)
    )

    ;;;
     ; Checks if we are at a difficulty transition point.
     ; @param height The height of the previous stored block.
     ; @return if this is a difficulty transition point.
     ;;
    #_public
    (§ method #_"boolean" (§ fn isDifficultyTransitionPoint) [#_"int" (§ name height)])
    (§ block
        (== (§ expr (+ height 1) % (.. this (getInterval))) 0)
    )

    #_override
    #_public
    (§ method #_"void" (§ fn checkDifficultyTransitions) [#_"StoredBlock" (§ name storedPrev), #_"Block" (§ name nextBlock), #_"BlockStore" (§ name blockStore)])
        (§ throws #_"VerificationException", #_"BlockStoreException")
    (§ block
        (§ var #_"Block" (§ name prev) (.. storedPrev (getHeader)))

        ;; Is this supposed to be a difficulty transition point?
        (§ if (§ not (isDifficultyTransitionPoint (.. storedPrev (getHeight)))))
        (§ block
            ;; No ... so check the difficulty didn't actually change.
            (§ if (!= (.. nextBlock (getDifficultyTarget)) (.. prev (getDifficultyTarget))))
            (§ block
                (§ throw (§ new #_"VerificationException" (§ expr "Unexpected change in difficulty at height " + (.. storedPrev (getHeight)) + ": " + (Long/toHexString (.. nextBlock (getDifficultyTarget))) + " vs " + (Long/toHexString (.. prev (getDifficultyTarget))))))
            )
            (§ return nil)
        )

        ;; We need to find a block far back in the chain.  It's OK that this is expensive because it only occurs every
        ;; two weeks after the initial block chain download.
        (§ var #_"Stopwatch" (§ name watch) (Stopwatch/createStarted))

        (§ var #_"Sha256Hash" (§ name hash) (.. prev (getHash)))
        (§ var #_"StoredBlock" (§ name cursor) nil)
        (§ var #_"int" (§ name interval) (.. this (getInterval)))
        (§ for (§ var #_"int" (§ name i) 0) :for (< i interval) :for (§ ass (§ name i) (+ i 1)))
        (§ block
            (§ ass (§ name cursor) (.. blockStore (get hash)))
            (§ if (nil? cursor))
            (§ block
                ;; This should never happen.  If it does, it means we are following an incorrect or busted chain.
                (§ throw (§ new #_"VerificationException" (§ expr "Difficulty transition point but we did not find a way back to the last transition point. Not found: " + hash)))
            )
            (§ ass (§ name hash) (.. cursor (getHeader) (getPrevBlockHash)))
        )
        (Preconditions/checkState (§ expr cursor != nil && (isDifficultyTransitionPoint (- (.. cursor (getHeight)) 1))), "Didn't arrive at a transition point.")

        (.. watch (stop))
        (§ if (§ expr 50 < (.. watch (elapsed TimeUnit/MILLISECONDS))))
        (§ block
            (.. log (info "Difficulty transition traversal took {}", watch))
        )

        (§ var #_"Block" (§ name blockIntervalAgo) (.. cursor (getHeader)))
        (§ var #_"int" (§ name timespan) (§ cast #_"int" (- (.. prev (getTimeSeconds)) (.. blockIntervalAgo (getTimeSeconds)))))
        ;; Limit the adjustment step.
        (§ var #_"int" (§ name targetTimespan) (.. this (getTargetTimespan)))
        (§ if (§ expr timespan < targetTimespan / 4))
        (§ block
            (§ ass (§ name timespan) (/ targetTimespan 4))
        )
        (§ if (§ expr timespan > targetTimespan * 4))
        (§ block
            (§ ass (§ name timespan) (* targetTimespan 4))
        )

        (§ var #_"BigInteger" (§ name newTarget) (Utils/decodeCompactBits (.. prev (getDifficultyTarget))))
        (§ ass (§ name newTarget) (.. newTarget (multiply (BigInteger/valueOf timespan))))
        (§ ass (§ name newTarget) (.. newTarget (divide (BigInteger/valueOf targetTimespan))))

        (§ if (§ expr 0 < (.. newTarget (compareTo (.. this (getMaxTarget))))))
        (§ block
            (.. log (info "Difficulty hit proof of work limit: {}", (.. newTarget (toString 16))))
            (§ ass (§ name newTarget) (.. this (getMaxTarget)))
        )

        (§ var #_"int" (§ name accuracyBytes) (- (§ cast #_"int" (>>> (.. nextBlock (getDifficultyTarget)) 24)) 3))
        (§ var #_"long" (§ name receivedTargetCompact) (.. nextBlock (getDifficultyTarget)))

        ;; The calculated difficulty is to a higher precision than received, so reduce here.
        (§ var #_"BigInteger" (§ name mask) (.. (BigInteger/valueOf 0xffffff) (shiftLeft (* accuracyBytes 8))))
        (§ ass (§ name newTarget) (.. newTarget (and mask)))
        (§ var #_"long" (§ name newTargetCompact) (Utils/encodeCompactBits newTarget))

        (§ if (§ expr newTargetCompact != receivedTargetCompact))
        (§ block
            (§ throw (§ new #_"VerificationException" (§ expr "Network provided difficulty bits do not match what was calculated: " + (Long/toHexString newTargetCompact) + " vs " + (Long/toHexString receivedTargetCompact))))
        )
        nil
    )

    #_override
    #_public
    (§ method #_"Coin" (§ fn getMaxMoney) [])
    (§ block
        MAX_MONEY
    )

    #_override
    #_public
    (§ method #_"Coin" (§ fn getMinNonDustOutput) [])
    (§ block
        Transaction/MIN_NONDUST_OUTPUT
    )

    #_override
    #_public
    (§ method #_"MonetaryFormat" (§ fn getMonetaryFormat) [])
    (§ block
        (§ new #_"MonetaryFormat")
    )

    #_override
    #_public
    (§ method #_"int" (§ fn getProtocolVersionNum) [#_"ProtocolVersion" (§ name version)])
    (§ block
        (.. version (getBitcoinProtocolVersion))
    )

    #_override
    #_public
    (§ method #_"BitcoinSerializer" (§ fn getSerializer) [#_"boolean" (§ name parseRetain)])
    (§ block
        (§ new #_"BitcoinSerializer" this, parseRetain)
    )

    #_override
    #_public
    (§ method #_"String" (§ fn getUriScheme) [])
    (§ block
        BITCOIN_SCHEME
    )

    #_override
    #_public
    (§ method #_"boolean" (§ fn hasMaxMoney) [])
    (§ block
        true
    )
)

#_(ns org.bitcoinj.params #_"MainNetParams"
    (:import [java.net *])
    (:import [com.google.common.base Preconditions])
   (:require [org.bitcoinj.core *]
             [org.bitcoinj.net.discovery *]))

;;;
 ; Parameters for the main production network on which people trade goods and services.
 ;;
#_public
(§ class #_"MainNetParams" (§ extends #_"AbstractBitcoinNetParams")
    #_public
    #_static
    (§ def #_"int" (§ name MAINNET_MAJORITY_WINDOW) 1000)
    #_public
    #_static
    (§ def #_"int" (§ name MAINNET_MAJORITY_REJECT_BLOCK_OUTDATED) 950)
    #_public
    #_static
    (§ def #_"int" (§ name MAINNET_MAJORITY_ENFORCE_BLOCK_UPGRADE) 750)

    #_public
    (§ constructor #_"MainNetParams" [])
    (§ block
        (§ super)

        (§ ass (§ name interval) INTERVAL)
        (§ ass (§ name targetTimespan) TARGET_TIMESPAN)
        (§ ass (§ name maxTarget) (Utils/decodeCompactBits 0x1d00ffff))
        (§ ass (§ name addressHeader) 0)
        (§ ass (§ name p2shHeader) 5)
        (§ ass (§ name acceptableAddressCodes) (§ new #_"int[]" (§ coll addressHeader, p2shHeader )))
        (§ ass (§ name port) 8333)
        (§ ass (§ name packetMagic) 0xf9beb4d9)
        (§ ass (§ name bip32HeaderPub) 0x0488b21e) ;; 4 byte header that serializes in base58 to "xpub"
        (§ ass (§ name bip32HeaderPriv) 0x0488ade4) ;; 4 byte header that serializes in base58 to "xprv"

        (§ ass (§ name majorityEnforceBlockUpgrade) MAINNET_MAJORITY_ENFORCE_BLOCK_UPGRADE)
        (§ ass (§ name majorityRejectBlockOutdated) MAINNET_MAJORITY_REJECT_BLOCK_OUTDATED)
        (§ ass (§ name majorityWindow) MAINNET_MAJORITY_WINDOW)

        (.. genesisBlock (setDifficultyTarget 0x1d00ffff))
        (.. genesisBlock (setTime 1231006505))
        (.. genesisBlock (setNonce 2083236893))
        (§ ass (§ name id) ID_MAINNET)
        (§ ass (§ name subsidyDecreaseBlockCount) 210000)
        (§ ass (§ name spendableCoinbaseDepth) 100)
        (§ var #_"String" (§ name genesisHash) (.. genesisBlock (getHashAsString)))
        (Preconditions/checkState (.. genesisHash (equals "000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f")), genesisHash)

        ;; This contains (at a minimum) the blocks which are not BIP30 compliant.  BIP30 changed how duplicate
        ;; transactions are handled.  Duplicated transactions could occur in the case where a coinbase had the same
        ;; extraNonce and the same outputs but appeared at different heights, and greatly complicated re-org handling.
        ;; Having these here simplifies block connection logic considerably.
        (.. checkpoints (put 91722, (Sha256Hash/wrap "00000000000271a2dc26e7667f8419f2e15416dc6955e5a6c6cdf3f2574dd08e")))
        (.. checkpoints (put 91812, (Sha256Hash/wrap "00000000000af0aed4792b1acee3d966af36cf5def14935db8de83d6f9306f2f")))
        (.. checkpoints (put 91842, (Sha256Hash/wrap "00000000000a4d0a398161ffc163c503763b1f4360639393e0e4c8e300e0caec")))
        (.. checkpoints (put 91880, (Sha256Hash/wrap "00000000000743f190a18c5577a3c2d2a1f610ae9601ac046a38084ccb7cd721")))
        (.. checkpoints (put 200000, (Sha256Hash/wrap "000000000000034a7dedef4a161fa058a2d67a173a90155f3a2fe6fc132e0ebf")))

        (§ ass (§ name dnsSeeds) (§ new #_"String[]"
        (§ coll
            "seed.bitcoin.sipa.be",          ;; Pieter Wuille
            "dnsseed.bluematt.me",           ;; Matt Corallo
            "dnsseed.bitcoin.dashjr.org",    ;; Luke Dashjr
            "seed.bitcoinstats.com",         ;; Chris Decker
            "seed.bitnodes.io",              ;; Addy Yeow
            "bitseed.xf2.org",               ;; Jeff Garzik
            "seed.bitcoin.jonasschnelli.ch", ;; Jonas Schnelli
        )))

        (§ ass (§ name addrSeeds) (§ new #_"int[]"
        (§ coll
                0x1ddb1032, 0x6242ce40, 0x52d6a445, 0x2dd7a445, 0x8a53cd47, 0x73263750, 0xda23c257, 0xecd4ed57,
                0x0a40ec59, 0x75dce160, 0x7df76791, 0x89370bad, 0xa4f214ad, 0x767700ae, 0x638b0418, 0x868a1018,
                0xcd9f332e, 0x0129653e, 0xcc92dc3e, 0x96671640, 0x56487e40, 0x5b66f440, 0xb1d01f41, 0xf1dc6041,
                0xc1d12b42, 0x86ba1243, 0x6be4df43, 0x6d4cef43, 0xd18e0644, 0x1ab0b344, 0x6584a345, 0xe7c1a445,
                0x58cea445, 0xc5daa445, 0x21dda445, 0x3d3b5346, 0x13e55347, 0x1080d24a, 0x8e611e4b, 0x81518e4b,
                0x6c839e4b, 0xe2ad0a4c, 0xfbbc0a4c, 0x7f5b6e4c, 0x7244224e, 0x1300554e, 0x20690652, 0x5a48b652,
                0x75c5c752, 0x4335cc54, 0x340fd154, 0x87c07455, 0x087b2b56, 0x8a133a57, 0xac23c257, 0x70374959,
                0xfb63d45b, 0xb9a1685c, 0x180d765c, 0x674f645d, 0x04d3495e, 0x1de44b5e, 0x4ee8a362, 0x0ded1b63,
                0xc1b04b6d, 0x8d921581, 0x97b7ea82, 0x1cf83a8e, 0x91490bad, 0x09dc75ae, 0x9a6d79ae, 0xa26d79ae,
                0x0fd08fae, 0x0f3e3fb2, 0x4f944fb2, 0xcca448b8, 0x3ecd6ab8, 0xa9d5a5bc, 0x8d0119c1, 0x045997d5,
                0xca019dd9, 0x0d526c4d, 0xabf1ba44, 0x66b1ab55, 0x1165f462, 0x3ed7cbad, 0xa38fae6e, 0x3bd2cbad,
                0xd36f0547, 0x20df7840, 0x7a337742, 0x549f8e4b, 0x9062365c, 0xd399f562, 0x2b5274a1, 0x8edfa153,
                0x3bffb347, 0x7074bf58, 0xb74fcbad, 0x5b5a795b, 0x02fa29ce, 0x5a6738d4, 0xe8a1d23e, 0xef98c445,
                0x4b0f494c, 0xa2bc1e56, 0x7694ad63, 0xa4a800c3, 0x05fda6cd, 0x9f22175e, 0x364a795b, 0x536285d5,
                0xac44c9d4, 0x0b06254d, 0x150c2fd4, 0x32a50dcc, 0xfd79ce48, 0xf15cfa53, 0x66c01e60, 0x6bc26661,
                0xc03b47ae, 0x4dda1b81, 0x3285a4c1, 0x883ca96d, 0x35d60a4c, 0xdae09744, 0x2e314d61, 0x84e247cf,
                0x6c814552, 0x3a1cc658, 0x98d8f382, 0xe584cb5b, 0x15e86057, 0x7b01504e, 0xd852dd48, 0x56382f56,
                0x0a5df454, 0xa0d18d18, 0x2e89b148, 0xa79c114c, 0xcbdcd054, 0x5523bc43, 0xa9832640, 0x8a066144,
                0x3894c3bc, 0xab76bf58, 0x6a018ac1, 0xfebf4f43, 0x2f26c658, 0x31102f4e, 0x85e929d5, 0x2a1c175e,
                0xfc6c2cd1, 0x27b04b6d, 0xdf024650, 0x161748b8, 0x28be6580, 0x57be6580, 0x1cee677a, 0xaa6bb742,
                0x9a53964b, 0x0a5a2d4d, 0x2434c658, 0x9a494f57, 0x1ebb0e48, 0xf610b85d, 0x077ecf44, 0x085128bc,
                0x5ba17a18, 0x27ca1b42, 0xf8a00b56, 0xfcd4c257, 0xcf2fc15e, 0xd897e052, 0x4cada04f, 0x2f35f6d5,
                0x382ce8c9, 0xe523984b, 0x3f946846, 0x60c8be43, 0x41da6257, 0xde0be142, 0xae8a544b, 0xeff0c254,
                0x1e0f795b, 0xaeb28890, 0xca16acd9, 0x1e47ddd8, 0x8c8c4829, 0xd27dc747, 0xd53b1663, 0x4096b163,
                0x9c8dd958, 0xcb12f860, 0x9e79305c, 0x40c1a445, 0x4a90c2bc, 0x2c3a464d, 0x2727f23c, 0x30b04b6d,
                0x59024cb8, 0xa091e6ad, 0x31b04b6d, 0xc29d46a6, 0x63934fb2, 0xd9224dbe, 0x9f5910d8, 0x7f530a6b,
                0x752e9c95, 0x65453548, 0xa484be46, 0xce5a1b59, 0x710e0718, 0x46a13d18, 0xdaaf5318, 0xc4a8ff53,
                0x87abaa52, 0xb764cf51, 0xb2025d4a, 0x6d351e41, 0xc035c33e, 0xa432c162, 0x61ef34ae, 0xd16fddbc,
                0x0870e8c1, 0x3070e8c1, 0x9c71e8c1, 0xa4992363, 0x85a1f663, 0x4184e559, 0x18d96ed8, 0x17b8dbd5,
                0x60e7cd18, 0xe5ee104c, 0xab17ac62, 0x1e786e1b, 0x5d23b762, 0xf2388fae, 0x88270360, 0x9e5b3d80,
                0x7da518b2, 0xb5613b45, 0x1ad41f3e, 0xd550854a, 0x8617e9a9, 0x925b229c, 0xf2e92542, 0x47af0544,
                0x73b5a843, 0xb9b7a0ad, 0x03a748d0, 0x0a6ff862, 0x6694df62, 0x3bfac948, 0x8e098f4f, 0x746916c3,
                0x02f38e4f, 0x40bb1243, 0x6a54d162, 0x6008414b, 0xa513794c, 0x514aa343, 0x63781747, 0xdbb6795b,
                0xed065058, 0x42d24b46, 0x1518794c, 0x9b271681, 0x73e4ffad, 0x0654784f, 0x438dc945, 0x641846a6,
                0x2d1b0944, 0x94b59148, 0x8d369558, 0xa5a97662, 0x8b705b42, 0xce9204ae, 0x8d584450, 0x2df61555,
                0xeebff943, 0x2e75fb4d, 0x3ef8fc57, 0x9921135e, 0x8e31042e, 0xb5afad43, 0x89ecedd1, 0x9cfcc047,
                0x8fcd0f4c, 0xbe49f5ad, 0x146a8d45, 0x98669ab8, 0x98d9175e, 0xd1a8e46d, 0x839a3ab8, 0x40a0016c,
                0x6d27c257, 0x977fffad, 0x7baa5d5d, 0x1213be43, 0xb167e5a9, 0x640fe8ca, 0xbc9ea655, 0x0f820a4c,
                0x0f097059, 0x69ac957c, 0x366d8453, 0xb1ba2844, 0x8857f081, 0x70b5be63, 0xc545454b, 0xaf36ded1,
                0xb5a4b052, 0x21f062d1, 0x72ab89b2, 0x74a45318, 0x8312e6bc, 0xb916965f, 0x8aa7c858, 0xfe7effad,
        )))
        this
    )

    #_private
    #_static
    (§ def- #_"MainNetParams" (§ name instance))

    #_public
    #_static
    #_synchronized
    (§ defn #_"MainNetParams" (§ fn get) [])
    (§ block
        (§ if (nil? instance))
        (§ block
            (§ ass (§ name instance) (§ new #_"MainNetParams"))
        )
        instance
    )

    #_override
    #_public
    (§ method #_"String" (§ fn getPaymentProtocolId) [])
    (§ block
        PAYMENT_PROTOCOL_ID_MAINNET
    )
)

#_(ns org.bitcoinj.params #_"Networks"
    (:import [java.util Collection Set])
    (:import [com.google.common.collect ImmutableSet Lists])
   (:require [org.bitcoinj.core NetworkParameters]))

;;;
 ; Utility class that holds all the registered NetworkParameters types used for Address auto discovery.
 ; By default only MainNetParams and TestNet3Params are used.  If you want to use UnitTestParams, use
 ; the register and unregister the TestNet3Params as they don't have their own address version/type code.
 ;;
#_public
(§ class #_"Networks"
    ;;; Registered networks. ;;
    #_private
    #_static
    (§ def- #_"Set<? extends NetworkParameters>" (§ name networks) (ImmutableSet/of (TestNet3Params/get), (MainNetParams/get)))

    #_public
    #_static
    (§ defn #_"Set<? extends NetworkParameters>" (§ fn get) [])
    (§ block
        networks
    )

    #_public
    #_static
    (§ defn #_"void" (§ fn register) [#_"NetworkParameters" (§ name network)])
    (§ block
        (register (Lists/newArrayList network))
        nil
    )

    #_public
    #_static
    (§ defn #_"void" (§ fn register) [#_"Collection<? extends NetworkParameters>" (§ name networks)])
    (§ block
        (§ var #_"ImmutableSet.Builder<NetworkParameters>" (§ name builder) (ImmutableSet/builder))
        (.. builder (addAll Networks/networks))
        (.. builder (addAll networks))
        (§ ass (§ name (.. Networks networks)) (.. builder (build)))
        nil
    )

    #_public
    #_static
    (§ defn #_"void" (§ fn unregister) [#_"NetworkParameters" (§ name network)])
    (§ block
        (§ if (.. networks (contains network)))
        (§ block
            (§ var #_"ImmutableSet.Builder<NetworkParameters>" (§ name builder) (ImmutableSet/builder))

            (§ for (§ var #_"NetworkParameters" (§ name parameters)) :for networks)
            (§ block
                (§ if (§ not (.. parameters (equals network))))
                (§ block
                    (.. builder (add parameters))
                )
            )

            (§ ass (§ name networks) (.. builder (build)))
        )
        nil
    )
)

#_(ns org.bitcoinj.params #_"TestNet3Params"
    (:import [java.math BigInteger]
             [java.util Date])
    (:import [com.google.common.base Preconditions])
   (:require [org.bitcoinj.core Block NetworkParameters StoredBlock Utils VerificationException]
             [org.bitcoinj.store BlockStore BlockStoreException]))

;;;
 ; Parameters for the testnet, a separate public instance of Bitcoin that has relaxed rules suitable for development
 ; and testing of applications and new Bitcoin versions.
 ;;
#_public
(§ class #_"TestNet3Params" (§ extends #_"AbstractBitcoinNetParams")
    #_public
    #_static
    (§ def #_"int" (§ name TESTNET_MAJORITY_WINDOW) 100)
    #_public
    #_static
    (§ def #_"int" (§ name TESTNET_MAJORITY_REJECT_BLOCK_OUTDATED) 75)
    #_public
    #_static
    (§ def #_"int" (§ name TESTNET_MAJORITY_ENFORCE_BLOCK_UPGRADE) 51)

    #_public
    (§ constructor #_"TestNet3Params" [])
    (§ block
        (§ super)

        (§ ass (§ name id) ID_TESTNET)
        (§ ass (§ name packetMagic) 0x0b110907)
        (§ ass (§ name interval) INTERVAL)
        (§ ass (§ name targetTimespan) TARGET_TIMESPAN)
        (§ ass (§ name maxTarget) (Utils/decodeCompactBits 0x1d00ffff))
        (§ ass (§ name port) 18333)
        (§ ass (§ name addressHeader) 111)
        (§ ass (§ name p2shHeader) 196)
        (§ ass (§ name acceptableAddressCodes) (§ new #_"int[]" (§ coll addressHeader, p2shHeader )))
        (.. genesisBlock (setTime 1296688602))
        (.. genesisBlock (setDifficultyTarget 0x1d00ffff))
        (.. genesisBlock (setNonce 414098458))
        (§ ass (§ name spendableCoinbaseDepth) 100)
        (§ ass (§ name subsidyDecreaseBlockCount) 210000)
        (§ var #_"String" (§ name genesisHash) (.. genesisBlock (getHashAsString)))
        (Preconditions/checkState (.. genesisHash (equals "000000000933ea01ad0ee984209779baaec3ced90fa3f408719526f8d77f4943")))
        (§ ass (§ name alertSigningKey) (.. Utils/HEX (decode "04302390343f91cc401d56d68b123028bf52e5fca1939df127f63c6467cdf9c8e2c14b61104cf817d0b780da337893ecc4aaff1309e536162dabbdb45200ca2b0a")))

        (§ ass (§ name dnsSeeds) (§ new #_"String[]"
        (§ coll
            "testnet-seed.bitcoin.jonasschnelli.ch", ;; Jonas Schnelli
            "testnet-seed.bluematt.me",              ;; Matt Corallo
            "testnet-seed.bitcoin.petertodd.org",    ;; Peter Todd
            "testnet-seed.bitcoin.schildbach.de",    ;; Andreas Schildbach
        )))
        (§ ass (§ name addrSeeds) nil)
        (§ ass (§ name bip32HeaderPub) 0x043587cf)
        (§ ass (§ name bip32HeaderPriv) 0x04358394)

        (§ ass (§ name majorityEnforceBlockUpgrade) TESTNET_MAJORITY_ENFORCE_BLOCK_UPGRADE)
        (§ ass (§ name majorityRejectBlockOutdated) TESTNET_MAJORITY_REJECT_BLOCK_OUTDATED)
        (§ ass (§ name majorityWindow) TESTNET_MAJORITY_WINDOW)
        this
    )

    #_private
    #_static
    (§ def- #_"TestNet3Params" (§ name instance))

    #_public
    #_static
    #_synchronized
    (§ defn #_"TestNet3Params" (§ fn get) [])
    (§ block
        (§ if (nil? instance))
        (§ block
            (§ ass (§ name instance) (§ new #_"TestNet3Params"))
        )
        instance
    )

    #_override
    #_public
    (§ method #_"String" (§ fn getPaymentProtocolId) [])
    (§ block
        PAYMENT_PROTOCOL_ID_TESTNET
    )

    ;; February 16th 2012
    #_private
    #_static
    (§ def- #_"Date" (§ name testnetDiffDate) (§ new #_"Date" 1329264000000))

    #_override
    #_public
    (§ method #_"void" (§ fn checkDifficultyTransitions) [#_"StoredBlock" (§ name storedPrev), #_"Block" (§ name nextBlock), #_"BlockStore" (§ name blockStore)])
        (§ throws #_"VerificationException", #_"BlockStoreException")
    (§ block
        (§ if (§ expr (§ not (isDifficultyTransitionPoint (.. storedPrev (getHeight)))) && (.. nextBlock (getTime) (after testnetDiffDate))))
        (§ block
            (§ var #_"Block" (§ name prev) (.. storedPrev (getHeader)))

            ;; After 15th February 2012 the rules on the testnet change to avoid people running up the difficulty
            ;; and then leaving, making it too hard to mine a block.  On non-difficulty transition points, easy
            ;; blocks are allowed if there has been a span of 20 minutes without one.
            (§ var #_"long" (§ name timeDelta) (- (.. nextBlock (getTimeSeconds)) (.. prev (getTimeSeconds))))
            ;; There is an integer underflow bug in bitcoin-qt that means mindiff blocks are accepted when time
            ;; goes backwards.
            (§ if (§ expr 0 <= timeDelta && timeDelta <= NetworkParameters/TARGET_SPACING * 2))
            (§ block
                ;; Walk backwards until we find a block that doesn't have the easiest proof of work, then check
                ;; that difficulty is equal to that one.
                (§ var #_"StoredBlock" (§ name cursor) storedPrev)
                (§ while (§ expr (§ not (.. cursor (getHeader) (equals (getGenesisBlock)))) && (.. cursor (getHeight)) % (getInterval) != 0 && (.. cursor (getHeader) (getDifficultyTargetAsInteger) (equals (getMaxTarget)))))
                (§ block
                    (§ ass (§ name cursor) (.. cursor (getPrev blockStore)))
                )
                (§ var #_"BigInteger" (§ name cursorTarget) (.. cursor (getHeader) (getDifficultyTargetAsInteger)))
                (§ var #_"BigInteger" (§ name newTarget) (.. nextBlock (getDifficultyTargetAsInteger)))
                (§ if (§ not (.. cursorTarget (equals newTarget))))
                (§ block
                    (§ throw (§ new #_"VerificationException" (§ expr "Testnet block transition that is not allowed: " + (Long/toHexString (.. cursor (getHeader) (getDifficultyTarget))) + " vs " + (Long/toHexString (.. nextBlock (getDifficultyTarget))))))
                )
            )
        )
        (§ else )
        (§ block
            (.. super (checkDifficultyTransitions storedPrev, nextBlock, blockStore))
        )
        nil
    )
)

#_(ns org.bitcoinj.params #_"UnitTestParams"
    (:import [java.math BigInteger])
   (:require [org.bitcoinj.core *]))

;;;
 ; Network parameters used by the bitcoinj unit tests (and potentially your own).  This lets you solve a block using
 ; {@link org.bitcoinj.core.Block#solve()} by setting difficulty to the easiest possible.
 ;;
#_public
(§ class #_"UnitTestParams" (§ extends #_"AbstractBitcoinNetParams")
    #_public
    #_static
    (§ def #_"int" (§ name UNITNET_MAJORITY_WINDOW) 8)
    #_public
    #_static
    (§ def #_"int" (§ name TESTNET_MAJORITY_REJECT_BLOCK_OUTDATED) 6)
    #_public
    #_static
    (§ def #_"int" (§ name TESTNET_MAJORITY_ENFORCE_BLOCK_UPGRADE) 4)

    #_public
    (§ constructor #_"UnitTestParams" [])
    (§ block
        (§ super)

        (§ ass (§ name id) ID_UNITTESTNET)
        (§ ass (§ name packetMagic) 0x0b110907)
        (§ ass (§ name addressHeader) 111)
        (§ ass (§ name p2shHeader) 196)
        (§ ass (§ name acceptableAddressCodes) (§ new #_"int[]" (§ coll addressHeader, p2shHeader )))
        (§ ass (§ name maxTarget) (§ new #_"BigInteger" "00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff", 16))
        (.. genesisBlock (setTime (/ (System/currentTimeMillis) 1000)))
        (.. genesisBlock (setDifficultyTarget Block/EASIEST_DIFFICULTY_TARGET))
        (.. genesisBlock (solve))
        (§ ass (§ name port) 18333)
        (§ ass (§ name interval) 10)
        (§ ass (§ name targetTimespan) 200000000) ;; 6 years.  Just a very big number.
        (§ ass (§ name spendableCoinbaseDepth) 5)
        (§ ass (§ name subsidyDecreaseBlockCount) 100)
        (§ ass (§ name dnsSeeds) nil)
        (§ ass (§ name addrSeeds) nil)
        (§ ass (§ name bip32HeaderPub) 0x043587cf)
        (§ ass (§ name bip32HeaderPriv) 0x04358394)

        (§ ass (§ name majorityEnforceBlockUpgrade) 3)
        (§ ass (§ name majorityRejectBlockOutdated) 4)
        (§ ass (§ name majorityWindow) 7)
        this
    )

    #_private
    #_static
    (§ def- #_"UnitTestParams" (§ name instance))

    #_public
    #_static
    #_synchronized
    (§ defn #_"UnitTestParams" (§ fn get) [])
    (§ block
        (§ if (nil? instance))
        (§ block
            (§ ass (§ name instance) (§ new #_"UnitTestParams"))
        )
        instance
    )

    #_override
    #_public
    (§ method #_"String" (§ fn getPaymentProtocolId) [])
    (§ block
        "unittest"
    )
)

#_(ns org.bitcoinj.script #_"Script"
    (:import [java.io ByteArrayInputStream ByteArrayOutputStream IOException OutputStream]
             [java.math BigInteger]
             [java.security MessageDigest NoSuchAlgorithmException]
             [java.util *])
    (:import [com.google.common.base Preconditions]
             [com.google.common.collect Lists]
             [org.slf4j Logger LoggerFactory]
             [org.spongycastle.crypto.digests RIPEMD160Digest])
   (:require [org.bitcoinj.core *]
             [org.bitcoinj.crypto TransactionSignature]
             #_static [org.bitcoinj.script.ScriptOpCodes *]))

;; TODO: Redesign this entire API to be more type safe and organised.

;;;
 ; <p>Programs embedded inside transactions that control redemption of payments.</p>
 ;
 ; <p>Bitcoin transactions don't specify what they do directly.  Instead
 ; <a href="https://en.bitcoin.it/wiki/Script">a small binary stack language</a> is used to define programs that
 ; when evaluated, return whether the transaction "accepts" or rejects the other transactions connected to it.</p>
 ;
 ; <p>In SPV mode, scripts are not run, because that would require all transactions to be available and lightweight
 ; clients don't have that data.  In full mode, this class is used to run the interpreted language.  It also has
 ; static methods for building scripts.</p>
 ;;
#_public
(§ class #_"Script"
    ;;; Enumeration to encapsulate the type of this script. ;;
    #_public
    (§ enum #_"ScriptType"
        ;; Do NOT change the ordering of the following definitions because their ordinals are stored in databases.
        (§ item NO_TYPE)
        (§ item P2PKH)
        (§ item PUB_KEY)
        (§ item P2SH)
    )

    ;;; Flags to pass to {@link Script#correctlySpends(Transaction, long, Script, Set)}.
     ; Note currently only P2SH, DERSIG and NULLDUMMY are actually supported.
     ;;
    #_public
    (§ enum #_"VerifyFlag"
        (§ item P2SH) ;; Enable BIP16-style subscript evaluation.
        (§ item STRICTENC) ;; Passing a non-strict-DER signature or one with undefined hashtype to a checksig operation causes script failure.
        (§ item DERSIG) ;; Passing a non-strict-DER signature to a checksig operation causes script failure (softfork safe, BIP66 rule 1).
        (§ item LOW_S) ;; Passing a non-strict-DER signature or one with S > order/2 to a checksig operation causes script failure.
        (§ item NULLDUMMY) ;; Verify dummy stack item consumed by CHECKMULTISIG is of zero-length.
        (§ item SIGPUSHONLY) ;; Using a non-push operator in the scriptSig causes script failure (softfork safe, BIP62 rule 2).
        (§ item MINIMALDATA) ;; Require minimal encodings for all push operations.
        (§ item DISCOURAGE_UPGRADABLE_NOPS) ;; Discourage use of NOPs reserved for upgrades (NOP1-10).
        (§ item CLEANSTACK) ;; Require that only a single stack element remains after evaluation.
        (§ item CHECKLOCKTIMEVERIFY) ;; Enable CHECKLOCKTIMEVERIFY operation.
        (§ item CHECKSEQUENCEVERIFY) ;; Enable CHECKSEQUENCEVERIFY operation.
    )
    #_public
    #_static
    (§ def #_"EnumSet<VerifyFlag>" (§ name ALL_VERIFY_FLAGS) (EnumSet/allOf (§ klass #_"VerifyFlag")))

    #_private
    #_static
    (§ def- #_"Logger" (§ name log) (LoggerFactory/getLogger (§ klass #_"Script")))

    #_public
    #_static
    (§ def #_"long" (§ name MAX_SCRIPT_ELEMENT_SIZE) 520) ;; bytes
    #_private
    #_static
    (§ def- #_"int" (§ name MAX_OPS_PER_SCRIPT) 201)
    #_private
    #_static
    (§ def- #_"int" (§ name MAX_STACK_SIZE) 1000)
    #_private
    #_static
    (§ def- #_"int" (§ name MAX_PUBKEYS_PER_MULTISIG) 20)
    #_private
    #_static
    (§ def- #_"int" (§ name MAX_SCRIPT_SIZE) 10000)
    #_public
    #_static
    (§ def #_"int" (§ name SIG_SIZE) 75)
    ;;; Max number of sigops allowed in a standard p2sh redeem script. ;;
    #_public
    #_static
    (§ def #_"int" (§ name MAX_P2SH_SIGOPS) 15)

    ;; The program is a set of chunks where each element is either [opcode] or [data, data, data ...].
    #_protected
    (§ field #_"List<ScriptChunk>" (§ name chunks))
    ;; Unfortunately, scripts are not ever re-serialized or canonicalized when used in signature hashing.
    ;; Thus we must preserve the exact bytes that we read off the wire, along with the parsed form.
    #_protected
    (§ field #_"byte[]" (§ name program))

    ;; Creation time of the associated keys in seconds since the epoch.
    #_private
    (§ field- #_"long" (§ name creationTimeSeconds))

    ;;; Creates an empty script that serializes to nothing. ;;
    #_private
    (§ constructor- #_"Script" [])
    (§ block
        (§ ass (§ name chunks) (Lists/newArrayList))
        this
    )

    ;; Used from ScriptBuilder.
    (§ constructor #_"Script" [#_"List<ScriptChunk>" (§ name chunks)])
    (§ block
        (§ ass (§ name (.. this chunks)) (Collections/unmodifiableList (§ new #_"ArrayList<>" chunks)))
        (§ ass (§ name creationTimeSeconds) (Utils/currentTimeSeconds))
        this
    )

    ;;;
     ; Construct a Script that copies and wraps the programBytes array.
     ; The array is parsed and checked for syntactic validity.
     ; @param programBytes Array of program bytes from a transaction.
     ;;
    #_public
    (§ constructor #_"Script" [#_"byte[]" (§ name programBytes)])
        (§ throws #_"ScriptException")
    (§ block
        (§ ass (§ name program) programBytes)
        (parse programBytes)
        (§ ass (§ name creationTimeSeconds) 0)
        this
    )

    #_public
    (§ constructor #_"Script" [#_"byte[]" (§ name programBytes), #_"long" (§ name creationTimeSeconds)])
        (§ throws #_"ScriptException")
    (§ block
        (§ ass (§ name program) programBytes)
        (parse programBytes)
        (§ ass (§ name (.. this creationTimeSeconds)) creationTimeSeconds)
        this
    )

    #_public
    (§ method #_"long" (§ fn getCreationTimeSeconds) [])
    (§ block
        creationTimeSeconds
    )

    #_public
    (§ method #_"void" (§ fn setCreationTimeSeconds) [#_"long" (§ name creationTimeSeconds)])
    (§ block
        (§ ass (§ name (.. this creationTimeSeconds)) creationTimeSeconds)
        nil
    )

    ;;;
     ; Returns the program opcodes as a string, for example "[1234] DUP HASH160".
     ;;
    #_override
    #_public
    (§ method #_"String" (§ fn toString) [])
    (§ block
        (.. Utils/SPACE_JOINER (join chunks))
    )

    ;;; Returns the serialized program as a newly created byte array. ;;
    #_public
    (§ method #_"byte[]" (§ fn getProgram) [])
    (§ block
        (§ try )
        (§ block
            ;; Don't round-trip as Bitcoin Core doesn't and it would introduce a mismatch.
            (§ if (some? program))
            (§ block
                (§ return (Arrays/copyOf program, (.. program length)))
            )

            (§ var #_"ByteArrayOutputStream" (§ name bos) (§ new #_"ByteArrayOutputStream"))
            (§ for (§ var #_"ScriptChunk" (§ name chunk)) :for chunks)
            (§ block
                (.. chunk (write bos))
            )
            (§ ass (§ name program) (.. bos (toByteArray)))
            (§ return program)
        )
        (§ catch #_"IOException" (§ name e))
        (§ block
            (§ throw (§ new #_"RuntimeException" e)) ;; Cannot happen.
        )
    )

    ;;; Returns an immutable list of the scripts parsed form.  Each chunk is either an opcode or data element. ;;
    #_public
    (§ method #_"List<ScriptChunk>" (§ fn getChunks) [])
    (§ block
        (Collections/unmodifiableList chunks)
    )

    #_private
    #_static
    (§ var #_"ScriptChunk[]" (§ name STANDARD_TRANSACTION_SCRIPT_CHUNKS)
    (§ coll
        (§ new #_"ScriptChunk" ScriptOpCodes/OP_DUP, nil, 0)
        (§ new #_"ScriptChunk" ScriptOpCodes/OP_HASH160, nil, 1)
        (§ new #_"ScriptChunk" ScriptOpCodes/OP_EQUALVERIFY, nil, 23)
        (§ new #_"ScriptChunk" ScriptOpCodes/OP_CHECKSIG, nil, 24)
    ))

    ;;;
     ; <p>To run a script, first we parse it which breaks it up into chunks representing pushes of data
     ; or logical opcodes.  Then we can run the parsed chunks.</p>
     ;
     ; <p>The reason for this split, instead of just interpreting directly, is to make it easier
     ; to reach into a programs structure and pull out bits of data without having to run it.
     ; This is necessary to render the to/from addresses of transactions in a user interface.
     ; Bitcoin Core does something similar.</p>
     ;;
    #_private
    (§ method- #_"void" (§ fn parse) [#_"byte[]" (§ name program)])
        (§ throws #_"ScriptException")
    (§ block
        (§ ass (§ name chunks) (§ new #_"ArrayList<>" 5)) ;; Common size.
        (§ var #_"ByteArrayInputStream" (§ name bis) (§ new #_"ByteArrayInputStream" program))
        (§ var #_"int" (§ name initialSize) (.. bis (available)))
        (§ while (§ expr 0 < (.. bis (available))))
        (§ block
            (§ var #_"int" (§ name startLocationInProgram) (§ expr initialSize - (.. bis (available))))
            (§ var #_"int" (§ name opcode) (.. bis (read)))

            (§ var #_"long" (§ name dataToRead) -1)
            (§ if (§ expr 0 <= opcode && opcode < OP_PUSHDATA1))
            (§ block
                ;; Read some bytes of data, where how many is the opcode value itself.
                (§ ass (§ name dataToRead) opcode)
            )
            (§ elseif (§ expr opcode == OP_PUSHDATA1))
            (§ block
                (§ if (< (.. bis (available)) 1))
                (§ block
                    (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_UNKNOWN_ERROR, "Unexpected end of script"))
                )
                (§ ass (§ name dataToRead) (.. bis (read)))
            )
            (§ elseif (§ expr opcode == OP_PUSHDATA2))
            (§ block
                ;; Read a short, then read that many bytes of data.
                (§ if (< (.. bis (available)) 2))
                (§ block
                    (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_UNKNOWN_ERROR, "Unexpected end of script"))
                )
                (§ ass (§ name dataToRead) (| (.. bis (read)) (<< (.. bis (read)) 8)))
            )
            (§ elseif (§ expr opcode == OP_PUSHDATA4))
            (§ block
                ;; Read a uint32, then read that many bytes of data.
                ;; Though this is allowed, because its value cannot be > 520, it should never actually be used.
                (§ if (< (.. bis (available)) 4))
                (§ block
                    (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_UNKNOWN_ERROR, "Unexpected end of script"))
                )
                (§ ass (§ name dataToRead) (§ expr (§ cast #_"long" (.. bis (read))) | (<< (§ cast #_"long" (.. bis (read))) 8) | (<< (§ cast #_"long" (.. bis (read))) 16) | (<< (§ cast #_"long" (.. bis (read))) 24)))
            )

            (§ var #_"ScriptChunk" (§ name chunk))
            (§ if (§ expr dataToRead == -1))
            (§ block
                (§ ass (§ name chunk) (§ new #_"ScriptChunk" opcode, nil, startLocationInProgram))
            )
            (§ else )
            (§ block
                (§ if (< (.. bis (available)) dataToRead))
                (§ block
                    (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_BAD_OPCODE, "Push of data element that is larger than remaining data"))
                )

                (§ var #_"byte[]" (§ name data) (§ new #_"byte[]" (§ count (§ cast #_"int" dataToRead))))
                (Preconditions/checkState (§ or (== dataToRead 0) || (== (.. bis (read data, 0, (§ cast #_"int" dataToRead))) dataToRead)))
                (§ ass (§ name chunk) (§ new #_"ScriptChunk" opcode, data, startLocationInProgram))
            )
            ;; Save some memory by eliminating redundant copies of the same chunk objects.
            (§ for (§ var #_"ScriptChunk" (§ name c)) :for STANDARD_TRANSACTION_SCRIPT_CHUNKS)
            (§ block
                (§ if (.. c (equals chunk)))
                (§ block
                    (§ ass (§ name chunk) c)
                )
            )
            (.. chunks (add chunk))
        )
        nil
    )

    ;;;
     ; Returns true if this script is of the form <pubkey> OP_CHECKSIG.  This form was originally intended for
     ; transactions where the peers talked to each other directly via TCP/IP, but has fallen out of favor with time
     ; due to that mode of operation being susceptible to man-in-the-middle attacks.  It is still used in coinbase
     ; outputs and can be useful more exotic types of transaction, but today most payments are to addresses.
     ;;
    #_public
    (§ method #_"boolean" (§ fn isSentToRawPubKey) [])
    (§ block
        (§ expr (.. chunks (size)) == 2 && (.. chunks (get 1) (equalsOpCode OP_CHECKSIG)) && (§ not (.. chunks (get 0) (isOpCode))) && 1 < (.. chunks (get 0) data length))
    )

    ;;;
     ; Returns true if this script is of the form DUP HASH160 <pubkey hash> EQUALVERIFY CHECKSIG, i.e. payment to an
     ; address like 1VayNert3x1KzbpzMGt2qdqrAThiRovi8.  This form was originally intended for the case where you wish
     ; to send somebody money with a written code because their node is offline, but over time has become the standard
     ; way to make payments due to the short and recognizable base58 form addresses come in.
     ;;
    #_public
    (§ method #_"boolean" (§ fn isSentToAddress) [])
    (§ block
        (§ expr (.. chunks (size)) == 5 && (.. chunks (get 0) (equalsOpCode OP_DUP)) && (.. chunks (get 1) (equalsOpCode OP_HASH160)) && (.. chunks (get 2) data length) == Address/LENGTH && (.. chunks (get 3) (equalsOpCode OP_EQUALVERIFY)) && (.. chunks (get 4) (equalsOpCode OP_CHECKSIG)))
    )

    ;;;
     ; <p>If a program matches the standard template DUP HASH160 &lt;pubkey hash&gt; EQUALVERIFY CHECKSIG,
     ; then this function retrieves the third element.
     ; In this case, this is useful for fetching the destination address of a transaction.</p>
     ;
     ; <p>If a program matches the standard template HASH160 &lt;script hash&gt; EQUAL,
     ; then this function retrieves the second element.
     ; In this case, this is useful for fetching the hash of the redeem script of a transaction.</p>
     ;
     ; <p>Otherwise it throws a ScriptException.</p>
     ;
     ;;
    #_public
    (§ method #_"byte[]" (§ fn getPubKeyHash) [])
        (§ throws #_"ScriptException")
    (§ block
        (§ if (isSentToAddress))
        (§ block
            (§ return (.. chunks (get 2) data))
        )
        (§ if (isPayToScriptHash))
        (§ block
            (§ return (.. chunks (get 1) data))
        )

        (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_UNKNOWN_ERROR, "Script not in the standard scriptPubKey form"))
    )

    ;;;
     ; Returns the public key in this script.  If a script contains two constants and nothing else, it is assumed
     ; to be a scriptSig (input) for a pay-to-address output and the second constant is returned (the first is the
     ; signature).  If a script contains a constant and an OP_CHECKSIG opcode, the constant is returned as it is
     ; assumed to be a direct pay-to-key scriptPubKey (output) and the first constant is the public key.
     ;
     ; @throws ScriptException if the script is none of the named forms.
     ;;
    #_public
    (§ method #_"byte[]" (§ fn getPubKey) [])
        (§ throws #_"ScriptException")
    (§ block
        (§ if (!= (.. chunks (size)) 2))
        (§ block
            (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_UNKNOWN_ERROR, (§ str "Script not of right size, expecting 2 but got " + (.. chunks (size)))))
        )

        (§ var #_"ScriptChunk" (§ name chunk0) (.. chunks (get 0)))
        (§ var #_"byte[]" (§ name chunk0data) (.. chunk0 data))
        (§ var #_"ScriptChunk" (§ name chunk1) (.. chunks (get 1)))
        (§ var #_"byte[]" (§ name chunk1data) (.. chunk1 data))

        ;; If we have two large constants assume the input to a pay-to-address output.
        (§ if (§ expr chunk0data != nil && 2 < (.. chunk0data length) && chunk1data != nil && 2 < (.. chunk1data length)))
        (§ block
            (§ return chunk1data)
        )

        ;; A large constant followed by an OP_CHECKSIG is the key.
        (§ if (§ expr (.. chunk1 (equalsOpCode OP_CHECKSIG)) && chunk0data != nil && 2 < (.. chunk0data length)))
        (§ block
            (§ return chunk0data)
        )

        (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_UNKNOWN_ERROR, (§ expr "Script did not match expected form: " + this)))
    )

    ;;;
     ; Retrieves the sender public key from a LOCKTIMEVERIFY transaction.
     ;
     ; @throws ScriptException
     ;;
    #_public
    (§ method #_"byte[]" (§ fn getCLTVPaymentChannelSenderPubKey) [])
        (§ throws #_"ScriptException")
    (§ block
        (§ if (isSentToCLTVPaymentChannel))
        (§ block
            (§ return (.. chunks (get 8) data))
        )

        (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_UNKNOWN_ERROR, (§ expr "Script not a standard CHECKLOCKTIMVERIFY transaction: " + this)))
    )

    ;;;
     ; Retrieves the recipient public key from a LOCKTIMEVERIFY transaction.
     ;
     ; @throws ScriptException
     ;;
    #_public
    (§ method #_"byte[]" (§ fn getCLTVPaymentChannelRecipientPubKey) [])
        (§ throws #_"ScriptException")
    (§ block
        (§ if (isSentToCLTVPaymentChannel))
        (§ block
            (§ return (.. chunks (get 1) data))
        )

        (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_UNKNOWN_ERROR, (§ expr "Script not a standard CHECKLOCKTIMVERIFY transaction: " + this)))
    )

    #_public
    (§ method #_"BigInteger" (§ fn getCLTVPaymentChannelExpiry) [])
    (§ block
        (§ if (isSentToCLTVPaymentChannel))
        (§ block
            (§ return (castToBigInteger (.. chunks (get 4) data), 5, false))
        )

        (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_UNKNOWN_ERROR, (§ expr "Script not a standard CHECKLOCKTIMEVERIFY transaction: " + this)))
    )

    ;;;
     ; For 2-element [input] scripts assumes that the paid-to-address can be derived from the public key.
     ; The concept of a "from address" isn't well defined in Bitcoin and you should not assume the sender
     ; of a transaction can actually receive coins on it. This method may be removed in future.
     ;;
    #_deprecated
    #_public
    (§ method #_"Address" (§ fn getFromAddress) [#_"NetworkParameters" (§ name params)])
        (§ throws #_"ScriptException")
    (§ block
        (§ new #_"Address" params, (Utils/sha256hash160 (getPubKey)))
    )

    ;;;
     ; Gets the destination address from this script, if it's in the required form (see getPubKey).
     ;;
    #_public
    (§ method #_"Address" (§ fn getToAddress) [#_"NetworkParameters" (§ name params)])
        (§ throws #_"ScriptException")
    (§ block
        (getToAddress params, false)
    )

    ;;;
     ; Gets the destination address from this script, if it's in the required form (see getPubKey).
     ;
     ; @param forcePayToPubKey If true, allow payToPubKey to be casted to the corresponding address.
     ;                         This is useful if you prefer showing addresses rather than pubkeys.
     ;;
    #_public
    (§ method #_"Address" (§ fn getToAddress) [#_"NetworkParameters" (§ name params), #_"boolean" (§ name forcePayToPubKey)])
        (§ throws #_"ScriptException")
    (§ block
        (§ if (isSentToAddress))
        (§ block
            (§ return (§ new #_"Address" params, (getPubKeyHash)))
        )
        (§ if (isPayToScriptHash))
        (§ block
            (§ return (Address/fromP2SHScript params, this))
        )
        (§ if (§ expr forcePayToPubKey && (isSentToRawPubKey)))
        (§ block
            (§ return (.. (ECKey/fromPublicOnly (getPubKey)) (toAddress params)))
        )

        (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_UNKNOWN_ERROR, "Cannot cast this script to a pay-to-address type"))
    )

    ;;;
     ; Writes out the given byte buffer to the output stream with the correct opcode prefix.
     ; To write an integer call writeBytes(out, Utils.reverseBytes(Utils.encodeMPI(val, false))).
     ;;
    #_public
    #_static
    (§ defn #_"void" (§ fn writeBytes) [#_"OutputStream" (§ name os), #_"byte[]" (§ name buf)])
        (§ throws #_"IOException")
    (§ block
        (§ if (< (.. buf length) OP_PUSHDATA1))
        (§ block
            (.. os (write (.. buf length)))
            (.. os (write buf))
        )
        (§ elseif (< (.. buf length) 256))
        (§ block
            (.. os (write OP_PUSHDATA1))
            (.. os (write (.. buf length)))
            (.. os (write buf))
        )
        (§ elseif (< (.. buf length) 65536))
        (§ block
            (.. os (write OP_PUSHDATA2))
            (.. os (write (§ expr 0xff & (.. buf length))))
            (.. os (write (§ expr 0xff & (>> (.. buf length) 8))))
            (.. os (write buf))
        )
        (§ else )
        (§ block
            (§ throw (§ new #_"RuntimeException" "Unimplemented"))
        )
        nil
    )

    ;;; Creates a program that requires at least N of the given keys to sign, using OP_CHECKMULTISIG. ;;
    #_public
    #_static
    (§ defn #_"byte[]" (§ fn createMultiSigOutputScript) [#_"int" (§ name threshold), #_"List<ECKey>" (§ name pubkeys)])
    (§ block
        (Preconditions/checkArgument (< 0 threshold))
        (Preconditions/checkArgument (§ expr threshold <= (.. pubkeys (size))))
        (Preconditions/checkArgument (<= (.. pubkeys (size)) 16)) ;; That's the max we can represent with a single opcode.

        (§ if (§ expr 3 < (.. pubkeys (size))))
        (§ block
            (.. log (warn "Creating a multi-signature output that is non-standard: {} pubkeys, should be <= 3", (.. pubkeys (size))))
        )

        (§ try )
        (§ block
            (§ var #_"ByteArrayOutputStream" (§ name bits) (§ new #_"ByteArrayOutputStream"))
            (.. bits (write (encodeToOpN threshold)))
            (§ for (§ var #_"ECKey" (§ name key)) :for pubkeys)
            (§ block
                (writeBytes bits, (.. key (getPubKey)))
            )
            (.. bits (write (encodeToOpN (.. pubkeys (size)))))
            (.. bits (write OP_CHECKMULTISIG))
            (§ return (.. bits (toByteArray)))
        )
        (§ catch #_"IOException" (§ name e))
        (§ block
            (§ throw (§ new #_"RuntimeException" e)) ;; Cannot happen.
        )
    )

    #_public
    #_static
    (§ defn #_"byte[]" (§ fn createInputScript) [#_"byte[]" (§ name signature), #_"byte[]" (§ name pubkey)])
    (§ block
        (§ try )
        (§ block
            ;; TODO: Do this by creating a Script *first* then having the script reassemble itself into bytes.
            (§ var #_"ByteArrayOutputStream" (§ name bits) (§ new #_"UnsafeByteArrayOutputStream" (§ expr (.. signature length) + (.. pubkey length) + 2)))
            (writeBytes bits, signature)
            (writeBytes bits, pubkey)
            (§ return (.. bits (toByteArray)))
        )
        (§ catch #_"IOException" (§ name e))
        (§ block
            (§ throw (§ new #_"RuntimeException" e))
        )
    )

    #_public
    #_static
    (§ defn #_"byte[]" (§ fn createInputScript) [#_"byte[]" (§ name signature)])
    (§ block
        (§ try )
        (§ block
            ;; TODO: Do this by creating a Script *first* then having the script reassemble itself into bytes.
            (§ var #_"ByteArrayOutputStream" (§ name bits) (§ new #_"UnsafeByteArrayOutputStream" (+ (.. signature length) 2)))
            (writeBytes bits, signature)
            (§ return (.. bits (toByteArray)))
        )
        (§ catch #_"IOException" (§ name e))
        (§ block
            (§ throw (§ new #_"RuntimeException" e))
        )
    )

    ;;;
     ; Creates an incomplete scriptSig that, once filled with signatures, can redeem output containing this scriptPubKey.
     ; Instead of the signatures resulting script has OP_0.
     ; Having incomplete input script allows to pass around partially signed tx.
     ; It is expected that this program later on will be updated with proper signatures.
     ;;
    #_public
    (§ method #_"Script" (§ fn createEmptyInputScript) [#_nilable #_"ECKey" (§ name key), #_nilable #_"Script" (§ name redeemScript)])
    (§ block
        (§ if (isSentToAddress))
        (§ block
            (Preconditions/checkArgument (some? key), "Key required to create pay-to-address input script")
            (§ return (ScriptBuilder/createInputScript nil, key))
        )

        (§ if (isSentToRawPubKey))
        (§ block
            (§ return (ScriptBuilder/createInputScript nil))
        )

        (§ if (isPayToScriptHash))
        (§ block
            (Preconditions/checkArgument (some? redeemScript), "Redeem script required to create P2SH input script")
            (§ return (ScriptBuilder/createP2SHMultiSigInputScript nil, redeemScript))
        )

        (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_UNKNOWN_ERROR, (§ expr "Do not understand script type: " + this)))
    )

    ;;;
     ; Returns a copy of the given scriptSig with the signature inserted in the given position.
     ;;
    #_public
    (§ method #_"Script" (§ fn getScriptSigWithSignature) [#_"Script" (§ name scriptSig), #_"byte[]" (§ name sigBytes), #_"int" (§ name index)])
    (§ block
        (§ var #_"int" (§ name sigsPrefixCount) 0)
        (§ var #_"int" (§ name sigsSuffixCount) 0)
        (§ if (isPayToScriptHash))
        (§ block
            (§ ass (§ name sigsPrefixCount) 1) ;; OP_0 <sig>* <redeemScript>
            (§ ass (§ name sigsSuffixCount) 1)
        )
        (§ elseif (isSentToMultiSig))
        (§ block
            (§ ass (§ name sigsPrefixCount) 1) ;; OP_0 <sig>*
        )
        (§ elseif (isSentToAddress))
        (§ block
            (§ ass (§ name sigsSuffixCount) 1) ;; <sig> <pubkey>
        )
        (ScriptBuilder/updateScriptWithSignature scriptSig, sigBytes, index, sigsPrefixCount, sigsSuffixCount)
    )

    ;;;
     ; Returns the index where a signature by the key should be inserted.
     ; Only applicable to a P2SH scriptSig.
     ;;
    #_public
    (§ method #_"int" (§ fn getSigInsertionIndex) [#_"Sha256Hash" (§ name hash), #_"ECKey" (§ name signingKey)])
    (§ block
        ;; Iterate over existing signatures, skipping the initial OP_0, the final redeem script
        ;; and any placeholder OP_0 sigs.
        (§ var #_"List<ScriptChunk>" (§ name existingChunks) (.. chunks (subList 1, (§ expr (.. chunks (size)) - 1))))
        (§ var #_"ScriptChunk" (§ name redeemScriptChunk) (.. chunks (get (- (.. chunks (size)) 1))))
        (Preconditions/checkNotNull (.. redeemScriptChunk data))
        (§ var #_"Script" (§ name redeemScript) (§ new #_"Script" (.. redeemScriptChunk data)))

        (§ var #_"int" (§ name sigCount) 0)
        (§ var #_"int" (§ name myIndex) (.. redeemScript (findKeyInRedeem signingKey)))
        (§ for (§ var #_"ScriptChunk" (§ name chunk)) :for existingChunks)
        (§ block
            (§ if (== (.. chunk opcode) OP_0))
            (§ block
                ;; OP_0, skip
            )
            (§ else )
            (§ block
                (Preconditions/checkNotNull (.. chunk data))
                (§ if (§ expr myIndex < (.. redeemScript (findSigInRedeem (.. chunk data), hash))))
                (§ block
                    (§ return sigCount)
                )
                (§ ass (§ name sigCount) (+ sigCount 1))
            )
        )
        sigCount
    )

    #_private
    (§ method- #_"int" (§ fn findKeyInRedeem) [#_"ECKey" (§ name key)])
    (§ block
        (Preconditions/checkArgument (.. chunks (get 0) (isOpCode))) ;; P2SH scriptSig

        (§ var #_"int" (§ name numKeys) (Script/decodeFromOpN (.. chunks (get (- (.. chunks (size)) 2)) opcode)))
        (§ for (§ var #_"int" (§ name i) 0) :for (< i numKeys) :for (§ ass (§ name i) (+ i 1)))
        (§ block
            (§ if (Arrays/equals (.. chunks (get (+ 1 i)) data), (.. key (getPubKey))))
            (§ block
                (§ return i)
            )
        )

        (§ throw (§ new #_"IllegalStateException" (§ expr "Could not find matching key " + key + " in script " + this)))
    )

    ;;;
     ; Returns a list of the keys required by this script, assuming a multi-sig script.
     ;
     ; @throws ScriptException if the script type is not understood or is pay to address or is P2SH (run this method on the "Redeem script" instead).
     ;;
    #_public
    (§ method #_"List<ECKey>" (§ fn getPubKeys) [])
    (§ block
        (§ if (§ not (isSentToMultiSig)))
        (§ block
            (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_UNKNOWN_ERROR, "Only usable for multisig scripts."))
        )

        (§ var #_"ArrayList<ECKey>" (§ name result) (Lists/newArrayList))
        (§ var #_"int" (§ name numKeys) (Script/decodeFromOpN (.. chunks (get (- (.. chunks (size)) 2)) opcode)))
        (§ for (§ var #_"int" (§ name i) 0) :for (< i numKeys) :for (§ ass (§ name i) (+ i 1)))
        (§ block
            (.. result (add (ECKey/fromPublicOnly (.. chunks (get (+ 1 i)) data))))
        )
        result
    )

    #_private
    (§ method- #_"int" (§ fn findSigInRedeem) [#_"byte[]" (§ name signatureBytes), #_"Sha256Hash" (§ name hash)])
    (§ block
        (Preconditions/checkArgument (.. chunks (get 0) (isOpCode))) ;; P2SH scriptSig

        (§ var #_"int" (§ name numKeys) (Script/decodeFromOpN (.. chunks (get (- (.. chunks (size)) 2)) opcode)))
        (§ var #_"TransactionSignature" (§ name signature) (TransactionSignature/decodeFromBitcoin signatureBytes, true))
        (§ for (§ var #_"int" (§ name i) 0) :for (< i numKeys) :for (§ ass (§ name i) (+ i 1)))
        (§ block
            (§ if (.. (ECKey/fromPublicOnly (.. chunks (get (+ i 1)) data)) (verify hash, signature)))
            (§ block
                (§ return i)
            )
        )

        (§ throw (§ new #_"IllegalStateException" (§ expr "Could not find matching key for signature on " + hash + " sig " + (.. Utils/HEX (encode signatureBytes)))))
    )

    #_private
    #_static
    (§ defn- #_"int" (§ fn getSigOpCount) [#_"List<ScriptChunk>" (§ name chunks), #_"boolean" (§ name accurate)])
        (§ throws #_"ScriptException")
    (§ block
        (§ var #_"int" (§ name sigOps) 0)
        (§ var #_"int" (§ name lastOpCode) OP_INVALIDOPCODE)
        (§ for (§ var #_"ScriptChunk" (§ name chunk)) :for chunks)
        (§ block
            (§ if (.. chunk (isOpCode)))
            (§ block
                (§ switch (.. chunk opcode))
                (§ block
                    (§ case OP_CHECKSIG)
                    (§ case OP_CHECKSIGVERIFY)
                    (§ block
                        (§ ass (§ name sigOps) (+ sigOps 1))
                        (§ break )
                    )
                    (§ case OP_CHECKMULTISIG)
                    (§ case OP_CHECKMULTISIGVERIFY)
                    (§ block
                        (§ if (§ expr accurate && OP_1 <= lastOpCode && lastOpCode <= OP_16))
                        (§ block
                            (§ ass (§ name sigOps) (§ expr sigOps + (decodeFromOpN lastOpCode)))
                        )
                        (§ else )
                        (§ block
                            (§ ass (§ name sigOps) (+ sigOps 20))
                        )
                        (§ break )
                    )
                    (§ default )
                    (§ block
                        (§ break )
                    )
                )
                (§ ass (§ name lastOpCode) (.. chunk opcode))
            )
        )
        sigOps
    )

    #_static
    (§ defn #_"int" (§ fn decodeFromOpN) [#_"int" (§ name opcode)])
    (§ block
        (Preconditions/checkArgument (§ or (== opcode OP_0) || (== opcode OP_1NEGATE) || (<= OP_1 opcode OP_16)), "decodeFromOpN called on non OP_N opcode")

        (§ if (§ expr opcode == OP_0))
        (§ block
            (§ return 0)
        )
        (§ if (§ expr opcode == OP_1NEGATE))
        (§ block
            (§ return -1)
        )

        (§ expr opcode + 1 - OP_1)
    )

    #_static
    (§ defn #_"int" (§ fn encodeToOpN) [#_"int" (§ name value)])
    (§ block
        (Preconditions/checkArgument (<= -1 value 16), (§ str "encodeToOpN called for " + value + " which we cannot encode in an opcode."))

        (§ if (§ expr value == 0))
        (§ block
            (§ return OP_0)
        )
        (§ if (§ expr value == -1))
        (§ block
            (§ return OP_1NEGATE)
        )

        (§ expr value - 1 + OP_1)
    )

    ;;;
     ; Gets the count of regular SigOps in the script program (counting multisig ops as 20).
     ;;
    #_public
    #_static
    (§ defn #_"int" (§ fn getSigOpCount) [#_"byte[]" (§ name program)])
        (§ throws #_"ScriptException")
    (§ block
        (§ var #_"Script" (§ name script) (§ new #_"Script"))
        (§ try )
        (§ block
            (.. script (parse program))
        )
        (§ catch #_"ScriptException" (§ name _))
        (§ block
            ;; Ignore errors and count up to the parse-able length.
        )
        (getSigOpCount (.. script chunks), false)
    )

    ;;;
     ; Gets the count of P2SH Sig Ops in the Script scriptSig.
     ;;
    #_public
    #_static
    (§ defn #_"long" (§ fn getP2SHSigOpCount) [#_"byte[]" (§ name scriptSig)])
        (§ throws #_"ScriptException")
    (§ block
        (§ var #_"Script" (§ name script) (§ new #_"Script"))
        (§ try )
        (§ block
            (.. script (parse scriptSig))
        )
        (§ catch #_"ScriptException" (§ name _))
        (§ block
            ;; Ignore errors and count up to the parse-able length.
        )
        (§ for (§ var #_"int" (§ name i) (- (.. script chunks (size)) 1)) :for (<= 0 i) :for (§ ass (§ name i) (- i 1)))
        (§ block
            (§ if (§ not (.. script chunks (get i) (isOpCode))))
            (§ block
                (§ var #_"Script" (§ name subScript) (§ new #_"Script"))
                (.. subScript (parse (.. script chunks (get i) data)))
                (§ return (getSigOpCount (.. subScript chunks), true))
            )
        )
        0
    )

    ;;;
     ; Returns number of signatures required to satisfy this script.
     ;;
    #_public
    (§ method #_"int" (§ fn getNumberOfSignaturesRequiredToSpend) [])
    (§ block
        ;; For N of M CHECKMULTISIG script we will need N signatures to spend.
        (§ if (isSentToMultiSig))
        (§ block
            (§ return (Script/decodeFromOpN (.. chunks (get 0) opcode)))
        )

        ;; pay-to-address and pay-to-pubkey require single sig
        (§ if (§ expr (isSentToAddress) || (isSentToRawPubKey)))
        (§ block
            (§ return 1)
        )

        (§ if (isPayToScriptHash))
        (§ block
            (§ throw (§ new #_"IllegalStateException" "For P2SH number of signatures depends on redeem script"))
        )

        (§ throw (§ new #_"IllegalStateException" "Unsupported script type"))
    )

    ;;;
     ; Returns number of bytes required to spend this script.  It accepts optional ECKey and redeemScript
     ; that may be required for certain types of script to estimate target size.
     ;;
    #_public
    (§ method #_"int" (§ fn getNumberOfBytesRequiredToSpend) [#_nilable #_"ECKey" (§ name pubKey), #_nilable #_"Script" (§ name redeemScript)])
    (§ block
        (§ if (isPayToScriptHash))
        (§ block
            ;; scriptSig: <sig> [sig] [sig...] <redeemscript>
            (Preconditions/checkArgument (some? redeemScript), "P2SH script requires redeemScript to be spent")
            (§ return (§ expr (.. redeemScript (getNumberOfSignaturesRequiredToSpend)) * SIG_SIZE + (.. redeemScript (getProgram) length)))
        )
        (§ elseif (isSentToMultiSig))
        (§ block
            ;; scriptSig: OP_0 <sig> [sig] [sig...]
            (§ return (§ expr (getNumberOfSignaturesRequiredToSpend) * SIG_SIZE + 1))
        )
        (§ elseif (isSentToRawPubKey))
        (§ block
            ;; scriptSig: <sig>
            (§ return SIG_SIZE)
        )
        (§ elseif (isSentToAddress))
        (§ block
            ;; scriptSig: <sig> <pubkey>
            (§ var #_"int" (§ name uncompressedPubKeySize) 65)
            (§ return (+ SIG_SIZE (if (some? pubKey) (.. pubKey (getPubKey) length) uncompressedPubKeySize)))
        )
        (§ else )
        (§ block
            (§ throw (§ new #_"IllegalStateException" "Unsupported script type"))
        )
    )

    ;;;
     ; <p>Whether or not this is a scriptPubKey representing a pay-to-script-hash output.  In such outputs, the logic
     ; that controls reclamation is not actually in the output at all.  Instead there's just a hash, and it's up to the
     ; spending input to provide a program matching that hash.  This rule is "soft enforced" by the network as it does
     ; not exist in Bitcoin Core.  It means blocks containing P2SH transactions that don't match
     ; correctly are considered valid, but won't be mined upon, so they'll be rapidly re-orgd out of the chain.  This
     ; logic is defined by <a href="https://github.com/bitcoin/bips/blob/master/bip-0016.mediawiki">BIP 16</a>.</p>
     ;
     ; <p>bitcoinj does not support creation of P2SH transactions today.  The goal of P2SH is to allow short addresses
     ; even for complex scripts (e.g. multi-sig outputs) so they are convenient to work with in things like QRcodes or
     ; with copy/paste, and also to minimize the size of the unspent output set (which improves performance of the
     ; Bitcoin system).</p>
     ;;
    #_public
    (§ method #_"boolean" (§ fn isPayToScriptHash) [])
    (§ block
        ;; We have to check against the serialized form because BIP16 defines a P2SH output using an exact byte
        ;; template, not the logical program structure.  Thus you can have two programs that look identical when
        ;; printed out but one is a P2SH script and the other isn't! :( ;; )
        (§ var #_"byte[]" (§ name program) (getProgram))
        (§ expr (.. program length) == 23 && (§ expr (§ ai program 0) & 0xff) == OP_HASH160 && (§ expr (§ ai program 1) & 0xff) == 0x14 && (§ expr (§ ai program 22) & 0xff) == OP_EQUAL)
    )

    ;;;
     ; Returns whether this script matches the format used for multisig outputs: [n] [keys...] [m] CHECKMULTISIG.
     ;;
    #_public
    (§ method #_"boolean" (§ fn isSentToMultiSig) [])
    (§ block
        (§ if (< (.. chunks (size)) 4))
        (§ block
            (§ return false)
        )

        (§ var #_"ScriptChunk" (§ name chunk) (.. chunks (get (- (.. chunks (size)) 1))))
        ;; Must end in OP_CHECKMULTISIG[VERIFY].
        (§ if (§ not (.. chunk (isOpCode))))
        (§ block
            (§ return false)
        )
        (§ if (§ not (§ expr (.. chunk (equalsOpCode OP_CHECKMULTISIG)) || (.. chunk (equalsOpCode OP_CHECKMULTISIGVERIFY)))))
        (§ block
            (§ return false)
        )

        (§ try )
        (§ block
            ;; Second to last chunk must be an OP_N opcode and there should be that many data chunks (keys).
            (§ var #_"ScriptChunk" (§ name m) (.. chunks (get (- (.. chunks (size)) 2))))
            (§ if (§ not (.. m (isOpCode))))
            (§ block
                (§ return false)
            )

            (§ var #_"int" (§ name numKeys) (decodeFromOpN (.. m opcode)))
            (§ if (§ expr numKeys < 1 || (.. chunks (size)) != 3 + numKeys))
            (§ block
                (§ return false)
            )

            (§ for (§ var #_"int" (§ name i) 1) :for (§ expr i < (.. chunks (size)) - 2) :for (§ ass (§ name i) (+ i 1)))
            (§ block
                (§ if (.. chunks (get i) (isOpCode)))
                (§ block
                    (§ return false)
                )
            )

            ;; First chunk must be an OP_N opcode too.
            (§ if (< (decodeFromOpN (.. chunks (get 0) opcode)) 1))
            (§ block
                (§ return false)
            )
        )
        (§ catch #_"IllegalStateException" (§ name e))
        (§ block
            (§ return false) ;; Not an OP_N opcode.
        )
        true
    )

    #_public
    (§ method #_"boolean" (§ fn isSentToCLTVPaymentChannel) [])
    (§ block
        ;; Check that opcodes match the pre-determined format.
        ;; chunk[1] = recipient pubkey
        ;; chunk[4] = locktime
        ;; chunk[8] = sender pubkey
        (§ expr (== (.. chunks (size)) 10) && (.. chunks (get 0) (equalsOpCode OP_IF)) && (.. chunks (get 2) (equalsOpCode OP_CHECKSIGVERIFY)) && (.. chunks (get 3) (equalsOpCode OP_ELSE)) && (.. chunks (get 5) (equalsOpCode OP_CHECKLOCKTIMEVERIFY)) && (.. chunks (get 6) (equalsOpCode OP_DROP)) && (.. chunks (get 7) (equalsOpCode OP_ENDIF)) && (.. chunks (get 9) (equalsOpCode OP_CHECKSIG)))
    )

    #_private
    #_static
    (§ defn- #_"boolean" (§ fn equalsRange) [#_"byte[]" (§ name a), #_"int" (§ name start), #_"byte[]" (§ name b)])
    (§ block
        (§ if (§ expr (.. a length) < start + (.. b length)))
        (§ block
            (§ return false)
        )

        (§ for (§ var #_"int" (§ name i) 0) :for (§ expr i < (.. b length)) :for (§ ass (§ name i) (+ i 1)))
        (§ block
            (§ if (§ expr (§ ai a (§ expr i + start)) != (§ ai b i)))
            (§ block
                (§ return false)
            )
        )

        true
    )

    ;;;
     ; Returns the script bytes of inputScript with all instances of the specified script object removed.
     ;;
    #_public
    #_static
    (§ defn #_"byte[]" (§ fn removeAllInstancesOf) [#_"byte[]" (§ name inputScript), #_"byte[]" (§ name chunkToRemove)])
    (§ block
        ;; We usually don't end up removing anything.
        (§ var #_"UnsafeByteArrayOutputStream" (§ name bos) (§ new #_"UnsafeByteArrayOutputStream" (.. inputScript length)))

        (§ var #_"int" (§ name cursor) 0)
        (§ while (§ expr cursor < (.. inputScript length)))
        (§ block
            (§ var #_"boolean" (§ name skip) (equalsRange inputScript, cursor, chunkToRemove))

            (§ var #_"int" (§ name opcode) (§ expr (§ ai inputScript cursor) & 0xff))
            (§ ass (§ name cursor) (+ cursor 1))
            (§ var #_"int" (§ name additionalBytes) 0)
            (§ if (§ expr 0 <= opcode && opcode < OP_PUSHDATA1))
            (§ block
                (§ ass (§ name additionalBytes) opcode)
            )
            (§ elseif (§ expr opcode == OP_PUSHDATA1))
            (§ block
                (§ ass (§ name additionalBytes) (+ (§ expr 0xff & (§ ai inputScript cursor)) 1))
            )
            (§ elseif (§ expr opcode == OP_PUSHDATA2))
            (§ block
                (§ ass (§ name additionalBytes) (+ (| (§ expr 0xff & (§ ai inputScript cursor)) (<< (§ expr 0xff & (§ ai inputScript (§ expr cursor + 1))) 8)) 2))
            )
            (§ elseif (§ expr opcode == OP_PUSHDATA4))
            (§ block
                (§ ass (§ name additionalBytes) (+ (§ expr (§ expr 0xff & (§ ai inputScript cursor)) | (<< (§ expr 0xff & (§ ai inputScript (§ expr cursor + 1))) 8) | (<< (§ expr 0xff & (§ ai inputScript (§ expr cursor + 1))) 16) | (<< (§ expr 0xff & (§ ai inputScript (§ expr cursor + 1))) 24)) 4))
            )
            (§ if (§ not skip))
            (§ block
                (§ try )
                (§ block
                    (.. bos (write opcode))
                    (.. bos (write (Arrays/copyOfRange inputScript, cursor, (§ expr cursor + additionalBytes))))
                )
                (§ catch #_"IOException" (§ name e))
                (§ block
                    (§ throw (§ new #_"RuntimeException" e))
                )
            )
            (§ ass (§ name cursor) (+ cursor additionalBytes))
        )
        (.. bos (toByteArray))
    )

    ;;;
     ; Returns the script bytes of inputScript with all instances of the given op code removed.
     ;;
    #_public
    #_static
    (§ defn #_"byte[]" (§ fn removeAllInstancesOfOp) [#_"byte[]" (§ name inputScript), #_"int" (§ name opCode)])
    (§ block
        (removeAllInstancesOf inputScript, (§ expr (§ new #_"byte[]" (§ coll (§ cast #_"byte" opCode)))))
    )

    #_private
    #_static
    (§ defn- #_"boolean" (§ fn castToBool) [#_"byte[]" (§ name data)])
    (§ block
        (§ for (§ var #_"int" (§ name i) 0) :for (§ expr i < (.. data length)) :for (§ ass (§ name i) (+ i 1)))
        (§ block
            ;; "Can be negative zero" - Bitcoin Core (see OpenSSL's BN_bn2mpi)
            (§ if (§ expr (§ ai data i) != 0))
            (§ block
                (§ return (§ expr i != (.. data length) - 1 || (§ expr (§ ai data i) & 0xff) != 0x80))
            )
        )
        false
    )

    ;;;
     ; Cast a script chunk to a BigInteger.
     ;
     ; @see #castToBigInteger(byte[], int) for values with different maximum sizes.
     ; @throws ScriptException if the chunk is longer than 4 bytes.
     ;;
    #_private
    #_static
    (§ defn- #_"BigInteger" (§ fn castToBigInteger) [#_"byte[]" (§ name chunk), #_"boolean" (§ name requireMinimal)])
        (§ throws #_"ScriptException")
    (§ block
        (castToBigInteger chunk, 4, requireMinimal)
    )

    ;;;
     ; Cast a script chunk to a BigInteger.  Normally you would want {@link #castToBigInteger(byte[])} instead, this
     ; is only for cases where the normal maximum length does not apply (i.e. CHECKLOCKTIMEVERIFY, CHECKSEQUENCEVERIFY).
     ;
     ; @param maxLength The maximum length in bytes.
     ; @param requireMinimal Check if the number is encoded with the minimum possible number of bytes.
     ; @throws ScriptException if the chunk is longer than the specified maximum.
     ;;
    #_private
    #_static
    (§ defn- #_"BigInteger" (§ fn castToBigInteger) [#_"byte[]" (§ name chunk), #_"int" (§ name maxLength), #_"boolean" (§ name requireMinimal)])
        (§ throws #_"ScriptException")
    (§ block
        (§ if (§ expr maxLength < (.. chunk length)))
        (§ block
            (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_UNKNOWN_ERROR, (§ expr "Script attempted to use an integer larger than " + maxLength + " bytes")))
        )

        (§ if (§ expr requireMinimal && 0 < (.. chunk length)))
        (§ block
            ;; Check that the number is encoded with the minimum possible number of bytes.
            ;;
            ;; If the most-significant-byte - excluding the sign bit - is zero, then we're not minimal.
            ;; Note how this test also rejects the negative-zero encoding, 0x80.
            (§ if (== (§ expr (§ ai chunk (§ expr chunk.length - 1)) & 0x7f) 0))
            (§ block
                ;; One exception: if there's more than one byte and the most significant bit
                ;; of the second-most-significant-byte is set, it would conflict with the sign bit.
                ;; An example of this case is +-255, which encode to 0xff00 and 0xff80 respectively.
                ;; (big-endian)
                (§ if (§ expr (.. chunk length) <= 1 || (§ expr (§ ai chunk (§ expr chunk.length - 2)) & 0x80) == 0))
                (§ block
                    (§ throw  new (ScriptException ScriptError/SCRIPT_ERR_UNKNOWN_ERROR, "non-minimally encoded script number"))
                )
            )
        )

        (Utils/decodeMPI (Utils/reverseBytes chunk), false)
    )

    #_public
    (§ method #_"boolean" (§ fn isOpReturn) [])
    (§ block
        (§ expr 0 < (.. chunks (size)) && (.. chunks (get 0) (equalsOpCode OP_RETURN)))
    )

    ;;;
     ; Exposes the script interpreter.  Normally you should not use this directly, instead use
     ; {@link org.bitcoinj.core.TransactionInput#verify(org.bitcoinj.core.TransactionOutput)} or
     ; {@link org.bitcoinj.script.Script#correctlySpends(org.bitcoinj.core.Transaction, long, Script)}.
     ; This method is useful if you need more precise control or access to the final state of the stack.
     ; This interface is very likely to change in future.
     ;
     ; @deprecated Use {@link #executeScript(org.bitcoinj.core.Transaction, long, org.bitcoinj.script.Script, java.util.LinkedList, java.util.Set)}
     ; instead.
     ;;
    #_deprecated
    #_public
    #_static
    (§ defn #_"void" (§ fn executeScript) [#_nilable #_"Transaction" (§ name txContainingThis), #_"long" (§ name index), #_"Script" (§ name script), #_"LinkedList<byte[]>" (§ name stack), #_"boolean" (§ name enforceNullDummy)])
        (§ throws #_"ScriptException")
    (§ block
        (§ var #_"EnumSet<VerifyFlag>" (§ name flags) (if enforceNullDummy (EnumSet/of VerifyFlag/NULLDUMMY) (EnumSet/noneOf (§ klass #_"VerifyFlag"))))

        (executeScript txContainingThis, index, script, stack, flags)
        nil
    )

    ;;;
     ; Exposes the script interpreter.  Normally you should not use this directly, instead use
     ; {@link org.bitcoinj.core.TransactionInput#verify(org.bitcoinj.core.TransactionOutput)} or
     ; {@link org.bitcoinj.script.Script#correctlySpends(org.bitcoinj.core.Transaction, long, Script)}.
     ; This method is useful if you need more precise control or access to the final state of the stack.
     ; This interface is very likely to change in future.
     ;;
    #_public
    #_static
    (§ defn #_"void" (§ fn executeScript) [#_nilable #_"Transaction" (§ name txContainingThis), #_"long" (§ name index), #_"Script" (§ name script), #_"LinkedList<byte[]>" (§ name stack), #_"Set<VerifyFlag>" (§ name verifyFlags)])
        (§ throws #_"ScriptException")
    (§ block
        (§ var #_"int" (§ name opCount) 0)
        (§ var #_"int" (§ name lastCodeSepLocation) 0)

        (§ var #_"LinkedList<byte[]>" (§ name altstack) (§ new #_"LinkedList<>"))
        (§ var #_"LinkedList<Boolean>" (§ name ifStack) (§ new #_"LinkedList<>"))

        (§ for (§ var #_"ScriptChunk" (§ name chunk)) :for (.. script chunks))
        (§ block
            (§ var #_"boolean" (§ name shouldExecute) (§ not (.. ifStack (contains false))))
            (§ var #_"int" (§ name opcode) (.. chunk opcode))

            ;; Check stack element size.
            (§ if (§ expr (.. chunk data) != nil && MAX_SCRIPT_ELEMENT_SIZE < (.. chunk data length)))
            (§ block
                (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_PUSH_SIZE, "Attempted to push a data string larger than 520 bytes"))
            )

            ;; Note how OP_RESERVED does not count towards the opcode limit.
            (§ if (< OP_16 opcode))
            (§ block
                (§ ass (§ name opCount) (+ opCount 1))
                (§ if (< MAX_OPS_PER_SCRIPT opCount))
                (§ block
                    (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_OP_COUNT, "More script operations than is allowed"))
                )
            )

            ;; Disabled opcodes.
            (§ if (§ expr opcode == OP_CAT || opcode == OP_SUBSTR || opcode == OP_LEFT || opcode == OP_RIGHT || opcode == OP_INVERT || opcode == OP_AND || opcode == OP_OR || opcode == OP_XOR || opcode == OP_2MUL || opcode == OP_2DIV || opcode == OP_MUL || opcode == OP_DIV || opcode == OP_MOD || opcode == OP_LSHIFT || opcode == OP_RSHIFT))
            (§ block
                (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_DISABLED_OPCODE, "Script included a disabled Script Op."))
            )

            (§ if (§ expr shouldExecute && OP_0 <= opcode && opcode <= OP_PUSHDATA4))
            (§ block
                ;; Check minimal push.
                (§ if (§ expr (.. verifyFlags (contains VerifyFlag/MINIMALDATA)) && (§ not (.. chunk (isShortestPossiblePushData)))))
                (§ block
                    (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_MINIMALDATA, "Script included a not minimal push operation."))
                )

                (§ if (§ expr opcode == OP_0))
                (§ block
                    (.. stack (add (§ new #_"byte[]")))
                )
                (§ else )
                (§ block
                    (.. stack (add (.. chunk data)))
                )
            )
            (§ elseif (§ expr shouldExecute || (§ expr OP_IF <= opcode && opcode <= OP_ENDIF)))
            (§ block
                (§ switch opcode)
                (§ block
                    (§ case OP_IF)
                    (§ block
                        (§ if (§ not shouldExecute))
                        (§ block
                            (.. ifStack (add false))
                            (§ continue )
                        )
                        (§ if (< (.. stack (size)) 1))
                        (§ block
                            (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_UNBALANCED_CONDITIONAL, "Attempted OP_IF on an empty stack"))
                        )
                        (.. ifStack (add (castToBool (.. stack (pollLast)))))
                        (§ continue )
                    )
                    (§ case OP_NOTIF)
                    (§ block
                        (§ if (§ not shouldExecute))
                        (§ block
                            (.. ifStack (add false))
                            (§ continue )
                        )
                        (§ if (< (.. stack (size)) 1))
                        (§ block
                            (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_UNBALANCED_CONDITIONAL, "Attempted OP_NOTIF on an empty stack"))
                        )
                        (.. ifStack (add (§ not (castToBool (.. stack (pollLast))))))
                        (§ continue )
                    )
                    (§ case OP_ELSE)
                    (§ block
                        (§ if (.. ifStack (isEmpty)))
                        (§ block
                            (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_UNBALANCED_CONDITIONAL, "Attempted OP_ELSE without OP_IF/NOTIF"))
                        )
                        (.. ifStack (add (§ not (.. ifStack (pollLast)))))
                        (§ continue )
                    )
                    (§ case OP_ENDIF)
                    (§ block
                        (§ if (.. ifStack (isEmpty)))
                        (§ block
                            (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_UNBALANCED_CONDITIONAL, "Attempted OP_ENDIF without OP_IF/NOTIF"))
                        )
                        (.. ifStack (pollLast))
                        (§ continue )
                    )

                    ;; OP_0 is no opcode
                    (§ case OP_1NEGATE)
                    (§ block
                        (.. stack (add (Utils/reverseBytes (Utils/encodeMPI (.. BigInteger/ONE (negate)), false))))
                        (§ break )
                    )
                    (§ case OP_1)
                    (§ case OP_2)
                    (§ case OP_3)
                    (§ case OP_4)
                    (§ case OP_5)
                    (§ case OP_6)
                    (§ case OP_7)
                    (§ case OP_8)
                    (§ case OP_9)
                    (§ case OP_10)
                    (§ case OP_11)
                    (§ case OP_12)
                    (§ case OP_13)
                    (§ case OP_14)
                    (§ case OP_15)
                    (§ case OP_16)
                    (§ block
                        (.. stack (add (Utils/reverseBytes (Utils/encodeMPI (BigInteger/valueOf (decodeFromOpN opcode)), false))))
                        (§ break )
                    )
                    (§ case OP_NOP)
                    (§ block
                        (§ break )
                    )
                    (§ case OP_VERIFY)
                    (§ block
                        (§ if (< (.. stack (size)) 1))
                        (§ block
                            (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_INVALID_STACK_OPERATION, "Attempted OP_VERIFY on an empty stack"))
                        )
                        (§ if (§ not (castToBool (.. stack (pollLast)))))
                        (§ block
                            (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_VERIFY, "OP_VERIFY failed"))
                        )
                        (§ break )
                    )
                    (§ case OP_RETURN)
                    (§ block
                        (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_OP_RETURN, "Script called OP_RETURN"))
                    )
                    (§ case OP_TOALTSTACK)
                    (§ block
                        (§ if (< (.. stack (size)) 1))
                        (§ block
                            (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_INVALID_STACK_OPERATION, "Attempted OP_TOALTSTACK on an empty stack"))
                        )
                        (.. altstack (add (.. stack (pollLast))))
                        (§ break )
                    )
                    (§ case OP_FROMALTSTACK)
                    (§ block
                        (§ if (< (.. altstack (size)) 1))
                        (§ block
                            (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_INVALID_ALTSTACK_OPERATION, "Attempted OP_FROMALTSTACK on an empty altstack"))
                        )
                        (.. stack (add (.. altstack (pollLast))))
                        (§ break )
                    )
                    (§ case OP_2DROP)
                    (§ block
                        (§ if (< (.. stack (size)) 2))
                        (§ block
                            (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_INVALID_STACK_OPERATION, "Attempted OP_2DROP on a stack with size < 2"))
                        )
                        (.. stack (pollLast))
                        (.. stack (pollLast))
                        (§ break )
                    )
                    (§ case OP_2DUP)
                    (§ block
                        (§ if (< (.. stack (size)) 2))
                        (§ block
                            (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_INVALID_STACK_OPERATION, "Attempted OP_2DUP on a stack with size < 2"))
                        )
                        (§ var #_"Iterator<byte[]>" (§ name it2DUP) (.. stack (descendingIterator)))
                        (§ var #_"byte[]" (§ name OP2DUPtmpChunk2) (.. it2DUP (next)))
                        (.. stack (add (.. it2DUP (next))))
                        (.. stack (add OP2DUPtmpChunk2))
                        (§ break )
                    )
                    (§ case OP_3DUP)
                    (§ block
                        (§ if (< (.. stack (size)) 3))
                        (§ block
                            (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_INVALID_STACK_OPERATION, "Attempted OP_3DUP on a stack with size < 3"))
                        )
                        (§ var #_"Iterator<byte[]>" (§ name it3DUP) (.. stack (descendingIterator)))
                        (§ var #_"byte[]" (§ name OP3DUPtmpChunk3) (.. it3DUP (next)))
                        (§ var #_"byte[]" (§ name OP3DUPtmpChunk2) (.. it3DUP (next)))
                        (.. stack (add (.. it3DUP (next))))
                        (.. stack (add OP3DUPtmpChunk2))
                        (.. stack (add OP3DUPtmpChunk3))
                        (§ break )
                    )
                    (§ case OP_2OVER)
                    (§ block
                        (§ if (< (.. stack (size)) 4))
                        (§ block
                            (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_INVALID_STACK_OPERATION, "Attempted OP_2OVER on a stack with size < 4"))
                        )
                        (§ var #_"Iterator<byte[]>" (§ name it2OVER) (.. stack (descendingIterator)))
                        (.. it2OVER (next))
                        (.. it2OVER (next))
                        (§ var #_"byte[]" (§ name OP2OVERtmpChunk2) (.. it2OVER (next)))
                        (.. stack (add (.. it2OVER (next))))
                        (.. stack (add OP2OVERtmpChunk2))
                        (§ break )
                    )
                    (§ case OP_2ROT)
                    (§ block
                        (§ if (< (.. stack (size)) 6))
                        (§ block
                            (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_INVALID_STACK_OPERATION, "Attempted OP_2ROT on a stack with size < 6"))
                        )
                        (§ var #_"byte[]" (§ name OP2ROTtmpChunk6) (.. stack (pollLast)))
                        (§ var #_"byte[]" (§ name OP2ROTtmpChunk5) (.. stack (pollLast)))
                        (§ var #_"byte[]" (§ name OP2ROTtmpChunk4) (.. stack (pollLast)))
                        (§ var #_"byte[]" (§ name OP2ROTtmpChunk3) (.. stack (pollLast)))
                        (§ var #_"byte[]" (§ name OP2ROTtmpChunk2) (.. stack (pollLast)))
                        (§ var #_"byte[]" (§ name OP2ROTtmpChunk1) (.. stack (pollLast)))
                        (.. stack (add OP2ROTtmpChunk3))
                        (.. stack (add OP2ROTtmpChunk4))
                        (.. stack (add OP2ROTtmpChunk5))
                        (.. stack (add OP2ROTtmpChunk6))
                        (.. stack (add OP2ROTtmpChunk1))
                        (.. stack (add OP2ROTtmpChunk2))
                        (§ break )
                    )
                    (§ case OP_2SWAP)
                    (§ block
                        (§ if (< (.. stack (size)) 4))
                        (§ block
                            (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_INVALID_STACK_OPERATION, "Attempted OP_2SWAP on a stack with size < 4"))
                        )
                        (§ var #_"byte[]" (§ name OP2SWAPtmpChunk4) (.. stack (pollLast)))
                        (§ var #_"byte[]" (§ name OP2SWAPtmpChunk3) (.. stack (pollLast)))
                        (§ var #_"byte[]" (§ name OP2SWAPtmpChunk2) (.. stack (pollLast)))
                        (§ var #_"byte[]" (§ name OP2SWAPtmpChunk1) (.. stack (pollLast)))
                        (.. stack (add OP2SWAPtmpChunk3))
                        (.. stack (add OP2SWAPtmpChunk4))
                        (.. stack (add OP2SWAPtmpChunk1))
                        (.. stack (add OP2SWAPtmpChunk2))
                        (§ break )
                    )
                    (§ case OP_IFDUP)
                    (§ block
                        (§ if (< (.. stack (size)) 1))
                        (§ block
                            (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_INVALID_STACK_OPERATION, "Attempted OP_IFDUP on an empty stack"))
                        )
                        (§ if (castToBool (.. stack (getLast))))
                        (§ block
                            (.. stack (add (.. stack (getLast))))
                        )
                        (§ break )
                    )
                    (§ case OP_DEPTH)
                    (§ block
                        (.. stack (add (Utils/reverseBytes (Utils/encodeMPI (BigInteger/valueOf (.. stack (size))), false))))
                        (§ break )
                    )
                    (§ case OP_DROP)
                    (§ block
                        (§ if (< (.. stack (size)) 1))
                        (§ block
                            (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_INVALID_STACK_OPERATION, "Attempted OP_DROP on an empty stack"))
                        )
                        (.. stack (pollLast))
                        (§ break )
                    )
                    (§ case OP_DUP)
                    (§ block
                        (§ if (< (.. stack (size)) 1))
                        (§ block
                            (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_INVALID_STACK_OPERATION, "Attempted OP_DUP on an empty stack"))
                        )
                        (.. stack (add (.. stack (getLast))))
                        (§ break )
                    )
                    (§ case OP_NIP)
                    (§ block
                        (§ if (< (.. stack (size)) 2))
                        (§ block
                            (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_INVALID_STACK_OPERATION, "Attempted OP_NIP on a stack with size < 2"))
                        )
                        (§ var #_"byte[]" (§ name OPNIPtmpChunk) (.. stack (pollLast)))
                        (.. stack (pollLast))
                        (.. stack (add OPNIPtmpChunk))
                        (§ break )
                    )
                    (§ case OP_OVER)
                    (§ block
                        (§ if (< (.. stack (size)) 2))
                        (§ block
                            (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_INVALID_STACK_OPERATION, "Attempted OP_OVER on a stack with size < 2"))
                        )
                        (§ var #_"Iterator<byte[]>" (§ name itOVER) (.. stack (descendingIterator)))
                        (.. itOVER (next))
                        (.. stack (add (.. itOVER (next))))
                        (§ break )
                    )
                    (§ case OP_PICK)
                    (§ case OP_ROLL)
                    (§ block
                        (§ if (< (.. stack (size)) 1))
                        (§ block
                            (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_INVALID_STACK_OPERATION, "Attempted OP_PICK/OP_ROLL on an empty stack"))
                        )
                        (§ var #_"long" (§ name val) (.. (castToBigInteger (.. stack (pollLast)), (.. verifyFlags (contains VerifyFlag/MINIMALDATA))) (longValue)))
                        (§ if (§ expr val < 0 || (.. stack (size)) <= val))
                        (§ block
                            (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_INVALID_STACK_OPERATION, "OP_PICK/OP_ROLL attempted to get data deeper than stack size"))
                        )
                        (§ var #_"Iterator<byte[]>" (§ name itPICK) (.. stack (descendingIterator)))
                        (§ for (§ var #_"long" (§ name i) 0) :for (< i val) :for (§ ass (§ name i) (+ i 1)))
                        (§ block
                            (.. itPICK (next))
                        )
                        (§ var #_"byte[]" (§ name OPROLLtmpChunk) (.. itPICK (next)))
                        (§ if (§ expr opcode == OP_ROLL))
                        (§ block
                            (.. itPICK (remove))
                        )
                        (.. stack (add OPROLLtmpChunk))
                        (§ break )
                    )
                    (§ case OP_ROT)
                    (§ block
                        (§ if (< (.. stack (size)) 3))
                        (§ block
                            (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_INVALID_STACK_OPERATION, "Attempted OP_ROT on a stack with size < 3"))
                        )
                        (§ var #_"byte[]" (§ name OPROTtmpChunk3) (.. stack (pollLast)))
                        (§ var #_"byte[]" (§ name OPROTtmpChunk2) (.. stack (pollLast)))
                        (§ var #_"byte[]" (§ name OPROTtmpChunk1) (.. stack (pollLast)))
                        (.. stack (add OPROTtmpChunk2))
                        (.. stack (add OPROTtmpChunk3))
                        (.. stack (add OPROTtmpChunk1))
                        (§ break )
                    )
                    (§ case OP_SWAP)
                    (§ case OP_TUCK)
                    (§ block
                        (§ if (< (.. stack (size)) 2))
                        (§ block
                            (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_INVALID_STACK_OPERATION, "Attempted OP_SWAP on a stack with size < 2"))
                        )
                        (§ var #_"byte[]" (§ name OPSWAPtmpChunk2) (.. stack (pollLast)))
                        (§ var #_"byte[]" (§ name OPSWAPtmpChunk1) (.. stack (pollLast)))
                        (.. stack (add OPSWAPtmpChunk2))
                        (.. stack (add OPSWAPtmpChunk1))
                        (§ if (§ expr opcode == OP_TUCK))
                        (§ block
                            (.. stack (add OPSWAPtmpChunk2))
                        )
                        (§ break )
                    )
                    (§ case OP_SIZE)
                    (§ block
                        (§ if (< (.. stack (size)) 1))
                        (§ block
                            (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_INVALID_STACK_OPERATION, "Attempted OP_SIZE on an empty stack"))
                        )
                        (.. stack (add (Utils/reverseBytes (Utils/encodeMPI (BigInteger/valueOf (.. stack (getLast) length)), false))))
                        (§ break )
                    )
                    (§ case OP_EQUAL)
                    (§ block
                        (§ if (< (.. stack (size)) 2))
                        (§ block
                            (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_INVALID_STACK_OPERATION, "Attempted OP_EQUAL on a stack with size < 2"))
                        )
                        (.. stack (add (if (Arrays/equals (.. stack (pollLast)), (.. stack (pollLast))) (§ new #_"byte[]" (§ coll 1 )) (§ new #_"byte[]"))))
                        (§ break )
                    )
                    (§ case OP_EQUALVERIFY)
                    (§ block
                        (§ if (< (.. stack (size)) 2))
                        (§ block
                            (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_INVALID_STACK_OPERATION, "Attempted OP_EQUALVERIFY on a stack with size < 2"))
                        )
                        (§ if (§ not (Arrays/equals (.. stack (pollLast)), (.. stack (pollLast)))))
                        (§ block
                            (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_EQUALVERIFY, "OP_EQUALVERIFY: non-equal data"))
                        )
                        (§ break )
                    )
                    (§ case OP_1ADD)
                    (§ case OP_1SUB)
                    (§ case OP_NEGATE)
                    (§ case OP_ABS)
                    (§ case OP_NOT)
                    (§ case OP_0NOTEQUAL)
                    (§ block
                        (§ if (< (.. stack (size)) 1))
                        (§ block
                            (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_INVALID_STACK_OPERATION, "Attempted a numeric op on an empty stack"))
                        )
                        (§ var #_"BigInteger" (§ name numericOPnum) (castToBigInteger (.. stack (pollLast)), (.. verifyFlags (contains VerifyFlag/MINIMALDATA))))

                        (§ switch opcode)
                        (§ block
                            (§ case OP_1ADD)
                            (§ block
                                (§ ass (§ name numericOPnum) (.. numericOPnum (add BigInteger/ONE)))
                                (§ break )
                            )
                            (§ case OP_1SUB)
                            (§ block
                                (§ ass (§ name numericOPnum) (.. numericOPnum (subtract BigInteger/ONE)))
                                (§ break )
                            )
                            (§ case OP_NEGATE)
                            (§ block
                                (§ ass (§ name numericOPnum) (.. numericOPnum (negate)))
                                (§ break )
                            )
                            (§ case OP_ABS)
                            (§ block
                                (§ if (< (.. numericOPnum (signum)) 0))
                                (§ block
                                    (§ ass (§ name numericOPnum) (.. numericOPnum (negate)))
                                )
                                (§ break )
                            )
                            (§ case OP_NOT)
                            (§ block
                                (§ if (.. numericOPnum (equals BigInteger/ZERO)))
                                (§ block
                                    (§ ass (§ name numericOPnum) BigInteger/ONE)
                                )
                                (§ else )
                                (§ block
                                    (§ ass (§ name numericOPnum) BigInteger/ZERO)
                                )
                                (§ break )
                            )
                            (§ case OP_0NOTEQUAL)
                            (§ block
                                (§ if (.. numericOPnum (equals BigInteger/ZERO)))
                                (§ block
                                    (§ ass (§ name numericOPnum) BigInteger/ZERO)
                                )
                                (§ else )
                                (§ block
                                    (§ ass (§ name numericOPnum) BigInteger/ONE)
                                )
                                (§ break )
                            )
                            (§ default )
                            (§ block
                                (§ throw (§ new #_"AssertionError" "Unreachable"))
                            )
                        )

                        (.. stack (add (Utils/reverseBytes (Utils/encodeMPI numericOPnum, false))))
                        (§ break )
                    )
                    (§ case OP_ADD)
                    (§ case OP_SUB)
                    (§ case OP_BOOLAND)
                    (§ case OP_BOOLOR)
                    (§ case OP_NUMEQUAL)
                    (§ case OP_NUMNOTEQUAL)
                    (§ case OP_LESSTHAN)
                    (§ case OP_GREATERTHAN)
                    (§ case OP_LESSTHANOREQUAL)
                    (§ case OP_GREATERTHANOREQUAL)
                    (§ case OP_MIN)
                    (§ case OP_MAX)
                    (§ block
                        (§ if (< (.. stack (size)) 2))
                        (§ block
                            (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_INVALID_STACK_OPERATION, "Attempted a numeric op on a stack with size < 2"))
                        )
                        (§ var #_"BigInteger" (§ name numericOPnum2) (castToBigInteger (.. stack (pollLast)), (.. verifyFlags (contains VerifyFlag/MINIMALDATA))))
                        (§ var #_"BigInteger" (§ name numericOPnum1) (castToBigInteger (.. stack (pollLast)), (.. verifyFlags (contains VerifyFlag/MINIMALDATA))))

                        (§ var #_"BigInteger" (§ name numericOPresult))
                        (§ switch opcode)
                        (§ block
                            (§ case OP_ADD)
                            (§ block
                                (§ ass (§ name numericOPresult) (.. numericOPnum1 (add numericOPnum2)))
                                (§ break )
                            )
                            (§ case OP_SUB)
                            (§ block
                                (§ ass (§ name numericOPresult) (.. numericOPnum1 (subtract numericOPnum2)))
                                (§ break )
                            )
                            (§ case OP_BOOLAND)
                            (§ block
                                (§ if (§ expr (§ not (.. numericOPnum1 (equals BigInteger/ZERO))) && (§ not (.. numericOPnum2 (equals BigInteger/ZERO)))))
                                (§ block
                                    (§ ass (§ name numericOPresult) BigInteger/ONE)
                                )
                                (§ else )
                                (§ block
                                    (§ ass (§ name numericOPresult) BigInteger/ZERO)
                                )
                                (§ break )
                            )
                            (§ case OP_BOOLOR)
                            (§ block
                                (§ if (§ expr (§ not (.. numericOPnum1 (equals BigInteger/ZERO))) || (§ not (.. numericOPnum2 (equals BigInteger/ZERO)))))
                                (§ block
                                    (§ ass (§ name numericOPresult) BigInteger/ONE)
                                )
                                (§ else )
                                (§ block
                                    (§ ass (§ name numericOPresult) BigInteger/ZERO)
                                )
                                (§ break )
                            )
                            (§ case OP_NUMEQUAL)
                            (§ block
                                (§ if (.. numericOPnum1 (equals numericOPnum2)))
                                (§ block
                                    (§ ass (§ name numericOPresult) BigInteger/ONE)
                                )
                                (§ else )
                                (§ block
                                    (§ ass (§ name numericOPresult) BigInteger/ZERO)
                                )
                                (§ break )
                            )
                            (§ case OP_NUMNOTEQUAL)
                            (§ block
                                (§ if (§ not (.. numericOPnum1 (equals numericOPnum2))))
                                (§ block
                                    (§ ass (§ name numericOPresult) BigInteger/ONE)
                                )
                                (§ else )
                                (§ block
                                    (§ ass (§ name numericOPresult) BigInteger/ZERO)
                                )
                                (§ break )
                            )
                            (§ case OP_LESSTHAN)
                            (§ block
                                (§ if (< (.. numericOPnum1 (compareTo numericOPnum2)) 0))
                                (§ block
                                    (§ ass (§ name numericOPresult) BigInteger/ONE)
                                )
                                (§ else )
                                (§ block
                                    (§ ass (§ name numericOPresult) BigInteger/ZERO)
                                )
                                (§ break )
                            )
                            (§ case OP_GREATERTHAN)
                            (§ block
                                (§ if (> (.. numericOPnum1 (compareTo numericOPnum2)) 0))
                                (§ block
                                    (§ ass (§ name numericOPresult) BigInteger/ONE)
                                )
                                (§ else )
                                (§ block
                                    (§ ass (§ name numericOPresult) BigInteger/ZERO)
                                )
                                (§ break )
                            )
                            (§ case OP_LESSTHANOREQUAL)
                            (§ block
                                (§ if (<= (.. numericOPnum1 (compareTo numericOPnum2)) 0))
                                (§ block
                                    (§ ass (§ name numericOPresult) BigInteger/ONE)
                                )
                                (§ else )
                                (§ block
                                    (§ ass (§ name numericOPresult) BigInteger/ZERO)
                                )
                                (§ break )
                            )
                            (§ case OP_GREATERTHANOREQUAL)
                            (§ block
                                (§ if (>= (.. numericOPnum1 (compareTo numericOPnum2)) 0))
                                (§ block
                                    (§ ass (§ name numericOPresult) BigInteger/ONE)
                                )
                                (§ else )
                                (§ block
                                    (§ ass (§ name numericOPresult) BigInteger/ZERO)
                                )
                                (§ break )
                            )
                            (§ case OP_MIN)
                            (§ block
                                (§ if (< (.. numericOPnum1 (compareTo numericOPnum2)) 0))
                                (§ block
                                    (§ ass (§ name numericOPresult) numericOPnum1)
                                )
                                (§ else )
                                (§ block
                                    (§ ass (§ name numericOPresult) numericOPnum2)
                                )
                                (§ break )
                            )
                            (§ case OP_MAX)
                            (§ block
                                (§ if (> (.. numericOPnum1 (compareTo numericOPnum2)) 0))
                                (§ block
                                    (§ ass (§ name numericOPresult) numericOPnum1)
                                )
                                (§ else )
                                (§ block
                                    (§ ass (§ name numericOPresult) numericOPnum2)
                                )
                                (§ break )
                            )
                            (§ default )
                            (§ block
                                (§ throw (§ new #_"RuntimeException" "Opcode switched at runtime?"))
                            )
                        )

                        (.. stack (add (Utils/reverseBytes (Utils/encodeMPI numericOPresult, false))))
                        (§ break )
                    )
                    (§ case OP_NUMEQUALVERIFY)
                    (§ block
                        (§ if (< (.. stack (size)) 2))
                        (§ block
                            (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_INVALID_STACK_OPERATION, "Attempted OP_NUMEQUALVERIFY on a stack with size < 2"))
                        )
                        (§ var #_"BigInteger" (§ name OPNUMEQUALVERIFYnum2) (castToBigInteger (.. stack (pollLast)), (.. verifyFlags (contains VerifyFlag/MINIMALDATA))))
                        (§ var #_"BigInteger" (§ name OPNUMEQUALVERIFYnum1) (castToBigInteger (.. stack (pollLast)), (.. verifyFlags (contains VerifyFlag/MINIMALDATA))))

                        (§ if (§ not (.. OPNUMEQUALVERIFYnum1 (equals OPNUMEQUALVERIFYnum2))))
                        (§ block
                            (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_NUMEQUALVERIFY, "OP_NUMEQUALVERIFY failed"))
                        )
                        (§ break )
                    )
                    (§ case OP_WITHIN)
                    (§ block
                        (§ if (< (.. stack (size)) 3))
                        (§ block
                            (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_INVALID_STACK_OPERATION, "Attempted OP_WITHIN on a stack with size < 3"))
                        )
                        (§ var #_"BigInteger" (§ name OPWITHINnum3) (castToBigInteger (.. stack (pollLast)), (.. verifyFlags (contains VerifyFlag/MINIMALDATA))))
                        (§ var #_"BigInteger" (§ name OPWITHINnum2) (castToBigInteger (.. stack (pollLast)), (.. verifyFlags (contains VerifyFlag/MINIMALDATA))))
                        (§ var #_"BigInteger" (§ name OPWITHINnum1) (castToBigInteger (.. stack (pollLast)), (.. verifyFlags (contains VerifyFlag/MINIMALDATA))))
                        (§ if (§ expr (.. OPWITHINnum2 (compareTo OPWITHINnum1)) <= 0 && (.. OPWITHINnum1 (compareTo OPWITHINnum3)) < 0))
                        (§ block
                            (.. stack (add (Utils/reverseBytes (Utils/encodeMPI BigInteger/ONE, false))))
                        )
                        (§ else )
                        (§ block
                            (.. stack (add (Utils/reverseBytes (Utils/encodeMPI BigInteger/ZERO, false))))
                        )
                        (§ break )
                    )
                    (§ case OP_RIPEMD160)
                    (§ block
                        (§ if (< (.. stack (size)) 1))
                        (§ block
                            (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_INVALID_STACK_OPERATION, "Attempted OP_RIPEMD160 on an empty stack"))
                        )
                        (§ var #_"RIPEMD160Digest" (§ name digest) (§ new #_"RIPEMD160Digest"))
                        (§ var #_"byte[]" (§ name dataToHash) (.. stack (pollLast)))
                        (.. digest (update dataToHash, 0, (.. dataToHash length)))
                        (§ var #_"byte[]" (§ name ripmemdHash) (§ new #_"byte[]" (§ count 20)))
                        (.. digest (doFinal ripmemdHash, 0))
                        (.. stack (add ripmemdHash))
                        (§ break )
                    )
                    (§ case OP_SHA1)
                    (§ block
                        (§ if (< (.. stack (size)) 1))
                        (§ block
                            (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_INVALID_STACK_OPERATION, "Attempted OP_SHA1 on an empty stack"))
                        )
                        (§ try )
                        (§ block
                            (.. stack (add (.. (MessageDigest/getInstance "SHA-1") (digest (.. stack (pollLast))))))
                        )
                        (§ catch #_"NoSuchAlgorithmException" (§ name e))
                        (§ block
                            (§ throw (§ new #_"RuntimeException" e)) ;; Cannot happen.
                        )
                        (§ break )
                    )
                    (§ case OP_SHA256)
                    (§ block
                        (§ if (< (.. stack (size)) 1))
                        (§ block
                            (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_INVALID_STACK_OPERATION, "Attempted OP_SHA256 on an empty stack"))
                        )
                        (.. stack (add (Sha256Hash/hash (.. stack (pollLast)))))
                        (§ break )
                    )
                    (§ case OP_HASH160)
                    (§ block
                        (§ if (< (.. stack (size)) 1))
                        (§ block
                            (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_INVALID_STACK_OPERATION, "Attempted OP_HASH160 on an empty stack"))
                        )
                        (.. stack (add (Utils/sha256hash160 (.. stack (pollLast)))))
                        (§ break )
                    )
                    (§ case OP_HASH256)
                    (§ block
                        (§ if (< (.. stack (size)) 1))
                        (§ block
                            (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_INVALID_STACK_OPERATION, "Attempted OP_SHA256 on an empty stack"))
                        )
                        (.. stack (add (Sha256Hash/hashTwice (.. stack (pollLast)))))
                        (§ break )
                    )
                    (§ case OP_CODESEPARATOR)
                    (§ block
                        (§ ass (§ name lastCodeSepLocation) (+ (.. chunk (getStartLocationInProgram)) 1))
                        (§ break )
                    )
                    (§ case OP_CHECKSIG)
                    (§ case OP_CHECKSIGVERIFY)
                    (§ block
                        (§ if (nil? txContainingThis))
                        (§ block
                            (§ throw (§ new #_"IllegalStateException" "Script attempted signature check but no tx was provided"))
                        )
                        (executeCheckSig txContainingThis, (§ cast #_"int" index), script, stack, lastCodeSepLocation, opcode, verifyFlags)
                        (§ break )
                    )
                    (§ case OP_CHECKMULTISIG)
                    (§ case OP_CHECKMULTISIGVERIFY)
                    (§ block
                        (§ if (nil? txContainingThis))
                        (§ block
                            (§ throw (§ new #_"IllegalStateException" "Script attempted signature check but no tx was provided"))
                        )
                        (§ ass (§ name opCount) (executeMultiSig txContainingThis, (§ cast #_"int" index), script, stack, opCount, lastCodeSepLocation, opcode, verifyFlags))
                        (§ break )
                    )
                    (§ case OP_CHECKLOCKTIMEVERIFY)
                    (§ block
                        (§ if (§ not (.. verifyFlags (contains VerifyFlag/CHECKLOCKTIMEVERIFY))))
                        (§ block
                            ;; not enabled; treat as a NOP2
                            (§ if (.. verifyFlags (contains VerifyFlag/DISCOURAGE_UPGRADABLE_NOPS)))
                            (§ block
                                (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS, (§ expr "Script used a reserved opcode " + opcode)))
                            )
                            (§ break )
                        )
                        (executeCheckLockTimeVerify txContainingThis, (§ cast #_"int" index), stack, verifyFlags)
                        (§ break )
                    )
                    (§ case OP_CHECKSEQUENCEVERIFY)
                    (§ block
                        (§ if (§ not (.. verifyFlags (contains VerifyFlag/CHECKSEQUENCEVERIFY))))
                        (§ block
                            ;; not enabled; treat as a NOP3
                            (§ if (.. verifyFlags (contains VerifyFlag/DISCOURAGE_UPGRADABLE_NOPS)))
                            (§ block
                                (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS, (§ expr "Script used a reserved opcode " + opcode)))
                            )
                            (§ break )
                        )
                        (executeCheckSequenceVerify txContainingThis, (§ cast #_"int" index), stack, verifyFlags)
                        (§ break )
                    )
                    (§ case OP_NOP1)
                    (§ case OP_NOP4)
                    (§ case OP_NOP5)
                    (§ case OP_NOP6)
                    (§ case OP_NOP7)
                    (§ case OP_NOP8)
                    (§ case OP_NOP9)
                    (§ case OP_NOP10)
                    (§ block
                        (§ if (.. verifyFlags (contains VerifyFlag/DISCOURAGE_UPGRADABLE_NOPS)))
                        (§ block
                            (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS, (§ expr "Script used a reserved opcode " + opcode)))
                        )
                        (§ break )
                    )

                    (§ default )
                    (§ block
                        (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_BAD_OPCODE, (§ expr "Script used a reserved or disabled opcode: " + opcode)))
                    )
                )
            )

            (§ if (§ expr MAX_STACK_SIZE < (.. stack (size)) + (.. altstack (size)) || (.. stack (size)) + (.. altstack (size)) < 0))
            (§ block
                (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_STACK_SIZE, "Stack size exceeded range"))
            )
        )

        (§ if (§ not (.. ifStack (isEmpty))))
        (§ block
            (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_UNBALANCED_CONDITIONAL, "OP_IF/OP_NOTIF without OP_ENDIF"))
        )
        nil
    )

    ;; This is more or less a direct translation of the code in Bitcoin Core.
    #_private
    #_static
    (§ defn- #_"void" (§ fn executeCheckLockTimeVerify) [#_"Transaction" (§ name txContainingThis), #_"int" (§ name index), #_"LinkedList<byte[]>" (§ name stack), #_"Set<VerifyFlag>" (§ name verifyFlags)])
        (§ throws #_"ScriptException")
    (§ block
        (§ if (< (.. stack (size)) 1))
        (§ block
            (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_INVALID_STACK_OPERATION, "Attempted OP_CHECKLOCKTIMEVERIFY on a stack with size < 1"))
        )

        ;; Thus as a special case we tell CScriptNum to accept up to 5-byte bignums to avoid year 2038 issue.
        (§ var #_"BigInteger" (§ name nLockTime) (castToBigInteger (.. stack (getLast)), 5, (.. verifyFlags (contains VerifyFlag/MINIMALDATA))))

        (§ if (< (.. nLockTime (compareTo BigInteger/ZERO)) 0))
        (§ block
            (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_NEGATIVE_LOCKTIME, "Negative locktime"))
        )

        ;; There are two kinds of nLockTime, need to ensure we're comparing apples-to-apples.
        (§ if (§ not (§ expr (§ expr (§ expr (.. txContainingThis (getLockTime)) <  Transaction/LOCKTIME_THRESHOLD) && (.. nLockTime (compareTo Transaction/LOCKTIME_THRESHOLD_BIG)) <  0) || (§ expr (>= (.. txContainingThis (getLockTime)) Transaction/LOCKTIME_THRESHOLD) && (.. nLockTime (compareTo Transaction/LOCKTIME_THRESHOLD_BIG)) >= 0))))
        (§ block
            (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_UNSATISFIED_LOCKTIME, "Locktime requirement type mismatch"))
        )

        ;; Now that we know we're comparing apples-to-apples, the comparison is a simple numeric one.
        (§ if (§ expr 0 < (.. nLockTime (compareTo (BigInteger/valueOf (.. txContainingThis (getLockTime)))))))
        (§ block
            (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_UNSATISFIED_LOCKTIME, "Locktime requirement not satisfied"))
        )

        ;; Finally the nLockTime feature can be disabled and thus CHECKLOCKTIMEVERIFY bypassed if every txin has been
        ;; finalized by setting nSequence to maxint.  The transaction would be allowed into the blockchain, making
        ;; the opcode ineffective.
        ;;
        ;; Testing if this vin is not final is sufficient to prevent this condition.  Alternatively we could test all
        ;; inputs, but testing just this input minimizes the data required to prove correct CHECKLOCKTIMEVERIFY execution.
        (§ if (§ not (.. txContainingThis (getInput index) (hasSequence))))
        (§ block
            (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_UNSATISFIED_LOCKTIME, "Transaction contains a final transaction input for a CHECKLOCKTIMEVERIFY script."))
        )
        nil
    )

    #_private
    #_static
    (§ defn- #_"void" (§ fn executeCheckSequenceVerify) [#_"Transaction" (§ name txContainingThis), #_"int" (§ name index), #_"LinkedList<byte[]>" (§ name stack), #_"Set<VerifyFlag>" (§ name verifyFlags)])
        (§ throws #_"ScriptException")
    (§ block
        (§ if (< (.. stack (size)) 1))
        (§ block
            (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_INVALID_STACK_OPERATION, "Attempted OP_CHECKSEQUENCEVERIFY on a stack with size < 1"))
        )

        ;; Note that elsewhere numeric opcodes are limited to operands in the range -2**31+1 to 2**31-1, however
        ;; it is legal for opcodes to produce results exceeding that range.  This limitation is implemented by
        ;; CScriptNum's default 4-byte limit.
        ;;
        ;; Thus as a special case we tell CScriptNum to accept up to 5-byte bignums, which are good until 2**39-1,
        ;; well beyond the 2**32-1 limit of the nSequence field itself.
        (§ var #_"long" (§ name nSequence) (.. (castToBigInteger (.. stack (getLast)), 5, (.. verifyFlags (contains VerifyFlag/MINIMALDATA))) (longValue)))

        ;; In the rare event that the argument may be < 0 due to some arithmetic being done first, you can always
        ;; use 0 MAX CHECKSEQUENCEVERIFY.
        (§ if (< nSequence 0))
        (§ block
            (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_NEGATIVE_LOCKTIME, "Negative sequence"))
        )

        ;; To provide for future soft-fork extensibility, if the operand has the disabled lock-time flag set,
        ;; CHECKSEQUENCEVERIFY behaves as a NOP.
        (§ if (!= (& nSequence Transaction/SEQUENCE_LOCKTIME_DISABLE_FLAG) 0))
        (§ block
            (§ return nil)
        )

        ;; Compare the specified sequence number with the input.
        (§ if (§ not (checkSequence nSequence, txContainingThis, index)))
        (§ block
            (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_UNSATISFIED_LOCKTIME, "Unsatisfied CHECKLOCKTIMEVERIFY lock time"))
        )
        nil
    )

    #_private
    #_static
    (§ defn- #_"boolean" (§ fn checkSequence) [#_"long" (§ name nSequence), #_"Transaction" (§ name txContainingThis), #_"int" (§ name index)])
    (§ block
        ;; Relative lock times are supported by comparing the passed in operand to the sequence number
        ;; of the input.
        (§ var #_"long" (§ name txToSequence) (.. txContainingThis (getInput index) (getSequenceNumber)))

        ;; Fail if the transaction's version number is not set high enough to trigger BIP 68 rules.
        (§ if (< (.. txContainingThis (getVersion)) 2))
        (§ block
            (§ return false)
        )

        ;; Sequence numbers with their most significant bit set are not consensus constrained.  Testing
        ;; that the transaction's sequence number do not have this bit set prevents using this property
        ;; to get around a CHECKSEQUENCEVERIFY check.
        (§ if (!= (& txToSequence Transaction/SEQUENCE_LOCKTIME_DISABLE_FLAG) 0))
        (§ block
            (§ return false)
        )

        ;; Mask off any bits that do not have consensus-enforced meaning before doing the integer comparisons.
        (§ var #_"long" (§ name nLockTimeMask) (§ expr  Transaction/SEQUENCE_LOCKTIME_TYPE_FLAG | Transaction/SEQUENCE_LOCKTIME_MASK))
        (§ var #_"long" (§ name txToSequenceMasked) (& txToSequence nLockTimeMask))
        (§ var #_"long" (§ name nSequenceMasked) (& nSequence nLockTimeMask))

        ;; There are two kinds of nSequence: lock-by-blockheight and lock-by-blocktime, distinguished by
        ;; whether nSequenceMasked < CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG.
        ;;
        ;; We want to compare apples to apples, so fail the script unless the type of nSequenceMasked
        ;; being tested is the same as the nSequenceMasked in the transaction.
        (§ if (§ not (§ expr (§ expr txToSequenceMasked <  Transaction/SEQUENCE_LOCKTIME_TYPE_FLAG && nSequenceMasked <  Transaction/SEQUENCE_LOCKTIME_TYPE_FLAG) || (§ expr txToSequenceMasked >= Transaction/SEQUENCE_LOCKTIME_TYPE_FLAG && nSequenceMasked >= Transaction/SEQUENCE_LOCKTIME_TYPE_FLAG))))
        (§ block
            (§ return false)
        )

        ;; Now that we know we're comparing apples-to-apples, the comparison is a simple numeric one.
        (§ if (< txToSequenceMasked nSequenceMasked))
        (§ block
            (§ return false)
        )

        true
    )

    #_private
    #_static
    (§ defn- #_"void" (§ fn executeCheckSig) [#_"Transaction" (§ name txContainingThis), #_"int" (§ name index), #_"Script" (§ name script), #_"LinkedList<byte[]>" (§ name stack), #_"int" (§ name lastCodeSepLocation), #_"int" (§ name opcode), #_"Set<VerifyFlag>" (§ name verifyFlags)])
        (§ throws #_"ScriptException")
    (§ block
        (§ var #_"boolean" (§ name requireCanonical) (§ expr (.. verifyFlags (contains VerifyFlag/STRICTENC)) || (.. verifyFlags (contains VerifyFlag/DERSIG)) || (.. verifyFlags (contains VerifyFlag/LOW_S))))
        (§ if (< (.. stack (size)) 2))
        (§ block
            (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_INVALID_STACK_OPERATION, "Attempted OP_CHECKSIG(VERIFY) on a stack with size < 2"))
        )

        (§ var #_"byte[]" (§ name pubKey) (.. stack (pollLast)))
        (§ var #_"byte[]" (§ name sigBytes) (.. stack (pollLast)))

        (§ var #_"byte[]" (§ name prog) (.. script (getProgram)))
        (§ var #_"byte[]" (§ name connectedScript) (Arrays/copyOfRange prog, lastCodeSepLocation, (.. prog length)))

        (§ var #_"UnsafeByteArrayOutputStream" (§ name outStream) (§ new #_"UnsafeByteArrayOutputStream" (+ (.. sigBytes length) 1)))
        (§ try )
        (§ block
            (writeBytes outStream, sigBytes)
        )
        (§ catch #_"IOException" (§ name e))
        (§ block
            (§ throw (§ new #_"RuntimeException" e)) ;; Cannot happen.
        )
        (§ ass (§ name connectedScript) (removeAllInstancesOf connectedScript, (.. outStream (toByteArray))))

        ;; TODO: Use int for indexes everywhere, we can't have that many inputs/outputs.
        (§ var #_"boolean" (§ name sigValid) false)
        (§ try )
        (§ block
            (§ var #_"TransactionSignature" (§ name sig) (TransactionSignature/decodeFromBitcoin sigBytes, requireCanonical, (.. verifyFlags (contains VerifyFlag/LOW_S))))

            ;; TODO: Should check hash type is known.
            (§ var #_"Sha256Hash" (§ name hash) (.. txContainingThis (hashForSignature index, connectedScript, (§ cast #_"byte" (.. sig sighashFlags)))))
            (§ ass (§ name sigValid) (ECKey/verify (.. hash (getBytes)), sig, pubKey))
        )
        (§ catch #_"Exception" (§ name e))
        (§ block
            ;; There is (at least) one exception that could be hit here (EOFException, if the sig is too short).
            ;; Because I can't verify there aren't more, we use a very generic Exception catch.

            ;; This RuntimeException occurs when signing as we run partial/invalid scripts to see if they need more
            ;; signing work to be done inside LocalTransactionSigner.signInputs.
            (§ if (§ not (.. e (getMessage) (contains "Reached past end of ASN.1 stream"))))
            (§ block
                (.. log (warn "Signature checking failed!", e))
            )
        )

        (§ if (§ expr opcode == OP_CHECKSIG))
        (§ block
            (.. stack (add (if sigValid (§ new #_"byte[]" (§ coll 1 )) (§ new #_"byte[]"))))
        )
        (§ elseif (§ expr opcode == OP_CHECKSIGVERIFY && (§ not sigValid)))
        (§ block
            (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_CHECKSIGVERIFY, "Script failed OP_CHECKSIGVERIFY"))
        )
        nil
    )

    #_private
    #_static
    (§ defn- #_"int" (§ fn executeMultiSig) [#_"Transaction" (§ name txContainingThis), #_"int" (§ name index), #_"Script" (§ name script), #_"LinkedList<byte[]>" (§ name stack), #_"int" (§ name opCount), #_"int" (§ name lastCodeSepLocation), #_"int" (§ name opcode), #_"Set<VerifyFlag>" (§ name verifyFlags)])
        (§ throws #_"ScriptException")
    (§ block
        (§ var #_"boolean" (§ name requireCanonical) (§ expr (.. verifyFlags (contains VerifyFlag/STRICTENC)) || (.. verifyFlags (contains VerifyFlag/DERSIG)) || (.. verifyFlags (contains VerifyFlag/LOW_S))))
        (§ if (< (.. stack (size)) 1))
        (§ block
            (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_INVALID_STACK_OPERATION, "Attempted OP_CHECKMULTISIG(VERIFY) on a stack with size < 2"))
        )

        (§ var #_"int" (§ name pubKeyCount) (.. (castToBigInteger (.. stack (pollLast)), (.. verifyFlags (contains VerifyFlag/MINIMALDATA))) (intValue)))
        (§ if (§ expr pubKeyCount < 0 || MAX_PUBKEYS_PER_MULTISIG < pubKeyCount))
        (§ block
            (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_PUBKEY_COUNT, "OP_CHECKMULTISIG(VERIFY) with pubkey count out of range"))
        )

        (§ ass (§ name opCount) (+ opCount pubKeyCount))
        (§ if (< MAX_OPS_PER_SCRIPT opCount))
        (§ block
            (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_OP_COUNT, "Total op count > 201 during OP_CHECKMULTISIG(VERIFY)"))
        )
        (§ if (§ expr (.. stack (size)) < pubKeyCount + 1))
        (§ block
            (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_INVALID_STACK_OPERATION, "Attempted OP_CHECKMULTISIG(VERIFY) on a stack with size < num_of_pubkeys + 2"))
        )

        (§ var #_"LinkedList<byte[]>" (§ name pubkeys) (§ new #_"LinkedList<>"))
        (§ for (§ var #_"int" (§ name i) 0) :for (< i pubKeyCount) :for (§ ass (§ name i) (+ i 1)))
        (§ block
            (.. pubkeys (add (.. stack (pollLast))))
        )

        (§ var #_"int" (§ name sigCount) (.. (castToBigInteger (.. stack (pollLast)), (.. verifyFlags (contains VerifyFlag/MINIMALDATA))) (intValue)))
        (§ if (§ expr sigCount < 0 || pubKeyCount < sigCount))
        (§ block
            (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_SIG_COUNT, "OP_CHECKMULTISIG(VERIFY) with sig count out of range"))
        )
        (§ if (§ expr (.. stack (size)) < sigCount + 1))
        (§ block
            (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_INVALID_STACK_OPERATION, "Attempted OP_CHECKMULTISIG(VERIFY) on a stack with size < num_of_pubkeys + num_of_signatures + 3"))
        )

        (§ var #_"LinkedList<byte[]>" (§ name sigs) (§ new #_"LinkedList<>"))
        (§ for (§ var #_"int" (§ name i) 0) :for (< i sigCount) :for (§ ass (§ name i) (+ i 1)))
        (§ block
            (.. sigs (add (.. stack (pollLast))))
        )

        (§ var #_"byte[]" (§ name prog) (.. script (getProgram)))
        (§ var #_"byte[]" (§ name connectedScript) (Arrays/copyOfRange prog, lastCodeSepLocation, (.. prog length)))

        (§ for (§ var #_"byte[]" (§ name sig)) :for sigs)
        (§ block
            (§ var #_"UnsafeByteArrayOutputStream" (§ name outStream) (§ new #_"UnsafeByteArrayOutputStream" (+ (.. sig length) 1)))
            (§ try )
            (§ block
                (writeBytes outStream, sig)
            )
            (§ catch #_"IOException" (§ name e))
            (§ block
                (§ throw (§ new #_"RuntimeException" e)) ;; Cannot happen.
            )
            (§ ass (§ name connectedScript) (removeAllInstancesOf connectedScript, (.. outStream (toByteArray))))
        )

        (§ var #_"boolean" (§ name valid) true)
        (§ while (§ expr 0 < (.. sigs (size))))
        (§ block
            (§ var #_"byte[]" (§ name pubKey) (.. pubkeys (pollFirst)))
            ;; We could reasonably move this out of the loop, but because signature verification is significantly
            ;; more expensive than hashing, its not a big deal.
            (§ try )
            (§ block
                (§ var #_"TransactionSignature" (§ name sig) (TransactionSignature/decodeFromBitcoin (.. sigs (getFirst)), requireCanonical))
                (§ var #_"Sha256Hash" (§ name hash) (.. txContainingThis (hashForSignature index, connectedScript, (§ cast #_"byte" (.. sig sighashFlags)))))
                (§ if (ECKey/verify (.. hash (getBytes)), sig, pubKey))
                (§ block
                    (.. sigs (pollFirst))
                )
            )
            (§ catch #_"Exception" (§ name _))
            (§ block
                ;; There is (at least) one exception that could be hit here (EOFException, if the sig is too short).
                ;; Because I can't verify there aren't more, we use a very generic Exception catch.
            )

            (§ if (< (.. pubkeys (size)) (.. sigs (size))))
            (§ block
                (§ ass (§ name valid) false)
                (§ break )
            )
        )

        ;; We uselessly remove a stack object to emulate a Bitcoin Core bug.
        (§ var #_"byte[]" (§ name nullDummy) (.. stack (pollLast)))
        (§ if (§ expr (.. verifyFlags (contains VerifyFlag/NULLDUMMY)) && 0 < (.. nullDummy length)))
        (§ block
            (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_SIG_NULLFAIL, (§ expr "OP_CHECKMULTISIG(VERIFY) with non-null nulldummy: " + (Arrays/toString nullDummy))))
        )

        (§ if (§ expr opcode == OP_CHECKMULTISIG))
        (§ block
            (.. stack (add (if valid (§ new #_"byte[]" (§ coll 1 )) (§ new #_"byte[]"))))
        )
        (§ elseif (§ expr opcode == OP_CHECKMULTISIGVERIFY && (§ not valid)))
        (§ block
            (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_SIG_NULLFAIL, "Script failed OP_CHECKMULTISIGVERIFY"))
        )

        opCount
    )

    ;;;
     ; Verifies that this script (interpreted as a scriptSig) correctly spends the given scriptPubKey, enabling all validation rules.
     ; @param txContainingThis The transaction in which this input scriptSig resides.
     ;                         Accessing txContainingThis from another thread while this method runs results in undefined behavior.
     ; @param scriptSigIndex The index in txContainingThis of the scriptSig (note: NOT the index of the scriptPubKey).
     ; @param scriptPubKey The connected scriptPubKey containing the conditions needed to claim the value.
     ; @deprecated Use {@link #correctlySpends(org.bitcoinj.core.Transaction, long, org.bitcoinj.script.Script, java.util.Set)}
     ; instead so that verification flags do not change as new verification options are added.
     ;;
    #_deprecated
    #_public
    (§ method #_"void" (§ fn correctlySpends) [#_"Transaction" (§ name txContainingThis), #_"long" (§ name scriptSigIndex), #_"Script" (§ name scriptPubKey)])
        (§ throws #_"ScriptException")
    (§ block
        (correctlySpends txContainingThis, scriptSigIndex, scriptPubKey, ALL_VERIFY_FLAGS)
        nil
    )

    ;;;
     ; Verifies that this script (interpreted as a scriptSig) correctly spends the given scriptPubKey.
     ; @param txContainingThis The transaction in which this input scriptSig resides.
     ;                         Accessing txContainingThis from another thread while this method runs results in undefined behavior.
     ; @param scriptSigIndex The index in txContainingThis of the scriptSig (note: NOT the index of the scriptPubKey).
     ; @param scriptPubKey The connected scriptPubKey containing the conditions needed to claim the value.
     ; @param verifyFlags Each flag enables one validation rule.  If in doubt, use {@link #correctlySpends(Transaction, long, Script)}
     ;                    which sets all flags.
     ;;
    #_public
    (§ method #_"void" (§ fn correctlySpends) [#_"Transaction" (§ name txContainingThis), #_"long" (§ name scriptSigIndex), #_"Script" (§ name scriptPubKey), #_"Set<VerifyFlag>" (§ name verifyFlags)])
        (§ throws #_"ScriptException")
    (§ block
        ;; Clone the transaction because executing the script involves editing it, and if we die, we'll leave
        ;; the tx half broken (also it's not so thread safe to work on it directly).
        (§ try )
        (§ block
            (§ ass (§ name txContainingThis) (.. txContainingThis (getParams) (getDefaultSerializer) (makeTransaction (.. txContainingThis (bitcoinSerialize)))))
        )
        (§ catch #_"ProtocolException" (§ name e))
        (§ block
            (§ throw (§ new #_"RuntimeException" e)) ;; Should not happen unless we were given a totally broken transaction.
        )

        (§ if (§ expr MAX_SCRIPT_SIZE < (.. (getProgram) length) || MAX_SCRIPT_SIZE < (.. scriptPubKey (getProgram) length)))
        (§ block
            (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_SCRIPT_SIZE, "Script larger than 10,000 bytes"))
        )

        (§ var #_"LinkedList<byte[]>" (§ name stack) (§ new #_"LinkedList<>"))
        (§ var #_"LinkedList<byte[]>" (§ name p2shStack) nil)

        (executeScript txContainingThis, scriptSigIndex, this, stack, verifyFlags)
        (§ if (.. verifyFlags (contains VerifyFlag/P2SH)))
        (§ block
            (§ ass (§ name p2shStack) (§ new #_"LinkedList<>" stack))
        )
        (executeScript txContainingThis, scriptSigIndex, scriptPubKey, stack, verifyFlags)

        (§ if (== (.. stack (size)) 0))
        (§ block
            (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_EVAL_FALSE, "Stack empty at end of script execution."))
        )

        (§ if (§ not (castToBool (.. stack (pollLast)))))
        (§ block
            (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_EVAL_FALSE, (§ expr "Script resulted in a non-true stack: " + stack)))
        )

        ;; P2SH is pay to script hash.  It means that the scriptPubKey has a special form which is a valid
        ;; program but it has "useless" form that if evaluated as a normal program always returns true.
        ;; Instead, miners recognize it as special based on its template - it provides a hash of the real scriptPubKey
        ;; and that must be provided by the input.  The goal of this bizarre arrangement is twofold:
        ;;
        ;; (1) You can sum up a large, complex script (like a CHECKMULTISIG script) with an address that's the same
        ;;     size as a regular address.  This means it doesn't overload scannable QR codes/NFC tags or become
        ;;     un-wieldy to copy/paste.
        ;; (2) It allows the working set to be smaller: nodes perform best when they can store as many unspent outputs
        ;;     in RAM as possible, so if the outputs are made smaller and the inputs get bigger, then it's better for
        ;;     overall scalability and performance.

        ;; TODO: Check if we can take out enforceP2SH if there's a checkpoint at the enforcement block.
        (§ if (§ expr (.. verifyFlags (contains VerifyFlag/P2SH)) && (.. scriptPubKey (isPayToScriptHash))))
        (§ block
            (§ for (§ var #_"ScriptChunk" (§ name chunk)) :for chunks)
            (§ block
                (§ if (§ expr (.. chunk (isOpCode)) && OP_16 < (.. chunk opcode)))
                (§ block
                    (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_SIG_PUSHONLY, "Attempted to spend a P2SH scriptPubKey with a script that contained script ops"))
                )
            )

            (§ var #_"byte[]" (§ name scriptPubKeyBytes) (.. p2shStack (pollLast)))
            (§ var #_"Script" (§ name scriptPubKeyP2SH) (§ new #_"Script" scriptPubKeyBytes))

            (executeScript txContainingThis, scriptSigIndex, scriptPubKeyP2SH, p2shStack, verifyFlags)

            (§ if (== (.. p2shStack (size)) 0))
            (§ block
                (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_EVAL_FALSE, "P2SH stack empty at end of script execution."))
            )

            (§ if (§ not (castToBool (.. p2shStack (pollLast)))))
            (§ block
                (§ throw (§ new #_"ScriptException" ScriptError/SCRIPT_ERR_EVAL_FALSE, "P2SH script execution resulted in a non-true stack"))
            )
        )
        nil
    )

    ;; Utility that doesn't copy for internal use.
    #_private
    (§ method- #_"byte[]" (§ fn getQuickProgram) [])
    (§ block
        (or program (getProgram))
    )

    ;;;
     ; Get the {@link org.bitcoinj.script.Script.ScriptType}.
     ; @return The script type.
     ;;
    #_public
    (§ method #_"ScriptType" (§ fn getScriptType) [])
    (§ block
        (§ if (isSentToAddress))
        (§ block
            (§ return ScriptType/P2PKH)
        )
        (§ if (isSentToRawPubKey))
        (§ block
            (§ return ScriptType/PUB_KEY)
        )
        (§ if (isPayToScriptHash))
        (§ block
            (§ return ScriptType/P2SH)
        )

        ScriptType/NO_TYPE
    )

    #_override
    #_public
    (§ method #_"boolean" (§ fn equals) [#_"Object" (§ name o)])
    (§ block
        (§ if (§ expr this == o))
        (§ block
            (§ return true)
        )
        (§ if (§ expr o == nil || (getClass) != (.. o (getClass))))
        (§ block
            (§ return false)
        )
        (Arrays/equals (getQuickProgram), (.. (§ cast #_"Script" o) (getQuickProgram)))
    )

    #_override
    #_public
    (§ method #_"int" (§ fn hashCode) [])
    (§ block
        (Arrays/hashCode (getQuickProgram))
    )
)

#_(ns org.bitcoinj.script #_"ScriptBuilder"
    (:import [java.math BigInteger]
             [java.util ArrayList Arrays Collections List Stack])
    (:import [com.google.common.base Preconditions]
             [com.google.common.collect Lists])
   (:require [org.bitcoinj.core Address ECKey Utils]
             [org.bitcoinj.crypto TransactionSignature]
             #_static [org.bitcoinj.script.ScriptOpCodes *]))

;;;
 ; <p>Tools for the construction of commonly used script types.  You don't normally need this as it's hidden
 ; behind convenience methods on {@link org.bitcoinj.core.Transaction}, but they are useful when working with
 ; the protocol at a lower level.</p>
 ;;
#_public
(§ class #_"ScriptBuilder"
    #_private
    (§ field- #_"List<ScriptChunk>" (§ name chunks))

    ;;; Creates a fresh ScriptBuilder with an empty program. ;;
    #_public
    (§ constructor #_"ScriptBuilder" [])
    (§ block
        (§ ass (§ name chunks) (Lists/newLinkedList))
        this
    )

    ;;; Creates a fresh ScriptBuilder with the given program as the starting point. ;;
    #_public
    (§ constructor #_"ScriptBuilder" [#_"Script" (§ name template)])
    (§ block
        (§ ass (§ name chunks) (§ new #_"ArrayList<>" (.. template (getChunks))))
        this
    )

    ;;; Adds the given chunk to the end of the program. ;;
    #_public
    (§ method #_"ScriptBuilder" (§ fn addChunk) [#_"ScriptChunk" (§ name chunk)])
    (§ block
        (addChunk (.. chunks (size)), chunk)
    )

    ;;; Adds the given chunk at the given index in the program. ;;
    #_public
    (§ method #_"ScriptBuilder" (§ fn addChunk) [#_"int" (§ name index), #_"ScriptChunk" (§ name chunk)])
    (§ block
        (.. chunks (add index, chunk))
        this
    )

    ;;; Adds the given opcode to the end of the program. ;;
    #_public
    (§ method #_"ScriptBuilder" (§ fn op) [#_"int" (§ name opcode)])
    (§ block
        (op (.. chunks (size)), opcode)
    )

    ;;; Adds the given opcode to the given index in the program. ;;
    #_public
    (§ method #_"ScriptBuilder" (§ fn op) [#_"int" (§ name index), #_"int" (§ name opcode)])
    (§ block
        (Preconditions/checkArgument (< OP_PUSHDATA4 opcode))
        (addChunk index, (§ new #_"ScriptChunk" opcode, nil))
    )

    ;;; Adds a copy of the given byte array as a data element (i.e. PUSHDATA) at the end of the program. ;;
    #_public
    (§ method #_"ScriptBuilder" (§ fn data) [#_"byte[]" (§ name data)])
    (§ block
        (if (== (.. data length) 0) (smallNum 0) (data (.. chunks (size)), data))
    )

    ;;; Adds a copy of the given byte array as a data element (i.e. PUSHDATA) at the given index in the program. ;;
    #_public
    (§ method #_"ScriptBuilder" (§ fn data) [#_"int" (§ name index), #_"byte[]" (§ name data)])
    (§ block
        ;; implements BIP62
        (§ var #_"byte[]" (§ name copy) (Arrays/copyOf data, (.. data length)))
        (§ var #_"int" (§ name opcode))
        (§ if (== (.. data length) 0))
        (§ block
            (§ ass (§ name opcode) OP_0)
        )
        (§ elseif (== (.. data length) 1))
        (§ block
            (§ var #_"byte" (§ name b) (§ ai data 0))
            (§ if (§ expr 1 <= b && b <= 16))
            (§ block
                (§ ass (§ name opcode) (Script/encodeToOpN b))
            )
            (§ else )
            (§ block
                (§ ass (§ name opcode) 1)
            )
        )
        (§ elseif (< (.. data length) OP_PUSHDATA1))
        (§ block
            (§ ass (§ name opcode) (.. data length))
        )
        (§ elseif (< (.. data length) 256))
        (§ block
            (§ ass (§ name opcode) OP_PUSHDATA1)
        )
        (§ elseif (< (.. data length) 65536))
        (§ block
            (§ ass (§ name opcode) OP_PUSHDATA2)
        )
        (§ else )
        (§ block
            (§ throw (§ new #_"RuntimeException" "Unimplemented"))
        )
        (addChunk index, (§ new #_"ScriptChunk" opcode, copy))
    )

    ;;;
     ; Adds the given number to the end of the program.
     ; Automatically uses shortest encoding possible.
     ;;
    #_public
    (§ method #_"ScriptBuilder" (§ fn number) [#_"long" (§ name num)])
    (§ block
        (if (<= 0 num 16) (smallNum (§ cast #_"int" num)) (bigNum num))
    )

    ;;;
     ; Adds the given number to the given index in the program.
     ; Automatically uses shortest encoding possible.
     ;;
    #_public
    (§ method #_"ScriptBuilder" (§ fn number) [#_"int" (§ name index), #_"long" (§ name num)])
    (§ block
        (if (<= 0 num 16) (smallNum index, (§ cast #_"int" num)) (bigNum index, num))
    )

    ;;;
     ; Adds the given number as a OP_N opcode to the end of the program.
     ; Only handles values 0-16 inclusive.
     ;
     ; @see #number(int)
     ;;
    #_public
    (§ method #_"ScriptBuilder" (§ fn smallNum) [#_"int" (§ name num)])
    (§ block
        (smallNum (.. chunks (size)), num)
    )

    ;;; Adds the given number as a push data chunk.
     ; This is intended to use for negative numbers or values > 16, and although
     ; it will accept numbers in the range 0-16 inclusive, the encoding would be
     ; considered non-standard.
     ;
     ; @see #number(int)
     ;;
    #_protected
    (§ method #_"ScriptBuilder" (§ fn bigNum) [#_"long" (§ name num)])
    (§ block
        (bigNum (.. chunks (size)), num)
    )

    ;;;
     ; Adds the given number as a OP_N opcode to the given index in the program.
     ; Only handles values 0-16 inclusive.
     ;
     ; @see #number(int)
     ;;
    #_public
    (§ method #_"ScriptBuilder" (§ fn smallNum) [#_"int" (§ name index), #_"int" (§ name num)])
    (§ block
        (Preconditions/checkArgument (§ expr 0 <= num), "Cannot encode negative numbers with smallNum")
        (Preconditions/checkArgument (§ expr num <= 16), "Cannot encode numbers larger than 16 with smallNum")

        (addChunk index, (§ new #_"ScriptChunk" (Script/encodeToOpN num), nil))
    )

    ;;;
     ; Adds the given number as a push data chunk to the given index in the program.
     ; This is intended to use for negative numbers or values > 16, and although
     ; it will accept numbers in the range 0-16 inclusive, the encoding would be
     ; considered non-standard.
     ;
     ; @see #number(int)
     ;;
    #_protected
    (§ method #_"ScriptBuilder" (§ fn bigNum) [#_"int" (§ name index), #_"long" (§ name num)])
    (§ block
        (§ var #_"byte[]" (§ name data))

        (§ if (§ expr num == 0))
        (§ block
            (§ ass (§ name data) (§ new #_"byte[]" (§ count 0)))
        )
        (§ else )
        (§ block
            (§ var #_"Stack<Byte>" (§ name result) (§ new #_"Stack<>"))
            (§ var #_"boolean" (§ name neg) (< num 0))
            (§ var #_"long" (§ name absvalue) (Math/abs num))

            (§ while (§ expr absvalue != 0))
            (§ block
                (.. result (push (§ cast #_"byte" (& absvalue 0xff))))
                (§ ass (§ name absvalue) (>> absvalue 8))
            )

            (§ if (!= (& (.. result (peek)) 0x80) 0))
            (§ block
                ;; The most significant byte is >= 0x80, so push an extra byte that
                ;; contains just the sign of the value.
                (.. result (push (§ cast #_"byte" (if neg 0x80 0))))
            )
            (§ elseif neg)
            (§ block
                ;; The most significant byte is < 0x80 and the value is negative,
                ;; set the sign bit so it is subtracted and interpreted as a
                ;; negative when converting back to an integral.
                (.. result (push (§ cast #_"byte" (| (.. result (pop)) 0x80))))
            )

            (§ ass (§ name data) (§ new #_"byte[]" (§ count (.. result (size)))))
            (§ for (§ var #_"int" (§ name byteIdx) 0) :for (§ expr byteIdx < (.. data length)) :for (§ ass (§ name byteIdx) (+ byteIdx 1)))
            (§ block
                (§ ass (§ name (§ ai data byteIdx)) (.. result (get byteIdx)))
            )
        )

        ;; At most the encoded value could take up to 8 bytes, so we don't need
        ;; to use OP_PUSHDATA opcodes.
        (addChunk index, (§ new #_"ScriptChunk" (.. data length), data))
    )

    ;;; Creates a new immutable Script based on the state of the builder. ;;
    #_public
    (§ method #_"Script" (§ fn build) [])
    (§ block
        (§ new #_"Script" chunks)
    )

    ;;; Creates a scriptPubKey that encodes payment to the given address. ;;
    #_public
    #_static
    (§ defn #_"Script" (§ fn createOutputScript) [#_"Address" (§ name to)])
    (§ block
        (§ if (.. to (isP2SHAddress)))
        (§ block
            ;; OP_HASH160 <scriptHash> OP_EQUAL
            (§ return (.. (§ new #_"ScriptBuilder") (op OP_HASH160) (data (.. to (getHash160))) (op OP_EQUAL) (build)))
        )
        (§ else )
        (§ block
            ;; OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG
            (§ return (.. (§ new #_"ScriptBuilder") (op OP_DUP) (op OP_HASH160) (data (.. to (getHash160))) (op OP_EQUALVERIFY) (op OP_CHECKSIG) (build)))
        )
    )

    ;;; Creates a scriptPubKey that encodes payment to the given raw public key. ;;
    #_public
    #_static
    (§ defn #_"Script" (§ fn createOutputScript) [#_"ECKey" (§ name key)])
    (§ block
        (.. (§ new #_"ScriptBuilder") (data (.. key (getPubKey))) (op OP_CHECKSIG) (build))
    )

    ;;;
     ; Creates a scriptSig that can redeem a pay-to-address output.
     ; If given signature is null, incomplete scriptSig will be created with OP_0 instead of signature.
     ;;
    #_public
    #_static
    (§ defn #_"Script" (§ fn createInputScript) [#_nilable #_"TransactionSignature" (§ name signature), #_"ECKey" (§ name pubKey)])
    (§ block
        (§ var #_"byte[]" (§ name pubkeyBytes) (.. pubKey (getPubKey)))
        (§ var #_"byte[]" (§ name sigBytes) (if (some? signature) (.. signature (encodeToBitcoin)) (§ new #_"byte[]")))
        (.. (§ new #_"ScriptBuilder") (data sigBytes) (data pubkeyBytes) (build))
    )

    ;;;
     ; Creates a scriptSig that can redeem a pay-to-pubkey output.
     ; If given signature is null, incomplete scriptSig will be created with OP_0 instead of signature.
     ;;
    #_public
    #_static
    (§ defn #_"Script" (§ fn createInputScript) [#_nilable #_"TransactionSignature" (§ name signature)])
    (§ block
        (§ var #_"byte[]" (§ name sigBytes) (if (some? signature) (.. signature (encodeToBitcoin)) (§ new #_"byte[]")))
        (.. (§ new #_"ScriptBuilder") (data sigBytes) (build))
    )

    ;;; Creates a program that requires at least N of the given keys to sign, using OP_CHECKMULTISIG. ;;
    #_public
    #_static
    (§ defn #_"Script" (§ fn createMultiSigOutputScript) [#_"int" (§ name threshold), #_"List<ECKey>" (§ name pubkeys)])
    (§ block
        (Preconditions/checkArgument (< 0 threshold))
        (Preconditions/checkArgument (§ expr threshold <= (.. pubkeys (size))))
        (Preconditions/checkArgument (<= (.. pubkeys (size)) 16)) ;; That's the max we can represent with a single opcode.

        (§ var #_"ScriptBuilder" (§ name builder) (§ new #_"ScriptBuilder"))
        (.. builder (smallNum threshold))
        (§ for (§ var #_"ECKey" (§ name key)) :for pubkeys)
        (§ block
            (.. builder (data (.. key (getPubKey))))
        )
        (.. builder (smallNum (.. pubkeys (size))))
        (.. builder (op OP_CHECKMULTISIG))
        (.. builder (build))
    )

    ;;; Create a program that satisfies an OP_CHECKMULTISIG program. ;;
    #_public
    #_static
    (§ defn #_"Script" (§ fn createMultiSigInputScript) [#_"List<TransactionSignature>" (§ name signatures)])
    (§ block
        (§ var #_"List<byte[]>" (§ name sigs) (§ new #_"ArrayList<>" (.. signatures (size))))
        (§ for (§ var #_"TransactionSignature" (§ name signature)) :for signatures)
        (§ block
            (.. sigs (add (.. signature (encodeToBitcoin))))
        )

        (createMultiSigInputScriptBytes sigs, nil)
    )

    ;;; Create a program that satisfies an OP_CHECKMULTISIG program. ;;
    #_public
    #_static
    (§ defn #_"Script" (§ fn createMultiSigInputScript) [#_"TransactionSignature..." (§ name signatures)])
    (§ block
        (createMultiSigInputScript (Arrays/asList signatures))
    )

    ;;; Create a program that satisfies an OP_CHECKMULTISIG program, using pre-encoded signatures. ;;
    #_public
    #_static
    (§ defn #_"Script" (§ fn createMultiSigInputScriptBytes) [#_"List<byte[]>" (§ name signatures)])
    (§ block
        (createMultiSigInputScriptBytes signatures, nil)
    )

    ;;;
     ; Create a program that satisfies a pay-to-script hashed OP_CHECKMULTISIG program.
     ; If given signature list is null, incomplete scriptSig will be created with OP_0 instead of signatures.
     ;;
    #_public
    #_static
    (§ defn #_"Script" (§ fn createP2SHMultiSigInputScript) [#_nilable #_"List<TransactionSignature>" (§ name signatures), #_"Script" (§ name multisigProgram)])
    (§ block
        (§ var #_"List<byte[]>" (§ name sigs) (§ new #_"ArrayList<>"))
        (§ if (nil? signatures))
        (§ block
            ;; Create correct number of empty signatures.
            (§ var #_"int" (§ name numSigs) (.. multisigProgram (getNumberOfSignaturesRequiredToSpend)))
            (§ for (§ var #_"int" (§ name i) 0) :for (< i numSigs) :for (§ ass (§ name i) (+ i 1)))
            (§ block
                (.. sigs (add (§ new #_"byte[]")))
            )
        )
        (§ else )
        (§ block
            (§ for (§ var #_"TransactionSignature" (§ name signature)) :for signatures)
            (§ block
                (.. sigs (add (.. signature (encodeToBitcoin))))
            )
        )
        (createMultiSigInputScriptBytes sigs, (.. multisigProgram (getProgram)))
    )

    ;;;
     ; Create a program that satisfies an OP_CHECKMULTISIG program, using pre-encoded signatures.
     ; Optionally, appends the script program bytes if spending a P2SH output.
     ;;
    #_public
    #_static
    (§ defn #_"Script" (§ fn createMultiSigInputScriptBytes) [#_"List<byte[]>" (§ name signatures), #_nilable #_"byte[]" (§ name multisigProgramBytes)])
    (§ block
        (Preconditions/checkArgument (<= (.. signatures (size)) 16))

        (§ var #_"ScriptBuilder" (§ name builder) (§ new #_"ScriptBuilder"))
        (.. builder (smallNum 0)) ;; Work around a bug in CHECKMULTISIG that is now a required part of the protocol.
        (§ for (§ var #_"byte[]" (§ name signature)) :for signatures)
        (§ block
            (.. builder (data signature))
        )
        (§ if (§ expr multisigProgramBytes!= nil))
        (§ block
            (.. builder (data multisigProgramBytes))
        )
        (.. builder (build))
    )

    ;;;
     ; Returns a copy of the given scriptSig with the signature inserted in the given position.
     ;
     ; This function assumes that any missing sigs have OP_0 placeholders.  If given scriptSig
     ; already has all the signatures in place, IllegalArgumentException will be thrown.
     ;
     ; @param targetIndex Where to insert the signature.
     ; @param sigsPrefixCount How many items to copy verbatim (e.g. initial OP_0 for multisig).
     ; @param sigsSuffixCount How many items to copy verbatim at end (e.g. redeemScript for P2SH).
     ;;
    #_public
    #_static
    (§ defn #_"Script" (§ fn updateScriptWithSignature) [#_"Script" (§ name scriptSig), #_"byte[]" (§ name signature), #_"int" (§ name targetIndex), #_"int" (§ name sigsPrefixCount), #_"int" (§ name sigsSuffixCount)])
    (§ block
        (§ var #_"List<ScriptChunk>" (§ name inputChunks) (.. scriptSig (getChunks)))
        (§ var #_"int" (§ name totalChunks) (.. inputChunks (size)))

        ;; Check if we have a place to insert, otherwise just return given scriptSig unchanged.
        ;; We assume here that OP_0 placeholders always go after the sigs, so
        ;; to find if we have sigs missing, we can just check the chunk in latest sig position.
        (§ var #_"boolean" (§ name hasMissingSigs) (.. inputChunks (get (§ expr totalChunks - sigsSuffixCount - 1)) (equalsOpCode OP_0)))
        (Preconditions/checkArgument hasMissingSigs, "ScriptSig is already filled with signatures")

        ;; copy the prefix
        (§ var #_"ScriptBuilder" (§ name builder) (§ new #_"ScriptBuilder"))
        (§ for (§ var #_"ScriptChunk" (§ name chunk)) :for (.. inputChunks (subList 0, sigsPrefixCount)))
        (§ block
            (.. builder (addChunk chunk))
        )

        ;; Copy the sigs.
        (§ var #_"int" (§ name pos) 0)
        (§ var #_"boolean" (§ name inserted) false)
        (§ for (§ var #_"ScriptChunk" (§ name chunk)) :for (.. inputChunks (subList sigsPrefixCount, (§ expr totalChunks - sigsSuffixCount))))
        (§ block
            (§ if (§ expr pos == targetIndex))
            (§ block
                (§ ass (§ name inserted) true)
                (.. builder (data signature))
                (§ ass (§ name pos) (+ pos 1))
            )
            (§ if (§ not (.. chunk (equalsOpCode OP_0))))
            (§ block
                (.. builder (addChunk chunk))
                (§ ass (§ name pos) (+ pos 1))
            )
        )

        ;; Add OP_0's if needed, since we skipped them in the previous loop.
        (§ while (§ expr pos < totalChunks - sigsPrefixCount - sigsSuffixCount))
        (§ block
            (§ if (§ expr pos == targetIndex))
            (§ block
                (§ ass (§ name inserted) true)
                (.. builder (data signature))
            )
            (§ else )
            (§ block
                (.. builder (addChunk (§ new #_"ScriptChunk" OP_0, nil)))
            )
            (§ ass (§ name pos) (+ pos 1))
        )

        ;; Copy the suffix.
        (§ for (§ var #_"ScriptChunk" (§ name chunk)) :for (.. inputChunks (subList (§ expr totalChunks - sigsSuffixCount), totalChunks)))
        (§ block
            (.. builder (addChunk chunk))
        )

        (Preconditions/checkState inserted)
        (.. builder (build))
    )

    ;;;
     ; Creates a scriptPubKey that sends to the given script hash.  Read
     ; <a href="https://github.com/bitcoin/bips/blob/master/bip-0016.mediawiki">BIP 16</a>
     ; to learn more about this kind of script.
     ;;
    #_public
    #_static
    (§ defn #_"Script" (§ fn createP2SHOutputScript) [#_"byte[]" (§ name hash)])
    (§ block
        (Preconditions/checkArgument (== (.. hash length) 20))

        (.. (§ new #_"ScriptBuilder") (op OP_HASH160) (data hash) (op OP_EQUAL) (build))
    )

    ;;;
     ; Creates a scriptPubKey for the given redeem script.
     ;;
    #_public
    #_static
    (§ defn #_"Script" (§ fn createP2SHOutputScript) [#_"Script" (§ name redeemScript)])
    (§ block
        (§ var #_"byte[]" (§ name hash) (Utils/sha256hash160 (.. redeemScript (getProgram))))
        (ScriptBuilder/createP2SHOutputScript hash)
    )

    ;;;
     ; Creates a P2SH output script with given public keys and threshold.
     ; Given public keys will be placed in redeem script in the lexicographical sorting order.
     ;;
    #_public
    #_static
    (§ defn #_"Script" (§ fn createP2SHOutputScript) [#_"int" (§ name threshold), #_"List<ECKey>" (§ name pubkeys)])
    (§ block
        (§ var #_"Script" (§ name redeemScript) (createRedeemScript threshold, pubkeys))
        (createP2SHOutputScript redeemScript)
    )

    ;;;
     ; Creates redeem script with given public keys and threshold.
     ; Given public keys will be placed in redeem script in the lexicographical sorting order.
     ;;
    #_public
    #_static
    (§ defn #_"Script" (§ fn createRedeemScript) [#_"int" (§ name threshold), #_"List<ECKey>" (§ name pubkeys)])
    (§ block
        (§ ass (§ name pubkeys) (§ new #_"ArrayList<>" pubkeys))
        (Collections/sort pubkeys, ECKey/PUBKEY_COMPARATOR)
        (ScriptBuilder/createMultiSigOutputScript threshold, pubkeys)
    )

    ;;;
     ; Creates a script of the form OP_RETURN [data].  This feature allows you to attach
     ; a small piece of data (like a hash of something stored elsewhere) to a zero valued
     ; output which can never be spent and thus does not pollute the ledger.
     ;;
    #_public
    #_static
    (§ defn #_"Script" (§ fn createOpReturnScript) [#_"byte[]" (§ name data)])
    (§ block
        (Preconditions/checkArgument (<= (.. data length) 80))

        (.. (§ new #_"ScriptBuilder") (op OP_RETURN) (data data) (build))
    )

    #_public
    #_static
    (§ defn #_"Script" (§ fn createCLTVPaymentChannelOutput) [#_"BigInteger" (§ name time), #_"ECKey" (§ name from), #_"ECKey" (§ name to)])
    (§ block
        (§ var #_"byte[]" (§ name timeBytes) (Utils/reverseBytes (Utils/encodeMPI time, false)))
        (§ if (§ expr 5 < (.. timeBytes length)))
        (§ block
            (§ throw (§ new #_"RuntimeException" "Time too large to encode as 5-byte int"))
        )

        (.. (§ new #_"ScriptBuilder") (op OP_IF) (data (.. to (getPubKey))) (op OP_CHECKSIGVERIFY) (op OP_ELSE) (data timeBytes) (op OP_CHECKLOCKTIMEVERIFY) (op OP_DROP) (op OP_ENDIF) (data (.. from (getPubKey))) (op OP_CHECKSIG) (build))
    )

    #_public
    #_static
    (§ defn #_"Script" (§ fn createCLTVPaymentChannelRefund) [#_"TransactionSignature" (§ name signature)])
    (§ block
        (§ var #_"ScriptBuilder" (§ name builder) (§ new #_"ScriptBuilder"))
        (.. builder (data (.. signature (encodeToBitcoin))))
        (.. builder (data (§ new #_"byte[]" (§ coll 0 )))) ;; Use the CHECKLOCKTIMEVERIFY if branch.
        (.. builder (build))
    )

    #_public
    #_static
    (§ defn #_"Script" (§ fn createCLTVPaymentChannelP2SHRefund) [#_"TransactionSignature" (§ name signature), #_"Script" (§ name redeemScript)])
    (§ block
        (§ var #_"ScriptBuilder" (§ name builder) (§ new #_"ScriptBuilder"))
        (.. builder (data (.. signature (encodeToBitcoin))))
        (.. builder (data (§ new #_"byte[]" (§ coll 0 )))) ;; Use the CHECKLOCKTIMEVERIFY if branch.
        (.. builder (data (.. redeemScript (getProgram))))
        (.. builder (build))
    )

    #_public
    #_static
    (§ defn #_"Script" (§ fn createCLTVPaymentChannelP2SHInput) [#_"byte[]" (§ name from), #_"byte[]" (§ name to), #_"Script" (§ name redeemScript)])
    (§ block
        (§ var #_"ScriptBuilder" (§ name builder) (§ new #_"ScriptBuilder"))
        (.. builder (data from))
        (.. builder (data to))
        (.. builder (smallNum 1)) ;; Use the CHECKLOCKTIMEVERIFY if branch.
        (.. builder (data (.. redeemScript (getProgram))))
        (.. builder (build))
    )

    #_public
    #_static
    (§ defn #_"Script" (§ fn createCLTVPaymentChannelInput) [#_"TransactionSignature" (§ name from), #_"TransactionSignature" (§ name to)])
    (§ block
        (createCLTVPaymentChannelInput (.. from (encodeToBitcoin)), (.. to (encodeToBitcoin)))
    )

    #_public
    #_static
    (§ defn #_"Script" (§ fn createCLTVPaymentChannelInput) [#_"byte[]" (§ name from), #_"byte[]" (§ name to)])
    (§ block
        (§ var #_"ScriptBuilder" (§ name builder) (§ new #_"ScriptBuilder"))
        (.. builder (data from))
        (.. builder (data to))
        (.. builder (smallNum 1)) ;; Use the CHECKLOCKTIMEVERIFY if branch.
        (.. builder (build))
    )
)

#_(ns org.bitcoinj.script #_"ScriptChunk"
    (:import [java.io IOException OutputStream]
             [java.util Arrays])
    (:import [com.google.common.base Objects Preconditions])
   (:require [org.bitcoinj.core Utils]
             #_static [org.bitcoinj.script.ScriptOpCodes *]))

;;;
 ; A script element that is either a data push (signature, pubkey, etc.) or a non-push (logic, numeric, etc.) operation.
 ;;
#_public
(§ class #_"ScriptChunk"
    ;;; Operation to be executed.  Opcodes are defined in {@link ScriptOpCodes}. ;;
    #_public
    (§ field #_"int" (§ name opcode))
    ;;;
     ; For push operations, this is the vector to be pushed on the stack.
     ; For {@link ScriptOpCodes#OP_0}, the vector is empty.
     ; Null for non-push operations.
     ;;
    #_nilable
    #_public
    (§ field #_"byte[]" (§ name data))
    #_private
    (§ field- #_"int" (§ name startLocationInProgram))

    #_public
    (§ constructor #_"ScriptChunk" [#_"int" (§ name opcode), #_"byte[]" (§ name data)])
    (§ block
        (§ this opcode, data, -1)
        this
    )

    #_public
    (§ constructor #_"ScriptChunk" [#_"int" (§ name opcode), #_"byte[]" (§ name data), #_"int" (§ name startLocationInProgram)])
    (§ block
        (§ ass (§ name (.. this opcode)) opcode)
        (§ ass (§ name (.. this data)) data)
        (§ ass (§ name (.. this startLocationInProgram)) startLocationInProgram)
        this
    )

    #_public
    (§ method #_"boolean" (§ fn equalsOpCode) [#_"int" (§ name opcode)])
    (§ block
        (§ expr opcode == (.. this opcode))
    )

    ;;;
     ; If this chunk is a single byte of non-pushdata content (could be OP_RESERVED or some invalid Opcode).
     ;;
    #_public
    (§ method #_"boolean" (§ fn isOpCode) [])
    (§ block
        (< OP_PUSHDATA4 opcode)
    )

    ;;;
     ; Returns true if this chunk is pushdata content, including the single-byte pushdatas.
     ;;
    #_public
    (§ method #_"boolean" (§ fn isPushData) [])
    (§ block
        (<= opcode OP_16)
    )

    #_public
    (§ method #_"int" (§ fn getStartLocationInProgram) [])
    (§ block
        (Preconditions/checkState (<= 0 startLocationInProgram))

        startLocationInProgram
    )

    ;;; If this chunk is an OP_N opcode returns the equivalent integer value. ;;
    #_public
    (§ method #_"int" (§ fn decodeOpN) [])
    (§ block
        (Preconditions/checkState (isOpCode))

        (Script/decodeFromOpN opcode)
    )

    ;;;
     ; Called on a pushdata chunk, returns true if it uses the smallest possible way (according to BIP62) to push the data.
     ;;
    #_public
    (§ method #_"boolean" (§ fn isShortestPossiblePushData) [])
    (§ block
        (Preconditions/checkState (isPushData))

        (§ if (nil? data))
        (§ block
            (§ return true) ;; OP_N
        )
        (§ if (== (.. data length) 0))
        (§ block
            (§ return (§ expr opcode == OP_0))
        )
        (§ if (== (.. data length) 1))
        (§ block
            (§ var #_"byte" (§ name b) (§ ai data 0))
            (§ if (§ expr 0x01 <= b && b <= 0x10))
            (§ block
                (§ return (§ expr opcode == OP_1 + b - 1))
            )
            (§ if (== (& b 0xff) 0x81))
            (§ block
                (§ return (§ expr opcode == OP_1NEGATE))
            )
        )
        (§ if (< (.. data length) OP_PUSHDATA1))
        (§ block
            (§ return (§ expr opcode == (.. data length)))
        )
        (§ if (< (.. data length) 256))
        (§ block
            (§ return (§ expr opcode == OP_PUSHDATA1))
        )
        (§ if (< (.. data length) 65536))
        (§ block
            (§ return (§ expr opcode == OP_PUSHDATA2))
        )

        ;; Can never be used, but implemented for completeness.
        (§ expr opcode == OP_PUSHDATA4)
    )

    #_public
    (§ method #_"void" (§ fn write) [#_"OutputStream" (§ name stream)])
        (§ throws #_"IOException")
    (§ block
        (§ if (isOpCode))
        (§ block
            (Preconditions/checkState (nil? data))
            (.. stream (write opcode))
        )
        (§ elseif (some? data))
        (§ block
            (§ if (< opcode OP_PUSHDATA1))
            (§ block
                (Preconditions/checkState (== (.. data length) opcode))
                (.. stream (write opcode))
            )
            (§ elseif (§ expr opcode == OP_PUSHDATA1))
            (§ block
                (Preconditions/checkState (<= (.. data length) 0xff))
                (.. stream (write OP_PUSHDATA1))
                (.. stream (write (.. data length)))
            )
            (§ elseif (§ expr opcode == OP_PUSHDATA2))
            (§ block
                (Preconditions/checkState (<= (.. data length) 0xffff))
                (.. stream (write OP_PUSHDATA2))
                (.. stream (write (§ expr 0xff & (.. data length))))
                (.. stream (write (§ expr 0xff & (>> (.. data length) 8))))
            )
            (§ elseif (§ expr opcode == OP_PUSHDATA4))
            (§ block
                (Preconditions/checkState (<= (.. data length) Script/MAX_SCRIPT_ELEMENT_SIZE))
                (.. stream (write OP_PUSHDATA4))
                (Utils/uint32ToByteStreamLE (.. data length), stream)
            )
            (§ else )
            (§ block
                (§ throw (§ new #_"RuntimeException" "Unimplemented"))
            )
            (.. stream (write data))
        )
        (§ else )
        (§ block
            (.. stream (write opcode)) ;; smallNum
        )
        nil
    )

    #_override
    #_public
    (§ method #_"String" (§ fn toString) [])
    (§ block
        (§ var #_"StringBuilder" (§ name sb) (§ new #_"StringBuilder"))
        (§ if (isOpCode))
        (§ block
            (.. sb (append (getOpCodeName opcode)))
        )
        (§ elseif (some? data)) ;; Data chunk.
        (§ block
            (.. sb (append (getPushDataName opcode)) (append "[") (append (.. Utils/HEX (encode data))) (append "]"))
        )
        (§ else ) ;; Small num.
        (§ block
            (.. sb (append (Script/decodeFromOpN opcode)))
        )
        (.. sb (toString))
    )

    #_override
    #_public
    (§ method #_"boolean" (§ fn equals) [#_"Object" (§ name o)])
    (§ block
        (§ if (§ expr this == o))
        (§ block
            (§ return true)
        )
        (§ if (§ expr o == nil || (getClass) != (.. o (getClass))))
        (§ block
            (§ return false)
        )
        (§ var #_"ScriptChunk" (§ name other) (§ cast #_"ScriptChunk" o))
        (§ expr opcode == (.. other opcode) && startLocationInProgram == (.. other startLocationInProgram) && (Arrays/equals data, (.. other data)))
    )

    #_override
    #_public
    (§ method #_"int" (§ fn hashCode) [])
    (§ block
        (Objects/hashCode opcode, startLocationInProgram, (Arrays/hashCode data))
    )
)

#_(ns org.bitcoinj.script #_"ScriptError"
    (:import [java.util HashMap Map]))

#_public
(§ enum #_"ScriptError"
    (§ item (SCRIPT_ERR_OK "OK"))
    (§ item (SCRIPT_ERR_UNKNOWN_ERROR "UNKNOWN_ERROR"))
    (§ item (SCRIPT_ERR_EVAL_FALSE "EVAL_FALSE"))
    (§ item (SCRIPT_ERR_OP_RETURN "OP_RETURN"))

    ;;; max sizes ;;
    (§ item (SCRIPT_ERR_SCRIPT_SIZE "SCRIPT_SIZE"))
    (§ item (SCRIPT_ERR_PUSH_SIZE "PUSH_SIZE"))
    (§ item (SCRIPT_ERR_OP_COUNT "OP_COUNT"))
    (§ item (SCRIPT_ERR_STACK_SIZE "STACK_SIZE"))
    (§ item (SCRIPT_ERR_SIG_COUNT "SIG_COUNT"))
    (§ item (SCRIPT_ERR_PUBKEY_COUNT "PUBKEY_COUNT"))

    ;;; failed verify operations ;;
    (§ item (SCRIPT_ERR_VERIFY "VERIFY"))
    (§ item (SCRIPT_ERR_EQUALVERIFY "EQUALVERIFY"))
    (§ item (SCRIPT_ERR_CHECKMULTISIGVERIFY "CHECKMULTISIGVERIFY"))
    (§ item (SCRIPT_ERR_CHECKSIGVERIFY "CHECKSIGVERIFY"))
    (§ item (SCRIPT_ERR_NUMEQUALVERIFY "NUMEQUALVERIFY"))

    ;;; logical/format/canonical errors ;;
    (§ item (SCRIPT_ERR_BAD_OPCODE "BAD_OPCODE"))
    (§ item (SCRIPT_ERR_DISABLED_OPCODE "DISABLED_OPCODE"))
    (§ item (SCRIPT_ERR_INVALID_STACK_OPERATION "INVALID_STACK_OPERATION"))
    (§ item (SCRIPT_ERR_INVALID_ALTSTACK_OPERATION "INVALID_ALTSTACK_OPERATION"))
    (§ item (SCRIPT_ERR_UNBALANCED_CONDITIONAL "UNBALANCED_CONDITIONAL"))

    ;;; CHECKLOCKTIMEVERIFY and CHECKSEQUENCEVERIFY ;;
    (§ item (SCRIPT_ERR_NEGATIVE_LOCKTIME "NEGATIVE_LOCKTIME"))
    (§ item (SCRIPT_ERR_UNSATISFIED_LOCKTIME "UNSATISFIED_LOCKTIME"))

    ;;; malleability ;;
    (§ item (SCRIPT_ERR_SIG_HASHTYPE "SIG_HASHTYPE"))
    (§ item (SCRIPT_ERR_SIG_DER "SIG_DER"))
    (§ item (SCRIPT_ERR_MINIMALDATA "MINIMALDATA"))
    (§ item (SCRIPT_ERR_SIG_PUSHONLY "SIG_PUSHONLY"))
    (§ item (SCRIPT_ERR_SIG_HIGH_S "SIG_HIGH_S"))
    (§ item (SCRIPT_ERR_SIG_NULLDUMMY "SIG_NULLDUMMY"))
    (§ item (SCRIPT_ERR_PUBKEYTYPE "PUBKEYTYPE"))
    (§ item (SCRIPT_ERR_CLEANSTACK "CLEANSTACK"))
    (§ item (SCRIPT_ERR_MINIMALIF "MINIMALIF"))
    (§ item (SCRIPT_ERR_SIG_NULLFAIL "NULLFAIL"))

    ;;; softfork safeness ;;
    (§ item (SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS "DISCOURAGE_UPGRADABLE_NOPS"))
    (§ item (SCRIPT_ERR_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM "DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM"))

    ;;; segregated witness ;;
    (§ item (SCRIPT_ERR_WITNESS_PROGRAM_WRONG_LENGTH "WITNESS_PROGRAM_WRONG_LENGTH"))
    (§ item (SCRIPT_ERR_WITNESS_PROGRAM_WITNESS_EMPTY "WITNESS_PROGRAM_WITNESS_EMPTY"))
    (§ item (SCRIPT_ERR_WITNESS_PROGRAM_MISMATCH "WITNESS_PROGRAM_MISMATCH"))
    (§ item (SCRIPT_ERR_WITNESS_MALLEATED "WITNESS_MALLEATED"))
    (§ item (SCRIPT_ERR_WITNESS_MALLEATED_P2SH "WITNESS_MALLEATED_P2SH"))
    (§ item (SCRIPT_ERR_WITNESS_UNEXPECTED "WITNESS_UNEXPECTED"))
    (§ item (SCRIPT_ERR_WITNESS_PUBKEYTYPE "WITNESS_PUBKEYTYPE"))

    (§ item (SCRIPT_ERR_ERROR_COUNT "ERROR_COUNT"))

    #_private
    (§ field- #_"String" (§ name mnemonic))
    #_private
    #_static
    (§ def- #_"Map<String, ScriptError>" (§ name mnemonicToScriptErrorMap))

    #_private
    (§ constructor- #_"ScriptError" [#_"String" (§ name name)])
    (§ block
        (§ ass (§ name (.. this mnemonic)) name)
        this
    )

    #_static
    (§ block
        (§ ass (§ name mnemonicToScriptErrorMap) (§ new #_"HashMap<>"))
        (§ for (§ var #_"ScriptError" (§ name err)) :for (ScriptError/values))
        (§ block
            (.. mnemonicToScriptErrorMap (put (.. err (getMnemonic)), err))
        )
    )

    #_public
    (§ method #_"String" (§ fn getMnemonic) [])
    (§ block
        mnemonic
    )

    #_public
    #_static
    (§ defn #_"ScriptError" (§ fn fromMnemonic) [#_"String" (§ name name)])
    (§ block
        (§ var #_"ScriptError" (§ name err) (.. mnemonicToScriptErrorMap (get name)))
        (§ if (nil? err))
        (§ block
            (§ throw (§ new #_"IllegalArgumentException" (§ expr name + " is not a valid name")))
        )
        err
    )
)

#_(ns org.bitcoinj.script #_"ScriptOpCodes"
    (:import [java.util Map])
    (:import [com.google.common.collect ImmutableMap]))

;;;
 ; Various constants that define the assembly-like scripting language that forms part of the Bitcoin protocol.
 ; See {@link org.bitcoinj.script.Script} for details.  Also provides a method to convert them to a string.
 ;;
#_public
(§ class #_"ScriptOpCodes"
    ;; push value
    #_public
    #_static
    (§ def #_"int" (§ name OP_0) 0x00) ;; push empty vector
    #_public
    #_static
    (§ def #_"int" (§ name OP_FALSE) OP_0)
    #_public
    #_static
    (§ def #_"int" (§ name OP_PUSHDATA1) 0x4c)
    #_public
    #_static
    (§ def #_"int" (§ name OP_PUSHDATA2) 0x4d)
    #_public
    #_static
    (§ def #_"int" (§ name OP_PUSHDATA4) 0x4e)
    #_public
    #_static
    (§ def #_"int" (§ name OP_1NEGATE) 0x4f)
    #_public
    #_static
    (§ def #_"int" (§ name OP_RESERVED) 0x50)
    #_public
    #_static
    (§ def #_"int" (§ name OP_1) 0x51)
    #_public
    #_static
    (§ def #_"int" (§ name OP_TRUE) OP_1)
    #_public
    #_static
    (§ def #_"int" (§ name OP_2) 0x52)
    #_public
    #_static
    (§ def #_"int" (§ name OP_3) 0x53)
    #_public
    #_static
    (§ def #_"int" (§ name OP_4) 0x54)
    #_public
    #_static
    (§ def #_"int" (§ name OP_5) 0x55)
    #_public
    #_static
    (§ def #_"int" (§ name OP_6) 0x56)
    #_public
    #_static
    (§ def #_"int" (§ name OP_7) 0x57)
    #_public
    #_static
    (§ def #_"int" (§ name OP_8) 0x58)
    #_public
    #_static
    (§ def #_"int" (§ name OP_9) 0x59)
    #_public
    #_static
    (§ def #_"int" (§ name OP_10) 0x5a)
    #_public
    #_static
    (§ def #_"int" (§ name OP_11) 0x5b)
    #_public
    #_static
    (§ def #_"int" (§ name OP_12) 0x5c)
    #_public
    #_static
    (§ def #_"int" (§ name OP_13) 0x5d)
    #_public
    #_static
    (§ def #_"int" (§ name OP_14) 0x5e)
    #_public
    #_static
    (§ def #_"int" (§ name OP_15) 0x5f)
    #_public
    #_static
    (§ def #_"int" (§ name OP_16) 0x60)

    ;; control
    #_public
    #_static
    (§ def #_"int" (§ name OP_NOP) 0x61)
    #_public
    #_static
    (§ def #_"int" (§ name OP_VER) 0x62)
    #_public
    #_static
    (§ def #_"int" (§ name OP_IF) 0x63)
    #_public
    #_static
    (§ def #_"int" (§ name OP_NOTIF) 0x64)
    #_public
    #_static
    (§ def #_"int" (§ name OP_VERIF) 0x65)
    #_public
    #_static
    (§ def #_"int" (§ name OP_VERNOTIF) 0x66)
    #_public
    #_static
    (§ def #_"int" (§ name OP_ELSE) 0x67)
    #_public
    #_static
    (§ def #_"int" (§ name OP_ENDIF) 0x68)
    #_public
    #_static
    (§ def #_"int" (§ name OP_VERIFY) 0x69)
    #_public
    #_static
    (§ def #_"int" (§ name OP_RETURN) 0x6a)

    ;; stack ops
    #_public
    #_static
    (§ def #_"int" (§ name OP_TOALTSTACK) 0x6b)
    #_public
    #_static
    (§ def #_"int" (§ name OP_FROMALTSTACK) 0x6c)
    #_public
    #_static
    (§ def #_"int" (§ name OP_2DROP) 0x6d)
    #_public
    #_static
    (§ def #_"int" (§ name OP_2DUP) 0x6e)
    #_public
    #_static
    (§ def #_"int" (§ name OP_3DUP) 0x6f)
    #_public
    #_static
    (§ def #_"int" (§ name OP_2OVER) 0x70)
    #_public
    #_static
    (§ def #_"int" (§ name OP_2ROT) 0x71)
    #_public
    #_static
    (§ def #_"int" (§ name OP_2SWAP) 0x72)
    #_public
    #_static
    (§ def #_"int" (§ name OP_IFDUP) 0x73)
    #_public
    #_static
    (§ def #_"int" (§ name OP_DEPTH) 0x74)
    #_public
    #_static
    (§ def #_"int" (§ name OP_DROP) 0x75)
    #_public
    #_static
    (§ def #_"int" (§ name OP_DUP) 0x76)
    #_public
    #_static
    (§ def #_"int" (§ name OP_NIP) 0x77)
    #_public
    #_static
    (§ def #_"int" (§ name OP_OVER) 0x78)
    #_public
    #_static
    (§ def #_"int" (§ name OP_PICK) 0x79)
    #_public
    #_static
    (§ def #_"int" (§ name OP_ROLL) 0x7a)
    #_public
    #_static
    (§ def #_"int" (§ name OP_ROT) 0x7b)
    #_public
    #_static
    (§ def #_"int" (§ name OP_SWAP) 0x7c)
    #_public
    #_static
    (§ def #_"int" (§ name OP_TUCK) 0x7d)

    ;; splice ops
    #_public
    #_static
    (§ def #_"int" (§ name OP_CAT) 0x7e)
    #_public
    #_static
    (§ def #_"int" (§ name OP_SUBSTR) 0x7f)
    #_public
    #_static
    (§ def #_"int" (§ name OP_LEFT) 0x80)
    #_public
    #_static
    (§ def #_"int" (§ name OP_RIGHT) 0x81)
    #_public
    #_static
    (§ def #_"int" (§ name OP_SIZE) 0x82)

    ;; bit logic
    #_public
    #_static
    (§ def #_"int" (§ name OP_INVERT) 0x83)
    #_public
    #_static
    (§ def #_"int" (§ name OP_AND) 0x84)
    #_public
    #_static
    (§ def #_"int" (§ name OP_OR) 0x85)
    #_public
    #_static
    (§ def #_"int" (§ name OP_XOR) 0x86)
    #_public
    #_static
    (§ def #_"int" (§ name OP_EQUAL) 0x87)
    #_public
    #_static
    (§ def #_"int" (§ name OP_EQUALVERIFY) 0x88)
    #_public
    #_static
    (§ def #_"int" (§ name OP_RESERVED1) 0x89)
    #_public
    #_static
    (§ def #_"int" (§ name OP_RESERVED2) 0x8a)

    ;; numeric
    #_public
    #_static
    (§ def #_"int" (§ name OP_1ADD) 0x8b)
    #_public
    #_static
    (§ def #_"int" (§ name OP_1SUB) 0x8c)
    #_public
    #_static
    (§ def #_"int" (§ name OP_2MUL) 0x8d)
    #_public
    #_static
    (§ def #_"int" (§ name OP_2DIV) 0x8e)
    #_public
    #_static
    (§ def #_"int" (§ name OP_NEGATE) 0x8f)
    #_public
    #_static
    (§ def #_"int" (§ name OP_ABS) 0x90)
    #_public
    #_static
    (§ def #_"int" (§ name OP_NOT) 0x91)
    #_public
    #_static
    (§ def #_"int" (§ name OP_0NOTEQUAL) 0x92)
    #_public
    #_static
    (§ def #_"int" (§ name OP_ADD) 0x93)
    #_public
    #_static
    (§ def #_"int" (§ name OP_SUB) 0x94)
    #_public
    #_static
    (§ def #_"int" (§ name OP_MUL) 0x95)
    #_public
    #_static
    (§ def #_"int" (§ name OP_DIV) 0x96)
    #_public
    #_static
    (§ def #_"int" (§ name OP_MOD) 0x97)
    #_public
    #_static
    (§ def #_"int" (§ name OP_LSHIFT) 0x98)
    #_public
    #_static
    (§ def #_"int" (§ name OP_RSHIFT) 0x99)
    #_public
    #_static
    (§ def #_"int" (§ name OP_BOOLAND) 0x9a)
    #_public
    #_static
    (§ def #_"int" (§ name OP_BOOLOR) 0x9b)
    #_public
    #_static
    (§ def #_"int" (§ name OP_NUMEQUAL) 0x9c)
    #_public
    #_static
    (§ def #_"int" (§ name OP_NUMEQUALVERIFY) 0x9d)
    #_public
    #_static
    (§ def #_"int" (§ name OP_NUMNOTEQUAL) 0x9e)
    #_public
    #_static
    (§ def #_"int" (§ name OP_LESSTHAN) 0x9f)
    #_public
    #_static
    (§ def #_"int" (§ name OP_GREATERTHAN) 0xa0)
    #_public
    #_static
    (§ def #_"int" (§ name OP_LESSTHANOREQUAL) 0xa1)
    #_public
    #_static
    (§ def #_"int" (§ name OP_GREATERTHANOREQUAL) 0xa2)
    #_public
    #_static
    (§ def #_"int" (§ name OP_MIN) 0xa3)
    #_public
    #_static
    (§ def #_"int" (§ name OP_MAX) 0xa4)
    #_public
    #_static
    (§ def #_"int" (§ name OP_WITHIN) 0xa5)

    ;; crypto
    #_public
    #_static
    (§ def #_"int" (§ name OP_RIPEMD160) 0xa6)
    #_public
    #_static
    (§ def #_"int" (§ name OP_SHA1) 0xa7)
    #_public
    #_static
    (§ def #_"int" (§ name OP_SHA256) 0xa8)
    #_public
    #_static
    (§ def #_"int" (§ name OP_HASH160) 0xa9)
    #_public
    #_static
    (§ def #_"int" (§ name OP_HASH256) 0xaa)
    #_public
    #_static
    (§ def #_"int" (§ name OP_CODESEPARATOR) 0xab)
    #_public
    #_static
    (§ def #_"int" (§ name OP_CHECKSIG) 0xac)
    #_public
    #_static
    (§ def #_"int" (§ name OP_CHECKSIGVERIFY) 0xad)
    #_public
    #_static
    (§ def #_"int" (§ name OP_CHECKMULTISIG) 0xae)
    #_public
    #_static
    (§ def #_"int" (§ name OP_CHECKMULTISIGVERIFY) 0xaf)

    ;; block state
    ;;; Check lock time of the block.  Introduced in BIP 65, replacing OP_NOP2 ;;
    #_public
    #_static
    (§ def #_"int" (§ name OP_CHECKLOCKTIMEVERIFY) 0xb1)
    #_public
    #_static
    (§ def #_"int" (§ name OP_CHECKSEQUENCEVERIFY) 0xb2)

    ;; expansion
    #_public
    #_static
    (§ def #_"int" (§ name OP_NOP1) 0xb0)
    ;;; Deprecated by BIP 65 ;;
    #_deprecated
    #_public
    #_static
    (§ def #_"int" (§ name OP_NOP2) OP_CHECKLOCKTIMEVERIFY)
    ;;; Deprecated by BIP 112 ;;
    #_deprecated
    #_public
    #_static
    (§ def #_"int" (§ name OP_NOP3) OP_CHECKSEQUENCEVERIFY)
    #_public
    #_static
    (§ def #_"int" (§ name OP_NOP4) 0xb3)
    #_public
    #_static
    (§ def #_"int" (§ name OP_NOP5) 0xb4)
    #_public
    #_static
    (§ def #_"int" (§ name OP_NOP6) 0xb5)
    #_public
    #_static
    (§ def #_"int" (§ name OP_NOP7) 0xb6)
    #_public
    #_static
    (§ def #_"int" (§ name OP_NOP8) 0xb7)
    #_public
    #_static
    (§ def #_"int" (§ name OP_NOP9) 0xb8)
    #_public
    #_static
    (§ def #_"int" (§ name OP_NOP10) 0xb9)
    #_public
    #_static
    (§ def #_"int" (§ name OP_INVALIDOPCODE) 0xff)

    #_private
    #_static
    (§ var #_"Map<Integer, String>" (§ name opCodeMap) (.. (ImmutableMap/builder #_"ImmutableMap<Integer, String>") (put OP_0, "0") (put OP_PUSHDATA1, "PUSHDATA1") (put OP_PUSHDATA2, "PUSHDATA2") (put OP_PUSHDATA4, "PUSHDATA4") (put OP_1NEGATE, "1NEGATE") (put OP_RESERVED, "RESERVED") (put OP_1, "1") (put OP_2, "2") (put OP_3, "3") (put OP_4, "4") (put OP_5, "5") (put OP_6, "6") (put OP_7, "7") (put OP_8, "8") (put OP_9, "9") (put OP_10, "10") (put OP_11, "11") (put OP_12, "12") (put OP_13, "13") (put OP_14, "14") (put OP_15, "15") (put OP_16, "16") (put OP_NOP, "NOP") (put OP_VER, "VER") (put OP_IF, "IF") (put OP_NOTIF, "NOTIF") (put OP_VERIF, "VERIF") (put OP_VERNOTIF, "VERNOTIF") (put OP_ELSE, "ELSE") (put OP_ENDIF, "ENDIF") (put OP_VERIFY, "VERIFY") (put OP_RETURN, "RETURN") (put OP_TOALTSTACK, "TOALTSTACK") (put OP_FROMALTSTACK, "FROMALTSTACK") (put OP_2DROP, "2DROP") (put OP_2DUP, "2DUP") (put OP_3DUP, "3DUP") (put OP_2OVER, "2OVER") (put OP_2ROT, "2ROT") (put OP_2SWAP, "2SWAP") (put OP_IFDUP, "IFDUP") (put OP_DEPTH, "DEPTH") (put OP_DROP, "DROP") (put OP_DUP, "DUP") (put OP_NIP, "NIP") (put OP_OVER, "OVER") (put OP_PICK, "PICK") (put OP_ROLL, "ROLL") (put OP_ROT, "ROT") (put OP_SWAP, "SWAP") (put OP_TUCK, "TUCK") (put OP_CAT, "CAT") (put OP_SUBSTR, "SUBSTR") (put OP_LEFT, "LEFT") (put OP_RIGHT, "RIGHT") (put OP_SIZE, "SIZE") (put OP_INVERT, "INVERT") (put OP_AND, "AND") (put OP_OR, "OR") (put OP_XOR, "XOR") (put OP_EQUAL, "EQUAL") (put OP_EQUALVERIFY, "EQUALVERIFY") (put OP_RESERVED1, "RESERVED1") (put OP_RESERVED2, "RESERVED2") (put OP_1ADD, "1ADD") (put OP_1SUB, "1SUB") (put OP_2MUL, "2MUL") (put OP_2DIV, "2DIV") (put OP_NEGATE, "NEGATE") (put OP_ABS, "ABS") (put OP_NOT, "NOT") (put OP_0NOTEQUAL, "0NOTEQUAL") (put OP_ADD, "ADD") (put OP_SUB, "SUB") (put OP_MUL, "MUL") (put OP_DIV, "DIV") (put OP_MOD, "MOD") (put OP_LSHIFT, "LSHIFT") (put OP_RSHIFT, "RSHIFT") (put OP_BOOLAND, "BOOLAND") (put OP_BOOLOR, "BOOLOR") (put OP_NUMEQUAL, "NUMEQUAL") (put OP_NUMEQUALVERIFY, "NUMEQUALVERIFY") (put OP_NUMNOTEQUAL, "NUMNOTEQUAL") (put OP_LESSTHAN, "LESSTHAN") (put OP_GREATERTHAN, "GREATERTHAN") (put OP_LESSTHANOREQUAL, "LESSTHANOREQUAL") (put OP_GREATERTHANOREQUAL, "GREATERTHANOREQUAL") (put OP_MIN, "MIN") (put OP_MAX, "MAX") (put OP_WITHIN, "WITHIN") (put OP_RIPEMD160, "RIPEMD160") (put OP_SHA1, "SHA1") (put OP_SHA256, "SHA256") (put OP_HASH160, "HASH160") (put OP_HASH256, "HASH256") (put OP_CODESEPARATOR, "CODESEPARATOR") (put OP_CHECKSIG, "CHECKSIG") (put OP_CHECKSIGVERIFY, "CHECKSIGVERIFY") (put OP_CHECKMULTISIG, "CHECKMULTISIG") (put OP_CHECKMULTISIGVERIFY, "CHECKMULTISIGVERIFY") (put OP_NOP1, "NOP1") (put OP_CHECKLOCKTIMEVERIFY, "CHECKLOCKTIMEVERIFY") (put OP_CHECKSEQUENCEVERIFY, "CHECKSEQUENCEVERIFY") (put OP_NOP4, "NOP4") (put OP_NOP5, "NOP5") (put OP_NOP6, "NOP6") (put OP_NOP7, "NOP7") (put OP_NOP8, "NOP8") (put OP_NOP9, "NOP9") (put OP_NOP10, "NOP10") (build)))

    #_private
    #_static
    (§ var #_"Map<String, Integer>" (§ name opCodeNameMap) (.. (ImmutableMap/builder #_"ImmutableMap<String, Integer>") (put "0", OP_0) (put "PUSHDATA1", OP_PUSHDATA1) (put "PUSHDATA2", OP_PUSHDATA2) (put "PUSHDATA4", OP_PUSHDATA4) (put "1NEGATE", OP_1NEGATE) (put "RESERVED", OP_RESERVED) (put "1", OP_1) (put "2", OP_2) (put "3", OP_3) (put "4", OP_4) (put "5", OP_5) (put "6", OP_6) (put "7", OP_7) (put "8", OP_8) (put "9", OP_9) (put "10", OP_10) (put "11", OP_11) (put "12", OP_12) (put "13", OP_13) (put "14", OP_14) (put "15", OP_15) (put "16", OP_16) (put "NOP", OP_NOP) (put "VER", OP_VER) (put "IF", OP_IF) (put "NOTIF", OP_NOTIF) (put "VERIF", OP_VERIF) (put "VERNOTIF", OP_VERNOTIF) (put "ELSE", OP_ELSE) (put "ENDIF", OP_ENDIF) (put "VERIFY", OP_VERIFY) (put "RETURN", OP_RETURN) (put "TOALTSTACK", OP_TOALTSTACK) (put "FROMALTSTACK", OP_FROMALTSTACK) (put "2DROP", OP_2DROP) (put "2DUP", OP_2DUP) (put "3DUP", OP_3DUP) (put "2OVER", OP_2OVER) (put "2ROT", OP_2ROT) (put "2SWAP", OP_2SWAP) (put "IFDUP", OP_IFDUP) (put "DEPTH", OP_DEPTH) (put "DROP", OP_DROP) (put "DUP", OP_DUP) (put "NIP", OP_NIP) (put "OVER", OP_OVER) (put "PICK", OP_PICK) (put "ROLL", OP_ROLL) (put "ROT", OP_ROT) (put "SWAP", OP_SWAP) (put "TUCK", OP_TUCK) (put "CAT", OP_CAT) (put "SUBSTR", OP_SUBSTR) (put "LEFT", OP_LEFT) (put "RIGHT", OP_RIGHT) (put "SIZE", OP_SIZE) (put "INVERT", OP_INVERT) (put "AND", OP_AND) (put "OR", OP_OR) (put "XOR", OP_XOR) (put "EQUAL", OP_EQUAL) (put "EQUALVERIFY", OP_EQUALVERIFY) (put "RESERVED1", OP_RESERVED1) (put "RESERVED2", OP_RESERVED2) (put "1ADD", OP_1ADD) (put "1SUB", OP_1SUB) (put "2MUL", OP_2MUL) (put "2DIV", OP_2DIV) (put "NEGATE", OP_NEGATE) (put "ABS", OP_ABS) (put "NOT", OP_NOT) (put "0NOTEQUAL", OP_0NOTEQUAL) (put "ADD", OP_ADD) (put "SUB", OP_SUB) (put "MUL", OP_MUL) (put "DIV", OP_DIV) (put "MOD", OP_MOD) (put "LSHIFT", OP_LSHIFT) (put "RSHIFT", OP_RSHIFT) (put "BOOLAND", OP_BOOLAND) (put "BOOLOR", OP_BOOLOR) (put "NUMEQUAL", OP_NUMEQUAL) (put "NUMEQUALVERIFY", OP_NUMEQUALVERIFY) (put "NUMNOTEQUAL", OP_NUMNOTEQUAL) (put "LESSTHAN", OP_LESSTHAN) (put "GREATERTHAN", OP_GREATERTHAN) (put "LESSTHANOREQUAL", OP_LESSTHANOREQUAL) (put "GREATERTHANOREQUAL", OP_GREATERTHANOREQUAL) (put "MIN", OP_MIN) (put "MAX", OP_MAX) (put "WITHIN", OP_WITHIN) (put "RIPEMD160", OP_RIPEMD160) (put "SHA1", OP_SHA1) (put "SHA256", OP_SHA256) (put "HASH160", OP_HASH160) (put "HASH256", OP_HASH256) (put "CODESEPARATOR", OP_CODESEPARATOR) (put "CHECKSIG", OP_CHECKSIG) (put "CHECKSIGVERIFY", OP_CHECKSIGVERIFY) (put "CHECKMULTISIG", OP_CHECKMULTISIG) (put "CHECKMULTISIGVERIFY", OP_CHECKMULTISIGVERIFY) (put "NOP1", OP_NOP1) (put "CHECKLOCKTIMEVERIFY", OP_CHECKLOCKTIMEVERIFY) (put "CHECKSEQUENCEVERIFY", OP_CHECKSEQUENCEVERIFY) (put "NOP2", OP_NOP2) (put "NOP3", OP_NOP3) (put "NOP4", OP_NOP4) (put "NOP5", OP_NOP5) (put "NOP6", OP_NOP6) (put "NOP7", OP_NOP7) (put "NOP8", OP_NOP8) (put "NOP9", OP_NOP9) (put "NOP10", OP_NOP10) (build)))

    ;;;
     ; Converts the given OpCode into a string (e.g. "0", "PUSHDATA", or "NON_OP(10)")
     ;;
    #_public
    #_static
    (§ defn #_"String" (§ fn getOpCodeName) [#_"int" (§ name opcode)])
    (§ block
        (§ if (.. opCodeMap (containsKey opcode)))
        (§ block
            (§ return (.. opCodeMap (get opcode)))
        )

        (§ expr "NON_OP(" + opcode + ")")
    )

    ;;;
     ; Converts the given pushdata OpCode into a string (e.g. "PUSHDATA2", or "PUSHDATA(23)")
     ;;
    #_public
    #_static
    (§ defn #_"String" (§ fn getPushDataName) [#_"int" (§ name opcode)])
    (§ block
        (§ if (.. opCodeMap (containsKey opcode)))
        (§ block
            (§ return (.. opCodeMap (get opcode)))
        )

        (§ expr "PUSHDATA(" + opcode + ")")
    )

    ;;;
     ; Converts the given OpCodeName into an int.
     ;;
    #_public
    #_static
    (§ defn #_"int" (§ fn getOpCode) [#_"String" (§ name opCodeName)])
    (§ block
        (if (.. opCodeNameMap (containsKey opCodeName)) (.. opCodeNameMap (get opCodeName)) OP_INVALIDOPCODE)
    )
)

#_(ns org.bitcoinj.signers #_"CustomTransactionSigner"
    (:import [java.util List])
    (:import [com.google.common.base Preconditions]
             [org.slf4j Logger LoggerFactory])
   (:require [org.bitcoinj.core *]
             [org.bitcoinj.crypto ChildNumber TransactionSignature]
             [org.bitcoinj.script Script]
             [org.bitcoinj.wallet KeyBag RedeemData]))

;;;
 ; <p>This signer may be used as a template for creating custom multisig transaction signers.</p>
 ;
 ; Concrete implementations have to implement {@link #getSignature(org.bitcoinj.core.Sha256Hash, java.util.List)}
 ; method returning a signature and a public key of the keypair used to created that signature.
 ; It's up to custom implementation where to locate signatures: it may be a network connection,
 ; some local API or something else.
 ; </p>
 ;;
#_public
#_abstract
(§ class #_"CustomTransactionSigner" (§ extends #_"StatelessTransactionSigner")
    #_private
    #_static
    (§ def- #_"Logger" (§ name log) (LoggerFactory/getLogger (§ klass #_"CustomTransactionSigner")))

    #_override
    #_public
    (§ method #_"boolean" (§ fn isReady) [])
    (§ block
        true
    )

    #_override
    #_public
    (§ method #_"boolean" (§ fn signInputs) [#_"ProposedTransaction" (§ name propTx), #_"KeyBag" (§ name keyBag)])
    (§ block
        (§ var #_"Transaction" (§ name tx) (.. propTx partialTx))
        (§ var #_"int" (§ name numInputs) (.. tx (getInputs) (size)))
        (§ for (§ var #_"int" (§ name i) 0) :for (< i numInputs) :for (§ ass (§ name i) (+ i 1)))
        (§ block
            (§ var #_"TransactionInput" (§ name txIn) (.. tx (getInput i)))
            (§ var #_"TransactionOutput" (§ name txOut) (.. txIn (getConnectedOutput)))
            (§ if (nil? txOut))
            (§ block
                (§ continue )
            )

            (§ var #_"Script" (§ name scriptPubKey) (.. txOut (getScriptPubKey)))
            (§ if (§ not (.. scriptPubKey (isPayToScriptHash))))
            (§ block
                (.. log (warn "CustomTransactionSigner works only with P2SH transactions"))
                (§ return false)
            )

            (§ var #_"Script" (§ name inputScript) (Preconditions/checkNotNull (.. txIn (getScriptSig))))

            (§ try )
            (§ block
                ;; We assume if its already signed, its hopefully got a SIGHASH type that will not invalidate when
                ;; we sign missing pieces (to check this would require either assuming any signatures are signing
                ;; standard output types or a way to get processed signatures out of script execution).
                (.. txIn (getScriptSig) (correctlySpends tx, i, (.. txIn (getConnectedOutput) (getScriptPubKey))))
                (.. log (warn "Input {} already correctly spends output, assuming SIGHASH type used will be safe and skipping signing.", i))
                (§ continue )
            )
            (§ catch #_"ScriptException" (§ name _))
            (§ block
                ;; Expected.
            )

            (§ var #_"RedeemData" (§ name redeemData) (.. txIn (getConnectedRedeemData keyBag)))
            (§ if (nil? redeemData))
            (§ block
                (.. log (warn "No redeem data found for input {}", i))
                (§ continue )
            )

            (§ var #_"Sha256Hash" (§ name sighash) (.. tx (hashForSignature i, (.. redeemData redeemScript), Transaction/SigHash/ALL, false)))
            (§ var #_"SignatureAndKey" (§ name sigKey) (getSignature sighash, (.. propTx keyPaths (get scriptPubKey))))
            (§ var #_"TransactionSignature" (§ name txSig) (§ new #_"TransactionSignature" (.. sigKey sig), Transaction/SigHash/ALL, false))
            (§ var #_"int" (§ name sigIndex) (.. inputScript (getSigInsertionIndex sighash, (.. sigKey pubKey))))
            (§ ass (§ name inputScript) (.. scriptPubKey (getScriptSigWithSignature inputScript, (.. txSig (encodeToBitcoin)), sigIndex)))
            (.. txIn (setScriptSig inputScript))
        )
        true
    )

    #_protected
    #_abstract
    (§ method #_"SignatureAndKey" (§ fn getSignature) [#_"Sha256Hash" (§ name sighash), #_"List<ChildNumber>" (§ name derivationPath)])

    #_public
    (§ class #_"SignatureAndKey"
        #_public
        (§ field #_"ECKey.ECDSASignature" (§ name sig))
        #_public
        (§ field #_"ECKey" (§ name pubKey))

        #_public
        (§ constructor #_"SignatureAndKey" [#_"ECKey.ECDSASignature" (§ name sig), #_"ECKey" (§ name pubKey)])
        (§ block
            (§ ass (§ name (.. this sig)) sig)
            (§ ass (§ name (.. this pubKey)) pubKey)
            this
        )
    )
)

#_(ns org.bitcoinj.signers #_"LocalTransactionSigner"
    (:import [java.util EnumSet])
    (:import [org.slf4j Logger LoggerFactory])
   (:require [org.bitcoinj.core ECKey ScriptException Transaction TransactionInput]
             [org.bitcoinj.crypto DeterministicKey TransactionSignature]
             [org.bitcoinj.script Script]
             [org.bitcoinj.script.Script VerifyFlag]
             [org.bitcoinj.wallet KeyBag RedeemData]))

;;;
 ; <p>{@link TransactionSigner} implementation for signing inputs using keys from provided {@link org.bitcoinj.wallet.KeyBag}.</p>
 ; <p>This signer doesn't create input scripts for tx inputs.  Instead it expects inputs to contain scripts with
 ; empty sigs and replaces one of the empty sigs with calculated signature.
 ; </p>
 ; <p>This signer is always implicitly added into every wallet and it is the first signer to be executed during tx
 ; completion.  As the first signer to create a signature, it stores derivation path of the signing key in a given
 ; {@link ProposedTransaction} object that will be also passed then to the next signer in chain.  This allows other
 ; signers to use correct signing key for P2SH inputs, because all the keys involved in a single P2SH address have
 ; the same derivation path.</p>
 ; <p>This signer always uses {@link org.bitcoinj.core.Transaction.SigHash#ALL} signing mode.</p>
 ;;
#_public
(§ class #_"LocalTransactionSigner" (§ extends #_"StatelessTransactionSigner")
    #_private
    #_static
    (§ def- #_"Logger" (§ name log) (LoggerFactory/getLogger (§ klass #_"LocalTransactionSigner")))

    ;;;
     ; Verify flags that are safe to use when testing if an input is already signed.
     ;;
    #_private
    #_static
    (§ def- #_"EnumSet<VerifyFlag>" (§ name MINIMUM_VERIFY_FLAGS) (EnumSet/of VerifyFlag/P2SH, VerifyFlag/NULLDUMMY))

    #_override
    #_public
    (§ method #_"boolean" (§ fn isReady) [])
    (§ block
        true
    )

    #_override
    #_public
    (§ method #_"boolean" (§ fn signInputs) [#_"ProposedTransaction" (§ name propTx), #_"KeyBag" (§ name keyBag)])
    (§ block
        (§ var #_"Transaction" (§ name tx) (.. propTx partialTx))
        (§ var #_"int" (§ name numInputs) (.. tx (getInputs) (size)))
        (§ for (§ var #_"int" (§ name i) 0) :for (< i numInputs) :for (§ ass (§ name i) (+ i 1)))
        (§ block
            (§ var #_"TransactionInput" (§ name txIn) (.. tx (getInput i)))
            (§ if (== (.. txIn (getConnectedOutput)) nil))
            (§ block
                (.. log (warn "Missing connected output, assuming input {} is already signed.", i))
                (§ continue )
            )

            (§ try )
            (§ block
                ;; We assume if its already signed, its hopefully got a SIGHASH type that will not invalidate when
                ;; we sign missing pieces (to check this would require either assuming any signatures are signing
                ;; standard output types or a way to get processed signatures out of script execution).
                (.. txIn (getScriptSig) (correctlySpends tx, i, (.. txIn (getConnectedOutput) (getScriptPubKey)), MINIMUM_VERIFY_FLAGS))
                (.. log (warn "Input {} already correctly spends output, assuming SIGHASH type used will be safe and skipping signing.", i))
                (§ continue )
            )
            (§ catch #_"ScriptException" (§ name _))
            (§ block
                ;; Expected.
            )

            (§ var #_"RedeemData" (§ name redeemData) (.. txIn (getConnectedRedeemData keyBag)))

            (§ var #_"Script" (§ name scriptPubKey) (.. txIn (getConnectedOutput) (getScriptPubKey)))

            ;; For P2SH inputs we need to share derivation path of the signing key with other signers, so that they
            ;; use correct key to calculate their signatures.
            ;; Married keys all have the same derivation path, so we can safely just take first one here.
            (§ var #_"ECKey" (§ name pubKey) (.. redeemData keys (get 0)))
            (§ if (§ insta pubKey #_"DeterministicKey"))
            (§ block
                (.. propTx keyPaths (put scriptPubKey, (§ expr (.. (§ cast #_"DeterministicKey" pubKey) (getPath)))))
            )

            (§ var #_"ECKey" (§ name key))
            ;; Locate private key in redeem data.  For pay-to-address and pay-to-key inputs RedeemData will always contain
            ;; only one key (with private bytes).  For P2SH inputs RedeemData will contain multiple keys, one of which MAY
            ;; have private bytes.
            (§ if (== (§ ass (§ name key) (.. redeemData (getFullKey))) nil))
            (§ block
                (.. log (warn "No local key found for input {}", i))
                (§ continue )
            )

            (§ var #_"Script" (§ name inputScript) (.. txIn (getScriptSig)))
            ;; script here would be either a standard CHECKSIG program for pay-to-address or pay-to-pubkey inputs or
            ;; a CHECKMULTISIG program for P2SH inputs.
            (§ var #_"byte[]" (§ name script) (.. redeemData redeemScript (getProgram)))
            (§ try )
            (§ block
                (§ var #_"TransactionSignature" (§ name signature) (.. tx (calculateSignature i, key, script, Transaction/SigHash/ALL, false)))

                ;; At this point we have incomplete inputScript with OP_0 in place of one or more signatures.  We already
                ;; have calculated the signature using the local key and now need to insert it in the correct place
                ;; within inputScript.  For pay-to-address and pay-to-key script there is only one signature and it always
                ;; goes first in an inputScript (sigIndex = 0).  In P2SH input scripts we need to figure out our relative
                ;; position relative to other signers.  Since we don't have that information at this point, and since
                ;; we always run first, we have to depend on the other signers rearranging the signatures as needed.
                ;; Therefore, always place as first signature.
                (§ var #_"int" (§ name sigIndex) 0)
                (§ ass (§ name inputScript) (.. scriptPubKey (getScriptSigWithSignature inputScript, (.. signature (encodeToBitcoin)), sigIndex)))
                (.. txIn (setScriptSig inputScript))
            )
            (§ catch #_"ECKey.KeyIsEncryptedException" (§ name e))
            (§ block
                (§ throw e)
            )
            (§ catch #_"ECKey.MissingPrivateKeyException" (§ name _))
            (§ block
                (.. log (warn "No private key in keypair for input {}", i))
            )
        )
        true
    )
)

#_(ns org.bitcoinj.signers #_"MissingSigResolutionSigner"
    (:import [org.slf4j Logger LoggerFactory])
   (:require [org.bitcoinj.core ECKey TransactionInput]
             [org.bitcoinj.crypto TransactionSignature]
             [org.bitcoinj.script Script ScriptChunk]
             [org.bitcoinj.wallet KeyBag Wallet]))

;;;
 ; This transaction signer resolves missing signatures in accordance with the given {@link org.bitcoinj.wallet.Wallet.MissingSigsMode}.
 ; If missingSigsMode is USE_OP_ZERO this signer does nothing assuming missing signatures are already presented in scriptSigs as OP_0.
 ; In MissingSigsMode.THROW mode this signer will throw an exception.  It would be MissingSignatureException
 ; for P2SH or MissingPrivateKeyException for other transaction types.
 ;;
#_public
(§ class #_"MissingSigResolutionSigner" (§ extends #_"StatelessTransactionSigner")
    #_private
    #_static
    (§ def- #_"Logger" (§ name log) (LoggerFactory/getLogger (§ klass #_"MissingSigResolutionSigner")))

    #_public
    (§ field #_"Wallet.MissingSigsMode" (§ name missingSigsMode) Wallet/MissingSigsMode/USE_DUMMY_SIG)

    #_public
    (§ constructor #_"MissingSigResolutionSigner" [])
    (§ block
        this
    )

    #_public
    (§ constructor #_"MissingSigResolutionSigner" [#_"Wallet.MissingSigsMode" (§ name missingSigsMode)])
    (§ block
        (§ ass (§ name (.. this missingSigsMode)) missingSigsMode)
        this
    )

    #_override
    #_public
    (§ method #_"boolean" (§ fn isReady) [])
    (§ block
        true
    )

    #_override
    #_public
    (§ method #_"boolean" (§ fn signInputs) [#_"ProposedTransaction" (§ name propTx), #_"KeyBag" (§ name keyBag)])
    (§ block
        (§ if (§ expr missingSigsMode == Wallet/MissingSigsMode/USE_OP_ZERO))
        (§ block
            (§ return true)
        )

        (§ var #_"int" (§ name numInputs) (.. propTx partialTx (getInputs) (size)))
        (§ var #_"byte[]" (§ name dummySig) (.. (TransactionSignature/dummy) (encodeToBitcoin)))
        (§ for (§ var #_"int" (§ name i) 0) :for (< i numInputs) :for (§ ass (§ name i) (+ i 1)))
        (§ block
            (§ var #_"TransactionInput" (§ name txIn) (.. propTx partialTx (getInput i)))
            (§ if (== (.. txIn (getConnectedOutput)) nil))
            (§ block
                (.. log (warn "Missing connected output, assuming input {} is already signed.", i))
                (§ continue )
            )

            (§ var #_"Script" (§ name scriptPubKey) (.. txIn (getConnectedOutput) (getScriptPubKey)))
            (§ var #_"Script" (§ name inputScript) (.. txIn (getScriptSig)))
            (§ if (§ expr (.. scriptPubKey (isPayToScriptHash)) || (.. scriptPubKey (isSentToMultiSig))))
            (§ block
                (§ var #_"int" (§ name sigSuffixCount) (if (.. scriptPubKey (isPayToScriptHash)) 1 0))
                ;; All chunks except the first one (OP_0) and the last (redeem script) are signatures.
                (§ for (§ var #_"int" (§ name j) 1) :for (§ expr j < (.. inputScript (getChunks) (size)) - sigSuffixCount) :for (§ ass (§ name j) (+ j 1)))
                (§ block
                    (§ var #_"ScriptChunk" (§ name scriptChunk) (.. inputScript (getChunks) (get j)))
                    (§ if (.. scriptChunk (equalsOpCode 0)))
                    (§ block
                        (§ if (§ expr missingSigsMode == Wallet/MissingSigsMode/THROW))
                        (§ block
                            (§ throw (§ new #_"MissingSignatureException"))
                        )

                        (§ if (§ expr missingSigsMode == Wallet/MissingSigsMode/USE_DUMMY_SIG))
                        (§ block
                            (.. txIn (setScriptSig (.. scriptPubKey (getScriptSigWithSignature inputScript, dummySig, (§ expr j - 1)))))
                        )
                    )
                )
            )
            (§ else )
            (§ block
                (§ if (.. inputScript (getChunks) (get 0) (equalsOpCode 0)))
                (§ block
                    (§ if (§ expr missingSigsMode == Wallet/MissingSigsMode/THROW))
                    (§ block
                        (§ throw (§ new #_"ECKey.MissingPrivateKeyException"))
                    )

                    (§ if (§ expr missingSigsMode == Wallet/MissingSigsMode/USE_DUMMY_SIG))
                    (§ block
                        (.. txIn (setScriptSig (.. scriptPubKey (getScriptSigWithSignature inputScript, dummySig, 0))))
                    )
                )
            )
            ;; TODO: Handle non-P2SH multisig.
        )
        true
    )
)

#_(ns org.bitcoinj.signers #_"StatelessTransactionSigner")

;;;
 ; A signer that doesn't have any state to be serialized.
 ;;
#_public
#_abstract
(§ class #_"StatelessTransactionSigner" (§ implements #_"TransactionSigner")
    #_override
    #_public
    (§ method #_"void" (§ fn deserialize) [#_"byte[]" (§ name data)])
    (§ block
        nil
    )

    #_override
    #_public
    (§ method #_"byte[]" (§ fn serialize) [])
    (§ block
        (§ new #_"byte[]" (§ count 0))
    )
)

#_(ns org.bitcoinj.signers #_"TransactionSigner"
    (:import [java.util HashMap List Map])
   (:require [org.bitcoinj.core Transaction]
             [org.bitcoinj.crypto ChildNumber]
             [org.bitcoinj.script Script]
             [org.bitcoinj.wallet KeyBag]))

;;;
 ; <p>Implementations of this interface are intended to sign inputs of the given transaction.
 ; Given transaction may already be partially signed or somehow altered by other signers.</p>
 ; <p>To make use of the signer, you need to add it into the wallet by calling
 ; {@link org.bitcoinj.wallet.Wallet#addTransactionSigner(TransactionSigner)}.
 ; Signer will be serialized along with the wallet data.  In order for a wallet to recreate
 ; signer after deserialization, each signer should have no-args constructor.</p>
 ;;
#_public
(§ interface #_"TransactionSigner"
    ;;;
     ; This class wraps transaction proposed to complete keeping a metadata that may be updated, used and effectively
     ; shared by transaction signers.
     ;;
    (§ class #_"ProposedTransaction"
        #_public
        (§ field #_"Transaction" (§ name partialTx))

        ;;;
         ; HD key paths used for each input to derive a signing key.  It's useful for multisig inputs only.
         ; The keys used to create a single P2SH address have the same derivation path, so to use a correct key each signer
         ; has to know a derivation path of signing keys used by previous signers.  For each input signers will use the
         ; same derivation path and we need to store only one key path per input.  As TransactionInput is mutable, inputs
         ; are identified by their scriptPubKeys (keys in this map).
         ;;
        #_public
        (§ field #_"Map<Script, List<ChildNumber>>" (§ name keyPaths))

        #_public
        (§ constructor #_"ProposedTransaction" [#_"Transaction" (§ name partialTx)])
        (§ block
            (§ ass (§ name (.. this partialTx)) partialTx)
            (§ ass (§ name (.. this keyPaths)) (§ new #_"HashMap<>"))
            this
        )
    )

    (§ class #_"MissingSignatureException" (§ extends #_"RuntimeException")
    )

    ;;;
     ; Returns true if this signer is ready to be used.
     ;;
    (§ method #_"boolean" (§ fn isReady) [])

    ;;;
     ; Returns byte array of data representing state of this signer.
     ; It's used to serialize/deserialize this signer.
     ;;
    (§ method #_"byte[]" (§ fn serialize) [])

    ;;;
     ; Uses given byte array of data to reconstruct internal state of this signer.
     ;;
    (§ method #_"void" (§ fn deserialize) [#_"byte[]" (§ name data)])

    ;;;
     ; Signs given transaction's inputs.
     ; Returns true if signer is compatible with given transaction (can do something meaningful with it).
     ; Otherwise this method returns false.
     ;;
    (§ method #_"boolean" (§ fn signInputs) [#_"ProposedTransaction" (§ name propTx), #_"KeyBag" (§ name keyBag)])
)

#_(ns org.bitcoinj.store #_"BlockStore"
   (:require [org.bitcoinj.core NetworkParameters Sha256Hash StoredBlock]))

;;;
 ; An implementor of BlockStore saves StoredBlock objects to disk.  Different implementations store them in
 ; different ways.  An in-memory implementation (MemoryBlockStore) exists for unit testing but real apps will
 ; want to use implementations that save to disk.
 ;
 ; A BlockStore is a map of hashes to StoredBlock.  The hash is the double digest of the Bitcoin serialization
 ; of the block header, <b>not</b> the header with the extra data as well.
 ;
 ; BlockStores are thread safe.
 ;;
#_public
(§ interface #_"BlockStore"
    ;;;
     ; Saves the given block header+extra data.  The key isn't specified explicitly as it can be calculated
     ; from the StoredBlock directly.  Can throw if there is a problem with the underlying storage layer such
     ; as running out of disk space.
     ;;
    (§ method #_"void" (§ fn put) [#_"StoredBlock" (§ name block)])
        (§ throws #_"BlockStoreException")

    ;;;
     ; Returns the StoredBlock given a hash.  The returned values block.getHash() method will be equal to the
     ; parameter. If no such block is found, returns null.
     ;;
    (§ method #_"StoredBlock" (§ fn get) [#_"Sha256Hash" (§ name hash)])
        (§ throws #_"BlockStoreException")

    ;;;
     ; Returns the {@link StoredBlock} that represents the top of the chain of greatest total work.  Note that
     ; this can be arbitrarily expensive, you probably should use {@link org.bitcoinj.core.BlockChain#getChainHead()}
     ; or perhaps {@link org.bitcoinj.core.BlockChain#getBestChainHeight()} which will run in constant time and
     ; not take any heavyweight locks.
     ;;
    (§ method #_"StoredBlock" (§ fn getChainHead) [])
        (§ throws #_"BlockStoreException")

    ;;;
     ; Sets the {@link StoredBlock} that represents the top of the chain of greatest total work.
     ;;
    (§ method #_"void" (§ fn setChainHead) [#_"StoredBlock" (§ name chainHead)])
        (§ throws #_"BlockStoreException")

    ;;; Closes the store. ;;
    (§ method #_"void" (§ fn close) [])
        (§ throws #_"BlockStoreException")

    ;;;
     ; Get the {@link org.bitcoinj.core.NetworkParameters} of this store.
     ; @return the network params.
     ;;
    (§ method #_"NetworkParameters" (§ fn getParams) [])
)

#_(ns org.bitcoinj.store #_"BlockStoreException")

;;;
 ; Thrown when something goes wrong with storing a block.  Examples: out of disk space.
 ;;
#_public
(§ class #_"BlockStoreException" (§ extends #_"Exception")
    #_public
    (§ constructor #_"BlockStoreException" [#_"String" (§ name message)])
    (§ block
        (§ super message)
        this
    )

    #_public
    (§ constructor #_"BlockStoreException" [#_"Throwable" (§ name t)])
    (§ block
        (§ super t)
        this
    )

    #_public
    (§ constructor #_"BlockStoreException" [#_"String" (§ name message), #_"Throwable" (§ name t)])
    (§ block
        (§ super message, t)
        this
    )
)

#_(ns org.bitcoinj.store #_"ChainFileLockedException")

;;;
 ; Thrown by {@link SPVBlockStore} when the process cannot gain exclusive access to the chain file.
 ;;
#_public
(§ class #_"ChainFileLockedException" (§ extends #_"BlockStoreException")
    #_public
    (§ constructor #_"ChainFileLockedException" [#_"String" (§ name message)])
    (§ block
        (§ super message)
        this
    )

    #_public
    (§ constructor #_"ChainFileLockedException" [#_"Throwable" (§ name t)])
    (§ block
        (§ super t)
        this
    )
)

#_(ns org.bitcoinj.store #_"DatabaseFullPrunedBlockStore"
    (:import [java.io ByteArrayInputStream ByteArrayOutputStream IOException]
             [java.math BigInteger]
             [java.sql *]
             [java.util *])
    (:import [com.google.common.collect Lists]
             [org.slf4j Logger LoggerFactory])
   (:require [org.bitcoinj.core *]
             [org.bitcoinj.script Script]))

;;;
 ; <p>A generic full pruned block store for a relational database.  This generic class
 ; requires certain table structures for the block store.</p>
 ;
 ; <p>The following are the tables and field names/types that are assumed:</p>
 ;
 ; <p>
 ; <b>setting</b> table
 ; <table>
 ;     <tr><th>Field Name</th><th>Type (generic)</th></tr>
 ;     <tr><td>name</td><td>string</td></tr>
 ;     <tr><td>value</td><td>binary</td></tr>
 ; </table>
 ; </p>
 ;
 ; <p>
 ; <b>headers</b> table
 ; <table>
 ;     <tr><th>Field Name</th><th>Type (generic)</th></tr>
 ;     <tr><td>hash</td><td>binary</td></tr>
 ;     <tr><td>chainwork</td><td>binary</td></tr>
 ;     <tr><td>height</td><td>integer</td></tr>
 ;     <tr><td>header</td><td>binary</td></tr>
 ;     <tr><td>wasundoable</td><td>boolean</td></tr>
 ; </table>
 ; </p>
 ;
 ; <p>
 ; <b>undoableblocks</b> table
 ; <table>
 ;     <tr><th>Field Name</th><th>Type (generic)</th></tr>
 ;     <tr><td>hash</td><td>binary</td></tr>
 ;     <tr><td>height</td><td>integer</td></tr>
 ;     <tr><td>txoutchanges</td><td>binary</td></tr>
 ;     <tr><td>transactions</td><td>binary</td></tr>
 ; </table>
 ; </p>
 ;
 ; <p>
 ; <b>openoutputs</b> table
 ; <table>
 ;     <tr><th>Field Name</th><th>Type (generic)</th></tr>
 ;     <tr><td>hash</td><td>binary</td></tr>
 ;     <tr><td>index</td><td>integer</td></tr>
 ;     <tr><td>height</td><td>integer</td></tr>
 ;     <tr><td>value</td><td>integer</td></tr>
 ;     <tr><td>scriptbytes</td><td>binary</td></tr>
 ;     <tr><td>toaddress</td><td>string</td></tr>
 ;     <tr><td>addresstargetable</td><td>integer</td></tr>
 ;     <tr><td>coinbase</td><td>boolean</td></tr>
 ; </table>
 ; </p>
 ;
 ;;
#_public
#_abstract
(§ class #_"DatabaseFullPrunedBlockStore" (§ implements #_"FullPrunedBlockStore")
    #_private
    #_static
    (§ def- #_"Logger" (§ name log) (LoggerFactory/getLogger (§ klass #_"DatabaseFullPrunedBlockStore")))

    #_private
    #_static
    (§ def- #_"String" (§ name CHAIN_HEAD_SETTING) "chainhead")
    #_private
    #_static
    (§ def- #_"String" (§ name VERIFIED_CHAIN_HEAD_SETTING) "verifiedchainhead")
    #_private
    #_static
    (§ def- #_"String" (§ name VERSION_SETTING) "version")

    ;; Drop table SQL.
    #_private
    #_static
    (§ def- #_"String" (§ name DROP_SETTINGS_TABLE) "DROP TABLE settings")
    #_private
    #_static
    (§ def- #_"String" (§ name DROP_HEADERS_TABLE) "DROP TABLE headers")
    #_private
    #_static
    (§ def- #_"String" (§ name DROP_UNDOABLE_TABLE) "DROP TABLE undoableblocks")
    #_private
    #_static
    (§ def- #_"String" (§ name DROP_OPEN_OUTPUT_TABLE) "DROP TABLE openoutputs")

    ;; Queries SQL.
    #_private
    #_static
    (§ def- #_"String" (§ name SELECT_SETTINGS_SQL) "SELECT value FROM settings WHERE name = ?")
    #_private
    #_static
    (§ def- #_"String" (§ name INSERT_SETTINGS_SQL) "INSERT INTO settings(name, value) VALUES(?, ?)")
    #_private
    #_static
    (§ def- #_"String" (§ name UPDATE_SETTINGS_SQL) "UPDATE settings SET value = ? WHERE name = ?")

    #_private
    #_static
    (§ def- #_"String" (§ name SELECT_HEADERS_SQL) "SELECT chainwork, height, header, wasundoable FROM headers WHERE hash = ?")
    #_private
    #_static
    (§ def- #_"String" (§ name INSERT_HEADERS_SQL) "INSERT INTO headers(hash, chainwork, height, header, wasundoable) VALUES(?, ?, ?, ?, ?)")
    #_private
    #_static
    (§ def- #_"String" (§ name UPDATE_HEADERS_SQL) "UPDATE headers SET wasundoable=? WHERE hash=?")

    #_private
    #_static
    (§ def- #_"String" (§ name SELECT_UNDOABLEBLOCKS_SQL) "SELECT txoutchanges, transactions FROM undoableblocks WHERE hash = ?")
    #_private
    #_static
    (§ def- #_"String" (§ name INSERT_UNDOABLEBLOCKS_SQL) "INSERT INTO undoableblocks(hash, height, txoutchanges, transactions) VALUES(?, ?, ?, ?)")
    #_private
    #_static
    (§ def- #_"String" (§ name UPDATE_UNDOABLEBLOCKS_SQL) "UPDATE undoableblocks SET txoutchanges=?, transactions=? WHERE hash = ?")
    #_private
    #_static
    (§ def- #_"String" (§ name DELETE_UNDOABLEBLOCKS_SQL) "DELETE FROM undoableblocks WHERE height <= ?")

    #_private
    #_static
    (§ def- #_"String" (§ name SELECT_OPENOUTPUTS_SQL) "SELECT height, value, scriptbytes, coinbase, toaddress, addresstargetable FROM openoutputs WHERE hash = ? AND index = ?")
    #_private
    #_static
    (§ def- #_"String" (§ name SELECT_OPENOUTPUTS_COUNT_SQL) "SELECT COUNT(*) FROM openoutputs WHERE hash = ?")
    #_private
    #_static
    (§ def- #_"String" (§ name INSERT_OPENOUTPUTS_SQL) "INSERT INTO openoutputs (hash, index, height, value, scriptbytes, toaddress, addresstargetable, coinbase) VALUES (?, ?, ?, ?, ?, ?, ?, ?)")
    #_private
    #_static
    (§ def- #_"String" (§ name DELETE_OPENOUTPUTS_SQL) "DELETE FROM openoutputs WHERE hash = ? AND index = ?")

    ;; Dump table SQL (this is just for data sizing statistics).
    #_private
    #_static
    (§ def- #_"String" (§ name SELECT_DUMP_SETTINGS_SQL) "SELECT name, value FROM settings")
    #_private
    #_static
    (§ def- #_"String" (§ name SELECT_DUMP_HEADERS_SQL) "SELECT chainwork, header FROM headers")
    #_private
    #_static
    (§ def- #_"String" (§ name SELECT_DUMP_UNDOABLEBLOCKS_SQL) "SELECT txoutchanges, transactions FROM undoableblocks")
    #_private
    #_static
    (§ def- #_"String" (§ name SELECT_DUMP_OPENOUTPUTS_SQL) "SELECT value, scriptbytes FROM openoutputs")

    #_private
    #_static
    (§ def- #_"String" (§ name SELECT_TRANSACTION_OUTPUTS_SQL) "SELECT hash, value, scriptbytes, height, index, coinbase, toaddress, addresstargetable FROM openoutputs where toaddress = ?")

    ;; Select the balance of an address SQL.
    #_private
    #_static
    (§ def- #_"String" (§ name SELECT_BALANCE_SQL) "select sum(value) from openoutputs where toaddress = ?")

    ;; Tables exist SQL.
    #_private
    #_static
    (§ def- #_"String" (§ name SELECT_CHECK_TABLES_EXIST_SQL) "SELECT * FROM settings WHERE 1 = 2")

    ;; Compatibility SQL.
    #_private
    #_static
    (§ def- #_"String" (§ name SELECT_COMPATIBILITY_COINBASE_SQL) "SELECT coinbase FROM openoutputs WHERE 1 = 2")

    #_protected
    (§ field #_"Sha256Hash" (§ name chainHeadHash))
    #_protected
    (§ field #_"StoredBlock" (§ name chainHeadBlock))
    #_protected
    (§ field #_"Sha256Hash" (§ name verifiedChainHeadHash))
    #_protected
    (§ field #_"StoredBlock" (§ name verifiedChainHeadBlock))
    #_protected
    (§ field #_"NetworkParameters" (§ name params))
    #_protected
    (§ field #_"ThreadLocal<Connection>" (§ name conn))
    #_protected
    (§ field #_"List<Connection>" (§ name allConnections))
    #_protected
    (§ field #_"String" (§ name connectionURL))
    #_protected
    (§ field #_"int" (§ name fullStoreDepth))
    #_protected
    (§ field #_"String" (§ name username))
    #_protected
    (§ field #_"String" (§ name password))
    #_protected
    (§ field #_"String" (§ name schemaName))

    ;;;
     ; <p>Create a new DatabaseFullPrunedBlockStore, using the full connection URL instead of a hostname and password,
     ; and optionally allowing a schema to be specified.</p>
     ;
     ; @param params A copy of the NetworkParameters used.
     ; @param connectionURL The jdbc url to connect to the database.
     ; @param fullStoreDepth The number of blocks of history stored in full (something like 1000 is pretty safe).
     ; @param username The database username.
     ; @param password The password to the database.
     ; @param schemaName The name of the schema to put the tables in.  May be null if no schema is being used.
     ; @throws BlockStoreException if there is a failure to connect and/or initialise the database.
     ;;
    #_public
    (§ constructor #_"DatabaseFullPrunedBlockStore" [#_"NetworkParameters" (§ name params), #_"String" (§ name connectionURL), #_"int" (§ name fullStoreDepth), #_nilable #_"String" (§ name username), #_nilable #_"String" (§ name password), #_nilable #_"String" (§ name schemaName)])
        (§ throws #_"BlockStoreException")
    (§ block
        (§ ass (§ name (.. this params)) params)
        (§ ass (§ name (.. this fullStoreDepth)) fullStoreDepth)
        (§ ass (§ name (.. this connectionURL)) connectionURL)
        (§ ass (§ name (.. this schemaName)) schemaName)
        (§ ass (§ name (.. this username)) username)
        (§ ass (§ name (.. this password)) password)
        (§ ass (§ name (.. this conn)) (§ new #_"ThreadLocal<>"))
        (§ ass (§ name (.. this allConnections)) (§ new #_"LinkedList<>"))

        (§ try )
        (§ block
            (Class/forName (getDatabaseDriverClass))
            (.. log (info (§ expr (getDatabaseDriverClass) + " loaded. ")))
        )
        (§ catch #_"ClassNotFoundException" (§ name e))
        (§ block
            (.. log (error "check CLASSPATH for database driver jar ", e))
        )

        (maybeConnect)

        (§ try )
        (§ block
            ;; Create tables if needed.
            (§ if (§ not (tablesExist)))
            (§ block
                (createTables)
            )
            (§ else )
            (§ block
                (checkCompatibility)
            )
            (initFromDatabase)
        )
        (§ catch #_"SQLException" (§ name e))
        (§ block
            (§ throw (§ new #_"BlockStoreException" e))
        )
        this
    )

    ;;;
     ; Get the database driver class, i.e <i>org.postgresql.Driver</i>.
     ; @return the fully qualified database driver class.
     ;;
    #_protected
    #_abstract
    (§ method #_"String" (§ fn getDatabaseDriverClass) [])

    ;;;
     ; Get the SQL statements that create the schema (DDL).
     ; @return the list of SQL statements.
     ;;
    #_protected
    #_abstract
    (§ method #_"List<String>" (§ fn getCreateSchemeSQL) [])

    ;;;
     ; Get the SQL statements that create the tables (DDL).
     ; @return the list of SQL statements.
     ;;
    #_protected
    #_abstract
    (§ method #_"List<String>" (§ fn getCreateTablesSQL) [])

    ;;;
     ; Get the SQL statements that create the indexes (DDL).
     ; @return the list of SQL statements.
     ;;
    #_protected
    #_abstract
    (§ method #_"List<String>" (§ fn getCreateIndexesSQL) [])

    ;;;
     ; Get the database specific error code that indicated a duplicate key error when inserting a record.
     ; <p>This is the code returned by {@link java.sql.SQLException#getSQLState()}.</p>
     ; @return the database duplicate error code.
     ;;
    #_protected
    #_abstract
    (§ method #_"String" (§ fn getDuplicateKeyErrorCode) [])

    ;;;
     ; Get the SQL to select the total balance for a given address.
     ; @return the SQL prepared statement.
     ;;
    #_protected
    (§ method #_"String" (§ fn getBalanceSelectSQL) [])
    (§ block
        SELECT_BALANCE_SQL
    )

    ;;;
     ; Get the SQL statement that checks if tables exist.
     ; @return the SQL prepared statement.
     ;;
    #_protected
    (§ method #_"String" (§ fn getTablesExistSQL) [])
    (§ block
        SELECT_CHECK_TABLES_EXIST_SQL
    )

    ;;;
     ; Get the SQL statements to check if the database is compatible.
     ; @return the SQL prepared statements.
     ;;
    #_protected
    (§ method #_"List<String>" (§ fn getCompatibilitySQL) [])
    (§ block
        (§ var #_"List<String>" (§ name sql) (§ new #_"ArrayList<>"))
        (.. sql (add SELECT_COMPATIBILITY_COINBASE_SQL))
        sql
    )

    ;;;
     ; Get the SQL to select the transaction outputs for a given address.
     ; @return the SQL prepared statement.
     ;;
    #_protected
    (§ method #_"String" (§ fn getTransactionOutputSelectSQL) [])
    (§ block
        SELECT_TRANSACTION_OUTPUTS_SQL
    )

    ;;;
     ; Get the SQL to drop all the tables (DDL).
     ; @return the SQL drop statements.
     ;;
    #_protected
    (§ method #_"List<String>" (§ fn getDropTablesSQL) [])
    (§ block
        (§ var #_"List<String>" (§ name sql) (§ new #_"ArrayList<>"))
        (.. sql (add DROP_SETTINGS_TABLE))
        (.. sql (add DROP_HEADERS_TABLE))
        (.. sql (add DROP_UNDOABLE_TABLE))
        (.. sql (add DROP_OPEN_OUTPUT_TABLE))
        sql
    )

    ;;;
     ; Get the SQL to select a setting value.
     ; @return the SQL select statement.
     ;;
    #_protected
    (§ method #_"String" (§ fn getSelectSettingsSQL) [])
    (§ block
        SELECT_SETTINGS_SQL
    )

    ;;;
     ; Get the SQL to insert a settings record.
     ; @return the SQL insert statement.
     ;;
    #_protected
    (§ method #_"String" (§ fn getInsertSettingsSQL) [])
    (§ block
        INSERT_SETTINGS_SQL
    )

    ;;;
     ; Get the SQL to update a setting value.
     ; @return the SQL update statement.
     ;;
    #_protected
    (§ method #_"String" (§ fn getUpdateSettingsSLQ) [])
    (§ block
        UPDATE_SETTINGS_SQL
    )

    ;;;
     ; Get the SQL to select a headers record.
     ; @return the SQL select statement.
     ;;
    #_protected
    (§ method #_"String" (§ fn getSelectHeadersSQL) [])
    (§ block
        SELECT_HEADERS_SQL
    )

    ;;;
     ; Get the SQL to insert a headers record.
     ; @return the SQL insert statement.
     ;;
    #_protected
    (§ method #_"String" (§ fn getInsertHeadersSQL) [])
    (§ block
        INSERT_HEADERS_SQL
    )

    ;;;
     ; Get the SQL to update a headers record.
     ; @return the SQL update statement.
     ;;
    #_protected
    (§ method #_"String" (§ fn getUpdateHeadersSQL) [])
    (§ block
        UPDATE_HEADERS_SQL
    )

    ;;;
     ; Get the SQL to select an undoableblocks record.
     ; @return the SQL select statement.
     ;;
    #_protected
    (§ method #_"String" (§ fn getSelectUndoableBlocksSQL) [])
    (§ block
        SELECT_UNDOABLEBLOCKS_SQL
    )

    ;;;
     ; Get the SQL to insert a undoableblocks record.
     ; @return the SQL insert statement.
     ;;
    #_protected
    (§ method #_"String" (§ fn getInsertUndoableBlocksSQL) [])
    (§ block
        INSERT_UNDOABLEBLOCKS_SQL
    )

    ;;;
     ; Get the SQL to update a undoableblocks record.
     ; @return the SQL update statement.
     ;;
    #_protected
    (§ method #_"String" (§ fn getUpdateUndoableBlocksSQL) [])
    (§ block
        UPDATE_UNDOABLEBLOCKS_SQL
    )

    ;;;
     ; Get the SQL to delete a undoableblocks record.
     ; @return the SQL delete statement.
     ;;
    #_protected
    (§ method #_"String" (§ fn getDeleteUndoableBlocksSQL) [])
    (§ block
        DELETE_UNDOABLEBLOCKS_SQL
    )

    ;;;
     ; Get the SQL to select a openoutputs record.
     ; @return the SQL select statement.
     ;;
    #_protected
    (§ method #_"String" (§ fn getSelectOpenoutputsSQL) [])
    (§ block
        SELECT_OPENOUTPUTS_SQL
    )

    ;;;
     ; Get the SQL to select count of openoutputs.
     ; @return the SQL select statement.
     ;;
    #_protected
    (§ method #_"String" (§ fn getSelectOpenoutputsCountSQL) [])
    (§ block
        SELECT_OPENOUTPUTS_COUNT_SQL
    )

    ;;;
     ; Get the SQL to insert a openoutputs record.
     ; @return the SQL insert statement.
     ;;
    #_protected
    (§ method #_"String" (§ fn getInsertOpenoutputsSQL) [])
    (§ block
        INSERT_OPENOUTPUTS_SQL
    )

    ;;;
     ; Get the SQL to delete a openoutputs record.
     ; @return the SQL delete statement.
     ;;
    #_protected
    (§ method #_"String" (§ fn getDeleteOpenoutputsSQL) [])
    (§ block
        DELETE_OPENOUTPUTS_SQL
    )

    ;;;
     ; Get the SQL to select the setting dump fields for sizing/statistics.
     ; @return the SQL select statement.
     ;;
    #_protected
    (§ method #_"String" (§ fn getSelectSettingsDumpSQL) [])
    (§ block
        SELECT_DUMP_SETTINGS_SQL
    )

    ;;;
     ; Get the SQL to select the headers dump fields for sizing/statistics.
     ; @return the SQL select statement.
     ;;
    #_protected
    (§ method #_"String" (§ fn getSelectHeadersDumpSQL) [])
    (§ block
        SELECT_DUMP_HEADERS_SQL
    )

    ;;;
     ; Get the SQL to select the undoableblocks dump fields for sizing/statistics.
     ; @return the SQL select statement.
     ;;
    #_protected
    (§ method #_"String" (§ fn getSelectUndoableblocksDumpSQL) [])
    (§ block
        SELECT_DUMP_UNDOABLEBLOCKS_SQL
    )

    ;;;
     ; Get the SQL to select the openoutouts dump fields for sizing/statistics.
     ; @return the SQL select statement.
     ;;
    #_protected
    (§ method #_"String" (§ fn getSelectopenoutputsDumpSQL) [])
    (§ block
        SELECT_DUMP_OPENOUTPUTS_SQL
    )

    ;;;
     ; <p>If there isn't a connection on the {@link ThreadLocal} then create and store it.</p>
     ; <p>This will also automatically set up the schema if it does not exist within the DB.</p>
     ; @throws BlockStoreException if successful connection to the DB couldn't be made.
     ;;
    #_protected
    #_synchronized
    (§ method #_"void" (§ fn maybeConnect) [])
        (§ throws #_"BlockStoreException")
    (§ block
        (§ try )
        (§ block
            (§ if (§ expr (.. conn (get)) != nil && (§ not (.. conn (get) (isClosed)))))
            (§ block
                (§ return nil)
            )

            (§ if (§ expr username == nil || password == nil))
            (§ block
                (.. conn (set (DriverManager/getConnection connectionURL)))
            )
            (§ else )
            (§ block
                (§ var #_"Properties" (§ name props) (§ new #_"Properties"))
                (.. props (setProperty "user", (.. this username)))
                (.. props (setProperty "password", (.. this password)))
                (.. conn (set (DriverManager/getConnection connectionURL, props)))
            )
            (.. allConnections (add (.. conn (get))))
            (§ var #_"Connection" (§ name connection) (.. conn (get)))
            ;; Set the schema if one is needed.
            (§ if (some? schemaName))
            (§ block
                (§ var #_"Statement" (§ name s) (.. connection (createStatement)))
                (§ for (§ var #_"String" (§ name sql)) :for (getCreateSchemeSQL))
                (§ block
                    (.. s (execute sql))
                )
            )
            (.. log (info (§ expr "Made a new connection to database " + connectionURL)))
        )
        (§ catch #_"SQLException" (§ name e))
        (§ block
            (§ throw (§ new #_"BlockStoreException" e))
        )
        nil
    )

    #_override
    #_public
    #_synchronized
    (§ method #_"void" (§ fn close) [])
    (§ block
        (§ for (§ var #_"Connection" (§ name conn)) :for allConnections)
        (§ block
            (§ try )
            (§ block
                (§ if (§ not (.. conn (getAutoCommit))))
                (§ block
                    (.. conn (rollback))
                )
                (.. conn (close))
                (§ if (§ expr conn == (.. this conn (get))))
                (§ block
                    (.. this conn (set nil))
                )
            )
            (§ catch #_"SQLException" (§ name e))
            (§ block
                (§ throw (§ new #_"RuntimeException" e))
            )
        )
        (.. allConnections (clear))
        nil
    )

    ;;;
     ; <p>Check if a tables exists within the database.</p>
     ;
     ; <p>This specifically checks for the 'settings' table and
     ; if it exists makes an assumption that the rest of the data
     ; structures are present.</p>
     ;
     ; @return if the tables exist.
     ; @throws java.sql.SQLException
     ;;
    #_private
    (§ method- #_"boolean" (§ fn tablesExist) [])
        (§ throws #_"SQLException")
    (§ block
        (§ var #_"PreparedStatement" (§ name ps) nil)
        (§ try )
        (§ block
            (§ ass (§ name ps) (.. conn (get) (prepareStatement (getTablesExistSQL))))
            (§ var #_"ResultSet" (§ name results) (.. ps (executeQuery)))
            (.. results (close))
            (§ return true)
        )
        (§ catch #_"SQLException" (§ name _))
        (§ block
            (§ return false)
        )
        (§ finally )
        (§ block
            (§ if (§ expr ps != nil && (§ not (.. ps (isClosed)))))
            (§ block
                (.. ps (close))
            )
        )
    )

    ;;;
     ; Check that the database is compatible with this version of the {@link DatabaseFullPrunedBlockStore}.
     ; @throws BlockStoreException if the database is not compatible.
     ;;
    #_private
    (§ method- #_"void" (§ fn checkCompatibility) [])
        (§ throws #_"SQLException", #_"BlockStoreException")
    (§ block
        (§ for (§ var #_"String" (§ name sql)) :for (getCompatibilitySQL))
        (§ block
            (§ var #_"PreparedStatement" (§ name ps) nil)
            (§ try )
            (§ block
                (§ ass (§ name ps) (.. conn (get) (prepareStatement sql)))
                (§ var #_"ResultSet" (§ name results) (.. ps (executeQuery)))
                (.. results (close))
            )
            (§ catch #_"SQLException" (§ name e))
            (§ block
                (§ throw (§ new #_"BlockStoreException" (§ expr "Database block store is not compatible with the current release.  See bitcoinj release notes for further information: " + (.. e (getMessage)))))
            )
            (§ finally )
            (§ block
                (§ if (§ expr ps != nil && (§ not (.. ps (isClosed)))))
                (§ block
                    (.. ps (close))
                )
            )
        )
        nil
    )

    ;;;
     ; Create the tables in the database.
     ; @throws java.sql.SQLException if there is a database error.
     ; @throws BlockStoreException if the block store could not be created.
     ;;
    #_private
    (§ method- #_"void" (§ fn createTables) [])
        (§ throws #_"SQLException", #_"BlockStoreException")
    (§ block
        (§ var #_"Statement" (§ name s) (.. conn (get) (createStatement)))
        ;; Create all the database tables.
        (§ for (§ var #_"String" (§ name sql)) :for (getCreateTablesSQL))
        (§ block
            (§ if (.. log (isDebugEnabled)))
            (§ block
                (.. log (debug "DatabaseFullPrunedBlockStore : CREATE table [SQL= {0}]", sql))
            )
            (.. s (executeUpdate sql))
        )
        ;; Create all the database indexes.
        (§ for (§ var #_"String" (§ name sql)) :for (getCreateIndexesSQL))
        (§ block
            (§ if (.. log (isDebugEnabled)))
            (§ block
                (.. log (debug "DatabaseFullPrunedBlockStore : CREATE index [SQL= {0}]", sql))
            )
            (.. s (executeUpdate sql))
        )
        (.. s (close))

        ;; Insert the initial settings for this store.
        (§ var #_"PreparedStatement" (§ name ps) (.. conn (get) (prepareStatement (getInsertSettingsSQL))))
        (.. ps (setString 1, CHAIN_HEAD_SETTING))
        (.. ps (setNull 2, Types/BINARY))
        (.. ps (execute))
        (.. ps (setString 1, VERIFIED_CHAIN_HEAD_SETTING))
        (.. ps (setNull 2, Types/BINARY))
        (.. ps (execute))
        (.. ps (setString 1, VERSION_SETTING))
        (.. ps (setBytes 2, (§ expr (.. "03" (getBytes)))))
        (.. ps (execute))
        (.. ps (close))

        (createNewStore params)
        nil
    )

    ;;;
     ; Create a new store for the given {@link org.bitcoinj.core.NetworkParameters}.
     ; @param params The network.
     ; @throws BlockStoreException if the store couldn't be created.
     ;;
    #_private
    (§ method- #_"void" (§ fn createNewStore) [#_"NetworkParameters" (§ name params)])
        (§ throws #_"BlockStoreException")
    (§ block
        (§ try )
        (§ block
            ;; Set up the genesis block.  When we start out fresh, it is by definition the top of the chain.
            (§ var #_"StoredBlock" (§ name storedGenesisHeader) (§ new #_"StoredBlock" (.. params (getGenesisBlock) (cloneAsHeader)), (.. params (getGenesisBlock) (getWork)), 0))
            ;; The coinbase in the genesis block is not spendable.  This is because of how Bitcoin Core inits
            ;; its database - the genesis transaction isn't actually in the db so its spent flags can never be updated.
            (§ var #_"List<Transaction>" (§ name genesisTransactions) (Lists/newLinkedList))
            (§ var #_"StoredUndoableBlock" (§ name storedGenesis) (§ new #_"StoredUndoableBlock" (.. params (getGenesisBlock) (getHash)), genesisTransactions))
            (put storedGenesisHeader, storedGenesis)
            (setChainHead storedGenesisHeader)
            (setVerifiedChainHead storedGenesisHeader)
        )
        (§ catch #_"VerificationException" (§ name e))
        (§ block
            (§ throw (§ new #_"RuntimeException" e)) ;; Cannot happen.
        )
        nil
    )

    ;;;
     ; Initialise the store state from the database.
     ; @throws java.sql.SQLException if there is a database error.
     ; @throws BlockStoreException if there is a block store error.
     ;;
    #_private
    (§ method- #_"void" (§ fn initFromDatabase) [])
        (§ throws #_"SQLException", #_"BlockStoreException")
    (§ block
        (§ var #_"PreparedStatement" (§ name ps) (.. conn (get) (prepareStatement (getSelectSettingsSQL))))
        (§ var #_"ResultSet" (§ name rs))
        (.. ps (setString 1, CHAIN_HEAD_SETTING))
        (§ ass (§ name rs) (.. ps (executeQuery)))
        (§ if (§ not (.. rs (next))))
        (§ block
            (§ throw (§ new #_"BlockStoreException" "corrupt database block store - no chain head pointer"))
        )

        (§ var #_"Sha256Hash" (§ name hash) (Sha256Hash/wrap (.. rs (getBytes 1))))
        (.. rs (close))
        (§ ass (§ name (.. this chainHeadBlock)) (get hash))
        (§ ass (§ name (.. this chainHeadHash)) hash)
        (§ if (== (.. this chainHeadBlock) nil))
        (§ block
            (§ throw (§ new #_"BlockStoreException" "corrupt database block store - head block not found"))
        )

        (.. ps (setString 1, VERIFIED_CHAIN_HEAD_SETTING))
        (§ ass (§ name rs) (.. ps (executeQuery)))
        (§ if (§ not (.. rs (next))))
        (§ block
            (§ throw (§ new #_"BlockStoreException" "corrupt database block store - no verified chain head pointer"))
        )

        (§ ass (§ name hash) (Sha256Hash/wrap (.. rs (getBytes 1))))
        (.. rs (close))
        (.. ps (close))
        (§ ass (§ name (.. this verifiedChainHeadBlock)) (get hash))
        (§ ass (§ name (.. this verifiedChainHeadHash)) hash)
        (§ if (== (.. this verifiedChainHeadBlock) nil))
        (§ block
            (§ throw (§ new #_"BlockStoreException" "corrupt database block store - verified head block not found"))
        )
        nil
    )

    #_protected
    (§ method #_"void" (§ fn putUpdateStoredBlock) [#_"StoredBlock" (§ name storedBlock), #_"boolean" (§ name wasUndoable)])
        (§ throws #_"SQLException")
    (§ block
        (§ try )
        (§ block
            (§ var #_"PreparedStatement" (§ name ps) (.. conn (get) (prepareStatement (getInsertHeadersSQL))))
            ;; We skip the first 4 bytes because (on mainnet) the minimum target has 4 0-bytes.
            (§ var #_"byte[]" (§ name hashBytes) (§ new #_"byte[]" (§ count 28)))
            (System/arraycopy (.. storedBlock (getHeader) (getHash) (getBytes)), 4, hashBytes, 0, 28)
            (.. ps (setBytes 1, hashBytes))
            (.. ps (setBytes 2, (.. storedBlock (getChainWork) (toByteArray))))
            (.. ps (setInt 3, (.. storedBlock (getHeight))))
            (.. ps (setBytes 4, (.. storedBlock (getHeader) (cloneAsHeader) (unsafeBitcoinSerialize))))
            (.. ps (setBoolean 5, wasUndoable))
            (.. ps (executeUpdate))
            (.. ps (close))
        )
        (§ catch #_"SQLException" (§ name e))
        (§ block
            ;; It is possible we try to add a duplicate StoredBlock if we upgraded.
            ;; In that case, we just update the entry to mark it wasUndoable.
            (§ if (§ expr (§ not (.. e (getSQLState) (equals (getDuplicateKeyErrorCode)))) || (§ not wasUndoable)))
            (§ block
                (§ throw e)
            )

            (§ var #_"PreparedStatement" (§ name ps) (.. conn (get) (prepareStatement (getUpdateHeadersSQL))))
            (.. ps (setBoolean 1, true))
            ;; We skip the first 4 bytes because (on mainnet) the minimum target has 4 0-bytes.
            (§ var #_"byte[]" (§ name hashBytes) (§ new #_"byte[]" (§ count 28)))
            (System/arraycopy (.. storedBlock (getHeader) (getHash) (getBytes)), 4, hashBytes, 0, 28)
            (.. ps (setBytes 2, hashBytes))
            (.. ps (executeUpdate))
            (.. ps (close))
        )
        nil
    )

    #_override
    #_public
    (§ method #_"void" (§ fn put) [#_"StoredBlock" (§ name storedBlock)])
        (§ throws #_"BlockStoreException")
    (§ block
        (maybeConnect)
        (§ try )
        (§ block
            (putUpdateStoredBlock storedBlock, false)
        )
        (§ catch #_"SQLException" (§ name e))
        (§ block
            (§ throw (§ new #_"BlockStoreException" e))
        )
        nil
    )

    #_override
    #_public
    (§ method #_"void" (§ fn put) [#_"StoredBlock" (§ name storedBlock), #_"StoredUndoableBlock" (§ name undoableBlock)])
        (§ throws #_"BlockStoreException")
    (§ block
        (maybeConnect)
        ;; We skip the first 4 bytes because (on mainnet) the minimum target has 4 0-bytes.
        (§ var #_"byte[]" (§ name hashBytes) (§ new #_"byte[]" (§ count 28)))
        (System/arraycopy (.. storedBlock (getHeader) (getHash) (getBytes)), 4, hashBytes, 0, 28)
        (§ var #_"int" (§ name height) (.. storedBlock (getHeight)))
        (§ var #_"byte[]" (§ name transactions) nil)
        (§ var #_"byte[]" (§ name txOutChanges) nil)
        (§ try )
        (§ block
            (§ var #_"ByteArrayOutputStream" (§ name bos) (§ new #_"ByteArrayOutputStream"))
            (§ if (!= (.. undoableBlock (getTxOutChanges)) nil))
            (§ block
                (.. undoableBlock (getTxOutChanges) (serializeToStream bos))
                (§ ass (§ name txOutChanges) (.. bos (toByteArray)))
            )
            (§ else )
            (§ block
                (§ var #_"int" (§ name numTxn) (.. undoableBlock (getTransactions) (size)))
                (.. bos (write (& 0xff numTxn)))
                (.. bos (write (§ expr 0xff & (>> numTxn 8))))
                (.. bos (write (§ expr 0xff & (>> numTxn 16))))
                (.. bos (write (§ expr 0xff & (>> numTxn 24))))
                (§ for (§ var #_"Transaction" (§ name tx)) :for (.. undoableBlock (getTransactions)))
                (§ block
                    (.. tx (bitcoinSerialize bos))
                )
                (§ ass (§ name transactions) (.. bos (toByteArray)))
            )
            (.. bos (close))
        )
        (§ catch #_"IOException" (§ name e))
        (§ block
            (§ throw (§ new #_"BlockStoreException" e))
        )

        (§ try )
        (§ block
            (§ try )
            (§ block
                (§ var #_"PreparedStatement" (§ name ps) (.. conn (get) (prepareStatement (getInsertUndoableBlocksSQL))))
                (.. ps (setBytes 1, hashBytes))
                (.. ps (setInt 2, height))
                (§ if (nil? transactions))
                (§ block
                    (.. ps (setBytes 3, txOutChanges))
                    (.. ps (setNull 4, Types/BINARY))
                )
                (§ else )
                (§ block
                    (.. ps (setNull 3, Types/BINARY))
                    (.. ps (setBytes 4, transactions))
                )
                (.. ps (executeUpdate))
                (.. ps (close))
                (§ try )
                (§ block
                    (putUpdateStoredBlock storedBlock, true)
                )
                (§ catch #_"SQLException" (§ name e))
                (§ block
                    (§ throw (§ new #_"BlockStoreException" e))
                )
            )
            (§ catch #_"SQLException" (§ name e))
            (§ block
                (§ if (§ not (.. e (getSQLState) (equals (getDuplicateKeyErrorCode)))))
                (§ block
                    (§ throw (§ new #_"BlockStoreException" e))
                )

                ;; There is probably an update-or-insert statement, but it wasn't obvious from the docs.
                (§ var #_"PreparedStatement" (§ name ps) (.. conn (get) (prepareStatement (getUpdateUndoableBlocksSQL))))
                (.. ps (setBytes 3, hashBytes))
                (§ if (nil? transactions))
                (§ block
                    (.. ps (setBytes 1, txOutChanges))
                    (.. ps (setNull 2, Types/BINARY))
                )
                (§ else )
                (§ block
                    (.. ps (setNull 1, Types/BINARY))
                    (.. ps (setBytes 2, transactions))
                )
                (.. ps (executeUpdate))
                (.. ps (close))
            )
        )
        (§ catch #_"SQLException" (§ name e))
        (§ block
            (§ throw (§ new #_"BlockStoreException" e))
        )
        nil
    )

    #_public
    (§ method #_"StoredBlock" (§ fn get) [#_"Sha256Hash" (§ name hash), #_"boolean" (§ name wasUndoableOnly)])
        (§ throws #_"BlockStoreException")
    (§ block
        ;; Optimize for chain head.
        (§ if (§ expr chainHeadHash != nil && (.. chainHeadHash (equals hash))))
        (§ block
            (§ return chainHeadBlock)
        )

        (§ if (§ expr verifiedChainHeadHash != nil && (.. verifiedChainHeadHash (equals hash))))
        (§ block
            (§ return verifiedChainHeadBlock)
        )

        (maybeConnect)
        (§ var #_"PreparedStatement" (§ name ps) nil)
        (§ try )
        (§ block
            (§ ass (§ name ps) (.. conn (get) (prepareStatement (getSelectHeadersSQL))))
            ;; We skip the first 4 bytes because (on mainnet) the minimum target has 4 0-bytes.
            (§ var #_"byte[]" (§ name hashBytes) (§ new #_"byte[]" (§ count 28)))
            (System/arraycopy (.. hash (getBytes)), 4, hashBytes, 0, 28)
            (.. ps (setBytes 1, hashBytes))
            (§ var #_"ResultSet" (§ name results) (.. ps (executeQuery)))
            (§ if (§ not (.. results (next))))
            (§ block
                (§ return nil)
            )

            ;; Parse it.
            (§ if (§ expr wasUndoableOnly && (§ not (.. results (getBoolean 4)))))
            (§ block
                (§ return nil)
            )

            (§ var #_"BigInteger" (§ name chainWork) (§ new #_"BigInteger" (.. results (getBytes 1))))
            (§ var #_"int" (§ name height) (.. results (getInt 2)))
            (§ var #_"Block" (§ name b) (.. params (getDefaultSerializer) (makeBlock (.. results (getBytes 3)))))
            (.. b (verifyHeader))
            (§ var #_"StoredBlock" (§ name stored) (§ new #_"StoredBlock" b, chainWork, height))
            (§ return stored)
        )
        (§ catch #_"SQLException" (§ name e))
        (§ block
            (§ throw (§ new #_"BlockStoreException" e))
        )
        (§ catch #_"ProtocolException" (§ name e))
        (§ block
            ;; Corrupted database.
            (§ throw (§ new #_"BlockStoreException" e))
        )
        (§ catch #_"VerificationException" (§ name e))
        (§ block
            ;; Should not be able to happen unless the database contains bad blocks.
            (§ throw (§ new #_"BlockStoreException" e))
        )
        (§ finally )
        (§ block
            (§ if (some? ps))
            (§ block
                (§ try )
                (§ block
                    (.. ps (close))
                )
                (§ catch #_"SQLException" (§ name _))
                (§ block
                    (§ throw (§ new #_"BlockStoreException" "Failed to close PreparedStatement"))
                )
            )
        )
    )

    #_override
    #_public
    (§ method #_"StoredBlock" (§ fn get) [#_"Sha256Hash" (§ name hash)])
        (§ throws #_"BlockStoreException")
    (§ block
        (get hash, false)
    )

    #_override
    #_public
    (§ method #_"StoredBlock" (§ fn getOnceUndoableStoredBlock) [#_"Sha256Hash" (§ name hash)])
        (§ throws #_"BlockStoreException")
    (§ block
        (get hash, true)
    )

    #_override
    #_public
    (§ method #_"StoredUndoableBlock" (§ fn getUndoBlock) [#_"Sha256Hash" (§ name hash)])
        (§ throws #_"BlockStoreException")
    (§ block
        (maybeConnect)
        (§ var #_"PreparedStatement" (§ name ps) nil)
        (§ try )
        (§ block
            (§ ass (§ name ps) (.. conn (get) (prepareStatement (getSelectUndoableBlocksSQL))))
            ;; We skip the first 4 bytes because (on mainnet) the minimum target has 4 0-bytes.

            (§ var #_"byte[]" (§ name hashBytes) (§ new #_"byte[]" (§ count 28)))
            (System/arraycopy (.. hash (getBytes)), 4, hashBytes, 0, 28)
            (.. ps (setBytes 1, hashBytes))
            (§ var #_"ResultSet" (§ name results) (.. ps (executeQuery)))
            (§ if (§ not (.. results (next))))
            (§ block
                (§ return nil)
            )

            ;; Parse it.
            (§ var #_"byte[]" (§ name txOutChanges) (.. results (getBytes 1)))
            (§ var #_"byte[]" (§ name transactions) (.. results (getBytes 2)))
            (§ var #_"StoredUndoableBlock" (§ name block))
            (§ if (nil? txOutChanges))
            (§ block
                (§ var #_"int" (§ name numTxn) (§ expr (§ expr (§ ai transactions 0) & 0xff) | (<< (§ expr (§ ai transactions 1) & 0xff) 8) | (<< (§ expr (§ ai transactions 2) & 0xff) 16) | (<< (§ expr (§ ai transactions 3) & 0xff) 24)))
                (§ var #_"int" (§ name offset) 4)
                (§ var #_"List<Transaction>" (§ name transactionList) (§ new #_"LinkedList<>"))
                (§ for (§ var #_"int" (§ name i) 0) :for (< i numTxn) :for (§ ass (§ name i) (+ i 1)))
                (§ block
                    (§ var #_"Transaction" (§ name tx) (.. params (getDefaultSerializer) (makeTransaction transactions, offset)))
                    (.. transactionList (add tx))
                    (§ ass (§ name offset) (§ expr offset + (.. tx (getMessageSize))))
                )
                (§ ass (§ name block) (§ new #_"StoredUndoableBlock" hash, transactionList))
            )
            (§ else )
            (§ block
                (§ var #_"TransactionOutputChanges" (§ name outChangesObject) (§ new #_"TransactionOutputChanges" (§ new #_"ByteArrayInputStream" txOutChanges)))
                (§ ass (§ name block) (§ new #_"StoredUndoableBlock" hash, outChangesObject))
            )
            (§ return block)
        )
        (§ catch #_"SQLException" (§ name e))
        (§ block
            (§ throw (§ new #_"BlockStoreException" e))
        )
        (§ catch #_"NullPointerException" (§ name e))
        (§ block
            ;; Corrupted database.
            (§ throw (§ new #_"BlockStoreException" e))
        )
        (§ catch #_"ClassCastException" (§ name e))
        (§ block
            ;; Corrupted database.
            (§ throw (§ new #_"BlockStoreException" e))
        )
        (§ catch #_"ProtocolException" (§ name e))
        (§ block
            ;; Corrupted database.
            (§ throw (§ new #_"BlockStoreException" e))
        )
        (§ catch #_"IOException" (§ name e))
        (§ block
            ;; Corrupted database.
            (§ throw (§ new #_"BlockStoreException" e))
        )
        (§ finally )
        (§ block
            (§ if (some? ps))
            (§ block
                (§ try )
                (§ block
                    (.. ps (close))
                )
                (§ catch #_"SQLException" (§ name _))
                (§ block
                    (§ throw (§ new #_"BlockStoreException" "Failed to close PreparedStatement"))
                )
            )
        )
    )

    #_override
    #_public
    (§ method #_"StoredBlock" (§ fn getChainHead) [])
        (§ throws #_"BlockStoreException")
    (§ block
        chainHeadBlock
    )

    #_override
    #_public
    (§ method #_"void" (§ fn setChainHead) [#_"StoredBlock" (§ name chainHead)])
        (§ throws #_"BlockStoreException")
    (§ block
        (§ var #_"Sha256Hash" (§ name hash) (.. chainHead (getHeader) (getHash)))
        (§ ass (§ name (.. this chainHeadHash)) hash)
        (§ ass (§ name (.. this chainHeadBlock)) chainHead)
        (maybeConnect)
        (§ try )
        (§ block
            (§ var #_"PreparedStatement" (§ name ps) (.. conn (get) (prepareStatement (getUpdateSettingsSLQ))))
            (.. ps (setString 2, CHAIN_HEAD_SETTING))
            (.. ps (setBytes 1, (.. hash (getBytes))))
            (.. ps (executeUpdate))
            (.. ps (close))
        )
        (§ catch #_"SQLException" (§ name e))
        (§ block
            (§ throw (§ new #_"BlockStoreException" e))
        )
        nil
    )

    #_override
    #_public
    (§ method #_"StoredBlock" (§ fn getVerifiedChainHead) [])
        (§ throws #_"BlockStoreException")
    (§ block
        verifiedChainHeadBlock
    )

    #_override
    #_public
    (§ method #_"void" (§ fn setVerifiedChainHead) [#_"StoredBlock" (§ name chainHead)])
        (§ throws #_"BlockStoreException")
    (§ block
        (§ var #_"Sha256Hash" (§ name hash) (.. chainHead (getHeader) (getHash)))
        (§ ass (§ name (.. this verifiedChainHeadHash)) hash)
        (§ ass (§ name (.. this verifiedChainHeadBlock)) chainHead)
        (maybeConnect)
        (§ try )
        (§ block
            (§ var #_"PreparedStatement" (§ name ps) (.. conn (get) (prepareStatement (getUpdateSettingsSLQ))))
            (.. ps (setString 2, VERIFIED_CHAIN_HEAD_SETTING))
            (.. ps (setBytes 1, (.. hash (getBytes))))
            (.. ps (executeUpdate))
            (.. ps (close))
        )
        (§ catch #_"SQLException" (§ name e))
        (§ block
            (§ throw (§ new #_"BlockStoreException" e))
        )
        (§ if (< (.. this chainHeadBlock (getHeight)) (.. chainHead (getHeight))))
        (§ block
            (setChainHead chainHead)
        )
        (removeUndoableBlocksWhereHeightIsLessThan (- (.. chainHead (getHeight)) fullStoreDepth))
        nil
    )

    #_private
    (§ method- #_"void" (§ fn removeUndoableBlocksWhereHeightIsLessThan) [#_"int" (§ name height)])
        (§ throws #_"BlockStoreException")
    (§ block
        (§ try )
        (§ block
            (§ var #_"PreparedStatement" (§ name ps) (.. conn (get) (prepareStatement (getDeleteUndoableBlocksSQL))))
            (.. ps (setInt 1, height))
            (§ if (.. log (isDebugEnabled)))
            (§ block
                (.. log (debug (§ expr "Deleting undoable undoable block with height <= " + height)))
            )
            (.. ps (executeUpdate))
            (.. ps (close))
        )
        (§ catch #_"SQLException" (§ name e))
        (§ block
            (§ throw (§ new #_"BlockStoreException" e))
        )
        nil
    )

    #_override
    #_public
    (§ method #_"UTXO" (§ fn getTransactionOutput) [#_"Sha256Hash" (§ name hash), #_"long" (§ name index)])
        (§ throws #_"BlockStoreException")
    (§ block
        (maybeConnect)
        (§ var #_"PreparedStatement" (§ name ps) nil)
        (§ try )
        (§ block
            (§ ass (§ name ps) (.. conn (get) (prepareStatement (getSelectOpenoutputsSQL))))
            (.. ps (setBytes 1, (.. hash (getBytes))))
            ;; index is actually an unsigned int
            (.. ps (setInt 2, (§ cast #_"int" index)))
            (§ var #_"ResultSet" (§ name results) (.. ps (executeQuery)))
            (§ if (§ not (.. results (next))))
            (§ block
                (§ return nil)
            )

            ;; Parse it.
            (§ var #_"int" (§ name height) (.. results (getInt 1)))
            (§ var #_"Coin" (§ name value) (Coin/valueOf (.. results (getLong 2))))
            (§ var #_"byte[]" (§ name scriptBytes) (.. results (getBytes 3)))
            (§ var #_"boolean" (§ name coinbase) (.. results (getBoolean 4)))
            (§ var #_"String" (§ name address) (.. results (getString 5)))
            (§ return (§ new #_"UTXO" hash, index, value, height, coinbase, (§ new #_"Script" scriptBytes), address))
        )
        (§ catch #_"SQLException" (§ name e))
        (§ block
            (§ throw (§ new #_"BlockStoreException" e))
        )
        (§ finally )
        (§ block
            (§ if (some? ps))
            (§ block
                (§ try )
                (§ block
                    (.. ps (close))
                )
                (§ catch #_"SQLException" (§ name _))
                (§ block
                    (§ throw (§ new #_"BlockStoreException" "Failed to close PreparedStatement"))
                )
            )
        )
    )

    #_override
    #_public
    (§ method #_"void" (§ fn addUnspentTransactionOutput) [#_"UTXO" (§ name out)])
        (§ throws #_"BlockStoreException")
    (§ block
        (maybeConnect)
        (§ var #_"PreparedStatement" (§ name ps) nil)
        (§ try )
        (§ block
            (§ ass (§ name ps) (.. conn (get) (prepareStatement (getInsertOpenoutputsSQL))))
            (.. ps (setBytes 1, (.. out (getHash) (getBytes))))
            ;; index is actually an unsigned int
            (.. ps (setInt 2, (§ expr (§ cast #_"int" (.. out (getIndex))))))
            (.. ps (setInt 3, (.. out (getHeight))))
            (.. ps (setLong 4, (.. out (getValue) value)))
            (.. ps (setBytes 5, (.. out (getScript) (getProgram))))
            (.. ps (setString 6, (.. out (getAddress))))
            (.. ps (setInt 7, (.. out (getScript) (getScriptType) (ordinal))))
            (.. ps (setBoolean 8, (.. out (isCoinbase))))
            (.. ps (executeUpdate))
            (.. ps (close))
        )
        (§ catch #_"SQLException" (§ name e))
        (§ block
            (§ if (§ not (.. e (getSQLState) (equals (getDuplicateKeyErrorCode)))))
            (§ block
                (§ throw (§ new #_"BlockStoreException" e))
            )
        )
        (§ finally )
        (§ block
            (§ if (some? ps))
            (§ block
                (§ try )
                (§ block
                    (.. ps (close))
                )
                (§ catch #_"SQLException" (§ name e))
                (§ block
                    (§ throw (§ new #_"BlockStoreException" e))
                )
            )
        )
        nil
    )

    #_override
    #_public
    (§ method #_"void" (§ fn removeUnspentTransactionOutput) [#_"UTXO" (§ name out)])
        (§ throws #_"BlockStoreException")
    (§ block
        (maybeConnect)
        ;; TODO: This should only need one query (maybe a stored procedure).
        (§ if (== (getTransactionOutput (.. out (getHash)), (.. out (getIndex))) nil))
        (§ block
            (§ throw (§ new #_"BlockStoreException" "Tried to remove a UTXO from DatabaseFullPrunedBlockStore that it didn't have!"))
        )

        (§ try )
        (§ block
            (§ var #_"PreparedStatement" (§ name ps) (.. conn (get) (prepareStatement (getDeleteOpenoutputsSQL))))
            (.. ps (setBytes 1, (.. out (getHash) (getBytes))))
            ;; index is actually an unsigned int
            (.. ps (setInt 2, (§ expr (§ cast #_"int" (.. out (getIndex))))))
            (.. ps (executeUpdate))
            (.. ps (close))
        )
        (§ catch #_"SQLException" (§ name e))
        (§ block
            (§ throw (§ new #_"BlockStoreException" e))
        )
        nil
    )

    #_override
    #_public
    (§ method #_"void" (§ fn beginDatabaseBatchWrite) [])
        (§ throws #_"BlockStoreException")
    (§ block
        (maybeConnect)
        (§ if (.. log (isDebugEnabled)))
        (§ block
            (.. log (debug (§ expr "Starting database batch write with connection: " + (.. conn (get)))))
        )

        (§ try )
        (§ block
            (.. conn (get) (setAutoCommit false))
        )
        (§ catch #_"SQLException" (§ name e))
        (§ block
            (§ throw (§ new #_"BlockStoreException" e))
        )
        nil
    )

    #_override
    #_public
    (§ method #_"void" (§ fn commitDatabaseBatchWrite) [])
        (§ throws #_"BlockStoreException")
    (§ block
        (maybeConnect)
        (§ if (.. log (isDebugEnabled)))
        (§ block
            (.. log (debug (§ expr "Committing database batch write with connection: " + (.. conn (get)))))
        )

        (§ try )
        (§ block
            (.. conn (get) (commit))
            (.. conn (get) (setAutoCommit true))
        )
        (§ catch #_"SQLException" (§ name e))
        (§ block
            (§ throw (§ new #_"BlockStoreException" e))
        )
        nil
    )

    #_override
    #_public
    (§ method #_"void" (§ fn abortDatabaseBatchWrite) [])
        (§ throws #_"BlockStoreException")
    (§ block
        (maybeConnect)
        (§ if (.. log (isDebugEnabled)))
        (§ block
            (.. log (debug (§ expr "Rollback database batch write with connection: " + (.. conn (get)))))
        )

        (§ try )
        (§ block
            (§ if (§ not (.. conn (get) (getAutoCommit))))
            (§ block
                (.. conn (get) (rollback))
                (.. conn (get) (setAutoCommit true))
            )
            (§ else )
            (§ block
                (.. log (warn "Warning: Rollback attempt without transaction"))
            )
        )
        (§ catch #_"SQLException" (§ name e))
        (§ block
            (§ throw (§ new #_"BlockStoreException" e))
        )
        nil
    )

    #_override
    #_public
    (§ method #_"boolean" (§ fn hasUnspentOutputs) [#_"Sha256Hash" (§ name hash), #_"int" (§ name numOutputs)])
        (§ throws #_"BlockStoreException")
    (§ block
        (maybeConnect)
        (§ var #_"PreparedStatement" (§ name ps) nil)
        (§ try )
        (§ block
            (§ ass (§ name ps) (.. conn (get) (prepareStatement (getSelectOpenoutputsCountSQL))))
            (.. ps (setBytes 1, (.. hash (getBytes))))
            (§ var #_"ResultSet" (§ name results) (.. ps (executeQuery)))
            (§ if (§ not (.. results (next))))
            (§ block
                (§ throw (§ new #_"BlockStoreException" "Got no results from a COUNT(*) query"))
            )

            (§ var #_"int" (§ name count) (.. results (getInt 1)))
            (§ return (§ expr count != 0))
        )
        (§ catch #_"SQLException" (§ name e))
        (§ block
            (§ throw (§ new #_"BlockStoreException" e))
        )
        (§ finally )
        (§ block
            (§ if (some? ps))
            (§ block
                (§ try )
                (§ block
                    (.. ps (close))
                )
                (§ catch #_"SQLException" (§ name _))
                (§ block
                    (§ throw (§ new #_"BlockStoreException" "Failed to close PreparedStatement"))
                )
            )
        )
    )

    #_override
    #_public
    (§ method #_"NetworkParameters" (§ fn getParams) [])
    (§ block
        params
    )

    ;;;
     ; Resets the store by deleting the contents of the tables and reinitialising them.
     ; @throws BlockStoreException if the tables couldn't be cleared and initialised.
     ;;
    #_public
    (§ method #_"void" (§ fn resetStore) [])
        (§ throws #_"BlockStoreException")
    (§ block
        (maybeConnect)
        (§ try )
        (§ block
            (deleteStore)
            (createTables)
            (initFromDatabase)
        )
        (§ catch #_"SQLException" (§ name e))
        (§ block
            (§ throw (§ new #_"RuntimeException" e))
        )
        nil
    )

    ;;;
     ; Deletes the store by deleting the tables within the database.
     ; @throws BlockStoreException if tables couldn't be deleted.
     ;;
    #_public
    (§ method #_"void" (§ fn deleteStore) [])
        (§ throws #_"BlockStoreException")
    (§ block
        (maybeConnect)
        (§ try )
        (§ block
            (§ var #_"Statement" (§ name s) (.. conn (get) (createStatement)))
            (§ for (§ var #_"String" (§ name sql)) :for (getDropTablesSQL))
            (§ block
                (.. s (execute sql))
            )
            (.. s (close))
        )
        (§ catch #_"SQLException" (§ name e))
        (§ block
            (§ throw (§ new #_"RuntimeException" e))
        )
        nil
    )

    ;;;
     ; Calculate the balance for a coinbase, to-address, or p2sh address.
     ;
     ; <p>The balance {@link org.bitcoinj.store.DatabaseFullPrunedBlockStore#getBalanceSelectSQL()} returns
     ; the balance (summed) as a number, then use calculateClientSide=false.</p>
     ;
     ; <p>The balance {@link org.bitcoinj.store.DatabaseFullPrunedBlockStore#getBalanceSelectSQL()} returns
     ; all the open outputs as stored in the DB (binary), then use calculateClientSide=true.</p>
     ;
     ; @param address The address to calculate the balance of.
     ; @return The balance of the address supplied.  If the address has not been seen,
     ;         or there are no outputs open for this address, the return value is 0.
     ; @throws BlockStoreException if there is an error getting the balance.
     ;;
    #_public
    (§ method #_"BigInteger" (§ fn calculateBalanceForAddress) [#_"Address" (§ name address)])
        (§ throws #_"BlockStoreException")
    (§ block
        (maybeConnect)
        (§ var #_"PreparedStatement" (§ name ps) nil)
        (§ try )
        (§ block
            (§ ass (§ name ps) (.. conn (get) (prepareStatement (getBalanceSelectSQL))))
            (.. ps (setString 1, (.. address (toString))))
            (§ var #_"ResultSet" (§ name rs) (.. ps (executeQuery)))
            (§ var #_"BigInteger" (§ name balance) BigInteger/ZERO)
            (§ return (if (.. rs (next)) (BigInteger/valueOf (.. rs (getLong 1))) balance))
        )
        (§ catch #_"SQLException" (§ name e))
        (§ block
            (§ throw (§ new #_"BlockStoreException" e))
        )
        (§ finally )
        (§ block
            (§ if (some? ps))
            (§ block
                (§ try )
                (§ block
                    (.. ps (close))
                )
                (§ catch #_"SQLException" (§ name _))
                (§ block
                    (§ throw (§ new #_"BlockStoreException" "Could not close statement"))
                )
            )
        )
    )
)

#_(ns org.bitcoinj.store #_"FullPrunedBlockStore"
   (:require [org.bitcoinj.core *]))

;;;
 ; <p>An implementor of FullPrunedBlockStore saves StoredBlock objects to some storage mechanism.</p>
 ;
 ; <p>In addition to keeping track of a chain using {@link StoredBlock}s, it should also keep track of
 ; a second copy of the chain which holds {@link StoredUndoableBlock}s.  In this way, an application can
 ; perform a headers-only initial sync and then use that information to more efficiently download a locally
 ; verified full copy of the block chain.</p>
 ;
 ; <p>A FullPrunedBlockStore should function well as a standard {@link BlockStore} and then be able to
 ; trivially switch to being used as a FullPrunedBlockStore.</p>
 ;
 ; <p>It should store the {@link StoredUndoableBlock}s of a number of recent blocks before verifiedHead.height
 ; and all those after verifiedHead.height.
 ; It is advisable to store any {@link StoredUndoableBlock} which has a height > verifiedHead.height - N.
 ; Because N determines the memory usage, it is recommended that N be customizable.  N should be chosen such
 ; that re-orgs beyond that point are vanishingly unlikely, e.g. a few thousand blocks is a reasonable choice.</p>
 ;
 ; <p>It must store the {@link StoredBlock} of all blocks.</p>
 ;
 ; <p>A FullPrunedBlockStore contains a map of hashes to [Full]StoredBlock.  The hash is the double digest of
 ; the Bitcoin serialization of the block header, <b>not</b> the header with the extra data as well.</p>
 ;
 ; <p>A FullPrunedBlockStore also contains a map of hash+index to UTXO.  Again, the hash is
 ; a standard Bitcoin double-SHA256 hash of the transaction.</p>
 ;
 ; <p>FullPrunedBlockStores are thread safe.</p>
 ;;
#_public
(§ interface #_"FullPrunedBlockStore" (§ extends #_"BlockStore")
    ;;;
     ; <p>Saves the given {@link StoredUndoableBlock} and {@link StoredBlock}.  Calculates keys from the {@link StoredBlock}.</p>
     ;
     ; <p>Though not required for proper function of a FullPrunedBlockStore, any user of a FullPrunedBlockStore should ensure
     ; that a StoredUndoableBlock for each block up to the fully verified chain head has been added to this block store using
     ; this function (not put(StoredBlock)), so that the ability to perform reorgs is maintained.</p>
     ;
     ; @throws BlockStoreException if there is a problem with the underlying storage layer, such as running out of disk space.
     ;;
    (§ method #_"void" (§ fn put) [#_"StoredBlock" (§ name storedBlock), #_"StoredUndoableBlock" (§ name undoableBlock)])
        (§ throws #_"BlockStoreException")

    ;;;
     ; Returns the StoredBlock that was added as a StoredUndoableBlock given a hash.  The returned values block.getHash()
     ; method will be equal to the parameter.  If no such block is found, returns null.
     ;;
    (§ method #_"StoredBlock" (§ fn getOnceUndoableStoredBlock) [#_"Sha256Hash" (§ name hash)])
        (§ throws #_"BlockStoreException")

    ;;;
     ; Returns a {@link StoredUndoableBlock} whose block.getHash() method will be equal to the parameter.  If no such
     ; block is found, returns null.  Note that this may return null more often than get(Sha256Hash hash) as not all
     ; {@link StoredBlock}s have a {@link StoredUndoableBlock} copy stored as well.
     ;;
    (§ method #_"StoredUndoableBlock" (§ fn getUndoBlock) [#_"Sha256Hash" (§ name hash)])
        (§ throws #_"BlockStoreException")

    ;;;
     ; Gets a {@link org.bitcoinj.core.UTXO} with the given hash and index, or null if none is found.
     ;;
    (§ method #_"UTXO" (§ fn getTransactionOutput) [#_"Sha256Hash" (§ name hash), #_"long" (§ name index)])
        (§ throws #_"BlockStoreException")

    ;;;
     ; Adds a {@link org.bitcoinj.core.UTXO} to the list of unspent TransactionOutputs.
     ;;
    (§ method #_"void" (§ fn addUnspentTransactionOutput) [#_"UTXO" (§ name out)])
        (§ throws #_"BlockStoreException")

    ;;;
     ; Removes a {@link org.bitcoinj.core.UTXO} from the list of unspent TransactionOutputs.
     ; Note that the coinbase of the genesis block should NEVER be spendable and thus never in the list.
     ; @throws BlockStoreException if there is an underlying storage issue, or out was not in the list.
     ;;
    (§ method #_"void" (§ fn removeUnspentTransactionOutput) [#_"UTXO" (§ name out)])
        (§ throws #_"BlockStoreException")

    ;;;
     ; True if this store has any unspent outputs from a transaction with a hash equal to the first parameter.
     ; @param numOutputs The number of outputs the given transaction has.
     ;;
    (§ method #_"boolean" (§ fn hasUnspentOutputs) [#_"Sha256Hash" (§ name hash), #_"int" (§ name numOutputs)])
        (§ throws #_"BlockStoreException")

    ;;;
     ; Returns the {@link StoredBlock} that represents the top of the chain of greatest total work that has
     ; been fully verified and the point in the chain at which the unspent transaction output set in this
     ; store represents.
     ;;
    (§ method #_"StoredBlock" (§ fn getVerifiedChainHead) [])
        (§ throws #_"BlockStoreException")

    ;;;
     ; Sets the {@link StoredBlock} that represents the top of the chain of greatest total work that has been
     ; fully verified.  It should generally be set after a batch of updates to the transaction unspent output set,
     ; before a call to commitDatabaseBatchWrite.
     ;
     ; If chainHead has a greater height than the non-verified chain head (i.e. that set with
     ; {@link BlockStore#setChainHead}) the non-verified chain head should be set to the one set here.
     ; In this way a class using a FullPrunedBlockStore only in full-verification mode can ignore the regular
     ; {@link BlockStore} functions implemented as a part of a FullPrunedBlockStore.
     ;;
    (§ method #_"void" (§ fn setVerifiedChainHead) [#_"StoredBlock" (§ name chainHead)])
        (§ throws #_"BlockStoreException")

    ;;;
     ; <p>Begins/Commits/Aborts a database transaction.</p>
     ;
     ; <p>If abortDatabaseBatchWrite() is called by the same thread that called beginDatabaseBatchWrite(),
     ; any data writes between this call and abortDatabaseBatchWrite() made by the same thread
     ; should be discarded.</p>
     ;
     ; <p>Furthermore, any data written after a call to beginDatabaseBatchWrite() should not be readable
     ; by any other threads until commitDatabaseBatchWrite() has been called by this thread.
     ; Multiple calls to beginDatabaseBatchWrite() in any given thread should be ignored and treated as one call.</p>
     ;;
    (§ method #_"void" (§ fn beginDatabaseBatchWrite) [])
        (§ throws #_"BlockStoreException")

    (§ method #_"void" (§ fn commitDatabaseBatchWrite) [])
        (§ throws #_"BlockStoreException")

    (§ method #_"void" (§ fn abortDatabaseBatchWrite) [])
        (§ throws #_"BlockStoreException")
)

#_(ns org.bitcoinj.store #_"H2FullPrunedBlockStore"
    (:import [java.sql *]
             [java.util ArrayList Collections List])
   (:require [org.bitcoinj.core *]))

;;;
 ; A full pruned block store using the H2 pure-java embedded database.
 ;
 ; Note that because of the heavy delete load on the database, during IBD,
 ; you may see the database files grow quite large (around 1.5G).
 ; H2 automatically frees some space at shutdown, so close()ing the database
 ; decreases the space usage somewhat (to only around 1.3G).
 ;;
#_public
(§ class #_"H2FullPrunedBlockStore" (§ extends #_"DatabaseFullPrunedBlockStore")
    #_private
    #_static
    (§ def- #_"String" (§ name H2_DUPLICATE_KEY_ERROR_CODE) "23505")
    #_private
    #_static
    (§ def- #_"String" (§ name DATABASE_DRIVER_CLASS) "org.h2.Driver")
    #_private
    #_static
    (§ def- #_"String" (§ name DATABASE_CONNECTION_URL_PREFIX) "jdbc:h2:")

    ;; create table SQL
    #_private
    #_static
    (§ def- #_"String" (§ name CREATE_SETTINGS_TABLE) (§ expr "CREATE TABLE settings ( "
            + "name VARCHAR(32) NOT NULL CONSTRAINT settings_pk PRIMARY KEY,"
            + "value BLOB"
            + ")"))

    #_private
    #_static
    (§ def- #_"String" (§ name CREATE_HEADERS_TABLE) (§ expr "CREATE TABLE headers ( "
            + "hash BINARY(28) NOT NULL CONSTRAINT headers_pk PRIMARY KEY,"
            + "chainwork BLOB NOT NULL,"
            + "height INT NOT NULL,"
            + "header BLOB NOT NULL,"
            + "wasundoable BOOL NOT NULL"
            + ")"))

    #_private
    #_static
    (§ def- #_"String" (§ name CREATE_UNDOABLE_TABLE) (§ expr "CREATE TABLE undoableblocks ( "
            + "hash BINARY(28) NOT NULL CONSTRAINT undoableblocks_pk PRIMARY KEY,"
            + "height INT NOT NULL,"
            + "txoutchanges BLOB,"
            + "transactions BLOB"
            + ")"))

    #_private
    #_static
    (§ def- #_"String" (§ name CREATE_OPEN_OUTPUT_TABLE) (§ expr "CREATE TABLE openoutputs ("
            + "hash BINARY(32) NOT NULL,"
            + "index INT NOT NULL,"
            + "height INT NOT NULL,"
            + "value BIGINT NOT NULL,"
            + "scriptbytes BLOB NOT NULL,"
            + "toaddress VARCHAR(35),"
            + "addresstargetable TINYINT,"
            + "coinbase BOOLEAN,"
            + "PRIMARY KEY (hash, index),"
            + ")"))

    ;; Some indexes to speed up inserts.
    #_private
    #_static
    (§ def- #_"String" (§ name CREATE_OUTPUTS_ADDRESS_MULTI_INDEX) "CREATE INDEX openoutputs_hash_index_height_toaddress_idx ON openoutputs (hash, index, height, toaddress)")
    #_private
    #_static
    (§ def- #_"String" (§ name CREATE_OUTPUTS_TOADDRESS_INDEX) "CREATE INDEX openoutputs_toaddress_idx ON openoutputs (toaddress)")
    #_private
    #_static
    (§ def- #_"String" (§ name CREATE_OUTPUTS_ADDRESSTARGETABLE_INDEX) "CREATE INDEX openoutputs_addresstargetable_idx ON openoutputs (addresstargetable)")
    #_private
    #_static
    (§ def- #_"String" (§ name CREATE_OUTPUTS_HASH_INDEX) "CREATE INDEX openoutputs_hash_idx ON openoutputs (hash)")
    #_private
    #_static
    (§ def- #_"String" (§ name CREATE_UNDOABLE_TABLE_INDEX) "CREATE INDEX undoableblocks_height_idx ON undoableblocks (height)")

    ;;;
     ; Creates a new H2FullPrunedBlockStore, with given credentials for H2 database.
     ; @param params A copy of the NetworkParameters used.
     ; @param dbName The path to the database on disk.
     ; @param username The username to use in the database.
     ; @param password The username's password to use in the database.
     ; @param fullStoreDepth The number of blocks of history stored in full (something like 1000 is pretty safe).
     ; @throws BlockStoreException if the database fails to open for any reason.
     ;;
    #_public
    (§ constructor #_"H2FullPrunedBlockStore" [#_"NetworkParameters" (§ name params), #_"String" (§ name dbName), #_"String" (§ name username), #_"String" (§ name password), #_"int" (§ name fullStoreDepth)])
        (§ throws #_"BlockStoreException")
    (§ block
        (§ super params, (§ expr DATABASE_CONNECTION_URL_PREFIX + dbName + ";create=true;LOCK_TIMEOUT=60000;DB_CLOSE_ON_EXIT=FALSE"), fullStoreDepth, username, password, nil)
        this
    )

    ;;;
     ; Creates a new H2FullPrunedBlockStore.
     ; @param params A copy of the NetworkParameters used.
     ; @param dbName The path to the database on disk.
     ; @param fullStoreDepth The number of blocks of history stored in full (something like 1000 is pretty safe).
     ; @throws BlockStoreException if the database fails to open for any reason.
     ;;
    #_public
    (§ constructor #_"H2FullPrunedBlockStore" [#_"NetworkParameters" (§ name params), #_"String" (§ name dbName), #_"int" (§ name fullStoreDepth)])
        (§ throws #_"BlockStoreException")
    (§ block
        (§ this params, dbName, nil, nil, fullStoreDepth)
        this
    )

    ;;;
     ; Creates a new H2FullPrunedBlockStore with the given cache size.
     ; @param params A copy of the NetworkParameters used.
     ; @param dbName The path to the database on disk.
     ; @param fullStoreDepth The number of blocks of history stored in full (something like 1000 is pretty safe).
     ; @param cacheSize The number of kilobytes to dedicate to H2 Cache.  The default value of 16MB (16384) is a safe bet
     ;                  to achieve good performance/cost when importing blocks from disk, past 32MB makes little sense,
     ;                  and below 4MB sees a sharp drop in performance.
     ; @throws BlockStoreException if the database fails to open for any reason.
     ;;
    #_public
    (§ constructor #_"H2FullPrunedBlockStore" [#_"NetworkParameters" (§ name params), #_"String" (§ name dbName), #_"int" (§ name fullStoreDepth), #_"int" (§ name cacheSize)])
        (§ throws #_"BlockStoreException")
    (§ block
        (§ this params, dbName, fullStoreDepth)

        (§ try )
        (§ block
            (§ var #_"Statement" (§ name s) (.. conn (get) (createStatement)))
            (.. s (executeUpdate (§ expr "SET CACHE_SIZE " + cacheSize)))
            (.. s (close))
        )
        (§ catch #_"SQLException" (§ name e))
        (§ block
            (§ throw (§ new #_"BlockStoreException" e))
        )
        this
    )

    #_override
    #_protected
    (§ method #_"String" (§ fn getDuplicateKeyErrorCode) [])
    (§ block
        H2_DUPLICATE_KEY_ERROR_CODE
    )

    #_override
    #_protected
    (§ method #_"List<String>" (§ fn getCreateTablesSQL) [])
    (§ block
        (§ var #_"List<String>" (§ name sql) (§ new #_"ArrayList<>"))
        (.. sql (add CREATE_SETTINGS_TABLE))
        (.. sql (add CREATE_HEADERS_TABLE))
        (.. sql (add CREATE_UNDOABLE_TABLE))
        (.. sql (add CREATE_OPEN_OUTPUT_TABLE))
        sql
    )

    #_override
    #_protected
    (§ method #_"List<String>" (§ fn getCreateIndexesSQL) [])
    (§ block
        (§ var #_"List<String>" (§ name sql) (§ new #_"ArrayList<>"))
        (.. sql (add CREATE_UNDOABLE_TABLE_INDEX))
        (.. sql (add CREATE_OUTPUTS_ADDRESS_MULTI_INDEX))
        (.. sql (add CREATE_OUTPUTS_ADDRESSTARGETABLE_INDEX))
        (.. sql (add CREATE_OUTPUTS_HASH_INDEX))
        (.. sql (add CREATE_OUTPUTS_TOADDRESS_INDEX))
        sql
    )

    #_override
    #_protected
    (§ method #_"List<String>" (§ fn getCreateSchemeSQL) [])
    (§ block
        ;; do nothing
        (Collections/emptyList)
    )

    #_override
    #_protected
    (§ method #_"String" (§ fn getDatabaseDriverClass) [])
    (§ block
        DATABASE_DRIVER_CLASS
    )
)

#_(ns org.bitcoinj.store #_"MemoryBlockStore"
    (:import [java.util LinkedHashMap Map])
   (:require [org.bitcoinj.core *]))

;;;
 ; Keeps {@link org.bitcoinj.core.StoredBlock}s in memory.  Used primarily for unit testing.
 ;;
#_public
(§ class #_"MemoryBlockStore" (§ implements #_"BlockStore")
    #_private
    (§ field- #_"LinkedHashMap<Sha256Hash, StoredBlock>" (§ name blockMap) (§ new #_"LinkedHashMap<Sha256Hash, StoredBlock>"
        (§ anon
            #_override
            #_protected
            (§ method #_"boolean" (§ fn removeEldestEntry) [#_"Map.Entry<Sha256Hash, StoredBlock>" (§ name eldest)])
            (§ block
                (§ expr 5000 < (.. blockMap (size)))
            )
        )))
    #_private
    (§ field- #_"StoredBlock" (§ name chainHead))
    #_private
    (§ field- #_"NetworkParameters" (§ name params))

    #_public
    (§ constructor #_"MemoryBlockStore" [#_"NetworkParameters" (§ name params)])
    (§ block
        ;; Insert the genesis block.
        (§ try )
        (§ block
            (§ var #_"Block" (§ name genesisHeader) (.. params (getGenesisBlock) (cloneAsHeader)))
            (§ var #_"StoredBlock" (§ name storedGenesis) (§ new #_"StoredBlock" genesisHeader, (.. genesisHeader (getWork)), 0))
            (put storedGenesis)
            (setChainHead storedGenesis)
            (§ ass (§ name (.. this params)) params)
        )
        (§ catch #_"BlockStoreException" (§ name e))
        (§ block
            (§ throw (§ new #_"RuntimeException" e)) ;; Cannot happen.
        )
        (§ catch #_"VerificationException" (§ name e))
        (§ block
            (§ throw (§ new #_"RuntimeException" e)) ;; Cannot happen.
        )
        this
    )

    #_override
    #_public
    #_synchronized
    (§ method #_"void" (§ fn put) [#_"StoredBlock" (§ name block)])
        (§ throws #_"BlockStoreException")
    (§ block
        (§ if (nil? blockMap))
        (§ block
            (§ throw (§ new #_"BlockStoreException" "MemoryBlockStore is closed"))
        )

        (§ var #_"Sha256Hash" (§ name hash) (.. block (getHeader) (getHash)))
        (.. blockMap (put hash, block))
        nil
    )

    #_override
    #_public
    #_synchronized
    (§ method #_"StoredBlock" (§ fn get) [#_"Sha256Hash" (§ name hash)])
        (§ throws #_"BlockStoreException")
    (§ block
        (§ if (nil? blockMap))
        (§ block
            (§ throw (§ new #_"BlockStoreException" "MemoryBlockStore is closed"))
        )

        (.. blockMap (get hash))
    )

    #_override
    #_public
    (§ method #_"StoredBlock" (§ fn getChainHead) [])
        (§ throws #_"BlockStoreException")
    (§ block
        (§ if (nil? blockMap))
        (§ block
            (§ throw (§ new #_"BlockStoreException" "MemoryBlockStore is closed"))
        )

        chainHead
    )

    #_override
    #_public
    (§ method #_"void" (§ fn setChainHead) [#_"StoredBlock" (§ name chainHead)])
        (§ throws #_"BlockStoreException")
    (§ block
        (§ if (nil? blockMap))
        (§ block
            (§ throw (§ new #_"BlockStoreException" "MemoryBlockStore is closed"))
        )

        (§ ass (§ name (.. this chainHead)) chainHead)
        nil
    )

    #_override
    #_public
    (§ method #_"void" (§ fn close) [])
    (§ block
        (§ ass (§ name blockMap) nil)
        nil
    )

    #_override
    #_public
    (§ method #_"NetworkParameters" (§ fn getParams) [])
    (§ block
        params
    )
)

#_(ns org.bitcoinj.store #_"MemoryFullPrunedBlockStore"
    (:import [java.util *])
    (:import [com.google.common.base Objects Preconditions]
             [com.google.common.collect Lists])
   (:require [org.bitcoinj.core *]))

;;;
 ; Used as a key for memory map (to avoid having to think about NetworkParameters,
 ; which is required for {@link TransactionOutPoint}.
 ;;
(§ class #_"StoredTransactionOutPoint"
    ;;; Hash of the transaction to which we refer. ;;
    (§ field #_"Sha256Hash" (§ name hash))
    ;;; Which output of that transaction we are talking about. ;;
    (§ field #_"long" (§ name index))

    (§ constructor #_"StoredTransactionOutPoint" [#_"Sha256Hash" (§ name hash), #_"long" (§ name index)])
    (§ block
        (§ ass (§ name (.. this hash)) hash)
        (§ ass (§ name (.. this index)) index)
        this
    )

    (§ constructor #_"StoredTransactionOutPoint" [#_"UTXO" (§ name out)])
    (§ block
        (§ ass (§ name (.. this hash)) (.. out (getHash)))
        (§ ass (§ name (.. this index)) (.. out (getIndex)))
        this
    )

    ;;;
     ; The hash of the transaction to which we refer.
     ;;
    (§ method #_"Sha256Hash" (§ fn getHash) [])
    (§ block
        hash
    )

    ;;;
     ; The index of the output in transaction to which we refer.
     ;;
    (§ method #_"long" (§ fn getIndex) [])
    (§ block
        index
    )

    #_override
    #_public
    (§ method #_"int" (§ fn hashCode) [])
    (§ block
        (Objects/hashCode (getIndex), (getHash))
    )

    #_override
    #_public
    (§ method #_"String" (§ fn toString) [])
    (§ block
        (§ expr "Stored transaction out point: " + hash + ":" + index)
    )

    #_override
    #_public
    (§ method #_"boolean" (§ fn equals) [#_"Object" (§ name o)])
    (§ block
        (§ if (§ expr this == o))
        (§ block
            (§ return true)
        )
        (§ if (§ expr o == nil || (getClass) != (.. o (getClass))))
        (§ block
            (§ return false)
        )
        (§ var #_"StoredTransactionOutPoint" (§ name other) (§ cast #_"StoredTransactionOutPoint" o))
        (§ expr (getIndex) == (.. other (getIndex)) && (Objects/equal (getHash), (.. other (getHash))))
    )
)

;;;
 ; A HashMap<KeyType, ValueType> that is DB transaction-aware.
 ; This class is not thread-safe.
 ;;
(§ class #_"TransactionalHashMap<KeyType, ValueType>"
    (§ field #_"ThreadLocal<HashMap<KeyType, ValueType>>" (§ name tempMap))
    (§ field #_"ThreadLocal<HashSet<KeyType>>" (§ name tempSetRemoved))
    #_private
    (§ field- #_"ThreadLocal<Boolean>" (§ name inTransaction))

    (§ field #_"HashMap<KeyType, ValueType>" (§ name map))

    #_public
    (§ constructor #_"TransactionalHashMap" [])
    (§ block
        (§ ass (§ name tempMap) (§ new #_"ThreadLocal<>"))
        (§ ass (§ name tempSetRemoved) (§ new #_"ThreadLocal<>"))
        (§ ass (§ name inTransaction) (§ new #_"ThreadLocal<>"))
        (§ ass (§ name map) (§ new #_"HashMap<>"))
        this
    )

    #_public
    (§ method #_"void" (§ fn beginDatabaseBatchWrite) [])
    (§ block
        (.. inTransaction (set true))
        nil
    )

    #_public
    (§ method #_"void" (§ fn commitDatabaseBatchWrite) [])
    (§ block
        (§ if (!= (.. tempSetRemoved (get)) nil))
        (§ block
            (§ for (§ var #_"KeyType" (§ name key)) :for (.. tempSetRemoved (get)))
            (§ block
                (.. map (remove key))
            )
        )
        (§ if (!= (.. tempMap (get)) nil))
        (§ block
            (§ for (§ var #_"Map.Entry<KeyType, ValueType>" (§ name entry)) :for (.. tempMap (get) (entrySet)))
            (§ block
                (.. map (put (.. entry (getKey)), (.. entry (getValue))))
            )
        )
        (abortDatabaseBatchWrite)
        nil
    )

    #_public
    (§ method #_"void" (§ fn abortDatabaseBatchWrite) [])
    (§ block
        (.. inTransaction (set false))
        (.. tempSetRemoved (remove))
        (.. tempMap (remove))
        nil
    )

    #_nilable
    #_public
    (§ method #_"ValueType" (§ fn get) [#_"KeyType" (§ name key)])
    (§ block
        (§ if (.. Boolean/TRUE (equals (.. inTransaction (get)))))
        (§ block
            (§ if (!= (.. tempMap (get)) nil))
            (§ block
                (§ var #_"ValueType" (§ name value) (.. tempMap (get) (get key)))
                (§ if (some? value))
                (§ block
                    (§ return value)
                )
            )
            (§ if (§ expr (.. tempSetRemoved (get)) != nil && (.. tempSetRemoved (get) (contains key))))
            (§ block
                (§ return nil)
            )
        )
        (.. map (get key))
    )

    #_public
    (§ method #_"List<ValueType>" (§ fn values) [])
    (§ block
        (§ var #_"List<ValueType>" (§ name valueTypes) (§ new #_"ArrayList<>"))
        (§ for (§ var #_"KeyType" (§ name keyType)) :for (.. map (keySet)))
        (§ block
            (.. valueTypes (add (get keyType)))
        )
        valueTypes
    )

    #_public
    (§ method #_"void" (§ fn put) [#_"KeyType" (§ name key), #_"ValueType" (§ name value)])
    (§ block
        (§ if (.. Boolean/TRUE (equals (.. inTransaction (get)))))
        (§ block
            (§ if (!= (.. tempSetRemoved (get)) nil))
            (§ block
                (.. tempSetRemoved (get) (remove key))
            )
            (§ if (== (.. tempMap (get)) nil))
            (§ block
                (.. tempMap (set (§ new #_"HashMap<KeyType, ValueType>")))
            )
            (.. tempMap (get) (put key, value))
        )
        (§ else )
        (§ block
            (.. map (put key, value))
        )
        nil
    )

    #_nilable
    #_public
    (§ method #_"ValueType" (§ fn remove) [#_"KeyType" (§ name key)])
    (§ block
        (§ if (.. Boolean/TRUE (equals (.. inTransaction (get)))))
        (§ block
            (§ var #_"ValueType" (§ name retVal) (.. map (get key)))
            (§ if (some? retVal))
            (§ block
                (§ if (== (.. tempSetRemoved (get)) nil))
                (§ block
                    (.. tempSetRemoved (set (§ new #_"HashSet<KeyType>")))
                )
                (.. tempSetRemoved (get) (add key))
            )
            (§ if (!= (.. tempMap (get)) nil))
            (§ block
                (§ var #_"ValueType" (§ name tempVal) (.. tempMap (get) (remove key)))
                (§ if (some? tempVal))
                (§ block
                    (§ return tempVal)
                )
            )
            (§ return retVal)
        )
        (§ else )
        (§ block
            (§ return (.. map (remove key)))
        )
    )
)

;;;
 ; A Map with multiple key types that is DB per-thread-transaction-aware.
 ; However, this class is not thread-safe.
 ; @param <UniqueKeyType> Is a key that must be unique per object.
 ; @param <MultiKeyType> Is a key that can have multiple values.
 ;;
(§ class #_"TransactionalMultiKeyHashMap<UniqueKeyType, MultiKeyType, ValueType>"
    (§ field #_"TransactionalHashMap<UniqueKeyType, ValueType>" (§ name mapValues))
    (§ field #_"HashMap<MultiKeyType, Set<UniqueKeyType>>" (§ name mapKeys))

    #_public
    (§ constructor #_"TransactionalMultiKeyHashMap" [])
    (§ block
        (§ ass (§ name mapValues) (§ new #_"TransactionalHashMap<>"))
        (§ ass (§ name mapKeys) (§ new #_"HashMap<>"))
        this
    )

    #_public
    (§ method #_"void" (§ fn beginTransaction) [])
    (§ block
        (.. mapValues (beginDatabaseBatchWrite))
        nil
    )

    #_public
    (§ method #_"void" (§ fn commitTransaction) [])
    (§ block
        (.. mapValues (commitDatabaseBatchWrite))
        nil
    )

    #_public
    (§ method #_"void" (§ fn abortTransaction) [])
    (§ block
        (.. mapValues (abortDatabaseBatchWrite))
        nil
    )

    #_nilable
    #_public
    (§ method #_"ValueType" (§ fn get) [#_"UniqueKeyType" (§ name key)])
    (§ block
        (.. mapValues (get key))
    )

    #_public
    (§ method #_"void" (§ fn put) [#_"UniqueKeyType" (§ name uniqueKey), #_"MultiKeyType" (§ name multiKey), #_"ValueType" (§ name value)])
    (§ block
        (.. mapValues (put uniqueKey, value))
        (§ var #_"Set<UniqueKeyType>" (§ name set) (.. mapKeys (get multiKey)))
        (§ if (nil? set))
        (§ block
            (§ ass (§ name set) (§ new #_"HashSet<>"))
            (.. set (add uniqueKey))
            (.. mapKeys (put multiKey, set))
        )
        (§ else )
        (§ block
            (.. set (add uniqueKey))
        )
        nil
    )

    #_nilable
    #_public
    (§ method #_"ValueType" (§ fn removeByUniqueKey) [#_"UniqueKeyType" (§ name key)])
    (§ block
        (.. mapValues (remove key))
    )

    #_public
    (§ method #_"void" (§ fn removeByMultiKey) [#_"MultiKeyType" (§ name key)])
    (§ block
        (§ var #_"Set<UniqueKeyType>" (§ name set) (.. mapKeys (remove key)))
        (§ if (some? set))
        (§ block
            (§ for (§ var #_"UniqueKeyType" (§ name uniqueKey)) :for set)
            (§ block
                (removeByUniqueKey uniqueKey)
            )
        )
        nil
    )
)

;;;
 ; Keeps {@link StoredBlock}s, {@link StoredUndoableBlock}s and {@link org.bitcoinj.core.UTXO}s in memory.
 ; Used primarily for unit testing.
 ;;
#_public
(§ class #_"MemoryFullPrunedBlockStore" (§ implements #_"FullPrunedBlockStore")
    #_protected
    #_static
    (§ class #_"StoredBlockAndWasUndoableFlag"
        #_public
        (§ field #_"StoredBlock" (§ name block))
        #_public
        (§ field #_"boolean" (§ name wasUndoable))
        #_public
        (§ constructor #_"StoredBlockAndWasUndoableFlag" [#_"StoredBlock" (§ name block), #_"boolean" (§ name wasUndoable)])
        (§ block
            (§ ass (§ name (.. this block)) block)
            (§ ass (§ name (.. this wasUndoable)) wasUndoable)
            this
        )
    )
    #_private
    (§ field- #_"TransactionalHashMap<Sha256Hash, StoredBlockAndWasUndoableFlag>" (§ name blockMap))
    #_private
    (§ field- #_"TransactionalMultiKeyHashMap<Sha256Hash, Integer, StoredUndoableBlock>" (§ name fullBlockMap))
    ;; TODO: Use something more suited to remove-heavy use?
    #_private
    (§ field- #_"TransactionalHashMap<StoredTransactionOutPoint, UTXO>" (§ name transactionOutputMap))
    #_private
    (§ field- #_"StoredBlock" (§ name chainHead))
    #_private
    (§ field- #_"StoredBlock" (§ name verifiedChainHead))
    #_private
    (§ field- #_"int" (§ name fullStoreDepth))
    #_private
    (§ field- #_"NetworkParameters" (§ name params))

    ;;;
     ; Set up the MemoryFullPrunedBlockStore.
     ; @param params The network parameters of this block store - used to get genesis block.
     ; @param fullStoreDepth The depth of blocks to keep FullStoredBlocks instead of StoredBlocks.
     ;;
    #_public
    (§ constructor #_"MemoryFullPrunedBlockStore" [#_"NetworkParameters" (§ name params), #_"int" (§ name fullStoreDepth)])
    (§ block
        (§ ass (§ name blockMap) (§ new #_"TransactionalHashMap<>"))
        (§ ass (§ name fullBlockMap) (§ new #_"TransactionalMultiKeyHashMap<>"))
        (§ ass (§ name transactionOutputMap) (§ new #_"TransactionalHashMap<>"))
        (§ ass (§ name (.. this fullStoreDepth)) (if (< 0 fullStoreDepth) fullStoreDepth 1))
        ;; Insert the genesis block.
        (§ try )
        (§ block
            (§ var #_"StoredBlock" (§ name storedGenesisHeader) (§ new #_"StoredBlock" (.. params (getGenesisBlock) (cloneAsHeader)), (.. params (getGenesisBlock) (getWork)), 0))
            ;; The coinbase in the genesis block is not spendable.
            (§ var #_"List<Transaction>" (§ name genesisTransactions) (Lists/newLinkedList))
            (§ var #_"StoredUndoableBlock" (§ name storedGenesis) (§ new #_"StoredUndoableBlock" (.. params (getGenesisBlock) (getHash)), genesisTransactions))
            (put storedGenesisHeader, storedGenesis)
            (setChainHead storedGenesisHeader)
            (setVerifiedChainHead storedGenesisHeader)
            (§ ass (§ name (.. this params)) params)
        )
        (§ catch #_"BlockStoreException" (§ name e))
        (§ block
            (§ throw (§ new #_"RuntimeException" e)) ;; Cannot happen.
        )
        (§ catch #_"VerificationException" (§ name e))
        (§ block
            (§ throw (§ new #_"RuntimeException" e)) ;; Cannot happen.
        )
        this
    )

    #_override
    #_public
    #_synchronized
    (§ method #_"void" (§ fn put) [#_"StoredBlock" (§ name block)])
        (§ throws #_"BlockStoreException")
    (§ block
        (Preconditions/checkNotNull blockMap, "MemoryFullPrunedBlockStore is closed")
        (§ var #_"Sha256Hash" (§ name hash) (.. block (getHeader) (getHash)))
        (.. blockMap (put hash, (§ new #_"StoredBlockAndWasUndoableFlag" block, false)))
        nil
    )

    #_override
    #_public
    #_synchronized
    (§ method #_"void" (§ fn put) [#_"StoredBlock" (§ name storedBlock), #_"StoredUndoableBlock" (§ name undoableBlock)])
        (§ throws #_"BlockStoreException")
    (§ block
        (Preconditions/checkNotNull blockMap, "MemoryFullPrunedBlockStore is closed")
        (§ var #_"Sha256Hash" (§ name hash) (.. storedBlock (getHeader) (getHash)))
        (.. fullBlockMap (put hash, (.. storedBlock (getHeight)), undoableBlock))
        (.. blockMap (put hash, (§ new #_"StoredBlockAndWasUndoableFlag" storedBlock, true)))
        nil
    )

    #_override
    #_nilable
    #_public
    #_synchronized
    (§ method #_"StoredBlock" (§ fn get) [#_"Sha256Hash" (§ name hash)])
        (§ throws #_"BlockStoreException")
    (§ block
        (Preconditions/checkNotNull blockMap, "MemoryFullPrunedBlockStore is closed")
        (§ var #_"StoredBlockAndWasUndoableFlag" (§ name storedBlock) (.. blockMap (get hash)))
        (when (some? storedBlock) (.. storedBlock block))
    )

    #_override
    #_nilable
    #_public
    #_synchronized
    (§ method #_"StoredBlock" (§ fn getOnceUndoableStoredBlock) [#_"Sha256Hash" (§ name hash)])
        (§ throws #_"BlockStoreException")
    (§ block
        (Preconditions/checkNotNull blockMap, "MemoryFullPrunedBlockStore is closed")
        (§ var #_"StoredBlockAndWasUndoableFlag" (§ name storedBlock) (.. blockMap (get hash)))
        (when (§ expr storedBlock != nil && (.. storedBlock wasUndoable)) (.. storedBlock block))
    )

    #_override
    #_nilable
    #_public
    #_synchronized
    (§ method #_"StoredUndoableBlock" (§ fn getUndoBlock) [#_"Sha256Hash" (§ name hash)])
        (§ throws #_"BlockStoreException")
    (§ block
        (Preconditions/checkNotNull fullBlockMap, "MemoryFullPrunedBlockStore is closed")
        (.. fullBlockMap (get hash))
    )

    #_override
    #_public
    #_synchronized
    (§ method #_"StoredBlock" (§ fn getChainHead) [])
        (§ throws #_"BlockStoreException")
    (§ block
        (Preconditions/checkNotNull blockMap, "MemoryFullPrunedBlockStore is closed")
        chainHead
    )

    #_override
    #_public
    #_synchronized
    (§ method #_"void" (§ fn setChainHead) [#_"StoredBlock" (§ name chainHead)])
        (§ throws #_"BlockStoreException")
    (§ block
        (Preconditions/checkNotNull blockMap, "MemoryFullPrunedBlockStore is closed")
        (§ ass (§ name (.. this chainHead)) chainHead)
        nil
    )

    #_override
    #_public
    #_synchronized
    (§ method #_"StoredBlock" (§ fn getVerifiedChainHead) [])
        (§ throws #_"BlockStoreException")
    (§ block
        (Preconditions/checkNotNull blockMap, "MemoryFullPrunedBlockStore is closed")
        verifiedChainHead
    )

    #_override
    #_public
    #_synchronized
    (§ method #_"void" (§ fn setVerifiedChainHead) [#_"StoredBlock" (§ name chainHead)])
        (§ throws #_"BlockStoreException")
    (§ block
        (Preconditions/checkNotNull blockMap, "MemoryFullPrunedBlockStore is closed")
        (§ ass (§ name (.. this verifiedChainHead)) chainHead)
        (§ if (< (.. this chainHead (getHeight)) (.. chainHead (getHeight))))
        (§ block
            (setChainHead chainHead)
        )
        ;; Potential leak here if not all blocks get setChainHead'd.
        ;; Though the FullPrunedBlockStore allows for this, the current AbstractBlockChain will not do it.
        (.. fullBlockMap (removeByMultiKey (- (.. chainHead (getHeight)) fullStoreDepth)))
        nil
    )

    #_override
    #_public
    (§ method #_"void" (§ fn close) [])
    (§ block
        (§ ass (§ name blockMap) nil)
        (§ ass (§ name fullBlockMap) nil)
        (§ ass (§ name transactionOutputMap) nil)
        nil
    )

    #_override
    #_nilable
    #_public
    #_synchronized
    (§ method #_"UTXO" (§ fn getTransactionOutput) [#_"Sha256Hash" (§ name hash), #_"long" (§ name index)])
        (§ throws #_"BlockStoreException")
    (§ block
        (Preconditions/checkNotNull transactionOutputMap, "MemoryFullPrunedBlockStore is closed")
        (.. transactionOutputMap (get (§ new #_"StoredTransactionOutPoint" hash, index)))
    )

    #_override
    #_public
    #_synchronized
    (§ method #_"void" (§ fn addUnspentTransactionOutput) [#_"UTXO" (§ name out)])
        (§ throws #_"BlockStoreException")
    (§ block
        (Preconditions/checkNotNull transactionOutputMap, "MemoryFullPrunedBlockStore is closed")
        (.. transactionOutputMap (put (§ new #_"StoredTransactionOutPoint" out), out))
        nil
    )

    #_override
    #_public
    #_synchronized
    (§ method #_"void" (§ fn removeUnspentTransactionOutput) [#_"UTXO" (§ name out)])
        (§ throws #_"BlockStoreException")
    (§ block
        (Preconditions/checkNotNull transactionOutputMap, "MemoryFullPrunedBlockStore is closed")
        (§ if (== (.. transactionOutputMap (remove (§ new #_"StoredTransactionOutPoint" out))) nil))
        (§ block
            (§ throw (§ new #_"BlockStoreException" "Tried to remove a UTXO from MemoryFullPrunedBlockStore that it didn't have!"))
        )
        nil
    )

    #_override
    #_public
    #_synchronized
    (§ method #_"void" (§ fn beginDatabaseBatchWrite) [])
        (§ throws #_"BlockStoreException")
    (§ block
        (.. blockMap (beginDatabaseBatchWrite))
        (.. fullBlockMap (beginTransaction))
        (.. transactionOutputMap (beginDatabaseBatchWrite))
        nil
    )

    #_override
    #_public
    #_synchronized
    (§ method #_"void" (§ fn commitDatabaseBatchWrite) [])
        (§ throws #_"BlockStoreException")
    (§ block
        (.. blockMap (commitDatabaseBatchWrite))
        (.. fullBlockMap (commitTransaction))
        (.. transactionOutputMap (commitDatabaseBatchWrite))
        nil
    )

    #_override
    #_public
    #_synchronized
    (§ method #_"void" (§ fn abortDatabaseBatchWrite) [])
        (§ throws #_"BlockStoreException")
    (§ block
        (.. blockMap (abortDatabaseBatchWrite))
        (.. fullBlockMap (abortTransaction))
        (.. transactionOutputMap (abortDatabaseBatchWrite))
        nil
    )

    #_override
    #_public
    #_synchronized
    (§ method #_"boolean" (§ fn hasUnspentOutputs) [#_"Sha256Hash" (§ name hash), #_"int" (§ name numOutputs)])
        (§ throws #_"BlockStoreException")
    (§ block
        (§ for (§ var #_"int" (§ name i) 0) :for (< i numOutputs) :for (§ ass (§ name i) (+ i 1)))
        (§ block
            (§ if (!= (getTransactionOutput hash, i) nil))
            (§ block
                (§ return true)
            )
        )
        false
    )

    #_override
    #_public
    (§ method #_"NetworkParameters" (§ fn getParams) [])
    (§ block
        params
    )
)

#_(ns org.bitcoinj.store #_"PostgresFullPrunedBlockStore"
    (:import [java.io ByteArrayOutputStream IOException]
             [java.sql PreparedStatement ResultSet SQLException Types]
             [java.util ArrayList List])
    (:import [org.slf4j Logger LoggerFactory])
   (:require [org.bitcoinj.core *]))

;;;
 ; <p>A full pruned block store using the Postgres database engine.  As an added bonus an address index is calculated,
 ; so you can use {@link #calculateBalanceForAddress(org.bitcoinj.core.Address)} to quickly look up
 ; the quantity of bitcoins controlled by that address.</p>
 ;;
#_public
(§ class #_"PostgresFullPrunedBlockStore" (§ extends #_"DatabaseFullPrunedBlockStore")
    #_private
    #_static
    (§ def- #_"Logger" (§ name log) (LoggerFactory/getLogger (§ klass #_"PostgresFullPrunedBlockStore")))

    #_private
    #_static
    (§ def- #_"String" (§ name POSTGRES_DUPLICATE_KEY_ERROR_CODE) "23505")
    #_private
    #_static
    (§ def- #_"String" (§ name DATABASE_DRIVER_CLASS) "org.postgresql.Driver")
    #_private
    #_static
    (§ def- #_"String" (§ name DATABASE_CONNECTION_URL_PREFIX) "jdbc:postgresql://")

    ;; create table SQL
    #_private
    #_static
    (§ def- #_"String" (§ name CREATE_SETTINGS_TABLE) (§ expr "CREATE TABLE settings ("
          + "name character varying(32) NOT NULL, "
          + "value bytea, "
          + "CONSTRAINT setting_pk PRIMARY KEY (name)"
          + ")"))

    #_private
    #_static
    (§ def- #_"String" (§ name CREATE_HEADERS_TABLE) (§ expr "CREATE TABLE headers ("
          + "hash bytea NOT NULL, "
          + "chainwork bytea NOT NULL, "
          + "height integer NOT NULL, "
          + "header bytea NOT NULL, "
          + "wasundoable boolean NOT NULL, "
          + "CONSTRAINT headers_pk PRIMARY KEY (hash)"
          + ")"))

    #_private
    #_static
    (§ def- #_"String" (§ name CREATE_UNDOABLE_TABLE) (§ expr "CREATE TABLE undoableblocks ("
          + "hash bytea NOT NULL, "
          + "height integer NOT NULL, "
          + "txoutchanges bytea, "
          + "transactions bytea, "
          + "CONSTRAINT undoableblocks_pk PRIMARY KEY (hash)"
          + ")"))

    #_private
    #_static
    (§ def- #_"String" (§ name CREATE_OPEN_OUTPUT_TABLE) (§ expr "CREATE TABLE openoutputs ("
          + "hash bytea NOT NULL, "
          + "index integer NOT NULL, "
          + "height integer NOT NULL, "
          + "value bigint NOT NULL, "
          + "scriptbytes bytea NOT NULL, "
          + "toaddress character varying(35), "
          + "addresstargetable smallint, "
          + "coinbase boolean, "
          + "CONSTRAINT openoutputs_pk PRIMARY KEY (hash,index)"
          + ")"))

    ;; Some indexes to speed up inserts.
    #_private
    #_static
    (§ def- #_"String" (§ name CREATE_OUTPUTS_ADDRESS_MULTI_INDEX) "CREATE INDEX openoutputs_hash_index_num_height_toaddress_idx ON openoutputs USING btree (hash, index, height, toaddress)")
    #_private
    #_static
    (§ def- #_"String" (§ name CREATE_OUTPUTS_TOADDRESS_INDEX) "CREATE INDEX openoutputs_toaddress_idx ON openoutputs USING btree (toaddress)")
    #_private
    #_static
    (§ def- #_"String" (§ name CREATE_OUTPUTS_ADDRESSTARGETABLE_INDEX) "CREATE INDEX openoutputs_addresstargetable_idx ON openoutputs USING btree (addresstargetable)")
    #_private
    #_static
    (§ def- #_"String" (§ name CREATE_OUTPUTS_HASH_INDEX) "CREATE INDEX openoutputs_hash_idx ON openoutputs USING btree (hash)")
    #_private
    #_static
    (§ def- #_"String" (§ name CREATE_UNDOABLE_TABLE_INDEX) "CREATE INDEX undoableblocks_height_idx ON undoableBlocks USING btree (height)")

    #_private
    #_static
    (§ def- #_"String" (§ name SELECT_UNDOABLEBLOCKS_EXISTS_SQL) "select 1 from undoableblocks where hash = ?")

    ;;;
     ; Creates a new PostgresFullPrunedBlockStore.
     ;
     ; @param params A copy of the NetworkParameters used.
     ; @param fullStoreDepth The number of blocks of history stored in full (something like 1000 is pretty safe).
     ; @param hostname The hostname of the database to connect to.
     ; @param dbName The database to connect to.
     ; @param username The database username.
     ; @param password The password to the database.
     ; @throws BlockStoreException if the database fails to open for any reason.
     ;;
    #_public
    (§ constructor #_"PostgresFullPrunedBlockStore" [#_"NetworkParameters" (§ name params), #_"int" (§ name fullStoreDepth), #_"String" (§ name hostname), #_"String" (§ name dbName), #_"String" (§ name username), #_"String" (§ name password)])
        (§ throws #_"BlockStoreException")
    (§ block
        (§ super params, (§ expr DATABASE_CONNECTION_URL_PREFIX + hostname + "/" + dbName), fullStoreDepth, username, password, nil)
        this
    )

    ;;;
     ; <p>Create a new PostgresFullPrunedBlockStore, storing the tables in the schema specified.  You may want to
     ; specify a schema to avoid name collisions, or just to keep the database better organized.  The schema is not
     ; required, and if one is not provided than the default schema for the username will be used.  See
     ; <a href="http://www.postgres.org/docs/9.3/static/ddl-schemas.html">the postgres schema docs</a>
     ; for more on schemas.</p>
     ;
     ; @param params A copy of the NetworkParameters used.
     ; @param fullStoreDepth The number of blocks of history stored in full (something like 1000 is pretty safe).
     ; @param hostname The hostname of the database to connect to.
     ; @param dbName The database to connect to.
     ; @param username The database username.
     ; @param password The password to the database.
     ; @param schemaName The name of the schema to put the tables in.  May be null if no schema is being used.
     ; @throws BlockStoreException if the database fails to open for any reason.
     ;;
    #_public
    (§ constructor #_"PostgresFullPrunedBlockStore" [#_"NetworkParameters" (§ name params), #_"int" (§ name fullStoreDepth), #_"String" (§ name hostname), #_"String" (§ name dbName), #_"String" (§ name username), #_"String" (§ name password), #_nilable #_"String" (§ name schemaName)])
        (§ throws #_"BlockStoreException")
    (§ block
        (§ super params, (§ expr DATABASE_CONNECTION_URL_PREFIX + hostname + "/" + dbName), fullStoreDepth, username, password, schemaName)
        this
    )

    #_override
    #_protected
    (§ method #_"String" (§ fn getDuplicateKeyErrorCode) [])
    (§ block
        POSTGRES_DUPLICATE_KEY_ERROR_CODE
    )

    #_override
    #_protected
    (§ method #_"List<String>" (§ fn getCreateTablesSQL) [])
    (§ block
        (§ var #_"List<String>" (§ name sql) (§ new #_"ArrayList<>"))
        (.. sql (add CREATE_SETTINGS_TABLE))
        (.. sql (add CREATE_HEADERS_TABLE))
        (.. sql (add CREATE_UNDOABLE_TABLE))
        (.. sql (add CREATE_OPEN_OUTPUT_TABLE))
        sql
    )

    #_override
    #_protected
    (§ method #_"List<String>" (§ fn getCreateIndexesSQL) [])
    (§ block
        (§ var #_"List<String>" (§ name sql) (§ new #_"ArrayList<>"))
        (.. sql (add CREATE_UNDOABLE_TABLE_INDEX))
        (.. sql (add CREATE_OUTPUTS_ADDRESS_MULTI_INDEX))
        (.. sql (add CREATE_OUTPUTS_ADDRESSTARGETABLE_INDEX))
        (.. sql (add CREATE_OUTPUTS_HASH_INDEX))
        (.. sql (add CREATE_OUTPUTS_TOADDRESS_INDEX))
        sql
    )

    #_override
    #_protected
    (§ method #_"List<String>" (§ fn getCreateSchemeSQL) [])
    (§ block
        (§ var #_"List<String>" (§ name sql) (§ new #_"ArrayList<>"))
        (.. sql (add (§ expr "CREATE SCHEMA IF NOT EXISTS " + schemaName)))
        (.. sql (add (§ expr "set search_path to '" + schemaName +"'")))
        sql
    )

    #_override
    #_protected
    (§ method #_"String" (§ fn getDatabaseDriverClass) [])
    (§ block
        DATABASE_DRIVER_CLASS
    )

    #_override
    #_public
    (§ method #_"void" (§ fn put) [#_"StoredBlock" (§ name storedBlock), #_"StoredUndoableBlock" (§ name undoableBlock)])
        (§ throws #_"BlockStoreException")
    (§ block
        (maybeConnect)
        ;; We skip the first 4 bytes because (on mainnet) the minimum target has 4 0-bytes.
        (§ var #_"byte[]" (§ name hashBytes) (§ new #_"byte[]" (§ count 28)))
        (System/arraycopy (.. storedBlock (getHeader) (getHash) (getBytes)), 4, hashBytes, 0, 28)
        (§ var #_"int" (§ name height) (.. storedBlock (getHeight)))
        (§ var #_"byte[]" (§ name transactions) nil)
        (§ var #_"byte[]" (§ name txOutChanges) nil)
        (§ try )
        (§ block
            (§ var #_"ByteArrayOutputStream" (§ name bos) (§ new #_"ByteArrayOutputStream"))
            (§ if (!= (.. undoableBlock (getTxOutChanges)) nil))
            (§ block
                (.. undoableBlock (getTxOutChanges) (serializeToStream bos))
                (§ ass (§ name txOutChanges) (.. bos (toByteArray)))
            )
            (§ else )
            (§ block
                (§ var #_"int" (§ name numTxn) (.. undoableBlock (getTransactions) (size)))
                (.. bos (write (& 0xff numTxn)))
                (.. bos (write (§ expr 0xff & (>> numTxn 8))))
                (.. bos (write (§ expr 0xff & (>> numTxn 16))))
                (.. bos (write (§ expr 0xff & (>> numTxn 24))))
                (§ for (§ var #_"Transaction" (§ name tx)) :for (.. undoableBlock (getTransactions)))
                (§ block
                    (.. tx (bitcoinSerialize bos))
                )
                (§ ass (§ name transactions) (.. bos (toByteArray)))
            )
            (.. bos (close))
        )
        (§ catch #_"IOException" (§ name e))
        (§ block
            (§ throw (§ new #_"BlockStoreException" e))
        )

        (§ try )
        (§ block
            (§ if (.. log (isDebugEnabled)))
            (§ block
                (.. log (debug (§ expr "Looking for undoable block with hash: " + (.. Utils/HEX (encode hashBytes)))))
            )

            (§ var #_"PreparedStatement" (§ name findS) (.. conn (get) (prepareStatement SELECT_UNDOABLEBLOCKS_EXISTS_SQL)))
            (.. findS (setBytes 1, hashBytes))

            (§ var #_"ResultSet" (§ name rs) (.. findS (executeQuery)))
            (§ if (.. rs (next)))
            (§ block
                ;; We already have this output, update it.
                (.. findS (close))

                ;; Postgres insert-or-updates are very complex (and finnicky).
                ;; This level of transaction isolation seems to work for bitcoinj.
                (§ var #_"PreparedStatement" (§ name ps) (.. conn (get) (prepareStatement (getUpdateUndoableBlocksSQL))))
                (.. ps (setBytes 3, hashBytes))

                (§ if (.. log (isDebugEnabled)))
                (§ block
                    (.. log (debug (§ expr "Updating undoable block with hash: " + (.. Utils/HEX (encode hashBytes)))))
                )

                (§ if (nil? transactions))
                (§ block
                    (.. ps (setBytes 1, txOutChanges))
                    (.. ps (setNull 2, Types/BINARY))
                )
                (§ else )
                (§ block
                    (.. ps (setNull 1, Types/BINARY))
                    (.. ps (setBytes 2, transactions))
                )
                (.. ps (executeUpdate))
                (.. ps (close))

                (§ return nil)
            )

            (§ var #_"PreparedStatement" (§ name ps) (.. conn (get) (prepareStatement (getInsertUndoableBlocksSQL))))
            (.. ps (setBytes 1, hashBytes))
            (.. ps (setInt 2, height))

            (§ if (.. log (isDebugEnabled)))
            (§ block
                (.. log (debug (§ expr "Inserting undoable block with hash: " + (.. Utils/HEX (encode hashBytes))  + " at height " + height)))
            )

            (§ if (nil? transactions))
            (§ block
                (.. ps (setBytes 3, txOutChanges))
                (.. ps (setNull 4, Types/BINARY))
            )
            (§ else )
            (§ block
                (.. ps (setNull 3, Types/BINARY))
                (.. ps (setBytes 4, transactions))
            )
            (.. ps (executeUpdate))
            (.. ps (close))
            (§ try )
            (§ block
                (putUpdateStoredBlock storedBlock, true)
            )
            (§ catch #_"SQLException" (§ name e))
            (§ block
                (§ throw (§ new #_"BlockStoreException" e))
            )
        )
        (§ catch #_"SQLException" (§ name e))
        (§ block
            (§ if (§ not (.. e (getSQLState) (equals POSTGRES_DUPLICATE_KEY_ERROR_CODE))))
            (§ block
                (§ throw (§ new #_"BlockStoreException" e))
            )
        )
        nil
    )
)

#_(ns org.bitcoinj.store #_"SPVBlockStore"
    (:import [java.io *]
             [java.nio *]
             [java.nio.channels *]
             [java.util *]
             [java.util.concurrent.locks *])
    (:import [com.google.common.base Charsets Preconditions]
             [org.slf4j *])
   (:require [org.bitcoinj.core *]
             [org.bitcoinj.utils *]))

;; TODO: Lose the mmap in this class.  There are too many platform bugs that require odd workarounds.

;;;
 ; An SPVBlockStore holds a limited number of block headers in a memory mapped ring buffer.  With such a store,
 ; you may not be able to process very deep re-orgs and could be disconnected from the chain (requiring a replay),
 ; but as they are virtually unheard of this is not a significant risk.
 ;;
#_public
(§ class #_"SPVBlockStore" (§ implements #_"BlockStore")
    #_private
    #_static
    (§ def- #_"Logger" (§ name log) (LoggerFactory/getLogger (§ klass #_"SPVBlockStore")))

    ;;; The default number of headers that will be stored in the ring buffer. ;;
    #_public
    #_static
    (§ def #_"int" (§ name DEFAULT_CAPACITY) 5000)
    #_public
    #_static
    (§ def #_"String" (§ name HEADER_MAGIC) "SPVB")

    #_protected
    #_volatile
    (§ field #_"MappedByteBuffer" (§ name buffer))
    #_protected
    (§ field #_"int" (§ name capacity))
    #_protected
    (§ field #_"NetworkParameters" (§ name params))

    #_protected
    (§ field #_"ReentrantLock" (§ name lock) (Threading/lock "SPVBlockStore"))

    ;; The entire ring-buffer is mmapped and accessing it should be as fast as accessing regular memory once it's
    ;; faulted in.  Unfortunately, in theory practice and theory are the same.  In practice they aren't.
    ;;
    ;; MMapping a file in Java does not give us a byte[] as you may expect but rather a ByteBuffer, and whilst on
    ;; the OpenJDK/Oracle JVM calls into the get() methods are compiled down to inlined native code on Android each
    ;; get() call is actually a full-blown JNI method under the hood, meaning it's unbelievably slow.  The caches
    ;; below let us stay in the JIT-compiled Java world without expensive JNI transitions and make a 10x difference!
    #_protected
    (§ field #_"LinkedHashMap<Sha256Hash, StoredBlock>" (§ name blockCache) (§ new #_"LinkedHashMap<Sha256Hash, StoredBlock>"
        (§ anon
            #_override
            #_protected
            (§ method #_"boolean" (§ fn removeEldestEntry) [#_"Map.Entry<Sha256Hash, StoredBlock>" (§ name entry)])
            (§ block
                (< 2050 (size)) ;; Slightly more than the difficulty transition period.
            )
        )))

    ;; Use a separate cache to track get() misses.  This is to efficiently handle the case of an unconnected block
    ;; during chain download.  Each new block will do a get() on the unconnected block so if we haven't seen it yet
    ;; we must efficiently respond.
    ;;
    ;; We don't care about the value in this cache.  It is always notFoundMarker.  Unfortunately LinkedHashSet does
    ;; not provide the removeEldestEntry control.
    #_private
    #_static
    (§ def- #_"Object" (§ name NOT_FOUND_MARKER) (§ new #_"Object"))
    #_protected
    (§ field #_"LinkedHashMap<Sha256Hash, Object>" (§ name notFoundCache) (§ new #_"LinkedHashMap<Sha256Hash, Object>"
        (§ anon
            #_override
            #_protected
            (§ method #_"boolean" (§ fn removeEldestEntry) [#_"Map.Entry<Sha256Hash, Object>" (§ name entry)])
            (§ block
                (< 100 (size)) ;; This was chosen arbitrarily.
            )
        )))

    ;; Used to stop other applications/processes from opening the store.
    #_protected
    (§ field #_"FileLock" (§ name fileLock))
    #_protected
    (§ field #_"RandomAccessFile" (§ name randomAccessFile))

    ;;;
     ; Creates and initializes an SPV block store that can hold {@link #DEFAULT_CAPACITY} blocks.
     ; Will create the given file if it's missing.  This operation will block on disk.
     ; @param file File to use for the block store.
     ; @throws BlockStoreException if something goes wrong.
     ;;
    #_public
    (§ constructor #_"SPVBlockStore" [#_"NetworkParameters" (§ name params), #_"File" (§ name file)])
        (§ throws #_"BlockStoreException")
    (§ block
        (§ this params, file, DEFAULT_CAPACITY)
        this
    )

    ;;;
     ; Creates and initializes an SPV block store that can hold a given amount of blocks.
     ; Will create the given file if it's missing.  This operation will block on disk.
     ; @param file File to use for the block store.
     ; @param capacity Custom capacity.
     ; @throws BlockStoreException if something goes wrong.
     ;;
    #_public
    (§ constructor #_"SPVBlockStore" [#_"NetworkParameters" (§ name params), #_"File" (§ name file), #_"int" (§ name capacity)])
        (§ throws #_"BlockStoreException")
    (§ block
        (Preconditions/checkNotNull file)
        (§ ass (§ name (.. this params)) (Preconditions/checkNotNull params))
        (Preconditions/checkArgument (> capacity 0))

        (§ ass (§ name (.. this capacity)) capacity)
        (§ try )
        (§ block
            (§ var #_"boolean" (§ name exists) (.. file (exists)))
            ;; Set up the backing file.
            (§ ass (§ name randomAccessFile) (§ new #_"RandomAccessFile" file, "rw"))
            (§ var #_"long" (§ name fileSize) (getFileSize capacity))
            (§ if (§ not exists))
            (§ block
                (.. log (info (§ expr "Creating new SPV block chain file " + file)))
                (.. randomAccessFile (setLength fileSize))
            )
            (§ elseif (!= (.. randomAccessFile (length)) fileSize))
            (§ block
                (§ throw (§ new #_"BlockStoreException" (§ expr "File size on disk does not match expected size: " + (.. randomAccessFile (length)) + " vs " + fileSize)))
            )

            (§ var #_"FileChannel" (§ name channel) (.. randomAccessFile (getChannel)))
            (§ ass (§ name fileLock) (.. channel (tryLock)))
            (§ if (nil? fileLock))
            (§ block
                (§ throw (§ new #_"ChainFileLockedException" "Store file is already locked by another process"))
            )

            ;; Map it into memory read/write.  The kernel will take care of flushing writes to disk at the most
            ;; efficient times, which may mean that until the map is deallocated the data on disk is randomly
            ;; inconsistent.  However the only process accessing it is us, via this mapping, so our own view will
            ;; always be correct.  Once we establish the mmap the underlying file and channel can go away.  Note
            ;; that the details of mmapping vary between platforms.
            (§ ass (§ name buffer) (.. channel (map FileChannel/MapMode/READ_WRITE, 0, fileSize)))

            ;; Check or initialize the header bytes to ensure we don't try to open some random file.
            (§ var #_"byte[]" (§ name header))
            (§ if exists)
            (§ block
                (§ ass (§ name header) (§ new #_"byte[]" (§ count 4)))
                (.. buffer (get header))
                (§ if (§ not (.. (§ new #_"String" header, Charsets/US_ASCII) (equals HEADER_MAGIC))))
                (§ block
                    (§ throw (§ new #_"BlockStoreException" (§ expr "Header bytes do not equal " + HEADER_MAGIC)))
                )
            )
            (§ else )
            (§ block
                (initNewStore params)
            )
        )
        (§ catch #_"Exception" (§ name e1))
        (§ block
            (§ try )
            (§ block
                (§ if (some? randomAccessFile))
                (§ block
                    (.. randomAccessFile (close))
                )
            )
            (§ catch #_"IOException" (§ name e2))
            (§ block
                (§ throw (§ new #_"BlockStoreException" e2))
            )
            (§ throw (§ new #_"BlockStoreException" e1))
        )
        this
    )

    #_private
    (§ method- #_"void" (§ fn initNewStore) [#_"NetworkParameters" (§ name params)])
        (§ throws #_"Exception")
    (§ block
        (§ var #_"byte[]" (§ name header) (.. HEADER_MAGIC (getBytes "US-ASCII")))
        (.. buffer (put header))
        ;; Insert the genesis block.
        (.. lock (lock))
        (§ try )
        (§ block
            (setRingCursor buffer, FILE_PROLOGUE_BYTES)
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
        (§ var #_"Block" (§ name genesis) (.. params (getGenesisBlock) (cloneAsHeader)))
        (§ var #_"StoredBlock" (§ name storedGenesis) (§ new #_"StoredBlock" genesis, (.. genesis (getWork)), 0))
        (put storedGenesis)
        (setChainHead storedGenesis)
        nil
    )

    ;;; Returns the size in bytes of the file that is used to store the chain with the current parameters. ;;
    #_public
    #_static
    (§ defn #_"int" (§ fn getFileSize) [#_"int" (§ name capacity)])
    (§ block
        (§ expr RECORD_SIZE * capacity + FILE_PROLOGUE_BYTES) ;; extra kilobyte for stuff
    )

    #_override
    #_public
    (§ method #_"void" (§ fn put) [#_"StoredBlock" (§ name block)])
        (§ throws #_"BlockStoreException")
    (§ block
        (§ var #_"MappedByteBuffer" (§ name buffer) (.. this buffer))
        (§ if (nil? buffer))
        (§ block
            (§ throw (§ new #_"BlockStoreException" "Store closed"))
        )

        (.. lock (lock))
        (§ try )
        (§ block
            (§ var #_"int" (§ name cursor) (getRingCursor buffer))
            ;; Wrapped around.
            (§ if (§ expr cursor == (getFileSize capacity)))
            (§ block
                (§ ass (§ name cursor) FILE_PROLOGUE_BYTES)
            )
            (.. buffer (position cursor))
            (§ var #_"Sha256Hash" (§ name hash) (.. block (getHeader) (getHash)))
            (.. notFoundCache (remove hash))
            (.. buffer (put (.. hash (getBytes))))
            (.. block (serializeCompact buffer))
            (setRingCursor buffer, (.. buffer (position)))
            (.. blockCache (put hash, block))
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
        nil
    )

    #_override
    #_nilable
    #_public
    (§ method #_"StoredBlock" (§ fn get) [#_"Sha256Hash" (§ name hash)])
        (§ throws #_"BlockStoreException")
    (§ block
        (§ var #_"MappedByteBuffer" (§ name buffer) (.. this buffer))
        (§ if (nil? buffer))
        (§ block
            (§ throw (§ new #_"BlockStoreException" "Store closed"))
        )

        (.. lock (lock))
        (§ try )
        (§ block
            (§ var #_"StoredBlock" (§ name cacheHit) (.. blockCache (get hash)))
            (§ if (some? cacheHit))
            (§ block
                (§ return cacheHit)
            )
            (§ if (!= (.. notFoundCache (get hash)) nil))
            (§ block
                (§ return nil)
            )

            ;; Starting from the current tip of the ring work backwards until we have either
            ;; found the block or wrapped around.
            (§ var #_"int" (§ name cursor) (getRingCursor buffer))
            (§ var #_"int" (§ name startingPoint) cursor)
            (§ var #_"int" (§ name fileSize) (getFileSize capacity))
            (§ var #_"byte[]" (§ name targetHashBytes) (.. hash (getBytes)))
            (§ var #_"byte[]" (§ name scratch) (§ new #_"byte[]" (§ count 32)))
            (§ do )
            (§ block
                (§ ass (§ name cursor) (- cursor RECORD_SIZE))
                ;; We hit the start, so wrap around.
                (§ if (< cursor FILE_PROLOGUE_BYTES))
                (§ block
                    (§ ass (§ name cursor) (- fileSize RECORD_SIZE))
                )
                ;; Cursor is now at the start of the next record to check, so read the hash and compare it.
                (.. buffer (position cursor))
                (.. buffer (get scratch))
                (§ if (Arrays/equals scratch, targetHashBytes))
                (§ block
                    ;; Found the target.
                    (§ var #_"StoredBlock" (§ name storedBlock) (StoredBlock/deserializeCompact params, buffer))
                    (.. blockCache (put hash, storedBlock))
                    (§ return storedBlock)
                )
            )
            (§ again (§ expr cursor != startingPoint))

            ;; Not found.
            (.. notFoundCache (put hash, NOT_FOUND_MARKER))
            (§ return nil)
        )
        (§ catch #_"ProtocolException" (§ name e))
        (§ block
            (§ throw (§ new #_"RuntimeException" e)) ;; Cannot happen.
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    #_protected
    (§ field #_"StoredBlock" (§ name lastChainHead))

    #_override
    #_public
    (§ method #_"StoredBlock" (§ fn getChainHead) [])
        (§ throws #_"BlockStoreException")
    (§ block
        (§ var #_"MappedByteBuffer" (§ name buffer) (.. this buffer))
        (§ if (nil? buffer))
        (§ block
            (§ throw (§ new #_"BlockStoreException" "Store closed"))
        )

        (.. lock (lock))
        (§ try )
        (§ block
            (§ if (nil? lastChainHead))
            (§ block
                (§ var #_"byte[]" (§ name headHash) (§ new #_"byte[]" (§ count 32)))
                (.. buffer (position 8))
                (.. buffer (get headHash))
                (§ var #_"Sha256Hash" (§ name hash) (Sha256Hash/wrap headHash))
                (§ var #_"StoredBlock" (§ name block) (get hash))
                (§ if (nil? block))
                (§ block
                    (§ throw (§ new #_"BlockStoreException" (§ expr "Corrupted block store: could not find chain head: " + hash)))
                )

                (§ ass (§ name lastChainHead) block)
            )
            (§ return lastChainHead)
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    #_override
    #_public
    (§ method #_"void" (§ fn setChainHead) [#_"StoredBlock" (§ name chainHead)])
        (§ throws #_"BlockStoreException")
    (§ block
        (§ var #_"MappedByteBuffer" (§ name buffer) (.. this buffer))
        (§ if (nil? buffer))
        (§ block
            (§ throw (§ new #_"BlockStoreException" "Store closed"))
        )

        (.. lock (lock))
        (§ try )
        (§ block
            (§ ass (§ name lastChainHead) chainHead)
            (§ var #_"byte[]" (§ name headHash) (.. chainHead (getHeader) (getHash) (getBytes)))
            (.. buffer (position 8))
            (.. buffer (put headHash))
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
        nil
    )

    #_override
    #_public
    (§ method #_"void" (§ fn close) [])
        (§ throws #_"BlockStoreException")
    (§ block
        (§ try )
        (§ block
            (.. buffer (force))
            (§ ass (§ name buffer) nil) ;; Allow it to be GCd and the underlying file mapping to go away.
            (.. randomAccessFile (close))
        )
        (§ catch #_"IOException" (§ name e))
        (§ block
            (§ throw (§ new #_"BlockStoreException" e))
        )
        nil
    )

    #_override
    #_public
    (§ method #_"NetworkParameters" (§ fn getParams) [])
    (§ block
        params
    )

    #_protected
    #_static
    (§ def #_"int" (§ name RECORD_SIZE) (+ 32 StoredBlock/COMPACT_SERIALIZED_SIZE)) ;; hash

    ;; File format:
    ;;   4 header bytes = "SPVB"
    ;;   4 cursor bytes, which indicate the offset from the first kb where the next block header should be written
    ;;   32 bytes for the hash of the chain head
    ;;
    ;; For each header (128 bytes)
    ;;   32 bytes hash of the header
    ;;   12 bytes of chain work
    ;;    4 bytes of height
    ;;   80 bytes of block header data
    #_protected
    #_static
    (§ def #_"int" (§ name FILE_PROLOGUE_BYTES) 1024)

    ;;; Returns the offset from the file start where the latest block should be written (end of prev block). ;;
    #_private
    (§ method- #_"int" (§ fn getRingCursor) [#_"ByteBuffer" (§ name buffer)])
    (§ block
        (§ var #_"int" (§ name c) (.. buffer (getInt 4)))
        (Preconditions/checkState (§ expr FILE_PROLOGUE_BYTES <= c), "Integer overflow")
        c
    )

    #_private
    (§ method- #_"void" (§ fn setRingCursor) [#_"ByteBuffer" (§ name buffer), #_"int" (§ name newCursor)])
    (§ block
        (Preconditions/checkArgument (<= 0 newCursor))
        (.. buffer (putInt 4, newCursor))
        nil
    )
)

#_(ns org.bitcoinj.uri #_"BitcoinURI"
    (:import [java.io UnsupportedEncodingException]
             [java.net URI URISyntaxException URLDecoder URLEncoder]
             [java.util ArrayList Collections LinkedHashMap List Locale Map])
    (:import [com.google.common.base Preconditions])
   (:require [org.bitcoinj.core Address AddressFormatException Coin NetworkParameters]
             [org.bitcoinj.params AbstractBitcoinNetParams]))

;;;
 ; <p>Provides a standard implementation of a Bitcoin URI with support for the following:</p>
 ;
 ; <ul>
 ; <li>URLEncoded URIs (as passed in by IE on the command line)</li>
 ; <li>BIP21 names (including the "req-" prefix handling requirements)</li>
 ; </ul>
 ;
 ; <h2>Accepted formats</h2>
 ;
 ; <p>The following input forms are accepted:</p>
 ;
 ; <ul>
 ; <li>{@code bitcoin:<address>}</li>
 ; <li>{@code bitcoin:<address>?<name1>=<value1>&<name2>=<value2>} with multiple additional name/value pairs</li>
 ; </ul>
 ;
 ; <p>The name/value pairs are processed as follows.</p>
 ; <ol>
 ; <li>URL encoding is stripped and treated as UTF-8</li>
 ; <li>names prefixed with {@code req-} are treated as required and if unknown or conflicting cause a parse exception</li>
 ; <li>Unknown names not prefixed with {@code req-} are added to a Map, accessible by parameter name</li>
 ; <li>Known names not prefixed with {@code req-} are processed unless they are malformed</li>
 ; </ol>
 ;
 ; <p>The following names are known and have the following formats:</p>
 ; <ul>
 ; <li>{@code amount} decimal value to 8 dp (e.g. 0.12345678) <b>Note that the exponent notation is not supported any more.</b></li>
 ; <li>{@code label} any URL encoded alphanumeric</li>
 ; <li>{@code message} any URL encoded alphanumeric</li>
 ; </ul>
 ;
 ; @author Andreas Schildbach (initial code)
 ; @author Jim Burton (enhancements for MultiBit)
 ; @author Gary Rowe (BIP21 support)
 ; @see <a href="https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki">BIP 0021</a>
 ;;
#_public
(§ class #_"BitcoinURI"
    ;; Not worth turning into an enum.
    #_public
    #_static
    (§ def #_"String" (§ name FIELD_MESSAGE) "message")
    #_public
    #_static
    (§ def #_"String" (§ name FIELD_LABEL) "label")
    #_public
    #_static
    (§ def #_"String" (§ name FIELD_AMOUNT) "amount")
    #_public
    #_static
    (§ def #_"String" (§ name FIELD_ADDRESS) "address")
    #_public
    #_static
    (§ def #_"String" (§ name FIELD_PAYMENT_REQUEST_URL) "r")

    ;;;
     ; URI for Bitcoin network.  Use {@link org.bitcoinj.params.AbstractBitcoinNetParams#BITCOIN_SCHEME}
     ; if you specifically need Bitcoin, or use {@link org.bitcoinj.core.NetworkParameters#getUriScheme}
     ; to get the scheme from network parameters.
     ;;
    #_deprecated
    #_public
    #_static
    (§ def #_"String" (§ name BITCOIN_SCHEME) "bitcoin")
    #_private
    #_static
    (§ def- #_"String" (§ name ENCODED_SPACE_CHARACTER) "%20")
    #_private
    #_static
    (§ def- #_"String" (§ name AMPERSAND_SEPARATOR) "&")
    #_private
    #_static
    (§ def- #_"String" (§ name QUESTION_MARK_SEPARATOR) "?")

    ;;;
     ; Contains all the parameters in the order in which they were processed.
     ;;
    #_private
    (§ field- #_"Map<String, Object>" (§ name parameterMap) (§ new #_"LinkedHashMap<>"))

    ;;;
     ; Constructs a new BitcoinURI from the given string.  Can be for any network.
     ;
     ; @param uri The raw URI data to be parsed (see class comments for accepted formats).
     ; @throws BitcoinURIParseException if the URI is not syntactically or semantically valid.
     ;;
    #_public
    (§ constructor #_"BitcoinURI" [#_"String" (§ name uri)])
        (§ throws #_"BitcoinURIParseException")
    (§ block
        (§ this nil, uri)
        this
    )

    ;;;
     ; Constructs a new object by trying to parse the input as a valid Bitcoin URI.
     ;
     ; @param params The network parameters that determine which network the URI is from, or null if you
     ;               don't have any expectation about what network the URI is for and wish to check yourself.
     ; @param input The raw URI data to be parsed (see class comments for accepted formats).
     ;
     ; @throws BitcoinURIParseException if the input fails Bitcoin URI syntax and semantic checks.
     ;;
    #_public
    (§ constructor #_"BitcoinURI" [#_nilable #_"NetworkParameters" (§ name params), #_"String" (§ name input)])
        (§ throws #_"BitcoinURIParseException")
    (§ block
        (Preconditions/checkNotNull input)

        (§ var #_"String" (§ name scheme) (if (some? params) (.. params (getUriScheme)) AbstractBitcoinNetParams/BITCOIN_SCHEME))

        ;; Attempt to form the URI (fail fast syntax checking to official standards).
        (§ var #_"URI" (§ name uri))
        (§ try )
        (§ block
            (§ ass (§ name uri) (§ new #_"URI" input))
        )
        (§ catch #_"URISyntaxException" (§ name e))
        (§ block
            (§ throw (§ new #_"BitcoinURIParseException" "Bad URI syntax", e))
        )

        ;; URI is formed as  bitcoin:<address>?<query parameters>
        ;; blockchain.info generates URIs of non-BIP compliant form bitcoin://address?....
        ;; We support both until Ben fixes his code.

        ;; Remove the bitcoin scheme.
        ;; (Note: getSchemeSpecificPart() is not used as it unescapes the label and parse then fails.
        ;; For instance with  bitcoin:129mVqKUmJ9uwPxKJBnNdABbuaaNfho4Ha?amount=0.06&label=Tom%20%26%20Jerry
        ;; the & (%26) in Tom and Jerry gets interpreted as a separator and the label then gets parsed
        ;; as 'Tom ' instead of 'Tom & Jerry'.)
        (§ var #_"String" (§ name blockchainInfoScheme) (§ expr scheme + "://"))
        (§ var #_"String" (§ name correctScheme) (§ expr scheme + ":"))
        (§ var #_"String" (§ name schemeSpecificPart))
        (§ if (.. input (startsWith blockchainInfoScheme)))
        (§ block
            (§ ass (§ name schemeSpecificPart) (.. input (substring (.. blockchainInfoScheme (length)))))
        )
        (§ elseif (.. input (startsWith correctScheme)))
        (§ block
            (§ ass (§ name schemeSpecificPart) (.. input (substring (.. correctScheme (length)))))
        )
        (§ else )
        (§ block
            (§ throw (§ new #_"BitcoinURIParseException" (§ expr "Unsupported URI scheme: " + (.. uri (getScheme)))))
        )

        ;; Split off the address from the rest of the query parameters.
        (§ var #_"String[]" (§ name addressSplitTokens) (.. schemeSpecificPart (split "\\?", 2)))
        (§ if (== (.. addressSplitTokens length) 0))
        (§ block
            (§ throw (§ new #_"BitcoinURIParseException" "No data found after the bitcoin: prefix"))
        )

        (§ var #_"String" (§ name addressToken) (§ ai addressSplitTokens 0)) ;; may be empty!

        (§ var #_"String[]" (§ name nameValuePairTokens))
        (§ if (== (.. addressSplitTokens length) 1))
        (§ block
            ;; Only an address is specified - use an empty '<name>=<value>' token array.
            (§ ass (§ name nameValuePairTokens) (§ new #_"String[]"))
        )
        (§ else )
        (§ block
            ;; Split into '<name>=<value>' tokens.
            (§ ass (§ name nameValuePairTokens) (.. (§ ai addressSplitTokens 1) (split "&")))
        )

        ;; Attempt to parse the rest of the URI parameters.
        (parseParameters params, addressToken, nameValuePairTokens)

        (§ if (§ not (.. addressToken (isEmpty))))
        (§ block
            ;; Attempt to parse the addressToken as a Bitcoin address for this network.
            (§ try )
            (§ block
                (§ var #_"Address" (§ name address) (Address/fromBase58 params, addressToken))
                (putWithValidation FIELD_ADDRESS, address)
            )
            (§ catch [#_"AddressFormatException" (§ name e)])
            (§ block
                (§ throw (§ new #_"BitcoinURIParseException" "Bad address", e))
            )
        )

        (§ if (§ expr (.. addressToken (isEmpty)) && (getPaymentRequestUrl) == nil))
        (§ block
            (§ throw (§ new #_"BitcoinURIParseException" "No address and no r= parameter found"))
        )
        this
    )

    ;;;
     ; @param params The network parameters or null.
     ; @param nameValuePairTokens The tokens representing the name value pairs (assumed to be separated by '=' e.g. 'amount=0.2').
     ;;
    #_private
    (§ method- #_"void" (§ fn parseParameters) [#_nilable #_"NetworkParameters" (§ name params), #_"String" (§ name addressToken), #_"String[]" (§ name nameValuePairTokens)])
        (§ throws #_"BitcoinURIParseException")
    (§ block
        ;; Attempt to decode the rest of the tokens into a parameter map.
        (§ for (§ var #_"String" (§ name nameValuePairToken)) :for nameValuePairTokens)
        (§ block
            (§ var #_"int" (§ name sepIndex) (.. nameValuePairToken (indexOf "=")))
            (§ if (§ expr sepIndex == -1))
            (§ block
                (§ throw (§ new #_"BitcoinURIParseException" (§ expr "Malformed Bitcoin URI - no separator in '" + nameValuePairToken + "'")))
            )
            (§ if (§ expr sepIndex == 0))
            (§ block
                (§ throw (§ new #_"BitcoinURIParseException" (§ expr "Malformed Bitcoin URI - empty name '" + nameValuePairToken + "'")))
            )

            (§ var #_"String" (§ name nameToken) (.. nameValuePairToken (substring 0, sepIndex) (toLowerCase Locale/ENGLISH)))
            (§ var #_"String" (§ name valueToken) (.. nameValuePairToken (substring (+ sepIndex 1))))

            ;; Parse the amount.
            (§ if (.. FIELD_AMOUNT (equals nameToken)))
            (§ block
                ;; Decode the amount (contains an optional decimal component to 8dp).
                (§ try )
                (§ block
                    (§ var #_"Coin" (§ name amount) (Coin/parseCoin valueToken))
                    (§ if (§ expr params != nil && (.. amount (isGreaterThan (.. params (getMaxMoney))))))
                    (§ block
                        (§ throw (§ new #_"BitcoinURIParseException" "Max number of coins exceeded"))
                    )
                    (§ if (< (.. amount (signum)) 0))
                    (§ block
                        (§ throw (§ new #_"ArithmeticException" "Negative coins specified"))
                    )

                    (putWithValidation FIELD_AMOUNT, amount)
                )
                (§ catch #_"IllegalArgumentException" (§ name e))
                (§ block
                    (§ throw (§ new #_"OptionalFieldValidationException" (String/format Locale/US, "'%s' is not a valid amount", valueToken), e))
                )
                (§ catch #_"ArithmeticException" (§ name e))
                (§ block
                    (§ throw (§ new #_"OptionalFieldValidationException" (String/format Locale/US, "'%s' has too many decimal places", valueToken), e))
                )
            )
            (§ else )
            (§ block
                (§ if (.. nameToken (startsWith "req-")))
                (§ block
                    ;; A required parameter that we do not know about.
                    (§ throw (§ new #_"RequiredFieldValidationException" (§ str "'" + nameToken + "' is required but not known, this URI is not valid")))
                )

                ;; Known fields and unknown parameters that are optional.
                (§ try )
                (§ block
                    (§ if (§ expr 0 < (.. valueToken (length))))
                    (§ block
                        (putWithValidation nameToken, (URLDecoder/decode valueToken, "UTF-8"))
                    )
                )
                (§ catch #_"UnsupportedEncodingException" (§ name e))
                (§ block
                    (§ throw (§ new #_"RuntimeException" e)) ;; Can't happen.
                )
            )
        )

        ;; Note to the future:
        ;; when you want to implement 'req-expires', have a look at commit 410a53791841 which had it in.
        nil
    )

    ;;;
     ; Put the value against the key in the map checking for duplication.  This avoids address field overwrite etc.
     ;
     ; @param key The key for the map.
     ; @param value The value to store.
     ;;
    #_private
    (§ method- #_"void" (§ fn putWithValidation) [#_"String" (§ name key), #_"Object" (§ name value)])
        (§ throws #_"BitcoinURIParseException")
    (§ block
        (§ if (.. parameterMap (containsKey key)))
        (§ block
            (§ throw (§ new #_"BitcoinURIParseException" (String/format Locale/US, "'%s' is duplicated, URI is invalid", key)))
        )

        (.. parameterMap (put key, value))
        nil
    )

    ;;;
     ; The Bitcoin Address from the URI, if one was present.  It's possible to have Bitcoin URI's with no address
     ; if a r= payment protocol parameter is specified, though this form is not recommended as older wallets
     ; can't understand it.
     ;;
    #_nilable
    #_public
    (§ method #_"Address" (§ fn getAddress) [])
    (§ block
        (§ cast #_"Address" (.. parameterMap (get FIELD_ADDRESS)))
    )

    ;;;
     ; @return The amount name encoded using a pure integer value based at 10,000,000 units is 1 BTC.
     ;         May be null if no amount is specified.
     ;;
    #_public
    (§ method #_"Coin" (§ fn getAmount) [])
    (§ block
        (§ cast #_"Coin" (.. parameterMap (get FIELD_AMOUNT)))
    )

    ;;;
     ; @return the label from the URI.
     ;;
    #_public
    (§ method #_"String" (§ fn getLabel) [])
    (§ block
        (§ cast #_"String" (.. parameterMap (get FIELD_LABEL)))
    )

    ;;;
     ; @return the message from the URI.
     ;;
    #_public
    (§ method #_"String" (§ fn getMessage) [])
    (§ block
        (§ cast #_"String" (.. parameterMap (get FIELD_MESSAGE)))
    )

    ;;;
     ; @return the URL where a payment request (as specified in BIP 70) may be fetched.
     ;;
    #_public
    (§ method #_"String" (§ fn getPaymentRequestUrl) [])
    (§ block
        (§ cast #_"String" (.. parameterMap (get FIELD_PAYMENT_REQUEST_URL)))
    )

    ;;;
     ; Returns the URLs where a payment request (as specified in BIP 70) may be fetched.
     ; The first URL is the main URL, all subsequent URLs are fallbacks.
     ;;
    #_public
    (§ method #_"List<String>" (§ fn getPaymentRequestUrls) [])
    (§ block
        (§ var #_"ArrayList<String>" (§ name urls) (§ new #_"ArrayList<>"))
        (§ while true)
        (§ block
            (§ var #_"int" (§ name i) (.. urls (size)))
            (§ var #_"String" (§ name paramName) (§ str FIELD_PAYMENT_REQUEST_URL + (if (< 0 i) (Integer/toString i) "")))
            (§ var #_"String" (§ name url) (§ cast #_"String" (.. parameterMap (get paramName))))
            (§ if (nil? url))
            (§ block
                (§ break )
            )
            (.. urls (add url))
        )
        (Collections/reverse urls)
        urls
    )

    ;;;
     ; @param name The name of the parameter.
     ; @return the parameter value, or null if not present.
     ;;
    #_public
    (§ method #_"Object" (§ fn getParameterByName) [#_"String" (§ name name)])
    (§ block
        (.. parameterMap (get name))
    )

    #_override
    #_public
    (§ method #_"String" (§ fn toString) [])
    (§ block
        (§ var #_"StringBuilder" (§ name sb) (§ new #_"StringBuilder" "BitcoinURI["))
        (§ var #_"boolean" (§ name first) true)
        (§ for (§ var #_"Map.Entry<String, Object>" (§ name entry)) :for (.. parameterMap (entrySet)))
        (§ block
            (§ if first)
            (§ block
                (§ ass (§ name first) false)
            )
            (§ else )
            (§ block
                (.. sb (append ","))
            )
            (.. sb (append "'") (append (.. entry (getKey))) (append "'='") (append (.. entry (getValue))) (append "'"))
        )
        (.. sb (append "]"))
        (.. sb (toString))
    )

    ;;;
     ; Simple Bitcoin URI builder using known good fields.
     ;
     ; @param address The Bitcoin address.
     ; @param amount The amount.
     ; @param label A label.
     ; @param message A message.
     ; @return a String containing the Bitcoin URI.
     ;;
    #_public
    #_static
    (§ defn #_"String" (§ fn convertToBitcoinURI) [#_"Address" (§ name address), #_"Coin" (§ name amount), #_"String" (§ name label), #_"String" (§ name message)])
    (§ block
        (convertToBitcoinURI (.. address (getParameters)), (.. address (toString)), amount, label, message)
    )

    ;;;
     ; Simple Bitcoin URI builder using known good fields.
     ;
     ; @param params The network parameters that determine which network the URI is for.
     ; @param address The Bitcoin address.
     ; @param amount The amount.
     ; @param label A label.
     ; @param message A message.
     ; @return a String containing the Bitcoin URI.
     ;;
    #_public
    #_static
    (§ defn #_"String" (§ fn convertToBitcoinURI) [#_"NetworkParameters" (§ name params), #_"String" (§ name address), #_nilable #_"Coin" (§ name amount), #_nilable #_"String" (§ name label), #_nilable #_"String" (§ name message)])
    (§ block
        (Preconditions/checkNotNull params)
        (Preconditions/checkNotNull address)

        (§ if (§ expr amount != nil && (.. amount (signum)) < 0))
        (§ block
            (§ throw (§ new #_"IllegalArgumentException" "Coin must be positive"))
        )

        (§ var #_"StringBuilder" (§ name sb) (§ new #_"StringBuilder"))
        (§ var #_"String" (§ name scheme) (.. params (getUriScheme)))
        (.. sb (append scheme) (append ":") (append address))

        (§ var #_"boolean" (§ name questionMarkHasBeenOutput) false)

        (§ if (some? amount))
        (§ block
            (.. sb (append QUESTION_MARK_SEPARATOR) (append FIELD_AMOUNT) (append "="))
            (.. sb (append (.. amount (toPlainString))))
            (§ ass (§ name questionMarkHasBeenOutput) true)
        )

        (§ if (§ expr label != nil && (§ not (.. "" (equals label)))))
        (§ block
            (§ if questionMarkHasBeenOutput)
            (§ block
                (.. sb (append AMPERSAND_SEPARATOR))
            )
            (§ else )
            (§ block
                (.. sb (append QUESTION_MARK_SEPARATOR))
                (§ ass (§ name questionMarkHasBeenOutput) true)
            )
            (.. sb (append FIELD_LABEL) (append "=") (append (encodeURLString label)))
        )

        (§ if (§ expr message != nil && (§ not (.. "" (equals message)))))
        (§ block
            (§ if questionMarkHasBeenOutput)
            (§ block
                (.. sb (append AMPERSAND_SEPARATOR))
            )
            (§ else )
            (§ block
                (.. sb (append QUESTION_MARK_SEPARATOR))
            )
            (.. sb (append FIELD_MESSAGE) (append "=") (append (encodeURLString message)))
        )

        (.. sb (toString))
    )

    ;;;
     ; Encode a string using URL encoding.
     ;
     ; @param stringToEncode The string to URL encode.
     ;;
    #_static
    (§ defn #_"String" (§ fn encodeURLString) [#_"String" (§ name stringToEncode)])
    (§ block
        (§ try )
        (§ block
            (§ return (.. (URLEncoder/encode stringToEncode, "UTF-8") (replace "+", ENCODED_SPACE_CHARACTER)))
        )
        (§ catch #_"UnsupportedEncodingException" (§ name e))
        (§ block
            (§ throw (§ new #_"RuntimeException" e)) ;; Can't happen.
        )
    )
)

#_(ns org.bitcoinj.uri #_"BitcoinURIParseException")

;;;
 ; <p>Exception to provide the following to {@link BitcoinURI}:</p>
 ; <ul>
 ; <li>Provision of parsing error messages.</li>
 ; </ul>
 ; <p>This base exception acts as a general failure mode not attributable to a specific cause (other than
 ; that reported in the exception message).  Since this is in English, it may not be worth reporting directly
 ; to the user other than as part of a "general failure to parse" response.</p>
 ;;
#_public
(§ class #_"BitcoinURIParseException" (§ extends #_"Exception")
    #_public
    (§ constructor #_"BitcoinURIParseException" [#_"String" (§ name s)])
    (§ block
        (§ super s)
        this
    )

    #_public
    (§ constructor #_"BitcoinURIParseException" [#_"String" (§ name s), #_"Throwable" (§ name throwable)])
    (§ block
        (§ super s, throwable)
        this
    )
)

#_(ns org.bitcoinj.uri #_"OptionalFieldValidationException")

;;;
 ; <p>Exception to provide the following to {@link org.bitcoinj.uri.BitcoinURI}:</p>
 ; <ul>
 ; <li>Provision of parsing error messages.</li>
 ; </ul>
 ; <p>This exception occurs when an optional field is detected (under the Bitcoin URI scheme) and fails
 ; to pass the associated test (such as {@code amount} not being a valid number).</p>
 ;
 ; @since 0.3.0
 ;
 ;;
#_public
(§ class #_"OptionalFieldValidationException" (§ extends #_"BitcoinURIParseException")
    #_public
    (§ constructor #_"OptionalFieldValidationException" [#_"String" (§ name s)])
    (§ block
        (§ super s)
        this
    )

    #_public
    (§ constructor #_"OptionalFieldValidationException" [#_"String" (§ name s), #_"Throwable" (§ name throwable)])
    (§ block
        (§ super s, throwable)
        this
    )
)

#_(ns org.bitcoinj.uri #_"RequiredFieldValidationException")

;;;
 ; <p>Exception to provide the following to {@link BitcoinURI}:</p>
 ; <ul>
 ; <li>Provision of parsing error messages.</li>
 ; </ul>
 ; <p>This exception occurs when a required field is detected (under the BIP21 rules) and fails
 ; to pass the associated test (such as {@code req-expires} being out of date), or the required field is unknown
 ; to this version of the client in which case it should fail for security reasons.</p>
 ;
 ; @since 0.3.0
 ;
 ;;
#_public
(§ class #_"RequiredFieldValidationException" (§ extends #_"BitcoinURIParseException")
    #_public
    (§ constructor #_"RequiredFieldValidationException" [#_"String" (§ name s)])
    (§ block
        (§ super s)
        this
    )

    #_public
    (§ constructor #_"RequiredFieldValidationException" [#_"String" (§ name s), #_"Throwable" (§ name throwable)])
    (§ block
        (§ super s, throwable)
        this
    )
)

#_(ns org.bitcoinj.utils #_"BtcAutoFormat"
    (:import [java.math BigDecimal]
             #_static [java.math.BigDecimal ONE]
             #_static [java.math.BigDecimal ZERO]
             [java.math BigInteger]
             #_static [java.math.RoundingMode HALF_UP]
             [java.text DecimalFormat DecimalFormatSymbols NumberFormat]
             [java.util Locale])
    (:import [com.google.common.collect ImmutableList])
    (:import #_static [org.bitcoinj.core.Coin SMALLEST_UNIT_EXPONENT]))

;;;
 ; <p>This class, a concrete extension of {@link BtcFormat}, is distinguished by its
 ; accommodation of multiple denominational units as follows:
 ;
 ; <p>When formatting Bitcoin monetary values, an instance of this class automatically adjusts
 ; the denominational units in which it represents a given value so as to minimize the number
 ; of consecutive zeros in the number that is displayed, and includes either a currency code or
 ; symbol in the formatted value to indicate which denomination was chosen.
 ;
 ; <p>When parsing <code>String</code> representations of Bitcoin monetary values, instances of
 ; this class automatically recognize units indicators consisting of currency codes and
 ; symbols, including including those containing currency or metric prefixes such as
 ; <code>"¢"</code> or <code>"c"</code> to indicate hundredths, and interpret each number being
 ; parsed in accordance with the recognized denominational units.
 ;
 ; <p>A more detailed explanation, including examples, is in the documentation for the {@link
 ; BtcFormat} class, and further information beyond that is in the documentation for the {@link
 ; java.text.Format} class, from which this class descends.
 ;
 ; @see java.text.Format
 ; @see java.text.NumberFormat
 ; @see java.text.DecimalFormat
 ; @see DecimalFormatSymbols
 ; @see org.bitcoinj.core.Coin
 ;;

#_public
(§ class #_"BtcAutoFormat" (§ extends #_"BtcFormat")
    ;;;
     ; Enum for specifying the style of currency indicators thas are used
     ; when formatting, ether codes or symbols.
     ;;
    #_public
    (§ enum #_"Style"
        ;; Notes:
         ; 1) The odd-looking character in the replacements below, named "currency sign," is used
         ;    in the patterns recognized by Java's number formatter.  A single occurrence of this
         ;    character specifies a currency symbol, while two adjacent occurrences indicate an
         ;    international currency code.
         ; 2) The positive and negative patterns each have three parts: prefix, number, suffix.
         ;    The number characters are limited to digits, zero, decimal-separator, group-separator,
         ;    and scientific-notation specifier: [#0.,E]
         ;    All number characters besides 'E' must be single-quoted in order to appear as
         ;    literals in either the prefix or suffix.
         ; These patterns are explained in the documentation for java.text.DecimalFormat.
         ;;

        ;;; Constant for the formatting style that uses a currency code, e.g. "BTC". ;;
        (§ item CODE
        (§ anon
            #_override
            (§ method #_"void" (§ fn apply) [#_"DecimalFormat" (§ name decimalFormat)])
            (§ block
                ;; To switch to using codes from symbols, we replace each single occurrence of the
                 ; currency-sign character with two such characters in a row.
                 ; We also insert a space character between every occurence of this character and an
                 ; adjacent numerical digit or negative sign (that is, between the currency-sign and
                 ; the signed-number).
                 ;;
                (.. decimalFormat (applyPattern (.. (negify (.. decimalFormat (toPattern))) (replaceAll "¤", "¤¤") (replaceAll "([#0.,E-])¤¤", "$1 ¤¤") (replaceAll "¤¤([0#.,E-])", "¤¤ $1"))))
                nil
            )
        ))

        ;;; Constant for the formatting style that uses a currency symbol, e.g. "฿". ;;
        (§ item SYMBOL
        (§ anon
            #_override
            (§ method #_"void" (§ fn apply) [#_"DecimalFormat" (§ name decimalFormat)])
            (§ block
                ;; To make certain we are using symbols rather than codes, we replace
                 ; each double occurrence of the currency sign character with a single.
                 ;;
                (.. decimalFormat (applyPattern (.. (negify (.. decimalFormat (toPattern))) (replaceAll "¤¤", "¤"))))
                nil
            )
        ))

        ;;; Effect a style corresponding to an enum value on the given number formatter object. ;;
        #_abstract
        (§ method #_"void" (§ fn apply) [#_"DecimalFormat" (§ name decimalFormat)])
    )

    ;;; Constructor. ;;
    #_protected
    (§ constructor #_"BtcAutoFormat" [#_"Locale" (§ name locale), #_"Style" (§ name style), #_"int" (§ name fractionPlaces)])
    (§ block
        (§ super (§ cast #_"DecimalFormat" (NumberFormat/getCurrencyInstance locale)), fractionPlaces, (ImmutableList/of #_"ImmutableList<Integer>"))

        (.. style (apply (.. this numberFormat)))
        this
    )

    ;;;
     ; Calculate the appropriate denomination for the given Bitcoin monetary value.
     ; This method takes a BigInteger representing a quantity of satoshis, and returns the
     ; number of places that value's decimal point is to be moved when formatting said value
     ; in order that the resulting number represents the correct quantity of denominational
     ; units.
     ;
     ; <p>As a side-effect, this sets the units indicators of the underlying NumberFormat object.
     ; Only invoke this from a synchronized method, and be sure to put the DecimalFormatSymbols
     ; back to its proper state, otherwise immutability, equals() and hashCode() fail.
     ;;
    #_override
    #_protected
    (§ method #_"int" (§ fn scale) [#_"BigInteger" (§ name satoshis), #_"int" (§ name fractionPlaces)])
    (§ block
        ;; The algorithm is as follows.  TODO: is there a way to optimize step 4?
         ; 1. Can we use coin denomination w/ no rounding?  If yes, do it.
         ; 2. Else, can we use millicoin denomination w/ no rounding?  If yes, do it.
         ; 3. Else, can we use micro denomination w/ no rounding?  If yes, do it.
         ; 4. Otherwise we must round:
         ;   (a) round to nearest coin + decimals
         ;   (b) round to nearest millicoin + decimals
         ;   (c) round to nearest microcoin + decimals
         ;   Subtract each of (a), (b) and (c) from the true value, and choose the
         ;   denomination that gives smallest absolute difference.  It case of tie,
         ;   use the smaller denomination.
         ;;
        (§ var #_"int" (§ name places))
        (§ var #_"int" (§ name coinOffset) (Math/max (§ expr SMALLEST_UNIT_EXPONENT - fractionPlaces), 0))
        (§ var #_"BigDecimal" (§ name inCoins) (.. (§ new #_"BigDecimal" satoshis) (movePointLeft coinOffset)))
        (§ if (== (.. inCoins (remainder ONE) (compareTo ZERO)) 0))
        (§ block
            (§ ass (§ name places) COIN_SCALE)
        )
        (§ else )
        (§ block
            (§ var #_"BigDecimal" (§ name inMillis) (.. inCoins (movePointRight MILLICOIN_SCALE)))
            (§ if (== (.. inMillis (remainder ONE) (compareTo ZERO)) 0))
            (§ block
                (§ ass (§ name places) MILLICOIN_SCALE)
            )
            (§ else )
            (§ block
                (§ var #_"BigDecimal" (§ name inMicros) (.. inCoins (movePointRight MICROCOIN_SCALE)))
                (§ if (== (.. inMicros (remainder ONE) (compareTo ZERO)) 0))
                (§ block
                    (§ ass (§ name places) MICROCOIN_SCALE)
                )
                (§ else )
                (§ block
                    ;; No way to avoid rounding: so what denomination gives smallest error?
                    (§ var #_"BigDecimal" (§ name a) (.. inCoins (subtract (.. inCoins (setScale 0, HALF_UP))) (movePointRight coinOffset) (abs)))
                    (§ var #_"BigDecimal" (§ name b) (.. inMillis (subtract (.. inMillis (setScale 0, HALF_UP))) (movePointRight (- coinOffset MILLICOIN_SCALE)) (abs)))
                    (§ var #_"BigDecimal" (§ name c) (.. inMicros (subtract (.. inMicros (setScale 0, HALF_UP))) (movePointRight (- coinOffset MICROCOIN_SCALE)) (abs)))
                    (§ if (< (.. a (compareTo b)) 0))
                    (§ block
                        (§ ass (§ name places) (if (< (.. a (compareTo c)) 0) COIN_SCALE MICROCOIN_SCALE))
                    )
                    (§ elseif (< (.. b (compareTo c)) 0))
                    (§ block
                        (§ ass (§ name places) MILLICOIN_SCALE)
                    )
                    (§ else )
                    (§ block
                        (§ ass (§ name places) MICROCOIN_SCALE)
                    )
                )
            )
        )
        (prefixUnitsIndicator numberFormat, places)
        places
    )

    ;;;
     ; Returns the <code>int</code> value indicating coin denomination.  This is what causes
     ; the number in a parsed value that lacks a units indicator to be interpreted as a quantity
     ; of bitcoins.
     ;;
    #_override
    #_protected
    (§ method #_"int" (§ fn scale) [])
    (§ block
        COIN_SCALE
    )

    ;;;
     ; Return the number of decimal places in the fraction part of numbers formatted by this
     ; instance.  This is the maximum number of fraction places that will be displayed;
     ; the actual number used is limited to a precision of satoshis.
     ;;
    #_public
    (§ method #_"int" (§ fn fractionPlaces) [])
    (§ block
        minimumFractionDigits
    )

    ;;;
     ; Return true if the other instance is equivalent to this one.
     ; Formatters for different locales will never be equal, even if they behave identically.
     ;;
    #_override
    #_public
    (§ method #_"boolean" (§ fn equals) [#_"Object" (§ name o)])
    (§ block
        (§ if (§ expr this == o))
        (§ block
            (§ return true)
        )
        (§ if (§ not (§ insta o #_"BtcAutoFormat")))
        (§ block
            (§ return false)
        )
        (.. super (equals o))
    )

    ;;;
     ; Return a brief description of this formatter.  The exact details of the representation
     ; are unspecified and subject to change, but will include some representation of the
     ; pattern and the number of fractional decimal places.
     ;;
    #_override
    #_public
    (§ method #_"String" (§ fn toString) [])
    (§ block
        (§ expr "Auto-format " + (pattern))
    )
)

#_(ns org.bitcoinj.utils #_"BtcFixedFormat"
    (:import [java.math BigInteger]
             [java.text DecimalFormat NumberFormat]
             [java.util Locale List])
    (:import [com.google.common.base Objects Preconditions])
    (:import #_static [org.bitcoinj.core.Coin SMALLEST_UNIT_EXPONENT]))

;;;
 ; This class, a concrete extension of {@link BtcFormat}, is distinguished in that each
 ; instance formats and by-default parses all Bitcoin monetary values in units of a single
 ; denomination that is specified at the time that instance is constructed.
 ;
 ; By default, neither currency codes nor symbols are included in formatted values as
 ; output, nor recognized in parsed values as input.  The can be overridden by applying a
 ; custom pattern using either the {@link BtcFormat.Builder#localizedPattern}
 ; or {@link BtcFormat.Builder#localizedPattern} methods, as described in the documentation
 ; for the {@link BtcFormat.Builder} class.
 ;
 ; A more detailed explanation, including examples, is in the documentation for the
 ; {@link BtcFormat} class, and further information beyond that is in the documentation
 ; for the {@link java.text.Format} class, from which this class descends.
 ;
 ; @see java.text.Format
 ; @see java.text.NumberFormat
 ; @see java.text.DecimalFormat
 ; @see org.bitcoinj.core.Coin
 ;;

#_public
(§ class #_"BtcFixedFormat" (§ extends #_"BtcFormat")
    ;;;
     ; A constant specifying the use of as many optional decimal places in the fraction part
     ; of a formatted number as are useful for expressing precision.  This value can be passed
     ; as the final argument to a factory method or {@link #format(Object, int, int...)}.
     ;;
    #_public
    #_static
    (§ def #_"int[]" (§ name REPEATING_PLACES) (§ coll 1,1,1,1,1,1,1,1,1,1,1,1,1,1 ))

    ;;;
     ; A constant specifying the use of as many optional groups of <strong>two</strong>
     ; decimal places in the fraction part of a formatted number as are useful for expressing
     ; precision.  This value can be passed as the final argument to a factory method or
     ; {@link #format(Object, int, int...)}.
     ;;
    #_public
    #_static
    (§ def #_"int[]" (§ name REPEATING_DOUBLETS) (§ coll 2,2,2,2,2,2,2 ))

    ;;;
     ; A constant specifying the use of as many optional groups of <strong>three</strong>
     ; decimal places in the fraction part of a formatted number as are useful for expressing
     ; precision.  This value can be passed as the final argument to a factory method or
     ; {@link #format(Object, int, int...)}.
     ;;
    #_public
    #_static
    (§ def #_"int[]" (§ name REPEATING_TRIPLETS) (§ coll 3,3,3,3,3 ))

    ;;;
     ; The number of places the decimal point of formatted values is shifted rightward from
     ; thet same value expressed in bitcoins.
     ;;
    #_private
    (§ field- #_"int" (§ name scale))

    ;;; Constructor. ;;
    #_protected
    (§ constructor #_"BtcFixedFormat" [#_"Locale" (§ name locale), #_"int" (§ name scale), #_"int" (§ name minDecimals), #_"List<Integer>" (§ name groups)])
    (§ block
        (§ super (§ cast #_"DecimalFormat" (NumberFormat/getInstance locale)), minDecimals, groups)

        (Preconditions/checkArgument (<= scale SMALLEST_UNIT_EXPONENT), (§ str "decimal cannot be shifted " + (String/valueOf scale) + " places"))

        (§ ass (§ name (.. this scale)) scale)
        this
    )

    ;;;
     ; Return the decimal-place shift for this object's unit-denomination.  For example, if
     ; the denomination is millibitcoins, this method will return the value <code>3</code>.
     ; As a side-effect, prefixes the currency signs of the underlying NumberFormat object.
     ; This method is invoked by the superclass when formatting.  The arguments are ignored
     ; because the denomination is fixed regardless of the value being formatted.
     ;;
    #_override
    #_protected
    (§ method #_"int" (§ fn scale) [#_"BigInteger" (§ name satoshis), #_"int" (§ name fractionPlaces)])
    (§ block
        (prefixUnitsIndicator numberFormat, scale)
        scale
    )

    ;;;
     ; Return the decimal-place shift for this object's fixed unit-denomination.  For example,
     ; if the denomination is millibitcoins, this method will return the value <code>3</code>.
     ;;
    #_override
    #_public
    (§ method #_"int" (§ fn scale) [])
    (§ block
        scale
    )

    ;;;
     ; Return the currency code that identifies the units in which values formatted and
     ; (by-default) parsed by this instance are denominated.  For example, if the formatter's
     ; denomination is millibitcoins, then this method will return <code>"mBTC"</code>,
     ; assuming the default base currency-code is not overridden using a {@link BtcFormat.Builder}.
     ;;
    #_public
    (§ method #_"String" (§ fn code) [])
    (§ block
        (prefixCode (coinCode), scale)
    )

    ;;;
     ; Return the currency symbol that identifies the units in which values formatted by this
     ; instance are denominated.  For example, when invoked on an instance denominated in
     ; millibitcoins, this method by default returns <code>"₥฿"</code>, depending on the
     ; locale.
     ;;
    #_public
    (§ method #_"String" (§ fn symbol) [])
    (§ block
        (prefixSymbol (coinSymbol), scale)
    )

    ;;;
     ; Return the fractional decimal-placing used when formatting.  This method returns an
     ; <code>int</code> array.  The value of the first element is the minimum number of
     ; decimal places to be used in all cases, limited to a precision of satoshis.  The value
     ; of each successive element is the size of an optional place-group that will be applied,
     ; possibly partially, if useful for expressing precision.  The actual size of each group
     ; is limited to, and may be reduced to the limit of, a precision of no smaller than
     ; satoshis.
     ;;
    #_public
    (§ method #_"int[]" (§ fn fractionPlaceGroups) [])
    (§ block
        (§ var #_"Object[]" (§ name boxedArray) (.. decimalGroups (toArray)))
        (§ var #_"int" (§ name len) (+ (.. boxedArray length) 1))
        (§ var #_"int[]" (§ name array) (§ new #_"int[]" (§ count len)))
        (§ ass (§ name (§ ai array 0)) minimumFractionDigits)
        (§ for (§ var #_"int" (§ name i) 1) :for (< i len) :for (§ ass (§ name i) (+ i 1)))
        (§ block
            (§ ass (§ name (§ ai array i)) (§ cast #_"Integer" (§ ai boxedArray (§ expr i - 1))))
        )
        array
    )

    ;;;
     ; Return true if the given object is equivalent to this one.  Formatters for different
     ; locales will never be equal, even if they behave identically.
     ;;
    #_override
    #_public
    (§ method #_"boolean" (§ fn equals) [#_"Object" (§ name o)])
    (§ block
        (§ if (§ expr o == this))
        (§ block
            (§ return true)
        )
        (§ if (§ not (§ insta o #_"BtcFixedFormat")))
        (§ block
            (§ return false)
        )
        (§ var #_"BtcFixedFormat" (§ name other) (§ cast #_"BtcFixedFormat" o))
        (§ expr (.. super (equals other)) && (.. other (scale)) == (scale) && (.. other decimalGroups (equals decimalGroups)))
    )

    ;;; Return a hash code value for this instance.
     ;  @see java.lang.Object#hashCode
     ;;
    #_override
    #_public
    (§ method #_"int" (§ fn hashCode) [])
    (§ block
        (Objects/hashCode (.. super (hashCode)), scale)
    )

    #_private
    #_static
    (§ defn- #_"String" (§ fn prefixLabel) [#_"int" (§ name scale)])
    (§ block
        (§ switch scale)
        (§ block
            (§ case COIN_SCALE)
            (§ block
                (§ return "Coin-")
            )
            (§ case 1)
            (§ block
                (§ return "Decicoin-")
            )
            (§ case 2)
            (§ block
                (§ return "Centicoin-")
            )
            (§ case MILLICOIN_SCALE)
            (§ block
                (§ return "Millicoin-")
            )
            (§ case MICROCOIN_SCALE)
            (§ block
                (§ return "Microcoin-")
            )
            (§ case -1)
            (§ block
                (§ return "Dekacoin-")
            )
            (§ case -2)
            (§ block
                (§ return "Hectocoin-")
            )
            (§ case -3)
            (§ block
                (§ return "Kilocoin-")
            )
            (§ case -6)
            (§ block
                (§ return "Megacoin-")
            )
            (§ default )
            (§ block
                (§ return (§ expr "Fixed (" + scale + ") "))
            )
        )
    )

    ;;;
     ; Returns a brief description of this formatter.  The exact details of the representation
     ; are unspecified and subject to change, but will include some representation of the
     ; formatting/parsing pattern and the fractional decimal place grouping.
     ;;
    #_override
    #_public
    (§ method #_"String" (§ fn toString) [])
    (§ block
        (§ expr (prefixLabel scale) + "format " + (pattern))
    )
)

#_(ns org.bitcoinj.utils #_"BtcFormat"
    (:import [java.math BigDecimal BigInteger]
             #_static [java.math.RoundingMode HALF_UP]
             [java.text AttributedCharacterIterator DecimalFormat DecimalFormatSymbols FieldPosition Format NumberFormat ParseException ParsePosition]
             [java.util Locale List ArrayList]
             [java.util.regex Matcher Pattern])
    (:import [com.google.common.base Objects Preconditions Strings]
             [com.google.common.collect ImmutableList])
   (:require [org.bitcoinj.core Coin]
             [org.bitcoinj.utils.BtcAutoFormat Style]
             #_static [org.bitcoinj.utils.BtcAutoFormat.Style *]))

;;;
 ; <p>Instances of this class format and parse locale-specific numerical representations of Bitcoin monetary values.
 ;
 ; <p>A primary goal of this class is to minimize the danger of human-misreading of monetary values due to mis-counting
 ; the number of zeros (or, more generally, of decimal places) in the number that represents a Bitcoin monetary value.
 ; Some of the features offered for doing this are:
 ; <ol>
 ;   <li>automatic adjustment of denominational units in which a value is represented so as to lessen the number of adjacent zeros,
 ;   <li>use of locale-specific decimal-separators to group digits in the integer portion of formatted numbers,
 ;   <li>fine control over the number and  grouping of fractional decimal places, and
 ;   <li>access to character information that allows for vertical alignment of tabular columns of formatted values.
 ; </ol>
 ;
 ; <h3>Basic Usage</h3>
 ;
 ; Basic usage is very simple:
 ; <ol>
 ;   <li>Construct a new formatter object using one of the factory methods.
 ;   <li>Format a value by passing it as an argument to the {@link BtcFormat#format(Object)} method.
 ;   <li>Parse a value by passing a <code>String</code>-type representation of it to the {@link BtcFormat#parse(String)} method.
 ; </ol>
 ;
 ; <p>For example, depending on your locale, values might be formatted and parsed as follows:
 ;
 ; <blockquote><pre>
 ; BtcFormat f = BtcFormat.getInstance();
 ; String c = f.format(Coin.COIN);                <strong>// "BTC 1.00"</strong>
 ; String k = f.format(Coin.COIN.multiply(1000)); <strong>// "BTC 1,000.00"</strong>
 ; String m = f.format(Coin.COIN.divide(1000));   <strong>// "mBTC 1.00"</strong>
 ; Coin all = f.parseObject("M฿ 21");             <strong>// All the money in the world</strong>
 ; </pre></blockquote>
 ;
 ; <h3>Auto-Denomination versus Fixed-Denomination</h3>
 ;
 ; There are two provided concrete classes, one that automatically denominates values to be formatted, {@link BtcAutoFormat},
 ; and another that formats any value in units of a fixed, specified denomination, {@link BtcFixedFormat}.
 ;
 ; <h5>Automatic Denomination</h5>
 ;
 ; Automatic denomination means that the formatter adjusts the denominational units in which a formatted number is
 ; expressed based on the monetary value that number represents.  An auto-denominating formatter is defined by its
 ; style, specified by one of the enumerated values of {@link BtcAutoFormat.Style}.  There are two styles constants:
 ; {@link BtcAutoFormat.Style#CODE} (the default), and {@link BtcAutoFormat.Style#SYMBOL}.  The difference is that
 ; the <code>CODE</code> style uses an internationally-distinct currency code, such as <code>"BTC"</code>, to indicate
 ; the units of denomination, while the <code>SYMBOL</code> style uses a possibly-ambiguous currency symbol such as
 ; <code>"฿"</code>.
 ;
 ; <p>The denomination used when formatting will be either bitcoin, millicoin or microcoin, depending on the value
 ; being represented, chosen so as to minimize the number of consecutive zeros displayed without losing precision.
 ; For example, depending on the locale, a value of one bitcoin might be formatted as <pre>฿1.00</pre> where a value
 ; exceeding that by one satoshi would be <pre>µ฿1,000,000.01</pre>.
 ;
 ; <h5>Fixed Denomination</h5>
 ;
 ; Fixed denomination means that the same denomination of units is used for every value that is formatted or parsed
 ; by a given formatter instance.  A fixed-denomination formatter is defined by its scale, which is the number of
 ; places one must shift the decimal point in increasing precision to convert the representation of a given quantity
 ; of bitcoins into a representation of the same value denominated in the formatter's units.  For example, a scale
 ; value of <code>3</code> specifies a denomination of millibitcoins, because to represent <code>1.0000 BTC</code>,
 ; or one bitcoin, in millibitcoins, one shifts the decimal point three places, that is, to <code>1000.0 mBTC</code>.
 ;
 ; <h3>Construction</h3>
 ;
 ; There are two ways to obtain an instance of this class:
 ; <ol>
 ;   <li>Use one of the factory methods; or
 ;   <li>Use a {@link BtcFormat.Builder} object.
 ; </ol>
 ;
 ; <p>The factory methods are appropriate for basic use where the default configuration is either used or modified.
 ; The <code>Builder</code> class provides more control over the configuration, and gives access to some features
 ; not available through the factory methods, such as using custom formatting patterns and currency symbols.
 ;
 ; <h5>Factory Methods</h5>
 ;
 ; Although formatting and parsing is performed by one of the concrete subclasses, you can obtain formatters using
 ; the various static factory methods of this abstract base class <code>BtcFormat</code>.  There are a variety of
 ; overloaded methods that allow you to obtain a formatter that behaves according to your needs.
 ;
 ; <p>The primary distinction is between automatic- and fixed-denomination formatters.  By default, the
 ; <code>getInstance()</code> method with no arguments returns a new, automatic-denominating <code>BtcAutoFormat</code>
 ; instance for your default locale that will display exactly two fractional decimal places and a currency code.
 ; For example, if you happen to be in the USA:
 ;
 ; <blockquote><pre>
 ; BtcFormat f = BtcFormat.getInstance();
 ; String s = f.format(Coin.COIN); <strong>// "BTC 1.00"</strong>
 ; </pre></blockquote>
 ;
 ; <p>The first argument to <code>getInstance()</code> can determine whether you get an auto- or fixed-denominating
 ; formatter.  If the type of the first argument is an <code>int</code>, then the value of that <code>int</code>
 ; will be interpreted as the decimal-place scale of the {@link BtcFixedFormat} instance that is returned, and thus
 ; will determine its denomination.  For example, if you want to format values in units of microbitcoins:
 ;
 ; <blockquote><pre>
 ; BtcFormat m = BtcFormat.getInstance(6);
 ; String s = m.format(Coin.COIN); <strong>// "1,000,000.00"</strong>
 ; </pre></blockquote>
 ;
 ; <p>This class provides several constants bound to common scale values:
 ;
 ; <blockquote><pre>
 ; BtcFormat milliFormat = BtcFormat.getInstance(MILLICOIN_SCALE);
 ; </pre></blockquote>
 ;
 ; <p>Alternatively, if the type of the first argument to <code>getInstance()</code> is one of the enumerated values
 ; of the {@link BtcAutoFormat.Style} type, either <code>CODE</code> or <code>SYMBOL</code>, then you will get a
 ; {@link BtcAutoFormat} instance that uses either a currency code or symbol, respectively, to indicate the results
 ; of its auto-denomination.
 ;
 ; <blockquote><pre>
 ; BtcFormat s = BtcFormat.getInstance(SYMBOL);
 ; Coin value = Coin.parseCoin("0.1234");
 ; String mil = s.format(value);              <strong>// "₥฿123.40"</strong>
 ; String mic = s.format(value.divide(1000)); <strong>// "µ฿123.40"</strong>
 ; </pre></blockquote>
 ;
 ; <p>An alternative way to specify whether you want an auto- or fixed-denomination formatter is to use one
 ; of the factory methods that is named to indicate that characteristics of the new instance returned.  For
 ; fixed-denomination formatters, these methods are {@link #getCoinInstance()}, {@link #getMilliInstance()},
 ; and {@link #getMicroInstance()}.  These three methods are equivalent to invoking <code>getInstance()</code>
 ; with a first argument of <code>0</code>, <code>3</code> and <code>6</code>, respectively.  For auto-denominating
 ; formatters the relevant factory methods are {@link #getCodeInstance()} and {@link #getSymbolInstance()},
 ; which are equivalent to <code>getInstance(Style.CODE)</code>, and <code>getInstance(Style.SYMBOL)</code>.
 ;
 ; <p>Regardless of how you specify whether your new formatter is to be of automatic- or fixed-denomination, the
 ; next (and possibly first) parameter to each of the factory methods is an optional <code>Locale</code> value.
 ;
 ; For example, here we construct four instances for the same locale that each format
 ; differently the same one-bitcoin value:
 ;
 ; <blockquote><pre>
 ; <strong>// Next line returns "1,00 BTC"</strong>
 ; BtcFormat.getInstance(Locale.GERMANY).format(Coin.COIN);
 ; <strong>// Next line returns "1,00 ฿"</strong>
 ; BtcFormat.getInstance(SYMBOL, Locale.GERMANY).format(Coin.COIN);
 ; <strong>// Next line returns "1.000,00"</strong>
 ; BtcFormat.getMilliInstance(Locale.GERMANY).format(Coin.COIN);
 ; <strong>// Next line returns "10.000,00"</strong>
 ; BtcFormat.getInstance(4, Locale.GERMANY).format(Coin.COIN);
 ; </pre></blockquote>
 ;
 ; Omitting such a <code>Locale</code> parameter will give you a formatter for your default locale.
 ;
 ; <p>The final (and possibly only) arguments to the factory methods serve to set the default number of
 ; fractional decimal places that will be displayed when formatting monetary values.  In the case of an
 ; auto-denominating formatter, this can be a single <code>int</code> value, which will determine the number
 ; of fractional decimal places to be used in all cases, except where either (1) doing so would provide
 ; a place for fractional satoshis, or (2) that default value is overridden when invoking
 ; the <code>format()</code> method as described below.
 ;
 ; <p>In the case of a fixed-denomination formatter, you can pass any number of <code>int</code> values.
 ; The first will determine the minimum number of fractional decimal places, and each following <code>int</code>
 ; value specifies the size of an optional group of decimal-places to be displayed only if useful for expressing
 ; precision.  As with auto-denominating formatters, numbers will never be formatted with a decimal place that
 ; represents a fractional quantity of satoshis, and these defaults can be overridden by arguments to the
 ; <code>format()</code> method.  See below for examples.
 ;
 ; <h5>The <code>Builder</code> Class</h5>
 ;
 ; A new {@link BtcFormat.Builder} instance is returned by the {@link #builder()} method.  Such an object has
 ; methods that set the configuration parameters of a <code>BtcFormat</code> object.  Its {@link Builder#build()}
 ; method constructs and returns a <code>BtcFormat</code> instance configured according to those settings.
 ;
 ; <p>In addition to setter-methods that correspond to the factory-method parameters explained above,
 ; a <code>Builder</code> also allows you to specify custom formatting and parsing patterns and currency symbols
 ; and codes.  For example, rather than using the default currency symbol, which has the same unicode character
 ; point as the national currency symbol of Thailand, some people prefer to use a capital letter "B" with
 ; a vertical overstrike.
 ;
 ; <blockquote><pre>
 ; BtcFormat.Builder builder = BtcFormat.builder();
 ; builder.style(SYMBOL);
 ; builder.symbol("B&#x5c;u20e6"); <strong>// unicode char "double vertical stroke overlay"</strong>
 ; BtcFormat f = builder.build();
 ; String out = f.format(COIN); <strong>// "B⃦1.00" depending on locale</strong>
 ; </pre></blockquote>
 ;
 ; The <code>Builder</code> methods are chainable.  So, for example, if you are
 ; deferential to ISO 4217, you might construct a formatter in a single line this way:
 ;
 ; <blockquote><pre>
 ; BtcFormat f = BtcFormat.builder().style(CODE).code("XBT").build();
 ; String out = f.format(COIN); <strong>// "XBT 1.00"</strong>
 ; </pre></blockquote>
 ;
 ; <p>See the documentation of the {@link BtcFormat.Builder} class for details.
 ;
 ; <h3>Formatting</h3>
 ;
 ; <p>You format a Bitcoin monetary value by passing it to the {@link BtcFormat#format(Object)} method.  This argument
 ; can be either a {@link org.bitcoinj.core.Coin}-type object or a numerical object such as {@link java.lang.Long} or
 ; {@link java.math.BigDecimal}.  Integer-based types such as {@link java.math.BigInteger} are interpreted as representing
 ; a number of satoshis, while a {@link java.math.BigDecimal} is interpreted as representing a number of bitcoins.
 ; A value having a fractional amount of satoshis is rounded to the nearest whole satoshi at least, and possibly to
 ; a greater unit depending on the number of fractional decimal-places displayed.  The <code>format()</code> method will
 ; not accept an argument whose type is <code>String</code>, <code>Float</code> nor <code>Double</code>.
 ;
 ; <p>Subsequent to the monetary value to be formatted, the {@link #format(Object)} method also accepts as arguments
 ; optional <code>int</code> values that specify the number of decimal places to use to represent the fractional portion
 ; of the number.  This overrides the default, and enables a single formatter instance to be reused, formatting different
 ; values that require different numbers of fractional decimal places.  These parameters have the same meaning as those
 ; that set the default values in the factory methods as described above.  Namely, a single <code>int</code> value determines
 ; the minimum number of fractional decimal places that will be used in all cases, to a precision limit of satoshis.
 ; Instances of {@link BtcFixedFormat} also accept a variable-length sequence of additional <code>int</code> values, each
 ; of which specifies the size of a group of fractional decimal-places to be used in addition to all preceding places, only
 ; if useful to express precision, and only to a maximum precision of satoshis.  For example:
 ;
 ; <blockquote><pre>
 ; BtcFormat f = BtcFormat.getCoinInstance();
 ; Coin value = COIN.add(Coin.valueOf(5)); <strong>// 100000005 satoshis</strong>
 ; f.format(value, 2);       <strong>// "1.00"</strong>
 ; f.format(value, 3);       <strong>// "1.000"</strong>
 ; f.format(value, 2, 3);    <strong>// "1.00" three more zeros doesn't help</strong>
 ; f.format(value, 2, 3, 3); <strong>// "1.00000005" </strong>
 ; f.format(value, 2, 3, 4); <strong>// "1.00000005" fractions of satoshis have no place</strong>
 ; f.format(value, 2, 3, 2); <strong>// "1.0000001" rounds to nearest usable place</strong>
 ; </pre></blockquote>
 ;
 ; <p>Note that if using all the fractional decimal places in a specified group would give a place to fractions of satoshis,
 ; then the size of that group will be reduced to a maximum precision of satoshis.  Either all or none of the allowed decimal
 ; places of that group will still be applied as doing so is useful for expressing the precision of the value being formatted.
 ;
 ; <p>Several convenient constants of repeating group-size sequences are provided: {@link BtcFixedFormat#REPEATING_PLACES},
 ; {@link BtcFixedFormat#REPEATING_DOUBLETS} and {@link BtcFixedFormat#REPEATING_TRIPLETS}.  These signify repeating groups
 ; of one, two and three decimals places, respectively.  For example, to display only as many fractional places as useful
 ; in order to prevent hanging zeros on the least-significant end of formatted numbers:
 ;
 ; <blockquote><pre>
 ; format(value, 0, REPEATING_PLACES);
 ; </pre></blockquote>
 ;
 ; <p>When using an automatically-denominating formatter, you might want to know what denomination was chosen.  You can get
 ; the currency-units indicator, as well as any other field in the formatted output, by using a {@link java.text.FieldPosition}
 ; instance constructed using an appropriate constant from the {@link java.text.NumberFormat.Field} class:
 ;
 ; <blockquote><pre>
 ; BtcFormat de = BtcFormat.getInstance(Locale.GERMANY);
 ; FieldPosition currField = new FieldPosition(NumberFormat.Field.CURRENCY);
 ; <strong>// next line formats the value as "987.654.321,23 µBTC"</strong>
 ; String output = de.format(valueOf(98765432123L), new StringBuffer(), currField);
 ; <strong>// next line sets variable currencyCode to "µBTC"</strong>
 ; String currencyCode = output.substring(currField.getBeginIndex(), currField.getEndIndex()));
 ; </pre></blockquote>
 ;
 ; <p>When using a fixed-denomination formatter whose scale can be expressed as a standard "metric" prefix,
 ; you can invoke the <code>code()</code> and <code>symbol()</code> methods to obtain a <code>String</code>
 ; whose value is the appropriate currency code or symbol, respectively, for that formatter.
 ;
 ; <blockquote><pre>
 ; BtcFixedFormat kilo = (BtcFixedFormat)BtcFormat(-3); <strong>// scale -3 for kilocoins</strong>
 ; Coin value = Coin.parseCoin("1230");
 ; <strong>// variable coded will be set to "kBTC 1.23"</strong>
 ; String coded = kilo.code() + " " + kilo.format(value);
 ; <strong>// variable symbolic will be set to "k฿1.23"</strong>
 ; String symbolic = kilo.symbol() + kilo.format(value);
 ; BtcFormat(4).code(); <strong>// unnamed denomination has no code; raises exception</strong>
 ; </pre></blockquote>
 ;
 ; <h5>Formatting for Tabular Columns</h5>
 ;
 ; When displaying tables of monetary values, you can lessen the risk of human misreading-error by vertically
 ; aligning the decimal separator of those values.  This example demonstrates one way to do that:
 ;
 ; <blockquote><pre>
 ; <strong>// The elements of this array are the values we will format:</strong>
 ; Coin[] rows = { MAX_MONEY, MAX_MONEY.subtract(SATOSHI), Coin.parseCoin("1234"), COIN,
 ;                 COIN.divide(1000), valueOf(10000), valueOf(1000), valueOf(100), SATOSHI };
 ; BtcFormat f = BtcFormat.getCoinInstance(2, REPEATING_PLACES);
 ; FieldPosition fp = new FieldPosition(DECIMAL_SEPARATOR); <strong>// see java.text.NumberFormat.Field</strong>
 ; String[] output = new String[rows.length];
 ; int[] indexes = new int[rows.length];
 ; int maxIndex = 0;
 ; for (int i = 0; i < rows.length; i++)
 ; {
 ;     output[i] = f.format(rows[i], new StringBuffer(), fp).toString();
 ;     indexes[i] = fp.getBeginIndex();
 ;     if (maxIndex < indexes[i])
 ;         maxIndex = indexes[i];
 ; }
 ; for (int i = 0; i < output.length; i++)
 ; {
 ;     System.out.println(repeat(" ", maxIndex - indexes[i]) + output[i]);
 ; }
 ; </pre></blockquote>
 ;
 ; Assuming you are using a monospaced font, and depending on your locale, the foregoing will print the following:
 ;
 ; <blockquote><pre>
 ; 21,000,000.00
 ; 20,999,999.99999999
 ;      1,234.00
 ;          1.00
 ;          0.001
 ;          0.0001
 ;          0.00001
 ;          0.000001
 ;          0.00000001
 ; </pre></blockquote>
 ;
 ; If you need to vertically-align columns printed in a proportional font, then see the documentation
 ; for the {@link java.text.NumberFormat} class for an explanation of how to do that.
 ;
 ; <h3>Parsing</h3>
 ;
 ; <p>The {@link #parse(String)} method accepts a <code>String</code> argument, and returns a {@link Coin}-type value.
 ; The difference in parsing behavior between instances of {@link BtcFixedFormat} and {@link BtcAutoFormat} is analogous
 ; to the difference in formatting behavior between instances of those classes.  Instances of {@link BtcAutoFormat} recognize
 ; currency codes and symbols in the <code>String</code> being parsed, and interpret them as indicators of the units in which
 ; the number being parsed is denominated.  On the other hand, instances of {@link BtcFixedFormat} by default recognize no
 ; codes nor symbols, but rather interpret every number as being denominated in the units that were specified when constructing
 ; the instance doing the parsing.  This default behavior of {@link BtcFixedFormat} can be overridden by setting a parsing
 ; pattern that includes a currency sign using the {@link BtcFormat.Builder#pattern()} method.
 ;
 ; <p>The {@link BtcAutoFormat#parse(String)}</code> method of {@link BtcAutoFormat} (and of {@link BtcAutoFormat} configured
 ; with applicable non-default pattern) will recognize a variety of currency symbols and codes, including all standard
 ; international (metric) prefixes from micro to mega.  For example, denominational units of microcoins may be specified
 ; by <code>µ฿</code>, <code>u฿</code>, <code>µB⃦</code>, <code>µɃ</code>, <code>µBTC</code> or other appropriate permutations
 ; of those characters.  Additionally, if either or both of a custom currency code or symbol is configured using
 ; {@link BtcFormat.Builder#code} or {@link BtcFormat.Builder#code}, then such code or symbol will be recognized in addition
 ; to those recognized by default.
 ;
 ; <p>Instances of this class that recognize currency signs will recognize both currency symbols and codes, regardless of which
 ; that instance uses for formatting.  However, if the style is <code>CODE</code> (and unless overridden by a custom pattern)
 ; then a space character must separate the units indicator from the number.  When parsing with a <code>SYMBOL</code>-style
 ; <code>BtcFormat</code> instance, on the other hand, whether or not the units indicator must be separated by a space from
 ; the number is determined by the locale.  The {@link BtcFormat#pattern()} method returns a representation of the pattern
 ; that can be examined to determine whether a space must separate currency signs from numbers in parsed <code>String</code>s.
 ;
 ; <p>When parsing, if the currency-units indicator is absent, then a {@link BtcAutoFormat} instance will infer a denomination
 ; of bitcoins while a {@link BtcFixedFormat} will infer the denomination in which it expresses formatted values.  Note: by
 ; default (unless overridden by a custom pattern), if the locale or style requires a space to separate the number from the
 ; units indicator, that space must be present in the String to be parsed, even if the units indicator is absent.
 ;
 ; <p>The <code>parse()</code> method returns an instance of the {@link Coin} class.  Therefore, attempting to parse a value
 ; greater than the maximum that a <code>Coin</code> object can represent will raise a <code>ParseException</code>, as will
 ; any other detected parsing error.
 ;
 ; <h3>Limitations</h3>
 ;
 ; <h5>Parsing</h5>
 ;
 ; Parsing is performed by an underlying {@link java.text.NumberFormat} object.  While this delivers the benefit
 ; of recognizing locale-specific patterns, some have criticized other aspects of its behavior.  For example, see
 ; <a href="http://www.ibm.com/developerworks/library/j-numberformat/">this article by Joe Sam Shirah</a>.  In particular,
 ; explicit positive-signs are not recognized.  If you are parsing input from end-users, then you should consider whether
 ; you would benefit from any of the work-arounds mentioned in that article.
 ;
 ; <h5>Exotic Locales</h5>
 ;
 ; This class is not well-tested in locales that use non-ascii character sets, especially those where writing proceeds
 ; from right-to-left.  Helpful feedback in that regard is appreciated.
 ;
 ; <h3>Thread-Safety</h3>
 ;
 ; <p>Instances of this class are immutable.
 ;
 ; @see java.text.Format
 ; @see java.text.NumberFormat
 ; @see java.text.DecimalFormat
 ; @see java.text.DecimalFormatSymbols
 ; @see java.text.FieldPosition
 ; @see org.bitcoinj.core.Coin
 ;;

#_public
#_abstract
(§ class #_"BtcFormat" (§ extends #_"Format")
    ;; CONCURRENCY NOTES
     ;
     ; There is one mutable member of this class, the `DecimalFormat` object bound to variable `numberFormat`.
     ; The relevant methods invoked on it are: setMinimumFractionDigits(), setMaximumFractionDigits(), and
     ; setDecimalFormatSymbols(), along with the respective getter methods corresponding to each.  The first
     ; two methods are used to set the number of fractional decimal places displayed when formatting, which is
     ; reflected in the patterns returned by the public pattern() and localizedPattern() methods.  The last
     ; method sets the value of that object's member `DecimalFormatSymbols` object for formatting and parsing,
     ; which is also reflected in the aforementioned patterns.  The patterns, which are the passed-through
     ; return values of the DecimalFormat object's toPattern() and toLocalizedPattern() methods, and the value
     ; of the DecimalFormat object's DecimalFormatSymbols member are among the values compared between instances
     ; of this class in determining the return values of the `equals()` and `hashCode()` methods.
     ;
     ; From the foregoing, you can understand that immutability is achieved as follows: access to the variable
     ; `numberFormat` referent's fraction-digits and format-symbols fields are synchronized on that DecimalFormat
     ; object.  The state of those fraction-digits limits and decimal-format symbols must be returned to a static
     ; state after being changed for formatting or parsing since the user can see them reflected in the return
     ; values of above-mentioned methods and because `equals()` and `hashCode()` use them for comparisons.
     ;;

    ;;; The conventional international currency code for bitcoins: "BTC" ;;
    #_private
    #_static
    (§ def- #_"String" (§ name COIN_CODE) "BTC")
    ;;; The default currency symbols for bitcoins. ;;
    #_private
    #_static
    (§ def- #_"String" (§ name COIN_SYMBOL) "฿")
    ;;; An alternative currency symbol to use in locales where the default symbol is used for the national currency. ;;
    #_protected
    #_static
    (§ def #_"String" (§ name COIN_SYMBOL_ALT) "Ƀ")

    #_protected
    (§ field #_"DecimalFormat" (§ name numberFormat)) ;; warning: mutable
    #_protected
    (§ field #_"int" (§ name minimumFractionDigits))
    #_protected
    (§ field #_"List<Integer>" (§ name decimalGroups))

    ;; Scale is the number of decimal-places difference from same value in bitcoins.

    ;;;
     ; A constant useful for specifying a denomination of bitcoins, the <code>int</code> value <code>0</code>.
     ;;
    #_public
    #_static
    (§ def #_"int" (§ name COIN_SCALE) 0)

    ;;;
     ; A constant useful for specifying a denomination of millibitcoins, the <code>int</code> value <code>3</code>.
     ;;
    #_public
    #_static
    (§ def #_"int" (§ name MILLICOIN_SCALE) 3)

    ;;;
     ; A constant useful for specifying a denomination of microbitcoins, the <code>int</code> value <code>6</code>.
     ;;
    #_public
    #_static
    (§ def #_"int" (§ name MICROCOIN_SCALE) 6)

    ;;;
     ; Return the number of decimal places by which any value denominated in the units indicated
     ; by the given scale differs from that same value denominated in satoshis.
     ;;
    #_private
    #_static
    (§ defn- #_"int" (§ fn offSatoshis) [#_"int" (§ name scale)])
    (§ block
        (- Coin/SMALLEST_UNIT_EXPONENT scale)
    )

    #_private
    #_static
    (§ defn- #_"Locale" (§ fn defaultLocale) [])
    (§ block
        (Locale/getDefault)
    )

    ;;;
     ; <p>This class constructs new instances of {@link BtcFormat}, allowing for the configuration of those instances
     ; before they are constructed.  After obtaining a <code>Builder</code> object from the {@link BtcFormat#builder()}
     ; method, invoke the necessary setter methods to obtain your desired configuration.  Finaly, the {@link #build()}
     ; method returns a new <code>BtcFormat</code> object that has the specified configuration.
     ;
     ; <p>All the setter methods override defaults.  Invoking <code>build()</code> without invoking any of the setting
     ; methods is equivalent to invoking {@link BtcFormat#getInstance()} with no arguments.
     ;
     ; <p>Each setter methods returns the same instance on which it is invoked, thus these methods can be chained.
     ;
     ; <p>Instances of this class are <strong>not</strong> thread-safe.
     ;;
    #_public
    #_static
    (§ class #_"Builder"
        #_private
        (§ enum #_"Variant"
            (§ item AUTO
            (§ anon
                #_override
                (§ method #_"BtcFormat" (§ fn newInstance) [#_"Builder" (§ name b)])
                (§ block
                    (getInstance (.. b style), (.. b locale), (.. b minimumFractionDigits))
                )
            ))
            (§ item FIXED)
            (§ item UNSET)

            (§ method #_"BtcFormat" (§ fn newInstance) [#_"Builder" (§ name b)])
            (§ block
                (getInstance (.. b scale), (.. b locale), (.. b minimumFractionDigits), (.. b fractionGroups))
            )
        )
        ;; Parameters are initialized to default or unset values.
        #_private
        (§ field- #_"Variant" (§ name variant) Variant/UNSET)
        #_private
        (§ field- #_"Locale" (§ name locale) (defaultLocale))
        #_private
        (§ field- #_"int" (§ name minimumFractionDigits) 2)
        #_private
        (§ field- #_"int[]" (§ name fractionGroups) (§ new #_"int[]"))
        #_private
        (§ field- #_"Style" (§ name style) BtcAutoFormat/Style/CODE)
        #_private
        (§ field- #_"int" (§ name scale) 0)
        #_private
        (§ field- #_"String" (§ name symbol) "")
        #_private
        (§ field- #_"String" (§ name code) "")
        #_private
        (§ field- #_"String" (§ name pattern) "")
        #_private
        (§ field- #_"String" (§ name localizedPattern) "")

        #_private
        (§ constructor- #_"Builder" [])
        (§ block
            this
        )

        ;;;
         ; Specify the new <code>BtcFormat</code> is to be automatically-denominating.
         ; The argument determines which of either codes or symbols the new <code>BtcFormat</code>
         ; will use by default to indicate the denominations it chooses when formatting values.
         ;
         ; <p>Note that the <code>Style</code> argument specifies the <em>default</em> style, which is
         ; overridden by invoking either {@link #pattern(String)} or {@link #localizedPattern(String)}.
         ;
         ; @throws IllegalArgumentException if {@link #scale(int)} has previously been invoked on this instance.
         ;;
        #_public
        (§ method #_"Builder" (§ fn style) [#_"BtcAutoFormat.Style" (§ name val)])
        (§ block
            (§ if (§ expr variant == Variant/FIXED))
            (§ block
                (§ throw (§ new #_"IllegalStateException" "You cannot invoke both style() and scale()"))
            )

            (§ ass (§ name variant) Variant/AUTO)
            (§ ass (§ name style) val)
            this
        )

        ;;;
         ; Specify the number of decimal places in the fraction part of formatted numbers.
         ; This is equivalent to the {@link #minimumFractionDigits(int)} method, but named
         ; appropriately for the context of generating {@link BtcAutoFormat} instances.
         ;
         ; <p>If neither this method nor <code>minimumFactionDigits()</code> is invoked,
         ; the default value will be <code>2</code>.
         ;;
        #_public
        (§ method #_"Builder" (§ fn fractionDigits) [#_"int" (§ name val)])
        (§ block
            (minimumFractionDigits val)
        )

        ;;;
         ; Specify a fixed-denomination of units to use when formatting and parsing values.
         ; The argument specifies the number of decimal places, in increasing precision, by which
         ; each formatted value will differ from that same value denominated in bitcoins.  For example,
         ; a denomination of millibitcoins is specified with a value of <code>3</code>.
         ;
         ; <p>The <code>BtcFormat</code> class provides appropriately named <code>int</code>-type constants
         ; for the three common values, {@link BtcFormat#COIN_SCALE}, {@link BtcFormat#MILLICOIN_SCALE}
         ; and {@link BtcFormat#MICROCOIN_SCALE}.
         ;
         ; <p>If neither this method nor {@link #style(BtcAutoFormat.Style)} is invoked on a <code>Builder</code>,
         ; then the <code>BtcFormat</code> will default to a fixed-denomination of bitcoins, equivalent
         ; to invoking this method with an argument of <code>0</code>.
         ;;
        #_public
        (§ method #_"Builder" (§ fn scale) [#_"int" (§ name val)])
        (§ block
            (§ if (§ expr variant == Variant/AUTO))
            (§ block
                (§ throw (§ new #_"IllegalStateException" "You cannot invoke both scale() and style()"))
            )

            (§ ass (§ name variant) Variant/FIXED)
            (§ ass (§ name scale) val)
            this
        )

        ;;;
         ; Specify the minimum number of decimal places in the fraction part of formatted values.
         ; This method is equivalent to {@link #fractionDigits(int)}, but named appropriately for
         ; the context of generating a fixed-denomination formatter.
         ;
         ; <p>If neither this method nor <code>fractionDigits()</code> is invoked, the default value
         ; will be <code>2</code>.
         ;;
        #_public
        (§ method #_"Builder" (§ fn minimumFractionDigits) [#_"int" (§ name val)])
        (§ block
            (§ ass (§ name minimumFractionDigits) val)
            this
        )

        ;;;
         ; Specify the sizes of a variable number of optional decimal-place groups in the fraction
         ; part of formatted values.  A group of each specified size will be used in addition to
         ; all previously applied decimal places only if doing so is useful for expressing precision.
         ; The size of each group is limited to a maximum precision of satoshis.
         ;
         ; <p>If this method is not invoked, then the number of fractional decimal places will be limited to
         ; the value passed to {@link #minimumFractionDigits}, or <code>2</code> if that method is not invoked.
         ;;
        #_public
        (§ method #_"Builder" (§ fn fractionGroups) [#_"int..." (§ name val)])
        (§ block
            (§ ass (§ name fractionGroups) val)
            this
        )

        ;;;
         ; Specify the {@link java.util.Locale} for formatting and parsing.
         ; If this method is not invoked, then the runtime default locale will be used.
         ;;
        #_public
        (§ method #_"Builder" (§ fn locale) [#_"Locale" (§ name val)])
        (§ block
            (§ ass (§ name locale) val)
            this
        )

        ;;;
         ; Specify a currency symbol to be used in the denomination-unit indicators of formatted values.
         ; This method only sets the symbol, but does not cause it to be used.  You must also invoke either
         ; <code>style(SYMBOL)</code>, or else apply a custom pattern that includes a single currency-sign
         ; character by invoking either {@link #pattern(String)} or {@link #localizedPattern(String)}.
         ;
         ; <p>Specify only the base symbol.  The appropriate prefix will be applied according to
         ; the denomination of formatted and parsed values.
         ;;
        #_public
        (§ method #_"Builder" (§ fn symbol) [#_"String" (§ name val)])
        (§ block
            (§ ass (§ name symbol) val)
            this
        )

        ;;;
         ; Specify a custom currency code to be used in the denomination-unit indicators of formatted values.
         ; This method only sets the code, but does not cause it to be used.  You must also invoke either
         ; <code>style(CODE)</code>, or else apply a custom pattern that includes a double currency-sign
         ; character by invoking either {@link #pattern(String)} or {@link #localizedPattern(String)}.
         ;
         ; <p>Specify only the base code.  The appropriate prefix will be applied according to
         ; the denomination of formatted and parsed values.
         ;;
        #_public
        (§ method #_"Builder" (§ fn code) [#_"String" (§ name val)])
        (§ block
            (§ ass (§ name code) val)
            this
        )

        ;;;
         ; Use the given pattern when formatting and parsing.  The format of this pattern is identical to
         ; that used by the {@link java.text.DecimalFormat} class.
         ;
         ; <p>If the pattern lacks a negative subpattern, then the formatter will indicate negative values
         ; by placing a minus sign immediately preceding the number part of formatted values.
         ;
         ; <p>Note that while the pattern format specified by the {@link java.text.DecimalFormat} class
         ; includes a mechanism for setting the number of fractional decimal places, that part of the pattern
         ; is ignored.  Instead, use the {@link #fractionDigits(int)}, {@link #minimumFractionDigits(int)}
         ; and {@link #fractionGroups(int...)} methods.
         ;
         ; <p>Warning: if you set a pattern that includes a currency-sign for a fixed-denomination formatter
         ; that uses a non-standard scale, then an exception will be raised when you try to format a value.
         ; The standard scales include all for which a metric prefix exists from micro to mega.
         ;
         ; <p>Note that by applying a pattern you override the configured formatting style of
         ; {@link BtcAutoFormat} instances.
         ;;
        #_public
        (§ method #_"Builder" (§ fn pattern) [#_"String" (§ name val)])
        (§ block
            (§ if (§ expr localizedPattern != ""))
            (§ block
                (§ throw (§ new #_"IllegalStateException" "You cannot invoke both pattern() and localizedPattern()"))
            )

            (§ ass (§ name pattern) val)
            this
        )

        ;;;
         ; Use the given localized-pattern for formatting and parsing.  The format of this pattern is identical
         ; to the patterns used by the {@link java.text.DecimalFormat} class.
         ;
         ; <p>The pattern is localized according to the locale of the <code>BtcFormat</code> instance, the symbols
         ; for which can be examined by inspecting the {@link java.text.DecimalFormatSymbols} object returned by
         ; {@link BtcFormat#symbols()}.  So, for example, if you are in Germany, then the non-localized pattern of
         ; <pre>"#,##0.###"</pre> would be localized as <pre>"#.##0,###"</pre>.
         ;
         ; <p>If the pattern lacks a negative subpattern, then the formatter will indicate negative values by
         ; placing a minus sign immediately preceding the number part of formatted values.
         ;
         ; <p>Note that while the pattern format specified by the {@link java.text.DecimalFormat} class includes
         ; a mechanism for setting the number of fractional decimal places, that part of the pattern is ignored.
         ; Instead, use the {@link #fractionDigits(int)}, {@link #minimumFractionDigits(int)} and
         ; {@link #fractionGroups(int...)} methods.
         ;
         ; <p>Warning: if you set a pattern that includes a currency-sign for a fixed-denomination formatter
         ; that uses a non-standard scale, then an exception will be raised when you try to format a value.
         ; The standard scales include all for which a metric prefix exists from micro to mega.
         ;
         ; <p>Note that by applying a pattern you override the configured formatting style of
         ; {@link BtcAutoFormat} instances.
         ;;
        #_public
        (§ method #_"Builder" (§ fn localizedPattern) [#_"String" (§ name val)])
        (§ block
            (§ if (§ expr pattern != ""))
            (§ block
                (§ throw (§ new #_"IllegalStateException" "You cannot invoke both pattern() and localizedPattern()"))
            )

            (§ ass (§ name localizedPattern) val)
            this
        )

        ;;;
         ; Return a new {@link BtcFormat} instance.  The object returned will be configured according
         ; to the state of this <code>Builder</code> instance at the time this method is invoked.
         ;;
        #_public
        (§ method #_"BtcFormat" (§ fn build) [])
        (§ block
            (§ var #_"BtcFormat" (§ name f) (.. variant (newInstance this)))
            (§ if (§ expr symbol != "" || code != ""))
            (§ block
                (§ sync (.. f numberFormat))
                (§ block
                    (§ var #_"DecimalFormatSymbols" (§ name defaultSigns) (.. f numberFormat (getDecimalFormatSymbols)))
                    (setSymbolAndCode (.. f numberFormat), (if (!= symbol "") symbol (.. defaultSigns (getCurrencySymbol))), (if (!= code "") code (.. defaultSigns (getInternationalCurrencySymbol))))
                )
            )
            (§ if (§ expr localizedPattern != "" || pattern != ""))
            (§ block
                (§ var #_"int" (§ name places) (.. f numberFormat (getMinimumFractionDigits)))
                (§ if (§ expr localizedPattern != ""))
                (§ block
                    (.. f numberFormat (applyLocalizedPattern (negify localizedPattern)))
                )
                (§ else )
                (§ block
                    (.. f numberFormat (applyPattern (negify pattern)))
                )
                (.. f numberFormat (setMinimumFractionDigits places))
                (.. f numberFormat (setMaximumFractionDigits places))
            )
            f
        )
    )

    ;;; Return a new {@link Builder} object.  See the documentation of that class for usage details. ;;
    #_public
    #_static
    (§ defn #_"Builder" (§ fn builder) [])
    (§ block
        (§ new #_"Builder")
    )

    ;;; This single constructor is invoked by the overriding subclass constructors. ;;
    #_protected
    (§ constructor #_"BtcFormat" [#_"DecimalFormat" (§ name numberFormat), #_"int" (§ name minDecimals), #_"List<Integer>" (§ name groups)])
    (§ block
        (Preconditions/checkArgument (§ expr 0 <= minDecimals), "There can be no fewer than zero fractional decimal places")

        (§ ass (§ name (.. this numberFormat)) numberFormat)
        (.. this numberFormat (setParseBigDecimal true))
        (.. this numberFormat (setRoundingMode HALF_UP))
        (§ ass (§ name (.. this minimumFractionDigits)) minDecimals)
        (.. this numberFormat (setMinimumFractionDigits (.. this minimumFractionDigits)))
        (.. this numberFormat (setMaximumFractionDigits (.. this minimumFractionDigits)))
        (§ ass (§ name (.. this decimalGroups)) groups)
        (§ sync (.. this numberFormat))
        (§ block
            (setSymbolAndCode (.. this numberFormat), (if (.. this numberFormat (getDecimalFormatSymbols) (getCurrencySymbol) (contains COIN_SYMBOL)) COIN_SYMBOL_ALT COIN_SYMBOL), COIN_CODE)
        )
        this
    )

    ;;;
     ; Return a new instance of this class using all defaults.  The returned formatter will auto-denominate
     ; values so as to minimize zeros without loss of precision and display a currency code, for example
     ; "<code>BTC</code>", to indicate that denomination.  The returned object will uses the default locale
     ; for formatting the number and placement of the currency-code.  Two fractional decimal places will
     ; be displayed in all formatted numbers.
     ;;
    #_public
    #_static
    (§ defn #_"BtcFormat" (§ fn getInstance) [])
    (§ block
        (getInstance (defaultLocale))
    )

    ;;;
     ; Return a new auto-denominating instance that will indicate units using a currency symbol, for example,
     ; <code>"฿"</code>.  Formatting and parsing will be done according to the default locale.
     ;;
    #_public
    #_static
    (§ defn #_"BtcFormat" (§ fn getSymbolInstance) [])
    (§ block
        (getSymbolInstance (defaultLocale))
    )

    ;;;
     ; Return a new auto-denominating instance that will indicate units using a currency code, for example,
     ; <code>"BTC"</code>.  Formatting and parsing will be done according to the default locale.
     ;;
    #_public
    #_static
    (§ defn #_"BtcFormat" (§ fn getCodeInstance) [])
    (§ block
        (getCodeInstance (defaultLocale))
    )

    ;;;
     ; Return a new symbol-style auto-formatter with the given number of fractional decimal places.
     ; Denominational units will be indicated using a currency symbol, for example, <code>"฿"</code>.
     ; The returned object will format the fraction-part of numbers using the given number of decimal
     ; places, or fewer as necessary to avoid giving a place to fractional satoshis.  Formatting and
     ; parsing will be done according to the default locale.
     ;;
    #_public
    #_static
    (§ defn #_"BtcFormat" (§ fn getSymbolInstance) [#_"int" (§ name fractionPlaces)])
    (§ block
        (getSymbolInstance (defaultLocale), fractionPlaces)
    )

    ;;;
     ; Return a new code-style auto-formatter with the given number of fractional decimal places.
     ; Denominational units will be indicated using a currency code, for example, <code>"BTC"</code>.
     ; The returned object will format the fraction-part of numbers using the given number of decimal
     ; places, or fewer as necessary to avoid giving a place to fractional satoshis.  Formatting and
     ; parsing will be done according to the default locale.
     ;;
    #_public
    #_static
    (§ defn #_"BtcFormat" (§ fn getCodeInstance) [#_"int" (§ name minDecimals)])
    (§ block
        (getCodeInstance (defaultLocale), minDecimals)
    )

    ;;;
     ; Return a new code-style auto-formatter for the given locale.  The returned object will
     ; select denominational units based on each value being formatted, and will indicate those
     ; units using a currency code, for example, <code>"mBTC"</code>.
     ;;
    #_public
    #_static
    (§ defn #_"BtcFormat" (§ fn getInstance) [#_"Locale" (§ name locale)])
    (§ block
        (getCodeInstance locale)
    )

    ;;;
     ; Return a new code-style auto-formatter for the given locale.  The returned object will
     ; select denominational units based on each value being formatted, and will indicate those
     ; units using a currency code, for example, <code>"mBTC"</code>.
     ;;
    #_public
    #_static
    (§ defn #_"BtcFormat" (§ fn getCodeInstance) [#_"Locale" (§ name locale)])
    (§ block
        (getInstance CODE, locale)
    )

    ;;;
     ; Return a new code-style auto-formatter for the given locale with the given number of
     ; fraction places.  The returned object will select denominational units based on each
     ; value being formatted, and will indicate those units using a currency code, for example,
     ; <code>"mBTC"</code>.  The returned object will format the fraction-part of numbers using
     ; the given number of decimal places, or fewer as necessary to avoid giving a place to
     ; fractional satoshis.
     ;;
    #_public
    #_static
    (§ defn #_"BtcFormat" (§ fn getInstance) [#_"Locale" (§ name locale), #_"int" (§ name minDecimals)])
    (§ block
        (getCodeInstance locale, minDecimals)
    )

    ;;;
     ; Return a new code-style auto-formatter for the given locale with the given number of
     ; fraction places.  The returned object will select denominational units based on each
     ; value being formatted, and will indicate those units using a currency code, for example,
     ; <code>"mBTC"</code>.  The returned object will format the fraction-part of numbers using
     ; the given number of decimal places, or fewer as necessary to avoid giving a place to
     ; fractional satoshis.
     ;;
    #_public
    #_static
    (§ defn #_"BtcFormat" (§ fn getCodeInstance) [#_"Locale" (§ name locale), #_"int" (§ name minDecimals)])
    (§ block
        (getInstance CODE, locale, minDecimals)
    )

    ;;;
     ; Return a new symbol-style auto-formatter for the given locale.  The returned object will
     ; select denominational units based on each value being formatted, and will indicate those
     ; units using a currency symbol, for example, <code>"µ฿"</code>.
     ;;
    #_public
    #_static
    (§ defn #_"BtcFormat" (§ fn getSymbolInstance) [#_"Locale" (§ name locale)])
    (§ block
        (getInstance SYMBOL, locale)
    )

    ;;;
     ; Return a new symbol-style auto-formatter for the given locale with the given number of
     ; fraction places.  The returned object will select denominational units based on each
     ; value being formatted, and will indicate those units using a currency symbol, for example,
     ; <code>"µ฿"</code>.  The returned object will format the fraction-part of numbers using
     ; the given number of decimal places, or fewer as necessary to avoid giving a place to
     ; fractional satoshis.
     ;;
    #_public
    #_static
    (§ defn #_"BtcFormat" (§ fn getSymbolInstance) [#_"Locale" (§ name locale), #_"int" (§ name fractionPlaces)])
    (§ block
        (getInstance SYMBOL, locale, fractionPlaces)
    )

    ;;;
     ; Return a new auto-denominating formatter.  The returned object will indicate the
     ; denominational units of formatted values using either a currency symbol, such as,
     ; <code>"฿"</code>, or code, such as <code>"mBTC"</code>, depending on the value of
     ; the argument.  Formatting and parsing will be done according to the default locale.
     ;;
    #_public
    #_static
    (§ defn #_"BtcFormat" (§ fn getInstance) [#_"Style" (§ name style)])
    (§ block
        (getInstance style, (defaultLocale))
    )

    ;;;
     ; Return a new auto-denominating formatter with the given number of fractional decimal
     ; places.  The returned object will indicate the denominational units of formatted values
     ; using either a currency symbol, such as, <code>"฿"</code>, or code, such as
     ; <code>"mBTC"</code>, depending on the value of the first argument.  The returned object
     ; will format the fraction-part of numbers using the given number of decimal places, or
     ; fewer as necessary to avoid giving a place to fractional satoshis.  Formatting and
     ; parsing will be done according to the default locale.
     ;;
    #_public
    #_static
    (§ defn #_"BtcFormat" (§ fn getInstance) [#_"Style" (§ name style), #_"int" (§ name fractionPlaces)])
    (§ block
        (getInstance style, (defaultLocale), fractionPlaces)
    )

    ;;;
     ; Return a new auto-formatter with the given style for the given locale.
     ; The returned object that will auto-denominate each formatted value, and will indicate
     ; that denomination using either a currency code, such as "<code>BTC</code>", or symbol,
     ; such as "<code>฿</code>", depending on the value of the first argument.
     ; <p>The number of fractional decimal places in formatted number will be two, or fewer
     ; as necessary to avoid giving a place to fractional satoshis.
     ;;
    #_public
    #_static
    (§ defn #_"BtcFormat" (§ fn getInstance) [#_"Style" (§ name style), #_"Locale" (§ name locale)])
    (§ block
        (getInstance style, locale, 2)
    )

    ;;;
     ; Return a new auto-formatter for the given locale with the given number of fraction places.
     ; The returned object will automatically-denominate each formatted value, and will indicate
     ; that denomination using either a currency code, such as <code>"mBTC"</code>, or symbol,
     ; such as "<code>฿</code>", according to the given style argument.  It will format each
     ; number according to the given locale.
     ;
     ; <p>The third parameter is the number of fractional decimal places to use for each formatted
     ; number, reduced as neccesary when formatting to avoid giving a place to fractional satoshis.
     ;;
    #_public
    #_static
    (§ defn #_"BtcFormat" (§ fn getInstance) [#_"Style" (§ name style), #_"Locale" (§ name locale), #_"int" (§ name fractionPlaces)])
    (§ block
        (§ new #_"BtcAutoFormat" locale, style, fractionPlaces)
    )

    ;;;
     ; Return a new coin-denominated formatter.  The returned object will format and parse values
     ; according to the default locale, and will format numbers with two fractional decimal places,
     ; rounding values as necessary.
     ;;
    #_public
    #_static
    (§ defn #_"BtcFormat" (§ fn getCoinInstance) [])
    (§ block
        (getCoinInstance (defaultLocale))
    )

    #_private
    #_static
    (§ defn- #_"List<Integer>" (§ fn boxAsList) [#_"int[]" (§ name elements)])
        (§ throws #_"IllegalArgumentException")
    (§ block
        (§ var #_"List<Integer>" (§ name list) (§ new #_"ArrayList<>" (.. elements length)))
        (§ for (§ var #_"int" (§ name e)) :for elements)
        (§ block
            (Preconditions/checkArgument (§ expr 0 < e), "Size of decimal group must be at least one.")
            (.. list (add e))
        )
        list
    )

    ;;;
     ; Return a new coin-denominated formatter with the specified fraction-places.  The returned
     ; object will format and parse values according to the default locale, and will format the
     ; fraction part of numbers with at least two decimal places.  The sizes of additional groups
     ; of decimal places can be specified by a variable number of <code>int</code> arguments.
     ; Each optional decimal-place group will be applied only if useful for expressing precision,
     ; and will be only partially applied if necessary to avoid giving a place to fractional satoshis.
     ;;
    #_public
    #_static
    (§ defn #_"BtcFormat" (§ fn getCoinInstance) [#_"int" (§ name minFractionPlaces), #_"int..." (§ name groups)])
    (§ block
        (getInstance COIN_SCALE, (defaultLocale), minFractionPlaces, (boxAsList groups))
    )

    ;;;
     ; Return a new coin-denominated formatter for the given locale.  The returned object will
     ; format the fractional part of numbers with two decimal places, rounding as necessary.
     ;;
    #_public
    #_static
    (§ defn #_"BtcFormat" (§ fn getCoinInstance) [#_"Locale" (§ name locale)])
    (§ block
        (getInstance COIN_SCALE, locale, 2)
    )

    ;;;
     ; Return a newly-constructed instance for the given locale that will format values in terms of bitcoins,
     ; with the given minimum number of fractional decimal places.  Optionally, repeating integer arguments
     ; can be passed, each indicating the size of an additional group of fractional decimal places to be used
     ; as necessary to avoid rounding, to a limiting precision of satoshis.
     ;;
    #_public
    #_static
    (§ defn #_"BtcFormat" (§ fn getCoinInstance) [#_"Locale" (§ name locale), #_"int" (§ name scale), #_"int..." (§ name groups)])
    (§ block
        (getInstance COIN_SCALE, locale, scale, (boxAsList groups))
    )

    ;;;
     ; Return a new millicoin-denominated formatter.  The returned object will format and parse values for
     ; the default locale, and will format the fractional part of numbers with two decimal places, rounding
     ; as necessary.
     ;;
    #_public
    #_static
    (§ defn #_"BtcFormat" (§ fn getMilliInstance) [])
    (§ block
        (getMilliInstance (defaultLocale))
    )

    ;;;
     ; Return a new millicoin-denominated formatter for the given locale.  The returned object will
     ; format the fractional part of numbers with two decimal places, rounding as necessary.
     ;;
    #_public
    #_static
    (§ defn #_"BtcFormat" (§ fn getMilliInstance) [#_"Locale" (§ name locale)])
    (§ block
        (getInstance MILLICOIN_SCALE, locale, 2)
    )

    ;;;
     ; Return a new millicoin-denominated formatter with the specified fractional decimal placing.
     ; The returned object will format and parse values according to the default locale, and will format the
     ; fractional part of numbers with the given minimum number of fractional decimal places.  Optionally,
     ; repeating integer arguments can be passed, each indicating the size of an additional group of fractional
     ; decimal places to be used as necessary to avoid rounding, to a limiting precision of satoshis.
     ;;
    #_public
    #_static
    (§ defn #_"BtcFormat" (§ fn getMilliInstance) [#_"int" (§ name scale), #_"int..." (§ name groups)])
    (§ block
        (getInstance MILLICOIN_SCALE, (defaultLocale), scale, (boxAsList groups))
    )

    ;;;
     ; Return a new millicoin-denominated formatter for the given locale with the specified fractional
     ; decimal placing.  The returned object will format the fractional part of numbers with the given
     ; minimum number of fractional decimal places.  Optionally, repeating integer arguments can be passed,
     ; each indicating the size of an additional group of fractional decimal places to be used as necessary
     ; to avoid rounding, to a limiting precision of satoshis.
     ;;
    #_public
    #_static
    (§ defn #_"BtcFormat" (§ fn getMilliInstance) [#_"Locale" (§ name locale), #_"int" (§ name scale), #_"int..." (§ name groups)])
    (§ block
        (getInstance MILLICOIN_SCALE, locale, scale, (boxAsList groups))
    )

    ;;;
     ; Return a new microcoin-denominated formatter for the default locale.  The returned object will
     ; format the fractional part of numbers with two decimal places, rounding as necessary.
     ;;
    #_public
    #_static
    (§ defn #_"BtcFormat" (§ fn getMicroInstance) [])
    (§ block
        (getMicroInstance (defaultLocale))
    )

    ;;;
     ; Return a new microcoin-denominated formatter for the given locale.  The returned object will
     ; format the fractional part of numbers with two decimal places, rounding as necessary.
     ;;
    #_public
    #_static
    (§ defn #_"BtcFormat" (§ fn getMicroInstance) [#_"Locale" (§ name locale)])
    (§ block
        (getInstance MICROCOIN_SCALE, locale)
    )

    ;;;
     ; Return a new microcoin-denominated formatter with the specified fractional decimal placing.
     ; The returned object will format and parse values according to the default locale, and will format the
     ; fractional part of numbers with the given minimum number of fractional decimal places.  Optionally,
     ; repeating integer arguments can be passed, each indicating the size of an additional group of fractional
     ; decimal places to be used as necessary to avoid rounding, to a limiting precision of satoshis.
     ;;
    #_public
    #_static
    (§ defn #_"BtcFormat" (§ fn getMicroInstance) [#_"int" (§ name scale), #_"int..." (§ name groups)])
    (§ block
        (getInstance MICROCOIN_SCALE, (defaultLocale), scale, (boxAsList groups))
    )

    ;;;
     ; Return a new microcoin-denominated formatter for the given locale with the specified fractional
     ; decimal placing.  The returned object will format the fractional part of numbers with the given
     ; minimum number of fractional decimal places.  Optionally, repeating integer arguments can be passed,
     ; each indicating the size of an additional group of fractional decimal places to be used as necessary
     ; to avoid rounding, to a limiting precision of satoshis.
     ;;
    #_public
    #_static
    (§ defn #_"BtcFormat" (§ fn getMicroInstance) [#_"Locale" (§ name locale), #_"int" (§ name scale), #_"int..." (§ name groups)])
    (§ block
        (getInstance MICROCOIN_SCALE, locale, scale, (boxAsList groups))
    )

    ;;;
     ; Return a new fixeed-denomination formatter with the specified fractional decimal placing.
     ; The first argument specifies the denomination as the size of the shift from coin-denomination
     ; in increasingly-precise decimal places.  The returned object will format and parse values according
     ; to the default locale, and will format the fractional part of numbers with the given minimum number
     ; of fractional decimal places.  Optionally, repeating integer arguments can be passed, each indicating
     ; the size of an additional group of fractional decimal places to be used as necessary to avoid rounding,
     ; to a limiting precision of satoshis.
     ;;
    #_public
    #_static
    (§ defn #_"BtcFormat" (§ fn getInstance) [#_"int" (§ name scale), #_"int" (§ name minDecimals), #_"int..." (§ name groups)])
    (§ block
        (getInstance scale, (defaultLocale), minDecimals, (boxAsList groups))
    )

    ;;;
     ; Return a new fixeed-denomination formatter.  The argument specifies the denomination as the size of
     ; the shift from coin-denomination in increasingly-precise decimal places.  The returned object will
     ; format and parse values according to the default locale, and will format the fractional part of
     ; numbers with two decimal places, or fewer as necessary to avoid giving a place to fractional satoshis.
     ;;
    #_public
    #_static
    (§ defn #_"BtcFormat" (§ fn getInstance) [#_"int" (§ name scale)])
    (§ block
        (getInstance scale, (defaultLocale))
    )

    ;;;
     ; Return a new fixeed-denomination formatter for the given locale.  The first argument specifies the
     ; denomination as the size of the shift from coin-denomination in increasingly-precise decimal places.
     ; The returned object will format and parse values according to the locale specified by the second
     ; argument, and will format the fractional part of numbers with two decimal places, or fewer as
     ; necessary to avoid giving a place to fractional satoshis.
     ;;
    #_public
    #_static
    (§ defn #_"BtcFormat" (§ fn getInstance) [#_"int" (§ name scale), #_"Locale" (§ name locale)])
    (§ block
        (getInstance scale, locale, 2)
    )

    ;;;
     ; Return a new fixed-denomination formatter for the given locale, with the specified fractional
     ; decimal placing.  The first argument specifies the denomination as the size of the shift from
     ; coin-denomination in increasingly-precise decimal places.  The third parameter is the minimum
     ; number of fractional decimal places to use, followed by optional repeating integer parameters
     ; each specifying the size of an additional group of fractional decimal places to use as
     ; necessary to avoid rounding, down to a maximum precision of satoshis.
     ;;
    #_public
    #_static
    (§ defn #_"BtcFormat" (§ fn getInstance) [#_"int" (§ name scale), #_"Locale" (§ name locale), #_"int" (§ name minDecimals), #_"int..." (§ name groups)])
    (§ block
        (getInstance scale, locale, minDecimals, (boxAsList groups))
    )

    ;;;
     ; Return a new fixed-denomination formatter for the given locale, with the specified fractional
     ; decimal placing.  The first argument specifies the denomination as the size of the shift from
     ; coin-denomination in increasingly-precise decimal places.  The third parameter is the minimum
     ; number of fractional decimal places to use.  The third argument specifies the minimum number of
     ; fractional decimal places in formatted numbers.  The last argument is a <code>List</code> of
     ; <code>Integer</code> values, each of which specifies the size of an additional group of fractional
     ; decimal places to use as necessary to avoid rounding, down to a maximum precision of satoshis.
     ;;
    #_public
    #_static
    (§ defn #_"BtcFormat" (§ fn getInstance) [#_"int" (§ name scale), #_"Locale" (§ name locale), #_"int" (§ name minDecimals), #_"List<Integer>" (§ name groups)])
    (§ block
        (§ new #_"BtcFixedFormat" locale, scale, minDecimals, groups)
    )

    ;;;
     ; Formats a bitcoin monetary value and returns an {@link java.text.AttributedCharacterIterator}.
     ; By iterating, you can examine what fields apply to each character.  This can be useful since a character
     ; may be part of more than one field, for example a grouping separator that is also part of the integer field.
     ;
     ; @see java.text.AttributedCharacterIterator
     ;;
    #_override
    #_public
    (§ method #_"AttributedCharacterIterator" (§ fn formatToCharacterIterator) [#_"Object" (§ name obj)])
    (§ block
        (§ sync numberFormat)
        (§ block
            (§ var #_"DecimalFormatSymbols" (§ name anteSigns) (.. numberFormat (getDecimalFormatSymbols)))
            (§ var #_"BigDecimal" (§ name units) (denominateAndRound (inSatoshis obj), minimumFractionDigits, decimalGroups))
            (§ var #_"List<Integer>" (§ name anteDigits) (setFormatterDigits numberFormat, (.. units (scale)), (.. units (scale))))
            (§ var #_"AttributedCharacterIterator" (§ name i) (.. numberFormat (formatToCharacterIterator units)))
            (.. numberFormat (setDecimalFormatSymbols anteSigns))
            (setFormatterDigits numberFormat, (.. anteDigits (get 0)), (.. anteDigits (get 1)))
            (§ return i)
        )
    )

    ;;;
     ; Formats a bitcoin value as a number and possibly a units indicator and appends the resulting text
     ; to the given string buffer.  The type of monetary value argument can be any one of any of the following
     ; classes: <code>{@link Coin}</code>, <code>Integer</code>, <code>Long</code>, <code>BigInteger</code>,
     ; <code>BigDecimal</code>.  Numeric types that can represent only an integer are interpreted as that
     ; number of satoshis.  The value of a <code>BigDecimal</code> is interpreted as that number of bitcoins,
     ; rounded to the nearest satoshi as necessary.
     ;
     ; @return the <code>StringBuffer</code> passed in as <code>toAppendTo</code>.
     ;;
    #_override
    #_public
    (§ method #_"StringBuffer" (§ fn format) [#_"Object" (§ name qty), #_"StringBuffer" (§ name toAppendTo), #_"FieldPosition" (§ name pos)])
    (§ block
        (format qty, toAppendTo, pos, minimumFractionDigits, decimalGroups)
    )

    ;;;
     ; Formats a bitcoin value as a number and possibly a units indicator to a <code>String</code>.
     ; The type of monetary value argument can be any one of any of the following classes:
     ; <code>{@link Coin}</code>, <code>Integer</code>, <code>Long</code>, <code>BigInteger</code>,
     ; <code>BigDecimal</code>.  Numeric types that can represent only an integer are interpreted
     ; as that number of satoshis.  The value of a <code>BigDecimal</code> is interpreted as that
     ; number of bitcoins, rounded to the nearest satoshi as necessary.
     ;
     ; @param minDecimals The minimum number of decimal places in the fractional part of the formatted number.
     ; @param fractionGroups The sizes of optional additional fractional decimal-place groups.
     ; @throws IllegalArgumentException if the number of fraction places is negative.
     ;;
    #_public
    (§ method #_"String" (§ fn format) [#_"Object" (§ name qty), #_"int" (§ name minDecimals), #_"int..." (§ name fractionGroups)])
    (§ block
        (.. (format qty, (§ new #_"StringBuffer"), (§ new #_"FieldPosition" 0), minDecimals, (boxAsList fractionGroups)) (toString))
    )

    ;;;
     ; Formats a bitcoin value as a number and possibly a units indicator and appends the resulting
     ; text to the given string buffer.  The type of monetary value argument can be any one of any of
     ; the following classes: <code>{@link Coin}</code>, <code>Integer</code>, <code>Long</code>,
     ; <code>BigInteger</code>, <code>BigDecimal</code>.  Numeric types that can represent only an
     ; integer are interpreted as that number of satoshis.  The value of a <code>BigDecimal</code> is
     ; interpreted as that number of bitcoins, rounded to the nearest satoshi as necessary.
     ;
     ; @param minDecimals The minimum number of decimal places in the fractional part of the formatted number.
     ; @param fractionGroups The sizes of optional additional fractional decimal-place groups.
     ; @throws IllegalArgumentException if the number of fraction places is negative.
     ;;
    #_public
    (§ method #_"StringBuffer" (§ fn format) [#_"Object" (§ name qty), #_"StringBuffer" (§ name toAppendTo), #_"FieldPosition" (§ name pos), #_"int" (§ name minDecimals), #_"int..." (§ name fractionGroups)])
    (§ block
        (format qty, toAppendTo, pos, minDecimals, (boxAsList fractionGroups))
    )

    #_private
    (§ method- #_"StringBuffer" (§ fn format) [#_"Object" (§ name qty), #_"StringBuffer" (§ name toAppendTo), #_"FieldPosition" (§ name pos), #_"int" (§ name minDecimals), #_"List<Integer>" (§ name fractionGroups)])
    (§ block
        (Preconditions/checkArgument (§ expr 0 <= minDecimals), "There can be no fewer than zero fractional decimal places")

        (§ sync numberFormat)
        (§ block
            (§ var #_"DecimalFormatSymbols" (§ name anteSigns) (.. numberFormat (getDecimalFormatSymbols)))
            (§ var #_"BigDecimal" (§ name denominatedUnitCount) (denominateAndRound (inSatoshis qty), minDecimals, fractionGroups))
            (§ var #_"List<Integer>" (§ name antePlaces) (setFormatterDigits numberFormat, (.. denominatedUnitCount (scale)), (.. denominatedUnitCount (scale))))
            (§ var #_"StringBuffer" (§ name s) (.. numberFormat (format denominatedUnitCount, toAppendTo, pos)))
            (.. numberFormat (setDecimalFormatSymbols anteSigns))
            (setFormatterDigits numberFormat, (.. antePlaces (get 0)), (.. antePlaces (get 1)))
            (§ return s)
        )
    )

    ;;;
     ; Return the denomination for formatting the given value.  The returned <code>int</code> is the size
     ; of the decimal-place shift between the given Bitcoin-value denominated in bitcoins and that same value
     ; as formatted.  A fixed-denomination formatter will ignore the arguments.
     ;
     ; @param satoshis The number of satoshis having the value for which the shift is calculated.
     ; @param fractionPlaces The number of decimal places available for displaying the fractional part of the denominated value.
     ; @return the size of the shift in increasingly-precise decimal places.
     ;;
    #_protected
    #_abstract
    (§ method #_"int" (§ fn scale) [#_"BigInteger" (§ name satoshis), #_"int" (§ name fractionPlaces)])

    ;;;
     ; Return the denomination of this object.  Fixed-denomination formatters will override with their configured
     ; denomination, auto-formatters with coin denomination.  This determines the interpretation of parsed numbers
     ; lacking a units-indicator.
     ;;
    #_protected
    #_abstract
    (§ method #_"int" (§ fn scale) [])

    ;;;
     ; Takes a bitcoin monetary value that the client wants to format and returns the number of denominational units
     ; having the equal value, rounded to the appropriate number of decimal places.  Calls the scale() method of the
     ; subclass, which may have the side-effect of changing the currency symbol and code of the underlying `NumberFormat`
     ; object, therefore only invoke this from a synchronized method that resets the NumberFormat.
     ;;
    #_private
    (§ method- #_"BigDecimal" (§ fn denominateAndRound) [#_"BigInteger" (§ name satoshis), #_"int" (§ name minDecimals), #_"List<Integer>" (§ name fractionGroups)])
    (§ block
        (§ var #_"int" (§ name scale) (scale satoshis, minDecimals))
        (§ var #_"BigDecimal" (§ name denominatedUnitCount) (.. (§ new #_"BigDecimal" satoshis) (movePointLeft (offSatoshis scale))))
        (§ var #_"int" (§ name places) (calculateFractionPlaces denominatedUnitCount, scale, minDecimals, fractionGroups))
        (.. denominatedUnitCount (setScale places, HALF_UP))
    )

    ;;;
     ; Sets the number of fractional decimal places to be displayed on the given NumberFormat object to the value
     ; of the given integer.
     ; @return the minimum and maximum fractional places settings that the formatter had before this change,
     ; as an ImmutableList.
     ;;
    #_private
    #_static
    (§ defn- #_"ImmutableList<Integer>" (§ fn setFormatterDigits) [#_"DecimalFormat" (§ name formatter), #_"int" (§ name min), #_"int" (§ name max)])
    (§ block
        (§ var #_"ImmutableList<Integer>" (§ name ante) (ImmutableList/of (.. formatter (getMinimumFractionDigits)), (.. formatter (getMaximumFractionDigits))))
        (.. formatter (setMinimumFractionDigits min))
        (.. formatter (setMaximumFractionDigits max))
        ante
    )

    ;;;
     ; Return the number of fractional decimal places to be displayed when formatting the given number of monetory
     ; units of the denomination indicated by the given decimal scale value, where 0 = coin, 3 = millicoin, and so on.
     ;
     ; @param unitCount      The number of monetary units to be formatted.
     ; @param scale          The denomination of those units as the decimal-place shift from coins.
     ; @param minDecimals    The minimum number of fractional decimal places.
     ; @param fractionGroups The sizes of option fractional decimal-place groups.
     ;;
    #_private
    #_static
    (§ defn- #_"int" (§ fn calculateFractionPlaces) [#_"BigDecimal" (§ name unitCount), #_"int" (§ name scale), #_"int" (§ name minDecimals), #_"List<Integer>" (§ name fractionGroups)])
    (§ block
        ;; Taking into account BOTH the user's preference for decimal-place groups, AND the prohibition against displaying
         ; a fractional number of satoshis, determine the maximum possible number of fractional decimal places.
         ;;
        (§ var #_"int" (§ name places) minDecimals)
        (§ for (§ var #_"int" (§ name group)) :for fractionGroups)
        (§ block
            (§ ass (§ name places) (+ places group))
        )
        (§ var #_"int" (§ name max) (Math/min places, (offSatoshis scale)))

        (§ ass (§ name places) (Math/min minDecimals, max))
        (§ for (§ var #_"int" (§ name group)) :for fractionGroups)
        (§ block
            ;; Compare the value formatted using only this many decimal places to the same value using as many places
             ; as possible.  If there's no difference, then there's no reason to continue adding more places.
             ;;
            (§ if (== (.. unitCount (setScale places, HALF_UP) (compareTo (.. unitCount (setScale max, HALF_UP)))) 0))
            (§ block
                (§ break )
            )
            (§ ass (§ name places) (+ places group))
            (§ if (< max places))
            (§ block
                (§ ass (§ name places) max)
            )
        )
        places
    )

    ;;;
     ; Takes an object representing a bitcoin quantity of any type the client is permitted to pass us, and return
     ; a BigInteger representing the number of satoshis having the equivalent value.
     ;;
    #_private
    #_static
    (§ defn- #_"BigInteger" (§ fn inSatoshis) [#_"Object" (§ name qty)])
    (§ block
        ;; The value might be bitcoins or satoshis.
        (§ if (§ expr (§ insta qty #_"Long") || (§ insta qty #_"Integer")))
        (§ block
            (§ return (BigInteger/valueOf (.. (§ cast #_"Number" qty) (longValue))))
        )
        (§ if (§ insta qty #_"BigInteger"))
        (§ block
            (§ return (§ cast #_"BigInteger" qty))
        )
        (§ if (§ insta qty #_"BigDecimal"))
        (§ block
            (§ return (.. (§ cast #_"BigDecimal" qty) (movePointRight Coin/SMALLEST_UNIT_EXPONENT) (setScale 0, BigDecimal/ROUND_HALF_UP) (unscaledValue)))
        )
        (§ if (§ insta qty #_"Coin"))
        (§ block
            (§ return (BigInteger/valueOf (.. (§ cast #_"Coin" qty) value)))
        )

        (§ throw (§ new #_"IllegalArgumentException" (§ expr "Cannot format a " + (.. qty (getClass) (getSimpleName)) + " as a Bicoin value")))
    )

    ;;;
     ; Parse a <code>String</code> representation of a Bitcoin monetary value.
     ; Returns a {@link org.bitcoinj.core.Coin} object that represents the parsed value.
     ; @see java.text.NumberFormat
     ;;
    #_override
    #_public
    (§ method #_"Object" (§ fn parseObject) [#_"String" (§ name source), #_"ParsePosition" (§ name pos)])
    (§ block
        (parse source, pos)
    )

    #_private
    (§ class #_"ScaleMatcher"
        #_public
        (§ field #_"Pattern" (§ name pattern))
        #_public
        (§ field #_"int" (§ name scale))

        (§ constructor #_"ScaleMatcher" [#_"Pattern" (§ name p), #_"int" (§ name s)])
        (§ block
            (§ ass (§ name pattern) p)
            (§ ass (§ name scale) s)
            this
        )
    )

    ;; Lazy initialization.  No reason to create all these objects unless needed for parsing.
    ;; Coin indicator regex String.  TODO: does this need to be volatile?
    #_private
    #_volatile
    (§ field- #_"String" (§ name ci) (§ expr "(" + COIN_SYMBOL + "|" + COIN_SYMBOL_ALT + "|B⃦|" + COIN_CODE + "|XBT)"))
    #_private
    (§ field- #_"Pattern" (§ name coinPattern))
    #_private
    #_volatile
    (§ field- #_"ScaleMatcher[]" (§ name denoms))
    (§ method #_"ScaleMatcher[]" (§ fn denomMatchers) [])
    (§ block
        (§ var #_"ScaleMatcher[]" (§ name result) denoms)
        (§ if (nil? result))
        (§ block
            (§ sync this)
            (§ block
                (§ ass (§ name result) denoms)
                (§ if (nil? result))
                (§ block
                    (§ if (§ not (.. (coinSymbol) (matches ci))))
                    (§ block
                        (§ ass (§ name ci) (.. ci (replaceFirst "\\(", (§ expr "(" + (coinSymbol) + "|"))))
                    )
                    (§ if (§ not (.. (coinCode) (matches ci))))
                    (§ block
                        (§ ass (§ name ci) (.. ci (replaceFirst "\\)", (§ expr "|" + (coinCode) + ")"))))
                    )
                    (§ ass (§ name coinPattern) (Pattern/compile (§ expr ci + "?")))
                    (§ ass (§ name result) (§ ass (§ name denoms) (§ new #_"ScaleMatcher[]"
                    (§ coll
                        (§ new #_"ScaleMatcher" (Pattern/compile (§ expr "¢" + ci + "?|c" + ci)), 2) ;; centi
                        (§ new #_"ScaleMatcher" (Pattern/compile (§ expr "₥" + ci + "?|m" + ci)), MILLICOIN_SCALE)
                        (§ new #_"ScaleMatcher" (§ expr (Pattern/compile (§ expr "([µu]" + ci + ")")),    MICROCOIN_SCALE))
                        (§ new #_"ScaleMatcher" (§ expr (Pattern/compile (§ expr "(da" + ci + ")")),     -1)) ;; deka
                        (§ new #_"ScaleMatcher" (§ expr (Pattern/compile (§ expr "(h" + ci + ")")),      -2)) ;; hekto
                        (§ new #_"ScaleMatcher" (§ expr (Pattern/compile (§ expr "(k" + ci + ")")),      -3)) ;; kilo
                        (§ new #_"ScaleMatcher" (§ expr (Pattern/compile (§ expr "(M" + ci + ")")),      -6)) ;; mega
                    ))))
                )
            )
        )
        result
    )

    ;;;
     ; Set both the currency symbol and international code of the underlying {@link java.text.NumberFormat} object
     ; to the value of the given <code>String</code>.
     ; This method is invoked in the process of parsing, not formatting.
     ;
     ; Only invoke this from code synchronized on the value of the first argument, and don't forget
     ; to put the symbols back otherwise equals(), hashCode() and immutability will break.
     ;;
    #_private
    #_static
    (§ defn- #_"DecimalFormatSymbols" (§ fn setSymbolAndCode) [#_"DecimalFormat" (§ name numberFormat), #_"String" (§ name sign)])
    (§ block
        (setSymbolAndCode numberFormat, sign, sign)
    )

    ;;;
     ; Set the currency symbol and international code of the underlying {@link java.text.NumberFormat} object
     ; to the values of the last two arguments, respectively.
     ; This method is invoked in the process of parsing, not formatting.
     ;
     ; Only invoke this from code synchronized on value of the first argument, and don't forget
     ; to put the symbols back otherwise equals(), hashCode() and immutability will break.
     ;;
    #_private
    #_static
    (§ defn- #_"DecimalFormatSymbols" (§ fn setSymbolAndCode) [#_"DecimalFormat" (§ name numberFormat), #_"String" (§ name symbol), #_"String" (§ name code)])
    (§ block
        (Preconditions/checkState (Thread/holdsLock numberFormat))

        (§ var #_"DecimalFormatSymbols" (§ name fs) (.. numberFormat (getDecimalFormatSymbols)))
        (§ var #_"DecimalFormatSymbols" (§ name ante) (§ cast #_"DecimalFormatSymbols" (.. fs (clone))))
        (.. fs (setInternationalCurrencySymbol code))
        (.. fs (setCurrencySymbol symbol))
        (.. numberFormat (setDecimalFormatSymbols fs))
        ante
    )

    ;;;
     ; Set both the currency symbol and code of the underlying, mutable NumberFormat object according to
     ; the given denominational units scale factor.  This is for formatting, not parsing.
     ;
     ; Set back to zero when you're done formatting otherwise immutability, equals() and hashCode() will break!
     ;
     ; @param scale Number of places the decimal point will be shifted when formatting a quantity of satoshis.
     ; @return the DecimalFormatSymbols before changing.
     ;;
    #_protected
    #_static
    (§ defn #_"void" (§ fn prefixUnitsIndicator) [#_"DecimalFormat" (§ name numberFormat), #_"int" (§ name scale)])
    (§ block
        ;; Make sure caller intends to reset before changing.
        (Preconditions/checkState (Thread/holdsLock numberFormat))

        (§ var #_"DecimalFormatSymbols" (§ name fs) (.. numberFormat (getDecimalFormatSymbols)))
        (setSymbolAndCode numberFormat, (prefixSymbol (.. fs (getCurrencySymbol)), scale), (prefixCode (.. fs (getInternationalCurrencySymbol)), scale))
        nil
    )

    ;;;
     ; Parse a <code>String</code> representation of a Bitcoin monetary value.  If this object's pattern includes
     ; a currency sign, either symbol or code, as by default is true for instances of {@link BtcAutoFormat} and
     ; false for instances of {@link BtcFixedFormat}, then denominated (i.e. prefixed) currency signs in the parsed
     ; String will be recognized, and the parsed number will be interpreted as a quantity of units having that
     ; recognized denomination.
     ;
     ; If the pattern includes a currency sign but no currency sign is detected in the parsed String,
     ; then the number is interpreted as a quatity of bitcoins.
     ;
     ; If the pattern contains neither a currency symbol nor sign, then instances of {@link BtcAutoFormat} will
     ; interpret the parsed number as a quantity of bitcoins, and instances of {@link BtcAutoFormat} will interpret
     ; the number as a quantity of that instance's configured denomination, which can be ascertained by invoking
     ; the {@link BtcFixedFormat#symbol()} or {@link BtcFixedFormat#code()} method.
     ;
     ; Consider using the single-argument version of this overloaded method unless you need to keep track
     ; of the current parse position.
     ;
     ; @return a Coin object representing the parsed value.
     ; @see java.text.ParsePosition
     ;;
    #_public
    (§ method #_"Coin" (§ fn parse) [#_"String" (§ name source), #_"ParsePosition" (§ name pos)])
    (§ block
        (§ var #_"DecimalFormatSymbols" (§ name anteSigns) nil)
        (§ var #_"int" (§ name parseScale) COIN_SCALE) ;; default
        (§ var #_"Coin" (§ name coin) nil)
        (§ sync numberFormat)
        (§ block
            (§ if (.. numberFormat (toPattern) (contains "¤")))
            (§ block
                (§ for (§ var #_"ScaleMatcher" (§ name d)) :for (denomMatchers))
                (§ block
                    (§ var #_"Matcher" (§ name matcher) (.. d pattern (matcher source)))
                    (§ if (.. matcher (find)))
                    (§ block
                        (§ ass (§ name anteSigns) (setSymbolAndCode numberFormat, (.. matcher (group))))
                        (§ ass (§ name parseScale) (.. d scale))
                        (§ break )
                    )
                )
                (§ if (§ expr parseScale == COIN_SCALE))
                (§ block
                    (§ var #_"Matcher" (§ name matcher) (.. coinPattern (matcher source)))
                    (.. matcher (find))
                    (§ ass (§ name anteSigns) (setSymbolAndCode numberFormat, (.. matcher (group))))
                )
            )
            (§ else )
            (§ block
                (§ ass (§ name parseScale) (scale))
            )

            (§ var #_"Number" (§ name number) (.. numberFormat (parse source, pos)))
            (§ if (some? number))
            (§ block
                (§ try )
                (§ block
                    (§ ass (§ name coin) (Coin/valueOf (.. (§ cast #_"BigDecimal" number) (movePointRight (offSatoshis parseScale)) (setScale 0, HALF_UP) (longValue))))
                )
                (§ catch #_"IllegalArgumentException" (§ name _))
                (§ block
                    (.. pos (setIndex 0))
                )
            )
            (§ if (some? anteSigns))
            (§ block
                (.. numberFormat (setDecimalFormatSymbols anteSigns))
            )
        )
        coin
    )

    ;;; Parse a <code>String</code> representation of a Bitcoin monetary value.  If this object's pattern includes
     ; a currency sign, either symbol or code, as by default is true for instances of {@link BtcAutoFormat} and
     ; false for instances of {@link BtcFixedFormat}, then denominated (i.e. prefixed) currency signs in the parsed
     ; String will be recognized, and the parsed number will be interpreted as a quantity of units having that
     ; recognized denomination.
     ;
     ; If the pattern includes a currency sign but no currency sign is detected in the parsed String,
     ; then the number is interpreted as a quatity of bitcoins.
     ;
     ; If the pattern contains neither a currency symbol nor sign, then instances of {@link BtcAutoFormat} will
     ; interpret the parsed number as a quantity of bitcoins, and instances of {@link BtcAutoFormat} will interpret
     ; the number as a quantity of that instance's configured denomination, which can be ascertained by invoking
     ; the {@link BtcFixedFormat#symbol()} or {@link BtcFixedFormat#code()} method.
     ;
     ; @return a Coin object representing the parsed value.
     ;;
    #_public
    (§ method #_"Coin" (§ fn parse) [#_"String" (§ name source)])
        (§ throws #_"ParseException")
    (§ block
        (§ cast #_"Coin" (parseObject source))
    )

    #_protected
    #_static
    (§ defn #_"String" (§ fn prefixCode) [#_"String" (§ name code), #_"int" (§ name scale)])
    (§ block
        (§ switch scale)
        (§ block
            (§ case COIN_SCALE)
            (§ block
                (§ return code)
            )
            (§ case 1)
            (§ block
                (§ return (§ expr "d" + code))
            )
            (§ case 2)
            (§ block
                (§ return (§ expr "c" + code))
            )
            (§ case MILLICOIN_SCALE)
            (§ block
                (§ return (§ expr "m" + code))
            )
            (§ case MICROCOIN_SCALE)
            (§ block
                (§ return (§ expr "µ" + code))
            )
            (§ case -1)
            (§ block
                (§ return (§ expr "da" + code))
            )
            (§ case -2)
            (§ block
                (§ return (§ expr "h" + code))
            )
            (§ case -3)
            (§ block
                (§ return (§ expr "k" + code))
            )
            (§ case -6)
            (§ block
                (§ return (§ expr "M" + code))
            )
            (§ default )
            (§ block
                (§ throw (§ new #_"IllegalStateException" (§ expr "No known prefix for scale " + (String/valueOf scale))))
            )
        )
    )

    #_protected
    #_static
    (§ defn #_"String" (§ fn prefixSymbol) [#_"String" (§ name symbol), #_"int" (§ name scale)])
    (§ block
        (§ switch scale)
        (§ block
            (§ case COIN_SCALE)
            (§ block
                (§ return symbol)
            )
            (§ case 1)
            (§ block
                (§ return (§ expr "d" + symbol))
            )
            (§ case 2)
            (§ block
                (§ return (§ expr "¢" + symbol))
            )
            (§ case MILLICOIN_SCALE)
            (§ block
                (§ return (§ expr "₥" + symbol))
            )
            (§ case MICROCOIN_SCALE)
            (§ block
                (§ return (§ expr "µ" + symbol))
            )
            (§ case -1)
            (§ block
                (§ return (§ expr "da" + symbol))
            )
            (§ case -2)
            (§ block
                (§ return (§ expr "h" + symbol))
            )
            (§ case -3)
            (§ block
                (§ return (§ expr "k" + symbol))
            )
            (§ case -6)
            (§ block
                (§ return (§ expr "M" + symbol))
            )
            (§ default )
            (§ block
                (§ throw (§ new #_"IllegalStateException" (§ expr "No known prefix for scale " + (String/valueOf scale))))
            )
        )
    )

    ;;;
     ; Guarantee a formatting pattern has a subpattern for negative values.  This method takes
     ; a pattern that may be missing a negative subpattern, and returns the same pattern with
     ; a negative subpattern appended as needed.
     ;
     ; This method accommodates an imperfection in the Java formatting code and distributed
     ; locale data.  To wit: the subpattern for negative numbers is optional and not all
     ; locales have one.  In those cases, {@link java.text.DecimalFormat} will indicate numbers
     ; less than zero by adding a negative sign as the first character of the prefix of the
     ; positive subpattern.
     ;
     ; We don't like this, since we claim the negative sign applies to the number not the
     ; units, and therefore it ought to be adjacent to the number, displacing the
     ; currency-units indicator if necessary.
     ;;
    #_protected
    #_static
    (§ defn #_"String" (§ fn negify) [#_"String" (§ name pattern)])
    (§ block
        (§ if (.. pattern (contains ";")))
        (§ block
            (§ return pattern)
        )

        (§ if (.. pattern (contains "-")))
        (§ block
            (§ throw (§ new #_"IllegalStateException" "Positive pattern contains negative sign"))
        )

        ;; The regex matches everything until the first non-quoted number character.
        (§ expr pattern + ";" + (.. pattern (replaceFirst "^([^#0,.']*('[^']*')?)*", "$0-")))
    )

    ;;;
     ; Return an array of all locales for which the getInstance() method of this class can
     ; return localized instances.  See {@link java.text.NumberFormat#getAvailableLocales()}.
     ;;
    #_public
    #_static
    (§ defn #_"Locale[]" (§ fn getAvailableLocales) [])
    (§ block
        (NumberFormat/getAvailableLocales)
    )

    ;;;
     ; Return the unprefixed currency symbol for bitcoins configured for this object.
     ; The return value of this method is constant throughough the life of an instance.
     ;;
    #_public
    (§ method #_"String" (§ fn coinSymbol) [])
    (§ block
        (§ sync numberFormat)
        (§ block
            (§ return (.. numberFormat (getDecimalFormatSymbols) (getCurrencySymbol)))
        )
    )

    ;;;
     ; Return the unprefixed international currency code for bitcoins configured for this object.
     ; The return value of this method is constant throughough the life of an instance.
     ;;
    #_public
    (§ method #_"String" (§ fn coinCode) [])
    (§ block
        (§ sync numberFormat)
        (§ block
            (§ return (.. numberFormat (getDecimalFormatSymbols) (getInternationalCurrencySymbol)))
        )
    )

    ;;;
     ; Return a representation of the pattern used by this instance for formatting and parsing.
     ; The format is similar to, but not the same as the format recognized by the {@link Builder#pattern}
     ; and {@link Builder#localizedPattern} methods.  The pattern returned by this method is localized,
     ; any currency signs expressed are literally, and optional fractional decimal places are shown
     ; grouped in parentheses.
     ;;
    #_public
    (§ method #_"String" (§ fn pattern) [])
    (§ block
        (§ sync numberFormat)
        (§ block
            (§ var #_"StringBuilder" (§ name groups) (§ new #_"StringBuilder"))
            (§ for (§ var #_"int" (§ name group)) :for decimalGroups)
            (§ block
                (.. groups (append "(") (append (Strings/repeat "#", group)) (append ")"))
            )

            (§ var #_"DecimalFormatSymbols" (§ name s) (.. numberFormat (getDecimalFormatSymbols)))
            (§ var #_"String" (§ name digit) (String/valueOf (.. s (getDigit))))
            (§ var #_"String" (§ name exp) (.. s (getExponentSeparator)))
            (§ var #_"String" (§ name groupSep) (String/valueOf (.. s (getGroupingSeparator))))
            (§ var #_"String" (§ name moneySep) (String/valueOf (.. s (getMonetaryDecimalSeparator))))
            (§ var #_"String" (§ name zero) (String/valueOf (.. s (getZeroDigit))))
            (§ var #_"String" (§ name boundary) (String/valueOf (.. s (getPatternSeparator))))
            (§ var #_"String" (§ name minus) (String/valueOf (.. s (getMinusSign))))
            (§ var #_"String" (§ name decSep) (String/valueOf (.. s (getDecimalSeparator))))

            (§ var #_"String" (§ name prefixAndNumber) (§ expr "(^|" + boundary + ")" + "([^" + (Matcher/quoteReplacement (§ expr digit + zero + groupSep + decSep + moneySep)) + "']*('[^']*')?)*" + "[" + (Matcher/quoteReplacement (§ expr digit + zero + groupSep + decSep + moneySep + exp)) + "]+"))

            (§ return (.. numberFormat (toLocalizedPattern) (replaceAll prefixAndNumber, (§ expr "$0" + groups)) (replaceAll "¤¤", (Matcher/quoteReplacement (coinCode))) (replaceAll "¤", (Matcher/quoteReplacement (coinSymbol)))))
        )
    )

    ;;; Return a copy of the localized symbols used by this instance for formatting and parsing. ;;
    #_public
    (§ method #_"DecimalFormatSymbols" (§ fn symbols) [])
    (§ block
        (§ sync numberFormat)
        (§ block
            (§ return (.. numberFormat (getDecimalFormatSymbols)))
        )
    )

    ;;;
     ; Return true if the given object is equivalent to this one.
     ; Formatters for different locales will never be equal, even if they behave identically.
     ;;
    #_override
    #_public
    (§ method #_"boolean" (§ fn equals) [#_"Object" (§ name o)])
    (§ block
        (§ if (§ expr o == this))
        (§ block
            (§ return true)
        )
        (§ if (§ not (§ insta o #_"BtcFormat")))
        (§ block
            (§ return false)
        )
        (§ var #_"BtcFormat" (§ name other) (§ cast #_"BtcFormat" o))
        (§ expr (.. other (pattern) (equals (pattern))) && (.. other (symbols) (equals (symbols))) && (== (.. other minimumFractionDigits) minimumFractionDigits))
    )

    ;;;
     ; Return a hash code value for this instance.
     ; @see java.lang.Object#hashCode
     ;;
    #_override
    #_public
    (§ method #_"int" (§ fn hashCode) [])
    (§ block
        (Objects/hashCode (pattern), (symbols), minimumFractionDigits, decimalGroups)
    )
)

#_(ns org.bitcoinj.utils #_"ContextPropagatingThreadFactory"
    (:import [java.util.concurrent *])
    (:import [com.google.common.base *]
             [org.slf4j *])
   (:require [org.bitcoinj.core *]))

;;;
 ; A {@link java.util.concurrent.ThreadFactory} that propagates a {@link org.bitcoinj.core.Context}
 ; from the creating thread into the new thread.  This factory creates daemon threads.
 ;;
#_public
(§ class #_"ContextPropagatingThreadFactory" (§ implements #_"ThreadFactory")
    #_private
    #_static
    (§ def- #_"Logger" (§ name log) (LoggerFactory/getLogger (§ klass #_"ContextPropagatingThreadFactory")))

    #_private
    (§ field- #_"String" (§ name name))
    #_private
    (§ field- #_"int" (§ name priority))

    #_public
    (§ constructor #_"ContextPropagatingThreadFactory" [#_"String" (§ name name), #_"int" (§ name priority)])
    (§ block
        (§ ass (§ name (.. this name)) name)
        (§ ass (§ name (.. this priority)) priority)
        this
    )

    #_public
    (§ constructor #_"ContextPropagatingThreadFactory" [#_"String" (§ name name)])
    (§ block
        (§ this name, Thread/NORM_PRIORITY)
        this
    )

    #_override
    #_public
    (§ method #_"Thread" (§ fn newThread) [#_"Runnable" (§ name r)])
    (§ block
        (§ var #_"Context" (§ name context) (Context/get))
        (§ var #_"Thread" (§ name thread) (§ new #_"Thread" (§ new #_"Runnable")
        (§ anon
            #_override
            #_public
            (§ method #_"void" (§ fn run) [])
            (§ block
                (§ try )
                (§ block
                    (Context/propagate context)
                    (.. r (run))
                )
                (§ catch #_"Exception" (§ name e))
                (§ block
                    (.. log (error "Exception in thread", e))
                    (Throwables/propagate e)
                )
                nil
            )
        ), name))
        (.. thread (setPriority priority))
        (.. thread (setDaemon true))
        (§ var #_"Thread.UncaughtExceptionHandler" (§ name handler) Threading/uncaughtExceptionHandler)
        (§ if (some? handler))
        (§ block
            (.. thread (setUncaughtExceptionHandler handler))
        )
        thread
    )
)

#_(ns org.bitcoinj.utils #_"DaemonThreadFactory"
    (:import [java.util.concurrent Executors ThreadFactory]))

;;; Thread factory whose threads are marked as daemon and won't prevent process exit. ;;
#_public
(§ class #_"DaemonThreadFactory" (§ implements #_"ThreadFactory")
    #_nilable
    #_private
    (§ field- #_"String" (§ name name))

    #_public
    (§ constructor #_"DaemonThreadFactory" [#_nilable #_"String" (§ name name)])
    (§ block
        (§ ass (§ name (.. this name)) name)
        this
    )

    #_public
    (§ constructor #_"DaemonThreadFactory" [])
    (§ block
        (§ this nil)
        this
    )

    #_override
    #_public
    (§ method #_"Thread" (§ fn newThread) [#_non-nil #_"Runnable" (§ name runnable)])
    (§ block
        (§ var #_"Thread" (§ name thread) (.. (Executors/defaultThreadFactory) (newThread runnable)))
        (.. thread (setDaemon true))
        (§ if (some? name))
        (§ block
            (.. thread (setName name))
        )
        thread
    )
)

#_(ns org.bitcoinj.utils #_"ExchangeRate"
    (:import [java.io Serializable]
             [java.math BigInteger])
    (:import [com.google.common.base Objects Preconditions])
   (:require [org.bitcoinj.core Coin]))

;;;
 ; An exchange rate is expressed as a ratio of a {@link Coin} and a {@link Fiat} amount.
 ;;
#_public
(§ class #_"ExchangeRate" (§ implements #_"Serializable")
    #_public
    (§ field #_"Coin" (§ name coin))
    #_public
    (§ field #_"Fiat" (§ name fiat))

    ;;; Construct exchange rate.  This amount of coin is worth that amount of fiat. ;;
    #_public
    (§ constructor #_"ExchangeRate" [#_"Coin" (§ name coin), #_"Fiat" (§ name fiat)])
    (§ block
        (Preconditions/checkArgument (.. coin (isPositive)))
        (Preconditions/checkArgument (.. fiat (isPositive)))
        (Preconditions/checkArgument (some? (.. fiat currencyCode)), "currency code required")

        (§ ass (§ name (.. this coin)) coin)
        (§ ass (§ name (.. this fiat)) fiat)
        this
    )

    ;;; Construct exchange rate.  One coin is worth this amount of fiat. ;;
    #_public
    (§ constructor #_"ExchangeRate" [#_"Fiat" (§ name fiat)])
    (§ block
        (§ this Coin/COIN, fiat)
        this
    )

    ;;;
     ; Convert a coin amount to a fiat amount using this exchange rate.
     ; @throws ArithmeticException if the converted fiat amount is too high or too low.
     ;;
    #_public
    (§ method #_"Fiat" (§ fn coinToFiat) [#_"Coin" (§ name convertCoin)])
    (§ block
        ;; Use BigInteger because it's much easier to maintain full precision without overflowing.
        (§ var #_"BigInteger" (§ name converted) (.. (BigInteger/valueOf (.. convertCoin value)) (multiply (BigInteger/valueOf (.. fiat value))) (divide (BigInteger/valueOf (.. coin value)))))

        (§ if (§ expr 0 < (.. converted (compareTo (BigInteger/valueOf Long/MAX_VALUE))) || (.. converted (compareTo (BigInteger/valueOf Long/MIN_VALUE))) < 0))
        (§ block
            (§ throw (§ new #_"ArithmeticException" "Overflow"))
        )

        (Fiat/valueOf (.. fiat currencyCode), (.. converted (longValue)))
    )

    ;;;
     ; Convert a fiat amount to a coin amount using this exchange rate.
     ; @throws ArithmeticException if the converted coin amount is too high or too low.
     ;;
    #_public
    (§ method #_"Coin" (§ fn fiatToCoin) [#_"Fiat" (§ name convertFiat)])
    (§ block
        (Preconditions/checkArgument (.. convertFiat currencyCode (equals (.. fiat currencyCode))), "Currency mismatch: %s vs %s", (.. convertFiat currencyCode), (.. fiat currencyCode))

        ;; Use BigInteger because it's much easier to maintain full precision without overflowing.
        (§ var #_"BigInteger" (§ name converted) (.. (BigInteger/valueOf (.. convertFiat value)) (multiply (BigInteger/valueOf (.. coin value))) (divide (BigInteger/valueOf (.. fiat value)))))

        (§ if (§ expr 0 < (.. converted (compareTo (BigInteger/valueOf Long/MAX_VALUE))) || (.. converted (compareTo (BigInteger/valueOf Long/MIN_VALUE))) < 0))
        (§ block
            (§ throw (§ new #_"ArithmeticException" "Overflow"))
        )

        (§ try )
        (§ block
            (§ return (Coin/valueOf (.. converted (longValue))))
        )
        (§ catch #_"IllegalArgumentException" (§ name e))
        (§ block
            (§ throw (§ new #_"ArithmeticException" (§ expr "Overflow: " + (.. e (getMessage)))))
        )
    )

    #_override
    #_public
    (§ method #_"boolean" (§ fn equals) [#_"Object" (§ name o)])
    (§ block
        (§ if (§ expr this == o))
        (§ block
            (§ return true)
        )
        (§ if (§ expr o == nil || (getClass) != (.. o (getClass))))
        (§ block
            (§ return false)
        )
        (§ var #_"ExchangeRate" (§ name other) (§ cast #_"ExchangeRate" o))
        (§ expr (Objects/equal (.. this coin), (.. other coin)) && (Objects/equal (.. this fiat), (.. other fiat)))
    )

    #_override
    #_public
    (§ method #_"int" (§ fn hashCode) [])
    (§ block
        (Objects/hashCode coin, fiat)
    )
)

#_(ns org.bitcoinj.utils #_"ExponentialBackoff"
    (:import [com.google.common.base Preconditions]
             [com.google.common.primitives Longs])
   (:require [org.bitcoinj.core Utils]))

;;;
 ; <p>Tracks successes and failures and calculates a time to retry the operation.</p>
 ;
 ; <p>The retries are exponentially backed off, up to a maximum interval.  On success the back off interval is reset.</p>
 ;;
#_public
(§ class #_"ExponentialBackoff" (§ implements #_"Comparable<ExponentialBackoff>")
    #_public
    #_static
    (§ def #_"int" (§ name DEFAULT_INITIAL_MILLIS) 100)
    #_public
    #_static
    (§ def #_"float" (§ name DEFAULT_MULTIPLIER) 1.1)
    #_public
    #_static
    (§ def #_"int" (§ name DEFAULT_MAXIMUM_MILLIS) (* 30 1000))

    #_private
    (§ field- #_"float" (§ name backoff))
    #_private
    (§ field- #_"long" (§ name retryTime))
    #_private
    (§ field- #_"Params" (§ name params))

    ;;;
     ; Parameters to configure a particular kind of exponential backoff.
     ;;
    #_public
    #_static
    (§ class #_"Params"
        #_private
        (§ field- #_"float" (§ name initial))
        #_private
        (§ field- #_"float" (§ name multiplier))
        #_private
        (§ field- #_"float" (§ name maximum))

        ;;;
         ; @param initialMillis The initial interval to wait, in milliseconds.
         ; @param multiplier The multiplier to apply on each failure.
         ; @param maximumMillis The maximum interval to wait, in milliseconds.
         ;;
        #_public
        (§ constructor #_"Params" [#_"long" (§ name initialMillis), #_"float" (§ name multiplier), #_"long" (§ name maximumMillis)])
        (§ block
            (Preconditions/checkArgument (§ expr 1.0 < multiplier), "multiplier must be greater than 1.0")
            (Preconditions/checkArgument (§ expr initialMillis <= maximumMillis), "maximum must not be less than initial")

            (§ ass (§ name (.. this initial)) initialMillis)
            (§ ass (§ name (.. this multiplier)) multiplier)
            (§ ass (§ name (.. this maximum)) maximumMillis)
            this
        )

        ;;;
         ; Construct params with default values.
         ;;
        #_public
        (§ constructor #_"Params" [])
        (§ block
            (§ ass (§ name initial) DEFAULT_INITIAL_MILLIS)
            (§ ass (§ name multiplier) DEFAULT_MULTIPLIER)
            (§ ass (§ name maximum) DEFAULT_MAXIMUM_MILLIS)
            this
        )
    )

    #_public
    (§ constructor #_"ExponentialBackoff" [#_"Params" (§ name params)])
    (§ block
        (§ ass (§ name (.. this params)) params)
        (trackSuccess)
        this
    )

    ;;; Track a success - reset back off interval to the initial value. ;;
    #_public
    (§ method #_"void" (§ fn trackSuccess) [])
    (§ block
        (§ ass (§ name backoff) (.. params initial))
        (§ ass (§ name retryTime) (Utils/currentTimeMillis))
        nil
    )

    ;;; Track a failure - multiply the back off interval by the multiplier. ;;
    #_public
    (§ method #_"void" (§ fn trackFailure) [])
    (§ block
        (§ ass (§ name retryTime) (+ (Utils/currentTimeMillis) (§ cast #_"long" backoff)))
        (§ ass (§ name backoff) (Math/min (§ expr backoff * (.. params multiplier)), (.. params maximum)))
        nil
    )

    ;;; Get the next time to retry, in milliseconds since the epoch. ;;
    #_public
    (§ method #_"long" (§ fn getRetryTime) [])
    (§ block
        retryTime
    )

    #_override
    #_public
    (§ method #_"int" (§ fn compareTo) [#_"ExponentialBackoff" (§ name other)])
    (§ block
        ;; Note that in this implementation compareTo() is not consistent with equals().
        (Longs/compare retryTime, (.. other retryTime))
    )

    #_override
    #_public
    (§ method #_"String" (§ fn toString) [])
    (§ block
        (§ expr "ExponentialBackoff retry=" + retryTime + " backoff=" + backoff)
    )
)

#_(ns org.bitcoinj.utils #_"Fiat"
    (:import [java.io Serializable]
             [java.math BigDecimal])
    (:import [com.google.common.base Objects Preconditions]
             [com.google.common.math LongMath]
             [com.google.common.primitives Longs])
   (:require [org.bitcoinj.core Monetary]))

;;;
 ; Represents a monetary fiat value.  It was decided to not fold this into {@link org.bitcoinj.core.Coin}
 ; because of type safety.  Fiat values always come with an attached currency code.
 ;
 ; This class is immutable.
 ;;
#_public
(§ class #_"Fiat" (§ implements #_"Monetary", #_"Comparable<Fiat>", #_"Serializable")
    ;;;
     ; The absolute value of exponent of the value of a "smallest unit" in scientific notation.
     ; We picked 4 rather than 2, because in financial applications it's common to use sub-cent precision.
     ;;
    #_public
    #_static
    (§ def #_"int" (§ name SMALLEST_UNIT_EXPONENT) 4)

    ;;;
     ; The number of smallest units of this monetary value.
     ;;
    #_public
    (§ field #_"long" (§ name value))
    #_public
    (§ field #_"String" (§ name currencyCode))

    #_private
    (§ constructor- #_"Fiat" [#_"String" (§ name currencyCode), #_"long" (§ name value)])
    (§ block
        (§ ass (§ name (.. this value)) value)
        (§ ass (§ name (.. this currencyCode)) currencyCode)
        this
    )

    #_public
    #_static
    (§ defn #_"Fiat" (§ fn valueOf) [#_"String" (§ name currencyCode), #_"long" (§ name value)])
    (§ block
        (§ new #_"Fiat" currencyCode, value)
    )

    #_override
    #_public
    (§ method #_"int" (§ fn smallestUnitExponent) [])
    (§ block
        SMALLEST_UNIT_EXPONENT
    )

    ;;;
     ; Returns the number of "smallest units" of this monetary value.
     ;;
    #_override
    #_public
    (§ method #_"long" (§ fn getValue) [])
    (§ block
        value
    )

    #_public
    (§ method #_"String" (§ fn getCurrencyCode) [])
    (§ block
        currencyCode
    )

    ;;;
     ; Parses an amount expressed in the way humans are used to.
     ;
     ; This takes string in a format understood by {@link BigDecimal#BigDecimal(String)},
     ; for example "0", "1", "0.10", "1.23E3", "1234.5E-5".
     ;
     ; @throws IllegalArgumentException if you try to specify more than 4 digits after the comma, or a value out of range.
     ;;
    #_public
    #_static
    (§ defn #_"Fiat" (§ fn parseFiat) [#_"String" (§ name currencyCode), #_"String" (§ name str)])
    (§ block
        (§ try )
        (§ block
            (§ var #_"long" (§ name val) (.. (§ new #_"BigDecimal" str) (movePointRight SMALLEST_UNIT_EXPONENT) (longValueExact)))
            (§ return (Fiat/valueOf currencyCode, val))
        )
        (§ catch #_"ArithmeticException" (§ name e))
        (§ block
            (§ throw (§ new #_"IllegalArgumentException" e))
        )
    )

    ;;;
     ; Parses an amount expressed in the way humans are used to.  The amount is cut to 4 digits after the comma.
     ;
     ; This takes string in a format understood by {@link BigDecimal#BigDecimal(String)},
     ; for example "0", "1", "0.10", "1.23E3", "1234.5E-5".
     ;
     ; @throws IllegalArgumentException if you try to specify a value out of range.
     ;;
    #_public
    #_static
    (§ defn #_"Fiat" (§ fn parseFiatInexact) [#_"String" (§ name currencyCode), #_"String" (§ name str)])
    (§ block
        (§ try )
        (§ block
            (§ var #_"long" (§ name val) (.. (§ new #_"BigDecimal" str) (movePointRight SMALLEST_UNIT_EXPONENT) (longValue)))
            (§ return (Fiat/valueOf currencyCode, val))
        )
        (§ catch #_"ArithmeticException" (§ name e))
        (§ block
            (§ throw (§ new #_"IllegalArgumentException" e))
        )
    )

    #_public
    (§ method #_"Fiat" (§ fn add) [#_"Fiat" (§ name value)])
    (§ block
        (Preconditions/checkArgument (.. value currencyCode (equals currencyCode)))

        (§ new #_"Fiat" currencyCode, (LongMath/checkedAdd (.. this value), (.. value value)))
    )

    #_public
    (§ method #_"Fiat" (§ fn subtract) [#_"Fiat" (§ name value)])
    (§ block
        (Preconditions/checkArgument (.. value currencyCode (equals currencyCode)))

        (§ new #_"Fiat" currencyCode, (LongMath/checkedSubtract (.. this value), (.. value value)))
    )

    #_public
    (§ method #_"Fiat" (§ fn multiply) [#_"long" (§ name factor)])
    (§ block
        (§ new #_"Fiat" currencyCode, (LongMath/checkedMultiply (.. this value), factor))
    )

    #_public
    (§ method #_"Fiat" (§ fn divide) [#_"long" (§ name divisor)])
    (§ block
        (§ new #_"Fiat" currencyCode, (§ expr (.. this value) / divisor))
    )

    #_public
    (§ method #_"Fiat[]" (§ fn divideAndRemainder) [#_"long" (§ name divisor)])
    (§ block
        (§ new #_"Fiat[]" (§ coll (§ new #_"Fiat" currencyCode, (§ expr (.. this value) / divisor)), (§ new #_"Fiat" currencyCode, (§ expr (.. this value) % divisor)) ))
    )

    #_public
    (§ method #_"long" (§ fn divide) [#_"Fiat" (§ name divisor)])
    (§ block
        (Preconditions/checkArgument (.. divisor currencyCode (equals currencyCode)))

        (/ (.. this value) (.. divisor value))
    )

    ;;;
     ; Returns true if and only if this instance represents a monetary value greater than zero, otherwise false.
     ;;
    #_public
    (§ method #_"boolean" (§ fn isPositive) [])
    (§ block
        (== (signum) 1)
    )

    ;;;
     ; Returns true if and only if this instance represents a monetary value less than zero, otherwise false.
     ;;
    #_public
    (§ method #_"boolean" (§ fn isNegative) [])
    (§ block
        (== (signum) -1)
    )

    ;;;
     ; Returns true if and only if this instance represents zero monetary value, otherwise false.
     ;;
    #_public
    (§ method #_"boolean" (§ fn isZero) [])
    (§ block
        (== (signum) 0)
    )

    ;;;
     ; Returns true if the monetary value represented by this instance is greater than that of the given other Fiat,
     ; otherwise false.
     ;;
    #_public
    (§ method #_"boolean" (§ fn isGreaterThan) [#_"Fiat" (§ name other)])
    (§ block
        (> (compareTo other) 0)
    )

    ;;;
     ; Returns true if the monetary value represented by this instance is less than that of the given other Fiat,
     ; otherwise false.
     ;;
    #_public
    (§ method #_"boolean" (§ fn isLessThan) [#_"Fiat" (§ name other)])
    (§ block
        (< (compareTo other) 0)
    )

    #_override
    #_public
    (§ method #_"int" (§ fn signum) [])
    (§ block
        (if (== (.. this value) 0) 0 (if (< (.. this value) 0) -1 1))
    )

    #_public
    (§ method #_"Fiat" (§ fn negate) [])
    (§ block
        (§ new #_"Fiat" currencyCode, (§ neg (.. this value)))
    )

    ;;;
     ; Returns the number of "smallest units" of this monetary value.
     ; It's deprecated in favour of accessing {@link #value} directly.
     ;;
    #_public
    (§ method #_"long" (§ fn longValue) [])
    (§ block
        (.. this value)
    )

    #_private
    #_static
    (§ def- #_"MonetaryFormat" (§ name FRIENDLY_FORMAT) (.. MonetaryFormat/FIAT (postfixCode)))

    ;;;
     ; Returns the value as a 0.12 type string.
     ; More digits after the decimal place will be used if necessary, but two will always be present.
     ;;
    #_public
    (§ method #_"String" (§ fn toFriendlyString) [])
    (§ block
        (.. FRIENDLY_FORMAT (code 0, currencyCode) (format this) (toString))
    )

    #_private
    #_static
    (§ def- #_"MonetaryFormat" (§ name PLAIN_FORMAT) (.. MonetaryFormat/FIAT (minDecimals 0) (repeatOptionalDecimals 1, 4) (noCode)))

    ;;;
     ; Returns the value as a plain string.  The result is unformatted with no trailing zeroes.
     ; For instance, a value of 150000 "smallest units" gives an output string of "0.0015".
     ;;
    #_public
    (§ method #_"String" (§ fn toPlainString) [])
    (§ block
        (.. PLAIN_FORMAT (format this) (toString))
    )

    #_override
    #_public
    (§ method #_"String" (§ fn toString) [])
    (§ block
        (Long/toString value)
    )

    #_override
    #_public
    (§ method #_"boolean" (§ fn equals) [#_"Object" (§ name o)])
    (§ block
        (§ if (§ expr o == this))
        (§ block
            (§ return true)
        )
        (§ if (§ expr o == nil || (.. o (getClass)) != (getClass)))
        (§ block
            (§ return false)
        )
        (§ var #_"Fiat" (§ name other) (§ cast #_"Fiat" o))
        (§ expr (.. this value) == (.. other value) && (.. this currencyCode (equals (.. other currencyCode))))
    )

    #_override
    #_public
    (§ method #_"int" (§ fn hashCode) [])
    (§ block
        (Objects/hashCode value, currencyCode)
    )

    #_override
    #_public
    (§ method #_"int" (§ fn compareTo) [#_"Fiat" (§ name other)])
    (§ block
        (if (.. this currencyCode (equals (.. other currencyCode))) (Longs/compare (.. this value), (.. other value)) (.. this currencyCode (compareTo (.. other currencyCode))))
    )
)

#_(ns org.bitcoinj.utils #_"ListenerRegistration"
    (:import [java.util List]
             [java.util.concurrent Executor])
    (:import [com.google.common.base Preconditions]))

;;;
 ; A simple wrapper around a listener and an executor, with some utility methods.
 ;;
#_public
(§ class #_"ListenerRegistration<T>"
    #_public
    (§ field #_"T" (§ name listener))
    #_public
    (§ field #_"Executor" (§ name executor))

    #_public
    (§ constructor #_"ListenerRegistration" [#_"T" (§ name listener), #_"Executor" (§ name executor)])
    (§ block
        (§ ass (§ name (.. this listener)) (Preconditions/checkNotNull listener))
        (§ ass (§ name (.. this executor)) (Preconditions/checkNotNull executor))
        this
    )

    ;;; Returns true if the listener was removed, else false. ;;
    #_public
    #_static
    (§ defn #_"<T> boolean" (§ fn removeFromList) [#_"T" (§ name listener), #_"List<? extends ListenerRegistration<T>>" (§ name list)])
    (§ block
        (Preconditions/checkNotNull listener)

        (§ var #_"ListenerRegistration<T>" (§ name item) nil)
        (§ for (§ var #_"ListenerRegistration<T>" (§ name registration)) :for list)
        (§ block
            (§ if (== (.. registration listener) listener))
            (§ block
                (§ ass (§ name item) registration)
                (§ break )
            )
        )
        (§ expr item != nil && (.. list (remove item)))
    )
)

#_(ns org.bitcoinj.utils #_"MonetaryFormat"
    (:import [java.math RoundingMode]
             [java.text DecimalFormatSymbols]
             [java.util ArrayList Arrays List Locale])
    (:import [com.google.common.base Preconditions]
             #_static [com.google.common.math.LongMath checkedMultiply]
             #_static [com.google.common.math.LongMath checkedPow]
             #_static [com.google.common.math.LongMath divide])
   (:require [org.bitcoinj.core Coin Monetary]))

;;;
 ; Utility for formatting and parsing coin values to and from human readable form.
 ;
 ; MonetaryFormat instances are immutable.  Invoking a configuration method has no effect on the receiving instance;
 ; you must store and use the new instance it returns, instead.  Instances are thread safe, so they may be stored safely
 ; as static constants.
 ;;
#_public
(§ class #_"MonetaryFormat"
    ;;; Standard format for the BTC denomination. ;;
    #_public
    #_static
    (§ def #_"MonetaryFormat" (§ name BTC) (.. (§ new #_"MonetaryFormat") (shift 0) (minDecimals 2) (repeatOptionalDecimals 2, 3)))
    ;;; Standard format for the mBTC denomination. ;;
    #_public
    #_static
    (§ def #_"MonetaryFormat" (§ name MBTC) (.. (§ new #_"MonetaryFormat") (shift 3) (minDecimals 2) (optionalDecimals 2)))
    ;;; Standard format for the µBTC denomination. ;;
    #_public
    #_static
    (§ def #_"MonetaryFormat" (§ name UBTC) (.. (§ new #_"MonetaryFormat") (shift 6) (minDecimals 0) (optionalDecimals 2)))
    ;;; Standard format for fiat amounts. ;;
    #_public
    #_static
    (§ def #_"MonetaryFormat" (§ name FIAT) (.. (§ new #_"MonetaryFormat") (shift 0) (minDecimals 2) (repeatOptionalDecimals 2, 1)))
    ;;; Currency code for base 1 Bitcoin. ;;
    #_public
    #_static
    (§ def #_"String" (§ name CODE_BTC) "BTC")
    ;;; Currency code for base 1/1000 Bitcoin. ;;
    #_public
    #_static
    (§ def #_"String" (§ name CODE_MBTC) "mBTC")
    ;;; Currency code for base 1/1000000 Bitcoin. ;;
    #_public
    #_static
    (§ def #_"String" (§ name CODE_UBTC) "µBTC")

    #_public
    #_static
    (§ def #_"int" (§ name MAX_DECIMALS) 8)

    #_private
    (§ field- #_"char" (§ name negativeSign))
    #_private
    (§ field- #_"char" (§ name positiveSign))
    #_private
    (§ field- #_"char" (§ name zeroDigit))
    #_private
    (§ field- #_"char" (§ name decimalMark))
    #_private
    (§ field- #_"int" (§ name minDecimals))
    #_private
    (§ field- #_"List<Integer>" (§ name decimalGroups))
    #_private
    (§ field- #_"int" (§ name shift))
    #_private
    (§ field- #_"RoundingMode" (§ name roundingMode))
    #_private
    (§ field- #_"String[]" (§ name codes))
    #_private
    (§ field- #_"char" (§ name codeSeparator))
    #_private
    (§ field- #_"boolean" (§ name codePrefixed))

    #_private
    #_static
    (§ def- #_"String" (§ name DECIMALS_PADDING) "0000000000000000") ;; a few more than necessary for Bitcoin

    ;;;
     ; Set character to prefix negative values.
     ;;
    #_public
    (§ method #_"MonetaryFormat" (§ fn negativeSign) [#_"char" (§ name negativeSign)])
    (§ block
        (Preconditions/checkArgument (§ not (Character/isDigit negativeSign)))
        (Preconditions/checkArgument (< 0 negativeSign))

        (if (== negativeSign (.. this negativeSign)) this (§ new #_"MonetaryFormat" negativeSign, positiveSign, zeroDigit, decimalMark, minDecimals, decimalGroups, shift, roundingMode, codes, codeSeparator, codePrefixed))
    )

    ;;;
     ; Set character to prefix positive values.  A zero value means no sign is used in this case.
     ; For parsing, a missing sign will always be interpreted as if the positive sign was used.
     ;;
    #_public
    (§ method #_"MonetaryFormat" (§ fn positiveSign) [#_"char" (§ name positiveSign)])
    (§ block
        (Preconditions/checkArgument (§ not (Character/isDigit positiveSign)))

        (if (== positiveSign (.. this positiveSign)) this (§ new #_"MonetaryFormat" negativeSign, positiveSign, zeroDigit, decimalMark, minDecimals, decimalGroups, shift, roundingMode, codes, codeSeparator, codePrefixed))
    )

    ;;;
     ; Set character range to use for representing digits.  It starts with the specified character representing zero.
     ;;
    #_public
    (§ method #_"MonetaryFormat" (§ fn digits) [#_"char" (§ name zeroDigit)])
    (§ block
        (if (== zeroDigit (.. this zeroDigit)) this (§ new #_"MonetaryFormat" negativeSign, positiveSign, zeroDigit, decimalMark, minDecimals, decimalGroups, shift, roundingMode, codes, codeSeparator, codePrefixed))
    )

    ;;;
     ; Set character to use as the decimal mark.  If the formatted value does not have any decimals,
     ; no decimal mark is used either.
     ;;
    #_public
    (§ method #_"MonetaryFormat" (§ fn decimalMark) [#_"char" (§ name decimalMark)])
    (§ block
        (Preconditions/checkArgument (§ not (Character/isDigit decimalMark)))
        (Preconditions/checkArgument (< 0 decimalMark))

        (if (== decimalMark (.. this decimalMark)) this (§ new #_"MonetaryFormat" negativeSign, positiveSign, zeroDigit, decimalMark, minDecimals, decimalGroups, shift, roundingMode, codes, codeSeparator, codePrefixed))
    )

    ;;;
     ; Set minimum number of decimals to use for formatting.  If the value precision exceeds all decimals specified
     ; (including additional decimals specified by {@link #optionalDecimals(int...)} or {@link #repeatOptionalDecimals(int, int)}),
     ; the value will be rounded.  This configuration is not relevant for parsing.
     ;;
    #_public
    (§ method #_"MonetaryFormat" (§ fn minDecimals) [#_"int" (§ name minDecimals)])
    (§ block
        (if (== minDecimals (.. this minDecimals)) this (§ new #_"MonetaryFormat" negativeSign, positiveSign, zeroDigit, decimalMark, minDecimals, decimalGroups, shift, roundingMode, codes, codeSeparator, codePrefixed))
    )

    ;;;
     ; Set additional groups of decimals to use after the minimum decimals, if they are useful for expressing precision.
     ; Each value is a number of decimals in that group.  If the value precision exceeds all decimals specified
     ; (including minimum decimals), the value will be rounded.  This configuration is not relevant for parsing.
     ;
     ; For example, if you pass <tt>4,2</tt> it will add four decimals to your formatted string if needed, and then add
     ; another two decimals if needed.  At this point, rather than adding further decimals the value will be rounded.
     ;
     ; @param groups Any number numbers of decimals, one for each group.
     ;;
    #_public
    (§ method #_"MonetaryFormat" (§ fn optionalDecimals) [#_"int..." (§ name groups)])
    (§ block
        (§ var #_"List<Integer>" (§ name decimalGroups) (§ new #_"ArrayList<>" (.. groups length)))
        (§ for (§ var #_"int" (§ name group)) :for groups)
        (§ block
            (.. decimalGroups (add group))
        )
        (§ new #_"MonetaryFormat" negativeSign, positiveSign, zeroDigit, decimalMark, minDecimals, decimalGroups, shift, roundingMode, codes, codeSeparator, codePrefixed)
    )

    ;;;
     ; Set repeated additional groups of decimals to use after the minimum decimals, if they are useful for expressing
     ; precision.  If the value precision exceeds all decimals specified (including minimum decimals), the value will be
     ; rounded.  This configuration is not relevant for parsing.
     ;
     ; For example, if you pass <tt>1,8</tt> it will up to eight decimals to your formatted string if needed.
     ; After these have been used up, rather than adding further decimals the value will be rounded.
     ;
     ; @param decimals Value of the group to be repeated.
     ; @param repetitions Number of repetitions.
     ;;
    #_public
    (§ method #_"MonetaryFormat" (§ fn repeatOptionalDecimals) [#_"int" (§ name decimals), #_"int" (§ name repetitions)])
    (§ block
        (Preconditions/checkArgument (<= 0 repetitions))

        (§ var #_"List<Integer>" (§ name decimalGroups) (§ new #_"ArrayList<>" repetitions))
        (§ for (§ var #_"int" (§ name i) 0) :for (< i repetitions) :for (§ ass (§ name i) (+ i 1)))
        (§ block
            (.. decimalGroups (add decimals))
        )
        (§ new #_"MonetaryFormat" negativeSign, positiveSign, zeroDigit, decimalMark, minDecimals, decimalGroups, shift, roundingMode, codes, codeSeparator, codePrefixed)
    )

    ;;;
     ; Set number of digits to shift the decimal separator to the right, coming from the standard BTC notation that was
     ; common pre-2014.  Note this will change the currency code if enabled.
     ;;
    #_public
    (§ method #_"MonetaryFormat" (§ fn shift) [#_"int" (§ name shift)])
    (§ block
        (if (== shift (.. this shift)) this (§ new #_"MonetaryFormat" negativeSign, positiveSign, zeroDigit, decimalMark, minDecimals, decimalGroups, shift, roundingMode, codes, codeSeparator, codePrefixed))
    )

    ;;;
     ; Set rounding mode to use when it becomes necessary.
     ;;
    #_public
    (§ method #_"MonetaryFormat" (§ fn roundingMode) [#_"RoundingMode" (§ name roundingMode)])
    (§ block
        (if (== roundingMode (.. this roundingMode)) this (§ new #_"MonetaryFormat" negativeSign, positiveSign, zeroDigit, decimalMark, minDecimals, decimalGroups, shift, roundingMode, codes, codeSeparator, codePrefixed))
    )

    ;;;
     ; Don't display currency code when formatting.  This configuration is not relevant for parsing.
     ;;
    #_public
    (§ method #_"MonetaryFormat" (§ fn noCode) [])
    (§ block
        (if (nil? codes) this (§ new #_"MonetaryFormat" negativeSign, positiveSign, zeroDigit, decimalMark, minDecimals, decimalGroups, shift, roundingMode, nil, codeSeparator, codePrefixed))
    )

    ;;;
     ; Configure currency code for given decimal separator shift.  This configuration is not relevant for parsing.
     ;
     ; @param codeShift Decimal separator shift, see {@link #shift}.
     ; @param code Currency code.
     ;;
    #_public
    (§ method #_"MonetaryFormat" (§ fn code) [#_"int" (§ name codeShift), #_"String" (§ name code)])
    (§ block
        (Preconditions/checkArgument (<= 0 codeShift))

        (§ var #_"String[]" (§ name codes) (if (some? (.. this codes)) (Arrays/copyOf (.. this codes), (.. this codes length)) (§ new #_"String[]" (§ count MAX_DECIMALS))))

        (§ ass (§ name (§ ai codes codeShift)) code)
        (§ new #_"MonetaryFormat" negativeSign, positiveSign, zeroDigit, decimalMark, minDecimals, decimalGroups, shift, roundingMode, codes, codeSeparator, codePrefixed)
    )

    ;;;
     ; Separator between currency code and formatted value.  This configuration is not relevant for parsing.
     ;;
    #_public
    (§ method #_"MonetaryFormat" (§ fn codeSeparator) [#_"char" (§ name codeSeparator)])
    (§ block
        (Preconditions/checkArgument (§ not (Character/isDigit codeSeparator)))
        (Preconditions/checkArgument (< 0 codeSeparator))

        (if (== codeSeparator (.. this codeSeparator)) this (§ new #_"MonetaryFormat" negativeSign, positiveSign, zeroDigit, decimalMark, minDecimals, decimalGroups, shift, roundingMode, codes, codeSeparator, codePrefixed))
    )

    ;;;
     ; Prefix formatted output by currency code.  This configuration is not relevant for parsing.
     ;;
    #_public
    (§ method #_"MonetaryFormat" (§ fn prefixCode) [])
    (§ block
        (if codePrefixed this (§ new #_"MonetaryFormat" negativeSign, positiveSign, zeroDigit, decimalMark, minDecimals, decimalGroups, shift, roundingMode, codes, codeSeparator, true))
    )

    ;;;
     ; Postfix formatted output with currency code.  This configuration is not relevant for parsing.
     ;;
    #_public
    (§ method #_"MonetaryFormat" (§ fn postfixCode) [])
    (§ block
        (if (§ not codePrefixed) this (§ new #_"MonetaryFormat" negativeSign, positiveSign, zeroDigit, decimalMark, minDecimals, decimalGroups, shift, roundingMode, codes, codeSeparator, false))
    )

    ;;;
     ; Configure this instance with values from a {@link Locale}.
     ;;
    #_public
    (§ method #_"MonetaryFormat" (§ fn withLocale) [#_"Locale" (§ name locale)])
    (§ block
        (§ var #_"DecimalFormatSymbols" (§ name dfs) (§ new #_"DecimalFormatSymbols" locale))
        (§ var #_"char" (§ name negativeSign) (.. dfs (getMinusSign)))
        (§ var #_"char" (§ name zeroDigit) (.. dfs (getZeroDigit)))
        (§ var #_"char" (§ name decimalMark) (.. dfs (getMonetaryDecimalSeparator)))
        (§ new #_"MonetaryFormat" negativeSign, positiveSign, zeroDigit, decimalMark, minDecimals, decimalGroups, shift, roundingMode, codes, codeSeparator, codePrefixed)
    )

    #_public
    (§ constructor #_"MonetaryFormat" [])
    (§ block
        ;; defaults
        (§ ass (§ name (.. this negativeSign)) (§ expr \-))
        (§ ass (§ name (.. this positiveSign)) 0) ;; none
        (§ ass (§ name (.. this zeroDigit)) (§ expr \0))
        (§ ass (§ name (.. this decimalMark)) (§ expr \.))
        (§ ass (§ name (.. this minDecimals)) 2)
        (§ ass (§ name (.. this decimalGroups)) nil)
        (§ ass (§ name (.. this shift)) 0)
        (§ ass (§ name (.. this roundingMode)) RoundingMode/HALF_UP)
        (§ ass (§ name (.. this codes)) (§ new #_"String[]" (§ count MAX_DECIMALS)))
        (§ ass (§ name this.codes[0]) CODE_BTC)
        (§ ass (§ name this.codes[3]) CODE_MBTC)
        (§ ass (§ name this.codes[6]) CODE_UBTC)
        (§ ass (§ name (.. this codeSeparator)) (§ expr \space))
        (§ ass (§ name (.. this codePrefixed)) true)
        this
    )

    #_private
    (§ constructor- #_"MonetaryFormat" [#_"char" (§ name negativeSign), #_"char" (§ name positiveSign), #_"char" (§ name zeroDigit), #_"char" (§ name decimalMark), #_"int" (§ name minDecimals), #_"List<Integer>" (§ name decimalGroups), #_"int" (§ name shift), #_"RoundingMode" (§ name roundingMode), #_"String[]" (§ name codes), #_"char" (§ name codeSeparator), #_"boolean" (§ name codePrefixed)])
    (§ block
        (§ ass (§ name (.. this negativeSign)) negativeSign)
        (§ ass (§ name (.. this positiveSign)) positiveSign)
        (§ ass (§ name (.. this zeroDigit)) zeroDigit)
        (§ ass (§ name (.. this decimalMark)) decimalMark)
        (§ ass (§ name (.. this minDecimals)) minDecimals)
        (§ ass (§ name (.. this decimalGroups)) decimalGroups)
        (§ ass (§ name (.. this shift)) shift)
        (§ ass (§ name (.. this roundingMode)) roundingMode)
        (§ ass (§ name (.. this codes)) codes)
        (§ ass (§ name (.. this codeSeparator)) codeSeparator)
        (§ ass (§ name (.. this codePrefixed)) codePrefixed)
        this
    )

    ;;;
     ; Format the given monetary value to a human readable form.
     ;;
    #_public
    (§ method #_"CharSequence" (§ fn format) [#_"Monetary" (§ name monetary)])
    (§ block
        ;; preparation
        (§ var #_"int" (§ name maxDecimals) minDecimals)
        (§ if (some? decimalGroups))
        (§ block
            (§ for (§ var #_"int" (§ name group)) :for decimalGroups)
            (§ block
                (§ ass (§ name maxDecimals) (+ maxDecimals group))
            )
        )
        (§ var #_"int" (§ name smallestUnitExponent) (.. monetary (smallestUnitExponent)))
        (Preconditions/checkState (§ expr maxDecimals <= smallestUnitExponent), "The maximum possible number of decimals (%s) cannot exceed %s.", maxDecimals, smallestUnitExponent)

        ;; rounding
        (§ var #_"long" (§ name satoshis) (Math/abs (.. monetary (getValue))))
        (§ var #_"long" (§ name precisionDivisor) (checkedPow 10, (§ expr smallestUnitExponent - shift - maxDecimals)))
        (§ ass (§ name satoshis) (checkedMultiply (divide satoshis, precisionDivisor, roundingMode), precisionDivisor))

        ;; shifting
        (§ var #_"long" (§ name shiftDivisor) (checkedPow 10, (§ expr smallestUnitExponent - shift)))
        (§ var #_"long" (§ name numbers) (/ satoshis shiftDivisor))
        (§ var #_"long" (§ name decimals) (§ expr satoshis % shiftDivisor))

        ;; formatting
        (§ var #_"String" (§ name decimalsStr) (String/format Locale/US, (§ expr "%0" + (- smallestUnitExponent shift) + "d"), decimals))
        (§ var #_"StringBuilder" (§ name sb) (§ new #_"StringBuilder" decimalsStr))
        (§ while (§ expr minDecimals < (.. sb (length)) && (.. sb (charAt (- (.. sb (length)) 1))) == \0))
        (§ block
            (.. sb (setLength (- (.. sb (length)) 1))) ;; trim trailing zero
        )
        (§ var #_"int" (§ name i) minDecimals)
        (§ if (some? decimalGroups))
        (§ block
            (§ for (§ var #_"int" (§ name group)) :for decimalGroups)
            (§ block
                (§ if (§ expr i < (.. sb (length)) && (.. sb (length)) < i + group))
                (§ block
                    (§ while (§ expr (.. sb (length)) < i + group))
                    (§ block
                        (.. sb (append "0"))
                    )
                    (§ break )
                )
                (§ ass (§ name i) (+ i group))
            )
        )
        (§ if (§ expr 0 < (.. sb (length))))
        (§ block
            (.. sb (insert 0, decimalMark))
        )
        (.. sb (insert 0, numbers))
        (§ if (< (.. monetary (getValue)) 0))
        (§ block
            (.. sb (insert 0, negativeSign))
        )
        (§ elseif (§ expr positiveSign != 0))
        (§ block
            (.. sb (insert 0, positiveSign))
        )
        (§ if (some? codes))
        (§ block
            (§ if codePrefixed)
            (§ block
                (.. sb (insert 0, codeSeparator))
                (.. sb (insert 0, (code)))
            )
            (§ else )
            (§ block
                (.. sb (append codeSeparator))
                (.. sb (append (code)))
            )
        )

        ;; Convert to non-arabic digits.
        (§ if (§ expr zeroDigit != \0))
        (§ block
            (§ var #_"int" (§ name offset) (§ expr zeroDigit - \0))
            (§ for (§ var #_"int" (§ name d) 0) :for (§ expr d < (.. sb (length))) :for (§ ass (§ name d) (+ d 1)))
            (§ block
                (§ var #_"char" (§ name c) (.. sb (charAt d)))
                (§ if (Character/isDigit c))
                (§ block
                    (.. sb (setCharAt d, (§ expr (§ cast #_"char" (+ c offset)))))
                )
            )
        )
        sb
    )

    ;;;
     ; Parse a human readable coin value to a {@link org.bitcoinj.core.Coin} instance.
     ;
     ; @throws NumberFormatException if the string cannot be parsed for some reason.
     ;;
    #_public
    (§ method #_"Coin" (§ fn parse) [#_"String" (§ name str)])
        (§ throws #_"NumberFormatException")
    (§ block
        (Coin/valueOf (parseValue str, Coin/SMALLEST_UNIT_EXPONENT))
    )

    ;;;
     ; Parse a human readable fiat value to a {@link org.bitcoinj.utils.Fiat} instance.
     ;
     ; @throws NumberFormatException if the string cannot be parsed for some reason.
     ;;
    #_public
    (§ method #_"Fiat" (§ fn parseFiat) [#_"String" (§ name currencyCode), #_"String" (§ name str)])
        (§ throws #_"NumberFormatException")
    (§ block
        (Fiat/valueOf currencyCode, (parseValue str, Fiat/SMALLEST_UNIT_EXPONENT))
    )

    #_private
    (§ method- #_"long" (§ fn parseValue) [#_"String" (§ name str), #_"int" (§ name smallestUnitExponent)])
    (§ block
        (Preconditions/checkState (§ expr smallestUnitExponent <= (.. DECIMALS_PADDING (length))))

        (§ if (.. str (isEmpty)))
        (§ block
            (§ throw (§ new #_"NumberFormatException" "empty string"))
        )

        (§ var #_"char" (§ name first) (.. str (charAt 0)))
        (§ if (§ expr first == negativeSign || first == positiveSign))
        (§ block
            (§ ass (§ name str) (.. str (substring 1)))
        )
        (§ var #_"String" (§ name numbers))
        (§ var #_"String" (§ name decimals))
        (§ var #_"int" (§ name decimalMarkIndex) (.. str (indexOf decimalMark)))
        (§ if (§ expr decimalMarkIndex != -1))
        (§ block
            (§ ass (§ name numbers) (.. str (substring 0, decimalMarkIndex)))
            (§ ass (§ name decimals) (.. (§ str str + DECIMALS_PADDING) (substring (+ decimalMarkIndex 1))))
            (§ if (!= (.. decimals (indexOf decimalMark)) -1))
            (§ block
                (§ throw (§ new #_"NumberFormatException" "more than one decimal mark"))
            )
        )
        (§ else )
        (§ block
            (§ ass (§ name numbers) str)
            (§ ass (§ name decimals) DECIMALS_PADDING)
        )

        (§ var #_"String" (§ name satoshis) (§ expr numbers + (.. decimals (substring 0, (§ expr smallestUnitExponent - shift)))))
        (§ for (§ var #_"char" (§ name c)) :for (.. satoshis (toCharArray)))
        (§ block
            (§ if (§ not (Character/isDigit c)))
            (§ block
                (§ throw (§ new #_"NumberFormatException" (§ expr "illegal character: " + c)))
            )
        )

        ;; Non-arabic digits allowed here.
        (§ var #_"long" (§ name value) (Long/parseLong satoshis))
        (§ if (§ expr first == negativeSign))
        (§ block
            (§ ass (§ name value) (§ neg value))
        )
        value
    )

    ;;;
     ; Get currency code that will be used for current shift.
     ;;
    #_public
    (§ method #_"String" (§ fn code) [])
    (§ block
        (§ if (nil? codes))
        (§ block
            (§ return nil)
        )
        (§ if (nil? (§ ai codes shift)))
        (§ block
            (§ throw (§ new #_"NumberFormatException" (§ expr "missing code for shift: " + shift)))
        )
        (§ ai codes shift)
    )
)

#_(ns org.bitcoinj.utils #_"Threading"
    (:import [java.util.concurrent *]
             [java.util.concurrent.locks ReentrantLock])
    (:import [com.google.common.util.concurrent CycleDetectingLockFactory ListeningExecutorService MoreExecutors Uninterruptibles]
             [org.slf4j Logger LoggerFactory])
   (:require [org.bitcoinj.core *]))

;;;
 ; Various threading related utilities.  Provides a wrapper around explicit lock creation that lets you control whether
 ; bitcoinj performs cycle detection or not.  Cycle detection is useful to detect bugs but comes with a small cost.
 ; Also provides a worker thread that is designed for event listeners to be dispatched on.
 ;;
#_public
(§ class #_"Threading"
    ;;;
     ; An executor with one thread that is intended for running event listeners on.  This ensures all event listener
     ; code runs without any locks being held.  It's intended for the API user to run things on.  Callbacks registered
     ; by bitcoinj internally shouldn't normally run here, although currently there are a few exceptions.
     ;;
    #_public
    #_static
    (§ def #_"Executor" (§ name USER_THREAD))

    ;;;
     ; A dummy executor that just invokes the runnable immediately.  Use this over
     ; {@link com.google.common.util.concurrent.MoreExecutors#sameThreadExecutor()} because the latter creates
     ; a new object each time in order to implement the more complex {@link ExecutorService} interface, which is
     ; overkill for our needs.
     ;;
    #_public
    #_static
    (§ def #_"Executor" (§ name SAME_THREAD))

    ;;;
     ; Put a dummy task into the queue and wait for it to be run.  Because it's single threaded, this means all
     ; tasks submitted before this point are now completed.  Usually you won't want to use this method - it's a
     ; convenience primarily used in unit testing.  If you want to wait for an event to be called the right thing
     ; to do is usually to create a {@link com.google.common.util.concurrent.SettableFuture} and then call set
     ; on it.  You can then either block on that future, compose it, add listeners to it and so on.
     ;;
    #_public
    #_static
    (§ defn #_"void" (§ fn waitForUserCode) [])
    (§ block
        (§ var #_"CountDownLatch" (§ name latch) (§ new #_"CountDownLatch" 1))
        (.. USER_THREAD (execute (§ new #_"Runnable")
        (§ anon
            #_override
            #_public
            (§ method #_"void" (§ fn run) [])
            (§ block
                (.. latch (countDown))
                nil
            )
        )))
        (Uninterruptibles/awaitUninterruptibly latch)
        nil
    )

    ;;;
     ; An exception handler that will be invoked for any exceptions that occur in the user thread, and any unhandled
     ; exceptions that are caught whilst the framework is processing network traffic or doing other background tasks.
     ; The purpose of this is to allow you to report back unanticipated crashes from your users to a central collection
     ; center for analysis and debugging.  You should configure this <b>before</b> any bitcoinj library code is run,
     ; setting it after you started network traffic and other forms of processing may result in the change not taking effect.
     ;;
    #_nilable
    #_public
    #_static
    #_volatile
    (§ def #_"Thread.UncaughtExceptionHandler" (§ name uncaughtExceptionHandler))

    #_public
    #_static
    (§ class #_"UserThread" (§ extends #_"Thread") (§ implements #_"Executor")
        #_private
        #_static
        (§ def- #_"Logger" (§ name log) (LoggerFactory/getLogger (§ klass #_"UserThread")))

        ;; 10,000 pending tasks is entirely arbitrary and may or may not be appropriate for the device we're running on.
        #_public
        #_static
        (§ def #_"int" (§ name WARNING_THRESHOLD) 10000)

        #_private
        (§ field- #_"LinkedBlockingQueue<Runnable>" (§ name tasks))

        #_public
        (§ constructor #_"UserThread" [])
        (§ block
            (§ super "bitcoinj user thread")

            (setDaemon true)
            (§ ass (§ name tasks) (§ new #_"LinkedBlockingQueue<>"))
            (start)
            this
        )

        #_suppress(§ opt "InfiniteLoopStatement")
        #_override
        #_public
        (§ method #_"void" (§ fn run) [])
        (§ block
            (§ while true)
            (§ block
                (§ var #_"Runnable" (§ name task) (Uninterruptibles/takeUninterruptibly tasks))
                (§ try )
                (§ block
                    (.. task (run))
                )
                (§ catch #_"Throwable" (§ name t))
                (§ block
                    (.. log (warn "Exception in user thread", t))
                    (§ var #_"Thread.UncaughtExceptionHandler" (§ name handler) uncaughtExceptionHandler)
                    (§ if (some? handler))
                    (§ block
                        (.. handler (uncaughtException this, t))
                    )
                )
            )
            nil
        )

        #_override
        #_public
        (§ method #_"void" (§ fn execute) [#_"Runnable" (§ name command)])
        (§ block
            (§ var #_"int" (§ name size) (.. tasks (size)))
            (§ if (§ expr size == WARNING_THRESHOLD))
            (§ block
                (.. log (warn (§ str "User thread has {} pending tasks, memory exhaustion may occur.\n" + "If you see this message, check your memory consumption and see if it's problematic or excessively spikey.\n" + "If it is, check for deadlocked or slow event handlers. If it isn't, try adjusting the constant \n" + "Threading.UserThread.WARNING_THRESHOLD upwards until it's a suitable level for your app, or Integer.MAX_VALUE to disable."), size))
            )
            (Uninterruptibles/putUninterruptibly tasks, command)
            nil
        )
    )

    #_static
    (§ block
        ;; Default policy goes here.  If you want to change this, use one of the static methods before instantiating
        ;; any bitcoinj objects.  The policy change will take effect only on new objects from that point onwards.
        (throwOnLockCycles)

        (§ ass (§ name USER_THREAD) (§ new #_"UserThread"))
        (§ ass (§ name SAME_THREAD) (§ new #_"Executor"
        (§ anon
            #_override
            #_public
            (§ method #_"void" (§ fn execute) [#_non-nil #_"Runnable" (§ name runnable)])
            (§ block
                (.. runnable (run))
                nil
            )
        )))
    )

    #_private
    #_static
    (§ def- #_"CycleDetectingLockFactory.Policy" (§ name policy))
    #_public
    #_static
    (§ def #_"CycleDetectingLockFactory" (§ name factory))

    #_public
    #_static
    (§ defn #_"ReentrantLock" (§ fn lock) [#_"String" (§ name name)])
    (§ block
        (if (Utils/isAndroidRuntime) (§ new #_"ReentrantLock" true) (.. factory (newReentrantLock name)))
    )

    #_public
    #_static
    (§ defn #_"void" (§ fn warnOnLockCycles) [])
    (§ block
        (setPolicy CycleDetectingLockFactory/Policies/WARN)
        nil
    )

    #_public
    #_static
    (§ defn #_"void" (§ fn throwOnLockCycles) [])
    (§ block
        (setPolicy CycleDetectingLockFactory/Policies/THROW)
        nil
    )

    #_public
    #_static
    (§ defn #_"void" (§ fn ignoreLockCycles) [])
    (§ block
        (setPolicy CycleDetectingLockFactory/Policies/DISABLED)
        nil
    )

    #_public
    #_static
    (§ defn #_"void" (§ fn setPolicy) [#_"CycleDetectingLockFactory.Policy" (§ name policy)])
    (§ block
        (§ ass (§ name (.. Threading policy)) policy)
        (§ ass (§ name factory) (CycleDetectingLockFactory/newInstance policy))
        nil
    )

    #_public
    #_static
    (§ defn #_"CycleDetectingLockFactory.Policy" (§ fn getPolicy) [])
    (§ block
        policy
    )

    ;;; A caching thread pool that creates daemon threads, which won't keep the JVM alive waiting for more work. ;;
    #_public
    #_static
    (§ def #_"ListeningExecutorService" (§ name THREAD_POOL) (MoreExecutors/listeningDecorator (Executors/newCachedThreadPool (§ new #_"ThreadFactory")
        (§ anon
            #_override
            #_public
            (§ method #_"Thread" (§ fn newThread) [#_"Runnable" (§ name r)])
            (§ block
                (§ var #_"Thread" (§ name t) (§ new #_"Thread" r))
                (.. t (setName "Threading.THREAD_POOL worker"))
                (.. t (setDaemon true))
                t
            )
        ))))
)

#_(ns org.bitcoinj.utils #_"VersionTally"
    (:import [java.util Stack])
   (:require [org.bitcoinj.core NetworkParameters StoredBlock]
             [org.bitcoinj.store BlockStore BlockStoreException]))

;;;
 ; Caching counter for the block versions within a moving window.  This class is NOT thread safe
 ; (as if two threads are trying to use it concurrently, there's risk of getting versions out of sequence).
 ;
 ; @see org.bitcoinj.core.NetworkParameters#getMajorityWindow()
 ; @see org.bitcoinj.core.NetworkParameters#getMajorityEnforceBlockUpgrade()
 ; @see org.bitcoinj.core.NetworkParameters#getMajorityRejectBlockOutdated()
 ;;
#_public
(§ class #_"VersionTally"
    ;;;
     ; Cache of version numbers.
     ;;
    #_private
    (§ field- #_"long[]" (§ name versionWindow))

    ;;;
     ; Offset within the version window at which the next version will be written.
     ;;
    #_private
    (§ field- #_"int" (§ name versionWriteHead) 0)

    ;;;
     ; Number of versions written into the tally.  Until this matches the length
     ; of the version window, we do not have sufficient data to return values.
     ;;
    #_private
    (§ field- #_"int" (§ name versionsStored) 0)

    #_public
    (§ constructor #_"VersionTally" [#_"NetworkParameters" (§ name params)])
    (§ block
        (§ ass (§ name versionWindow) (§ new #_"long[]" (§ count (.. params (getMajorityWindow)))))
        this
    )

    ;;;
     ; Add a new block version to the tally, and return the count for that version within the window.
     ;
     ; @param version The block version to add.
     ;;
    #_public
    (§ method #_"void" (§ fn add) [#_"long" (§ name version)])
    (§ block
        (§ ass (§ name (§ ai versionWindow versionWriteHead)) version)
        (§ ass (§ name versionWriteHead) (+ versionWriteHead 1))
        (§ if (§ expr versionWriteHead == (.. versionWindow length)))
        (§ block
            (§ ass (§ name versionWriteHead) 0)
        )
        (§ ass (§ name versionsStored) (+ versionsStored 1))
        nil
    )

    ;;;
     ; Get the count of blocks at or above the given version, within the window.
     ;
     ; @param version The block version to query.
     ; @return the count for the block version, or null if the window is not yet full.
     ;;
    #_public
    (§ method #_"Integer" (§ fn getCountAtOrAbove) [#_"long" (§ name version)])
    (§ block
        (§ if (§ expr versionsStored < (.. versionWindow length)))
        (§ block
            (§ return nil)
        )

        (§ var #_"int" (§ name count) 0)
        (§ for (§ var #_"int" (§ name versionIdx) 0) :for (§ expr versionIdx < (.. versionWindow length)) :for (§ ass (§ name versionIdx) (+ versionIdx 1)))
        (§ block
            (§ if (§ expr version <= (§ ai versionWindow versionIdx)))
            (§ block
                (§ ass (§ name count) (+ count 1))
            )
        )

        count
    )

    ;;;
     ; Initialize the version tally from the block store.  Note this does not search backwards past
     ; the start of the block store, so if starting from a checkpoint this may not fill the window.
     ;
     ; @param blockStore Block store to load blocks from.
     ; @param chainHead Current chain tip.
     ;;
    #_public
    (§ method #_"void" (§ fn initialize) [#_"BlockStore" (§ name blockStore), #_"StoredBlock" (§ name chainHead)])
        (§ throws #_"BlockStoreException")
    (§ block
        (§ var #_"StoredBlock" (§ name versionBlock) chainHead)
        (§ var #_"Stack<Long>" (§ name versions) (§ new #_"Stack<>"))

        ;; We don't know how many blocks back we can go, so load what we can first.
        (.. versions (push (.. versionBlock (getHeader) (getVersion))))
        (§ for (§ var #_"int" (§ name headOffset) 0) :for (§ expr headOffset < (.. versionWindow length)) :for (§ ass (§ name headOffset) (+ headOffset 1)))
        (§ block
            (§ ass (§ name versionBlock) (.. versionBlock (getPrev blockStore)))
            (§ if (nil? versionBlock))
            (§ block
                (§ break )
            )
            (.. versions (push (.. versionBlock (getHeader) (getVersion))))
        )

        ;; Replay the versions into the tally.
        (§ while (§ not (.. versions (isEmpty))))
        (§ block
            (add (.. versions (pop)))
        )
        nil
    )

    ;;;
     ; Get the size of the version window.
     ;;
    #_public
    (§ method #_"int" (§ fn size) [])
    (§ block
        (.. versionWindow length)
    )
)

#_(ns org.bitcoinj.wallet #_"AllRandomKeysRotating")

;;;
 ; Indicates that an attempt was made to upgrade a random wallet to deterministic, but there were no non-rotating
 ; random keys to use as source material for the seed.  Add a non-compromised key first!
 ;;
#_public
(§ class #_"AllRandomKeysRotating" (§ extends #_"RuntimeException"))

#_(ns org.bitcoinj.wallet #_"AllowUnconfirmedCoinSelector"
   (:require [org.bitcoinj.core Transaction]))

;;;
 ; This coin selector will select any transaction at all, regardless of where it came from or whether it was
 ; confirmed yet.  However immature coinbases will not be included (would be a protocol violation).
 ;;
#_public
(§ class #_"AllowUnconfirmedCoinSelector" (§ extends #_"DefaultCoinSelector")
    #_override
    #_protected
    (§ method #_"boolean" (§ fn shouldSelect) [#_"Transaction" (§ name tx)])
    (§ block
        true
    )

    #_private
    #_static
    (§ def- #_"AllowUnconfirmedCoinSelector" (§ name instance))

    ;;; Returns a global static instance of the selector. ;;
    #_public
    #_static
    (§ defn #_"AllowUnconfirmedCoinSelector" (§ fn get) [])
    (§ block
        ;; This doesn't have to be thread safe as the object has no state, so discarded duplicates are harmless.
        (§ if (nil? instance))
        (§ block
            (§ ass (§ name instance) (§ new #_"AllowUnconfirmedCoinSelector"))
        )
        instance
    )
)

#_(ns org.bitcoinj.wallet #_"BasicKeyChain"
    (:import [java.util *]
             [java.util.concurrent CopyOnWriteArrayList Executor]
             [java.util.concurrent.locks ReentrantLock])
    (:import [com.google.common.base Preconditions]
             [com.google.common.collect ImmutableList Lists]
             [com.google.protobuf ByteString]
             [org.spongycastle.crypto.params KeyParameter])
   (:require [org.bitcoinj.core BloomFilter ECKey]
             [org.bitcoinj.crypto *]
             [org.bitcoinj.utils ListenerRegistration Threading]
             [org.bitcoinj.wallet.listeners KeyChainEventListener]))

;;;
 ; A {@link KeyChain} that implements the simplest model possible: it can have keys imported into it, and just
 ; acts as a dumb bag of keys.  It will, left to its own devices, always return the same key for usage by the wallet,
 ; although it will automatically add one to itself if it's empty or if encryption is requested.
 ;;
#_public
(§ class #_"BasicKeyChain" (§ implements #_"EncryptableKeyChain")
    #_private
    (§ field- #_"ReentrantLock" (§ name lock) (Threading/lock "BasicKeyChain"))

    ;; Maps used to let us quickly look up a key given data we find in transcations or the block chain.
    #_private
    (§ field- #_"LinkedHashMap<ByteString, ECKey>" (§ name hashToKeys))
    #_private
    (§ field- #_"LinkedHashMap<ByteString, ECKey>" (§ name pubkeyToKeys))
    #_nilable
    #_private
    (§ field- #_"KeyCrypter" (§ name keyCrypter))
    #_private
    (§ field- #_"boolean" (§ name isWatching))

    #_private
    (§ field- #_"CopyOnWriteArrayList<ListenerRegistration<KeyChainEventListener>>" (§ name listeners))

    #_public
    (§ constructor #_"BasicKeyChain" [])
    (§ block
        (§ this nil)
        this
    )

    #_public
    (§ constructor #_"BasicKeyChain" [#_nilable #_"KeyCrypter" (§ name crypter)])
    (§ block
        (§ ass (§ name (.. this keyCrypter)) crypter)
        (§ ass (§ name hashToKeys) (§ new #_"LinkedHashMap<>"))
        (§ ass (§ name pubkeyToKeys) (§ new #_"LinkedHashMap<>"))
        (§ ass (§ name listeners) (§ new #_"CopyOnWriteArrayList<>"))
        this
    )

    ;;; Returns the {@link KeyCrypter} in use or null if the key chain is not encrypted. ;;
    #_override
    #_nilable
    #_public
    (§ method #_"KeyCrypter" (§ fn getKeyCrypter) [])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ return keyCrypter)
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    #_override
    #_public
    (§ method #_"ECKey" (§ fn getKey) [#_nilable #_"KeyPurpose" (§ name ignored)])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ if (.. hashToKeys (isEmpty)))
            (§ block
                ;; We will refuse to encrypt an empty key chain.
                (Preconditions/checkState (nil? keyCrypter))

                (§ var #_"ECKey" (§ name key) (§ new #_"ECKey"))
                (importKeyLocked key)
                (queueOnKeysAdded (ImmutableList/of key))
            )
            (§ return (.. hashToKeys (values) (iterator) (next)))
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    #_override
    #_public
    (§ method #_"List<ECKey>" (§ fn getKeys) [#_nilable #_"KeyPurpose" (§ name purpose), #_"int" (§ name numberOfKeys)])
    (§ block
        (Preconditions/checkArgument (< 0 numberOfKeys))

        (.. lock (lock))
        (§ try )
        (§ block
            (§ if (< (.. hashToKeys (size)) numberOfKeys))
            (§ block
                (Preconditions/checkState (nil? keyCrypter))

                (§ var #_"List<ECKey>" (§ name keys) (§ new #_"ArrayList<>"))
                (§ for (§ var #_"int" (§ name i) 0) :for (§ expr i < numberOfKeys - (.. hashToKeys (size))) :for (§ ass (§ name i) (+ i 1)))
                (§ block
                    (.. keys (add (§ new #_"ECKey")))
                )

                (§ var #_"ImmutableList<ECKey>" (§ name immutableKeys) (ImmutableList/copyOf keys))
                (importKeysLocked immutableKeys)
                (queueOnKeysAdded immutableKeys)
            )

            (§ var #_"List<ECKey>" (§ name keysToReturn) (§ new #_"ArrayList<>"))
            (§ var #_"int" (§ name count) 0)
            (§ while (§ expr (.. hashToKeys (values) (iterator) (hasNext)) && numberOfKeys != count))
            (§ block
                (.. keysToReturn (add (.. hashToKeys (values) (iterator) (next))))
                (§ ass (§ name count) (+ count 1))
            )
            (§ return keysToReturn)
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    ;;; Returns a copy of the list of keys that this chain is managing. ;;
    #_public
    (§ method #_"List<ECKey>" (§ fn getKeys) [])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ return (§ new #_"ArrayList<>" (.. hashToKeys (values))))
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    #_public
    (§ method #_"int" (§ fn importKeys) [#_"ECKey..." (§ name keys)])
    (§ block
        (importKeys (ImmutableList/copyOf keys))
    )

    #_public
    (§ method #_"int" (§ fn importKeys) [#_"List<? extends ECKey>" (§ name keys)])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            ;; Check that if we're encrypted, the keys are all encrypted, and if we're not, that none are.
            ;; We are NOT checking that the actual password matches here because we don't have access to the
            ;; password at this point: if you screw up and import keys with mismatched passwords, you lose!
            ;; So make sure the password is checked first.
            (§ for (§ var #_"ECKey" (§ name key)) :for keys)
            (§ block
                (checkKeyEncryptionStateMatches key)
            )

            (§ var #_"List<ECKey>" (§ name actuallyAdded) (§ new #_"ArrayList<>" (.. keys (size))))
            (§ for (§ var ECKey key) :for keys)
            (§ block
                (§ if (§ not (hasKey key)))
                (§ block
                    (.. actuallyAdded (add key))
                    (importKeyLocked key)
                )
            )
            (§ if (§ expr 0 < (.. actuallyAdded (size))))
            (§ block
                (queueOnKeysAdded actuallyAdded)
            )
            (§ return (.. actuallyAdded (size)))
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    #_private
    (§ method- #_"void" (§ fn checkKeyEncryptionStateMatches) [#_"ECKey" (§ name key)])
    (§ block
        (§ if (§ expr keyCrypter == nil && (.. key (isEncrypted))))
        (§ block
            (§ throw (§ new #_"KeyCrypterException" "Key is encrypted but chain is not"))
        )
        (§ if (§ expr keyCrypter != nil && (§ not (.. key (isEncrypted)))))
        (§ block
            (§ throw (§ new #_"KeyCrypterException" "Key is not encrypted but chain is"))
        )
        (§ if (§ expr keyCrypter != nil && (.. key (getKeyCrypter)) != nil && (§ not (.. key (getKeyCrypter) (equals keyCrypter)))))
        (§ block
            (§ throw (§ new #_"KeyCrypterException" "Key encrypted under different parameters to chain"))
        )
        nil
    )

    #_private
    (§ method- #_"void" (§ fn importKeyLocked) [#_"ECKey" (§ name key)])
    (§ block
        (§ if (.. hashToKeys (isEmpty)))
        (§ block
            (§ ass (§ name isWatching) (.. key (isWatching)))
        )
        (§ else )
        (§ block
            (§ if (§ expr (.. key (isWatching)) && (§ not isWatching)))
            (§ block
                (§ throw (§ new #_"IllegalArgumentException" "Key is watching but chain is not"))
            )
            (§ if (§ expr (§ not (.. key (isWatching))) && isWatching))
            (§ block
                (§ throw (§ new #_"IllegalArgumentException" "Key is not watching but chain is"))
            )
        )
        (§ var #_"ECKey" (§ name previousKey) (.. pubkeyToKeys (put (ByteString/copyFrom (.. key (getPubKey))), key)))
        (.. hashToKeys (put (ByteString/copyFrom (.. key (getPubKeyHash))), key))
        (Preconditions/checkState (nil? previousKey))
        nil
    )

    #_private
    (§ method- #_"void" (§ fn importKeysLocked) [#_"List<ECKey>" (§ name keys)])
    (§ block
        (§ for (§ var #_"ECKey" (§ name key)) :for keys)
        (§ block
            (importKeyLocked key)
        )
        nil
    )

    ;;;
     ; Imports a key to the key chain.  If key is present in the key chain, ignore it.
     ;;
    #_public
    (§ method #_"void" (§ fn importKey) [#_"ECKey" (§ name key)])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (checkKeyEncryptionStateMatches key)
            (§ if (hasKey key))
            (§ block
                (§ return nil)
            )

            (importKeyLocked key)
            (queueOnKeysAdded (ImmutableList/of key))
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
        nil
    )

    #_public
    (§ method #_"ECKey" (§ fn findKeyFromPubHash) [#_"byte[]" (§ name pubkeyHash)])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ return (.. hashToKeys (get (ByteString/copyFrom pubkeyHash))))
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    #_public
    (§ method #_"ECKey" (§ fn findKeyFromPubKey) [#_"byte[]" (§ name pubkey)])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ return (.. pubkeyToKeys (get (ByteString/copyFrom pubkey))))
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    #_override
    #_public
    (§ method #_"boolean" (§ fn hasKey) [#_"ECKey" (§ name key)])
    (§ block
        (!= (findKeyFromPubKey (.. key (getPubKey))) nil)
    )

    #_override
    #_public
    (§ method #_"int" (§ fn numKeys) [])
    (§ block
        (.. pubkeyToKeys (size))
    )

    ;;; Whether this basic key chain is empty, full of regular (usable for signing) keys, or full of watching keys. ;;
    #_public
    (§ enum #_"State"
        (§ item EMPTY)
        (§ item WATCHING)
        (§ item REGULAR)
    )

    ;;;
     ; Returns whether this chain consists of pubkey only (watching) keys, regular keys (usable for signing),
     ; or has no keys in it yet at all (thus we cannot tell).
     ;;
    #_public
    (§ method #_"State" (§ fn isWatching) [])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ return (if (.. hashToKeys (isEmpty)) State/EMPTY (if isWatching State/WATCHING State/REGULAR)))
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    ;;;
     ; Removes the given key from the keychain.  Be very careful with this - losing a private key
     ; <b>destroys the money associated with it</b>.
     ; @return whether the key was removed or not.
     ;;
    #_public
    (§ method #_"boolean" (§ fn removeKey) [#_"ECKey" (§ name key)])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ var #_"boolean" (§ name a) (!= (.. hashToKeys (remove (ByteString/copyFrom (.. key (getPubKeyHash))))) nil))
            (§ var #_"boolean" (§ name b) (!= (.. pubkeyToKeys (remove (ByteString/copyFrom (.. key (getPubKey))))) nil))
            (Preconditions/checkState (§ expr a == b)) ;; Should be in both maps or neither.
            (§ return a)
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    #_override
    #_public
    (§ method #_"long" (§ fn getEarliestKeyCreationTime) [])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ var #_"long" (§ name time) Long/MAX_VALUE)
            (§ for (§ var #_"ECKey" (§ name key)) :for (.. hashToKeys (values)))
            (§ block
                (§ ass (§ name time) (Math/min (.. key (getCreationTimeSeconds)), time))
            )
            (§ return time)
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    #_public
    (§ method #_"List<ListenerRegistration<KeyChainEventListener>>" (§ fn getListeners) [])
    (§ block
        (§ new #_"ArrayList<>" listeners)
    )

    (§ method #_"Map<ECKey, Protos.Key.Builder>" (§ fn serializeToEditableProtobufs) [])
    (§ block
        (§ var #_"Map<ECKey, Protos.Key.Builder>" (§ name result) (§ new #_"LinkedHashMap<>"))
        (§ for (§ var #_"ECKey" (§ name ecKey)) :for (.. hashToKeys (values)))
        (§ block
            (§ var #_"Protos.Key.Builder" (§ name protoKey) (serializeEncryptableItem ecKey))
            (.. protoKey (setPublicKey (ByteString/copyFrom (.. ecKey (getPubKey)))))
            (.. result (put ecKey, protoKey))
        )
        result
    )

    #_override
    #_public
    (§ method #_"List<Protos.Key>" (§ fn serializeToProtobuf) [])
    (§ block
        (§ var #_"Collection<Protos.Key.Builder>" (§ name builders) (.. (serializeToEditableProtobufs) (values)))
        (§ var #_"List<Protos.Key>" (§ name result) (§ new #_"ArrayList<>" (.. builders (size))))
        (§ for (§ var #_"Protos.Key.Builder" (§ name builder)) :for builders)
        (§ block
            (.. result (add (.. builder (build))))
        )
        result
    )

    #_static
    (§ defn #_"Protos.Key.Builder" (§ fn serializeEncryptableItem) [#_"EncryptableItem" (§ name item)])
    (§ block
        (§ var #_"Protos.Key.Builder" (§ name proto) (.. Protos/Key (newBuilder)))
        (.. proto (setCreationTimestamp (* (.. item (getCreationTimeSeconds)) 1000)))
        (§ if (§ expr (.. item (isEncrypted)) && (.. item (getEncryptedData)) != nil))
        (§ block
            ;; The encrypted data can be missing for an "encrypted" key in the case of a deterministic wallet
            ;; for which the leaf keys chain to an encrypted parent and rederive their private keys on the fly.
            ;; In that case the caller in DeterministicKeyChain will take care of setting the type.
            (§ var #_"EncryptedData" (§ name data) (.. item (getEncryptedData)))
            (.. proto (getEncryptedDataBuilder) (setEncryptedPrivateKey (ByteString/copyFrom (.. data encryptedBytes))) (setInitialisationVector (ByteString/copyFrom (.. data initialisationVector))))
            ;; We don't allow mixing of encryption types at the moment.
            (Preconditions/checkState (== (.. item (getEncryptionType)) Protos/Wallet/EncryptionType/ENCRYPTED_SCRYPT_AES))
            (.. proto (setType Protos/Key/Type/ENCRYPTED_SCRYPT_AES))
        )
        (§ else )
        (§ block
            (§ var #_"byte[]" (§ name secret) (.. item (getSecretBytes)))
            ;; The secret might be missing in the case of a watching wallet, or a key for which the private key
            ;; is expected to be rederived on the fly from its parent.
            (§ if (some? secret))
            (§ block
                (.. proto (setSecretBytes (ByteString/copyFrom secret)))
            )
            (.. proto (setType Protos/Key/Type/ORIGINAL))
        )
        proto
    )

    ;;;
     ; Returns a new BasicKeyChain that contains all basic, ORIGINAL type keys extracted from the list.
     ; Unrecognised key types are ignored.
     ;;
    #_public
    #_static
    (§ defn #_"BasicKeyChain" (§ fn fromProtobufUnencrypted) [#_"List<Protos.Key>" (§ name keys)])
        (§ throws #_"UnreadableWalletException")
    (§ block
        (§ var #_"BasicKeyChain" (§ name chain) (§ new #_"BasicKeyChain"))
        (.. chain (deserializeFromProtobuf keys))
        chain
    )

    ;;;
     ; Returns a new BasicKeyChain that contains all basic, ORIGINAL type keys and also any encrypted keys
     ; extracted from the list.  Unrecognised key types are ignored.
     ; @throws org.bitcoinj.wallet.UnreadableWalletException.BadPassword if the password doesn't seem to match.
     ; @throws org.bitcoinj.wallet.UnreadableWalletException if the data structures are corrupted/inconsistent.
     ;;
    #_public
    #_static
    (§ defn #_"BasicKeyChain" (§ fn fromProtobufEncrypted) [#_"List<Protos.Key>" (§ name keys), #_"KeyCrypter" (§ name crypter)])
        (§ throws #_"UnreadableWalletException")
    (§ block
        (§ var #_"BasicKeyChain" (§ name chain) (§ new #_"BasicKeyChain" (Preconditions/checkNotNull crypter)))
        (.. chain (deserializeFromProtobuf keys))
        chain
    )

    #_private
    (§ method- #_"void" (§ fn deserializeFromProtobuf) [#_"List<Protos.Key>" (§ name keys)])
        (§ throws #_"UnreadableWalletException")
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (Preconditions/checkState (.. hashToKeys (isEmpty)), "Tried to deserialize into a non-empty chain")
            (§ for (§ var #_"Protos.Key" (§ name key)) :for keys)
            (§ block
                (§ if (§ expr (.. key (getType)) != Protos/Key/Type/ORIGINAL && (.. key (getType)) != Protos/Key/Type/ENCRYPTED_SCRYPT_AES))
                (§ block
                    (§ continue )
                )

                (§ var #_"boolean" (§ name encrypted) (== (.. key (getType)) Protos/Key/Type/ENCRYPTED_SCRYPT_AES))
                (§ var #_"byte[]" (§ name priv) (when (.. key (hasSecretBytes)) (.. key (getSecretBytes) (toByteArray))))
                (§ if (§ not (.. key (hasPublicKey))))
                (§ block
                    (§ throw (§ new #_"UnreadableWalletException" "Public key missing"))
                )

                (§ var #_"byte[]" (§ name pub) (.. key (getPublicKey) (toByteArray)))
                (§ var #_"ECKey" (§ name ecKey))
                (§ if encrypted)
                (§ block
                    (Preconditions/checkState (some? keyCrypter), "This wallet is encrypted but encrypt() was not called prior to deserialization")
                    (§ if (§ not (.. key (hasEncryptedData))))
                    (§ block
                        (§ throw (§ new #_"UnreadableWalletException" "Encrypted private key data missing"))
                    )

                    (§ var #_"Protos.EncryptedData" (§ name proto) (.. key (getEncryptedData)))
                    (§ var #_"EncryptedData" (§ name e) (§ new #_"EncryptedData" (.. proto (getInitialisationVector) (toByteArray)), (.. proto (getEncryptedPrivateKey) (toByteArray))))
                    (§ ass (§ name ecKey) (ECKey/fromEncrypted e, keyCrypter, pub))
                )
                (§ else )
                (§ block
                    (§ ass (§ name ecKey) (if (some? priv) (ECKey/fromPrivateAndPrecalculatedPublic priv, pub) (ECKey/fromPublicOnly pub)))
                )
                (.. ecKey (setCreationTimeSeconds (/ (.. key (getCreationTimestamp)) 1000)))
                (importKeyLocked ecKey)
            )
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
        nil
    )

    #_override
    #_public
    (§ method #_"void" (§ fn addEventListener) [#_"KeyChainEventListener" (§ name listener)])
    (§ block
        (addEventListener listener, Threading/USER_THREAD)
        nil
    )

    #_override
    #_public
    (§ method #_"void" (§ fn addEventListener) [#_"KeyChainEventListener" (§ name listener), #_"Executor" (§ name executor)])
    (§ block
        (.. listeners (add (§ new #_"ListenerRegistration<>" listener, executor)))
        nil
    )

    #_override
    #_public
    (§ method #_"boolean" (§ fn removeEventListener) [#_"KeyChainEventListener" (§ name listener)])
    (§ block
        (ListenerRegistration/removeFromList listener, listeners)
    )

    #_private
    (§ method- #_"void" (§ fn queueOnKeysAdded) [#_"List<ECKey>" (§ name keys)])
    (§ block
        (Preconditions/checkState (.. lock (isHeldByCurrentThread)))

        (§ for (§ var ListenerRegistration<KeyChainEventListener> registration) :for listeners)
        (§ block
            (.. registration executor (execute (§ new #_"Runnable")
            (§ anon
                #_override
                #_public
                (§ method #_"void" (§ fn run) [])
                (§ block
                    (.. registration listener (onKeysAdded keys))
                    nil
                )
            )))
        )
        nil
    )

    ;;;
     ; Convenience wrapper around {@link #toEncrypted(org.bitcoinj.crypto.KeyCrypter, org.spongycastle.crypto.params.KeyParameter)}
     ; which uses the default Scrypt key derivation algorithm and parameters, derives a key from the given password and returns
     ; the created key.
     ;;
    #_override
    #_public
    (§ method #_"BasicKeyChain" (§ fn toEncrypted) [#_"CharSequence" (§ name password)])
    (§ block
        (Preconditions/checkNotNull password)
        (Preconditions/checkArgument (§ expr 0 < (.. password (length))))

        (§ var #_"KeyCrypter" (§ name scrypt) (§ new #_"KeyCrypterScrypt"))
        (§ var #_"KeyParameter" (§ name derivedKey) (.. scrypt (deriveKey password)))
        (toEncrypted scrypt, derivedKey)
    )

    ;;;
     ; Encrypt the wallet using the KeyCrypter and the AES key.  A good default KeyCrypter to use is
     ; {@link org.bitcoinj.crypto.KeyCrypterScrypt}.
     ;
     ; @param keyCrypter The KeyCrypter that specifies how to encrypt/ decrypt a key.
     ; @param aesKey AES key to use (normally created using KeyCrypter#deriveKey and cached as it is time consuming
     ;               to create from a password).
     ; @throws KeyCrypterException if the wallet encryption fails.  If so, the wallet state is unchanged.
     ;;
    #_override
    #_public
    (§ method #_"BasicKeyChain" (§ fn toEncrypted) [#_"KeyCrypter" (§ name keyCrypter), #_"KeyParameter" (§ name aesKey)])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (Preconditions/checkNotNull keyCrypter)
            (Preconditions/checkState (nil? (.. this keyCrypter)), "Key chain is already encrypted")

            (§ var #_"BasicKeyChain" (§ name encrypted) (§ new #_"BasicKeyChain" keyCrypter))
            (§ for (§ var #_"ECKey" (§ name key)) :for (.. hashToKeys (values)))
            (§ block
                (§ var #_"ECKey" (§ name encryptedKey) (.. key (encrypt keyCrypter, aesKey)))
                ;; Check that the encrypted key can be successfully decrypted.
                ;; This is done as it is a critical failure if the private key cannot be decrypted successfully
                ;; (all bitcoin controlled by that private key is lost forever).
                ;; For a correctly constructed keyCrypter the encryption should always be reversible so it is just
                ;; being as cautious as possible.
                (§ if (§ not (ECKey/encryptionIsReversible key, encryptedKey, keyCrypter, aesKey)))
                (§ block
                    (§ throw (§ new #_"KeyCrypterException" (§ expr "The key " + key + " cannot be successfully decrypted after encryption so aborting wallet encryption.")))
                )
                (.. encrypted (importKeyLocked encryptedKey))
            )
            (§ return encrypted)
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    #_override
    #_public
    (§ method #_"BasicKeyChain" (§ fn toDecrypted) [#_"CharSequence" (§ name password)])
    (§ block
        (Preconditions/checkNotNull keyCrypter, "Wallet is already decrypted")

        (toDecrypted (.. keyCrypter (deriveKey password)))
    )

    #_override
    #_public
    (§ method #_"BasicKeyChain" (§ fn toDecrypted) [#_"KeyParameter" (§ name aesKey)])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (Preconditions/checkState (some? keyCrypter), "Wallet is already decrypted")

            ;; Do an up-front check.
            (§ if (§ expr 0 < (numKeys) && (§ not (checkAESKey aesKey))))
            (§ block
                (§ throw (§ new #_"KeyCrypterException" "Password/key was incorrect."))
            )

            (§ var #_"BasicKeyChain" (§ name decrypted) (§ new #_"BasicKeyChain"))
            (§ for (§ var #_"ECKey" (§ name key)) :for (.. hashToKeys (values)))
            (§ block
                (.. decrypted (importKeyLocked (.. key (decrypt aesKey))))
            )
            (§ return decrypted)
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    ;;;
     ; Returns whether the given password is correct for this key chain.
     ; @throws IllegalStateException if the chain is not encrypted at all.
     ;;
    #_override
    #_public
    (§ method #_"boolean" (§ fn checkPassword) [#_"CharSequence" (§ name password)])
    (§ block
        (Preconditions/checkNotNull password)
        (Preconditions/checkState (some? keyCrypter), "Key chain not encrypted")

        (checkAESKey (.. keyCrypter (deriveKey password)))
    )

    ;;;
     ; Check whether the AES key can decrypt the first encrypted key in the wallet.
     ;
     ; @return true if AES key supplied can decrypt the first encrypted private key in the wallet, false otherwise.
     ;;
    #_override
    #_public
    (§ method #_"boolean" (§ fn checkAESKey) [#_"KeyParameter" (§ name aesKey)])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            ;; If no keys then cannot decrypt.
            (§ if (.. hashToKeys (isEmpty)))
            (§ block
                (§ return false)
            )

            (Preconditions/checkState (some? keyCrypter), "Key chain is not encrypted")

            ;; Find the first encrypted key in the wallet.
            (§ var #_"ECKey" (§ name first) nil)
            (§ for (§ var #_"ECKey" (§ name key)) :for (.. hashToKeys (values)))
            (§ block
                (§ if (.. key (isEncrypted)))
                (§ block
                    (§ ass (§ name first) key)
                    (§ break )
                )
            )
            (Preconditions/checkState (some? first), "No encrypted keys in the wallet")

            (§ try )
            (§ block
                (§ var #_"ECKey" (§ name rebornKey) (.. first (decrypt aesKey)))
                (§ return (Arrays/equals (.. first (getPubKey)), (.. rebornKey (getPubKey))))
            )
            (§ catch #_"KeyCrypterException" (§ name _))
            (§ block
                ;; The AES key supplied is incorrect.
                (§ return false)
            )
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    #_override
    #_public
    (§ method #_"BloomFilter" (§ fn getFilter) [#_"int" (§ name size), #_"double" (§ name falsePositiveRate), #_"long" (§ name tweak)])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ var #_"BloomFilter" (§ name filter) (§ new #_"BloomFilter" size, falsePositiveRate, tweak))
            (§ for (§ var #_"ECKey" (§ name key)) :for (.. hashToKeys (values)))
            (§ block
                (.. filter (insert key))
            )
            (§ return filter)
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    #_override
    #_public
    (§ method #_"int" (§ fn numBloomFilterEntries) [])
    (§ block
        (* (numKeys) 2)
    )

    ;;; Returns the first ECKey created after the given UNIX time, or null if there is none. ;;
    #_nilable
    #_public
    (§ method #_"ECKey" (§ fn findOldestKeyAfter) [#_"long" (§ name timeSecs)])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ var #_"ECKey" (§ name oldest) nil)
            (§ for (§ var #_"ECKey" (§ name key)) :for (.. hashToKeys (values)))
            (§ block
                (§ var #_"long" (§ name keyTime) (.. key (getCreationTimeSeconds)))
                (§ if (§ expr timeSecs < keyTime && (§ expr oldest == nil || keyTime < (.. oldest (getCreationTimeSeconds)))))
                (§ block
                    (§ ass (§ name oldest) key)
                )
            )
            (§ return oldest)
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    ;;; Returns a list of all ECKeys created after the given UNIX time. ;;
    #_public
    (§ method #_"List<ECKey>" (§ fn findKeysBefore) [#_"long" (§ name timeSecs)])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ var #_"List<ECKey>" (§ name results) (Lists/newLinkedList))
            (§ for (§ var #_"ECKey" (§ name key)) :for (.. hashToKeys (values)))
            (§ block
                (§ var #_"long" (§ name keyTime) (.. key (getCreationTimeSeconds)))
                (§ if (< keyTime timeSecs))
                (§ block
                    (.. results (add key))
                )
            )
            (§ return results)
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )
)

#_(ns org.bitcoinj.wallet #_"CoinSelection"
    (:import [java.util Collection])
   (:require [org.bitcoinj.core Coin TransactionOutput]))

;;;
 ; Represents the results of a {@link CoinSelector#select(Coin, java.util.List)} operation.
 ; A coin selection represents a list of spendable transaction outputs that sum together to give valueGathered.
 ; Different coin selections could be produced by different coin selectors from the same input set, according
 ; to their varying policies.
 ;;
#_public
(§ class #_"CoinSelection"
    #_public
    (§ field #_"Coin" (§ name valueGathered))
    #_public
    (§ field #_"Collection<TransactionOutput>" (§ name gathered))

    #_public
    (§ constructor #_"CoinSelection" [#_"Coin" (§ name valueGathered), #_"Collection<TransactionOutput>" (§ name gathered)])
    (§ block
        (§ ass (§ name (.. this valueGathered)) valueGathered)
        (§ ass (§ name (.. this gathered)) gathered)
        this
    )
)

#_(ns org.bitcoinj.wallet #_"CoinSelector"
    (:import [java.util List])
   (:require [org.bitcoinj.core Coin TransactionOutput]))

;;;
 ; A CoinSelector is responsible for picking some outputs to spend, from the list of all possible outputs.
 ; It allows you to customize the policies for creation of transactions to suit your needs.  The select operation
 ; may return a {@link CoinSelection} that has a valueGathered lower than the requested target, if there's not
 ; enough money in the wallet.
 ;;
#_public
(§ interface #_"CoinSelector"
    ;;;
     ; Creates a CoinSelection that tries to meet the target amount of value.  The candidates list is given to
     ; this call and can be edited freely.  See the docs for CoinSelection to learn more, or look a the implementation
     ; of {@link DefaultCoinSelector}.
     ;;
    (§ method #_"CoinSelection" (§ fn select) [#_"Coin" (§ name target), #_"List<TransactionOutput>" (§ name candidates)])
)

#_(ns org.bitcoinj.wallet #_"DecryptingKeyBag"
    (:import [java.util ArrayList List])
    (:import [com.google.common.base Preconditions]
             [org.spongycastle.crypto.params KeyParameter])
   (:require [org.bitcoinj.core ECKey]))

;;;
 ; A DecryptingKeyBag filters a pre-existing key bag, decrypting keys as they are requested using the provided AES key.
 ; If the keys are encrypted and no AES key provided, {@link org.bitcoinj.core.ECKey.KeyIsEncryptedException} will be thrown.
 ;;
#_public
(§ class #_"DecryptingKeyBag" (§ implements #_"KeyBag")
    #_protected
    (§ field #_"KeyBag" (§ name target))
    #_protected
    (§ field #_"KeyParameter" (§ name aesKey))

    #_public
    (§ constructor #_"DecryptingKeyBag" [#_"KeyBag" (§ name target), #_nilable #_"KeyParameter" (§ name aesKey)])
    (§ block
        (§ ass (§ name (.. this target)) (Preconditions/checkNotNull target))
        (§ ass (§ name (.. this aesKey)) aesKey)
        this
    )

    #_nilable
    #_private
    (§ method- #_"ECKey" (§ fn maybeDecrypt) [#_"ECKey" (§ name key)])
    (§ block
        (§ if (nil? key))
        (§ block
            (§ return nil)
        )

        (§ if (.. key (isEncrypted)))
        (§ block
            (§ if (nil? aesKey))
            (§ block
                (§ throw (§ new #_"ECKey.KeyIsEncryptedException"))
            )
            (§ return (.. key (decrypt aesKey)))
        )

        key
    )

    #_private
    (§ method- #_"RedeemData" (§ fn maybeDecrypt) [#_"RedeemData" (§ name redeemData)])
    (§ block
        (§ var #_"List<ECKey>" (§ name decryptedKeys) (§ new #_"ArrayList<>"))
        (§ for (§ var #_"ECKey" (§ name key)) :for (.. redeemData keys))
        (§ block
            (.. decryptedKeys (add (maybeDecrypt key)))
        )
        (RedeemData/of decryptedKeys, (.. redeemData redeemScript))
    )

    #_nilable
    #_override
    #_public
    (§ method #_"ECKey" (§ fn findKeyFromPubHash) [#_"byte[]" (§ name pubkeyHash)])
    (§ block
        (maybeDecrypt (.. target (findKeyFromPubHash pubkeyHash)))
    )

    #_nilable
    #_override
    #_public
    (§ method #_"ECKey" (§ fn findKeyFromPubKey) [#_"byte[]" (§ name pubkey)])
    (§ block
        (maybeDecrypt (.. target (findKeyFromPubKey pubkey)))
    )

    #_nilable
    #_override
    #_public
    (§ method #_"RedeemData" (§ fn findRedeemDataFromScriptHash) [#_"byte[]" (§ name scriptHash)])
    (§ block
        (maybeDecrypt (.. target (findRedeemDataFromScriptHash scriptHash)))
    )
)

#_(ns org.bitcoinj.wallet #_"DefaultCoinSelector"
    (:import [java.math BigInteger]
             [java.util *])
    (:import [com.google.common.annotations VisibleForTesting])
   (:require [org.bitcoinj.core Coin NetworkParameters Transaction TransactionConfidence TransactionOutput]))

;;;
 ; This class implements a {@link CoinSelector} which attempts to get the highest priority possible.
 ; This means that the transaction is the most likely to get confirmed.  Note that this means we may end up
 ; "spending" more priority than would be required to get the transaction we are creating confirmed.
 ;;
#_public
(§ class #_"DefaultCoinSelector" (§ implements #_"CoinSelector")
    #_override
    #_public
    (§ method #_"CoinSelection" (§ fn select) [#_"Coin" (§ name target), #_"List<TransactionOutput>" (§ name candidates)])
    (§ block
        (§ var #_"ArrayList<TransactionOutput>" (§ name selected) (§ new #_"ArrayList<>"))
        ;; Sort the inputs by age * value, so we get the highest "coindays" spent.
        ;; TODO: Consider changing the wallets internal format to track just outputs and keep them ordered.
        (§ var #_"ArrayList<TransactionOutput>" (§ name sortedOutputs) (§ new #_"ArrayList<>" candidates))
        ;; When calculating the wallet balance, we may be asked to select all possible coins, if so, avoid
        ;; sorting them in order to improve performance.
        ;; TODO: Take in network parameters when instanatiated, and then test against the current network.
        ;; Or just have a boolean parameter for "give me everything".
        (§ if (§ not (.. target (equals NetworkParameters/MAX_MONEY))))
        (§ block
            (sortOutputs sortedOutputs)
        )
        ;; Now iterate over the sorted outputs until we have got as close to the target as possible or
        ;; a little bit over (excessive value will be change).
        (§ var #_"long" (§ name total) 0)
        (§ for (§ var #_"TransactionOutput" (§ name output)) :for sortedOutputs)
        (§ block
            (§ if (<= (.. target value) total))
            (§ block
                (§ break )
            )
            ;; Only pick chain-included transactions, or transactions that are ours and pending.
            (§ if (shouldSelect (.. output (getParentTransaction))))
            (§ block
                (.. selected (add output))
                (§ ass (§ name total) (§ expr total + (.. output (getValue) value)))
            )
        )
        ;; Total may be lower than the target here if the given candidates were insufficient to create
        ;; the requested transaction.
        (§ new #_"CoinSelection" (Coin/valueOf total), selected)
    )

    #_testing
    #_static
    (§ defn #_"void" (§ fn sortOutputs) [#_"ArrayList<TransactionOutput>" (§ name outputs)])
    (§ block
        (Collections/sort outputs, (§ new #_"Comparator<TransactionOutput>")
        (§ anon
            #_override
            #_public
            (§ method #_"int" (§ fn compare) [#_"TransactionOutput" (§ name a), #_"TransactionOutput" (§ name b)])
            (§ block
                (§ var #_"int" (§ name depth1) (.. a (getParentTransactionDepthInBlocks)))
                (§ var #_"int" (§ name depth2) (.. b (getParentTransactionDepthInBlocks)))
                (§ var #_"Coin" (§ name aValue) (.. a (getValue)))
                (§ var #_"Coin" (§ name bValue) (.. b (getValue)))
                (§ var #_"BigInteger" (§ name aCoinDepth) (.. (BigInteger/valueOf (.. aValue value)) (multiply (BigInteger/valueOf depth1))))
                (§ var #_"BigInteger" (§ name bCoinDepth) (.. (BigInteger/valueOf (.. bValue value)) (multiply (BigInteger/valueOf depth2))))
                (§ var #_"int" (§ name c1) (.. bCoinDepth (compareTo aCoinDepth)))
                (§ if (§ expr c1 != 0))
                (§ block
                    (§ return c1)
                )

                ;; The "coin * days" destroyed are equal, sort by value alone to get the lowest transaction size.
                (§ var #_"int" (§ name c2) (.. bValue (compareTo aValue)))
                (§ if (§ expr c2 != 0))
                (§ block
                    (§ return c2)
                )

                ;; They are entirely equivalent (possibly pending) so sort by hash to ensure a total ordering.
                (§ var #_"BigInteger" (§ name aHash) (.. a (getParentTransactionHash) (toBigInteger)))
                (§ var #_"BigInteger" (§ name bHash) (.. b (getParentTransactionHash) (toBigInteger)))
                (.. aHash (compareTo bHash))
            )
        ))
        nil
    )

    ;;; Sub-classes can override this to just customize whether transactions are usable, but keep age sorting. ;;
    #_protected
    (§ method #_"boolean" (§ fn shouldSelect) [#_"Transaction" (§ name tx)])
    (§ block
        (if (some? tx) (isSelectable tx) true)
    )

    #_public
    #_static
    (§ defn #_"boolean" (§ fn isSelectable) [#_"Transaction" (§ name tx)])
    (§ block
        ;; Only pick chain-included transactions, or transactions that are ours and pending.
        (§ var #_"TransactionConfidence" (§ name confidence) (.. tx (getConfidence)))
        (§ var #_"TransactionConfidence.ConfidenceType" (§ name type) (.. confidence (getConfidenceType)))
        ;; TODO: The value 1 below dates from a time when transactions we broadcast *to* were counted, set to 0.
        (§ expr (.. type (equals TransactionConfidence/ConfidenceType/BUILDING)) || (§ expr (.. type (equals TransactionConfidence/ConfidenceType/PENDING)) && (.. confidence (getSource) (equals TransactionConfidence/Source/SELF)) && 1 < (.. confidence (numBroadcastPeers))))
    )
)

#_(ns org.bitcoinj.wallet #_"DefaultKeyChainFactory"
   (:require [org.bitcoinj.crypto *]))

;;;
 ; Default factory for creating keychains while de-serializing.
 ;;
#_public
(§ class #_"DefaultKeyChainFactory" (§ implements #_"KeyChainFactory")
    #_override
    #_public
    (§ method #_"DeterministicKeyChain" (§ fn makeKeyChain) [#_"Protos.Key" (§ name key), #_"Protos.Key" (§ name firstSubKey), #_"DeterministicSeed" (§ name seed), #_"KeyCrypter" (§ name crypter), #_"boolean" (§ name isMarried)])
    (§ block
        (if isMarried (§ new #_"MarriedKeyChain" seed, crypter) (§ new #_"DeterministicKeyChain" seed, crypter))
    )

    #_override
    #_public
    (§ method #_"DeterministicKeyChain" (§ fn makeWatchingKeyChain) [#_"Protos.Key" (§ name key), #_"Protos.Key" (§ name firstSubKey), #_"DeterministicKey" (§ name accountKey), #_"boolean" (§ name isFollowingKey), #_"boolean" (§ name isMarried)])
        (§ throws #_"UnreadableWalletException")
    (§ block
        (§ if (§ not (.. accountKey (getPath) (equals DeterministicKeyChain/ACCOUNT_ZERO_PATH))))
        (§ block
            (§ throw (§ new #_"UnreadableWalletException" (§ expr "Expecting account key but found key with path: " + (HDUtils/formatPath (.. accountKey (getPath))))))
        )

        (if isMarried (§ new #_"MarriedKeyChain" accountKey) (§ new #_"DeterministicKeyChain" accountKey, isFollowingKey))
    )
)

#_(ns org.bitcoinj.wallet #_"DefaultRiskAnalysis"
    (:import [java.util List])
    (:import [com.google.common.base Preconditions]
             [org.slf4j Logger LoggerFactory])
   (:require [org.bitcoinj.core Coin ECKey]
             [org.bitcoinj.core.ECKey ECDSASignature]
             [org.bitcoinj.core NetworkParameters Transaction TransactionConfidence TransactionInput TransactionOutput]
             [org.bitcoinj.crypto TransactionSignature]
             [org.bitcoinj.script ScriptChunk]))

;;;
 ; <p>The default risk analysis.  Currently, it only is concerned with whether a tx/dependency is non-final or not,
 ; and whether a tx/dependency violates the dust rules.  Outside of specialised protocols you should not encounter
 ; non-final transactions.</p>
 ;;
#_public
(§ class #_"DefaultRiskAnalysis" (§ implements #_"RiskAnalysis")
    #_private
    #_static
    (§ def- #_"Logger" (§ name log) (LoggerFactory/getLogger (§ klass #_"DefaultRiskAnalysis")))

    ;;;
     ; Any standard output smaller than this value (in satoshis) will be considered risky, as it's most likely
     ; be rejected by the network.  This is usually the same as {@link Transaction#MIN_NONDUST_OUTPUT} but can
     ; be different when the fee is about to change in Bitcoin Core.
     ;;
    #_public
    #_static
    (§ def #_"Coin" (§ name MIN_ANALYSIS_NONDUST_OUTPUT) Transaction/MIN_NONDUST_OUTPUT)

    #_protected
    (§ field #_"Transaction" (§ name tx))
    #_protected
    (§ field #_"List<Transaction>" (§ name dependencies))
    #_nilable
    #_protected
    (§ field #_"Wallet" (§ name wallet))

    #_private
    (§ field- #_"Transaction" (§ name nonStandard))
    #_protected
    (§ field #_"Transaction" (§ name nonFinal))
    #_protected
    (§ field #_"boolean" (§ name analyzed))

    #_private
    (§ constructor- #_"DefaultRiskAnalysis" [#_"Wallet" (§ name wallet), #_"Transaction" (§ name tx), #_"List<Transaction>" (§ name dependencies)])
    (§ block
        (§ ass (§ name (.. this tx)) tx)
        (§ ass (§ name (.. this dependencies)) dependencies)
        (§ ass (§ name (.. this wallet)) wallet)
        this
    )

    #_override
    #_public
    (§ method #_"Result" (§ fn analyze) [])
    (§ block
        (Preconditions/checkState (§ not analyzed))
        (§ ass (§ name analyzed) true)

        (§ var #_"Result" (§ name result) (analyzeIsFinal))
        (§ if (§ expr result != nil && result != Result/OK))
        (§ block
            (§ return result)
        )

        (analyzeIsStandard)
    )

    #_nilable
    #_private
    (§ method- #_"Result" (§ fn analyzeIsFinal) [])
    (§ block
        ;; Transactions we create ourselves are, by definition, not at risk of double spending against us.
        (§ if (== (.. tx (getConfidence) (getSource)) TransactionConfidence/Source/SELF))
        (§ block
            (§ return Result/OK)
        )

        ;; We consider transactions that opt into replace-by-fee at risk of double spending.
        (§ if (.. tx (isOptInFullRBF)))
        (§ block
            (§ ass (§ name nonFinal) tx)
            (§ return Result/NON_FINAL)
        )

        (§ if (nil? wallet))
        (§ block
            (§ return nil)
        )

        (§ var #_"int" (§ name height) (.. wallet (getLastBlockSeenHeight)))
        (§ var #_"long" (§ name time) (.. wallet (getLastBlockSeenTimeSecs)))
        ;; If the transaction has a lock time specified in blocks, we consider that if the tx would become final
        ;; in the next block, it is not risky (as it would confirm normally).
        (§ var #_"int" (§ name adjustedHeight) (+ height 1))

        (§ if (§ not (.. tx (isFinal adjustedHeight, time))))
        (§ block
            (§ ass (§ name nonFinal) tx)
            (§ return Result/NON_FINAL)
        )

        (§ for (§ var #_"Transaction" (§ name dep)) :for dependencies)
        (§ block
            (§ if (§ not (.. dep (isFinal adjustedHeight, time))))
            (§ block
                (§ ass (§ name nonFinal) dep)
                (§ return Result/NON_FINAL)
            )
        )

        Result/OK
    )

    ;;;
     ; The reason a transaction is considered non-standard, returned by {@link #isStandard(org.bitcoinj.core.Transaction)}.
     ;;
    #_public
    (§ enum #_"RuleViolation"
        (§ item NONE)
        (§ item VERSION)
        (§ item DUST)
        (§ item SHORTEST_POSSIBLE_PUSHDATA)
        (§ item NONEMPTY_STACK) ;; Not yet implemented (for post 0.12)
        (§ item SIGNATURE_CANONICAL_ENCODING)
    )

    ;;;
     ; <p>Checks if a transaction is considered "standard" by Bitcoin Core's IsStandardTx and AreInputsStandard functions.</p>
     ;
     ; <p>Note that this method currently only implements a minimum of checks.  More to be added later.</p>
     ;;
    #_public
    #_static
    (§ defn #_"RuleViolation" (§ fn isStandard) [#_"Transaction" (§ name tx)])
    (§ block
        ;; TODO: Finish this function off.
        (§ if (§ expr 1 < (.. tx (getVersion)) || (.. tx (getVersion)) < 1))
        (§ block
            (.. log (warn "TX considered non-standard due to unknown version number {}", (.. tx (getVersion))))
            (§ return RuleViolation/VERSION)
        )

        (§ var #_"List<TransactionOutput>" (§ name outputs) (.. tx (getOutputs)))
        (§ for (§ var #_"int" (§ name i) 0) :for (§ expr i < (.. outputs (size))) :for (§ ass (§ name i) (+ i 1)))
        (§ block
            (§ var #_"TransactionOutput" (§ name output) (.. outputs (get i)))
            (§ var #_"RuleViolation" (§ name violation) (isOutputStandard output))
            (§ if (§ expr violation != RuleViolation/NONE))
            (§ block
                (.. log (warn "TX considered non-standard due to output {} violating rule {}", i, violation))
                (§ return violation)
            )
        )

        (§ var #_"List<TransactionInput>" (§ name inputs) (.. tx (getInputs)))
        (§ for (§ var #_"int" (§ name i) 0) :for (§ expr i < (.. inputs (size))) :for (§ ass (§ name i) (+ i 1)))
        (§ block
            (§ var #_"TransactionInput" (§ name input) (.. inputs (get i)))
            (§ var #_"RuleViolation" (§ name violation) (isInputStandard input))
            (§ if (§ expr violation != RuleViolation/NONE))
            (§ block
                (.. log (warn "TX considered non-standard due to input {} violating rule {}", i, violation))
                (§ return violation)
            )
        )

        RuleViolation/NONE
    )

    ;;;
     ; Checks the output to see if the script violates a standardness rule.  Not complete.
     ;;
    #_public
    #_static
    (§ defn #_"RuleViolation" (§ fn isOutputStandard) [#_"TransactionOutput" (§ name output)])
    (§ block
        (§ if (< (.. output (getValue) (compareTo MIN_ANALYSIS_NONDUST_OUTPUT)) 0))
        (§ block
            (§ return RuleViolation/DUST)
        )

        (§ for (§ var #_"ScriptChunk" (§ name chunk)) :for (.. output (getScriptPubKey) (getChunks)))
        (§ block
            (§ if (§ expr (.. chunk (isPushData)) && (§ not (.. chunk (isShortestPossiblePushData)))))
            (§ block
                (§ return RuleViolation/SHORTEST_POSSIBLE_PUSHDATA)
            )
        )

        RuleViolation/NONE
    )

    ;;; Checks if the given input passes some of the AreInputsStandard checks.  Not complete. ;;
    #_public
    #_static
    (§ defn #_"RuleViolation" (§ fn isInputStandard) [#_"TransactionInput" (§ name input)])
    (§ block
        (§ for (§ var #_"ScriptChunk" (§ name chunk)) :for (.. input (getScriptSig) (getChunks)))
        (§ block
            (§ if (§ expr (.. chunk data) != nil && (§ not (.. chunk (isShortestPossiblePushData)))))
            (§ block
                (§ return RuleViolation/SHORTEST_POSSIBLE_PUSHDATA)
            )

            (§ if (.. chunk (isPushData)))
            (§ block
                (§ var #_"ECDSASignature" (§ name signature))
                (§ try )
                (§ block
                    (§ ass (§ name signature) (.. ECKey/ECDSASignature (decodeFromDER (.. chunk data))))
                )
                (§ catch #_"IllegalArgumentException" (§ name _))
                (§ block
                    ;; Doesn't look like a signature.
                    (§ ass (§ name signature) nil)
                )
                (§ if (some? signature))
                (§ block
                    (§ if (§ not (TransactionSignature/isEncodingCanonical (.. chunk data))))
                    (§ block
                        (§ return RuleViolation/SIGNATURE_CANONICAL_ENCODING)
                    )
                    (§ if (§ not (.. signature (isCanonical))))
                    (§ block
                        (§ return RuleViolation/SIGNATURE_CANONICAL_ENCODING)
                    )
                )
            )
        )
        RuleViolation/NONE
    )

    #_private
    (§ method- #_"Result" (§ fn analyzeIsStandard) [])
    (§ block
        ;; The IsStandard rules don't apply on testnet, because they're just a safety mechanism and we don't
        ;; want to crush innovation with valueless test coins.
        (§ if (§ expr wallet != nil && (§ not (.. wallet (getNetworkParameters) (getId) (equals NetworkParameters/ID_MAINNET)))))
        (§ block
            (§ return Result/OK)
        )

        (§ var #_"RuleViolation" (§ name ruleViolation) (isStandard tx))
        (§ if (§ expr ruleViolation != RuleViolation/NONE))
        (§ block
            (§ ass (§ name nonStandard) tx)
            (§ return Result/NON_STANDARD)
        )

        (§ for (§ var #_"Transaction" (§ name dep)) :for dependencies)
        (§ block
            (§ ass (§ name ruleViolation) (isStandard dep))
            (§ if (§ expr ruleViolation != RuleViolation/NONE))
            (§ block
                (§ ass (§ name nonStandard) dep)
                (§ return Result/NON_STANDARD)
            )
        )

        Result/OK
    )

    ;;; Returns the transaction that was found to be non-standard, or null. ;;
    #_nilable
    #_public
    (§ method #_"Transaction" (§ fn getNonStandard) [])
    (§ block
        nonStandard
    )

    ;;; Returns the transaction that was found to be non-final, or null. ;;
    #_nilable
    #_public
    (§ method #_"Transaction" (§ fn getNonFinal) [])
    (§ block
        nonFinal
    )

    #_override
    #_public
    (§ method #_"String" (§ fn toString) [])
    (§ block
        (§ if (§ not analyzed))
        (§ block
            (§ return (§ expr "Pending risk analysis for " + (.. tx (getHashAsString))))
        )
        (§ if (some? nonFinal))
        (§ block
            (§ return (§ expr "Risky due to non-finality of " + (.. nonFinal (getHashAsString))))
        )
        (§ if (some? nonStandard))
        (§ block
            (§ return (§ expr "Risky due to non-standard tx " + (.. nonStandard (getHashAsString))))
        )

        "Non-risky"
    )

    #_public
    #_static
    (§ class #_"Analyzer" (§ implements #_"RiskAnalysis.Analyzer")
        #_override
        #_public
        (§ method #_"DefaultRiskAnalysis" (§ fn create) [#_"Wallet" (§ name wallet), #_"Transaction" (§ name tx), #_"List<Transaction>" (§ name dependencies)])
        (§ block
            (§ new #_"DefaultRiskAnalysis" wallet, tx, dependencies)
        )
    )

    #_public
    #_static
    (§ def #_"Analyzer" (§ name FACTORY) (§ new #_"Analyzer"))
)

#_(ns org.bitcoinj.wallet #_"DeterministicKeyChain"
    (:import [java.math BigInteger]
             [java.security SecureRandom]
             [java.util *]
             [java.util.concurrent Executor]
             [java.util.concurrent.locks ReentrantLock])
    (:import [com.google.common.base Preconditions Stopwatch]
             [com.google.common.collect ImmutableList Iterators]
             #_static [com.google.common.collect.Lists newArrayList]
             #_static [com.google.common.collect.Lists newLinkedList]
             [com.google.common.collect PeekingIterator]
             [com.google.protobuf ByteString]
             [org.slf4j Logger LoggerFactory]
             [org.spongycastle.crypto.params KeyParameter])
   (:require [org.bitcoinj.core BloomFilter ECKey NetworkParameters Utils]
             [org.bitcoinj.crypto *]
             [org.bitcoinj.script Script]
             [org.bitcoinj.utils Threading]
             [org.bitcoinj.wallet.listeners KeyChainEventListener]))

;;;
 ; <p>A deterministic key chain is a {@link KeyChain} that uses the
 ; <a href="https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki">BIP 32 standard</a>, as implemented by
 ; {@link org.bitcoinj.crypto.DeterministicHierarchy}, to derive all the keys in the keychain from a master seed.
 ; This type of wallet is extremely convenient and flexible.  Although backing up full wallet files is always a good
 ; idea, to recover money only the root seed needs to be preserved and that is a number small enough that it can be
 ; written down on paper or, when represented using a BIP 39 {@link org.bitcoinj.crypto.MnemonicCode},
 ; dictated over the phone (possibly even memorized).</p>
 ;
 ; <p>Deterministic key chains have other advantages: parts of the key tree can be selectively revealed to allow
 ; for auditing, and new public keys can be generated without access to the private keys, yielding a highly secure
 ; configuration for web servers which can accept payments into a wallet but not spend from them.  This does not work
 ; quite how you would expect due to a quirk of elliptic curve mathematics and the techniques used to deal with it.
 ; A watching wallet is not instantiated using the public part of the master key as you may imagine.  Instead, you
 ; need to take the account key (first child of the master key) and provide the public part of that to the watching
 ; wallet instead.  You can do this by calling {@link #getWatchingKey()} and then serializing it with
 ; {@link org.bitcoinj.crypto.DeterministicKey#serializePubB58(org.bitcoinj.core.NetworkParameters)}.  The resulting
 ; "xpub..." string encodes sufficient information about the account key to create a watching chain via
 ; {@link org.bitcoinj.crypto.DeterministicKey#deserializeB58(org.bitcoinj.crypto.DeterministicKey, String, org.bitcoinj.core.NetworkParameters)}
 ; (with null as the first parameter) and then
 ; {@link DeterministicKeyChain#DeterministicKeyChain(org.bitcoinj.crypto.DeterministicKey)}.</p>
 ;
 ; <p>This class builds on {@link org.bitcoinj.crypto.DeterministicHierarchy} and {@link org.bitcoinj.crypto.DeterministicKey}
 ; by adding support for serialization to and from protobufs, and encryption of parts of the key tree.  Internally it
 ; arranges itself as per the BIP 32 spec, with the seed being used to derive a master key, which is then used to derive
 ; an account key, the account key is used to derive two child keys called the <i>internal</i> and <i>external</i> parent
 ; keys (for change and handing out addresses respectively) and finally the actual leaf keys that users use hanging off
 ; the end.  The leaf keys are special in that they don't internally store the private part at all, instead choosing to
 ; rederive the private key from the parent when needed for signing.  This simplifies the design for encrypted key chains.</p>
 ;
 ; <p>The key chain manages a <i>lookahead zone</i>.  This zone is required because when scanning the chain, you don't
 ; know exactly which keys might receive payments.  The user may have handed out several addresses and received payments
 ; on them, but for latency reasons the block chain is requested from remote peers in bulk, meaning you must
 ; "look ahead" when calculating keys to put in the Bloom filter.  The default lookahead zone is 100 keys, meaning
 ; if the user hands out more than 100 addresses and receives payment on them before the chain is next scanned, some
 ; transactions might be missed.  100 is a reasonable choice for consumer wallets running on CPU constrained devices.
 ; For industrial wallets that are receiving keys all the time, a higher value is more appropriate.  Ideally DKC and
 ; the wallet would know how to adjust this value automatically, but that's not implemented at the moment.</p>
 ;
 ; <p>In fact the real size of the lookahead zone is larger than requested, by default, it's one third larger.  This
 ; is because the act of deriving new keys means recalculating the Bloom filters and this is an expensive operation.
 ; Thus, to ensure we don't have to recalculate on every single new key/address requested or seen we add more buffer
 ; space and only extend the lookahead zone when that buffer is exhausted.  For example with a lookahead zone of 100
 ; keys, you can request 33 keys before more keys will be calculated and the Bloom filter rebuilt and rebroadcast.
 ; But even when you are requesting the 33rd key, you will still be looking 100 keys ahead.</p>
 ;
 ; @author Andreas Schildbach
 ;;
#_suppress(§ opt "PublicStaticCollectionField")
#_public
(§ class #_"DeterministicKeyChain" (§ implements #_"EncryptableKeyChain")
    #_private
    #_static
    (§ def- #_"Logger" (§ name log) (LoggerFactory/getLogger (§ klass #_"DeterministicKeyChain")))
    #_public
    #_static
    (§ def #_"String" (§ name DEFAULT_PASSPHRASE_FOR_MNEMONIC) "")

    #_protected
    (§ field #_"ReentrantLock" (§ name lock) (Threading/lock "DeterministicKeyChain"))

    #_private
    (§ field- #_"DeterministicHierarchy" (§ name hierarchy))
    #_nilable
    #_private
    (§ field- #_"DeterministicKey" (§ name rootKey))
    #_nilable
    #_private
    (§ field- #_"DeterministicSeed" (§ name seed))

    ;; Paths through the key tree.  External keys are ones that are communicated to other parties.  Internal keys are
    ;; keys created for change addresses, coinbases, mixing, etc - anything that isn't communicated.  The distinction
    ;; is somewhat arbitrary but can be useful for audits.  The first number is the "account number" but we don't use
    ;; that feature yet.  In future we might hand out different accounts for cases where we wish to hand payers
    ;; a payment request that can generate lots of addresses independently.
    ;; The account path may be overridden by subclasses.
    #_public
    #_static
    (§ def #_"ImmutableList<ChildNumber>" (§ name ACCOUNT_ZERO_PATH) (ImmutableList/of ChildNumber/ZERO_HARDENED))
    #_public
    #_static
    (§ def #_"ImmutableList<ChildNumber>" (§ name EXTERNAL_SUBPATH) (ImmutableList/of ChildNumber/ZERO))
    #_public
    #_static
    (§ def #_"ImmutableList<ChildNumber>" (§ name INTERNAL_SUBPATH) (ImmutableList/of ChildNumber/ONE))
    #_public
    #_static
    (§ def #_"ImmutableList<ChildNumber>" (§ name EXTERNAL_PATH) (HDUtils/concat ACCOUNT_ZERO_PATH, EXTERNAL_SUBPATH))
    #_public
    #_static
    (§ def #_"ImmutableList<ChildNumber>" (§ name INTERNAL_PATH) (HDUtils/concat ACCOUNT_ZERO_PATH, INTERNAL_SUBPATH))
    ;; m / 44' / 0' / 0'
    #_public
    #_static
    (§ def #_"ImmutableList<ChildNumber>" (§ name BIP44_ACCOUNT_ZERO_PATH) (ImmutableList/of (§ new #_"ChildNumber" 44, true), ChildNumber/ZERO_HARDENED, ChildNumber/ZERO_HARDENED))

    ;; We try to ensure we have at least this many keys ready and waiting to be handed out via getKey().  See docs
    ;; for getLookaheadSize() for more info on what this is for.  The -1 value means it hasn't been calculated yet.
    ;; For new chains it's set to whatever the default is, unless overridden by setLookaheadSize.  For deserialized
    ;; chains, it will be calculated on demand from the number of loaded keys.
    #_private
    #_static
    (§ def- #_"int" (§ name LAZY_CALCULATE_LOOKAHEAD) -1)
    #_protected
    (§ field #_"int" (§ name lookaheadSize) 100)
    ;; The lookahead threshold causes us to batch up creation of new keys to minimize the frequency of Bloom filter
    ;; regenerations, which are expensive and will (in future) trigger chain download stalls/retries.  One third is
    ;; an efficiency tradeoff.
    #_protected
    (§ field #_"int" (§ name lookaheadThreshold) (calcDefaultLookaheadThreshold))

    #_private
    (§ method- #_"int" (§ fn calcDefaultLookaheadThreshold) [])
    (§ block
        (/ lookaheadSize 3)
    )

    ;; The parent keys for external keys (handed out to other people) and internal keys (used for change addresses).
    #_private
    (§ field- #_"DeterministicKey" (§ name externalParentKey))
    #_private
    (§ field- #_"DeterministicKey" (§ name internalParentKey))
    ;; How many keys on each path have actually been used.  This may be fewer than the number that have been
    ;; deserialized or held in memory, because of the lookahead zone.
    #_private
    (§ field- #_"int" (§ name issuedExternalKeys))
    #_private
    (§ field- #_"int" (§ name issuedInternalKeys))
    ;; A counter that is incremented each time a key in the lookahead threshold zone is marked as used and lookahead
    ;; is triggered.  The Wallet/KCG reads these counters and combines them so it can tell the Peer whether to throw
    ;; away the current block (and any future blocks in the same download batch) and restart chain sync once a new filter
    ;; has been calculated.  This field isn't persisted to the wallet as it's only relevant within a network session.
    #_private
    (§ field- #_"int" (§ name keyLookaheadEpoch))

    ;; We simplify by wrapping a basic key chain and that way we get some functionality like key lookup and event
    ;; listeners "for free".  All keys in the key tree appear here, even if they aren't meant to be used for
    ;; receiving money.
    #_private
    (§ field- #_"BasicKeyChain" (§ name basicKeyChain))

    ;; If set this chain is following another chain in a married KeyChainGroup.
    #_private
    (§ field- #_"boolean" (§ name isFollowing))

    ;; Holds a number of signatures required to spend.  It's the N from N-of-M CHECKMULTISIG script for P2SH transactions
    ;; and always 1 for other transaction types.
    #_protected
    (§ field #_"int" (§ name sigsRequiredToSpend) 1)

    #_public
    #_static
    (§ class #_"Builder<T extends Builder<T>>"
        #_protected
        (§ field #_"SecureRandom" (§ name random))
        #_protected
        (§ field #_"int" (§ name bits) 128)
        #_protected
        (§ field #_"String" (§ name passphrase))
        #_protected
        (§ field #_"long" (§ name seedCreationTimeSecs))
        #_protected
        (§ field #_"byte[]" (§ name entropy))
        #_protected
        (§ field #_"DeterministicSeed" (§ name seed))
        #_protected
        (§ field #_"DeterministicKey" (§ name watchingKey))

        #_protected
        (§ constructor #_"Builder" [])
        (§ block
            this
        )

        #_suppress(§ opt "unchecked")
        #_protected
        (§ method #_"T" (§ fn self) [])
        (§ block
            (§ cast #_"T" this)
        )

        ;;;
         ; Creates a deterministic key chain starting from the given entropy.  All keys yielded by this chain will be the
         ; same if the starting entropy is the same.  You should provide the creation time in seconds since the UNIX epoch
         ; for the seed: this lets us know from what part of the chain we can expect to see derived keys appear.
         ;;
        #_public
        (§ method #_"T" (§ fn entropy) [#_"byte[]" (§ name entropy)])
        (§ block
            (§ ass (§ name (.. this entropy)) entropy)
            (self)
        )

        ;;;
         ; Creates a deterministic key chain starting from the given seed.  All keys yielded by this chain will be the same
         ; if the starting seed is the same.
         ;;
        #_public
        (§ method #_"T" (§ fn seed) [#_"DeterministicSeed" (§ name seed)])
        (§ block
            (§ ass (§ name (.. this seed)) seed)
            (self)
        )

        ;;;
         ; Generates a new key chain with entropy selected randomly from the given {@link java.security.SecureRandom} object
         ; and of the requested size in bits.  The derived seed is further protected with a user selected passphrase (see BIP 39).
         ; @param random The random number generator - use new SecureRandom().
         ; @param bits The number of bits of entropy to use when generating entropy.  Either 128 (default), 192 or 256.
         ;;
        #_public
        (§ method #_"T" (§ fn random) [#_"SecureRandom" (§ name random), #_"int" (§ name bits)])
        (§ block
            (§ ass (§ name (.. this random)) random)
            (§ ass (§ name (.. this bits)) bits)
            (self)
        )

        ;;;
         ; Generates a new key chain with 128 bits of entropy selected randomly from the given {@link java.security.SecureRandom}
         ; object.  The derived seed is further protected with a user selected passphrase (see BIP 39).
         ; @param random The random number generator - use new SecureRandom().
         ;;
        #_public
        (§ method #_"T" (§ fn random) [#_"SecureRandom" (§ name random)])
        (§ block
            (§ ass (§ name (.. this random)) random)
            (self)
        )

        #_public
        (§ method #_"T" (§ fn watchingKey) [#_"DeterministicKey" (§ name watchingKey)])
        (§ block
            (§ ass (§ name (.. this watchingKey)) watchingKey)
            (self)
        )

        #_public
        (§ method #_"T" (§ fn seedCreationTimeSecs) [#_"long" (§ name seedCreationTimeSecs)])
        (§ block
            (§ ass (§ name (.. this seedCreationTimeSecs)) seedCreationTimeSecs)
            (self)
        )

        ;;;
         ; The passphrase to use with the generated mnemonic, or null if you would like to use the default empty string.
         ; Currently must be the empty string.
         ;;
        #_public
        (§ method #_"T" (§ fn passphrase) [#_"String" (§ name passphrase)])
        (§ block
            ;; FIXME support non-empty passphrase
            (§ ass (§ name (.. this passphrase)) passphrase)
            (self)
        )

        #_public
        (§ method #_"DeterministicKeyChain" (§ fn build) [])
        (§ block
            (Preconditions/checkState (§ expr random != nil || entropy != nil || seed != nil || watchingKey!= nil), "Must provide either entropy or random or seed or watchingKey")
            (Preconditions/checkState (§ expr passphrase == nil || seed == nil), "Passphrase must not be specified with seed")

            ;; Default passphrase to "" if not specified.
            (§ if (some? random))
            (§ block
                (§ return (§ new #_"DeterministicKeyChain" random, bits, (getPassphrase), seedCreationTimeSecs))
            )

            (§ if (some? entropy))
            (§ block
                (§ return (§ new #_"DeterministicKeyChain" entropy, (getPassphrase), seedCreationTimeSecs))
            )

            (§ if (some? seed))
            (§ block
                (.. seed (setCreationTimeSeconds seedCreationTimeSecs))
                (§ return (§ new #_"DeterministicKeyChain" seed))
            )

            (.. watchingKey (setCreationTimeSeconds seedCreationTimeSecs))
            (§ new #_"DeterministicKeyChain" watchingKey)
        )

        #_protected
        (§ method #_"String" (§ fn getPassphrase) [])
        (§ block
            (or passphrase DEFAULT_PASSPHRASE_FOR_MNEMONIC)
        )
    )

    #_public
    #_static
    (§ defn #_"Builder<?>" (§ fn builder) [])
    (§ block
        (§ new #_"Builder")
    )

    ;;;
     ; Generates a new key chain with entropy selected randomly from the given {@link java.security.SecureRandom}
     ; object and the default entropy size.
     ;;
    #_public
    (§ constructor #_"DeterministicKeyChain" [#_"SecureRandom" (§ name random)])
    (§ block
        (§ this random, DeterministicSeed/DEFAULT_SEED_ENTROPY_BITS, DEFAULT_PASSPHRASE_FOR_MNEMONIC, (Utils/currentTimeSeconds))
        this
    )

    ;;;
     ; Generates a new key chain with entropy selected randomly from the given {@link java.security.SecureRandom}
     ; object and of the requested size in bits.
     ;;
    #_public
    (§ constructor #_"DeterministicKeyChain" [#_"SecureRandom" (§ name random), #_"int" (§ name bits)])
    (§ block
        (§ this random, bits, DEFAULT_PASSPHRASE_FOR_MNEMONIC, (Utils/currentTimeSeconds))
        this
    )

    ;;;
     ; Generates a new key chain with entropy selected randomly from the given {@link java.security.SecureRandom}
     ; object and of the requested size in bits.  The derived seed is further protected with a user selected passphrase
     ; (see BIP 39).
     ;;
    #_public
    (§ constructor #_"DeterministicKeyChain" [#_"SecureRandom" (§ name random), #_"int" (§ name bits), #_"String" (§ name passphrase), #_"long" (§ name seedCreationTimeSecs)])
    (§ block
        (§ this (§ new #_"DeterministicSeed" random, bits, passphrase, seedCreationTimeSecs))
        this
    )

    ;;;
     ; Creates a deterministic key chain starting from the given entropy.  All keys yielded by this chain will be the
     ; same if the starting seed is the same.  You should provide the creation time in seconds since the UNIX epoch
     ; for the seed: this lets us know from what part of the chain we can expect to see derived keys appear.
     ;;
    #_public
    (§ constructor #_"DeterministicKeyChain" [#_"byte[]" (§ name entropy), #_"String" (§ name passphrase), #_"long" (§ name seedCreationTimeSecs)])
    (§ block
        (§ this (§ new #_"DeterministicSeed" entropy, passphrase, seedCreationTimeSecs))
        this
    )

    ;;;
     ; Creates a deterministic key chain starting from the given seed.  All keys yielded by this chain will be the
     ; same if the starting seed is the same.
     ;;
    #_protected
    (§ constructor #_"DeterministicKeyChain" [#_"DeterministicSeed" (§ name seed)])
    (§ block
        (§ this seed, nil)
        this
    )

    ;;;
     ; Creates a deterministic key chain that watches the given (public only) root key.  You can use this to calculate
     ; balances and generally follow along, but spending is not possible with such a chain.  Currently you can't use
     ; this method to watch an arbitrary fragment of some other tree, this limitation may be removed in future.
     ;;
    #_public
    (§ constructor #_"DeterministicKeyChain" [#_"DeterministicKey" (§ name watchingKey)])
    (§ block
        (Preconditions/checkArgument (.. watchingKey (isPubKeyOnly)), "Private subtrees not currently supported: if you got this key from DKC.getWatchingKey() then use .dropPrivate().dropParent() on it first.")
        (Preconditions/checkArgument (§ expr (.. watchingKey (getPath) (size)) == (.. (getAccountPath) (size))), "You can only watch an account key currently")

        (§ ass (§ name basicKeyChain) (§ new #_"BasicKeyChain"))
        (§ ass (§ name (.. this seed)) nil)
        (§ ass (§ name (.. this rootKey)) nil)
        (.. basicKeyChain (importKey watchingKey))
        (§ ass (§ name hierarchy) (§ new #_"DeterministicHierarchy" watchingKey))
        (initializeHierarchyUnencrypted watchingKey)
        this
    )

    ;;;
     ; <p>Creates a deterministic key chain with the given watch key.  If <code>isFollowing</code> flag is set then this
     ; keychain follows some other keychain.  In a married wallet following keychain represents "spouse's" keychain.</p>
     ; <p>Watch key has to be an account key.</p>
     ;;
    #_protected
    (§ constructor #_"DeterministicKeyChain" [#_"DeterministicKey" (§ name watchKey), #_"boolean" (§ name isFollowing)])
    (§ block
        (§ this watchKey)
        (§ ass (§ name (.. this isFollowing)) isFollowing)
        this
    )

    ;;;
     ; Creates a deterministic key chain with the given watch key and that follows some other keychain.
     ; In a married wallet following keychain represents "spouse".
     ; Watch key has to be an account key.
     ;;
    #_public
    #_static
    (§ defn #_"DeterministicKeyChain" (§ fn watchAndFollow) [#_"DeterministicKey" (§ name watchKey)])
    (§ block
        (§ new #_"DeterministicKeyChain" watchKey, true)
    )

    ;;;
     ; Creates a key chain that watches the given account key.
     ;;
    #_public
    #_static
    (§ defn #_"DeterministicKeyChain" (§ fn watch) [#_"DeterministicKey" (§ name accountKey)])
    (§ block
        (§ new #_"DeterministicKeyChain" accountKey)
    )

    ;;;
     ; For use in {@link KeyChainFactory} during deserialization.
     ;;
    #_protected
    (§ constructor #_"DeterministicKeyChain" [#_"DeterministicSeed" (§ name seed), #_nilable #_"KeyCrypter" (§ name crypter)])
    (§ block
        (§ ass (§ name (.. this seed)) seed)
        (§ ass (§ name basicKeyChain) (§ new #_"BasicKeyChain" crypter))
        (§ if (§ not (.. seed (isEncrypted))))
        (§ block
            (§ ass (§ name rootKey) (HDKeyDerivation/createMasterPrivateKey (Preconditions/checkNotNull (.. seed (getSeedBytes)))))
            (.. rootKey (setCreationTimeSeconds (.. seed (getCreationTimeSeconds))))
            (.. basicKeyChain (importKey rootKey))
            (§ ass (§ name hierarchy) (§ new #_"DeterministicHierarchy" rootKey))
            (§ for (§ var #_"int" (§ name i) 1) :for (§ expr i <= (.. (getAccountPath) (size))) :for (§ ass (§ name i) (+ i 1)))
            (§ block
                (.. basicKeyChain (importKey (.. hierarchy (get (.. (getAccountPath) (subList 0, i)), false, true))))
            )
            (initializeHierarchyUnencrypted rootKey)
        )
        ;; Else...
        ;; We can't initialize ourselves with just an encrypted seed, so we expected deserialization code
        ;; to do the rest of the setup (loading the root key).
        this
    )

    ;;;
     ; For use in encryption when {@link #toEncrypted(KeyCrypter, KeyParameter)} is called,
     ; so that subclasses can override that method and create an instance of the right class.
     ;
     ; See also {@link #makeKeyChainFromSeed(DeterministicSeed)}.
     ;;
    #_protected
    (§ constructor #_"DeterministicKeyChain" [#_"KeyCrypter" (§ name crypter), #_"KeyParameter" (§ name aesKey), #_"DeterministicKeyChain" (§ name chain)])
    (§ block
        ;; Can't encrypt a watching chain.
        (Preconditions/checkNotNull (.. chain rootKey))
        (Preconditions/checkNotNull (.. chain seed))

        (Preconditions/checkArgument (§ not (.. chain rootKey (isEncrypted))), "Chain already encrypted")

        (§ ass (§ name (.. this issuedExternalKeys)) (.. chain issuedExternalKeys))
        (§ ass (§ name (.. this issuedInternalKeys)) (.. chain issuedInternalKeys))

        (§ ass (§ name (.. this lookaheadSize)) (.. chain lookaheadSize))
        (§ ass (§ name (.. this lookaheadThreshold)) (.. chain lookaheadThreshold))

        (§ ass (§ name (.. this seed)) (.. chain seed (encrypt crypter, aesKey)))
        (§ ass (§ name basicKeyChain) (§ new #_"BasicKeyChain" crypter))
        ;; The first number is the "account number" but we don't use that feature.
        (§ ass (§ name rootKey) (.. chain rootKey (encrypt crypter, aesKey, nil)))
        (§ ass (§ name hierarchy) (§ new #_"DeterministicHierarchy" rootKey))
        (.. basicKeyChain (importKey rootKey))

        (§ for (§ var #_"int" (§ name i) 1) :for (§ expr i < (.. (getAccountPath) (size))) :for (§ ass (§ name i) (+ i 1)))
        (§ block
            (encryptNonLeaf aesKey, chain, rootKey, (.. (getAccountPath) (subList 0, i)))
        )

        (§ var #_"DeterministicKey" (§ name account) (encryptNonLeaf aesKey, chain, rootKey, (getAccountPath)))
        (§ ass (§ name externalParentKey) (encryptNonLeaf aesKey, chain, account, (HDUtils/concat (getAccountPath), EXTERNAL_SUBPATH)))
        (§ ass (§ name internalParentKey) (encryptNonLeaf aesKey, chain, account, (HDUtils/concat (getAccountPath), INTERNAL_SUBPATH)))

        ;; Now copy the (pubkey only) leaf keys across to avoid rederiving them.  The private key bytes are missing
        ;; anyway so there's nothing to encrypt.
        (§ for (§ var #_"ECKey" (§ name eckey)) :for (.. chain basicKeyChain (getKeys)))
        (§ block
            (§ var #_"DeterministicKey" (§ name key) (§ cast #_"DeterministicKey" eckey))
            (§ if (!= (.. key (getPath) (size)) (+ (.. (getAccountPath) (size)) 2)))
            (§ block
                (§ continue ) ;; Not a leaf key.
            )

            (§ var #_"DeterministicKey" (§ name parent) (.. hierarchy (get (.. (Preconditions/checkNotNull (.. key (getParent))) (getPath)), false, false)))
            ;; Clone the key to the new encrypted hierarchy.
            (§ ass (§ name key) (§ new #_"DeterministicKey" (.. key (dropPrivateBytes)), parent))
            (.. hierarchy (putKey key))
            (.. basicKeyChain (importKey key))
        )
        this
    )

    ;;; Override in subclasses to use a different account derivation path. ;;
    #_protected
    (§ method #_"ImmutableList<ChildNumber>" (§ fn getAccountPath) [])
    (§ block
        ACCOUNT_ZERO_PATH
    )

    #_private
    (§ method- #_"DeterministicKey" (§ fn encryptNonLeaf) [#_"KeyParameter" (§ name aesKey), #_"DeterministicKeyChain" (§ name chain), #_"DeterministicKey" (§ name parent), #_"ImmutableList<ChildNumber>" (§ name path)])
    (§ block
        (§ var #_"DeterministicKey" (§ name key) (.. chain hierarchy (get path, false, false)))
        (§ ass (§ name key) (.. key (encrypt (Preconditions/checkNotNull (.. basicKeyChain (getKeyCrypter))), aesKey, parent)))
        (.. hierarchy (putKey key))
        (.. basicKeyChain (importKey key))
        key
    )

    ;; Derives the account path keys and inserts them into the basic key chain.
    ;; This is important to preserve their order for serialization, amongst other things.
    #_private
    (§ method- #_"void" (§ fn initializeHierarchyUnencrypted) [#_"DeterministicKey" (§ name baseKey)])
    (§ block
        (§ ass (§ name externalParentKey) (.. hierarchy (deriveChild (getAccountPath), false, false, ChildNumber/ZERO)))
        (§ ass (§ name internalParentKey) (.. hierarchy (deriveChild (getAccountPath), false, false, ChildNumber/ONE)))
        (.. basicKeyChain (importKey externalParentKey))
        (.. basicKeyChain (importKey internalParentKey))
        nil
    )

    ;;; Returns a freshly derived key that has not been returned by this method before. ;;
    #_override
    #_public
    (§ method #_"DeterministicKey" (§ fn getKey) [#_"KeyPurpose" (§ name purpose)])
    (§ block
        (.. (getKeys purpose, 1) (get 0))
    )

    ;;; Returns freshly derived key/s that have not been returned by this method before. ;;
    #_override
    #_public
    (§ method #_"List<DeterministicKey>" (§ fn getKeys) [#_"KeyPurpose" (§ name purpose), #_"int" (§ name numberOfKeys)])
    (§ block
        (Preconditions/checkArgument (< 0 numberOfKeys))
        (.. lock (lock))
        (§ try )
        (§ block
            (§ var #_"DeterministicKey" (§ name parentKey))
            (§ var #_"int" (§ name index))
            (§ switch purpose)
            (§ block
                ;; Map both REFUND and RECEIVE_KEYS to the same branch for now.  Refunds are a feature of the BIP 70
                ;; payment protocol.  Later we may wish to map it to a different branch (in a new wallet version?).
                ;; This would allow a watching wallet to only be able to see inbound payments, but not change
                ;; (i.e. spends) or refunds.  Might be useful for auditing ...
                (§ case RECEIVE_FUNDS)
                (§ case REFUND)
                (§ block
                    (§ ass (§ name issuedExternalKeys) (+ issuedExternalKeys numberOfKeys))
                    (§ ass (§ name index) issuedExternalKeys)
                    (§ ass (§ name parentKey) externalParentKey)
                    (§ break )
                )
                (§ case AUTHENTICATION)
                (§ case CHANGE)
                (§ block
                    (§ ass (§ name issuedInternalKeys) (+ issuedInternalKeys numberOfKeys))
                    (§ ass (§ name index) issuedInternalKeys)
                    (§ ass (§ name parentKey) internalParentKey)
                    (§ break )
                )
                (§ default )
                (§ block
                    (§ throw (§ new #_"UnsupportedOperationException"))
                )
            )
            ;; Optimization: potentially do a very quick key generation for just the number of keys we need if we
            ;; didn't already create them, ignoring the configured lookahead size.  This ensures we'll be able to
            ;; retrieve the keys in the following loop, but if we're totally fresh and didn't get a chance to
            ;; calculate the lookahead keys yet, this will not block waiting to calculate 100+ EC point multiplies.
            ;; On slow/crappy Android phones looking ahead 100 keys can take ~5 seconds but the OS will kill us
            ;; if we block for just one second on the UI thread.  Because UI threads may need an address in order
            ;; to render the screen, we need getKeys to be fast even if the wallet is totally brand new and lookahead
            ;; didn't happen yet.
            ;;
            ;; It's safe to do this because when a network thread tries to calculate a Bloom filter, we'll go ahead
            ;; and calculate the full lookahead zone there, so network requests will always use the right amount.
            (§ var #_"List<DeterministicKey>" (§ name lookahead) (maybeLookAhead parentKey, index, 0, 0))
            (.. basicKeyChain (importKeys lookahead))
            (§ var #_"List<DeterministicKey>" (§ name keys) (§ new #_"ArrayList<>" numberOfKeys))
            (§ for (§ var #_"int" (§ name i) 0) :for (< i numberOfKeys) :for (§ ass (§ name i) (+ i 1)))
            (§ block
                (§ var #_"ImmutableList<ChildNumber>" (§ name path) (HDUtils/append (.. parentKey (getPath)), (§ new #_"ChildNumber" (§ expr index - numberOfKeys + i), false)))
                (§ var #_"DeterministicKey" (§ name k) (.. hierarchy (get path, false, false)))
                ;; Just a last minute sanity check before we hand the key out to the app for usage.  This isn't
                ;; inspired by any real problem reports from bitcoinj users, but I've heard of cases via the grapevine
                ;; of places that lost money due to bitflips causing addresses to not match keys.  Of course in an
                ;; environment with flaky RAM there's no real way to always win: bitflips could be introduced at any
                ;; other layer.  But as we're potentially retrieving from long term storage here, check anyway.
                (checkForBitFlip k)
                (.. keys (add k))
            )
            (§ return keys)
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    #_private
    (§ method- #_"void" (§ fn checkForBitFlip) [#_"DeterministicKey" (§ name k)])
    (§ block
        (§ var #_"DeterministicKey" (§ name parent) (Preconditions/checkNotNull (.. k (getParent))))
        (§ var #_"byte[]" (§ name rederived) (.. (HDKeyDerivation/deriveChildKeyBytesFromPublic parent, (.. k (getChildNumber)), HDKeyDerivation/PublicDeriveMode/WITH_INVERSION) keyBytes))
        (§ var #_"byte[]" (§ name actual) (.. k (getPubKey)))
        (§ if (§ not (Arrays/equals rederived, actual)))
        (§ block
            (§ throw (§ new #_"IllegalStateException" (String/format Locale/US, "Bit-flip check failed: %s vs %s", (Arrays/toString rederived), (Arrays/toString actual))))
        )
        nil
    )

    ;;;
     ; Mark the DeterministicKey as used.
     ; Also correct the issued{Internal|External}Keys counter, because all lower children seem to be requested already.
     ; If the counter was updated, we also might trigger lookahead.
     ;;
    #_public
    (§ method #_"DeterministicKey" (§ fn markKeyAsUsed) [#_"DeterministicKey" (§ name k)])
    (§ block
        (§ var #_"int" (§ name numChildren) (+ (.. k (getChildNumber) (i)) 1))

        (§ if (== (.. k (getParent)) internalParentKey))
        (§ block
            (§ if (< issuedInternalKeys numChildren))
            (§ block
                (§ ass (§ name issuedInternalKeys) numChildren)
                (maybeLookAhead)
            )
        )
        (§ elseif (== (.. k (getParent)) externalParentKey))
        (§ block
            (§ if (< issuedExternalKeys numChildren))
            (§ block
                (§ ass (§ name issuedExternalKeys) numChildren)
                (maybeLookAhead)
            )
        )
        k
    )

    #_public
    (§ method #_"DeterministicKey" (§ fn findKeyFromPubHash) [#_"byte[]" (§ name pubkeyHash)])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ return (§ cast #_"DeterministicKey" (.. basicKeyChain (findKeyFromPubHash pubkeyHash))))
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    #_public
    (§ method #_"DeterministicKey" (§ fn findKeyFromPubKey) [#_"byte[]" (§ name pubkey)])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ return (§ cast #_"DeterministicKey" (.. basicKeyChain (findKeyFromPubKey pubkey))))
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    ;;;
     ; Mark the DeterministicKeys as used, if they match the pubkeyHash.
     ; See {@link DeterministicKeyChain#markKeyAsUsed(DeterministicKey)} for more info on this.
     ;;
    #_nilable
    #_public
    (§ method #_"DeterministicKey" (§ fn markPubHashAsUsed) [#_"byte[]" (§ name pubkeyHash)])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ var #_"DeterministicKey" (§ name k) (§ cast #_"DeterministicKey" (.. basicKeyChain (findKeyFromPubHash pubkeyHash))))
            (§ if (some? k))
            (§ block
                (markKeyAsUsed k)
            )
            (§ return k)
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    ;;;
     ; Mark the DeterministicKeys as used, if they match the pubkey.
     ; See {@link DeterministicKeyChain#markKeyAsUsed(DeterministicKey)} for more info on this.
     ;;
    #_nilable
    #_public
    (§ method #_"DeterministicKey" (§ fn markPubKeyAsUsed) [#_"byte[]" (§ name pubkey)])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ var #_"DeterministicKey" (§ name k) (§ cast #_"DeterministicKey" (.. basicKeyChain (findKeyFromPubKey pubkey))))
            (§ if (some? k))
            (§ block
                (markKeyAsUsed k)
            )
            (§ return k)
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    #_override
    #_public
    (§ method #_"boolean" (§ fn hasKey) [#_"ECKey" (§ name key)])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ return (.. basicKeyChain (hasKey key)))
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    ;;; Returns the deterministic key for the given absolute path in the hierarchy. ;;
    #_protected
    (§ method #_"DeterministicKey" (§ fn getKeyByPath) [#_"ChildNumber..." (§ name path)])
    (§ block
        (getKeyByPath (ImmutableList/copyOf path))
    )

    ;;; Returns the deterministic key for the given absolute path in the hierarchy. ;;
    #_protected
    (§ method #_"DeterministicKey" (§ fn getKeyByPath) [#_"List<ChildNumber>" (§ name path)])
    (§ block
        (getKeyByPath path, false)
    )

    ;;; Returns the deterministic key for the given absolute path in the hierarchy, optionally creating it. ;;
    #_public
    (§ method #_"DeterministicKey" (§ fn getKeyByPath) [#_"List<ChildNumber>" (§ name path), #_"boolean" (§ name create)])
    (§ block
        (.. hierarchy (get path, false, create))
    )

    ;;;
     ; <p>An alias for <code>getKeyByPath(getAccountPath())</code>.</p>
     ;
     ; <p>Use this when you would like to create a watching key chain that follows this one, but can't spend money from it.
     ; The returned key can be serialized and then passed into {@link #watch(org.bitcoinj.crypto.DeterministicKey)}
     ; on another system to watch the hierarchy.</p>
     ;
     ; <p>Note that the returned key is not pubkey only unless this key chain already is: the returned key can still
     ; be used for signing etc if the private key bytes are available.</p>
     ;;
    #_public
    (§ method #_"DeterministicKey" (§ fn getWatchingKey) [])
    (§ block
        (getKeyByPath (getAccountPath))
    )

    ;;; Returns true if this chain is watch only, meaning it has public keys but no private key. ;;
    #_public
    (§ method #_"boolean" (§ fn isWatching) [])
    (§ block
        (.. (getWatchingKey) (isWatching))
    )

    #_override
    #_public
    (§ method #_"int" (§ fn numKeys) [])
    (§ block
        ;; We need to return here the total number of keys including the lookahead zone, not the number
        ;; of keys we have issued via getKey/freshReceiveKey.
        (.. lock (lock))
        (§ try )
        (§ block
            (maybeLookAhead)
            (§ return (.. basicKeyChain (numKeys)))
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    ;;;
     ; Returns number of leaf keys used including both internal and external paths.  This may be fewer
     ; than the number that have been deserialized or held in memory, because of the lookahead zone.
     ;;
    #_public
    (§ method #_"int" (§ fn numLeafKeysIssued) [])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ return (+ issuedExternalKeys issuedInternalKeys))
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    #_override
    #_public
    (§ method #_"long" (§ fn getEarliestKeyCreationTime) [])
    (§ block
        (if (some? seed) (.. seed (getCreationTimeSeconds)) (.. (getWatchingKey) (getCreationTimeSeconds)))
    )

    #_override
    #_public
    (§ method #_"void" (§ fn addEventListener) [#_"KeyChainEventListener" (§ name listener)])
    (§ block
        (.. basicKeyChain (addEventListener listener))
        nil
    )

    #_override
    #_public
    (§ method #_"void" (§ fn addEventListener) [#_"KeyChainEventListener" (§ name listener), #_"Executor" (§ name executor)])
    (§ block
        (.. basicKeyChain (addEventListener listener, executor))
        nil
    )

    #_override
    #_public
    (§ method #_"boolean" (§ fn removeEventListener) [#_"KeyChainEventListener" (§ name listener)])
    (§ block
        (.. basicKeyChain (removeEventListener listener))
    )

    ;;; Returns a list of words that represent the seed or null if this chain is a watching chain. ;;
    #_nilable
    #_public
    (§ method #_"List<String>" (§ fn getMnemonicCode) [])
    (§ block
        (§ if (nil? seed))
        (§ block
            (§ return nil)
        )

        (.. lock (lock))
        (§ try )
        (§ block
            (§ return (.. seed (getMnemonicCode)))
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    ;;;
     ; Return true if this keychain is following another keychain.
     ;;
    #_public
    (§ method #_"boolean" (§ fn isFollowing) [])
    (§ block
        isFollowing
    )

    #_override
    #_public
    (§ method #_"List<Protos.Key>" (§ fn serializeToProtobuf) [])
    (§ block
        (§ var #_"List<Protos.Key>" (§ name result) (newArrayList))
        (.. lock (lock))
        (§ try )
        (§ block
            (.. result (addAll (serializeMyselfToProtobuf)))
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
        result
    )

    #_protected
    (§ method #_"List<Protos.Key>" (§ fn serializeMyselfToProtobuf) [])
    (§ block
        ;; Most of the serialization work is delegated to the basic key chain, which will serialize the bulk of the
        ;; data (handling encryption along the way), and letting us patch it up with the extra data we care about.
        (§ var #_"LinkedList<Protos.Key>" (§ name entries) (newLinkedList))
        (§ if (some? seed))
        (§ block
            (§ var #_"Protos.Key.Builder" (§ name mnemonicEntry) (BasicKeyChain/serializeEncryptableItem seed))
            (.. mnemonicEntry (setType Protos/Key/Type/DETERMINISTIC_MNEMONIC))
            (serializeSeedEncryptableItem seed, mnemonicEntry)
            (.. entries (add (.. mnemonicEntry (build))))
        )
        (§ var #_"Map<ECKey, Protos.Key.Builder>" (§ name keys) (.. basicKeyChain (serializeToEditableProtobufs)))
        (§ for (§ var #_"Map.Entry<ECKey, Protos.Key.Builder>" (§ name entry)) :for (.. keys (entrySet)))
        (§ block
            (§ var #_"DeterministicKey" (§ name key) (§ cast #_"DeterministicKey" (.. entry (getKey))))
            (§ var #_"Protos.Key.Builder" (§ name proto) (.. entry (getValue)))
            (.. proto (setType Protos/Key/Type/DETERMINISTIC_KEY))
            (§ var #_"Protos.DeterministicKey.Builder" (§ name detKey) (.. proto (getDeterministicKeyBuilder)))
            (.. detKey (setChainCode (ByteString/copyFrom (.. key (getChainCode)))))
            (§ for (§ var #_"ChildNumber" (§ name num)) :for (.. key (getPath)))
            (§ block
                (.. detKey (addPath (.. num (i))))
            )
            (§ if (.. key (equals externalParentKey)))
            (§ block
                (.. detKey (setIssuedSubkeys issuedExternalKeys))
                (.. detKey (setLookaheadSize lookaheadSize))
                (.. detKey (setSigsRequiredToSpend (getSigsRequiredToSpend)))
            )
            (§ elseif (.. key (equals internalParentKey)))
            (§ block
                (.. detKey (setIssuedSubkeys issuedInternalKeys))
                (.. detKey (setLookaheadSize lookaheadSize))
                (.. detKey (setSigsRequiredToSpend (getSigsRequiredToSpend)))
            )
            ;; Flag the very first key of following keychain.
            (§ if (§ expr (.. entries (isEmpty)) && (isFollowing)))
            (§ block
                (.. detKey (setIsFollowing true))
            )
            ;; HD keys inherit the timestamp of their parent if they have one, so no need to serialize it.
            (§ if (!= (.. key (getParent)) nil))
            (§ block
                (.. proto (clearCreationTimestamp))
            )
            (.. entries (add (.. proto (build))))
        )
        entries
    )

    #_static
    (§ defn #_"List<DeterministicKeyChain>" (§ fn fromProtobuf) [#_"List<Protos.Key>" (§ name keys), #_nilable #_"KeyCrypter" (§ name crypter)])
        (§ throws #_"UnreadableWalletException")
    (§ block
        (fromProtobuf keys, crypter, (§ new #_"DefaultKeyChainFactory"))
    )

    ;;;
     ; Returns all the key chains found in the given list of keys.  Typically there will only be one,
     ; but in the case of key rotation it can happen that there are multiple chains found.
     ;;
    #_public
    #_static
    (§ defn #_"List<DeterministicKeyChain>" (§ fn fromProtobuf) [#_"List<Protos.Key>" (§ name keys), #_nilable #_"KeyCrypter" (§ name crypter), #_"KeyChainFactory" (§ name factory)])
        (§ throws #_"UnreadableWalletException")
    (§ block
        (§ var #_"List<DeterministicKeyChain>" (§ name chains) (newLinkedList))
        (§ var #_"DeterministicSeed" (§ name seed) nil)
        (§ var #_"DeterministicKeyChain" (§ name chain) nil)

        (§ var #_"int" (§ name lookaheadSize) -1)
        (§ var #_"int" (§ name sigsRequiredToSpend) 1)

        (§ var #_"PeekingIterator<Protos.Key>" (§ name iter) (Iterators/peekingIterator (.. keys (iterator))))
        (§ while (.. iter (hasNext)))
        (§ block
            (§ var #_"Protos.Key" (§ name key) (.. iter (next)))
            (§ var #_"Protos.Key.Type" (§ name t) (.. key (getType)))
            (§ if (§ expr t == Protos/Key/Type/DETERMINISTIC_MNEMONIC))
            (§ block
                (§ if (some? chain))
                (§ block
                    (Preconditions/checkState (<= 0 lookaheadSize))

                    (.. chain (setLookaheadSize lookaheadSize))
                    (.. chain (setSigsRequiredToSpend sigsRequiredToSpend))
                    (.. chain (maybeLookAhead))
                    (.. chains (add chain))
                    (§ ass (§ name chain) nil)
                )
                (§ var #_"long" (§ name timestamp) (/ (.. key (getCreationTimestamp)) 1000))
                (§ var #_"String" (§ name passphrase) DEFAULT_PASSPHRASE_FOR_MNEMONIC) ;; FIXME allow non-empty passphrase
                (§ if (.. key (hasSecretBytes)))
                (§ block
                    (§ if (.. key (hasEncryptedDeterministicSeed)))
                    (§ block
                        (§ throw (§ new #_"UnreadableWalletException" (§ expr "Malformed key proto: " + key)))
                    )

                    (§ var #_"byte[]" (§ name seedBytes) nil)
                    (§ if (.. key (hasDeterministicSeed)))
                    (§ block
                        (§ ass (§ name seedBytes) (.. key (getDeterministicSeed) (toByteArray)))
                    )
                    (§ ass (§ name seed) (§ new #_"DeterministicSeed" (.. key (getSecretBytes) (toStringUtf8)), seedBytes, passphrase, timestamp))
                )
                (§ elseif (.. key (hasEncryptedData)))
                (§ block
                    (§ if (.. key (hasDeterministicSeed)))
                    (§ block
                        (§ throw (§ new #_"UnreadableWalletException" (§ expr "Malformed key proto: " + key)))
                    )

                    (§ var #_"EncryptedData" (§ name data) (§ new #_"EncryptedData" (.. key (getEncryptedData) (getInitialisationVector) (toByteArray)), (.. key (getEncryptedData) (getEncryptedPrivateKey) (toByteArray))))
                    (§ var #_"EncryptedData" (§ name encryptedSeedBytes) nil)
                    (§ if (.. key (hasEncryptedDeterministicSeed)))
                    (§ block
                        (§ var #_"Protos.EncryptedData" (§ name encryptedSeed) (.. key (getEncryptedDeterministicSeed)))
                        (§ ass (§ name encryptedSeedBytes) (§ new #_"EncryptedData" (.. encryptedSeed (getInitialisationVector) (toByteArray)), (.. encryptedSeed (getEncryptedPrivateKey) (toByteArray))))
                    )
                    (§ ass (§ name seed) (§ new #_"DeterministicSeed" data, encryptedSeedBytes, timestamp))
                )
                (§ else )
                (§ block
                    (§ throw (§ new #_"UnreadableWalletException" (§ expr "Malformed key proto: " + key)))
                )

                (§ if (.. log (isDebugEnabled)))
                (§ block
                    (.. log (debug "Deserializing: DETERMINISTIC_MNEMONIC: {}", seed))
                )
            )
            (§ elseif (§ expr t == Protos/Key/Type/DETERMINISTIC_KEY))
            (§ block
                (§ if (§ not (.. key (hasDeterministicKey))))
                (§ block
                    (§ throw (§ new #_"UnreadableWalletException" (§ expr "Deterministic key missing extra data: " + key)))
                )

                (§ var #_"byte[]" (§ name chainCode) (.. key (getDeterministicKey) (getChainCode) (toByteArray)))
                ;; Deserialize the path through the tree.
                (§ var #_"LinkedList<ChildNumber>" (§ name path) (newLinkedList))
                (§ for (§ var #_"int" (§ name i)) :for (.. key (getDeterministicKey) (getPathList)))
                (§ block
                    (.. path (add (§ new #_"ChildNumber" i)))
                )

                ;; Deserialize the public key and path.
                (§ var #_"LazyECPoint" (§ name pubkey) (§ new #_"LazyECPoint" (.. ECKey/CURVE (getCurve)), (.. key (getPublicKey) (toByteArray))))
                (§ var #_"ImmutableList<ChildNumber>" (§ name immutablePath) (ImmutableList/copyOf path))
                ;; Possibly create the chain, if we didn't already do so yet.
                (§ var #_"boolean" (§ name isWatchingAccountKey) false)
                (§ var #_"boolean" (§ name isFollowingKey) false)
                ;; Save previous chain if any if the key is marked as following.  Current key and the next ones
                ;; are to be placed in new following key chain.
                (§ if (.. key (getDeterministicKey) (getIsFollowing)))
                (§ block
                    (§ if (some? chain))
                    (§ block
                        (Preconditions/checkState (<= 0 lookaheadSize))

                        (.. chain (setLookaheadSize lookaheadSize))
                        (.. chain (setSigsRequiredToSpend sigsRequiredToSpend))
                        (.. chain (maybeLookAhead))
                        (.. chains (add chain))
                        (§ ass (§ name chain) nil)
                        (§ ass (§ name seed) nil)
                    )
                    (§ ass (§ name isFollowingKey) true)
                )

                (§ if (nil? chain))
                (§ block
                    ;; If this is not a following chain and previous was, this must be married.
                    (§ var #_"boolean" (§ name isMarried) (§ expr (§ not isFollowingKey) && (§ not (.. chains (isEmpty))) && (.. chains (get (- (.. chains (size)) 1)) (isFollowing))))
                    (§ if (nil? seed))
                    (§ block
                        (§ var #_"DeterministicKey" (§ name accountKey) (§ new #_"DeterministicKey" immutablePath, chainCode, pubkey, nil, nil))
                        (.. accountKey (setCreationTimeSeconds (/ (.. key (getCreationTimestamp)) 1000)))
                        (§ ass (§ name chain) (.. factory (makeWatchingKeyChain key, (.. iter (peek)), accountKey, isFollowingKey, isMarried)))
                        (§ ass (§ name isWatchingAccountKey) true)
                    )
                    (§ else )
                    (§ block
                        (§ ass (§ name chain) (.. factory (makeKeyChain key, (.. iter (peek)), seed, crypter, isMarried)))
                        (§ ass (§ name (.. chain lookaheadSize)) LAZY_CALCULATE_LOOKAHEAD)
                        ;; If the seed is encrypted, then the chain is incomplete at this point.  However, we will load
                        ;; it up below as we parse in the keys.  We just need to check at the end that we've loaded
                        ;; everything afterwards.
                    )
                )
                ;; Find the parent key assuming this is not the root key, and not an account key for a watching chain.
                (§ var #_"DeterministicKey" (§ name parent) nil)
                (§ if (§ expr (§ not (.. path (isEmpty))) && (§ not isWatchingAccountKey)))
                (§ block
                    (§ var #_"ChildNumber" (§ name index) (.. path (removeLast)))
                    (§ ass (§ name parent) (.. chain hierarchy (get path, false, false)))
                    (.. path (add index))
                )
                (§ var #_"DeterministicKey" (§ name detkey))
                (§ if (.. key (hasSecretBytes)))
                (§ block
                    ;; Not encrypted: private key is available.
                    (§ var #_"BigInteger" (§ name priv) (§ new #_"BigInteger" 1, (.. key (getSecretBytes) (toByteArray))))
                    (§ ass (§ name detkey) (§ new #_"DeterministicKey" immutablePath, chainCode, pubkey, priv, parent))
                )
                (§ else )
                (§ block
                    (§ if (.. key (hasEncryptedData)))
                    (§ block
                        (§ var #_"Protos.EncryptedData" (§ name proto) (.. key (getEncryptedData)))
                        (§ var #_"EncryptedData" (§ name data) (§ new #_"EncryptedData" (.. proto (getInitialisationVector) (toByteArray)), (.. proto (getEncryptedPrivateKey) (toByteArray))))
                        (Preconditions/checkNotNull crypter, "Encountered an encrypted key but no key crypter provided")
                        (§ ass (§ name detkey) (§ new #_"DeterministicKey" immutablePath, chainCode, crypter, pubkey, data, parent))
                    )
                    (§ else )
                    (§ block
                        ;; No secret key bytes and key is not encrypted: either a watching key or private key bytes
                        ;; will be rederived on the fly from the parent.
                        (§ ass (§ name detkey) (§ new #_"DeterministicKey" immutablePath, chainCode, pubkey, nil, parent))
                    )
                )
                (§ if (.. key (hasCreationTimestamp)))
                (§ block
                    (.. detkey (setCreationTimeSeconds (/ (.. key (getCreationTimestamp)) 1000)))
                )
                (§ if (.. log (isDebugEnabled)))
                (§ block
                    (.. log (debug "Deserializing: DETERMINISTIC_KEY: {}", detkey))
                )
                (§ if (§ not isWatchingAccountKey))
                (§ block
                    ;; If the non-encrypted case, the non-leaf keys (account, internal, external) have already
                    ;; been rederived and inserted at this point.  In the encrypted case though, we can't
                    ;; rederive and we must reinsert, potentially building the heirarchy object if need be.
                    (§ if (== (.. path (size)) 0))
                    (§ block
                        ;; Master key.
                        (§ if (== (.. chain rootKey) nil))
                        (§ block
                            (§ ass (§ name (.. chain rootKey)) detkey)
                            (§ ass (§ name (.. chain hierarchy)) (§ new #_"DeterministicHierarchy" detkey))
                        )
                    )
                    (§ elseif (§ expr (.. path (size)) == (.. chain (getAccountPath) (size)) + 1))
                    (§ block
                        (§ if (== (.. detkey (getChildNumber) (num)) 0))
                        (§ block
                            (§ ass (§ name (.. chain externalParentKey)) detkey)
                            (§ ass (§ name (.. chain issuedExternalKeys)) (.. key (getDeterministicKey) (getIssuedSubkeys)))
                            (§ ass (§ name lookaheadSize) (Math/max lookaheadSize, (.. key (getDeterministicKey) (getLookaheadSize))))
                            (§ ass (§ name sigsRequiredToSpend) (.. key (getDeterministicKey) (getSigsRequiredToSpend)))
                        )
                        (§ elseif (== (.. detkey (getChildNumber) (num)) 1))
                        (§ block
                            (§ ass (§ name (.. chain internalParentKey)) detkey)
                            (§ ass (§ name (.. chain issuedInternalKeys)) (.. key (getDeterministicKey) (getIssuedSubkeys)))
                        )
                    )
                )
                (.. chain hierarchy (putKey detkey))
                (.. chain basicKeyChain (importKey detkey))
            )
        )
        (§ if (some? chain))
        (§ block
            (Preconditions/checkState (>= lookaheadSize 0))
            (.. chain (setLookaheadSize lookaheadSize))
            (.. chain (setSigsRequiredToSpend sigsRequiredToSpend))
            (.. chain (maybeLookAhead))
            (.. chains (add chain))
        )
        chains
    )

    #_override
    #_public
    (§ method #_"DeterministicKeyChain" (§ fn toEncrypted) [#_"CharSequence" (§ name password)])
    (§ block
        (Preconditions/checkNotNull password)
        (Preconditions/checkArgument (§ expr 0 < (.. password (length))))
        (Preconditions/checkState (some? seed), "Attempt to encrypt a watching chain.")
        (Preconditions/checkState (§ not (.. seed (isEncrypted))))

        (§ var #_"KeyCrypter" (§ name scrypt) (§ new #_"KeyCrypterScrypt"))
        (§ var #_"KeyParameter" (§ name derivedKey) (.. scrypt (deriveKey password)))
        (toEncrypted scrypt, derivedKey)
    )

    #_override
    #_public
    (§ method #_"DeterministicKeyChain" (§ fn toEncrypted) [#_"KeyCrypter" (§ name keyCrypter), #_"KeyParameter" (§ name aesKey)])
    (§ block
        (§ new #_"DeterministicKeyChain" keyCrypter, aesKey, this)
    )

    #_override
    #_public
    (§ method #_"DeterministicKeyChain" (§ fn toDecrypted) [#_"CharSequence" (§ name password)])
    (§ block
        (Preconditions/checkNotNull password)
        (Preconditions/checkArgument (§ expr 0 < (.. password (length))))

        (§ var #_"KeyCrypter" (§ name crypter) (getKeyCrypter))
        (Preconditions/checkState (some? crypter), "Chain not encrypted")
        (§ var #_"KeyParameter" (§ name derivedKey) (.. crypter (deriveKey password)))
        (toDecrypted derivedKey)
    )

    #_override
    #_public
    (§ method #_"DeterministicKeyChain" (§ fn toDecrypted) [#_"KeyParameter" (§ name aesKey)])
    (§ block
        (Preconditions/checkState (some? (getKeyCrypter)), "Key chain not encrypted")
        (Preconditions/checkState (some? seed), "Can't decrypt a watching chain")
        (Preconditions/checkState (.. seed (isEncrypted)))

        (§ var #_"String" (§ name passphrase) DEFAULT_PASSPHRASE_FOR_MNEMONIC) ;; FIXME allow non-empty passphrase
        (§ var #_"DeterministicSeed" (§ name decSeed) (.. seed (decrypt (getKeyCrypter), passphrase, aesKey)))
        (§ var #_"DeterministicKeyChain" (§ name chain) (makeKeyChainFromSeed decSeed))
        ;; Now double check that the keys match to catch the case where the key is wrong but padding didn't catch it.
        (§ if (§ not (.. chain (getWatchingKey) (getPubKeyPoint) (equals (.. (getWatchingKey) (getPubKeyPoint))))))
        (§ block
            (§ throw (§ new #_"KeyCrypterException" "Provided AES key is wrong"))
        )

        (§ ass (§ name (.. chain lookaheadSize)) lookaheadSize)
        ;; Now copy the (pubkey only) leaf keys across to avoid rederiving them.  The private key bytes are missing
        ;; anyway so there's nothing to decrypt.
        (§ for (§ var #_"ECKey" (§ name eckey)) :for (.. basicKeyChain (getKeys)))
        (§ block
            (§ var #_"DeterministicKey" (§ name key) (§ cast #_"DeterministicKey" eckey))
            (§ if (§ expr (.. key (getPath) (size)) != (.. (getAccountPath) (size)) + 2))
            (§ block
                (§ continue ) ;; Not a leaf key.
            )

            (Preconditions/checkState (.. key (isEncrypted)))
            (§ var #_"DeterministicKey" (§ name parent) (.. chain hierarchy (get (.. (Preconditions/checkNotNull (.. key (getParent))) (getPath)), false, false)))
            ;; Clone the key to the new decrypted hierarchy.
            (§ ass (§ name key) (§ new #_"DeterministicKey" (.. key (dropPrivateBytes)), parent))
            (.. chain hierarchy (putKey key))
            (.. chain basicKeyChain (importKey key))
        )
        (§ ass (§ name (.. chain issuedExternalKeys)) issuedExternalKeys)
        (§ ass (§ name (.. chain issuedInternalKeys)) issuedInternalKeys)
        chain
    )

    ;;;
     ; Factory method to create a key chain from a seed.
     ; Subclasses should override this to create an instance of the subclass instead of a plain DKC.
     ; This is used in encryption/decryption.
     ;;
    #_protected
    (§ method #_"DeterministicKeyChain" (§ fn makeKeyChainFromSeed) [#_"DeterministicSeed" (§ name seed)])
    (§ block
        (§ new #_"DeterministicKeyChain" seed)
    )

    #_override
    #_public
    (§ method #_"boolean" (§ fn checkPassword) [#_"CharSequence" (§ name password)])
    (§ block
        (Preconditions/checkNotNull password)
        (Preconditions/checkState (some? (getKeyCrypter)), "Key chain not encrypted")

        (checkAESKey (.. (getKeyCrypter) (deriveKey password)))
    )

    #_override
    #_public
    (§ method #_"boolean" (§ fn checkAESKey) [#_"KeyParameter" (§ name aesKey)])
    (§ block
        (Preconditions/checkState (some? rootKey), "Can't check password for a watching chain")
        (Preconditions/checkNotNull aesKey)
        (Preconditions/checkState (some? (getKeyCrypter)), "Key chain not encrypted")

        (§ try )
        (§ block
            (§ return (.. rootKey (decrypt aesKey) (getPubKeyPoint) (equals (.. rootKey (getPubKeyPoint)))))
        )
        (§ catch #_"KeyCrypterException" (§ name _))
        (§ block
            (§ return false)
        )
    )

    #_nilable
    #_override
    #_public
    (§ method #_"KeyCrypter" (§ fn getKeyCrypter) [])
    (§ block
        (.. basicKeyChain (getKeyCrypter))
    )

    #_override
    #_public
    (§ method #_"int" (§ fn numBloomFilterEntries) [])
    (§ block
        (* (numKeys) 2)
    )

    #_override
    #_public
    (§ method #_"BloomFilter" (§ fn getFilter) [#_"int" (§ name size), #_"double" (§ name falsePositiveRate), #_"long" (§ name tweak)])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (Preconditions/checkArgument (<= (numBloomFilterEntries) size))
            (maybeLookAhead)
            (§ return (.. basicKeyChain (getFilter size, falsePositiveRate, tweak)))
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    ;;;
     ; <p>The number of public keys we should pre-generate on each path before they are requested by the app.  This is
     ; required so that when scanning through the chain given only a seed, we can give enough keys to the remote node
     ; via the Bloom filter such that we see transactions that are "from the future", for example transactions created
     ; by a different app that's sharing the same seed, or transactions we made before but we're replaying the chain
     ; given just the seed. The default is 100.</p>
     ;;
    #_public
    (§ method #_"int" (§ fn getLookaheadSize) [])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ return lookaheadSize)
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    ;;;
     ; Sets a new lookahead size.  See {@link #getLookaheadSize()} for details on what this is.  Setting a new size
     ; that's larger than the current size will return immediately and the new size will only take effect next time
     ; a fresh filter is requested (e.g. due to a new peer being connected).  So you should set this before starting
     ; to sync the chain, if you want to modify it.  If you haven't modified the lookahead threshold manually then
     ; it will be automatically set to be a third of the new size.
     ;;
    #_public
    (§ method #_"void" (§ fn setLookaheadSize) [#_"int" (§ name lookaheadSize)])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ var #_"boolean" (§ name readjustThreshold) (== (.. this lookaheadThreshold) (calcDefaultLookaheadThreshold)))
            (§ ass (§ name (.. this lookaheadSize)) lookaheadSize)
            (§ if readjustThreshold)
            (§ block
                (§ ass (§ name (.. this lookaheadThreshold)) (calcDefaultLookaheadThreshold))
            )
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
        nil
    )

    ;;;
     ; Sets the threshold for the key pre-generation.  This is used to avoid adding new keys and thus re-calculating
     ; Bloom filters every time a new key is calculated.  Without a lookahead threshold, every time we received
     ; a relevant transaction, we'd extend the lookahead zone and generate a new filter, which is inefficient.
     ;;
    #_public
    (§ method #_"void" (§ fn setLookaheadThreshold) [#_"int" (§ name num)])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ if (<= lookaheadSize num))
            (§ block
                (§ throw (§ new #_"IllegalArgumentException" "Threshold larger or equal to the lookaheadSize"))
            )

            (§ ass (§ name (.. this lookaheadThreshold)) num)
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
        nil
    )

    ;;;
     ; Gets the threshold for the key pre-generation.  See {@link #setLookaheadThreshold(int)} for details on what
     ; this is.  The default is a third of the lookahead size (100 / 3 == 33).  If you don't modify it explicitly,
     ; then this value will always be one third of the lookahead size.
     ;;
    #_public
    (§ method #_"int" (§ fn getLookaheadThreshold) [])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ return (if (< lookaheadThreshold lookaheadSize) lookaheadThreshold 0))
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    ;;;
     ; Pre-generate enough keys to reach the lookahead size.  You can call this if you need to explicitly invoke
     ; the lookahead procedure, but it's normally unnecessary as it will be done automatically when needed.
     ;;
    #_public
    (§ method #_"void" (§ fn maybeLookAhead) [])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ var #_"List<DeterministicKey>" (§ name keys) (maybeLookAhead externalParentKey, issuedExternalKeys))
            (.. keys (addAll (maybeLookAhead internalParentKey, issuedInternalKeys)))
            (§ if (.. keys (isEmpty)))
            (§ block
                (§ return nil)
            )

            (§ ass (§ name keyLookaheadEpoch) (+ keyLookaheadEpoch 1))
            ;; Batch add all keys at once so there's only one event listener invocation, as this will be listened to
            ;; by the wallet and used to rebuild/broadcast the Bloom filter.  That's expensive so we don't want to do
            ;; it more often than necessary.
            (.. basicKeyChain (importKeys keys))
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
        nil
    )

    #_private
    (§ method- #_"List<DeterministicKey>" (§ fn maybeLookAhead) [#_"DeterministicKey" (§ name parent), #_"int" (§ name issued)])
    (§ block
        (Preconditions/checkState (.. lock (isHeldByCurrentThread)))

        (maybeLookAhead parent, issued, (getLookaheadSize), (getLookaheadThreshold))
    )

    ;;;
     ; Pre-generate enough keys to reach the lookahead size, but only if there are more than the lookaheadThreshold
     ; to be generated, so that the Bloom filter does not have to be regenerated that often.
     ;
     ; The returned mutable list of keys must be inserted into the basic key chain.
     ;;
    #_private
    (§ method- #_"List<DeterministicKey>" (§ fn maybeLookAhead) [#_"DeterministicKey" (§ name parent), #_"int" (§ name issued), #_"int" (§ name lookaheadSize), #_"int" (§ name lookaheadThreshold)])
    (§ block
        (Preconditions/checkState (.. lock (isHeldByCurrentThread)))

        (§ var #_"int" (§ name numChildren) (.. hierarchy (getNumChildren (.. parent (getPath)))))
        (§ var #_"int" (§ name needed) (§ expr issued + lookaheadSize + lookaheadThreshold - numChildren))

        (§ if (<= needed lookaheadThreshold))
        (§ block
            (§ return (§ new #_"ArrayList<>"))
        )

        (.. log (info "{} keys needed for {} = {} issued + {} lookahead size + {} lookahead threshold - {} num children", needed, (.. parent (getPathAsString)), issued, lookaheadSize, lookaheadThreshold, numChildren))

        (§ var #_"List<DeterministicKey>" (§ name result) (§ new #_"ArrayList<>" needed))
        (§ var #_"Stopwatch" (§ name watch) (Stopwatch/createStarted))
        (§ var #_"int" (§ name nextChild) numChildren)
        (§ for (§ var #_"int" (§ name i) 0) :for (< i needed) :for (§ ass (§ name i) (+ i 1)))
        (§ block
            (§ var #_"DeterministicKey" (§ name key) (HDKeyDerivation/deriveThisOrNextChildKey parent, nextChild))
            (§ ass (§ name key) (.. key (dropPrivateBytes)))
            (.. hierarchy (putKey key))
            (.. result (add key))
            (§ ass (§ name nextChild) (+ (.. key (getChildNumber) (num)) 1))
        )
        (.. watch (stop))
        (.. log (info "Took {}", watch))
        result
    )

    ;;; Housekeeping call to call when lookahead might be needed.  Normally called automatically by KeychainGroup. ;;
    #_public
    (§ method #_"void" (§ fn maybeLookAheadScripts) [])
    (§ block
        nil
    )

    ;;;
     ; Returns number of keys used on external path.  This may be fewer than the number that have been deserialized
     ; or held in memory, because of the lookahead zone.
     ;;
    #_public
    (§ method #_"int" (§ fn getIssuedExternalKeys) [])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ return issuedExternalKeys)
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    ;;;
     ; Returns number of keys used on internal path.  This may be fewer than the number that have been deserialized
     ; or held in memory, because of the lookahead zone.
     ;;
    #_public
    (§ method #_"int" (§ fn getIssuedInternalKeys) [])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ return issuedInternalKeys)
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    ;;; Returns the seed or null if this chain is a watching chain. ;;
    #_nilable
    #_public
    (§ method #_"DeterministicSeed" (§ fn getSeed) [])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ return seed)
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    ;; For internal usage only.
    (§ method #_"List<ECKey>" (§ fn getKeys) [#_"boolean" (§ name includeLookahead), #_"boolean" (§ name includeParents)])
    (§ block
        (§ var #_"List<ECKey>" (§ name keys) (.. basicKeyChain (getKeys)))
        (§ if (§ not includeLookahead))
        (§ block
            (§ var #_"int" (§ name treeSize) (.. internalParentKey (getPath) (size)))
            (§ var #_"List<ECKey>" (§ name issuedKeys) (§ new #_"LinkedList<>"))
            (§ for (§ var #_"ECKey" (§ name key)) :for keys)
            (§ block
                (§ var #_"DeterministicKey" (§ name detkey) (§ cast #_"DeterministicKey" key))
                (§ var #_"DeterministicKey" (§ name parent) (.. detkey (getParent)))
                (§ if (§ expr (§ not includeParents) && parent == nil))
                (§ block
                    (§ continue )
                )
                (§ if (§ expr (§ not includeParents) && (.. detkey (getPath) (size)) <= treeSize))
                (§ block
                    (§ continue )
                )
                (§ if (§ expr (.. internalParentKey (equals parent)) && issuedInternalKeys <= (.. detkey (getChildNumber) (i))))
                (§ block
                    (§ continue )
                )
                (§ if (§ expr (.. externalParentKey (equals parent)) && issuedExternalKeys <= (.. detkey (getChildNumber) (i))))
                (§ block
                    (§ continue )
                )
                (.. issuedKeys (add detkey))
            )
            (§ return issuedKeys)
        )
        keys
    )

    ;;;
     ; Returns only the external keys that have been issued by this chain, lookahead not included.
     ;;
    #_public
    (§ method #_"List<ECKey>" (§ fn getIssuedReceiveKeys) [])
    (§ block
        (§ var #_"List<ECKey>" (§ name keys) (§ new #_"ArrayList<>" (getKeys false, false)))
        (§ for (§ var #_"Iterator<ECKey>" (§ name i) (.. keys (iterator))) :for (.. i (hasNext)) :for (§ expr ))
        (§ block
            (§ var #_"DeterministicKey" (§ name parent) (.. (§ cast #_"DeterministicKey" (.. i (next))) (getParent)))
            (§ if (§ expr parent == nil || (§ not (.. externalParentKey (equals parent)))))
            (§ block
                (.. i (remove))
            )
        )
        keys
    )

    ;;;
     ; Returns leaf keys issued by this chain (including lookahead zone).
     ;;
    #_public
    (§ method #_"List<DeterministicKey>" (§ fn getLeafKeys) [])
    (§ block
        (§ var #_"ImmutableList.Builder<DeterministicKey>" (§ name keys) (ImmutableList/builder))
        (§ for (§ var #_"ECKey" (§ name key)) :for (getKeys true, false))
        (§ block
            (§ var #_"DeterministicKey" (§ name dKey) (§ cast #_"DeterministicKey" key))
            (§ if (§ expr (.. dKey (getPath) (size)) == (.. (getAccountPath) (size)) + 2))
            (§ block
                (.. keys (add dKey))
            )
        )
        (.. keys (build))
    )

    #_static
    (§ defn #_"void" (§ fn serializeSeedEncryptableItem) [#_"DeterministicSeed" (§ name seed), #_"Protos.Key.Builder" (§ name proto)])
    (§ block
        ;; The seed can be missing if we have not derived it yet from the mnemonic.
        ;; This will not normally happen once all the wallets are on the latest code that caches the seed.
        (§ if (§ expr (.. seed (isEncrypted)) && (.. seed (getEncryptedSeedData)) != nil))
        (§ block
            (§ var #_"EncryptedData" (§ name data) (.. seed (getEncryptedSeedData)))
            (.. proto (getEncryptedDeterministicSeedBuilder) (setEncryptedPrivateKey (ByteString/copyFrom (.. data encryptedBytes))) (setInitialisationVector (ByteString/copyFrom (.. data initialisationVector))))
            ;; We don't allow mixing of encryption types at the moment.
            (Preconditions/checkState (== (.. seed (getEncryptionType)) Protos/Wallet/EncryptionType/ENCRYPTED_SCRYPT_AES))
        )
        (§ else )
        (§ block
            (§ var #_"byte[]" (§ name secret) (.. seed (getSeedBytes)))
            (§ if (some? secret))
            (§ block
                (.. proto (setDeterministicSeed (ByteString/copyFrom secret)))
            )
        )
        nil
    )

    ;;;
     ; Returns a counter that is incremented each time new keys are generated due to lookahead.
     ; Used by the network code to learn whether to discard the current block and await calculation
     ; of a new filter.
     ;;
    #_public
    (§ method #_"int" (§ fn getKeyLookaheadEpoch) [])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ return keyLookaheadEpoch)
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    ;;;
     ; Whether the keychain is married.  A keychain is married when it vends P2SH addresses from
     ; multiple keychains in a multisig relationship.
     ; @see org.bitcoinj.wallet.MarriedKeyChain
     ;;
    #_public
    (§ method #_"boolean" (§ fn isMarried) [])
    (§ block
        false
    )

    ;;; Get redeem data for a key.  Only applicable to married keychains. ;;
    #_public
    (§ method #_"RedeemData" (§ fn getRedeemData) [#_"DeterministicKey" (§ name followedKey)])
    (§ block
        (§ throw (§ new #_"UnsupportedOperationException"))
    )

    ;;; Create a new key and return the matching output script.  Only applicable to married keychains. ;;
    #_public
    (§ method #_"Script" (§ fn freshOutputScript) [#_"KeyPurpose" (§ name purpose)])
    (§ block
        (§ throw (§ new #_"UnsupportedOperationException"))
    )

    #_public
    (§ method #_"String" (§ fn toString) [#_"boolean" (§ name includePrivateKeys), #_"NetworkParameters" (§ name params)])
    (§ block
        (§ var #_"DeterministicKey" (§ name watchingKey) (getWatchingKey))
        (§ var #_"StringBuilder" (§ name sb) (§ new #_"StringBuilder"))
        (§ if (some? seed))
        (§ block
            (§ if (.. seed (isEncrypted)))
            (§ block
                (.. sb (append "Seed is encrypted\n"))
            )
            (§ elseif includePrivateKeys)
            (§ block
                (§ var #_"List<String>" (§ name words) (.. seed (getMnemonicCode)))
                (.. sb (append "Seed as words: ") (append (.. Utils/SPACE_JOINER (join words))) (append "\n"))
                (.. sb (append "Seed as hex:   ") (append (.. seed (toHexString))) (append "\n"))
            )
            (.. sb (append "Seed birthday: ") (append (.. seed (getCreationTimeSeconds))) (append "  [") (append (Utils/dateTimeFormat (* (.. seed (getCreationTimeSeconds)) 1000))) (append "]\n"))
        )
        (§ else )
        (§ block
            (.. sb (append "Key birthday:  ") (append (.. watchingKey (getCreationTimeSeconds))) (append "  [") (append (Utils/dateTimeFormat (* (.. watchingKey (getCreationTimeSeconds)) 1000))) (append "]\n"))
        )
        (.. sb (append "Key to watch:  ") (append (.. watchingKey (serializePubB58 params))) (append "\n"))
        (formatAddresses includePrivateKeys, params, sb)
        (.. sb (toString))
    )

    #_protected
    (§ method #_"void" (§ fn formatAddresses) [#_"boolean" (§ name includePrivateKeys), #_"NetworkParameters" (§ name params), #_"StringBuilder" (§ name builder)])
    (§ block
        (§ for (§ var #_"ECKey" (§ name key)) :for (getKeys false, true))
        (§ block
            (.. key (formatKeyWithAddress includePrivateKeys, builder, params))
        )
        nil
    )

    ;;; The number of signatures required to spend coins received by this keychain. ;;
    #_public
    (§ method #_"void" (§ fn setSigsRequiredToSpend) [#_"int" (§ name sigsRequiredToSpend)])
    (§ block
        (§ ass (§ name (.. this sigsRequiredToSpend)) sigsRequiredToSpend)
        nil
    )

    ;;;
     ; Returns the number of signatures required to spend transactions for this KeyChain.
     ; It's the N from N-of-M CHECKMULTISIG script for P2SH transactions and always 1 for other transaction types.
     ;;
    #_public
    (§ method #_"int" (§ fn getSigsRequiredToSpend) [])
    (§ block
        sigsRequiredToSpend
    )

    ;;; Returns the redeem script by its hash or null if this keychain did not generate the script. ;;
    #_nilable
    #_public
    (§ method #_"RedeemData" (§ fn findRedeemDataByScriptHash) [#_"ByteString" (§ name bytes)])
    (§ block
        nil
    )
)

#_(ns org.bitcoinj.wallet #_"DeterministicSeed"
    (:import [java.security SecureRandom]
             [java.util List])
    (:import [com.google.common.base Charsets Objects Preconditions Splitter]
             [org.spongycastle.crypto.params KeyParameter])
   (:require [org.bitcoinj.core Utils]
             #_static [org.bitcoinj.core.Utils HEX]
             [org.bitcoinj.crypto *]))

;;;
 ; Holds the seed bytes for the BIP32 deterministic wallet algorithm, inside a {@link DeterministicKeyChain}.
 ; The purpose of this wrapper is to simplify the encryption code.
 ;;
#_public
(§ class #_"DeterministicSeed" (§ implements #_"EncryptableItem")
    ;; It would take more than 10^12 years to brute-force a 128 bit seed using $1B worth of computing equipment.
    #_public
    #_static
    (§ def #_"int" (§ name DEFAULT_SEED_ENTROPY_BITS) 128)
    #_public
    #_static
    (§ def #_"int" (§ name MAX_SEED_ENTROPY_BITS) 512)

    #_nilable
    #_private
    (§ field- #_"byte[]" (§ name seed))
    #_nilable
    #_private
    (§ field- #_"List<String>" (§ name mnemonicCode)) ;; only one of mnemonicCode/encryptedMnemonicCode will be set
    #_nilable
    #_private
    (§ field- #_"EncryptedData" (§ name encryptedMnemonicCode))
    #_nilable
    #_private
    (§ field- #_"EncryptedData" (§ name encryptedSeed))
    #_private
    (§ field- #_"long" (§ name creationTimeSeconds))

    #_public
    (§ constructor #_"DeterministicSeed" [#_"String" (§ name mnemonicCode), #_"byte[]" (§ name seed), #_"String" (§ name passphrase), #_"long" (§ name creationTimeSeconds)])
        (§ throws #_"UnreadableWalletException")
    (§ block
        (§ this (decodeMnemonicCode mnemonicCode), seed, passphrase, creationTimeSeconds)
        this
    )

    #_public
    (§ constructor #_"DeterministicSeed" [#_"byte[]" (§ name seed), #_"List<String>" (§ name mnemonic), #_"long" (§ name creationTimeSeconds)])
    (§ block
        (§ ass (§ name (.. this seed)) (Preconditions/checkNotNull seed))
        (§ ass (§ name (.. this mnemonicCode)) (Preconditions/checkNotNull mnemonic))
        (§ ass (§ name (.. this encryptedMnemonicCode)) nil)
        (§ ass (§ name (.. this creationTimeSeconds)) creationTimeSeconds)
        this
    )

    #_public
    (§ constructor #_"DeterministicSeed" [#_"EncryptedData" (§ name encryptedMnemonic), #_nilable #_"EncryptedData" (§ name encryptedSeed), #_"long" (§ name creationTimeSeconds)])
    (§ block
        (§ ass (§ name (.. this seed)) nil)
        (§ ass (§ name (.. this mnemonicCode)) nil)
        (§ ass (§ name (.. this encryptedMnemonicCode)) (Preconditions/checkNotNull encryptedMnemonic))
        (§ ass (§ name (.. this encryptedSeed)) encryptedSeed)
        (§ ass (§ name (.. this creationTimeSeconds)) creationTimeSeconds)
        this
    )

    ;;;
     ; Constructs a seed from a BIP 39 mnemonic code.
     ; See {@link org.bitcoinj.crypto.MnemonicCode} for more details on this scheme.
     ; @param mnemonicCode A list of words.
     ; @param seed The derived seed, or pass null to derive it from mnemonicCode (slow).
     ; @param passphrase A user supplied passphrase, or an empty string if there is no passphrase.
     ; @param creationTimeSeconds When the seed was originally created, UNIX time.
     ;;
    #_public
    (§ constructor #_"DeterministicSeed" [#_"List<String>" (§ name mnemonicCode), #_nilable #_"byte[]" (§ name seed), #_"String" (§ name passphrase), #_"long" (§ name creationTimeSeconds)])
    (§ block
        (§ this (or seed (MnemonicCode/toSeed mnemonicCode, (Preconditions/checkNotNull passphrase))), mnemonicCode, creationTimeSeconds)
        this
    )

    ;;;
     ; Constructs a seed from a BIP 39 mnemonic code.
     ; See {@link org.bitcoinj.crypto.MnemonicCode} for more details on this scheme.
     ; @param random Entropy source.
     ; @param bits Number of bits, must be divisible by 32.
     ; @param passphrase A user supplied passphrase, or an empty string if there is no passphrase.
     ; @param creationTimeSeconds When the seed was originally created, UNIX time.
     ;;
    #_public
    (§ constructor #_"DeterministicSeed" [#_"SecureRandom" (§ name random), #_"int" (§ name bits), #_"String" (§ name passphrase), #_"long" (§ name creationTimeSeconds)])
    (§ block
        (§ this (getEntropy random, bits), (Preconditions/checkNotNull passphrase), creationTimeSeconds)
        this
    )

    ;;;
     ; Constructs a seed from a BIP 39 mnemonic code.
     ; See {@link org.bitcoinj.crypto.MnemonicCode} for more details on this scheme.
     ; @param entropy Entropy bits, length must be divisible by 32.
     ; @param passphrase A user supplied passphrase, or an empty string if there is no passphrase.
     ; @param creationTimeSeconds When the seed was originally created, UNIX time.
     ;;
    #_public
    (§ constructor #_"DeterministicSeed" [#_"byte[]" (§ name entropy), #_"String" (§ name passphrase), #_"long" (§ name creationTimeSeconds)])
    (§ block
        (Preconditions/checkArgument (§ expr (.. entropy length) % 4 == 0), "entropy size in bits not divisible by 32")
        (Preconditions/checkArgument (§ expr DEFAULT_SEED_ENTROPY_BITS <= (.. entropy length) * 8), "entropy size too small")
        (Preconditions/checkNotNull passphrase)

        (§ try )
        (§ block
            (§ ass (§ name (.. this mnemonicCode)) (.. MnemonicCode/INSTANCE (toMnemonic entropy)))
        )
        (§ catch #_"MnemonicException.MnemonicLengthException" (§ name e))
        (§ block
            (§ throw (§ new #_"RuntimeException" e)) ;; Cannot happen.
        )
        (§ ass (§ name (.. this seed)) (MnemonicCode/toSeed mnemonicCode, passphrase))
        (§ ass (§ name (.. this encryptedMnemonicCode)) nil)
        (§ ass (§ name (.. this creationTimeSeconds)) creationTimeSeconds)
        this
    )

    #_private
    #_static
    (§ defn- #_"byte[]" (§ fn getEntropy) [#_"SecureRandom" (§ name random), #_"int" (§ name bits)])
    (§ block
        (Preconditions/checkArgument (§ expr bits <= MAX_SEED_ENTROPY_BITS), "requested entropy size too large")

        (§ var #_"byte[]" (§ name seed) (§ new #_"byte[]" (§ count bits / 8)))
        (.. random (nextBytes seed))
        seed
    )

    #_override
    #_public
    (§ method #_"boolean" (§ fn isEncrypted) [])
    (§ block
        (Preconditions/checkState (§ expr mnemonicCode != nil || encryptedMnemonicCode != nil))
        (some? encryptedMnemonicCode)
    )

    #_override
    #_public
    (§ method #_"String" (§ fn toString) [])
    (§ block
        (if (isEncrypted) "DeterministicSeed [encrypted]" (§ str "DeterministicSeed " + (toHexString) + " " + (.. Utils/SPACE_JOINER (join mnemonicCode))))
    )

    ;;; Returns the seed as hex or null if encrypted. ;;
    #_nilable
    #_public
    (§ method #_"String" (§ fn toHexString) [])
    (§ block
        (when (some? seed) (.. HEX (encode seed)))
    )

    #_nilable
    #_override
    #_public
    (§ method #_"byte[]" (§ fn getSecretBytes) [])
    (§ block
        (getMnemonicAsBytes)
    )

    #_nilable
    #_public
    (§ method #_"byte[]" (§ fn getSeedBytes) [])
    (§ block
        seed
    )

    #_nilable
    #_override
    #_public
    (§ method #_"EncryptedData" (§ fn getEncryptedData) [])
    (§ block
        encryptedMnemonicCode
    )

    #_override
    #_public
    (§ method #_"Protos.Wallet.EncryptionType" (§ fn getEncryptionType) [])
    (§ block
        Protos/Wallet/EncryptionType/ENCRYPTED_SCRYPT_AES
    )

    #_nilable
    #_public
    (§ method #_"EncryptedData" (§ fn getEncryptedSeedData) [])
    (§ block
        encryptedSeed
    )

    #_override
    #_public
    (§ method #_"long" (§ fn getCreationTimeSeconds) [])
    (§ block
        creationTimeSeconds
    )

    #_public
    (§ method #_"void" (§ fn setCreationTimeSeconds) [#_"long" (§ name creationTimeSeconds)])
    (§ block
        (§ ass (§ name (.. this creationTimeSeconds)) creationTimeSeconds)
        nil
    )

    #_public
    (§ method #_"DeterministicSeed" (§ fn encrypt) [#_"KeyCrypter" (§ name keyCrypter), #_"KeyParameter" (§ name aesKey)])
    (§ block
        (Preconditions/checkState (nil? encryptedMnemonicCode), "Trying to encrypt seed twice")
        (Preconditions/checkState (some? mnemonicCode), "Mnemonic missing so cannot encrypt")

        (§ var #_"EncryptedData" (§ name encryptedMnemonic) (.. keyCrypter (encrypt (getMnemonicAsBytes), aesKey)))
        (§ var #_"EncryptedData" (§ name encryptedSeed) (.. keyCrypter (encrypt seed, aesKey)))
        (§ new #_"DeterministicSeed" encryptedMnemonic, encryptedSeed, creationTimeSeconds)
    )

    #_private
    (§ method- #_"byte[]" (§ fn getMnemonicAsBytes) [])
    (§ block
        (.. Utils/SPACE_JOINER (join mnemonicCode) (getBytes Charsets/UTF_8))
    )

    #_public
    (§ method #_"DeterministicSeed" (§ fn decrypt) [#_"KeyCrypter" (§ name crypter), #_"String" (§ name passphrase), #_"KeyParameter" (§ name aesKey)])
    (§ block
        (Preconditions/checkState (isEncrypted))
        (Preconditions/checkNotNull encryptedMnemonicCode)

        (§ var #_"List<String>" (§ name mnemonic) (decodeMnemonicCode (.. crypter (decrypt encryptedMnemonicCode, aesKey))))
        (§ var #_"byte[]" (§ name seed) (when (some? encryptedSeed) (.. crypter (decrypt encryptedSeed, aesKey))))
        (§ new #_"DeterministicSeed" mnemonic, seed, passphrase, creationTimeSeconds)
    )

    #_override
    #_public
    (§ method #_"boolean" (§ fn equals) [#_"Object" (§ name o)])
    (§ block
        (§ if (§ expr this == o))
        (§ block
            (§ return true)
        )
        (§ if (§ expr o == nil || (getClass) != (.. o (getClass))))
        (§ block
            (§ return false)
        )
        (§ var #_"DeterministicSeed" (§ name other) (§ cast #_"DeterministicSeed" o))
        (§ expr creationTimeSeconds == (.. other creationTimeSeconds) && (Objects/equal encryptedMnemonicCode, (.. other encryptedMnemonicCode)) && (Objects/equal mnemonicCode, (.. other mnemonicCode)))
    )

    #_override
    #_public
    (§ method #_"int" (§ fn hashCode) [])
    (§ block
        (Objects/hashCode creationTimeSeconds, encryptedMnemonicCode, mnemonicCode)
    )

    ;;;
     ; Check if our mnemonic is a valid mnemonic phrase for our word list.
     ; Does nothing if we are encrypted.
     ;
     ; @throws org.bitcoinj.crypto.MnemonicException if check fails.
     ;;
    #_public
    (§ method #_"void" (§ fn check) [])
        (§ throws #_"MnemonicException")
    (§ block
        (§ if (some? mnemonicCode))
        (§ block
            (.. MnemonicCode/INSTANCE (check mnemonicCode))
        )
        nil
    )

    (§ method #_"byte[]" (§ fn getEntropyBytes) [])
        (§ throws #_"MnemonicException")
    (§ block
        (.. MnemonicCode/INSTANCE (toEntropy mnemonicCode))
    )

    ;;; Get the mnemonic code, or null if unknown. ;;
    #_nilable
    #_public
    (§ method #_"List<String>" (§ fn getMnemonicCode) [])
    (§ block
        mnemonicCode
    )

    #_private
    #_static
    (§ defn- #_"List<String>" (§ fn decodeMnemonicCode) [#_"byte[]" (§ name mnemonicCode)])
    (§ block
        (decodeMnemonicCode (Utils/toString mnemonicCode, "UTF-8"))
    )

    #_private
    #_static
    (§ defn- #_"List<String>" (§ fn decodeMnemonicCode) [#_"String" (§ name mnemonicCode)])
    (§ block
        (.. (Splitter/on " ") (splitToList mnemonicCode))
    )
)

#_(ns org.bitcoinj.wallet #_"DeterministicUpgradeRequiredException")

;;;
 ; Indicates that an attempt was made to use HD wallet features on a wallet that was deserialized from an old,
 ; pre-HD random wallet without calling upgradeToDeterministic() beforehand.
 ;;
#_public
(§ class #_"DeterministicUpgradeRequiredException" (§ extends #_"RuntimeException"))

#_(ns org.bitcoinj.wallet #_"DeterministicUpgradeRequiresPassword")

;;;
 ; Indicates that the pre-HD random wallet is encrypted, so you should try the upgrade again after getting the
 ; users password.  This is required because HD wallets are upgraded from random using the private key bytes of
 ; the oldest non-rotating key, in order to make the upgrade process itself deterministic.
 ;;
#_public
(§ class #_"DeterministicUpgradeRequiresPassword" (§ extends #_"RuntimeException"))

#_(ns org.bitcoinj.wallet #_"EncryptableKeyChain"
    (:import [org.spongycastle.crypto.params KeyParameter])
   (:require [org.bitcoinj.crypto KeyCrypter KeyCrypterException]))

;;;
 ; An encryptable key chain is a key-chain that can be encrypted with a user-provided password or AES key.
 ;;
#_public
(§ interface #_"EncryptableKeyChain" (§ extends #_"KeyChain")
    ;;;
     ; Takes the given password, which should be strong, derives a key from it and then invokes
     ; {@link #toEncrypted(org.bitcoinj.crypto.KeyCrypter, org.spongycastle.crypto.params.KeyParameter)}
     ; with {@link org.bitcoinj.crypto.KeyCrypterScrypt} as the crypter.
     ;
     ; @return the derived key, in case you wish to cache it for future use.
     ;;
    (§ method #_"EncryptableKeyChain" (§ fn toEncrypted) [#_"CharSequence" (§ name password)])

    ;;;
     ; Returns a new keychain holding identical/cloned keys to this chain, but encrypted under the given key.
     ; Old keys and keychains remain valid and so you should ensure you don't accidentally hold references to them.
     ;;
    (§ method #_"EncryptableKeyChain" (§ fn toEncrypted) [#_"KeyCrypter" (§ name keyCrypter), #_"KeyParameter" (§ name aesKey)])

    ;;;
     ; Decrypts the key chain with the given password.
     ; See {@link #toDecrypted(org.spongycastle.crypto.params.KeyParameter)} for details.
     ;;
    (§ method #_"EncryptableKeyChain" (§ fn toDecrypted) [#_"CharSequence" (§ name password)])

    ;;;
     ; Decrypt the key chain with the given AES key and whatever {@link KeyCrypter} is already set.  Note that
     ; if you just want to spend money from an encrypted wallet, don't decrypt the whole thing first.  Instead,
     ; set the {@link org.bitcoinj.wallet.SendRequest#aesKey} field before asking the wallet to build the send.
     ;
     ; @param aesKey AES key to use (normally created using KeyCrypter#deriveKey and cached as it is time
     ;               consuming to create from a password).
     ; @throws KeyCrypterException if the wallet decryption fails.  If so, the wallet state is unchanged.
     ;;
    (§ method #_"EncryptableKeyChain" (§ fn toDecrypted) [#_"KeyParameter" (§ name aesKey)])

    (§ method #_"boolean" (§ fn checkPassword) [#_"CharSequence" (§ name password)])
    (§ method #_"boolean" (§ fn checkAESKey) [#_"KeyParameter" (§ name aesKey)])

    ;;; Returns the key crypter used by this key chain, or null if it's not encrypted. ;;
    #_nilable
    (§ method #_"KeyCrypter" (§ fn getKeyCrypter) [])
)

#_(ns org.bitcoinj.wallet #_"FilteringCoinSelector"
    (:import [java.util HashSet Iterator List])
   (:require [org.bitcoinj.core *]))

;;;
 ; A filtering coin selector delegates to another coin selector, but won't select outputs spent by the given transactions.
 ;;
#_public
(§ class #_"FilteringCoinSelector" (§ implements #_"CoinSelector")
    #_protected
    (§ field #_"CoinSelector" (§ name delegate))
    #_protected
    (§ field #_"HashSet<TransactionOutPoint>" (§ name spent) (§ new #_"HashSet<>"))

    #_public
    (§ constructor #_"FilteringCoinSelector" [#_"CoinSelector" (§ name delegate)])
    (§ block
        (§ ass (§ name (.. this delegate)) delegate)
        this
    )

    #_public
    (§ method #_"void" (§ fn excludeOutputsSpentBy) [#_"Transaction" (§ name tx)])
    (§ block
        (§ for (§ var #_"TransactionInput" (§ name input)) :for (.. tx (getInputs)))
        (§ block
            (.. spent (add (.. input (getOutpoint))))
        )
        nil
    )

    #_override
    #_public
    (§ method #_"CoinSelection" (§ fn select) [#_"Coin" (§ name target), #_"List<TransactionOutput>" (§ name candidates)])
    (§ block
        (§ var #_"Iterator<TransactionOutput>" (§ name iter) (.. candidates (iterator)))
        (§ while (.. iter (hasNext)))
        (§ block
            (§ var #_"TransactionOutput" (§ name output) (.. iter (next)))
            (§ if (.. spent (contains (.. output (getOutPointFor)))))
            (§ block
                (.. iter (remove))
            )
        )
        (.. delegate (select target, candidates))
    )
)

#_(ns org.bitcoinj.wallet #_"KeyBag"
   (:require [org.bitcoinj.core ECKey]))

;;;
 ; A KeyBag is simply an object that can map public keys, their 160-bit hashes and script hashes to ECKey
 ; and {@link RedeemData} objects.
 ;;
#_public
(§ interface #_"KeyBag"
    ;;;
     ; Locates a keypair from the keychain given the hash of the public key.  This is needed when finding out
     ; which key we need to use to redeem a transaction output.
     ;
     ; @return ECKey object or null if no such key was found.
     ;;
    #_nilable
    (§ method #_"ECKey" (§ fn findKeyFromPubHash) [#_"byte[]" (§ name pubkeyHash)])

    ;;;
     ; Locates a keypair from the keychain given the raw public key bytes.
     ;
     ; @return ECKey or null if no such key was found.
     ;;
    #_nilable
    (§ method #_"ECKey" (§ fn findKeyFromPubKey) [#_"byte[]" (§ name pubkey)])

    ;;;
     ; Locates a redeem data (redeem script and keys) from the keychain given the hash of the script.
     ; This is needed when finding out which key and script we need to use to locally sign a P2SH transaction input.
     ; It is assumed that wallet should not have more than one private key for a single P2SH tx for security reasons.
     ;
     ; @return RedeemData object or null if no such data was found.
     ;;
    #_nilable
    (§ method #_"RedeemData" (§ fn findRedeemDataFromScriptHash) [#_"byte[]" (§ name scriptHash)])
)

#_(ns org.bitcoinj.wallet #_"KeyChain"
    (:import [java.util List]
             [java.util.concurrent Executor])
   (:require [org.bitcoinj.core BloomFilter ECKey]
             [org.bitcoinj.wallet.listeners KeyChainEventListener]))

;;;
 ; <p>A KeyChain is a class that stores a collection of keys for a {@link org.bitcoinj.wallet.Wallet}.  Key chains
 ; are expected to be able to look up keys given a hash (i.e. address) or pubkey bytes, and provide keys on request
 ; for a given purpose.  They can inform event listeners about new keys being added.</p>
 ;
 ; <p>However it is important to understand what this interface does <i>not</i> provide.  It cannot encrypt or decrypt
 ; keys, for instance you need an implementor of {@link EncryptableKeyChain}.  It cannot have keys imported into it,
 ; that you to use a method of a specific key chain instance, such as {@link BasicKeyChain}.  The reason for these
 ; restrictions is to support key chains that may be handled by external hardware or software, or which are derived
 ; deterministically from a seed (and thus the notion of importing a key is meaningless).</p>
 ;;
#_public
(§ interface #_"KeyChain"
    ;;; Returns true if the given key is in the chain. ;;
    (§ method #_"boolean" (§ fn hasKey) [#_"ECKey" (§ name key)])

    (§ enum #_"KeyPurpose"
        (§ item RECEIVE_FUNDS)
        (§ item CHANGE)
        (§ item REFUND)
        (§ item AUTHENTICATION)
    )

    ;;;
     ; Obtains a number of key/s intended for the given purpose.
     ; The chain may create new key/s, derive, or re-use an old one.
     ;;
    (§ method #_"List<? extends ECKey>" (§ fn getKeys) [#_"KeyPurpose" (§ name purpose), #_"int" (§ name numberOfKeys)])

    ;;;
     ; Obtains a key intended for the given purpose.
     ; The chain may create a new key, derive one, or re-use an old one.
     ;;
    (§ method #_"ECKey" (§ fn getKey) [#_"KeyPurpose" (§ name purpose)])

    ;;; Returns a list of keys serialized to the bitcoinj protobuf format. ;;
    (§ method #_"List<Protos.Key>" (§ fn serializeToProtobuf) [])

    ;;; Adds a listener for events that are run when keys are added, on the user thread. ;;
    (§ method #_"void" (§ fn addEventListener) [#_"KeyChainEventListener" (§ name listener)])

    ;;; Adds a listener for events that are run when keys are added, on the given executor. ;;
    (§ method #_"void" (§ fn addEventListener) [#_"KeyChainEventListener" (§ name listener), #_"Executor" (§ name executor)])

    ;;; Removes a listener for events that are run when keys are added. ;;
    (§ method #_"boolean" (§ fn removeEventListener) [#_"KeyChainEventListener" (§ name listener)])

    ;;; Returns the number of keys this key chain manages. ;;
    (§ method #_"int" (§ fn numKeys) [])

    ;;;
     ; Returns the number of elements this chain wishes to insert into the Bloom filter.
     ; The size passed to {@link #getFilter(int, double, long)} should be at least this large.
     ;;
    (§ method #_"int" (§ fn numBloomFilterEntries) [])

    ;;;
     ; Returns the earliest creation time of keys in this chain, in seconds since the epoch.  This can return
     ; zero if at least one key does not have that data (was created before key timestamping was implemented).
     ; If there are no keys in the wallet, {@link Long#MAX_VALUE} is returned.
     ;;
    (§ method #_"long" (§ fn getEarliestKeyCreationTime) [])

    ;;;
     ; <p>Gets a bloom filter that contains all of the public keys from this chain, and which will provide the given
     ; false-positive rate if it has size elements.  Keep in mind that you will get 2 elements in the bloom filter for
     ; each key in the key chain, for the public key and the hash of the public key (address form).  For this reason
     ; size should be <i>at least</i> 2x the result of {@link #numKeys()}.</p>
     ;
     ; <p>This is used to generate a {@link BloomFilter} which can be {@link BloomFilter#merge(BloomFilter)}d with
     ; another.  It could also be used if you have a specific target for the filter's size.</p>
     ;
     ; <p>See the docs for {@link org.bitcoinj.core.BloomFilter#BloomFilter(int, double, long)} for a brief
     ; explanation of anonymity when using bloom filters, and for the meaning of these parameters.</p>
     ;;
    (§ method #_"BloomFilter" (§ fn getFilter) [#_"int" (§ name size), #_"double" (§ name falsePositiveRate), #_"long" (§ name tweak)])
)

#_(ns org.bitcoinj.wallet #_"KeyChainFactory"
   (:require [org.bitcoinj.crypto DeterministicKey KeyCrypter]))

;;;
 ; Factory interface for creation keychains while de-serializing a wallet.
 ;;
#_public
(§ interface #_"KeyChainFactory"
    ;;;
     ; Make a keychain (but not a watching one).
     ;
     ; @param key The protobuf for the root key.
     ; @param firstSubKey The protobuf for the first child key (normally the parent of the external subchain).
     ; @param seed The seed.
     ; @param crypter The encrypted/decrypter.
     ; @param isMarried Whether the keychain is leading in a marriage.
     ;;
    (§ method #_"DeterministicKeyChain" (§ fn makeKeyChain) [#_"Protos.Key" (§ name key), #_"Protos.Key" (§ name firstSubKey), #_"DeterministicSeed" (§ name seed), #_"KeyCrypter" (§ name crypter), #_"boolean" (§ name isMarried)])

    ;;;
     ; Make a watching keychain.
     ;
     ; isMarried and isFollowingKey must not be true at the same time.
     ;
     ; @param key The protobuf for the account key.
     ; @param firstSubKey The protobuf for the first child key (normally the parent of the external subchain).
     ; @param accountKey The account extended public key.
     ; @param isFollowingKey Whether the keychain is following in a marriage.
     ; @param isMarried Whether the keychain is leading in a marriage.
     ;;
    (§ method #_"DeterministicKeyChain" (§ fn makeWatchingKeyChain) [#_"Protos.Key" (§ name key), #_"Protos.Key" (§ name firstSubKey), #_"DeterministicKey" (§ name accountKey), #_"boolean" (§ name isFollowingKey), #_"boolean" (§ name isMarried)])
        (§ throws #_"UnreadableWalletException")
)

#_(ns org.bitcoinj.wallet #_"KeyChainGroup"
    (:import [java.security *]
             [java.util *]
             [java.util.concurrent *])
    (:import [com.google.common.base Preconditions]
             [com.google.common.collect *]
             [com.google.protobuf *]
             [org.slf4j *]
             [org.spongycastle.crypto.params *])
   (:require [org.bitcoinj.core *]
             [org.bitcoinj.crypto *]
             [org.bitcoinj.script *]
             [org.bitcoinj.utils *]
             [org.bitcoinj.wallet.listeners KeyChainEventListener]))

;;;
 ; <p>A KeyChainGroup is used by the {@link org.bitcoinj.wallet.Wallet} and manages: a {@link BasicKeyChain} object
 ; (which will normally be empty), and zero or more {@link DeterministicKeyChain}s.  A deterministic key chain will be
 ; created lazily/on demand when a fresh or current key is requested, possibly being initialized from the private key
 ; bytes of the earliest non rotating key in the basic key chain if one is available, or from a fresh random seed if not.</p>
 ;
 ; <p>If a key rotation time is set, it may be necessary to add a new DeterministicKeyChain with a fresh seed and
 ; also preserve the old one, so funds can be swept from the rotating keys.  In this case, there may be more than
 ; one deterministic chain.  The latest chain is called the active chain and is where new keys are served from.</p>
 ;
 ; <p>The wallet delegates most key management tasks to this class.  It is <b>not</b> thread safe and requires external
 ; locking, i.e. by the wallet lock.  The group then in turn delegates most operations to the key chain objects,
 ; combining their responses together when necessary.</p>
 ;
 ; <p>Deterministic key chains have a concept of a lookahead size and threshold.  Please see the discussion in the
 ; class docs for {@link DeterministicKeyChain} for more information on this topic.</p>
 ;;
#_public
(§ class #_"KeyChainGroup" (§ implements #_"KeyBag")
    #_static
    (§ block
        ;; Init proper random number generator, as some old Android installations have bugs that make it unsecure.
        (§ if (Utils/isAndroidRuntime))
        (§ block
            (§ new #_"LinuxSecureRandom")
        )
    )

    #_private
    #_static
    (§ def- #_"Logger" (§ name log) (LoggerFactory/getLogger (§ klass #_"KeyChainGroup")))

    #_private
    (§ field- #_"BasicKeyChain" (§ name basic))
    #_private
    (§ field- #_"NetworkParameters" (§ name params))
    #_protected
    (§ field #_"LinkedList<DeterministicKeyChain>" (§ name chains))
    ;; currentKeys is used for normal, non-multisig/married wallets.
    ;; currentAddresses is used when we're handing out P2SH addresses.
    ;; They're mutually exclusive.
    #_private
    (§ field- #_"EnumMap<KeyChain.KeyPurpose, DeterministicKey>" (§ name currentKeys))
    #_private
    (§ field- #_"EnumMap<KeyChain.KeyPurpose, Address>" (§ name currentAddresses))

    #_nilable
    #_private
    (§ field- #_"KeyCrypter" (§ name keyCrypter))
    #_private
    (§ field- #_"int" (§ name lookaheadSize) -1)
    #_private
    (§ field- #_"int" (§ name lookaheadThreshold) -1)

    ;;; Creates a keychain group with no basic chain, and a single, lazily created HD chain. ;;
    #_public
    (§ constructor #_"KeyChainGroup" [#_"NetworkParameters" (§ name params)])
    (§ block
        (§ this params, nil, (§ new #_"ArrayList<DeterministicKeyChain>" 1), nil, nil)
        this
    )

    ;;; Creates a keychain group with no basic chain, and an HD chain initialized from the given seed. ;;
    #_public
    (§ constructor #_"KeyChainGroup" [#_"NetworkParameters" (§ name params), #_"DeterministicSeed" (§ name seed)])
    (§ block
        (§ this params, nil, (ImmutableList/of (§ new #_"DeterministicKeyChain" seed)), nil, nil)
        this
    )

    ;;;
     ; Creates a keychain group with no basic chain, and an HD chain that is watching the given watching key.
     ; This HAS to be an account key as returned by {@link DeterministicKeyChain#getWatchingKey()}.
     ;;
    #_public
    (§ constructor #_"KeyChainGroup" [#_"NetworkParameters" (§ name params), #_"DeterministicKey" (§ name watchKey)])
    (§ block
        (§ this params, nil, (ImmutableList/of (DeterministicKeyChain/watch watchKey)), nil, nil)
        this
    )

    ;; Used for deserialization.
    #_private
    (§ constructor- #_"KeyChainGroup" [#_"NetworkParameters" (§ name params), #_nilable #_"BasicKeyChain" (§ name basicKeyChain), #_"List<DeterministicKeyChain>" (§ name chains), #_nilable #_"EnumMap<KeyChain.KeyPurpose, DeterministicKey>" (§ name currentKeys), #_nilable #_"KeyCrypter" (§ name crypter)])
    (§ block
        (§ ass (§ name (.. this params)) params)
        (§ ass (§ name (.. this basic)) (or basicKeyChain (§ new #_"BasicKeyChain")))
        (§ ass (§ name (.. this chains)) (§ new #_"LinkedList<>" (Preconditions/checkNotNull chains)))
        (§ ass (§ name (.. this keyCrypter)) crypter)
        (§ ass (§ name (.. this currentKeys)) (or currentKeys (§ new #_"EnumMap<KeyChain.KeyPurpose, DeterministicKey>" (§ klass #_"KeyChain.KeyPurpose"))))
        (§ ass (§ name (.. this currentAddresses)) (§ new #_"EnumMap<>" (§ klass #_"KeyChain.KeyPurpose")))
        (maybeLookaheadScripts)

        (§ if (isMarried))
        (§ block
            (§ for (§ var #_"Map.Entry<KeyChain.KeyPurpose, DeterministicKey>" (§ name entry)) :for (.. this currentKeys (entrySet)))
            (§ block
                (§ var #_"Address" (§ name address) (.. (makeP2SHOutputScript (.. entry (getValue)), (getActiveKeyChain)) (getToAddress params)))
                (.. currentAddresses (put (.. entry (getKey)), address))
            )
        )
        this
    )

    ;; This keeps married redeem data in sync with the number of keys issued.
    #_private
    (§ method- #_"void" (§ fn maybeLookaheadScripts) [])
    (§ block
        (§ for (§ var #_"DeterministicKeyChain" (§ name chain)) :for chains)
        (§ block
            (.. chain (maybeLookAheadScripts))
        )
        nil
    )

    ;;; Adds a new HD chain to the chains list, and make it the default chain (from which keys are issued). ;;
    #_public
    (§ method #_"void" (§ fn createAndActivateNewHDChain) [])
    (§ block
        ;; We can't do auto upgrade here because we don't know the rotation time, if any.
        (§ var #_"DeterministicKeyChain" (§ name chain) (§ new #_"DeterministicKeyChain" (§ new #_"SecureRandom")))
        (addAndActivateHDChain chain)
        nil
    )

    ;;;
     ; Adds an HD chain to the chains list, and make it the default chain (from which keys are issued).
     ; Useful for adding a complex pre-configured keychain, such as a married wallet.
     ;;
    #_public
    (§ method #_"void" (§ fn addAndActivateHDChain) [#_"DeterministicKeyChain" (§ name chain)])
    (§ block
        (.. log (info "Creating and activating a new HD chain: {}", chain))
        (§ for (§ var #_"ListenerRegistration<KeyChainEventListener>" (§ name registration)) :for (.. basic (getListeners)))
        (§ block
            (.. chain (addEventListener (.. registration listener), (.. registration executor)))
        )
        (§ if (<= 0 lookaheadSize))
        (§ block
            (.. chain (setLookaheadSize lookaheadSize))
        )
        (§ if (<= 0 lookaheadThreshold))
        (§ block
            (.. chain (setLookaheadThreshold lookaheadThreshold))
        )
        (.. chains (add chain))
        nil
    )

    ;;;
     ; Returns a key that hasn't been seen in a transaction yet, and which is suitable for displaying in a wallet
     ; user interface as "a convenient key to receive funds on" when the purpose parameter is
     ; {@link KeyChain.KeyPurpose#RECEIVE_FUNDS}.  The returned key is stable until it's actually seen in a pending
     ; or confirmed transaction, at which point this method will start returning a different key (for each purpose
     ; independently).
     ;
     ; <p>This method is not supposed to be used for married keychains and will throw UnsupportedOperationException
     ; if the active chain is married.
     ; For married keychains use {@link #currentAddress(KeyChain.KeyPurpose)} to get a proper P2SH address.</p>
     ;;
    #_public
    (§ method #_"DeterministicKey" (§ fn currentKey) [#_"KeyChain.KeyPurpose" (§ name purpose)])
    (§ block
        (§ var #_"DeterministicKeyChain" (§ name chain) (getActiveKeyChain))
        (§ if (.. chain (isMarried)))
        (§ block
            (§ throw (§ new #_"UnsupportedOperationException" "Key is not suitable to receive coins for married keychains. Use freshAddress to get P2SH address instead."))
        )

        (§ var #_"DeterministicKey" (§ name current) (.. currentKeys (get purpose)))
        (§ if (nil? current))
        (§ block
            (§ ass (§ name current) (freshKey purpose))
            (.. currentKeys (put purpose, current))
        )
        current
    )

    ;;;
     ; Returns address for a {@link #currentKey(KeyChain.KeyPurpose)}.
     ;;
    #_public
    (§ method #_"Address" (§ fn currentAddress) [#_"KeyChain.KeyPurpose" (§ name purpose)])
    (§ block
        (§ var #_"DeterministicKeyChain" (§ name chain) (getActiveKeyChain))
        (§ if (.. chain (isMarried)))
        (§ block
            (§ var #_"Address" (§ name current) (.. currentAddresses (get purpose)))
            (§ if (nil? current))
            (§ block
                (§ ass (§ name current) (freshAddress purpose))
                (.. currentAddresses (put purpose, current))
            )
            (§ return current)
        )

        (.. (currentKey purpose) (toAddress params))
    )

    ;;;
     ; Returns a key that has not been returned by this method before (fresh).  You can think of this as being a newly
     ; created key, although the notion of "create" is not really valid for a {@link DeterministicKeyChain}.  When the
     ; parameter is {@link KeyChain.KeyPurpose#RECEIVE_FUNDS}, the returned key is suitable for being put into a receive
     ; coins wizard type UI.  You should use this when the user is definitely going to hand this key out to someone who
     ; wishes to send money.
     ; <p>This method is not supposed to be used for married keychains and will throw UnsupportedOperationException if
     ; the active chain is married.
     ; For married keychains use {@link #freshAddress(KeyChain.KeyPurpose)} to get a proper P2SH address.</p>
     ;;
    #_public
    (§ method #_"DeterministicKey" (§ fn freshKey) [#_"KeyChain.KeyPurpose" (§ name purpose)])
    (§ block
        (.. (freshKeys purpose, 1) (get 0))
    )

    ;;;
     ; Returns a key/s that have not been returned by this method before (fresh).  You can think of this as being newly
     ; created key/s, although the notion of "create" is not really valid for a {@link DeterministicKeyChain}.  When the
     ; parameter is {@link KeyChain.KeyPurpose#RECEIVE_FUNDS}, the returned key is suitable for being put into a receive
     ; coins wizard type UI.  You should use this when the user is definitely going to hand this key out to someone who
     ; wishes to send money.
     ; <p>This method is not supposed to be used for married keychains and will throw UnsupportedOperationException if
     ; the active chain is married.
     ; For married keychains use {@link #freshAddress(KeyChain.KeyPurpose)} to get a proper P2SH address.</p>
     ;;
    #_public
    (§ method #_"List<DeterministicKey>" (§ fn freshKeys) [#_"KeyChain.KeyPurpose" (§ name purpose), #_"int" (§ name numberOfKeys)])
    (§ block
        (§ var #_"DeterministicKeyChain" (§ name chain) (getActiveKeyChain))
        (§ if (.. chain (isMarried)))
        (§ block
            (§ throw (§ new #_"UnsupportedOperationException" "Key is not suitable to receive coins for married keychains. Use freshAddress to get P2SH address instead."))
        )

        (.. chain (getKeys purpose, numberOfKeys)) ;; Always returns the next key along the key chain.
    )

    ;;;
     ; Returns address for a {@link #freshKey(KeyChain.KeyPurpose)}.
     ;;
    #_public
    (§ method #_"Address" (§ fn freshAddress) [#_"KeyChain.KeyPurpose" (§ name purpose)])
    (§ block
        (§ var #_"DeterministicKeyChain" (§ name chain) (getActiveKeyChain))
        (§ if (.. chain (isMarried)))
        (§ block
            (§ var #_"Script" (§ name outputScript) (.. chain (freshOutputScript purpose)))
            (Preconditions/checkState (.. outputScript (isPayToScriptHash))) ;; Only handle P2SH for now.
            (§ var #_"Address" (§ name freshAddress) (Address/fromP2SHScript params, outputScript))
            (maybeLookaheadScripts)
            (.. currentAddresses (put purpose, freshAddress))
            (§ return freshAddress)
        )

        (.. (freshKey purpose) (toAddress params))
    )

    ;;; Returns the key chain that's used for generation of fresh/current keys.  This is always the newest HD chain. ;;
    #_public
    (§ method #_"DeterministicKeyChain" (§ fn getActiveKeyChain) [])
    (§ block
        (§ if (.. chains (isEmpty)))
        (§ block
            (§ if (§ expr 0 < (.. basic (numKeys))))
            (§ block
                (.. log (warn "No HD chain present but random keys are: you probably deserialized an old wallet."))
                ;; If called from the wallet (most likely) it'll try to upgrade us, as it knows the rotation time but not the password.
                (§ throw (§ new #_"DeterministicUpgradeRequiredException"))
            )
            ;; Otherwise we have no HD chains and no random keys: we are a new born!  So a random seed is fine.
            (createAndActivateNewHDChain)
        )
        (.. chains (get (- (.. chains (size)) 1)))
    )

    ;;;
     ; Sets the lookahead buffer size for ALL deterministic key chains as well as for following key chains if any exist.
     ; See {@link DeterministicKeyChain#setLookaheadSize(int)} for more information.
     ;;
    #_public
    (§ method #_"void" (§ fn setLookaheadSize) [#_"int" (§ name lookaheadSize)])
    (§ block
        (§ ass (§ name (.. this lookaheadSize)) lookaheadSize)
        (§ for (§ var #_"DeterministicKeyChain" (§ name chain)) :for chains)
        (§ block
            (.. chain (setLookaheadSize lookaheadSize))
        )
        nil
    )

    ;;;
     ; Gets the current lookahead size being used for ALL deterministic key chains.
     ; See {@link DeterministicKeyChain#setLookaheadSize(int)} for more information.
     ;;
    #_public
    (§ method #_"int" (§ fn getLookaheadSize) [])
    (§ block
        (if (== lookaheadSize -1) (.. (getActiveKeyChain) (getLookaheadSize)) lookaheadSize)
    )

    ;;;
     ; Sets the lookahead buffer threshold for ALL deterministic key chains.
     ; See {@link DeterministicKeyChain#setLookaheadThreshold(int)} for more information.
     ;;
    #_public
    (§ method #_"void" (§ fn setLookaheadThreshold) [#_"int" (§ name num)])
    (§ block
        (§ for (§ var #_"DeterministicKeyChain" (§ name chain)) :for chains)
        (§ block
            (.. chain (setLookaheadThreshold num))
        )
        nil
    )

    ;;;
     ; Gets the current lookahead threshold being used for ALL deterministic key chains.
     ; See {@link DeterministicKeyChain#setLookaheadThreshold(int)} for more information.
     ;;
    #_public
    (§ method #_"int" (§ fn getLookaheadThreshold) [])
    (§ block
        (if (== lookaheadThreshold -1) (.. (getActiveKeyChain) (getLookaheadThreshold)) lookaheadThreshold)
    )

    ;;; Imports the given keys into the basic chain, creating it if necessary. ;;
    #_public
    (§ method #_"int" (§ fn importKeys) [#_"List<ECKey>" (§ name keys)])
    (§ block
        (.. basic (importKeys keys))
    )

    ;;; Imports the given keys into the basic chain, creating it if necessary. ;;
    #_public
    (§ method #_"int" (§ fn importKeys) [#_"ECKey..." (§ name keys)])
    (§ block
        (importKeys (ImmutableList/copyOf keys))
    )

    #_public
    (§ method #_"boolean" (§ fn checkPassword) [#_"CharSequence" (§ name password)])
    (§ block
        (Preconditions/checkState (some? keyCrypter), "Not encrypted")

        (checkAESKey (.. keyCrypter (deriveKey password)))
    )

    #_public
    (§ method #_"boolean" (§ fn checkAESKey) [#_"KeyParameter" (§ name aesKey)])
    (§ block
        (Preconditions/checkState (some? keyCrypter), "Not encrypted")

        (if (< 0 (.. basic (numKeys))) (.. basic (checkAESKey aesKey)) (.. (getActiveKeyChain) (checkAESKey aesKey)))
    )

    ;;; Imports the given unencrypted keys into the basic chain, encrypting them along the way with the given key. ;;
    #_public
    (§ method #_"int" (§ fn importKeysAndEncrypt) [#_"List<ECKey>" (§ name keys), #_"KeyParameter" (§ name aesKey)])
    (§ block
        ;; TODO: Firstly check if the aes key can decrypt any of the existing keys successfully.
        (Preconditions/checkState (some? keyCrypter), "Not encrypted")

        (§ var #_"LinkedList<ECKey>" (§ name encryptedKeys) (Lists/newLinkedList))
        (§ for (§ var #_"ECKey" (§ name key)) :for keys)
        (§ block
            (§ if (.. key (isEncrypted)))
            (§ block
                (§ throw (§ new #_"IllegalArgumentException" "Cannot provide already encrypted keys"))
            )

            (.. encryptedKeys (add (.. key (encrypt keyCrypter, aesKey))))
        )
        (importKeys encryptedKeys)
    )

    #_override
    #_nilable
    #_public
    (§ method #_"RedeemData" (§ fn findRedeemDataFromScriptHash) [#_"byte[]" (§ name scriptHash)])
    (§ block
        ;; Iterate in reverse order, since the active keychain is the one most likely to have the hit.
        (§ for (§ var #_"Iterator<DeterministicKeyChain>" (§ name iter) (.. chains (descendingIterator))) :for (.. iter (hasNext)) :for (§ expr ))
        (§ block
            (§ var #_"DeterministicKeyChain" (§ name chain) (.. iter (next)))
            (§ var #_"RedeemData" (§ name redeemData) (.. chain (findRedeemDataByScriptHash (ByteString/copyFrom scriptHash))))
            (§ if (some? redeemData))
            (§ block
                (§ return redeemData)
            )
        )
        nil
    )

    #_public
    (§ method #_"void" (§ fn markP2SHAddressAsUsed) [#_"Address" (§ name address)])
    (§ block
        (Preconditions/checkArgument (.. address (isP2SHAddress)))

        (§ var #_"RedeemData" (§ name data) (findRedeemDataFromScriptHash (.. address (getHash160))))
        (§ if (nil? data))
        (§ block
            (§ return nil) ;; Not our P2SH address.
        )

        (§ for (§ var #_"ECKey" (§ name key)) :for (.. data keys))
        (§ block
            (§ for (§ var #_"DeterministicKeyChain" (§ name chain)) :for chains)
            (§ block
                (§ var #_"DeterministicKey" (§ name k) (.. chain (findKeyFromPubKey (.. key (getPubKey)))))
                (§ if (some? k))
                (§ block
                    (.. chain (markKeyAsUsed k))
                    (maybeMarkCurrentAddressAsUsed address)
                )
            )
        )
        nil
    )

    #_nilable
    #_override
    #_public
    (§ method #_"ECKey" (§ fn findKeyFromPubHash) [#_"byte[]" (§ name pubkeyHash)])
    (§ block
        (§ var #_"ECKey" (§ name result) (.. basic (findKeyFromPubHash pubkeyHash)))
        (§ if (some? result))
        (§ block
            (§ return result)
        )

        (§ for (§ var #_"DeterministicKeyChain" (§ name chain)) :for chains)
        (§ block
            (§ ass (§ name result) (.. chain (findKeyFromPubHash pubkeyHash)))
            (§ if (some? result))
            (§ block
                (§ return result)
            )
        )

        nil
    )

    ;;;
     ; Mark the DeterministicKeys as used, if they match the pubkeyHash.
     ; See {@link DeterministicKeyChain#markKeyAsUsed(DeterministicKey)} for more info on this.
     ;;
    #_public
    (§ method #_"void" (§ fn markPubKeyHashAsUsed) [#_"byte[]" (§ name pubkeyHash)])
    (§ block
        (§ for (§ var #_"DeterministicKeyChain" (§ name chain)) :for chains)
        (§ block
            (§ var #_"DeterministicKey" (§ name key) (.. chain (markPubHashAsUsed pubkeyHash)))
            (§ if (some? key))
            (§ block
                (maybeMarkCurrentKeyAsUsed key)
                (§ return nil)
            )
        )
        nil
    )

    ;;; If the given P2SH address is "current", advance it to a new one. ;;
    #_private
    (§ method- #_"void" (§ fn maybeMarkCurrentAddressAsUsed) [#_"Address" (§ name address)])
    (§ block
        (Preconditions/checkArgument (.. address (isP2SHAddress)))

        (§ for (§ var #_"Map.Entry<KeyChain.KeyPurpose, Address>" (§ name entry)) :for (.. currentAddresses (entrySet)))
        (§ block
            (§ if (§ expr (.. entry (getValue)) != nil && (.. entry (getValue) (equals address))))
            (§ block
                (.. log (info "Marking P2SH address as used: {}", address))
                (.. currentAddresses (put (.. entry (getKey)), (freshAddress (.. entry (getKey)))))
                (§ return nil)
            )
        )
        nil
    )

    ;;; If the given key is "current", advance the current key to a new one. ;;
    #_private
    (§ method- #_"void" (§ fn maybeMarkCurrentKeyAsUsed) [#_"DeterministicKey" (§ name key)])
    (§ block
        ;; It's OK for currentKeys to be empty here: it means we're a married wallet and the key may be a part of a rotating chain.
        (§ for (§ var #_"Map.Entry<KeyChain.KeyPurpose, DeterministicKey>" (§ name entry)) :for (.. currentKeys (entrySet)))
        (§ block
            (§ if (§ expr (.. entry (getValue)) != nil && (.. entry (getValue) (equals key))))
            (§ block
                (.. log (info "Marking key as used: {}", key))
                (.. currentKeys (put (.. entry (getKey)), (freshKey (.. entry (getKey)))))
                (§ return nil)
            )
        )
        nil
    )

    #_public
    (§ method #_"boolean" (§ fn hasKey) [#_"ECKey" (§ name key)])
    (§ block
        (§ if (.. basic (hasKey key)))
        (§ block
            (§ return true)
        )
        (§ for (§ var #_"DeterministicKeyChain" (§ name chain)) :for chains)
        (§ block
            (§ if (.. chain (hasKey key)))
            (§ block
                (§ return true)
            )
        )
        false
    )

    #_nilable
    #_override
    #_public
    (§ method #_"ECKey" (§ fn findKeyFromPubKey) [#_"byte[]" (§ name pubkey)])
    (§ block
        (§ var #_"ECKey" (§ name result) (.. basic (findKeyFromPubKey pubkey)))
        (§ if (some? result))
        (§ block
            (§ return result)
        )

        (§ for (§ var #_"DeterministicKeyChain" (§ name chain)) :for chains)
        (§ block
            (§ ass (§ name result) (.. chain (findKeyFromPubKey pubkey)))
            (§ if (some? result))
            (§ block
                (§ return result)
            )
        )

        nil
    )

    ;;;
     ; Mark the DeterministicKeys as used, if they match the pubkey.
     ; See {@link DeterministicKeyChain#markKeyAsUsed(DeterministicKey)} for more info on this.
     ;;
    #_public
    (§ method #_"void" (§ fn markPubKeyAsUsed) [#_"byte[]" (§ name pubkey)])
    (§ block
        (§ for (§ var #_"DeterministicKeyChain" (§ name chain)) :for chains)
        (§ block
            (§ var #_"DeterministicKey" (§ name key) (.. chain (markPubKeyAsUsed pubkey)))
            (§ if (some? key))
            (§ block
                (maybeMarkCurrentKeyAsUsed key)
                (§ return nil)
            )
        )
        nil
    )

    ;;; Returns the number of keys managed by this group, including the lookahead buffers. ;;
    #_public
    (§ method #_"int" (§ fn numKeys) [])
    (§ block
        (§ var #_"int" (§ name result) (.. basic (numKeys)))
        (§ for (§ var #_"DeterministicKeyChain" (§ name chain)) :for chains)
        (§ block
            (§ ass (§ name result) (§ expr result + (.. chain (numKeys))))
        )
        result
    )

    ;;;
     ; Removes a key that was imported into the basic key chain.  You cannot remove deterministic keys.
     ; @throws java.lang.IllegalArgumentException if the key is deterministic.
     ;;
    #_public
    (§ method #_"boolean" (§ fn removeImportedKey) [#_"ECKey" (§ name key)])
    (§ block
        (Preconditions/checkNotNull key)
        (Preconditions/checkArgument (§ not (§ insta key #_"DeterministicKey")))

        (.. basic (removeKey key))
    )

    ;;;
     ; Whether the active keychain is married.  A keychain is married when it vends P2SH addresses
     ; from multiple keychains in a multisig relationship.
     ; @see org.bitcoinj.wallet.MarriedKeyChain
     ;;
    #_public
    (§ method #_"boolean" (§ fn isMarried) [])
    (§ block
        (§ expr (§ not (.. chains (isEmpty))) && (.. (getActiveKeyChain) (isMarried)))
    )

    ;;;
     ; Encrypt the keys in the group using the KeyCrypter and the AES key.
     ; A good default KeyCrypter to use is {@link org.bitcoinj.crypto.KeyCrypterScrypt}.
     ;
     ; @throws org.bitcoinj.crypto.KeyCrypterException if the wallet encryption fails for some reason,
     ;         leaving the group unchanged.
     ; @throws DeterministicUpgradeRequiredException if there are random keys but no HD chain.
     ;;
    #_public
    (§ method #_"void" (§ fn encrypt) [#_"KeyCrypter" (§ name keyCrypter), #_"KeyParameter" (§ name aesKey)])
    (§ block
        (Preconditions/checkNotNull keyCrypter)
        (Preconditions/checkNotNull aesKey)

        ;; This code must be exception safe.
        (§ var #_"BasicKeyChain" (§ name newBasic) (.. basic (toEncrypted keyCrypter, aesKey)))
        (§ var #_"List<DeterministicKeyChain>" (§ name newChains) (§ new #_"ArrayList<>" (.. chains (size))))
        (§ if (§ expr (.. chains (isEmpty)) && (.. basic (numKeys)) == 0))
        (§ block
            ;; No HD chains and no random keys: encrypting an entirely empty keychain group.
            ;; But we can't do that, we must have something to encrypt: so instantiate a new HD chain here.
            (createAndActivateNewHDChain)
        )
        (§ for (§ var #_"DeterministicKeyChain" (§ name chain)) :for chains)
        (§ block
            (.. newChains (add (.. chain (toEncrypted keyCrypter, aesKey))))
        )
        (§ ass (§ name (.. this keyCrypter)) keyCrypter)
        (§ ass (§ name basic) newBasic)
        (.. chains (clear))
        (.. chains (addAll newChains))
        nil
    )

    ;;;
     ; Decrypt the keys in the group using the previously given key crypter and the AES key.
     ; A good default KeyCrypter to use is {@link org.bitcoinj.crypto.KeyCrypterScrypt}.
     ;
     ; @throws org.bitcoinj.crypto.KeyCrypterException if the wallet decryption fails for some reason, leaving the group unchanged.
     ;;
    #_public
    (§ method #_"void" (§ fn decrypt) [#_"KeyParameter" (§ name aesKey)])
    (§ block
        ;; This code must be exception safe.
        (Preconditions/checkNotNull aesKey)

        (§ var #_"BasicKeyChain" (§ name newBasic) (.. basic (toDecrypted aesKey)))
        (§ var #_"List<DeterministicKeyChain>" (§ name newChains) (§ new #_"ArrayList<>" (.. chains (size))))
        (§ for (§ var #_"DeterministicKeyChain" (§ name chain)) :for chains)
        (§ block
            (.. newChains (add (.. chain (toDecrypted aesKey))))
        )

        (§ ass (§ name (.. this keyCrypter)) nil)
        (§ ass (§ name basic) newBasic)
        (.. chains (clear))
        (.. chains (addAll newChains))
        nil
    )

    ;;; Returns true if the group is encrypted. ;;
    #_public
    (§ method #_"boolean" (§ fn isEncrypted) [])
    (§ block
        (some? keyCrypter)
    )

    ;;;
     ; Returns whether this chain has only watching keys (unencrypted keys with no private part).
     ; Mixed chains are forbidden.
     ;
     ; @throws IllegalStateException if there are no keys, or if there is a mix between watching and non-watching keys.
     ;;
    #_public
    (§ method #_"boolean" (§ fn isWatching) [])
    (§ block
        (§ var #_"BasicKeyChain.State" (§ name activeState) BasicKeyChain/State/EMPTY)
        (§ if (§ not (.. chains (isEmpty))))
        (§ block
            (§ ass (§ name activeState) (if (.. (getActiveKeyChain) (isWatching)) BasicKeyChain/State/WATCHING BasicKeyChain/State/REGULAR))
        )

        (§ var #_"BasicKeyChain.State" (§ name basicState) (.. basic (isWatching)))
        (§ if (§ expr basicState == BasicKeyChain/State/EMPTY))
        (§ block
            (§ if (§ expr activeState == BasicKeyChain/State/EMPTY))
            (§ block
                (§ throw (§ new #_"IllegalStateException" "Empty key chain group: cannot answer isWatching() query"))
            )

            (§ return (§ expr activeState == BasicKeyChain/State/WATCHING))
        )

        (§ if (§ expr activeState == BasicKeyChain/State/EMPTY))
        (§ block
            (§ return (§ expr basicState == BasicKeyChain/State/WATCHING))
        )

        (§ if (§ expr activeState != basicState))
        (§ block
            (§ throw (§ new #_"IllegalStateException" "Mix of watching and non-watching keys in wallet"))
        )

        (§ expr activeState == BasicKeyChain/State/WATCHING)
    )

    ;;; Returns the key crypter or null if the group is not encrypted. ;;
    #_nilable
    #_public
    (§ method #_"KeyCrypter" (§ fn getKeyCrypter) [])
    (§ block
        keyCrypter
    )

    ;;;
     ; Returns a list of the non-deterministic keys that have been imported into the wallet, or the empty list if none.
     ;;
    #_public
    (§ method #_"List<ECKey>" (§ fn getImportedKeys) [])
    (§ block
        (.. basic (getKeys))
    )

    #_public
    (§ method #_"long" (§ fn getEarliestKeyCreationTime) [])
    (§ block
        (§ var #_"long" (§ name time) (.. basic (getEarliestKeyCreationTime))) ;; Long.MAX_VALUE if empty.
        (§ for (§ var #_"DeterministicKeyChain" (§ name chain)) :for chains)
        (§ block
            (§ ass (§ name time) (Math/min time, (.. chain (getEarliestKeyCreationTime))))
        )
        time
    )

    #_public
    (§ method #_"int" (§ fn getBloomFilterElementCount) [])
    (§ block
        (§ var #_"int" (§ name result) (.. basic (numBloomFilterEntries)))
        (§ for (§ var #_"DeterministicKeyChain" (§ name chain)) :for chains)
        (§ block
            (§ ass (§ name result) (§ expr result + (.. chain (numBloomFilterEntries))))
        )
        result
    )

    #_public
    (§ method #_"BloomFilter" (§ fn getBloomFilter) [#_"int" (§ name size), #_"double" (§ name falsePositiveRate), #_"long" (§ name nTweak)])
    (§ block
        (§ var #_"BloomFilter" (§ name filter) (§ new #_"BloomFilter" size, falsePositiveRate, nTweak))
        (§ if (§ expr 0 < (.. basic (numKeys))))
        (§ block
            (.. filter (merge (.. basic (getFilter size, falsePositiveRate, nTweak))))
        )

        (§ for (§ var #_"DeterministicKeyChain" (§ name chain)) :for chains)
        (§ block
            (.. filter (merge (.. chain (getFilter size, falsePositiveRate, nTweak))))
        )
        filter
    )

    #_private
    (§ method- #_"Script" (§ fn makeP2SHOutputScript) [#_"DeterministicKey" (§ name followedKey), #_"DeterministicKeyChain" (§ name chain)])
    (§ block
        (ScriptBuilder/createP2SHOutputScript (.. chain (getRedeemData followedKey) redeemScript))
    )

    ;;; Adds a listener for events that are run when keys are added, on the user thread. ;;
    #_public
    (§ method #_"void" (§ fn addEventListener) [#_"KeyChainEventListener" (§ name listener)])
    (§ block
        (addEventListener listener, Threading/USER_THREAD)
        nil
    )

    ;;; Adds a listener for events that are run when keys are added, on the given executor. ;;
    #_public
    (§ method #_"void" (§ fn addEventListener) [#_"KeyChainEventListener" (§ name listener), #_"Executor" (§ name executor)])
    (§ block
        (Preconditions/checkNotNull listener)
        (Preconditions/checkNotNull executor)

        (.. basic (addEventListener listener, executor))
        (§ for (§ var #_"DeterministicKeyChain" (§ name chain)) :for chains)
        (§ block
            (.. chain (addEventListener listener, executor))
        )
        nil
    )

    ;;; Removes a listener for events that are run when keys are added. ;;
    #_public
    (§ method #_"boolean" (§ fn removeEventListener) [#_"KeyChainEventListener" (§ name listener)])
    (§ block
        (Preconditions/checkNotNull listener)

        (§ for (§ var #_"DeterministicKeyChain" (§ name chain)) :for chains)
        (§ block
            (.. chain (removeEventListener listener))
        )
        (.. basic (removeEventListener listener))
    )

    ;;; Returns a list of key protobufs obtained by merging the chains. ;;
    #_public
    (§ method #_"List<Protos.Key>" (§ fn serializeToProtobuf) [])
    (§ block
        (§ var #_"List<Protos.Key>" (§ name result) (if (some? basic) (.. basic (serializeToProtobuf)) (Lists/newArrayList)))

        (§ for (§ var #_"DeterministicKeyChain" (§ name chain)) :for chains)
        (§ block
            (§ var #_"List<Protos.Key>" (§ name protos) (.. chain (serializeToProtobuf)))
            (.. result (addAll protos))
        )
        result
    )

    #_static
    (§ defn #_"KeyChainGroup" (§ fn fromProtobufUnencrypted) [#_"NetworkParameters" (§ name params), #_"List<Protos.Key>" (§ name keys)])
        (§ throws #_"UnreadableWalletException")
    (§ block
        (fromProtobufUnencrypted params, keys, (§ new #_"DefaultKeyChainFactory"))
    )

    #_public
    #_static
    (§ defn #_"KeyChainGroup" (§ fn fromProtobufUnencrypted) [#_"NetworkParameters" (§ name params), #_"List<Protos.Key>" (§ name keys), #_"KeyChainFactory" (§ name factory)])
        (§ throws #_"UnreadableWalletException")
    (§ block
        (§ var #_"BasicKeyChain" (§ name basicKeyChain) (BasicKeyChain/fromProtobufUnencrypted keys))
        (§ var #_"List<DeterministicKeyChain>" (§ name chains) (DeterministicKeyChain/fromProtobuf keys, nil, factory))
        (§ var #_"EnumMap<KeyChain.KeyPurpose, DeterministicKey>" (§ name currentKeys) nil)
        (§ if (§ not (.. chains (isEmpty))))
        (§ block
            (§ ass (§ name currentKeys) (createCurrentKeysMap chains))
        )
        (extractFollowingKeychains chains)
        (§ new #_"KeyChainGroup" params, basicKeyChain, chains, currentKeys, nil)
    )

    #_static
    (§ defn #_"KeyChainGroup" (§ fn fromProtobufEncrypted) [#_"NetworkParameters" (§ name params), #_"List<Protos.Key>" (§ name keys), #_"KeyCrypter" (§ name crypter)])
        (§ throws #_"UnreadableWalletException")
    (§ block
        (fromProtobufEncrypted params, keys, crypter, (§ new #_"DefaultKeyChainFactory"))
    )

    #_public
    #_static
    (§ defn #_"KeyChainGroup" (§ fn fromProtobufEncrypted) [#_"NetworkParameters" (§ name params), #_"List<Protos.Key>" (§ name keys), #_"KeyCrypter" (§ name crypter), #_"KeyChainFactory" (§ name factory)])
        (§ throws #_"UnreadableWalletException")
    (§ block
        (Preconditions/checkNotNull crypter)

        (§ var #_"BasicKeyChain" (§ name basicKeyChain) (BasicKeyChain/fromProtobufEncrypted keys, crypter))
        (§ var #_"List<DeterministicKeyChain>" (§ name chains) (DeterministicKeyChain/fromProtobuf keys, crypter, factory))
        (§ var #_"EnumMap<KeyChain.KeyPurpose, DeterministicKey>" (§ name currentKeys) nil)
        (§ if (§ not (.. chains (isEmpty))))
        (§ block
            (§ ass (§ name currentKeys) (createCurrentKeysMap chains))
        )
        (extractFollowingKeychains chains)
        (§ new #_"KeyChainGroup" params, basicKeyChain, chains, currentKeys, crypter)
    )

    ;;;
     ; If the key chain contains only random keys and no deterministic key chains, this method will create a chain
     ; based on the oldest non-rotating private key (i.e. the seed is derived from the old wallet).
     ;
     ; @param keyRotationTimeSecs If non-zero, UNIX time for which keys created before this are assumed to be
     ;                            compromised or weak, those keys will not be used for deterministic upgrade.
     ; @param aesKey If non-null, the encryption key the keychain is encrypted under.  If the keychain is encrypted
     ;               and this is not supplied, an exception is thrown letting you know you should ask the user for
     ;               their password, turn it into a key, and then try again.
     ; @throws java.lang.IllegalStateException if there is already a deterministic key chain present or if there are
     ;                                         no random keys (i.e. this is not an upgrade scenario), or if aesKey is
     ;                                         provided but the wallet is not encrypted.
     ; @throws java.lang.IllegalArgumentException if the rotation time specified excludes all keys.
     ; @throws DeterministicUpgradeRequiresPassword if the key chain group is encrypted
     ;         and you should provide the users encryption key.
     ; @return the DeterministicKeyChain that was created by the upgrade.
     ;;
    #_public
    (§ method #_"DeterministicKeyChain" (§ fn upgradeToDeterministic) [#_"long" (§ name keyRotationTimeSecs), #_nilable #_"KeyParameter" (§ name aesKey)])
        (§ throws #_"DeterministicUpgradeRequiresPassword", #_"AllRandomKeysRotating")
    (§ block
        (Preconditions/checkState (§ expr 0 < (.. basic (numKeys))))
        (Preconditions/checkArgument (<= 0 keyRotationTimeSecs))

        ;; Subtract one because the key rotation time might have been set to the creation time of the first known
        ;; good key, in which case, that's the one we want to find.
        (§ var #_"ECKey" (§ name keyToUse) (.. basic (findOldestKeyAfter (- keyRotationTimeSecs 1))))
        (§ if (nil? keyToUse))
        (§ block
            (§ throw (§ new #_"AllRandomKeysRotating"))
        )

        (§ if (.. keyToUse (isEncrypted)))
        (§ block
            (§ if (nil? aesKey))
            (§ block
                ;; We can't auto upgrade because we don't know the users password at this point.  We throw an exception
                ;; so the calling code knows to abort the load and ask the user for their password, they can then try
                ;; loading the wallet again passing in the AES key.
                ;;
                ;; There are a few different approaches we could have used here, but they all suck.  The most obvious
                ;; is to try and be as lazy as possible, running in the old random-wallet mode until the user enters
                ;; their password for some other reason and doing the upgrade then.  But this could result in strange
                ;; and unexpected UI flows for the user, as well as complicating the job of wallet developers who then
                ;; have to support both "old" and "new" UI modes simultaneously, switching them on the fly.  Given that
                ;; this is a one-off transition, it seems more reasonable to just ask the user for their password
                ;; on startup, and then the wallet app can have all the widgets for accessing seed words etc active
                ;; all the time.
                (§ throw (§ new #_"DeterministicUpgradeRequiresPassword"))
            )
            (§ ass (§ name keyToUse) (.. keyToUse (decrypt aesKey)))
        )
        (§ elseif (some? aesKey))
        (§ block
            (§ throw (§ new #_"IllegalStateException" "AES Key was provided but wallet is not encrypted."))
        )

        (§ if (.. chains (isEmpty)))
        (§ block
            (.. log (info "Auto-upgrading pre-HD wallet to HD!"))
        )
        (§ else )
        (§ block
            (.. log (info "Wallet with existing HD chain is being re-upgraded due to change in key rotation time."))
        )

        (.. log (info "Instantiating new HD chain using oldest non-rotating private key (address: {})", (.. keyToUse (toAddress params))))
        (§ var #_"byte[]" (§ name entropy) (Preconditions/checkNotNull (.. keyToUse (getSecretBytes))))
        ;; Private keys should be at least 128 bits long.
        (Preconditions/checkState (§ expr DeterministicSeed/DEFAULT_SEED_ENTROPY_BITS / 8 <= (.. entropy length)))
        ;; We reduce the entropy here to 128 bits because people like to write their seeds down on paper,
        ;; and 128 bits should be sufficient forever unless the laws of the universe change or ECC is broken;
        ;; in either case we all have bigger problems.
        (§ ass (§ name entropy) (Arrays/copyOfRange entropy, 0, (§ expr DeterministicSeed/DEFAULT_SEED_ENTROPY_BITS / 8))) ;; Final argument is exclusive range.
        (Preconditions/checkState (§ expr (.. entropy length) == DeterministicSeed/DEFAULT_SEED_ENTROPY_BITS / 8))
        (§ var #_"String" (§ name passphrase) "") ;; FIXME allow non-empty passphrase
        (§ var #_"DeterministicKeyChain" (§ name chain) (§ new #_"DeterministicKeyChain" entropy, passphrase, (.. keyToUse (getCreationTimeSeconds))))
        (§ if (some? aesKey))
        (§ block
            (§ ass (§ name chain) (.. chain (toEncrypted (Preconditions/checkNotNull (.. basic (getKeyCrypter))), aesKey)))
        )
        (.. chains (add chain))
        chain
    )

    ;;; Returns true if the group contains random keys but no HD chains. ;;
    #_public
    (§ method #_"boolean" (§ fn isDeterministicUpgradeRequired) [])
    (§ block
        (§ expr 0 < (.. basic (numKeys)) && (.. chains (isEmpty)))
    )

    #_private
    #_static
    (§ defn- #_"EnumMap<KeyChain.KeyPurpose, DeterministicKey>" (§ fn createCurrentKeysMap) [#_"List<DeterministicKeyChain>" (§ name chains)])
    (§ block
        (§ var #_"DeterministicKeyChain" (§ name activeChain) (.. chains (get (- (.. chains (size)) 1))))

        (§ var #_"EnumMap<KeyChain.KeyPurpose, DeterministicKey>" (§ name currentKeys) (§ new #_"EnumMap<>" (§ klass #_"KeyChain.KeyPurpose")))

        ;; Assuming that only RECEIVE and CHANGE keys are being used at the moment, we will treat the latest issued
        ;; external key as current RECEIVE key and latest issued internal key as CHANGE key.  This should be changed
        ;; as soon as other kinds of KeyPurpose are introduced.
        (§ if (§ expr 0 < (.. activeChain (getIssuedExternalKeys))))
        (§ block
            (§ var #_"DeterministicKey" (§ name currentExternalKey) (.. activeChain (getKeyByPath (HDUtils/append (HDUtils/concat (.. activeChain (getAccountPath)), DeterministicKeyChain/EXTERNAL_SUBPATH), (§ new #_"ChildNumber" (- (.. activeChain (getIssuedExternalKeys)) 1))))))
            (.. currentKeys (put KeyChain/KeyPurpose/RECEIVE_FUNDS, currentExternalKey))
        )

        (§ if (§ expr 0 < (.. activeChain (getIssuedInternalKeys))))
        (§ block
            (§ var #_"DeterministicKey" (§ name currentInternalKey) (.. activeChain (getKeyByPath (HDUtils/append (HDUtils/concat (.. activeChain (getAccountPath)), DeterministicKeyChain/INTERNAL_SUBPATH), (§ new #_"ChildNumber" (- (.. activeChain (getIssuedInternalKeys)) 1))))))
            (.. currentKeys (put KeyChain/KeyPurpose/CHANGE, currentInternalKey))
        )

        currentKeys
    )

    #_private
    #_static
    (§ defn- #_"void" (§ fn extractFollowingKeychains) [#_"List<DeterministicKeyChain>" (§ name chains)])
    (§ block
        ;; Look for following key chains and map them to the watch keys of followed keychains.
        (§ var #_"List<DeterministicKeyChain>" (§ name followingChains) (Lists/newArrayList))
        (§ for (§ var #_"Iterator<DeterministicKeyChain>" (§ name it) (.. chains (iterator))) :for (.. it (hasNext)) :for (§ expr ))
        (§ block
            (§ var #_"DeterministicKeyChain" (§ name chain) (.. it (next)))
            (§ if (.. chain (isFollowing)))
            (§ block
                (.. followingChains (add chain))
                (.. it (remove))
            )
            (§ elseif (§ not (.. followingChains (isEmpty))))
            (§ block
                (§ if (§ not (§ insta chain #_"MarriedKeyChain")))
                (§ block
                    (§ throw (§ new #_"IllegalStateException"))
                )

                (.. (§ cast #_"MarriedKeyChain" chain) (setFollowingKeyChains followingChains))
                (§ ass (§ name followingChains) (Lists/newArrayList))
            )
        )
        nil
    )

    #_public
    (§ method #_"String" (§ fn toString) [#_"boolean" (§ name includePrivateKeys)])
    (§ block
        (§ var #_"StringBuilder" (§ name sb) (§ new #_"StringBuilder"))
        (§ if (some? basic))
        (§ block
            (§ var #_"List<ECKey>" (§ name keys) (.. basic (getKeys)))
            (Collections/sort keys, ECKey/AGE_COMPARATOR)
            (§ for (§ var #_"ECKey" (§ name key)) :for keys)
            (§ block
                (.. key (formatKeyWithAddress includePrivateKeys, sb, params))
            )
        )
        (§ for (§ var #_"DeterministicKeyChain" (§ name chain)) :for chains)
        (§ block
            (.. sb (append (.. chain (toString includePrivateKeys, params))) (append "\n"))
        )
        (.. sb (toString))
    )

    ;;; Returns a copy of the current list of chains. ;;
    #_public
    (§ method #_"List<DeterministicKeyChain>" (§ fn getDeterministicKeyChains) [])
    (§ block
        (§ new #_"ArrayList<>" chains)
    )

    ;;;
     ; Returns a counter that increases (by an arbitrary amount) each time new keys have been calculated
     ; due to lookahead and thus the Bloom filter that was previously calculated has become stale.
     ;;
    #_public
    (§ method #_"int" (§ fn getCombinedKeyLookaheadEpochs) [])
    (§ block
        (§ var #_"int" (§ name epoch) 0)
        (§ for (§ var #_"DeterministicKeyChain" (§ name chain)) :for chains)
        (§ block
            (§ ass (§ name epoch) (§ expr epoch + (.. chain (getKeyLookaheadEpoch))))
        )
        epoch
    )
)

#_(ns org.bitcoinj.wallet #_"KeyTimeCoinSelector"
    (:import [java.util LinkedList List])
    (:import [com.google.common.base Preconditions]
             [com.google.common.collect Lists]
             [org.slf4j Logger LoggerFactory])
   (:require [org.bitcoinj.core *]
             [org.bitcoinj.script Script]))

;;;
 ; A coin selector that takes all coins assigned to keys created before the given timestamp.
 ; Used as part of the implementation of {@link Wallet#setKeyRotationTime(java.util.Date)}.
 ;;
#_public
(§ class #_"KeyTimeCoinSelector" (§ implements #_"CoinSelector")
    #_private
    #_static
    (§ def- #_"Logger" (§ name log) (LoggerFactory/getLogger (§ klass #_"KeyTimeCoinSelector")))

    ;;; A number of inputs chosen to avoid hitting {@link org.bitcoinj.core.Transaction#MAX_STANDARD_TX_SIZE}. ;;
    #_public
    #_static
    (§ def #_"int" (§ name MAX_SIMULTANEOUS_INPUTS) 600)

    #_private
    (§ field- #_"long" (§ name unixTimeSeconds))
    #_private
    (§ field- #_"Wallet" (§ name wallet))
    #_private
    (§ field- #_"boolean" (§ name ignorePending))

    #_public
    (§ constructor #_"KeyTimeCoinSelector" [#_"Wallet" (§ name wallet), #_"long" (§ name unixTimeSeconds), #_"boolean" (§ name ignorePending)])
    (§ block
        (§ ass (§ name (.. this unixTimeSeconds)) unixTimeSeconds)
        (§ ass (§ name (.. this wallet)) wallet)
        (§ ass (§ name (.. this ignorePending)) ignorePending)
        this
    )

    #_override
    #_public
    (§ method #_"CoinSelection" (§ fn select) [#_"Coin" (§ name target), #_"List<TransactionOutput>" (§ name candidates)])
    (§ block
        (§ try )
        (§ block
            (§ var #_"LinkedList<TransactionOutput>" (§ name gathered) (Lists/newLinkedList))
            (§ var #_"Coin" (§ name valueGathered) Coin/ZERO)
            (§ for (§ var #_"TransactionOutput" (§ name output)) :for candidates)
            (§ block
                (§ if (§ expr ignorePending && (§ not (isConfirmed output))))
                (§ block
                    (§ continue )
                )

                ;; Find the key that controls output, assuming it's a regular pay-to-pubkey or pay-to-address output.
                ;; We ignore any other kind of exotic output on the assumption we can't spend it ourselves.
                (§ var #_"Script" (§ name scriptPubKey) (.. output (getScriptPubKey)))
                (§ var #_"ECKey" (§ name controllingKey))
                (§ if (.. scriptPubKey (isSentToRawPubKey)))
                (§ block
                    (§ ass (§ name controllingKey) (.. wallet (findKeyFromPubKey (.. scriptPubKey (getPubKey)))))
                )
                (§ elseif (.. scriptPubKey (isSentToAddress)))
                (§ block
                    (§ ass (§ name controllingKey) (.. wallet (findKeyFromPubHash (.. scriptPubKey (getPubKeyHash)))))
                )
                (§ else )
                (§ block
                    (.. log (info "Skipping tx output {} because it's not of simple form.", output))
                    (§ continue )
                )

                (Preconditions/checkNotNull controllingKey, "Coin selector given output as candidate for which we lack the key")
                (§ if (§ expr unixTimeSeconds <= (.. controllingKey (getCreationTimeSeconds))))
                (§ block
                    (§ continue )
                )

                ;; It's older than the cutoff time so select.
                (§ ass (§ name valueGathered) (.. valueGathered (add (.. output (getValue)))))
                (.. gathered (push output))
                (§ if (§ expr MAX_SIMULTANEOUS_INPUTS <= (.. gathered (size))))
                (§ block
                    (.. log (warn "Reached {} inputs, going further would yield a tx that is too large, stopping here.", (.. gathered (size))))
                    (§ break )
                )
            )
            (§ return (§ new #_"CoinSelection" valueGathered, gathered))
        )
        (§ catch #_"ScriptException" (§ name e))
        (§ block
            (§ throw (§ new #_"RuntimeException" e)) ;; We should never have problems understanding scripts in our wallet.
        )
    )

    #_private
    (§ method- #_"boolean" (§ fn isConfirmed) [#_"TransactionOutput" (§ name output)])
    (§ block
        (.. output (getParentTransaction) (getConfidence) (getConfidenceType) (equals TransactionConfidence/ConfidenceType/BUILDING))
    )
)

#_(ns org.bitcoinj.wallet #_"MarriedKeyChain"
    (:import [java.security SecureRandom]
             [java.util LinkedHashMap List Map])
    (:import [com.google.common.base Preconditions]
             [com.google.common.collect ImmutableList Lists]
             #_static [com.google.common.collect.Lists newArrayList]
             [com.google.protobuf ByteString])
   (:require [org.bitcoinj.core BloomFilter ECKey NetworkParameters Utils]
             [org.bitcoinj.crypto DeterministicKey KeyCrypter]
             [org.bitcoinj.script Script ScriptBuilder]))

;;;
 ; <p>A multi-signature keychain using synchronized HD keys (a.k.a HDM).</p>
 ;
 ; <p>This keychain keeps track of following keychains that follow the account key of this keychain.  You can get P2SH
 ; addresses to receive coins to from this chain.  The threshold - sigsRequiredToSpend specifies how many signatures
 ; required to spend transactions for this married keychain.  This value should not exceed the total number of keys
 ; involved (one followed key plus number of following keys), otherwise IllegalArgumentException will be thrown.</p>
 ;
 ; <p>IMPORTANT: As of Bitcoin Core 0.9 all multisig transactions which require more than 3 public keys are non-standard and
 ; such spends won't be processed by peers with default settings, essentially making such transactions almost nonspendable.</p>
 ;
 ; <p>This method will throw an IllegalStateException, if the keychain is already married or already has leaf keys issued.</p>
 ;;
#_public
(§ class #_"MarriedKeyChain" (§ extends #_"DeterministicKeyChain")
    ;; The map holds P2SH redeem script and corresponding ECKeys issued by this KeyChainGroup (including lookahead)
    ;; mapped to redeem script hashes.
    #_private
    (§ field- #_"LinkedHashMap<ByteString, RedeemData>" (§ name marriedKeysRedeemData) (§ new #_"LinkedHashMap<>"))

    #_private
    (§ field- #_"List<DeterministicKeyChain>" (§ name followingKeyChains))

    ;;; Builds a {@link MarriedKeyChain}. ;;
    #_public
    #_static
    (§ class #_"Builder<T extends Builder<T>>" (§ extends #_"DeterministicKeyChain.Builder<T>")
        #_private
        (§ field- #_"List<DeterministicKey>" (§ name followingKeys))
        #_private
        (§ field- #_"int" (§ name threshold))

        #_protected
        (§ constructor #_"Builder" [])
        (§ block
            this
        )

        #_public
        (§ method #_"T" (§ fn followingKeys) [#_"List<DeterministicKey>" (§ name followingKeys)])
        (§ block
            (§ ass (§ name (.. this followingKeys)) followingKeys)
            (self)
        )

        #_public
        (§ method #_"T" (§ fn followingKeys) [#_"DeterministicKey" (§ name followingKey), #_"DeterministicKey" (§ name ...followingKeys)])
        (§ block
            (§ ass (§ name (.. this followingKeys)) (Lists/asList followingKey, followingKeys))
            (self)
        )

        ;;;
         ; Threshold, or <code>((followingKeys.size() + 1) / 2 + 1)</code> (majority) if unspecified.
         ;
         ; IMPORTANT: As of Bitcoin Core 0.9 all multisig transactions which require more than 3 public keys are non-standard and
         ; such spends won't be processed by peers with default settings, essentially making such transactions almost nonspendable.
         ;;
        #_public
        (§ method #_"T" (§ fn threshold) [#_"int" (§ name threshold)])
        (§ block
            (§ ass (§ name (.. this threshold)) threshold)
            (self)
        )

        #_override
        #_public
        (§ method #_"MarriedKeyChain" (§ fn build) [])
        (§ block
            (Preconditions/checkState (§ expr random != nil || entropy != nil || seed != nil || watchingKey!= nil), "Must provide either entropy or random or seed or watchingKey")
            (Preconditions/checkNotNull followingKeys, "followingKeys must be provided")

            (§ var #_"MarriedKeyChain" (§ name chain))
            (§ if (§ expr threshold == 0))
            (§ block
                (§ ass (§ name threshold) (§ expr (+ (.. followingKeys (size)) 1) / 2 + 1))
            )

            (§ if (some? random))
            (§ block
                (§ ass (§ name chain) (§ new #_"MarriedKeyChain" random, bits, (getPassphrase), seedCreationTimeSecs))
            )
            (§ elseif (some? entropy))
            (§ block
                (§ ass (§ name chain) (§ new #_"MarriedKeyChain" entropy, (getPassphrase), seedCreationTimeSecs))
            )
            (§ elseif (some? seed))
            (§ block
                (.. seed (setCreationTimeSeconds seedCreationTimeSecs))
                (§ ass (§ name chain) (§ new #_"MarriedKeyChain" seed))
            )
            (§ else )
            (§ block
                (.. watchingKey (setCreationTimeSeconds seedCreationTimeSecs))
                (§ ass (§ name chain) (§ new #_"MarriedKeyChain" watchingKey))
            )

            (.. chain (addFollowingAccountKeys followingKeys, threshold))
            chain
        )
    )

    #_public
    #_static
    (§ defn #_"Builder<?>" (§ fn builder) [])
    (§ block
        (§ new #_"Builder")
    )

    ;; Protobuf deserialization constructors.
    (§ constructor #_"MarriedKeyChain" [#_"DeterministicKey" (§ name accountKey)])
    (§ block
        (§ super accountKey, false)
        this
    )

    (§ constructor #_"MarriedKeyChain" [#_"DeterministicSeed" (§ name seed), #_"KeyCrypter" (§ name crypter)])
    (§ block
        (§ super seed, crypter)
        this
    )

    ;; Builder constructors.
    #_private
    (§ constructor- #_"MarriedKeyChain" [#_"SecureRandom" (§ name random), #_"int" (§ name bits), #_"String" (§ name passphrase), #_"long" (§ name seedCreationTimeSecs)])
    (§ block
        (§ super random, bits, passphrase, seedCreationTimeSecs)
        this
    )

    #_private
    (§ constructor- #_"MarriedKeyChain" [#_"byte[]" (§ name entropy), #_"String" (§ name passphrase), #_"long" (§ name seedCreationTimeSecs)])
    (§ block
        (§ super entropy, passphrase, seedCreationTimeSecs)
        this
    )

    #_private
    (§ constructor- #_"MarriedKeyChain" [#_"DeterministicSeed" (§ name seed)])
    (§ block
        (§ super seed)
        this
    )

    (§ method #_"void" (§ fn setFollowingKeyChains) [#_"List<DeterministicKeyChain>" (§ name followingKeyChains)])
    (§ block
        (Preconditions/checkArgument (§ not (.. followingKeyChains (isEmpty))))
        (§ ass (§ name (.. this followingKeyChains)) followingKeyChains)
        nil
    )

    #_override
    #_public
    (§ method #_"boolean" (§ fn isMarried) [])
    (§ block
        true
    )

    ;;; Create a new married key and return the matching output script. ;;
    #_override
    #_public
    (§ method #_"Script" (§ fn freshOutputScript) [#_"KeyPurpose" (§ name purpose)])
    (§ block
        (§ var #_"DeterministicKey" (§ name followedKey) (getKey purpose))
        (§ var #_"ImmutableList.Builder<ECKey>" (§ name keys) (.. (ImmutableList/builder #_"ImmutableList<ECKey>") (add followedKey)))
        (§ for (§ var #_"DeterministicKeyChain" (§ name keyChain)) :for followingKeyChains)
        (§ block
            (§ var #_"DeterministicKey" (§ name followingKey) (.. keyChain (getKey purpose)))
            (Preconditions/checkState (.. followedKey (getChildNumber) (equals (.. followingKey (getChildNumber)))), "Following keychains should be in sync")
            (.. keys (add followingKey))
        )
        (§ var #_"List<ECKey>" (§ name marriedKeys) (.. keys (build)))
        (§ var #_"Script" (§ name redeemScript) (ScriptBuilder/createRedeemScript sigsRequiredToSpend, marriedKeys))
        (ScriptBuilder/createP2SHOutputScript redeemScript)
    )

    #_private
    (§ method- #_"List<ECKey>" (§ fn getMarriedKeysWithFollowed) [#_"DeterministicKey" (§ name followedKey)])
    (§ block
        (§ var #_"ImmutableList.Builder<ECKey>" (§ name keys) (ImmutableList/builder))
        (§ for (§ var #_"DeterministicKeyChain" (§ name keyChain)) :for followingKeyChains)
        (§ block
            (.. keyChain (maybeLookAhead))
            (.. keys (add (.. keyChain (getKeyByPath (.. followedKey (getPath))))))
        )
        (.. keys (add followedKey))
        (.. keys (build))
    )

    ;;; Get the redeem data for a key in this married chain. ;;
    #_override
    #_public
    (§ method #_"RedeemData" (§ fn getRedeemData) [#_"DeterministicKey" (§ name followedKey)])
    (§ block
        (§ var #_"List<ECKey>" (§ name marriedKeys) (getMarriedKeysWithFollowed followedKey))
        (§ var #_"Script" (§ name redeemScript) (ScriptBuilder/createRedeemScript sigsRequiredToSpend, marriedKeys))
        (RedeemData/of marriedKeys, redeemScript)
    )

    #_private
    (§ method- #_"void" (§ fn addFollowingAccountKeys) [#_"List<DeterministicKey>" (§ name followingAccountKeys), #_"int" (§ name sigsRequiredToSpend)])
    (§ block
        (Preconditions/checkArgument (§ expr sigsRequiredToSpend <= (.. followingAccountKeys (size)) + 1), "Multisig threshold can't exceed total number of keys")
        (Preconditions/checkState (§ expr (numLeafKeysIssued) == 0), "Active keychain already has keys in use")
        (Preconditions/checkState (nil? followingKeyChains))

        (§ var #_"List<DeterministicKeyChain>" (§ name followingKeyChains) (Lists/newArrayList))

        (§ for (§ var #_"DeterministicKey" (§ name key)) :for followingAccountKeys)
        (§ block
            (Preconditions/checkArgument (§ expr (.. key (getPath) (size)) == (.. (getAccountPath) (size))), "Following keys have to be account keys")

            (§ var #_"DeterministicKeyChain" (§ name chain) (DeterministicKeyChain/watchAndFollow key))
            (§ if (<= 0 lookaheadSize))
            (§ block
                (.. chain (setLookaheadSize lookaheadSize))
            )
            (§ if (<= 0 lookaheadThreshold))
            (§ block
                (.. chain (setLookaheadThreshold lookaheadThreshold))
            )
            (.. followingKeyChains (add chain))
        )

        (§ ass (§ name (.. this sigsRequiredToSpend)) sigsRequiredToSpend)
        (§ ass (§ name (.. this followingKeyChains)) followingKeyChains)
        nil
    )

    #_override
    #_public
    (§ method #_"void" (§ fn setLookaheadSize) [#_"int" (§ name lookaheadSize)])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (.. super (setLookaheadSize lookaheadSize))

            (§ if (some? followingKeyChains))
            (§ block
                (§ for (§ var #_"DeterministicKeyChain" (§ name followingChain)) :for followingKeyChains)
                (§ block
                    (.. followingChain (setLookaheadSize lookaheadSize))
                )
            )
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
        nil
    )

    #_override
    #_public
    (§ method #_"List<Protos.Key>" (§ fn serializeToProtobuf) [])
    (§ block
        (§ var #_"List<Protos.Key>" (§ name result) (newArrayList))
        (.. lock (lock))
        (§ try )
        (§ block
            (§ for (§ var #_"DeterministicKeyChain" (§ name chain)) :for followingKeyChains)
            (§ block
                (.. result (addAll (.. chain (serializeMyselfToProtobuf))))
            )
            (.. result (addAll (serializeMyselfToProtobuf)))
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
        result
    )

    #_override
    #_protected
    (§ method #_"void" (§ fn formatAddresses) [#_"boolean" (§ name includePrivateKeys), #_"NetworkParameters" (§ name params), #_"StringBuilder" (§ name sb)])
    (§ block
        (§ for (§ var #_"DeterministicKeyChain" (§ name followingChain)) :for followingKeyChains)
        (§ block
            (.. sb (append "Following chain:  ") (append (.. followingChain (getWatchingKey) (serializePubB58 params))) (append "\n"))
        )
        (.. sb (append "\n"))
        (§ for (§ var #_"RedeemData" (§ name redeemData)) :for (.. marriedKeysRedeemData (values)))
        (§ block
            (formatScript (ScriptBuilder/createP2SHOutputScript (.. redeemData redeemScript)), sb, params)
        )
        nil
    )

    #_private
    (§ method- #_"void" (§ fn formatScript) [#_"Script" (§ name script), #_"StringBuilder" (§ name sb), #_"NetworkParameters" (§ name params)])
    (§ block
        (.. sb (append "  addr:") (append (.. script (getToAddress params))))
        (.. sb (append "  hash160:") (append (.. Utils/HEX (encode (.. script (getPubKeyHash))))))
        (§ if (§ expr 0 < (.. script (getCreationTimeSeconds))))
        (§ block
            (.. sb (append "  creationTimeSeconds:") (append (.. script (getCreationTimeSeconds))))
        )
        (.. sb (append "\n"))
        nil
    )

    #_override
    #_public
    (§ method #_"void" (§ fn maybeLookAheadScripts) [])
    (§ block
        (.. super (maybeLookAheadScripts))

        (§ var #_"int" (§ name numLeafKeys) (.. (getLeafKeys) (size)))
        (Preconditions/checkState (§ expr (.. marriedKeysRedeemData (size)) <= numLeafKeys), "Number of scripts is greater than number of leaf keys")

        (§ if (!= (.. marriedKeysRedeemData (size)) numLeafKeys))
        (§ block
            (maybeLookAhead)
            (§ for (§ var #_"DeterministicKey" (§ name followedKey)) :for (getLeafKeys))
            (§ block
                (§ var #_"RedeemData" (§ name redeemData) (getRedeemData followedKey))
                (§ var #_"Script" (§ name scriptPubKey) (ScriptBuilder/createP2SHOutputScript (.. redeemData redeemScript)))
                (.. marriedKeysRedeemData (put (ByteString/copyFrom (.. scriptPubKey (getPubKeyHash))), redeemData))
            )
        )
        nil
    )

    #_nilable
    #_override
    #_public
    (§ method #_"RedeemData" (§ fn findRedeemDataByScriptHash) [#_"ByteString" (§ name bytes)])
    (§ block
        (.. marriedKeysRedeemData (get bytes))
    )

    #_override
    #_public
    (§ method #_"BloomFilter" (§ fn getFilter) [#_"int" (§ name size), #_"double" (§ name falsePositiveRate), #_"long" (§ name tweak)])
    (§ block
        (.. lock (lock))
        (§ var #_"BloomFilter" (§ name filter))
        (§ try )
        (§ block
            (§ ass (§ name filter) (§ new #_"BloomFilter" size, falsePositiveRate, tweak))
            (§ for (§ var #_"Map.Entry<ByteString, RedeemData>" (§ name entry)) :for (.. marriedKeysRedeemData (entrySet)))
            (§ block
                (.. filter (insert (.. entry (getKey) (toByteArray))))
                (.. filter (insert (.. entry (getValue) redeemScript (getProgram))))
            )
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
        filter
    )

    #_override
    #_public
    (§ method #_"int" (§ fn numBloomFilterEntries) [])
    (§ block
        (maybeLookAhead)
        (* (.. (getLeafKeys) (size)) 2)
    )
)

#_(ns org.bitcoinj.wallet #_"RedeemData"
    (:import [java.util ArrayList Collections List])
    (:import [com.google.common.base Preconditions])
   (:require [org.bitcoinj.core ECKey]
             [org.bitcoinj.script Script]))

;;;
 ; This class aggregates data required to spend transaction output.
 ;
 ; For pay-to-address and pay-to-pubkey transactions it will have only a single key and CHECKSIG program as redeemScript.
 ; For multisignature transactions there will be multiple keys one of which will be a full key and the rest are watch only,
 ; redeem script will be a CHECKMULTISIG program.  Keys will be sorted in the same order they appear in
 ; a program (lexicographical order).
 ;;
#_public
(§ class #_"RedeemData"
    #_public
    (§ field #_"Script" (§ name redeemScript))
    #_public
    (§ field #_"List<ECKey>" (§ name keys))

    #_private
    (§ constructor- #_"RedeemData" [#_"List<ECKey>" (§ name keys), #_"Script" (§ name redeemScript)])
    (§ block
        (§ ass (§ name (.. this redeemScript)) redeemScript)
        (§ var #_"List<ECKey>" (§ name sortedKeys) (§ new #_"ArrayList<>" keys))
        (Collections/sort sortedKeys, ECKey/PUBKEY_COMPARATOR)
        (§ ass (§ name (.. this keys)) sortedKeys)
        this
    )

    #_public
    #_static
    (§ defn #_"RedeemData" (§ fn of) [#_"List<ECKey>" (§ name keys), #_"Script" (§ name redeemScript)])
    (§ block
        (§ new #_"RedeemData" keys, redeemScript)
    )

    ;;;
     ; Creates RedeemData for pay-to-address or pay-to-pubkey input.  Provided key is a single private key
     ; needed to spend such inputs and provided program should be a proper CHECKSIG program.
     ;;
    #_public
    #_static
    (§ defn #_"RedeemData" (§ fn of) [#_"ECKey" (§ name key), #_"Script" (§ name program)])
    (§ block
        (Preconditions/checkArgument (§ expr (.. program (isSentToAddress)) || (.. program (isSentToRawPubKey))))

        (when (some? key) (§ new #_"RedeemData" (Collections/singletonList key), program))
    )

    ;;;
     ; Returns the first key that has private bytes.
     ;;
    #_public
    (§ method #_"ECKey" (§ fn getFullKey) [])
    (§ block
        (§ for (§ var #_"ECKey" (§ name key)) :for keys)
        (§ block
            (§ if (.. key (hasPrivKey)))
            (§ block
                (§ return key)
            )
        )
        nil
    )
)

#_(ns org.bitcoinj.wallet #_"RiskAnalysis"
    (:import [java.util List])
   (:require [org.bitcoinj.core Transaction]))

;;;
 ; <p>A RiskAnalysis represents an analysis of how likely it is that a transaction (and its dependencies)
 ; represents a possible double spending attack.  The wallet will create these to decide whether or not to accept
 ; a pending transaction.  Look at {@link DefaultRiskAnalysis} to see what is currently considered risky.</p>
 ;
 ; <p>The intention here is that implementing classes can expose more information and detail about the result,
 ; for app developers.  The core code needs only to know whether it's OK or not.</p>
 ;
 ; <p>A factory interface is provided.  The wallet will use this to analyze new pending transactions.</p>
 ;;
#_public
(§ interface #_"RiskAnalysis"
    (§ enum #_"Result"
        (§ item OK)
        (§ item NON_FINAL)
        (§ item NON_STANDARD)
    )

    (§ method #_"Result" (§ fn analyze) [])

    (§ interface #_"Analyzer"
        (§ method #_"RiskAnalysis" (§ fn create) [#_"Wallet" (§ name wallet), #_"Transaction" (§ name tx), #_"List<Transaction>" (§ name dependencies)])
    )
)

#_(ns org.bitcoinj.wallet #_"SendRequest"
    (:import [java.math BigInteger]
             [java.util Date])
    (:import [com.google.common.base MoreObjects Preconditions]
             [org.spongycastle.crypto.params KeyParameter])
   (:require [org.bitcoinj.core Address Coin Context ECKey NetworkParameters Transaction TransactionOutput]
             [org.bitcoinj.script Script ScriptBuilder]
             [org.bitcoinj.utils ExchangeRate]
             [org.bitcoinj.wallet.KeyChain KeyPurpose]
             [org.bitcoinj.wallet.Wallet MissingSigsMode]))

;;;
 ; A SendRequest gives the wallet information about precisely how to send money to a recipient or set of recipients.
 ; Static methods are provided to help you create SendRequests and there are a few helper methods on the wallet that
 ; just simplify the most common use cases.  You may wish to customize a SendRequest if you want to attach a fee or
 ; modify the change address.
 ;;
#_public
(§ class #_"SendRequest"
    ;;;
     ; <p>A transaction, probably incomplete, that describes the outline of what you want to do.  This typically
     ; will mean it has some outputs to the intended destinations, but no inputs or change address (and therefore
     ; no fees) - the wallet will calculate all that for you and update tx later.</p>
     ;
     ; <p>Be careful when adding outputs that you check the min output value
     ; ({@link TransactionOutput#getMinNonDustValue(Coin)}) to avoid the whole transaction being rejected
     ; because one output is dust.</p>
     ;
     ; <p>If there are already inputs to the transaction, make sure their out point has a connected output,
     ; otherwise their value will be added to fee.  Also ensure they are either signed or are spendable by
     ; a wallet key, otherwise the behavior of {@link Wallet#completeTx(Wallet.SendRequest)} is undefined
     ; (likely RuntimeException).</p>
     ;;
    #_public
    (§ field #_"Transaction" (§ name tx))

    ;;;
     ; When emptyWallet is set, all coins selected by the coin selector are sent to the first output in tx
     ; (its value is ignored and set to {@link org.bitcoinj.wallet.Wallet#getBalance()} - the fees required
     ; for the transaction).  Any additional outputs are removed.
     ;;
    #_public
    (§ field #_"boolean" (§ name emptyWallet) false)

    ;;;
     ; "Change" means the difference between the value gathered by a transactions inputs (the size of which you
     ; don't really control as it depends on who sent you money), and the value being sent somewhere else.  The
     ; change address should be selected from this wallet, normally.  <b>If null this will be chosen for you.</b>
     ;;
    #_public
    (§ field #_"Address" (§ name changeAddress) nil)

    ;;;
     ; <p>A transaction can have a fee attached, which is defined as the difference between the input values
     ; and output values.  Any value taken in that is not provided to an output can be claimed by a miner.  This
     ; is how mining is incentivized in later years of the Bitcoin system when inflation drops.  It also provides
     ; a way for people to prioritize their transactions over others and is used as a way to make denial of service
     ; attacks expensive.</p>
     ;
     ; <p>This is a dynamic fee (in satoshis) which will be added to the transaction for each kilobyte in size
     ; including the first.  This is useful as as miners usually sort pending transactions by their fee per unit size
     ; when choosing which transactions to add to a block.  Note that, to keep this equivalent to Bitcoin Core
     ; definition, a kilobyte is defined as 1000 bytes, not 1024.</p>
     ;;
    #_public
    (§ field #_"Coin" (§ name feePerKb) (.. (Context/get) (getFeePerKb)))

    ;;;
     ; <p>Requires that there be enough fee for a default Bitcoin Core to at least relay the transaction.
     ; (i.e. ensure the transaction will not be outright rejected by the network).  Defaults to true,
     ; you should only set this to false if you know what you're doing.</p>
     ;
     ; <p>Note that this does not enforce certain fee rules that only apply to transactions which are larger
     ; than 26,000 bytes.  If you get a transaction which is that large, you should set a feePerKb of at least
     ; {@link Transaction#REFERENCE_DEFAULT_MIN_TX_FEE}.</p>
     ;;
    #_public
    (§ field #_"boolean" (§ name ensureMinRequiredFee) (.. (Context/get) (isEnsureMinRequiredFee)))

    ;;;
     ; If true (the default), the inputs will be signed.
     ;;
    #_public
    (§ field #_"boolean" (§ name signInputs) true)

    ;;;
     ; The AES key to use to decrypt the private keys before signing.
     ; If null then no decryption will be performed and if decryption is required an exception will be thrown.
     ; You can get this from a password by doing wallet.getKeyCrypter().deriveKey(password).
     ;;
    #_public
    (§ field #_"KeyParameter" (§ name aesKey) nil)

    ;;;
     ; If not null, the {@link org.bitcoinj.wallet.CoinSelector} to use instead of the wallets default.
     ; Coin selectors are responsible for choosing which transaction outputs (coins) in a wallet to use given
     ; the desired send value amount.
     ;;
    #_public
    (§ field #_"CoinSelector" (§ name coinSelector) nil)

    ;;;
     ; If true (the default), the outputs will be shuffled during completion to randomize the location
     ; of the change output, if any.  This is normally what you want for privacy reasons but in unit tests
     ; it can be annoying, so it can be disabled here.
     ;;
    #_public
    (§ field #_"boolean" (§ name shuffleOutputs) true)

    ;;;
     ; Specifies what to do with missing signatures left after completing this request.  Default strategy is
     ; to throw an exception on missing signature ({@link MissingSigsMode#THROW}).
     ; @see MissingSigsMode
     ;;
    #_public
    (§ field #_"MissingSigsMode" (§ name missingSigsMode) MissingSigsMode/THROW)

    ;;;
     ; If not null, this exchange rate is recorded with the transaction during completion.
     ;;
    #_public
    (§ field #_"ExchangeRate" (§ name exchangeRate) nil)

    ;;;
     ; If not null, this memo is recorded with the transaction during completion.  It can be used to record
     ; the memo of the payment request that initiated the transaction.
     ;;
    #_public
    (§ field #_"String" (§ name memo) nil)

    ;;;
     ; If false (default value), tx fee is paid by the sender.  If true, tx fee is paid by the recipient/s.
     ; If there is more than one recipient, the tx fee is split equally between them regardless of output
     ; value and size.
     ;;
    #_public
    (§ field #_"boolean" (§ name recipientsPayFees) false)

    ;; Tracks if this has been passed to wallet.completeTx already: just a safety check.
    (§ field #_"boolean" (§ name completed))

    #_private
    (§ constructor- #_"SendRequest" [])
    (§ block
        this
    )

    ;;;
     ; <p>Creates a new SendRequest to the given address for the given value.</p>
     ;
     ; <p>Be very careful when value is smaller than {@link Transaction#MIN_NONDUST_OUTPUT} as the transaction
     ; will likely be rejected by the network in this case.</p>
     ;;
    #_public
    #_static
    (§ defn #_"SendRequest" (§ fn to) [#_"Address" (§ name destination), #_"Coin" (§ name value)])
    (§ block
        (§ var #_"SendRequest" (§ name req) (§ new #_"SendRequest"))
        (§ var #_"NetworkParameters" (§ name parameters) (.. destination (getParameters)))

        (Preconditions/checkNotNull parameters, "Address is for an unknown network")

        (§ ass (§ name (.. req tx)) (§ new #_"Transaction" parameters))
        (.. req tx (addOutput value, destination))
        req
    )

    ;;;
     ; <p>Creates a new SendRequest to the given pubkey for the given value.</p>
     ;
     ; <p>Be careful to check the output's value is reasonable using
     ; {@link TransactionOutput#getMinNonDustValue(Coin)} afterwards or you risk having the transaction
     ; rejected by the network.  Note that using {@link SendRequest#to(Address, Coin)} will result
     ; in a smaller output, and thus the ability to use a smaller output value without rejection.</p>
     ;;
    #_public
    #_static
    (§ defn #_"SendRequest" (§ fn to) [#_"NetworkParameters" (§ name params), #_"ECKey" (§ name destination), #_"Coin" (§ name value)])
    (§ block
        (§ var #_"SendRequest" (§ name req) (§ new #_"SendRequest"))
        (§ ass (§ name (.. req tx)) (§ new #_"Transaction" params))
        (.. req tx (addOutput value, destination))
        req
    )

    ;;; Simply wraps a pre-built incomplete transaction provided by you. ;;
    #_public
    #_static
    (§ defn #_"SendRequest" (§ fn forTx) [#_"Transaction" (§ name tx)])
    (§ block
        (§ var #_"SendRequest" (§ name req) (§ new #_"SendRequest"))
        (§ ass (§ name (.. req tx)) tx)
        req
    )

    #_public
    #_static
    (§ defn #_"SendRequest" (§ fn emptyWallet) [#_"Address" (§ name destination)])
    (§ block
        (§ var #_"SendRequest" (§ name req) (§ new #_"SendRequest"))
        (§ var #_"NetworkParameters" (§ name parameters) (.. destination (getParameters)))

        (Preconditions/checkNotNull parameters, "Address is for an unknown network")

        (§ ass (§ name (.. req tx)) (§ new #_"Transaction" parameters))
        (.. req tx (addOutput Coin/ZERO, destination))
        (§ ass (§ name (.. req emptyWallet)) true)
        req
    )

    ;;;
     ; Construct a SendRequest for a CPFP (child-pays-for-parent) transaction.  The resulting transaction is
     ; already completed, so you should directly proceed to signing and broadcasting/committing the transaction.
     ; CPFP is currently only supported by a few miners, so use with care.
     ;;
    #_public
    #_static
    (§ defn #_"SendRequest" (§ fn childPaysForParent) [#_"Wallet" (§ name wallet), #_"Transaction" (§ name parentTransaction), #_"Coin" (§ name feeRaise)])
    (§ block
        (§ var #_"TransactionOutput" (§ name outputToSpend) nil)
        (§ for (§ var TransactionOutput output) :for (.. parentTransaction (getOutputs)))
        (§ block
            (§ if (§ expr (.. output (isMine wallet)) && (.. output (isAvailableForSpending)) && (.. output (getValue) (isGreaterThan feeRaise))))
            (§ block
                (§ ass (§ name outputToSpend) output)
                (§ break )
            )
        )
        ;; TODO: Spend another confirmed output of own wallet if needed.
        (Preconditions/checkNotNull outputToSpend, "Can't find adequately sized output that spends to us")

        (§ var #_"Transaction" (§ name tx) (§ new #_"Transaction" (.. parentTransaction (getParams))))
        (.. tx (addInput outputToSpend))
        (.. tx (addOutput (.. outputToSpend (getValue) (subtract feeRaise)), (.. wallet (freshAddress KeyPurpose/CHANGE))))
        (.. tx (setPurpose Transaction/Purpose/RAISE_FEE))
        (§ var #_"SendRequest" (§ name req) (forTx tx))
        (§ ass (§ name (.. req completed)) true)
        req
    )

    #_public
    #_static
    (§ defn #_"SendRequest" (§ fn toCLTVPaymentChannel) [#_"NetworkParameters" (§ name params), #_"Date" (§ name releaseTime), #_"ECKey" (§ name from), #_"ECKey" (§ name to), #_"Coin" (§ name value)])
    (§ block
        (§ var #_"long" (§ name time) (/ (.. releaseTime (getTime)) 1000))

        (Preconditions/checkArgument (§ expr Transaction/LOCKTIME_THRESHOLD <= time), "Release time was too small")

        (toCLTVPaymentChannel params, (BigInteger/valueOf time), from, to, value)
    )

    #_public
    #_static
    (§ defn #_"SendRequest" (§ fn toCLTVPaymentChannel) [#_"NetworkParameters" (§ name params), #_"int" (§ name releaseBlock), #_"ECKey" (§ name from), #_"ECKey" (§ name to), #_"Coin" (§ name value)])
    (§ block
        (Preconditions/checkArgument (§ expr 0 <= releaseBlock && releaseBlock < Transaction/LOCKTIME_THRESHOLD), "Block number was too large")

        (toCLTVPaymentChannel params, (BigInteger/valueOf releaseBlock), from, to, value)
    )

    #_public
    #_static
    (§ defn #_"SendRequest" (§ fn toCLTVPaymentChannel) [#_"NetworkParameters" (§ name params), #_"BigInteger" (§ name time), #_"ECKey" (§ name from), #_"ECKey" (§ name to), #_"Coin" (§ name value)])
    (§ block
        (§ var #_"SendRequest" (§ name req) (§ new #_"SendRequest"))
        (§ var #_"Script" (§ name output) (ScriptBuilder/createCLTVPaymentChannelOutput time, from, to))
        (§ ass (§ name (.. req tx)) (§ new #_"Transaction" params))
        (.. req tx (addOutput value, output))
        req
    )

    #_override
    #_public
    (§ method #_"String" (§ fn toString) [])
    (§ block
        ;; Print only the user-settable fields.
        (§ var #_"MoreObjects.ToStringHelper" (§ name helper) (.. (MoreObjects/toStringHelper this) (omitNullValues)))
        (.. helper (add "emptyWallet", emptyWallet))
        (.. helper (add "changeAddress", changeAddress))
        (.. helper (add "feePerKb", feePerKb))
        (.. helper (add "ensureMinRequiredFee", ensureMinRequiredFee))
        (.. helper (add "signInputs", signInputs))
        (.. helper (add "aesKey", (when (some? aesKey) "set"))) ;; Careful to not leak the key.
        (.. helper (add "coinSelector", coinSelector))
        (.. helper (add "shuffleOutputs", shuffleOutputs))
        (.. helper (add "recipientsPayFees", recipientsPayFees))
        (.. helper (toString))
    )
)

#_(ns org.bitcoinj.wallet #_"UnreadableWalletException")

;;;
 ; Thrown by the {@link WalletProtobufSerializer} when the serialized protocol buffer is either corrupted,
 ; internally inconsistent or appears to be from the future.
 ;;
#_public
(§ class #_"UnreadableWalletException" (§ extends #_"Exception")
    #_public
    (§ constructor #_"UnreadableWalletException" [#_"String" (§ name s)])
    (§ block
        (§ super s)
        this
    )

    #_public
    (§ constructor #_"UnreadableWalletException" [#_"String" (§ name s), #_"Throwable" (§ name t)])
    (§ block
        (§ super s, t)
        this
    )

    #_public
    #_static
    (§ class #_"BadPassword" (§ extends #_"UnreadableWalletException")
        #_public
        (§ constructor #_"BadPassword" [])
        (§ block
            (§ super "Password incorrect")
            this
        )
    )

    #_public
    #_static
    (§ class #_"FutureVersion" (§ extends #_"UnreadableWalletException")
        #_public
        (§ constructor #_"FutureVersion" [])
        (§ block
            (§ super "Unknown wallet version from the future.")
            this
        )
    )

    #_public
    #_static
    (§ class #_"WrongNetwork" (§ extends #_"UnreadableWalletException")
        #_public
        (§ constructor #_"WrongNetwork" [])
        (§ block
            (§ super "Mismatched network ID")
            this
        )
    )
)

#_(ns org.bitcoinj.wallet #_"Wallet"
    (:import [java.io *]
             [java.math BigInteger]
             [java.util *]
             [java.util.concurrent *]
             [java.util.concurrent.atomic *]
             [java.util.concurrent.locks *])
    (:import [com.google.common.annotations *]
             [com.google.common.base *]
             [com.google.common.collect *]
             [com.google.common.primitives *]
             [com.google.common.util.concurrent *]
             [com.google.protobuf *]
             [net.jcip.annotations *]
             [org.slf4j *]
             [org.spongycastle.crypto.params *])
   (:require [org.bitcoinj.core AbstractBlockChain Address BlockChain BloomFilter Coin Context ECKey FilteredBlock InsufficientMoneyException Message NetworkParameters Peer PeerFilterProvider PeerGroup ScriptException Sha256Hash StoredBlock Transaction TransactionBag TransactionBroadcast TransactionBroadcaster TransactionConfidence TransactionInput TransactionOutPoint TransactionOutput UTXO Utils VarInt VerificationException]
             [org.bitcoinj.core.TransactionConfidence *]
             [org.bitcoinj.core.listeners *]
             [org.bitcoinj.crypto *]
             [org.bitcoinj.script *]
             [org.bitcoinj.signers *]
             [org.bitcoinj.utils *]
             [org.bitcoinj.wallet.Protos.Wallet *]
             [org.bitcoinj.wallet.WalletTransaction *]
             [org.bitcoinj.wallet.listeners KeyChainEventListener WalletChangeEventListener WalletCoinsReceivedEventListener WalletCoinsSentEventListener WalletReorganizeEventListener]))

;; To do list:
;;
;; - Take all wallet-relevant data out of Transaction and put it into WalletTransaction.  Make Transaction immutable.
;; - Only store relevant transaction outputs, don't bother storing the rest of the data.  Big RAM saving.
;; - Split block chain and tx output tracking into a superclass that doesn't have any key or spending related code.
;; - Simplify how transactions are tracked and stored: in particular, have the wallet maintain positioning information
;;   for transactions independent of the transactions themselves, so the timeline can be walked without having to
;;   process and sort every single transaction.
;; - Split data persistence out into a backend class and make the wallet transactional, so we can store a wallet
;;   in a database not just in RAM.
;; - Make clearing of transactions able to only rewind the wallet a certain distance instead of all blocks.
;; - Make it scale:
;;     - eliminate all the algorithms with quadratic complexity (or worse).
;;     - don't require everything to be held in RAM at once.
;;     - consider allowing eviction of no longer re-orgable transactions or keys that were used up.
;;
;; Finally, find more ways to break the class up and decompose it.  Currently every time we move code out, other code
;; fills up the lines saved!

;;;
 ; <p>A Wallet stores keys and a record of transactions that send and receive value from those keys.  Using these,
 ; it is able to create new transactions that spend the recorded transactions, and this is the fundamental operation
 ; of the Bitcoin protocol.</p>
 ;
 ; <p>To learn more about this class, read <b><a href="https://bitcoinj.github.io/working-with-the-wallet">working with the wallet.</a></b></p>
 ;
 ; <p>To fill up a Wallet with transactions, you need to use it in combination with a {@link BlockChain} and various
 ; other objects, see the <a href="https://bitcoinj.github.io/getting-started">Getting started</a> tutorial
 ; on the website to learn more about how to set everything up.</p>
 ;
 ; <p>Wallets can be serialized using protocol buffers.  You need to save the wallet whenever it changes, there is an
 ; auto-save feature that simplifies this for you although you're still responsible for manually triggering a save when
 ; your app is about to quit because the auto-save feature waits a moment before actually committing to disk to avoid IO
 ; thrashing when the wallet is changing very fast (e.g. due to a block chain sync).  See
 ; {@link Wallet#autosaveToFile(java.io.File, long, java.util.concurrent.TimeUnit, org.bitcoinj.wallet.WalletFiles.Listener)}
 ; for more information about this.</p>
 ;;
#_public
(§ class #_"Wallet" (§ implements #_"NewBestBlockListener", #_"TransactionReceivedInBlockListener", #_"PeerFilterProvider", #_"KeyBag", #_"TransactionBag", #_"ReorganizeListener")
    #_private
    #_static
    (§ def- #_"Logger" (§ name log) (LoggerFactory/getLogger (§ klass #_"Wallet")))
    #_private
    #_static
    (§ def- #_"int" (§ name MINIMUM_BLOOM_DATA_LENGTH) 8)

    ;; Ordering: lock > keyChainGroupLock.  KeyChainGroup is protected separately to allow fast querying of current receive
    ;; address even if the wallet itself is busy e.g. saving or processing a big reorg.  Useful for reducing UI latency.
    #_protected
    (§ field #_"ReentrantLock" (§ name lock) (Threading/lock "wallet"))
    #_protected
    (§ field #_"ReentrantLock" (§ name keyChainGroupLock) (Threading/lock "wallet-keychaingroup"))

    ;; The various pools below give quick access to wallet-relevant transactions by the state they're in:
    ;;
    ;; Pending:  Transactions that didn't make it into the best chain yet.  Pending transactions can be killed if a
    ;;           double spend against them appears in the best chain, in which case they move to the dead pool.
    ;;           If a double spend appears in the pending state as well, we update the confidence type
    ;;           of all txns in conflict to IN_CONFLICT and wait for the miners to resolve the race.
    ;; Unspent:  Transactions that appeared in the best chain and have outputs we can spend.  Note that we store the
    ;;           entire transaction in memory even though for spending purposes we only really need the outputs, the
    ;;           reason being that this simplifies handling of re-orgs.  It would be worth fixing this in future.
    ;; Spent:    Transactions that appeared in the best chain but don't have any spendable outputs.  They're stored
    ;;           here for history browsing/auditing reasons only and in future will probably be flushed out to some
    ;;           other kind of cold storage or just removed.
    ;; Dead:     Transactions that we believe will never confirm get moved here, out of pending.  Note that Bitcoin
    ;;           Core has no notion of dead-ness: the assumption is that double spends won't happen so there's no
    ;;           need to notify the user about them.  We take a more pessimistic approach and try to track the fact
    ;;           that transactions have been double spent so applications can do something intelligent (cancel orders,
    ;;           show to the user in the UI, etc).  A transaction can leave dead and move into spent/unspent if there
    ;;           is a re-org to a chain that doesn't include the double spend.

    #_private
    (§ field- #_"Map<Sha256Hash, Transaction>" (§ name pending))
    #_private
    (§ field- #_"Map<Sha256Hash, Transaction>" (§ name unspent))
    #_private
    (§ field- #_"Map<Sha256Hash, Transaction>" (§ name spent))
    #_private
    (§ field- #_"Map<Sha256Hash, Transaction>" (§ name dead))

    ;; All transactions together.
    #_protected
    (§ field #_"Map<Sha256Hash, Transaction>" (§ name transactions))

    ;; All the TransactionOutput objects that we could spend (ignoring whether we have the private key or not).
    ;; Used to speed up various calculations.
    #_protected
    (§ field #_"HashSet<TransactionOutput>" (§ name myUnspents) (Sets/newHashSet))

    ;; Transactions that were dropped by the risk analysis system.  These are not in any pools and not serialized
    ;; to disk.  We have to keep them around because if we ignore a tx because we think it will never confirm, but
    ;; then it actually does confirm and does so within the same network session, remote peers will not resend us
    ;; the tx data along with the Bloom filtered block, as they know we already received it once before
    ;; (so it would be wasteful to repeat).  Thus we keep them around here for a while.  If we drop our network
    ;; connections then the remote peers will forget that we were sent the tx data previously and send it again
    ;; when relaying a filtered merkleblock.
    #_private
    (§ field- #_"LinkedHashMap<Sha256Hash, Transaction>" (§ name riskDropped) (§ new #_"LinkedHashMap<Sha256Hash, Transaction>"
        (§ anon
            #_override
            #_protected
            (§ method #_"boolean" (§ fn removeEldestEntry) [#_"Map.Entry<Sha256Hash, Transaction>" (§ name eldest)])
            (§ block
                (< 1000 (size))
            )
        )))

    ;; The key chain group is not thread safe, and generally the whole hierarchy of objects should not be mutated
    ;; outside the wallet lock.  So don't expose this object directly via any accessors!
    #_guarded-by(§ opt "keyChainGroupLock")
    #_private
    (§ field- #_"KeyChainGroup" (§ name keyChainGroup))

    #_protected
    (§ field #_"Context" (§ name context))
    #_protected
    (§ field #_"NetworkParameters" (§ name params))

    #_nilable
    #_private
    (§ field- #_"Sha256Hash" (§ name lastBlockSeenHash))
    #_private
    (§ field- #_"int" (§ name lastBlockSeenHeight))
    #_private
    (§ field- #_"long" (§ name lastBlockSeenTimeSecs))

    #_private
    (§ field- #_"CopyOnWriteArrayList<ListenerRegistration<WalletChangeEventListener>>" (§ name changeListeners) (§ new #_"CopyOnWriteArrayList<>"))
    #_private
    (§ field- #_"CopyOnWriteArrayList<ListenerRegistration<WalletCoinsReceivedEventListener>>" (§ name coinsReceivedListeners) (§ new #_"CopyOnWriteArrayList<>"))
    #_private
    (§ field- #_"CopyOnWriteArrayList<ListenerRegistration<WalletCoinsSentEventListener>>" (§ name coinsSentListeners) (§ new #_"CopyOnWriteArrayList<>"))
    #_private
    (§ field- #_"CopyOnWriteArrayList<ListenerRegistration<WalletReorganizeEventListener>>" (§ name reorganizeListeners) (§ new #_"CopyOnWriteArrayList<>"))
    #_private
    (§ field- #_"CopyOnWriteArrayList<ListenerRegistration<TransactionConfidenceEventListener>>" (§ name transactionConfidenceListeners) (§ new #_"CopyOnWriteArrayList<>"))

    ;; A listener that relays confidence changes from the transaction confidence object to the wallet event listener,
    ;; as a convenience to API users so they don't have to register on every transaction themselves.
    #_private
    (§ field- #_"TransactionConfidence.Listener" (§ name txConfidenceListener))

    ;; If a TX hash appears in this set then notifyNewBestBlock will ignore it, as its confidence was already set up
    ;; in receive() via Transaction.setBlockAppearance().  As the BlockChain always calls notifyNewBestBlock even if
    ;; it sent transactions to the wallet, without this we'd double count.
    #_private
    (§ field- #_"HashSet<Sha256Hash>" (§ name ignoreNextNewBlock))
    ;; Whether or not to ignore pending transactions that are considered risky by the configured risk analyzer.
    #_private
    (§ field- #_"boolean" (§ name acceptRiskyTransactions))
    ;; Object that performs risk analysis of pending transactions.  We might reject transactions that seem like
    ;; a high risk of being a double spending attack.
    #_private
    (§ field- #_"RiskAnalysis.Analyzer" (§ name riskAnalyzer) DefaultRiskAnalysis/FACTORY)

    ;; Stuff for notifying transaction objects that we changed their confidences.  The purpose of this is to avoid
    ;; spuriously sending lots of repeated notifications to listeners that API users aren't really interested in as
    ;; a side effect of how the code is written (e.g. during re-orgs confidence data gets adjusted multiple times).
    #_private
    (§ field- #_"int" (§ name onWalletChangedSuppressions))
    #_private
    (§ field- #_"boolean" (§ name insideReorg))
    #_private
    (§ field- #_"Map<Transaction, TransactionConfidence.Listener.ChangeReason>" (§ name confidenceChanged))
    #_protected
    #_volatile
    (§ field #_"WalletFiles" (§ name vFileManager))
    ;; Object that is used to send transactions asynchronously when the wallet requires it.
    #_protected
    #_volatile
    (§ field #_"TransactionBroadcaster" (§ name vTransactionBroadcaster))
    ;; UNIX time in seconds.  Money controlled by keys created before this time will be automatically respent to
    ;; a key that was created after it.  Useful when you believe some keys have been compromised.
    #_private
    #_volatile
    (§ field- #_"long" (§ name vKeyRotationTimestamp))

    #_protected
    (§ field #_"CoinSelector" (§ name coinSelector) (§ new #_"DefaultCoinSelector"))

    ;; The wallet version.  This is an int that can be used to track breaking changes in the wallet format.
    ;; You can also use it to detect wallets that come from the future (i.e. they contain features you
    ;; do not know how to deal with).
    #_private
    (§ field- #_"int" (§ name version))
    ;; User-provided description that may help people keep track of what a wallet is for.
    #_private
    (§ field- #_"String" (§ name description))

    ;; Objects that perform transaction signing.  Applied subsequently one after another.
    #_guarded-by(§ opt "lock")
    #_private
    (§ field- #_"List<TransactionSigner>" (§ name signers))

    ;;;
     ; Creates a new, empty wallet with a randomly chosen seed and no transactions.  Make sure to provide for
     ; sufficient backup!  Any keys will be derived from the seed.  If you want to restore a wallet from disk
     ; instead, see {@link #loadFromFile}.
     ;;
    #_public
    (§ constructor #_"Wallet" [#_"NetworkParameters" (§ name params)])
    (§ block
        (§ this (Context/getOrCreate params))
        this
    )

    ;;;
     ; Creates a new, empty wallet with a randomly chosen seed and no transactions.  Make sure to provide for
     ; sufficient backup!  Any keys will be derived from the seed.  If you want to restore a wallet from disk
     ; instead, see {@link #loadFromFile}.
     ;;
    #_public
    (§ constructor #_"Wallet" [#_"Context" (§ name context)])
    (§ block
        (§ this context, (§ expr (§ new #_"KeyChainGroup" (.. context (getParams)))))
        this
    )

    #_public
    #_static
    (§ defn #_"Wallet" (§ fn fromSeed) [#_"NetworkParameters" (§ name params), #_"DeterministicSeed" (§ name seed)])
    (§ block
        (§ new #_"Wallet" params, (§ new #_"KeyChainGroup" params, seed))
    )

    ;;;
     ; Creates a wallet that tracks payments to and from the HD key hierarchy rooted by the given watching key.
     ; A watching key corresponds to account zero in the recommended BIP32 key hierarchy.
     ;;
    #_public
    #_static
    (§ defn #_"Wallet" (§ fn fromWatchingKey) [#_"NetworkParameters" (§ name params), #_"DeterministicKey" (§ name watchKey)])
    (§ block
        (§ new #_"Wallet" params, (§ new #_"KeyChainGroup" params, watchKey))
    )

    ;;;
     ; Creates a wallet that tracks payments to and from the HD key hierarchy rooted by the given watching key.
     ; A watching key corresponds to account zero in the recommended BIP32 key hierarchy.  The key is specified
     ; in base58 notation and the creation time of the key.  If you don't know the creation time, you can pass
     ; {@link DeterministicHierarchy#BIP32_STANDARDISATION_TIME_SECS}.
     ;;
    #_public
    #_static
    (§ defn #_"Wallet" (§ fn fromWatchingKeyB58) [#_"NetworkParameters" (§ name params), #_"String" (§ name watchKeyB58), #_"long" (§ name creationTimeSeconds)])
    (§ block
        (§ var #_"DeterministicKey" (§ name watchKey) (DeterministicKey/deserializeB58 nil, watchKeyB58, params))
        (.. watchKey (setCreationTimeSeconds creationTimeSeconds))
        (fromWatchingKey params, watchKey)
    )

    ;;;
     ; Creates a wallet containing a given set of keys.  All further keys will be derived from the oldest key.
     ;;
    #_public
    #_static
    (§ defn #_"Wallet" (§ fn fromKeys) [#_"NetworkParameters" (§ name params), #_"List<ECKey>" (§ name keys)])
    (§ block
        (§ for (§ var #_"ECKey" (§ name key)) :for keys)
        (§ block
            (Preconditions/checkArgument (§ not (§ insta key #_"DeterministicKey")))
        )

        (§ var #_"KeyChainGroup" (§ name group) (§ new #_"KeyChainGroup" params))
        (.. group (importKeys keys))
        (§ new #_"Wallet" params, group)
    )

    #_public
    (§ constructor #_"Wallet" [#_"NetworkParameters" (§ name params), #_"KeyChainGroup" (§ name keyChainGroup)])
    (§ block
        (§ this (Context/getOrCreate params), keyChainGroup)
        this
    )

    #_private
    (§ constructor- #_"Wallet" [#_"Context" (§ name context), #_"KeyChainGroup" (§ name keyChainGroup)])
    (§ block
        (§ ass (§ name (.. this context)) context)
        (§ ass (§ name (.. this params)) (.. context (getParams)))
        (§ ass (§ name (.. this keyChainGroup)) (Preconditions/checkNotNull keyChainGroup))
        (§ if (.. params (getId) (equals NetworkParameters/ID_UNITTESTNET)))
        (§ block
            (.. this keyChainGroup (setLookaheadSize 5)) ;; Cut down excess computation for unit tests.
        )
        ;; If this keyChainGroup was created fresh just now (new wallet), make HD so a backup can be made immediately
        ;; without having to call current/freshReceiveKey.  If there are already keys in the chain of any kind then
        ;; we're probably being deserialized so leave things alone: the API user can upgrade later.
        (§ if (== (.. this keyChainGroup (numKeys)) 0))
        (§ block
            (.. this keyChainGroup (createAndActivateNewHDChain))
        )
        (§ ass (§ name unspent) (§ new #_"HashMap<>"))
        (§ ass (§ name spent) (§ new #_"HashMap<>"))
        (§ ass (§ name pending) (§ new #_"HashMap<>"))
        (§ ass (§ name dead) (§ new #_"HashMap<>"))
        (§ ass (§ name transactions) (§ new #_"HashMap<>"))
        ;; Use a linked hash map to ensure ordering of event listeners is correct.
        (§ ass (§ name confidenceChanged) (§ new #_"LinkedHashMap<>"))
        (§ ass (§ name signers) (§ new #_"ArrayList<>"))
        (addTransactionSigner (§ new #_"LocalTransactionSigner"))
        (createTransientState)
        this
    )

    #_private
    (§ method- #_"void" (§ fn createTransientState) [])
    (§ block
        (§ ass (§ name ignoreNextNewBlock) (§ new #_"HashSet<>"))
        (§ ass (§ name txConfidenceListener) (§ new #_"TransactionConfidence.Listener"
        (§ anon
            #_override
            #_public
            (§ method #_"void" (§ fn onConfidenceChanged) [#_"TransactionConfidence" (§ name confidence), #_"TransactionConfidence.Listener.ChangeReason" (§ name reason)])
            (§ block
                ;; This will run on the user code thread so we shouldn't do anything too complicated here.
                ;; We only want to queue a wallet changed event and auto-save if the number of peers announcing
                ;; the transaction has changed, as that confidence change is made by the networking code which
                ;; doesn't necessarily know at that point which wallets contain which transactions, so it's up
                ;; to us to listen for that.  Other types of confidence changes (type, etc.) are triggered by us,
                ;; so we'll queue up a wallet change event in other parts of the code.
                (§ if (§ expr reason == ChangeReason/SEEN_PEERS))
                (§ block
                    (.. lock (lock))
                    (§ try )
                    (§ block
                        (checkBalanceFuturesLocked nil)
                        (§ var #_"Transaction" (§ name tx) (getTransaction (.. confidence (getTransactionHash))))
                        (queueOnTransactionConfidenceChanged tx)
                        (maybeQueueOnWalletChanged)
                    )
                    (§ finally )
                    (§ block
                        (.. lock (unlock))
                    )
                )
                nil
            )
        )))
        (§ ass (§ name acceptRiskyTransactions) false)
        nil
    )

    #_public
    (§ method #_"NetworkParameters" (§ fn getNetworkParameters) [])
    (§ block
        params
    )

    ;;;
     ; Gets the active keychain via {@link KeyChainGroup#getActiveKeyChain()}.
     ;;
    #_public
    (§ method #_"DeterministicKeyChain" (§ fn getActiveKeyChain) [])
    (§ block
        (.. keyChainGroup (getActiveKeyChain))
    )

    ;;;
     ; <p>Adds given transaction signer to the list of signers.  It will be added to the end of the signers list,
     ; so if this wallet already has some signers added, given signer will be executed after all of them.</p>
     ; <p>Transaction signer should be fully initialized before adding to the wallet, otherwise
     ; {@link IllegalStateException} will be thrown</p>
     ;;
    #_public
    (§ method #_"void" (§ fn addTransactionSigner) [#_"TransactionSigner" (§ name signer)])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ if (.. signer (isReady)))
            (§ block
                (.. signers (add signer))
            )
            (§ else )
            (§ block
                (§ throw (§ new #_"IllegalStateException" (§ expr "Signer instance is not ready to be added into Wallet: " + (.. signer (getClass)))))
            )
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
        nil
    )

    #_public
    (§ method #_"List<TransactionSigner>" (§ fn getTransactionSigners) [])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ return (ImmutableList/copyOf signers))
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    ;;;
     ; Returns a key that hasn't been seen in a transaction yet, and which is suitable for displaying
     ; in a wallet user interface as "a convenient key to receive funds on" when the purpose parameter
     ; is {@link org.bitcoinj.wallet.KeyChain.KeyPurpose#RECEIVE_FUNDS}.  The returned key is stable
     ; until it's actually seen in a pending or confirmed transaction, at which point this method will
     ; start returning a different key (for each purpose independently).
     ;;
    #_public
    (§ method #_"DeterministicKey" (§ fn currentKey) [#_"KeyChain.KeyPurpose" (§ name purpose)])
    (§ block
        (.. keyChainGroupLock (lock))
        (§ try )
        (§ block
            (maybeUpgradeToHD)
            (§ return (.. keyChainGroup (currentKey purpose)))
        )
        (§ finally )
        (§ block
            (.. keyChainGroupLock (unlock))
        )
    )

    ;;;
     ; An alias for calling {@link #currentKey(org.bitcoinj.wallet.KeyChain.KeyPurpose)} with
     ; {@link org.bitcoinj.wallet.KeyChain.KeyPurpose#RECEIVE_FUNDS} as the parameter.
     ;;
    #_public
    (§ method #_"DeterministicKey" (§ fn currentReceiveKey) [])
    (§ block
        (currentKey KeyChain/KeyPurpose/RECEIVE_FUNDS)
    )

    ;;;
     ; Returns address for a {@link #currentKey(org.bitcoinj.wallet.KeyChain.KeyPurpose)}.
     ;;
    #_public
    (§ method #_"Address" (§ fn currentAddress) [#_"KeyChain.KeyPurpose" (§ name purpose)])
    (§ block
        (.. keyChainGroupLock (lock))
        (§ try )
        (§ block
            (maybeUpgradeToHD)
            (§ return (.. keyChainGroup (currentAddress purpose)))
        )
        (§ finally )
        (§ block
            (.. keyChainGroupLock (unlock))
        )
    )

    ;;;
     ; An alias for calling {@link #currentAddress(org.bitcoinj.wallet.KeyChain.KeyPurpose)} with
     ; {@link org.bitcoinj.wallet.KeyChain.KeyPurpose#RECEIVE_FUNDS} as the parameter.
     ;;
    #_public
    (§ method #_"Address" (§ fn currentReceiveAddress) [])
    (§ block
        (currentAddress KeyChain/KeyPurpose/RECEIVE_FUNDS)
    )

    ;;;
     ; Returns a key that has not been returned by this method before (fresh).  You can think of this
     ; as being a newly created key, although the notion of "create" is not really valid for a
     ; {@link org.bitcoinj.wallet.DeterministicKeyChain}.  When the parameter is
     ; {@link org.bitcoinj.wallet.KeyChain.KeyPurpose#RECEIVE_FUNDS} the returned key is suitable for
     ; being put into a receive coins wizard type UI.  You should use this when the user is definitely
     ; going to hand this key out to someone who wishes to send money.
     ;;
    #_public
    (§ method #_"DeterministicKey" (§ fn freshKey) [#_"KeyChain.KeyPurpose" (§ name purpose)])
    (§ block
        (.. (freshKeys purpose, 1) (get 0))
    )

    ;;;
     ; Returns a key/s that has not been returned by this method before (fresh).  You can think of this
     ; as being a newly created key/s, although the notion of "create" is not really valid for a
     ; {@link org.bitcoinj.wallet.DeterministicKeyChain}.  When the parameter is
     ; {@link org.bitcoinj.wallet.KeyChain.KeyPurpose#RECEIVE_FUNDS} the returned key is suitable for
     ; being put into a receive coins wizard type UI. You should use this when the user is definitely
     ; going to hand this key/s out to someone who wishes to send money.
     ;;
    #_public
    (§ method #_"List<DeterministicKey>" (§ fn freshKeys) [#_"KeyChain.KeyPurpose" (§ name purpose), #_"int" (§ name numberOfKeys)])
    (§ block
        (§ var #_"List<DeterministicKey>" (§ name keys))
        (.. keyChainGroupLock (lock))
        (§ try )
        (§ block
            (maybeUpgradeToHD)
            (§ ass (§ name keys) (.. keyChainGroup (freshKeys purpose, numberOfKeys)))
        )
        (§ finally )
        (§ block
            (.. keyChainGroupLock (unlock))
        )
        ;; Do we really need an immediate hard save?  Arguably all this is doing is saving the 'current' key
        ;; and that's not quite so important, so we could coalesce for more performance.
        (saveNow)
        keys
    )

    ;;;
     ; An alias for calling {@link #freshKey(org.bitcoinj.wallet.KeyChain.KeyPurpose)} with
     ; {@link org.bitcoinj.wallet.KeyChain.KeyPurpose#RECEIVE_FUNDS} as the parameter.
     ;;
    #_public
    (§ method #_"DeterministicKey" (§ fn freshReceiveKey) [])
    (§ block
        (freshKey KeyChain/KeyPurpose/RECEIVE_FUNDS)
    )

    ;;;
     ; Returns address for a {@link #freshKey(org.bitcoinj.wallet.KeyChain.KeyPurpose)}.
     ;;
    #_public
    (§ method #_"Address" (§ fn freshAddress) [#_"KeyChain.KeyPurpose" (§ name purpose)])
    (§ block
        (§ var #_"Address" (§ name key))
        (.. keyChainGroupLock (lock))
        (§ try )
        (§ block
            (§ ass (§ name key) (.. keyChainGroup (freshAddress purpose)))
        )
        (§ finally )
        (§ block
            (.. keyChainGroupLock (unlock))
        )
        (saveNow)
        key
    )

    ;;;
     ; An alias for calling {@link #freshAddress(org.bitcoinj.wallet.KeyChain.KeyPurpose)} with
     ; {@link org.bitcoinj.wallet.KeyChain.KeyPurpose#RECEIVE_FUNDS} as the parameter.
     ;;
    #_public
    (§ method #_"Address" (§ fn freshReceiveAddress) [])
    (§ block
        (freshAddress KeyChain/KeyPurpose/RECEIVE_FUNDS)
    )

    ;;;
     ; Returns only the keys that have been issued by {@link #freshReceiveKey()}, {@link #freshReceiveAddress()},
     ; {@link #currentReceiveKey()} or {@link #currentReceiveAddress()}.
     ;;
    #_public
    (§ method #_"List<ECKey>" (§ fn getIssuedReceiveKeys) [])
    (§ block
        (.. keyChainGroupLock (lock))
        (§ try )
        (§ block
            (§ return (.. keyChainGroup (getActiveKeyChain) (getIssuedReceiveKeys)))
        )
        (§ finally )
        (§ block
            (.. keyChainGroupLock (unlock))
        )
    )

    ;;;
     ; Returns only the addresses that have been issued by {@link #freshReceiveKey()}, {@link #freshReceiveAddress()},
     ; {@link #currentReceiveKey()} or {@link #currentReceiveAddress()}.
     ;;
    #_public
    (§ method #_"List<Address>" (§ fn getIssuedReceiveAddresses) [])
    (§ block
        (§ var #_"List<ECKey>" (§ name keys) (getIssuedReceiveKeys))
        (§ var #_"List<Address>" (§ name addresses) (§ new #_"ArrayList<>" (.. keys (size))))
        (§ for (§ var #_"ECKey" (§ name key)) :for keys)
        (§ block
            (.. addresses (add (.. key (toAddress (getParams)))))
        )
        addresses
    )

    ;;;
     ; Upgrades the wallet to be deterministic (BIP32).  You should call this, possibly providing the users encryption
     ; key, after loading a wallet produced by previous versions of bitcoinj.  If the wallet is encrypted the key
     ; <b>must</b> be provided, due to the way the seed is derived deterministically from private key bytes: failing
     ; to do this will result in an exception being thrown.  For non-encrypted wallets, the upgrade will be done for
     ; you automatically the first time a new key is requested (this happens when spending due to the change address).
     ;;
    #_public
    (§ method #_"void" (§ fn upgradeToDeterministic) [#_nilable #_"KeyParameter" (§ name aesKey)])
        (§ throws #_"DeterministicUpgradeRequiresPassword")
    (§ block
        (.. keyChainGroupLock (lock))
        (§ try )
        (§ block
            (.. keyChainGroup (upgradeToDeterministic vKeyRotationTimestamp, aesKey))
        )
        (§ finally )
        (§ block
            (.. keyChainGroupLock (unlock))
        )
        nil
    )

    ;;;
     ; Returns true if the wallet contains random keys and no HD chains, in which case you should call
     ; {@link #upgradeToDeterministic(org.spongycastle.crypto.params.KeyParameter)} before attempting
     ; to do anything that would require a new address or key.
     ;;
    #_public
    (§ method #_"boolean" (§ fn isDeterministicUpgradeRequired) [])
    (§ block
        (.. keyChainGroupLock (lock))
        (§ try )
        (§ block
            (§ return (.. keyChainGroup (isDeterministicUpgradeRequired)))
        )
        (§ finally )
        (§ block
            (.. keyChainGroupLock (unlock))
        )
    )

    #_private
    (§ method- #_"void" (§ fn maybeUpgradeToHD) [])
        (§ throws #_"DeterministicUpgradeRequiresPassword")
    (§ block
        (maybeUpgradeToHD nil)
        nil
    )

    #_guarded-by(§ opt "keyChainGroupLock")
    #_private
    (§ method- #_"void" (§ fn maybeUpgradeToHD) [#_nilable #_"KeyParameter" (§ name aesKey)])
        (§ throws #_"DeterministicUpgradeRequiresPassword")
    (§ block
        (Preconditions/checkState (.. keyChainGroupLock (isHeldByCurrentThread)))
        (§ if (.. keyChainGroup (isDeterministicUpgradeRequired)))
        (§ block
            (.. log (info "Upgrade to HD wallets is required, attempting to do so."))
            (§ try )
            (§ block
                (upgradeToDeterministic aesKey)
            )
            (§ catch #_"DeterministicUpgradeRequiresPassword" (§ name e))
            (§ block
                (.. log (error "Failed to auto upgrade due to encryption. You should call wallet.upgradeToDeterministic with the users AES key to avoid this error."))
                (§ throw e)
            )
        )
        nil
    )

    ;;;
     ; Removes the given key from the basicKeyChain.  Be very careful with this - losing a private key
     ; <b>destroys the money associated with it</b>.
     ; @return whether the key was removed or not.
     ;;
    #_public
    (§ method #_"boolean" (§ fn removeKey) [#_"ECKey" (§ name key)])
    (§ block
        (.. keyChainGroupLock (lock))
        (§ try )
        (§ block
            (§ return (.. keyChainGroup (removeImportedKey key)))
        )
        (§ finally )
        (§ block
            (.. keyChainGroupLock (unlock))
        )
    )

    ;;;
     ; Returns the number of keys in the key chain group, including lookahead keys.
     ;;
    #_public
    (§ method #_"int" (§ fn getKeyChainGroupSize) [])
    (§ block
        (.. keyChainGroupLock (lock))
        (§ try )
        (§ block
            (§ return (.. keyChainGroup (numKeys)))
        )
        (§ finally )
        (§ block
            (.. keyChainGroupLock (unlock))
        )
    )

    #_testing
    #_public
    (§ method #_"int" (§ fn getKeyChainGroupCombinedKeyLookaheadEpochs) [])
    (§ block
        (.. keyChainGroupLock (lock))
        (§ try )
        (§ block
            (§ return (.. keyChainGroup (getCombinedKeyLookaheadEpochs)))
        )
        (§ finally )
        (§ block
            (.. keyChainGroupLock (unlock))
        )
    )

    ;;;
     ; Returns a list of the non-deterministic keys that have been imported into the wallet, or the empty list if none.
     ;;
    #_public
    (§ method #_"List<ECKey>" (§ fn getImportedKeys) [])
    (§ block
        (.. keyChainGroupLock (lock))
        (§ try )
        (§ block
            (§ return (.. keyChainGroup (getImportedKeys)))
        )
        (§ finally )
        (§ block
            (.. keyChainGroupLock (unlock))
        )
    )

    ;;; Returns the address used for change outputs.  Note: this will probably go away in future. ;;
    #_public
    (§ method #_"Address" (§ fn currentChangeAddress) [])
    (§ block
        (currentAddress KeyChain/KeyPurpose/CHANGE)
    )

    ;;;
     ; <p>Imports the given ECKey to the wallet.</p>
     ;
     ; <p>If the wallet is configured to auto save to a file, triggers a save immediately.  Runs the onKeysAdded event
     ; handler.  If the key already exists in the wallet, does nothing and returns false.</p>
     ;;
    #_public
    (§ method #_"boolean" (§ fn importKey) [#_"ECKey" (§ name key)])
    (§ block
        (== (importKeys (Lists/newArrayList key)) 1)
    )

    ;;;
     ; Imports the given keys to the wallet.
     ; If {@link Wallet#autosaveToFile(java.io.File, long, java.util.concurrent.TimeUnit, org.bitcoinj.wallet.WalletFiles.Listener)}
     ; has been called, triggers an auto save bypassing the normal coalescing delay and event handlers.
     ; Returns the number of keys added, after duplicates are ignored.  The onKeyAdded event will be called
     ; for each key in the list that was not already present.
     ;;
    #_public
    (§ method #_"int" (§ fn importKeys) [#_"List<ECKey>" (§ name keys)])
    (§ block
        ;; API usage check.
        (checkNoDeterministicKeys keys)
        (§ var #_"int" (§ name result))
        (.. keyChainGroupLock (lock))
        (§ try )
        (§ block
            (§ ass (§ name result) (.. keyChainGroup (importKeys keys)))
        )
        (§ finally )
        (§ block
            (.. keyChainGroupLock (unlock))
        )
        (saveNow)
        result
    )

    #_private
    (§ method- #_"void" (§ fn checkNoDeterministicKeys) [#_"List<ECKey>" (§ name keys)])
    (§ block
        ;; Watch out for someone doing wallet.importKey(wallet.freshReceiveKey()); or equivalent: we never tested this.
        (§ for (§ var #_"ECKey" (§ name key)) :for keys)
        (§ block
            (§ if (§ insta key #_"DeterministicKey"))
            (§ block
                (§ throw (§ new #_"IllegalArgumentException" "Cannot import HD keys back into the wallet"))
            )
        )
        nil
    )

    ;;; Takes a list of keys and a password, then encrypts and imports them in one step using the current keycrypter. ;;
    #_public
    (§ method #_"int" (§ fn importKeysAndEncrypt) [#_"List<ECKey>" (§ name keys), #_"CharSequence" (§ name password)])
    (§ block
        (.. keyChainGroupLock (lock))
        (§ try )
        (§ block
            (Preconditions/checkNotNull (getKeyCrypter), "Wallet is not encrypted")
            (§ return (importKeysAndEncrypt keys, (§ expr (.. (getKeyCrypter) (deriveKey password)))))
        )
        (§ finally )
        (§ block
            (.. keyChainGroupLock (unlock))
        )
    )

    ;;; Takes a list of keys and an AES key, then encrypts and imports them in one step using the current keycrypter. ;;
    #_public
    (§ method #_"int" (§ fn importKeysAndEncrypt) [#_"List<ECKey>" (§ name keys), #_"KeyParameter" (§ name aesKey)])
    (§ block
        (.. keyChainGroupLock (lock))
        (§ try )
        (§ block
            (checkNoDeterministicKeys keys)
            (§ return (.. keyChainGroup (importKeysAndEncrypt keys, aesKey)))
        )
        (§ finally )
        (§ block
            (.. keyChainGroupLock (unlock))
        )
    )

    ;;;
     ; Add a pre-configured keychain to the wallet.  Useful for setting up a complex keychain,
     ; such as for a married wallet.  For example:
     ; <pre>
     ; MarriedKeyChain chain = MarriedKeyChain.builder()
     ;     .random(new SecureRandom())
     ;     .followingKeys(followingKeys)
     ;     .threshold(2).build();
     ; wallet.addAndActivateHDChain(chain);
     ; </p>
     ;;
    #_public
    (§ method #_"void" (§ fn addAndActivateHDChain) [#_"DeterministicKeyChain" (§ name chain)])
    (§ block
        (.. keyChainGroupLock (lock))
        (§ try )
        (§ block
            (.. keyChainGroup (addAndActivateHDChain chain))
        )
        (§ finally )
        (§ block
            (.. keyChainGroupLock (unlock))
        )
        nil
    )

    ;;; See {@link org.bitcoinj.wallet.DeterministicKeyChain#setLookaheadSize(int)} for more info on this. ;;
    #_public
    (§ method #_"void" (§ fn setKeyChainGroupLookaheadSize) [#_"int" (§ name lookaheadSize)])
    (§ block
        (.. keyChainGroupLock (lock))
        (§ try )
        (§ block
            (.. keyChainGroup (setLookaheadSize lookaheadSize))
        )
        (§ finally )
        (§ block
            (.. keyChainGroupLock (unlock))
        )
        nil
    )

    ;;; See {@link org.bitcoinj.wallet.DeterministicKeyChain#setLookaheadSize(int)} for more info on this. ;;
    #_public
    (§ method #_"int" (§ fn getKeyChainGroupLookaheadSize) [])
    (§ block
        (.. keyChainGroupLock (lock))
        (§ try )
        (§ block
            (§ return (.. keyChainGroup (getLookaheadSize)))
        )
        (§ finally )
        (§ block
            (.. keyChainGroupLock (unlock))
        )
    )

    ;;; See {@link org.bitcoinj.wallet.DeterministicKeyChain#setLookaheadThreshold(int)} for more info on this. ;;
    #_public
    (§ method #_"void" (§ fn setKeyChainGroupLookaheadThreshold) [#_"int" (§ name num)])
    (§ block
        (.. keyChainGroupLock (lock))
        (§ try )
        (§ block
            (maybeUpgradeToHD)
            (.. keyChainGroup (setLookaheadThreshold num))
        )
        (§ finally )
        (§ block
            (.. keyChainGroupLock (unlock))
        )
        nil
    )

    ;;; See {@link org.bitcoinj.wallet.DeterministicKeyChain#setLookaheadThreshold(int)} for more info on this. ;;
    #_public
    (§ method #_"int" (§ fn getKeyChainGroupLookaheadThreshold) [])
    (§ block
        (.. keyChainGroupLock (lock))
        (§ try )
        (§ block
            (maybeUpgradeToHD)
            (§ return (.. keyChainGroup (getLookaheadThreshold)))
        )
        (§ finally )
        (§ block
            (.. keyChainGroupLock (unlock))
        )
    )

    ;;;
     ; Returns a public-only DeterministicKey that can be used to set up a watching wallet: that is, a wallet that
     ; can import transactions from the block chain just as the normal wallet can, but which cannot spend.  Watching
     ; wallets are very useful for things like web servers that accept payments.  This key corresponds to the account
     ; zero key in the recommended BIP32 hierarchy.
     ;;
    #_public
    (§ method #_"DeterministicKey" (§ fn getWatchingKey) [])
    (§ block
        (.. keyChainGroupLock (lock))
        (§ try )
        (§ block
            (maybeUpgradeToHD)
            (§ return (.. keyChainGroup (getActiveKeyChain) (getWatchingKey)))
        )
        (§ finally )
        (§ block
            (.. keyChainGroupLock (unlock))
        )
    )

    ;;;
     ; Returns whether this wallet consists entirely of watching keys (unencrypted keys with no private part).
     ; Mixed wallets are forbidden.
     ;
     ; @throws IllegalStateException if there are no keys, or if there is a mix between watching and non-watching keys.
     ;;
    #_public
    (§ method #_"boolean" (§ fn isWatching) [])
    (§ block
        (.. keyChainGroupLock (lock))
        (§ try )
        (§ block
            (maybeUpgradeToHD)
            (§ return (.. keyChainGroup (isWatching)))
        )
        (§ finally )
        (§ block
            (.. keyChainGroupLock (unlock))
        )
    )

    ;;;
     ; Locates a keypair from the basicKeyChain given the hash of the public key.  This is needed when finding out
     ; which key we need to use to redeem a transaction output.
     ;
     ; @return ECKey object or null if no such key was found.
     ;;
    #_override
    #_nilable
    #_public
    (§ method #_"ECKey" (§ fn findKeyFromPubHash) [#_"byte[]" (§ name pubkeyHash)])
    (§ block
        (.. keyChainGroupLock (lock))
        (§ try )
        (§ block
            (§ return (.. keyChainGroup (findKeyFromPubHash pubkeyHash)))
        )
        (§ finally )
        (§ block
            (.. keyChainGroupLock (unlock))
        )
    )

    ;;; Returns true if the given key is in the wallet, false otherwise.  Currently an O(N) operation. ;;
    #_public
    (§ method #_"boolean" (§ fn hasKey) [#_"ECKey" (§ name key)])
    (§ block
        (.. keyChainGroupLock (lock))
        (§ try )
        (§ block
            (§ return (.. keyChainGroup (hasKey key)))
        )
        (§ finally )
        (§ block
            (.. keyChainGroupLock (unlock))
        )
    )

    ;;; {@inheritDoc} ;;
    #_override
    #_public
    (§ method #_"boolean" (§ fn isPubKeyHashMine) [#_"byte[]" (§ name pubkeyHash)])
    (§ block
        (!= (findKeyFromPubHash pubkeyHash) nil)
    )

    ;;;
     ; Locates a keypair from the basicKeyChain given the raw public key bytes.
     ; @return ECKey or null if no such key was found.
     ;;
    #_override
    #_nilable
    #_public
    (§ method #_"ECKey" (§ fn findKeyFromPubKey) [#_"byte[]" (§ name pubkey)])
    (§ block
        (.. keyChainGroupLock (lock))
        (§ try )
        (§ block
            (§ return (.. keyChainGroup (findKeyFromPubKey pubkey)))
        )
        (§ finally )
        (§ block
            (.. keyChainGroupLock (unlock))
        )
    )

    ;;; {@inheritDoc} ;;
    #_override
    #_public
    (§ method #_"boolean" (§ fn isPubKeyMine) [#_"byte[]" (§ name pubkey)])
    (§ block
        (!= (findKeyFromPubKey pubkey) nil)
    )

    ;;;
     ; Locates a redeem data (redeem script and keys) from the keyChainGroup given the hash of the script.
     ; @return RedeemData object or null if no such data was found.
     ;;
    #_nilable
    #_override
    #_public
    (§ method #_"RedeemData" (§ fn findRedeemDataFromScriptHash) [#_"byte[]" (§ name payToScriptHash)])
    (§ block
        (.. keyChainGroupLock (lock))
        (§ try )
        (§ block
            (§ return (.. keyChainGroup (findRedeemDataFromScriptHash payToScriptHash)))
        )
        (§ finally )
        (§ block
            (.. keyChainGroupLock (unlock))
        )
    )

    ;;; {@inheritDoc} ;;
    #_override
    #_public
    (§ method #_"boolean" (§ fn isPayToScriptHashMine) [#_"byte[]" (§ name payToScriptHash)])
    (§ block
        (!= (findRedeemDataFromScriptHash payToScriptHash) nil)
    )

    ;;;
     ; Marks all keys used in the transaction output as used in the wallet.
     ; See {@link org.bitcoinj.wallet.DeterministicKeyChain#markKeyAsUsed(DeterministicKey)} for more info on this.
     ;;
    #_private
    (§ method- #_"void" (§ fn markKeysAsUsed) [#_"Transaction" (§ name tx)])
    (§ block
        (.. keyChainGroupLock (lock))
        (§ try )
        (§ block
            (§ for (§ var #_"TransactionOutput" (§ name o)) :for (.. tx (getOutputs)))
            (§ block
                (§ try )
                (§ block
                    (§ var #_"Script" (§ name script) (.. o (getScriptPubKey)))
                    (§ if (.. script (isSentToRawPubKey)))
                    (§ block
                        (§ var #_"byte[]" (§ name pubkey) (.. script (getPubKey)))
                        (.. keyChainGroup (markPubKeyAsUsed pubkey))
                    )
                    (§ elseif (.. script (isSentToAddress)))
                    (§ block
                        (§ var #_"byte[]" (§ name pubkeyHash) (.. script (getPubKeyHash)))
                        (.. keyChainGroup (markPubKeyHashAsUsed pubkeyHash))
                    )
                    (§ elseif (.. script (isPayToScriptHash)))
                    (§ block
                        (§ var #_"Address" (§ name a) (Address/fromP2SHScript (.. tx (getParams)), script))
                        (.. keyChainGroup (markP2SHAddressAsUsed a))
                    )
                )
                (§ catch #_"ScriptException" (§ name e))
                (§ block
                    ;; Just means we didn't understand the output of this transaction: ignore it.
                    (.. log (warn "Could not parse tx output script: {}", (.. e (toString))))
                )
            )
        )
        (§ finally )
        (§ block
            (.. keyChainGroupLock (unlock))
        )
        nil
    )

    ;;;
     ; Returns the immutable seed for the current active HD chain.
     ; @throws org.bitcoinj.core.ECKey.MissingPrivateKeyException if the seed is unavailable (watching wallet).
     ;;
    #_public
    (§ method #_"DeterministicSeed" (§ fn getKeyChainSeed) [])
    (§ block
        (.. keyChainGroupLock (lock))
        (§ try )
        (§ block
            (§ var #_"DeterministicSeed" (§ name seed) (.. keyChainGroup (getActiveKeyChain) (getSeed)))
            (§ if (nil? seed))
            (§ block
                (§ throw (§ new #_"ECKey.MissingPrivateKeyException"))
            )
            (§ return seed)
        )
        (§ finally )
        (§ block
            (.. keyChainGroupLock (unlock))
        )
    )

    ;;;
     ; Returns a key for the given HD path, assuming it's already been derived.  You normally shouldn't use this:
     ; use currentReceiveKey/freshReceiveKey instead.
     ;;
    #_public
    (§ method #_"DeterministicKey" (§ fn getKeyByPath) [#_"List<ChildNumber>" (§ name path)])
    (§ block
        (.. keyChainGroupLock (lock))
        (§ try )
        (§ block
            (maybeUpgradeToHD)
            (§ return (.. keyChainGroup (getActiveKeyChain) (getKeyByPath path, false)))
        )
        (§ finally )
        (§ block
            (.. keyChainGroupLock (unlock))
        )
    )

    ;;;
     ; Convenience wrapper around
     ; {@link Wallet#encrypt(org.bitcoinj.crypto.KeyCrypter, org.spongycastle.crypto.params.KeyParameter)}
     ; which uses the default Scrypt key derivation algorithm and parameters to derive a key from the given password.
     ;;
    #_public
    (§ method #_"void" (§ fn encrypt) [#_"CharSequence" (§ name password)])
    (§ block
        (.. keyChainGroupLock (lock))
        (§ try )
        (§ block
            (§ var #_"KeyCrypterScrypt" (§ name scrypt) (§ new #_"KeyCrypterScrypt"))
            (.. keyChainGroup (encrypt scrypt, (.. scrypt (deriveKey password))))
        )
        (§ finally )
        (§ block
            (.. keyChainGroupLock (unlock))
        )
        (saveNow)
        nil
    )

    ;;;
     ; Encrypt the wallet using the KeyCrypter and the AES key.
     ; A good default KeyCrypter to use is {@link org.bitcoinj.crypto.KeyCrypterScrypt}.
     ;
     ; @param keyCrypter The KeyCrypter that specifies how to encrypt/ decrypt a key.
     ; @param aesKey AES key to use (normally created using KeyCrypter#deriveKey and cached as it is time consuming to create from a password).
     ; @throws KeyCrypterException if the wallet encryption fails.  If so, the wallet state is unchanged.
     ;;
    #_public
    (§ method #_"void" (§ fn encrypt) [#_"KeyCrypter" (§ name keyCrypter), #_"KeyParameter" (§ name aesKey)])
    (§ block
        (.. keyChainGroupLock (lock))
        (§ try )
        (§ block
            (.. keyChainGroup (encrypt keyCrypter, aesKey))
        )
        (§ finally )
        (§ block
            (.. keyChainGroupLock (unlock))
        )
        (saveNow)
        nil
    )

    ;;;
     ; Decrypt the wallet with the wallets keyCrypter and password.
     ; @throws KeyCrypterException if the wallet decryption fails.  If so, the wallet state is unchanged.
     ;;
    #_public
    (§ method #_"void" (§ fn decrypt) [#_"CharSequence" (§ name password)])
    (§ block
        (.. keyChainGroupLock (lock))
        (§ try )
        (§ block
            (§ var #_"KeyCrypter" (§ name crypter) (.. keyChainGroup (getKeyCrypter)))
            (Preconditions/checkState (some? crypter), "Not encrypted")
            (.. keyChainGroup (decrypt (.. crypter (deriveKey password))))
        )
        (§ finally )
        (§ block
            (.. keyChainGroupLock (unlock))
        )
        (saveNow)
        nil
    )

    ;;;
     ; Decrypt the wallet with the wallets keyCrypter and AES key.
     ;
     ; @param aesKey AES key to use (normally created using KeyCrypter#deriveKey and cached as it is time consuming to create from a password).
     ; @throws KeyCrypterException if the wallet decryption fails. If so, the wallet state is unchanged.
     ;;
    #_public
    (§ method #_"void" (§ fn decrypt) [#_"KeyParameter" (§ name aesKey)])
    (§ block
        (.. keyChainGroupLock (lock))
        (§ try )
        (§ block
            (.. keyChainGroup (decrypt aesKey))
        )
        (§ finally )
        (§ block
            (.. keyChainGroupLock (unlock))
        )
        (saveNow)
        nil
    )

    ;;;
     ;  Check whether the password can decrypt the first key in the wallet.
     ;  This can be used to check the validity of an entered password.
     ;
     ;  @return true if the password supplied can decrypt the first private key in the wallet, false otherwise.
     ;  @throws IllegalStateException if the wallet is not encrypted.
     ;;
    #_public
    (§ method #_"boolean" (§ fn checkPassword) [#_"CharSequence" (§ name password)])
    (§ block
        (.. keyChainGroupLock (lock))
        (§ try )
        (§ block
            (§ return (.. keyChainGroup (checkPassword password)))
        )
        (§ finally )
        (§ block
            (.. keyChainGroupLock (unlock))
        )
    )

    ;;;
     ;  Check whether the AES key can decrypt the first encrypted key in the wallet.
     ;
     ;  @return true if AES key supplied can decrypt the first encrypted private key in the wallet, false otherwise.
     ;;
    #_public
    (§ method #_"boolean" (§ fn checkAESKey) [#_"KeyParameter" (§ name aesKey)])
    (§ block
        (.. keyChainGroupLock (lock))
        (§ try )
        (§ block
            (§ return (.. keyChainGroup (checkAESKey aesKey)))
        )
        (§ finally )
        (§ block
            (.. keyChainGroupLock (unlock))
        )
    )

    ;;;
     ; Get the wallet's KeyCrypter, or null if the wallet is not encrypted.
     ; (Used in encrypting/decrypting an ECKey).
     ;;
    #_nilable
    #_public
    (§ method #_"KeyCrypter" (§ fn getKeyCrypter) [])
    (§ block
        (.. keyChainGroupLock (lock))
        (§ try )
        (§ block
            (§ return (.. keyChainGroup (getKeyCrypter)))
        )
        (§ finally )
        (§ block
            (.. keyChainGroupLock (unlock))
        )
    )

    ;;;
     ; Get the type of encryption used for this wallet.
     ;
     ; (This is a convenience method - the encryption type is actually stored in the keyCrypter).
     ;;
    #_public
    (§ method #_"EncryptionType" (§ fn getEncryptionType) [])
    (§ block
        (.. keyChainGroupLock (lock))
        (§ try )
        (§ block
            (§ var #_"KeyCrypter" (§ name crypter) (.. keyChainGroup (getKeyCrypter)))
            (§ return (if (some? crypter) (.. crypter (getUnderstoodEncryptionType)) EncryptionType/UNENCRYPTED))
        )
        (§ finally )
        (§ block
            (.. keyChainGroupLock (unlock))
        )
    )

    ;;; Returns true if the wallet is encrypted using any scheme, false if not. ;;
    #_public
    (§ method #_"boolean" (§ fn isEncrypted) [])
    (§ block
        (!= (getEncryptionType) EncryptionType/UNENCRYPTED)
    )

    ;;; Changes wallet encryption password, this is atomic operation. ;;
    #_public
    (§ method #_"void" (§ fn changeEncryptionPassword) [#_"CharSequence" (§ name currentPassword), #_"CharSequence" (§ name newPassword)])
    (§ block
        (.. keyChainGroupLock (lock))
        (§ try )
        (§ block
            (decrypt currentPassword)
            (encrypt newPassword)
        )
        (§ finally )
        (§ block
            (.. keyChainGroupLock (unlock))
        )
        nil
    )

    ;;; Changes wallet AES encryption key, this is atomic operation. ;;
    #_public
    (§ method #_"void" (§ fn changeEncryptionKey) [#_"KeyCrypter" (§ name keyCrypter), #_"KeyParameter" (§ name currentAesKey), #_"KeyParameter" (§ name newAesKey)])
    (§ block
        (.. keyChainGroupLock (lock))
        (§ try )
        (§ block
            (decrypt currentAesKey)
            (encrypt keyCrypter, newAesKey)
        )
        (§ finally )
        (§ block
            (.. keyChainGroupLock (unlock))
        )
        nil
    )

    ;; TODO: Make this package private once the classes finish moving around.
    ;;; Internal use only. ;;
    #_public
    (§ method #_"List<Protos.Key>" (§ fn serializeKeyChainGroupToProtobuf) [])
    (§ block
        (.. keyChainGroupLock (lock))
        (§ try )
        (§ block
            (§ return (.. keyChainGroup (serializeToProtobuf)))
        )
        (§ finally )
        (§ block
            (.. keyChainGroupLock (unlock))
        )
    )

    ;;; Saves the wallet first to the given temp file, then renames to the dest file. ;;
    #_public
    (§ method #_"void" (§ fn saveToFile) [#_"File" (§ name temp), #_"File" (§ name destFile)])
        (§ throws #_"IOException")
    (§ block
        (§ var #_"FileOutputStream" (§ name stream) nil)
        (.. lock (lock))
        (§ try )
        (§ block
            (§ ass (§ name stream) (§ new #_"FileOutputStream" temp))
            (saveToFileStream stream)
            ;; Attempt to force the bits to hit the disk.  In reality the OS or hard disk itself may still decide
            ;; to not write through to physical media for at least a few seconds, but this is the best we can do.
            (.. stream (flush))
            (.. stream (getFD) (sync))
            (.. stream (close))
            (§ ass (§ name stream) nil)
            (§ if (Utils/isWindows))
            (§ block
                ;; Work around an issue on Windows whereby you can't rename over existing files.
                (§ var #_"File" (§ name canonical) (.. destFile (getCanonicalFile)))
                (§ if (§ expr (.. canonical (exists)) && (§ not (.. canonical (delete)))))
                (§ block
                    (§ throw (§ new #_"IOException" "Failed to delete canonical wallet file for replacement with autosave"))
                )
                (§ if (.. temp (renameTo canonical)))
                (§ block
                    (§ return nil) ;; else fall through
                )
                (§ throw (§ new #_"IOException" (§ expr "Failed to rename " + temp + " to " + canonical)))
            )
            (§ elseif (§ not (.. temp (renameTo destFile))))
            (§ block
                (§ throw (§ new #_"IOException" (§ expr "Failed to rename " + temp + " to " + destFile)))
            )
        )
        (§ catch #_"RuntimeException" (§ name e))
        (§ block
            (.. log (error "Failed whilst saving wallet", e))
            (§ throw e)
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
            (§ if (some? stream))
            (§ block
                (.. stream (close))
            )
            (§ if (.. temp (exists)))
            (§ block
                (.. log (warn "Temp file still exists after failed save."))
            )
        )
        nil
    )

    ;;;
     ; Uses protobuf serialization to save the wallet to the given file.  To learn more about this file format, see
     ; {@link WalletProtobufSerializer}.  Writes out first to a temporary file in the same directory and then renames
     ; once written.
     ;;
    #_public
    (§ method #_"void" (§ fn saveToFile) [#_"File" (§ name f)])
        (§ throws #_"IOException")
    (§ block
        (§ var #_"File" (§ name directory) (.. f (getAbsoluteFile) (getParentFile)))
        (§ var #_"File" (§ name temp) (File/createTempFile "wallet", nil, directory))
        (saveToFile temp, f)
        nil
    )

    ;;;
     ; <p>Whether or not the wallet will ignore pending transactions that fail the selected {@link RiskAnalysis}.
     ; By default, if a transaction is considered risky then it won't enter the wallet and won't trigger any event
     ; listeners.  If you set this property to true, then all transactions will be allowed in regardless of risk.
     ; For example, the {@link DefaultRiskAnalysis} checks for non-finality of transactions.</p>
     ;
     ; <p>Note that this property is not serialized.  You have to set it each time a Wallet object is constructed,
     ; even if it's loaded from a protocol buffer.</p>
     ;;
    #_public
    (§ method #_"void" (§ fn setAcceptRiskyTransactions) [#_"boolean" (§ name acceptRiskyTransactions)])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ ass (§ name (.. this acceptRiskyTransactions)) acceptRiskyTransactions)
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
        nil
    )

    ;;;
     ; See {@link Wallet#setAcceptRiskyTransactions(boolean)} for an explanation of this property.
     ;;
    #_public
    (§ method #_"boolean" (§ fn isAcceptRiskyTransactions) [])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ return acceptRiskyTransactions)
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    ;;;
     ; Sets the {@link RiskAnalysis} implementation to use for deciding whether received pending transactions are
     ; risky or not.  If the analyzer says a transaction is risky, by default it will be dropped. You can customize
     ; this behaviour with {@link #setAcceptRiskyTransactions(boolean)}.
     ;;
    #_public
    (§ method #_"void" (§ fn setRiskAnalyzer) [#_"RiskAnalysis.Analyzer" (§ name analyzer)])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ ass (§ name (.. this riskAnalyzer)) (Preconditions/checkNotNull analyzer))
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
        nil
    )

    ;;;
     ; Gets the current {@link RiskAnalysis} implementation.  The default is {@link DefaultRiskAnalysis}.
     ;;
    #_public
    (§ method #_"RiskAnalysis.Analyzer" (§ fn getRiskAnalyzer) [])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ return riskAnalyzer)
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    ;;;
     ; <p>Sets up the wallet to auto-save itself to the given file, using temp files with atomic renames to ensure
     ; consistency.  After connecting to a file, you no longer need to save the wallet manually, it will do it
     ; whenever necessary.  Protocol buffer serialization will be used.</p>
     ;
     ; <p>If delayTime is set, a background thread will be created and the wallet will only be saved to disk
     ; every so many time units.  If no changes have occurred for the given time period, nothing will be written.
     ; In this way disk IO can be rate limited.  It's a good idea to set this as otherwise the wallet can change very
     ; frequently, e.g. if there are a lot of transactions in it or during block sync, and there will be a lot of redundant
     ; writes.  Note that when a new key is added, that always results in an immediate save regardless of delayTime.
     ; <b>You should still save the wallet manually when your program is about to shut down as the JVM will not
     ; wait for the background thread.</b></p>
     ;
     ; <p>An event listener can be provided.  If a delay >0 was specified, it will be called on a background thread
     ; with the wallet locked when an auto-save occurs.  If delay is zero or you do something that always triggers
     ; an immediate save, like adding a key, the event listener will be invoked on the calling threads.</p>
     ;
     ; @param f The destination file to save to.
     ; @param delayTime How many time units to wait until saving the wallet on a background thread.
     ; @param timeUnit The unit of measurement for delayTime.
     ; @param eventListener Callback to be informed when the auto-save thread does things, or null.
     ;;
    #_public
    (§ method #_"WalletFiles" (§ fn autosaveToFile) [#_"File" (§ name f), #_"long" (§ name delayTime), #_"TimeUnit" (§ name timeUnit), #_nilable #_"WalletFiles.Listener" (§ name eventListener)])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (Preconditions/checkState (nil? vFileManager), "Already auto saving this wallet.")
            (§ var #_"WalletFiles" (§ name manager) (§ new #_"WalletFiles" this, f, delayTime, timeUnit))
            (§ if (some? eventListener))
            (§ block
                (.. manager (setListener eventListener))
            )
            (§ ass (§ name vFileManager) manager)
            (§ return manager)
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    ;;;
     ; Disables auto-saving, after it had been enabled with
     ; {@link Wallet#autosaveToFile(java.io.File, long, java.util.concurrent.TimeUnit, org.bitcoinj.wallet.WalletFiles.Listener)}
     ; before.  This method blocks until finished.
     ;;
    #_public
    (§ method #_"void" (§ fn shutdownAutosaveAndWait) [])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ var #_"WalletFiles" (§ name files) vFileManager)
            (§ ass (§ name vFileManager) nil)
            (Preconditions/checkState (some? files), "Auto saving not enabled.")
            (.. files (shutdownAndWait))
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
        nil
    )

    ;;; Requests an asynchronous save on a background thread. ;;
    #_protected
    (§ method #_"void" (§ fn saveLater) [])
    (§ block
        (§ var #_"WalletFiles" (§ name files) vFileManager)
        (§ if (some? files))
        (§ block
            (.. files (saveLater))
        )
        nil
    )

    ;;; If auto saving is enabled, do an immediate sync write to disk ignoring any delays. ;;
    #_protected
    (§ method #_"void" (§ fn saveNow) [])
    (§ block
        (§ var #_"WalletFiles" (§ name files) vFileManager)
        (§ if (some? files))
        (§ block
            (§ try )
            (§ block
                (.. files (saveNow)) ;; This calls back into saveToFile().
            )
            (§ catch #_"IOException" (§ name e))
            (§ block
                ;; Can't really do much at this point, just let the API user know.
                (.. log (error "Failed to save wallet to disk!", e))
                (§ var #_"Thread.UncaughtExceptionHandler" (§ name handler) Threading/uncaughtExceptionHandler)
                (§ if (some? handler))
                (§ block
                    (.. handler (uncaughtException (Thread/currentThread), e))
                )
            )
        )
        nil
    )

    ;;;
     ; Uses protobuf serialization to save the wallet to the given file stream.
     ; To learn more about this file format, see {@link WalletProtobufSerializer}.
     ;;
    #_public
    (§ method #_"void" (§ fn saveToFileStream) [#_"OutputStream" (§ name f)])
        (§ throws #_"IOException")
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (.. (§ new #_"WalletProtobufSerializer") (writeWallet this, f))
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
        nil
    )

    ;;; Returns the parameters this wallet was created with. ;;
    #_public
    (§ method #_"NetworkParameters" (§ fn getParams) [])
    (§ block
        params
    )

    ;;; Returns the API context that this wallet was created with. ;;
    #_public
    (§ method #_"Context" (§ fn getContext) [])
    (§ block
        context
    )

    ;;;
     ; Returns a wallet deserialized from the given file.
     ;
     ; @param file The wallet file to be read.
     ;;
    #_public
    #_static
    (§ defn #_"Wallet" (§ fn loadFromFile) [#_"File" (§ name file)])
        (§ throws #_"UnreadableWalletException")
    (§ block
        (§ try )
        (§ block
            (§ var #_"FileInputStream" (§ name stream) nil)
            (§ try )
            (§ block
                (§ ass (§ name stream) (§ new #_"FileInputStream" file))
                (§ return (loadFromFileStream stream))
            )
            (§ finally )
            (§ block
                (§ if (some? stream))
                (§ block
                    (.. stream (close))
                )
            )
        )
        (§ catch #_"IOException" (§ name e))
        (§ block
            (§ throw (§ new #_"UnreadableWalletException" "Could not open file", e))
        )
    )

    ;;;
     ; Returns if this wallet is structurally consistent, so e.g. no duplicate transactions.
     ; First inconsistency and a dump of the wallet will be logged.
     ;;
    #_public
    (§ method #_"boolean" (§ fn isConsistent) [])
    (§ block
        (§ try )
        (§ block
            (isConsistentOrThrow)
            (§ return true)
        )
        (§ catch #_"IllegalStateException" (§ name e1))
        (§ block
            (.. log (error (.. e1 (getMessage))))
            (§ try )
            (§ block
                (.. log (error (toString)))
            )
            (§ catch #_"RuntimeException" (§ name e2))
            (§ block
                (.. log (error "Printing inconsistent wallet failed", e2))
            )
            (§ return false)
        )
    )

    ;;;
     ; Variant of {@link Wallet#isConsistent()} that throws an {@link IllegalStateException} describing
     ; the first inconsistency.
     ;;
    #_public
    (§ method #_"void" (§ fn isConsistentOrThrow) [])
        (§ throws #_"IllegalStateException")
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ var #_"Set<Transaction>" (§ name transactions) (getTransactions true))

            (§ var #_"Set<Sha256Hash>" (§ name hashes) (§ new #_"HashSet<>"))
            (§ for (§ var #_"Transaction" (§ name tx)) :for transactions)
            (§ block
                (.. hashes (add (.. tx (getHash))))
            )

            (§ var #_"int" (§ name size1) (.. transactions (size)))
            (§ if (§ expr size1 != (.. hashes (size))))
            (§ block
                (§ throw (§ new #_"IllegalStateException" "Two transactions with same hash"))
            )

            (§ var #_"int" (§ name size2) (+ (.. unspent (size)) (.. spent (size)) (.. pending (size)) (.. dead (size))))
            (§ if (§ expr size1 != size2))
            (§ block
                (§ throw (§ new #_"IllegalStateException" (§ str "Inconsistent wallet sizes: " + size1 + ", " + size2)))
            )

            (§ for (§ var #_"Transaction" (§ name tx)) :for (.. unspent (values)))
            (§ block
                (§ if (§ not (isTxConsistent tx, false)))
                (§ block
                    (§ throw (§ new #_"IllegalStateException" (§ str "Inconsistent unspent tx: " + (.. tx (getHashAsString)))))
                )
            )

            (§ for (§ var #_"Transaction" (§ name tx)) :for (.. spent (values)))
            (§ block
                (§ if (§ not (isTxConsistent tx, true)))
                (§ block
                    (§ throw (§ new #_"IllegalStateException" (§ str "Inconsistent spent tx: " + (.. tx (getHashAsString)))))
                )
            )
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
        nil
    )

    ;; If isSpent, check that all my outputs spent, otherwise check that there at least one unspent.
    #_testing
    (§ method #_"boolean" (§ fn isTxConsistent) [#_"Transaction" (§ name tx), #_"boolean" (§ name isSpent)])
    (§ block
        (§ var #_"boolean" (§ name isActuallySpent) true)
        (§ for (§ var #_"TransactionOutput" (§ name o)) :for (.. tx (getOutputs)))
        (§ block
            (§ if (.. o (isAvailableForSpending)))
            (§ block
                (§ if (.. o (isMine this)))
                (§ block
                    (§ ass (§ name isActuallySpent) false)
                )
                (§ if (!= (.. o (getSpentBy)) nil))
                (§ block
                    (.. log (error "isAvailableForSpending != spentBy"))
                    (§ return false)
                )
            )
            (§ else )
            (§ block
                (§ if (== (.. o (getSpentBy)) nil))
                (§ block
                    (.. log (error "isAvailableForSpending != spentBy"))
                    (§ return false)
                )
            )
        )
        (§ expr isActuallySpent == isSpent)
    )

    ;;; Returns a wallet deserialized from the given input stream. ;;
    #_public
    #_static
    (§ defn #_"Wallet" (§ fn loadFromFileStream) [#_"InputStream" (§ name stream)])
        (§ throws #_"UnreadableWalletException")
    (§ block
        (§ var #_"Wallet" (§ name wallet) (.. (§ new #_"WalletProtobufSerializer") (readWallet stream)))
        (§ if (§ not (.. wallet (isConsistent))))
        (§ block
            (.. log (error "Loaded an inconsistent wallet"))
        )
        wallet
    )

    ;;;
     ; Called by the {@link BlockChain} when we receive a new filtered block that contains a transactions previously
     ; received by a call to {@link #receivePending}.
     ;
     ; This is necessary for the internal book-keeping Wallet does.  When a transaction is received that sends us
     ; coins it is added to a pool so we can use it later to create spends.  When a transaction is received that
     ; consumes outputs they are marked as spent so they won't be used in future.
     ;
     ; A transaction that spends our own coins can be received either because a spend we created was accepted by
     ; the network and thus made it into a block, or because our keys are being shared between multiple instances
     ; and some other node spent the coins instead.  We still have to know about that to avoid accidentally trying
     ; to double spend.
     ;
     ; A transaction may be received multiple times if is included into blocks in parallel chains.  The blockType
     ; parameter describes whether the containing block is on the main/best chain or whether it's on a presently
     ; inactive side chain.  We must still record these transactions and the blocks they appear in because a future
     ; block might change which chain is best causing a reorganize.  A re-org can totally change our balance!
     ;;
    #_override
    #_public
    (§ method #_"boolean" (§ fn notifyTransactionIsInBlock) [#_"Sha256Hash" (§ name txHash), #_"StoredBlock" (§ name block), #_"BlockChain.NewBlockType" (§ name blockType), #_"int" (§ name relativityOffset)])
        (§ throws #_"VerificationException")
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ var #_"Transaction" (§ name tx) (.. transactions (get txHash)))
            (§ if (nil? tx))
            (§ block
                (§ ass (§ name tx) (.. riskDropped (get txHash)))
                (§ if (some? tx))
                (§ block
                    ;; If this happens our risk analysis is probably wrong and should be improved.
                    (.. log (info "Risk analysis dropped tx {} but was included in block anyway", (.. tx (getHash))))
                )
                (§ else )
                (§ block
                    ;; False positive that was broadcast to us and ignored by us because it was irrelevant to our keys.
                    (§ return false)
                )
            )
            (receive tx, block, blockType, relativityOffset)
            (§ return true)
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    ;;;
     ; <p>Called when we have found a transaction (via network broadcast or otherwise) that is relevant to this wallet
     ; and want to record it.  Note that we <b>cannot verify these transactions at all</b>, they may spend fictional
     ; coins or be otherwise invalid.  They are useful to inform the user about coins they can expect to receive soon,
     ; and if you trust the sender of the transaction you can choose to assume they are in fact valid and will not
     ; be double spent as an optimization.</p>
     ;
     ; <p>This is the same as {@link Wallet#receivePending(Transaction, java.util.List)} but allows you to override the
     ; {@link Wallet#isPendingTransactionRelevant(Transaction)} sanity-check to keep track of transactions that are not
     ; spendable or spend our coins.  This can be useful when you want to keep track of transaction confidence on
     ; arbitrary transactions.  Note that transactions added in this way will still be relayed to peers and appear in
     ; transaction lists like any other pending transaction (even when not relevant).</p>
     ;;
    #_public
    (§ method #_"void" (§ fn receivePending) [#_"Transaction" (§ name tx), #_nilable #_"List<Transaction>" (§ name dependencies), #_"boolean" (§ name overrideIsRelevant)])
        (§ throws #_"VerificationException")
    (§ block
        ;; Can run in a peer thread.  This method will only be called if a prior call to isPendingTransactionRelevant
        ;; returned true, so we already know by this point that it sends coins to or from our wallet, or is a double
        ;; spend against one of our other pending transactions.
        (.. lock (lock))
        (§ try )
        (§ block
            (.. tx (verify))
            ;; Ignore it if we already know about this transaction.  Receiving a pending transaction never moves it
            ;; between pools.
            (§ var #_"EnumSet<Pool>" (§ name containingPools) (getContainingPools tx))
            (§ if (§ not (.. containingPools (equals (EnumSet/noneOf (§ klass #_"Pool"))))))
            (§ block
                (.. log (debug (§ expr "Received tx we already saw in a block or created ourselves: " + (.. tx (getHashAsString)))))
                (§ return nil)
            )
            ;; Repeat the check of relevancy here, even though the caller may have already done so - this is to avoid
            ;; race conditions where receivePending may be being called in parallel.
            (§ if (§ expr (§ not overrideIsRelevant) && (§ not (isPendingTransactionRelevant tx))))
            (§ block
                (§ return nil)
            )

            (§ if (§ expr (isTransactionRisky tx, dependencies) && (§ not acceptRiskyTransactions)))
            (§ block
                ;; isTransactionRisky already logged the reason.
                (.. riskDropped (put (.. tx (getHash)), tx))
                (.. log (warn "There are now {} risk dropped transactions being kept in memory", (.. riskDropped (size))))
                (§ return nil)
            )

            (§ var #_"Coin" (§ name valueSentToMe) (.. tx (getValueSentToMe this)))
            (§ var #_"Coin" (§ name valueSentFromMe) (.. tx (getValueSentFromMe this)))
            (§ if (.. log (isInfoEnabled)))
            (§ block
                (.. log (info (String/format Locale/US, "Received a pending transaction %s that spends %s from our own wallet, and sends us %s", (.. tx (getHashAsString)), (.. valueSentFromMe (toFriendlyString)), (.. valueSentToMe (toFriendlyString)))))
            )
            (§ if (.. tx (getConfidence) (getSource) (equals TransactionConfidence/Source/UNKNOWN)))
            (§ block
                (.. log (warn "Wallet received transaction with an unknown source. Consider tagging it!"))
            )
            ;; If this tx spends any of our unspent outputs, mark them as spent now, then add to the pending pool.  This
            ;; ensures that if some other client that has our keys broadcasts a spend we stay in sync.  Also updates the
            ;; timestamp on the transaction and registers/runs event listeners.
            (commitTx tx)
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
        ;; maybeRotateKeys() will ignore pending transactions, so we don't bother calling it here (see the comments
        ;; in that function for an explanation of why).
        nil
    )

    ;;;
     ; Given a transaction and an optional list of dependencies (recursive/flattened), returns true if the given
     ; transaction would be rejected by the analyzer, or false otherwise.  The result of this call is independent
     ; of the value of {@link #isAcceptRiskyTransactions()}.  Risky transactions yield a logged warning.  If you
     ; want to know the reason why a transaction is risky, create an instance of the {@link RiskAnalysis} yourself
     ; using the factory returned by {@link #getRiskAnalyzer()} and use it directly.
     ;;
    #_public
    (§ method #_"boolean" (§ fn isTransactionRisky) [#_"Transaction" (§ name tx), #_nilable #_"List<Transaction>" (§ name dependencies)])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ if (nil? dependencies))
            (§ block
                (§ ass (§ name dependencies) (ImmutableList/of))
            )
            (§ var #_"RiskAnalysis" (§ name analysis) (.. riskAnalyzer (create this, tx, dependencies)))
            (§ var #_"RiskAnalysis.Result" (§ name result) (.. analysis (analyze)))
            (§ if (§ expr result != RiskAnalysis/Result/OK))
            (§ block
                (.. log (warn "Pending transaction was considered risky: {}\n{}", analysis, tx))
                (§ return true)
            )
            (§ return false)
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    ;;;
     ; <p>Called when we have found a transaction (via network broadcast or otherwise) that is relevant to this wallet
     ; and want to record it.  Note that we <b>cannot verify these transactions at all</b>, they may spend fictional
     ; coins or be otherwise invalid.  They are useful to inform the user about coins they can expect to receive soon,
     ; and if you trust the sender of the transaction you can choose to assume they are in fact valid and will not
     ; be double spent as an optimization.</p>
     ;
     ; <p>Before this method is called, {@link Wallet#isPendingTransactionRelevant(Transaction)} should have been
     ; called to decide whether the wallet cares about the transaction - if it does, then this method expects the
     ; transaction and any dependencies it has which are still in the memory pool.</p>
     ;;
    #_public
    (§ method #_"void" (§ fn receivePending) [#_"Transaction" (§ name tx), #_nilable #_"List<Transaction>" (§ name dependencies)])
        (§ throws #_"VerificationException")
    (§ block
        (receivePending tx, dependencies, false)
        nil
    )

    ;;;
     ; This method is used by a {@link Peer} to find out if a transaction that has been announced is interesting,
     ; that is, whether we should bother downloading its dependencies and exploring the transaction to decide how
     ; risky it is.  If this method returns true then {@link Wallet#receivePending(Transaction, java.util.List)}
     ; will soon be called with the transactions dependencies as well.
     ;;
    #_public
    (§ method #_"boolean" (§ fn isPendingTransactionRelevant) [#_"Transaction" (§ name tx)])
        (§ throws #_"ScriptException")
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            ;; Ignore it if we already know about this transaction.  Receiving a pending transaction never moves it
            ;; between pools.
            (§ var #_"EnumSet<Pool>" (§ name containingPools) (getContainingPools tx))
            (§ if (§ not (.. containingPools (equals (EnumSet/noneOf (§ klass #_"Pool"))))))
            (§ block
                (.. log (debug (§ expr "Received tx we already saw in a block or created ourselves: " + (.. tx (getHashAsString)))))
                (§ return false)
            )

            ;; We only care about transactions that:
            ;;   - Send us coins.
            ;;   - Spend our coins.
            ;;   - Double spend a tx in our wallet.
            (§ if (§ not (isTransactionRelevant tx)))
            (§ block
                (.. log (debug "Received tx that isn't relevant to this wallet, discarding."))
                (§ return false)
            )
            (§ return true)
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    ;;;
     ; <p>Returns true if the given transaction sends coins to any of our keys, or has inputs spending any of our outputs,
     ; and also returns true if tx has inputs that are spending outputs which are
     ; not ours but which are spent by pending transactions.</p>
     ;
     ; <p>Note that if the tx has inputs containing one of our keys, but the connected transaction is not in the wallet,
     ; it will not be considered relevant.</p>
     ;;
    #_public
    (§ method #_"boolean" (§ fn isTransactionRelevant) [#_"Transaction" (§ name tx)])
        (§ throws #_"ScriptException")
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ return (§ expr 0 < (.. tx (getValueSentFromMe this) (signum)) || 0 < (.. tx (getValueSentToMe this) (signum)) || (§ not (.. (findDoubleSpendsAgainst tx, transactions) (isEmpty)))))
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    ;;;
     ; Finds transactions in the specified candidates that double spend "tx".  Not a general check, but it can work even
     ; if the double spent inputs are not ours.
     ; @return the set of transactions that double spend "tx".
     ;;
    #_private
    (§ method- #_"Set<Transaction>" (§ fn findDoubleSpendsAgainst) [#_"Transaction" (§ name tx), #_"Map<Sha256Hash, Transaction>" (§ name candidates)])
    (§ block
        (Preconditions/checkState (.. lock (isHeldByCurrentThread)))
        (§ if (.. tx (isCoinBase)))
        (§ block
            (§ return (Sets/newHashSet))
        )

        ;; Compile a set of outpoints that are spent by tx.
        (§ var #_"HashSet<TransactionOutPoint>" (§ name outpoints) (§ new #_"HashSet<>"))
        (§ for (§ var #_"TransactionInput" (§ name input)) :for (.. tx (getInputs)))
        (§ block
            (.. outpoints (add (.. input (getOutpoint))))
        )

        ;; Now for each pending transaction, see if it shares any outpoints with this tx.
        (§ var #_"Set<Transaction>" (§ name doubleSpendTxns) (Sets/newHashSet))
        (§ for (§ var #_"Transaction" (§ name p)) :for (.. candidates (values)))
        (§ block
            (§ if (.. p (equals tx)))
            (§ block
                (§ continue )
            )

            (§ for (§ var #_"TransactionInput" (§ name input)) :for (.. p (getInputs)))
            (§ block
                ;; This relies on the fact that TransactionOutPoint equality is defined at the protocol not object
                ;; level - outpoints from two different inputs that point to the same output compare the same.
                (§ var #_"TransactionOutPoint" (§ name outpoint) (.. input (getOutpoint)))
                ;; If does, it's a double spend against the candidates, which makes it relevant.
                (§ if (.. outpoints (contains outpoint)))
                (§ block
                    (.. doubleSpendTxns (add p))
                )
            )
        )
        doubleSpendTxns
    )

    ;;;
     ; Adds to txSet all the txns in txPool spending outputs of txns in txSet,
     ; and all txns spending the outputs of those txns, recursively.
     ;;
    (§ method #_"void" (§ fn addTransactionsDependingOn) [#_"Set<Transaction>" (§ name txSet), #_"Set<Transaction>" (§ name txPool)])
    (§ block
        (§ var #_"Map<Sha256Hash, Transaction>" (§ name txQueue) (§ new #_"LinkedHashMap<>"))
        (§ for (§ var #_"Transaction" (§ name tx)) :for txSet)
        (§ block
            (.. txQueue (put (.. tx (getHash)), tx))
        )

        (§ while (§ not (.. txQueue (isEmpty))))
        (§ block
            (§ var #_"Transaction" (§ name tx) (.. txQueue (remove (.. txQueue (keySet) (iterator) (next)))))
            (§ for (§ var #_"Transaction" (§ name anotherTx)) :for txPool)
            (§ block
                (§ if (.. anotherTx (equals tx)))
                (§ block
                    (§ continue )
                )

                (§ for (§ var #_"TransactionInput" (§ name input)) :for (.. anotherTx (getInputs)))
                (§ block
                    (§ if (.. input (getOutpoint) (getHash) (equals (.. tx (getHash)))))
                    (§ block
                        (§ if (== (.. txQueue (get (.. anotherTx (getHash)))) nil))
                        (§ block
                            (.. txQueue (put (.. anotherTx (getHash)), anotherTx))
                            (.. txSet (add anotherTx))
                        )
                    )
                )
            )
        )
        nil
    )

    ;;;
     ; Called by the {@link BlockChain} when we receive a new block that sends coins to one of our addresses or
     ; spends coins from one of our addresses (note that a single transaction can do both).
     ;
     ; This is necessary for the internal book-keeping Wallet does.  When a transaction is received that sends us
     ; coins it is added to a pool so we can use it later to create spends.  When a transaction is received that
     ; consumes outputs they are marked as spent so they won't be used in future.
     ;
     ; A transaction that spends our own coins can be received either because a spend we created was accepted by
     ; the network and thus made it into a block, or because our keys are being shared between multiple instances
     ; and some other node spent the coins instead.  We still have to know about that to avoid accidentally trying
     ; to double spend.
     ;
     ; A transaction may be received multiple times if is included into blocks in parallel chains.  The blockType
     ; parameter describes whether the containing block is on the main/best chain or whether it's on a presently
     ; inactive side chain.  We must still record these transactions and the blocks they appear in because a future
     ; block might change which chain is best causing a reorganize.  A re-org can totally change our balance!
     ;;
    #_override
    #_public
    (§ method #_"void" (§ fn receiveFromBlock) [#_"Transaction" (§ name tx), #_"StoredBlock" (§ name block), #_"BlockChain.NewBlockType" (§ name blockType), #_"int" (§ name relativityOffset)])
        (§ throws #_"VerificationException")
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ if (isTransactionRelevant tx))
            (§ block
                (receive tx, block, blockType, relativityOffset)
            )
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
        nil
    )

    ;; Whether to do a saveNow or saveLater when we are notified of the next best block.
    #_private
    (§ field- #_"boolean" (§ name hardSaveOnNextBlock) false)

    #_private
    (§ method- #_"void" (§ fn receive) [#_"Transaction" (§ name tx), #_"StoredBlock" (§ name block), #_"BlockChain.NewBlockType" (§ name blockType), #_"int" (§ name relativityOffset)])
        (§ throws #_"VerificationException")
    (§ block
        ;; Runs in a peer thread.
        (Preconditions/checkState (.. lock (isHeldByCurrentThread)))

        (§ var #_"Coin" (§ name prevBalance) (getBalance))
        (§ var #_"Sha256Hash" (§ name txHash) (.. tx (getHash)))
        (§ var #_"boolean" (§ name bestChain) (§ expr blockType == BlockChain/NewBlockType/BEST_CHAIN))
        (§ var #_"boolean" (§ name sideChain) (§ expr blockType == BlockChain/NewBlockType/SIDE_CHAIN))

        (§ var #_"Coin" (§ name valueSentFromMe) (.. tx (getValueSentFromMe this)))
        (§ var #_"Coin" (§ name valueSentToMe) (.. tx (getValueSentToMe this)))
        (§ var #_"Coin" (§ name valueDifference) (.. valueSentToMe (subtract valueSentFromMe)))

        (.. log (info "Received tx{} for {}: {} [{}] in block {}", (if sideChain " on a side chain" ""), (.. valueDifference (toFriendlyString)), (.. tx (getHashAsString)), relativityOffset, (if (some? block) (.. block (getHeader) (getHash)) "(unit test)")))

        ;; Inform the key chains that the issued keys were observed in a transaction, so they know to
        ;; calculate more keys for the next Bloom filters.
        (markKeysAsUsed tx)

        (§ ass (§ name onWalletChangedSuppressions) (+ onWalletChangedSuppressions 1))

        ;; If this transaction is already in the wallet, we may need to move it into a different pool.
        ;; At the very least we need to ensure we're manipulating the canonical object rather than a duplicate.
        (§ block
            (§ var #_"Transaction" (§ name tmp) (.. transactions (get (.. tx (getHash)))))
            (§ if (some? tmp))
            (§ block
                (§ ass (§ name tx) tmp)
            )
        )

        (§ var #_"boolean" (§ name wasPending) (!= (.. pending (remove txHash)) nil))
        (§ if wasPending)
        (§ block
            (.. log (info "  <-pending"))
        )

        (§ if bestChain)
        (§ block
            (§ var #_"boolean" (§ name wasDead) (!= (.. dead (remove txHash)) nil))
            (§ if wasDead)
            (§ block
                (.. log (info "  <-dead"))
            )
            (§ if wasPending)
            (§ block
                ;; Was pending and is now confirmed.  Disconnect the outputs in case we spent any already:
                ;; they will be re-connected by processTxFromBestChain below.
                (§ for (§ var #_"TransactionOutput" (§ name output)) :for (.. tx (getOutputs)))
                (§ block
                    (§ var #_"TransactionInput" (§ name spentBy) (.. output (getSpentBy)))
                    (§ if (some? spentBy))
                    (§ block
                        (Preconditions/checkState (.. myUnspents (add output)))
                        (.. spentBy (disconnect))
                    )
                )
            )
            (processTxFromBestChain tx, (§ expr wasPending || wasDead))
        )
        (§ else )
        (§ block
            (Preconditions/checkState sideChain)
            ;; Transactions that appear in a side chain will have that appearance recorded below - we assume
            ;; that some miners are also trying to include the transaction into the current best chain too,
            ;; so let's treat it as pending, except we don't need to do any risk analysis on it.
            (§ if wasPending)
            (§ block
                ;; Just put it back in without touching the connections or confidence.
                (addWalletTransaction Pool/PENDING, tx)
                (.. log (info "  ->pending"))
            )
            (§ else )
            (§ block
                ;; Ignore the case where a tx appears on a side chain at the same time as the best chain
                ;; (this is quite normal and expected).
                (§ var #_"Sha256Hash" (§ name hash) (.. tx (getHash)))
                (§ if (§ expr (§ not (.. unspent (containsKey hash))) && (§ not (.. spent (containsKey hash))) && (§ not (.. dead (containsKey hash)))))
                (§ block
                    ;; Otherwise put it (possibly back) into pending.
                    ;; Committing it updates the spent flags and inserts into the pool as well.
                    (commitTx tx)
                )
            )
        )

        (§ if (some? block))
        (§ block
            ;; Mark the tx as appearing in this block so we can find it later after a re-org.  This also tells
            ;; the tx confidence object about the block and sets its depth appropriately.
            (.. tx (setBlockAppearance block, bestChain, relativityOffset))
            (§ if bestChain)
            (§ block
                ;; Don't notify this tx of work done in notifyNewBestBlock which will be called immediately
                ;; after this method has been called by BlockChain for all relevant transactions.  Otherwise
                ;; we'd double count.
                (.. ignoreNextNewBlock (add txHash))

                ;; When a tx is received from the best chain, if other txns that spend this tx are IN_CONFLICT,
                ;; change its confidence to PENDING (Unless they are also spending other txns IN_CONFLICT).
                ;; Consider dependency chains.
                (§ var #_"Set<Transaction>" (§ name currentTxDependencies) (Sets/newHashSet tx))
                (addTransactionsDependingOn currentTxDependencies, (getTransactions true))
                (.. currentTxDependencies (remove tx))
                (§ var #_"List<Transaction>" (§ name currentTxDependenciesSorted) (sortTxnsByDependency currentTxDependencies))
                (§ for (§ var #_"Transaction" (§ name txDependency)) :for currentTxDependenciesSorted)
                (§ block
                    (§ if (.. txDependency (getConfidence) (getConfidenceType) (equals ConfidenceType/IN_CONFLICT)))
                    (§ block
                        (§ if (isNotSpendingTxnsInConfidenceType txDependency, ConfidenceType/IN_CONFLICT))
                        (§ block
                            (.. txDependency (getConfidence) (setConfidenceType ConfidenceType/PENDING))
                            (.. confidenceChanged (put txDependency, TransactionConfidence/Listener/ChangeReason/TYPE))
                        )
                    )
                )
            )
        )

        (§ ass (§ name onWalletChangedSuppressions) (- onWalletChangedSuppressions 1))

        ;; Side chains don't affect confidence.
        (§ if bestChain)
        (§ block
            ;; notifyNewBestBlock will be invoked next and will then call maybeQueueOnWalletChanged for us.
            (.. confidenceChanged (put tx, TransactionConfidence/Listener/ChangeReason/TYPE))
        )
        (§ else )
        (§ block
            (maybeQueueOnWalletChanged)
        )

        ;; Inform anyone interested that we have received or sent coins but only if:
        ;;  - This is not due to a re-org.
        ;;  - The coins appeared on the best chain.
        ;;  - We did in fact receive some new money.
        ;;  - We have not already informed the user about the coins when we received the tx broadcast,
        ;;    or for our own spends.  If users want to know when a broadcast tx becomes confirmed,
        ;;    they need to use tx confidence listeners.
        (§ if (§ expr (§ not insideReorg) && bestChain))
        (§ block
            (§ var #_"Coin" (§ name newBalance) (getBalance)) ;; This is slow.
            (.. log (info (§ expr "Balance is now: " + (.. newBalance (toFriendlyString)))))
            (§ if (§ not wasPending))
            (§ block
                (§ var #_"int" (§ name diff) (.. valueDifference (signum)))
                ;; We pick one callback based on the value difference, though a tx can of course both
                ;; send and receive coins from the wallet.
                (§ if (< 0 diff))
                (§ block
                    (queueOnCoinsReceived tx, prevBalance, newBalance)
                )
                (§ elseif (< diff 0))
                (§ block
                    (queueOnCoinsSent tx, prevBalance, newBalance)
                )
            )
            (checkBalanceFuturesLocked newBalance)
        )

        (informConfidenceListenersIfNotReorganizing)
        (isConsistentOrThrow)
        ;; Optimization for the case where a block has tons of relevant transactions.
        (saveLater)
        (§ ass (§ name hardSaveOnNextBlock) true)
        nil
    )

    ;;; Finds if tx is NOT spending other txns which are in the specified confidence type. ;;
    #_private
    (§ method- #_"boolean" (§ fn isNotSpendingTxnsInConfidenceType) [#_"Transaction" (§ name tx), #_"ConfidenceType" (§ name confidenceType)])
    (§ block
        (§ for (§ var #_"TransactionInput" (§ name txInput)) :for (.. tx (getInputs)))
        (§ block
            (§ var #_"Transaction" (§ name connectedTx) (.. this (getTransaction (.. txInput (getOutpoint) (getHash)))))
            (§ if (§ expr connectedTx != nil && (.. connectedTx (getConfidence) (getConfidenceType) (equals confidenceType))))
            (§ block
                (§ return false)
            )
        )
        true
    )

    ;;;
     ; Creates and returns a new List with the same txns as inputSet, but txns are sorted by depencency
     ; (a topological sort).  If tx B spends tx A, then tx A should be before tx B on the returned List.
     ; Several invocations to this method with the same inputSet could result in lists with txns in different
     ; order, as there is no guarantee on the order of the returned txns besides what was already stated.
     ;;
    (§ method #_"List<Transaction>" (§ fn sortTxnsByDependency) [#_"Set<Transaction>" (§ name inputSet)])
    (§ block
        (§ var #_"ArrayList<Transaction>" (§ name result) (§ new #_"ArrayList<>" inputSet))
        (§ for (§ var #_"int" (§ name i) 0) :for (§ expr i < (.. result (size)) - 1) :for (§ ass (§ name i) (+ i 1)))
        (§ block
            (§ var #_"boolean" (§ name txAtISpendsOtherTxInTheList))
            (§ do )
            (§ block
                (§ ass (§ name txAtISpendsOtherTxInTheList) false)
                (§ for (§ var #_"int" (§ name j) (+ i 1)) :for (§ expr j < (.. result (size))) :for (§ ass (§ name j) (+ j 1)))
                (§ block
                    (§ if (spends (.. result (get i)), (.. result (get j))))
                    (§ block
                        (§ var #_"Transaction" (§ name transactionAtI) (.. result (remove i)))
                        (.. result (add j, transactionAtI))
                        (§ ass (§ name txAtISpendsOtherTxInTheList) true)
                        (§ break )
                    )
                )
            )
            (§ again txAtISpendsOtherTxInTheList)
        )
        result
    )

    ;;; Finds whether txA spends txB. ;;
    (§ method #_"boolean" (§ fn spends) [#_"Transaction" (§ name txA), #_"Transaction" (§ name txB)])
    (§ block
        (§ for (§ var #_"TransactionInput" (§ name txInput)) :for (.. txA (getInputs)))
        (§ block
            (§ if (.. txInput (getOutpoint) (getHash) (equals (.. txB (getHash)))))
            (§ block
                (§ return true)
            )
        )

        false
    )

    #_private
    (§ method- #_"void" (§ fn informConfidenceListenersIfNotReorganizing) [])
    (§ block
        (§ if insideReorg)
        (§ block
            (§ return nil)
        )

        (§ for (§ var #_"Map.Entry<Transaction, TransactionConfidence.Listener.ChangeReason>" (§ name entry)) :for (.. confidenceChanged (entrySet)))
        (§ block
            (§ var #_"Transaction" (§ name tx) (.. entry (getKey)))
            (.. tx (getConfidence) (queueListeners (.. entry (getValue))))
            (queueOnTransactionConfidenceChanged tx)
        )
        (.. confidenceChanged (clear))
        nil
    )

    ;;;
     ; Called by the {@link BlockChain} when a new block on the best chain is seen, AFTER relevant wallet
     ; transactions are extracted and sent to us UNLESS the new block caused a re-org, in which case this will
     ; not be called (the {@link Wallet#reorganize(StoredBlock, java.util.List, java.util.List)} method will
     ; call this one in that case).
     ;
     ; Used to update confidence data in each transaction and last seen block hash.  Triggers auto saving.
     ; Invokes the onWalletChanged event listener if there were any affected transactions.
     ;;
    #_override
    #_public
    (§ method #_"void" (§ fn notifyNewBestBlock) [#_"StoredBlock" (§ name block)])
        (§ throws #_"VerificationException")
    (§ block
        ;; Check to see if this block has been seen before.
        (§ var #_"Sha256Hash" (§ name newBlockHash) (.. block (getHeader) (getHash)))
        (§ if (.. newBlockHash (equals (getLastBlockSeenHash))))
        (§ block
            (§ return nil)
        )

        (.. lock (lock))
        (§ try )
        (§ block
            ;; Store the new block hash.
            (setLastBlockSeenHash newBlockHash)
            (setLastBlockSeenHeight (.. block (getHeight)))
            (setLastBlockSeenTimeSecs (.. block (getHeader) (getTimeSeconds)))
            ;; Notify all the BUILDING transactions of the new block.
            ;; This is so that they can update their depth.
            (§ var #_"Set<Transaction>" (§ name transactions) (getTransactions true))
            (§ for (§ var #_"Transaction" (§ name tx)) :for transactions)
            (§ block
                (§ if (.. ignoreNextNewBlock (contains (.. tx (getHash)))))
                (§ block
                    ;; tx was already processed in receive() due to it appearing in this block, so we don't want
                    ;; to increment the tx confidence depth twice, it'd result in miscounting.
                    (.. ignoreNextNewBlock (remove (.. tx (getHash))))
                )
                (§ else )
                (§ block
                    (§ var #_"TransactionConfidence" (§ name confidence) (.. tx (getConfidence)))
                    (§ if (== (.. confidence (getConfidenceType)) ConfidenceType/BUILDING))
                    (§ block
                        ;; Erase the set of seen peers once the tx is so deep that it seems unlikely to ever go
                        ;; pending again.  We could clear this data the moment a tx is seen in the block chain,
                        ;; but in cases where the chain re-orgs, this would mean that wallets would perceive a
                        ;; newly pending tx has zero confidence at all, which would not be right: we expect it to
                        ;; be included once again.  We could have a separate was-in-chain-and-now-isn't confidence
                        ;; type, but this way is backwards compatible with existing software, and the new state
                        ;; probably wouldn't mean anything different to just remembering peers anyway.
                        (§ if (< (.. context (getEventHorizon)) (.. confidence (incrementDepthInBlocks))))
                        (§ block
                            (.. confidence (clearBroadcastBy))
                        )
                        (.. confidenceChanged (put tx, TransactionConfidence/Listener/ChangeReason/DEPTH))
                    )
                )
            )

            (informConfidenceListenersIfNotReorganizing)
            (maybeQueueOnWalletChanged)

            (§ if hardSaveOnNextBlock)
            (§ block
                (saveNow)
                (§ ass (§ name hardSaveOnNextBlock) false)
            )
            (§ else )
            (§ block
                ;; Coalesce writes to avoid throttling on disk access when catching up with the chain.
                (saveLater)
            )
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
        nil
    )

    ;;;
     ; Handle when a transaction becomes newly active on the best chain, either due to receiving a new block or a
     ; re-org.  Places the tx into the right pool, handles coinbase transactions, handles double-spends and so on.
     ;;
    #_private
    (§ method- #_"void" (§ fn processTxFromBestChain) [#_"Transaction" (§ name tx), #_"boolean" (§ name forceAddToPool)])
        (§ throws #_"VerificationException")
    (§ block
        (Preconditions/checkState (.. lock (isHeldByCurrentThread)))
        (Preconditions/checkState (§ not (.. pending (containsKey (.. tx (getHash))))))

        ;; This TX may spend our existing outputs even though it was not pending.  This can happen in unit tests,
        ;; if keys are moved between wallets, if we're catching up to the chain given only a set of keys,
        ;; or if a dead coinbase transaction has moved back onto the main chain.
        (§ var #_"boolean" (§ name isDeadCoinbase) (§ expr (.. tx (isCoinBase)) && (.. dead (containsKey (.. tx (getHash))))))
        (§ if isDeadCoinbase)
        (§ block
            ;; There is a dead coinbase tx being received on the best chain.  A coinbase tx is made dead when it moves
            ;; to a side chain but it can be switched back on a reorg and resurrected back to spent or unspent.
            ;; So take it out of the dead pool.  Note that we don't resurrect dependent transactions here, even though
            ;; we could.  Bitcoin Core nodes on the network have deleted the dependent transactions from their mempools
            ;; entirely by this point.  We could and maybe should rebroadcast them so the network remembers and tries
            ;; to confirm them again.  But this is a deeply unusual edge case that due to the maturity rule should never
            ;; happen in practice, thus for simplicities sake we ignore it here.
            (.. log (info "  coinbase tx <-dead: confidence {}", (.. tx (getHashAsString)), (.. tx (getConfidence) (getConfidenceType) (name))))
            (.. dead (remove (.. tx (getHash))))
        )

        ;; Update tx and other unspent/pending transactions by connecting inputs/outputs.
        (updateForSpends tx, true)

        ;; Now make sure it ends up in the right pool.  Also, handle the case where this TX is double-spending
        ;; against our pending transactions.  Note that a tx may double spend our pending transactions and also
        ;; send us money/spend our money.
        (§ var #_"boolean" (§ name hasOutputsToMe) (§ expr 0 < (.. tx (getValueSentToMe this) (signum))))
        (§ var #_"boolean" (§ name hasOutputsFromMe) false)
        (§ if hasOutputsToMe)
        (§ block
            ;; Needs to go into either unspent or spent (if the outputs were already spent by a pending tx).
            (§ if (.. tx (isEveryOwnedOutputSpent this)))
            (§ block
                (.. log (info "  tx {} ->spent (by pending)", (.. tx (getHashAsString))))
                (addWalletTransaction Pool/SPENT, tx)
            )
            (§ else )
            (§ block
                (.. log (info "  tx {} ->unspent", (.. tx (getHashAsString))))
                (addWalletTransaction Pool/UNSPENT, tx)
            )
        )
        (§ elseif (§ expr 0 < (.. tx (getValueSentFromMe this) (signum))))
        (§ block
            (§ ass (§ name hasOutputsFromMe) true)
            ;; Didn't send us any money, but did spend some.  Keep it around for record keeping purposes.
            (.. log (info "  tx {} ->spent", (.. tx (getHashAsString))))
            (addWalletTransaction Pool/SPENT, tx)
        )
        (§ elseif forceAddToPool)
        (§ block
            ;; Was manually added to pending, so we should keep it to notify the user of confidence information.
            (.. log (info "  tx {} ->spent (manually added)", (.. tx (getHashAsString))))
            (addWalletTransaction Pool/SPENT, tx)
        )

        ;; Kill txns in conflict with this tx.
        (§ var #_"Set<Transaction>" (§ name doubleSpendTxns) (findDoubleSpendsAgainst tx, pending))
        (§ if (§ not (.. doubleSpendTxns (isEmpty))))
        (§ block
            ;; No need to addTransactionsDependingOn(doubleSpendTxns), because killTxns() already kills dependencies.
            (killTxns doubleSpendTxns, tx)
        )
        (§ if (§ expr (§ not hasOutputsToMe) && (§ not hasOutputsFromMe) && (§ not forceAddToPool) && (§ not (.. (findDoubleSpendsAgainst tx, transactions) (isEmpty)))))
        (§ block
            ;; Disconnect irrelevant inputs (otherwise might cause protobuf serialization issue).
            (§ for (§ var #_"TransactionInput" (§ name input)) :for (.. tx (getInputs)))
            (§ block
                (§ var #_"TransactionOutput" (§ name output) (.. input (getConnectedOutput)))
                (§ if (§ expr output != nil && (§ not (.. output (isMine this)))))
                (§ block
                    (.. input (disconnect))
                )
            )
        )
        nil
    )

    ;;;
     ; <p>Updates the wallet by checking if this TX spends any of our outputs, and marking them as spent if so.
     ; If fromChain is true, also checks to see if any pending transaction spends outputs of this transaction and marks
     ; the spent flags appropriately.</p>
     ;
     ; <p>It can be called in two contexts.  One is when we receive a transaction on the best chain but it wasn't pending,
     ; this most commonly happens when we have a set of keys but the wallet transactions were wiped and we are catching
     ; up with the block chain.  It can also happen if a block includes a transaction we never saw at broadcast time.
     ; If this tx double spends, it takes precedence over our pending transactions and the pending tx goes dead.</p>
     ;
     ; <p>The other context it can be called is from {@link Wallet#receivePending(Transaction, java.util.List)},
     ; i.e. we saw a tx be broadcast or one was submitted directly that spends our own coins.  If this tx double spends,
     ; it does NOT take precedence because the winner will be resolved by the miners - we assume that our version will
     ; win, if we are wrong then when a block appears the tx will go dead.</p>
     ;
     ; @param tx The transaction which is being updated.
     ; @param fromChain If true, the tx appeared on the current best chain, if false it was pending.
     ;;
    #_private
    (§ method- #_"void" (§ fn updateForSpends) [#_"Transaction" (§ name tx), #_"boolean" (§ name fromChain)])
        (§ throws #_"VerificationException")
    (§ block
        (Preconditions/checkState (.. lock (isHeldByCurrentThread)))
        (§ if fromChain)
        (§ block
            (Preconditions/checkState (§ not (.. pending (containsKey (.. tx (getHash))))))
        )

        (§ for (§ var #_"TransactionInput" (§ name input)) :for (.. tx (getInputs)))
        (§ block
            (§ var #_"TransactionInput.ConnectionResult" (§ name result) (.. input (connect unspent, TransactionInput/ConnectMode/ABORT_ON_CONFLICT)))
            (§ if (§ expr result == TransactionInput/ConnectionResult/NO_SUCH_TX))
            (§ block
                ;; Not found in the unspent map.  Try again with the spent map.
                (§ ass (§ name result) (.. input (connect spent, TransactionInput/ConnectMode/ABORT_ON_CONFLICT)))
                (§ if (§ expr result == TransactionInput/ConnectionResult/NO_SUCH_TX))
                (§ block
                    ;; Not found in the unspent and spent maps.  Try again with the pending map.
                    (§ ass (§ name result) (.. input (connect pending, TransactionInput/ConnectMode/ABORT_ON_CONFLICT)))
                    (§ if (§ expr result == TransactionInput/ConnectionResult/NO_SUCH_TX))
                    (§ block
                        ;; Doesn't spend any of our outputs or is coinbase.
                        (§ continue )
                    )
                )
            )

            (§ var #_"TransactionOutput" (§ name output) (Preconditions/checkNotNull (.. input (getConnectedOutput))))
            (§ if (§ expr result == TransactionInput/ConnectionResult/ALREADY_SPENT))
            (§ block
                (§ if fromChain)
                (§ block
                    ;; Can be:
                    ;; (1) We already marked this output as spent when we saw the pending transaction (most likely).
                    ;;     Now it's being confirmed of course, we cannot mark it as spent again.
                    ;; (2) A double spend from chain: this will be handled later by findDoubleSpendsAgainst()/killTxns().
                    ;;
                    ;; In any case, nothing to do here.
                )
                (§ else )
                (§ block
                    ;; We saw two pending transactions that double spend each other.  We don't know which will win.
                    ;; This can happen in the case of bad network nodes that mutate transactions.  Do a hex dump
                    ;; so the exact nature of the mutation can be examined.
                    (.. log (warn "Saw two pending transactions double spend each other"))
                    (.. log (warn "  offending input is input {}", (.. tx (getInputs) (indexOf input))))
                    (.. log (warn "{}: {}", (.. tx (getHash)), (.. Utils/HEX (encode (.. tx (unsafeBitcoinSerialize))))))
                    (§ var #_"Transaction" (§ name other) (.. output (getSpentBy) (getParentTransaction)))
                    (.. log (warn "{}: {}", (.. other (getHash)), (.. Utils/HEX (encode (.. other (unsafeBitcoinSerialize))))))
                )
            )
            (§ elseif (§ expr result == TransactionInput/ConnectionResult/SUCCESS))
            (§ block
                ;; Otherwise we saw a transaction spend our coins, but we didn't try and spend them ourselves yet.
                ;; The outputs are already marked as spent by the connect call above, so check if there are any more for
                ;; us to use.  Move if not.
                (§ var #_"Transaction" (§ name connected) (Preconditions/checkNotNull (.. input (getConnectedTransaction))))
                (.. log (info "  marked {} as spent by {}", (.. input (getOutpoint)), (.. tx (getHashAsString))))
                (maybeMovePool connected, "prevtx")
                ;; Just because it's connected, doesn't mean it's actually ours: sometimes we have total visibility.
                (§ if (.. output (isMine this)))
                (§ block
                    (Preconditions/checkState (.. myUnspents (remove output)))
                )
            )
        )

        ;; Now check each output and see if there is a pending transaction which spends it.  This shouldn't normally
        ;; ever occur because we expect transactions to arrive in temporal order, but this assumption can be violated
        ;; when we receive a pending transaction from the mempool that is relevant to us, which spends coins that we
        ;; didn't see arrive on the best chain yet.  For instance, because of a chain replay or because of our keys were
        ;; used by another wallet somewhere else.  Also, unconfirmed transactions can arrive from the mempool in more
        ;; or less random order.
        (§ for (§ var #_"Transaction" (§ name pendingTx)) :for (.. pending (values)))
        (§ block
            (§ for (§ var #_"TransactionInput" (§ name input)) :for (.. pendingTx (getInputs)))
            (§ block
                (§ var #_"TransactionInput.ConnectionResult" (§ name result) (.. input (connect tx, TransactionInput/ConnectMode/ABORT_ON_CONFLICT)))
                (§ if fromChain)
                (§ block
                    ;; This TX is supposed to have just appeared on the best chain, so its outputs should not be marked
                    ;; as spent yet.  If they are, it means something is happening out of order.
                    (Preconditions/checkState (§ expr result != TransactionInput/ConnectionResult/ALREADY_SPENT))
                )
                (§ if (§ expr result == TransactionInput/ConnectionResult/SUCCESS))
                (§ block
                    (.. log (info "Connected pending tx input {}:{}", (.. pendingTx (getHashAsString)), (.. pendingTx (getInputs) (indexOf input))))
                    ;; The unspents map might not have it if we never saw this tx until it was included in the chain
                    ;; and thus becomes spent the moment we become aware of it.
                    (§ if (.. myUnspents (remove (.. input (getConnectedOutput)))))
                    (§ block
                        (.. log (info "Removed from UNSPENTS: {}", (.. input (getConnectedOutput))))
                    )
                )
            )
        )
        (§ if (§ not fromChain))
        (§ block
            (maybeMovePool tx, "pendingtx")
        )
        (§ else )
        (§ block
            ;; If the transactions outputs are now all spent, it will be moved into the spent pool by the
            ;; processTxFromBestChain method.
        )
        nil
    )

    ;; Updates the wallet when a double spend occurs.  overridingTx can be null for the case of coinbases.
    #_private
    (§ method- #_"void" (§ fn killTxns) [#_"Set<Transaction>" (§ name txnsToKill), #_nilable #_"Transaction" (§ name overridingTx)])
    (§ block
        (§ var #_"LinkedList<Transaction>" (§ name work) (§ new #_"LinkedList<>" txnsToKill))
        (§ while (§ not (.. work (isEmpty))))
        (§ block
            (§ var #_"Transaction" (§ name tx) (.. work (poll)))
            (.. log (warn "TX {} killed{}", (.. tx (getHashAsString)), (if (some? overridingTx) (§ str " by " + (.. overridingTx (getHashAsString))) "")))
            (.. log (warn "Disconnecting each input and moving connected transactions."))
            ;; TX could be pending (finney attack), or in unspent/spent (coinbase killed by reorg).
            (.. pending (remove (.. tx (getHash))))
            (.. unspent (remove (.. tx (getHash))))
            (.. spent (remove (.. tx (getHash))))
            (addWalletTransaction Pool/DEAD, tx)
            (§ for (§ var #_"TransactionInput" (§ name deadInput)) :for (.. tx (getInputs)))
            (§ block
                (§ var #_"Transaction" (§ name connected) (.. deadInput (getConnectedTransaction)))
                (§ if (nil? connected))
                (§ block
                    (§ continue )
                )
                (§ if (§ expr (.. connected (getConfidence) (getConfidenceType)) != ConfidenceType/DEAD && (.. deadInput (getConnectedOutput) (getSpentBy)) != nil && (.. deadInput (getConnectedOutput) (getSpentBy) (equals deadInput))))
                (§ block
                    (Preconditions/checkState (.. myUnspents (add (.. deadInput (getConnectedOutput)))))
                    (.. log (info "Added to UNSPENTS: {} in {}", (.. deadInput (getConnectedOutput)), (.. deadInput (getConnectedOutput) (getParentTransaction) (getHash))))
                )
                (.. deadInput (disconnect))
                (maybeMovePool connected, "kill")
            )
            (.. tx (getConfidence) (setOverridingTransaction overridingTx))
            (.. confidenceChanged (put tx, TransactionConfidence/Listener/ChangeReason/TYPE))
            ;; Now kill any transactions we have that depended on this one.
            (§ for (§ var #_"TransactionOutput" (§ name deadOutput)) :for (.. tx (getOutputs)))
            (§ block
                (§ if (.. myUnspents (remove deadOutput)))
                (§ block
                    (.. log (info "XX Removed from UNSPENTS: {}", deadOutput))
                )
                (§ var #_"TransactionInput" (§ name connected) (.. deadOutput (getSpentBy)))
                (§ if (nil? connected))
                (§ block
                    (§ continue )
                )
                (§ var #_"Transaction" (§ name parentTransaction) (.. connected (getParentTransaction)))
                (.. log (info "This death invalidated dependent tx {}", (.. parentTransaction (getHash))))
                (.. work (push parentTransaction))
            )
        )
        (§ if (nil? overridingTx))
        (§ block
            (§ return nil)
        )

        (.. log (warn "Now attempting to connect the inputs of the overriding transaction."))
        (§ for (§ var #_"TransactionInput" (§ name input)) :for (.. overridingTx (getInputs)))
        (§ block
            (§ var #_"TransactionInput.ConnectionResult" (§ name result) (.. input (connect unspent, TransactionInput/ConnectMode/DISCONNECT_ON_CONFLICT)))
            (§ if (§ expr result == TransactionInput/ConnectionResult/SUCCESS))
            (§ block
                (maybeMovePool (.. input (getConnectedTransaction)), "kill")
                (.. myUnspents (remove (.. input (getConnectedOutput))))
                (.. log (info "Removing from UNSPENTS: {}", (.. input (getConnectedOutput))))
            )
            (§ else )
            (§ block
                (§ ass (§ name result) (.. input (connect spent, TransactionInput/ConnectMode/DISCONNECT_ON_CONFLICT)))
                (§ if (§ expr result == TransactionInput/ConnectionResult/SUCCESS))
                (§ block
                    (maybeMovePool (.. input (getConnectedTransaction)), "kill")
                    (.. myUnspents (remove (.. input (getConnectedOutput))))
                    (.. log (info "Removing from UNSPENTS: {}", (.. input (getConnectedOutput))))
                )
            )
        )
        nil
    )

    ;;;
     ; If the transactions outputs are all marked as spent, and it's in the unspent map, move it.
     ; If the owned transactions outputs are not all marked as spent, and it's in the spent map, move it.
     ;;
    #_private
    (§ method- #_"void" (§ fn maybeMovePool) [#_"Transaction" (§ name tx), #_"String" (§ name context)])
    (§ block
        (Preconditions/checkState (.. lock (isHeldByCurrentThread)))

        (§ if (.. tx (isEveryOwnedOutputSpent this)))
        (§ block
            ;; There's nothing left I can spend in this transaction.
            (§ if (!= (.. unspent (remove (.. tx (getHash)))) nil))
            (§ block
                (§ if (.. log (isInfoEnabled)))
                (§ block
                    (.. log (info "  {} {} <-unspent ->spent", (.. tx (getHashAsString)), context))
                )
                (.. spent (put (.. tx (getHash)), tx))
            )
        )
        (§ else )
        (§ block
            (§ if (!= (.. spent (remove (.. tx (getHash)))) nil))
            (§ block
                (§ if (.. log (isInfoEnabled)))
                (§ block
                    (.. log (info "  {} {} <-spent ->unspent", (.. tx (getHashAsString)), context))
                )
                (.. unspent (put (.. tx (getHash)), tx))
            )
        )
        nil
    )

    ;;;
     ; Calls {@link Wallet#commitTx} if tx is not already in the pending pool.
     ;
     ; @return true if the tx was added to the wallet, or false if it was already in the pending pool.
     ;;
    #_public
    (§ method #_"boolean" (§ fn maybeCommitTx) [#_"Transaction" (§ name tx)])
        (§ throws #_"VerificationException")
    (§ block
        (.. tx (verify))
        (.. lock (lock))
        (§ try )
        (§ block
            (§ if (.. pending (containsKey (.. tx (getHash)))))
            (§ block
                (§ return false)
            )

            (.. log (info "commitTx of {}", (.. tx (getHashAsString))))
            (§ var #_"Coin" (§ name balance) (getBalance))
            (.. tx (setUpdateTime (Utils/now)))
            ;; Put any outputs that are sending money back to us into the unspents map, and calculate their total value.
            (§ var #_"Coin" (§ name valueSentToMe) Coin/ZERO)
            (§ for (§ var #_"TransactionOutput" (§ name o)) :for (.. tx (getOutputs)))
            (§ block
                (§ if (.. o (isMine this)))
                (§ block
                    (§ ass (§ name valueSentToMe) (.. valueSentToMe (add (.. o (getValue)))))
                )
            )
            ;; Mark the outputs we're spending as spent so we won't try and use them in future creations.  This will also
            ;; move any transactions that are now fully spent to the spent map so we can skip them when creating future
            ;; spends.
            (updateForSpends tx, false)

            (§ var #_"Set<Transaction>" (§ name doubleSpendPendingTxns) (findDoubleSpendsAgainst tx, pending))
            (§ var #_"Set<Transaction>" (§ name doubleSpendUnspentTxns) (findDoubleSpendsAgainst tx, unspent))
            (§ var #_"Set<Transaction>" (§ name doubleSpendSpentTxns) (findDoubleSpendsAgainst tx, spent))

            (§ if (§ expr (§ not (.. doubleSpendUnspentTxns (isEmpty))) || (§ not (.. doubleSpendSpentTxns (isEmpty))) || (§ not (isNotSpendingTxnsInConfidenceType tx, ConfidenceType/DEAD))))
            (§ block
                ;; tx is a double spend against a tx already in the best chain or spends outputs of a DEAD tx.
                ;; Add tx to the dead pool and schedule confidence listener notifications.
                (.. log (info "->dead: {}", (.. tx (getHashAsString))))
                (.. tx (getConfidence) (setConfidenceType ConfidenceType/DEAD))
                (.. confidenceChanged (put tx, TransactionConfidence/Listener/ChangeReason/TYPE))
                (addWalletTransaction Pool/DEAD, tx)
            )
            (§ elseif (§ expr (§ not (.. doubleSpendPendingTxns (isEmpty))) || (§ not (isNotSpendingTxnsInConfidenceType tx, ConfidenceType/IN_CONFLICT))))
            (§ block
                ;; tx is a double spend against a pending tx or spends outputs of a tx already IN_CONFLICT.
                ;; Add tx to the pending pool.  Update the confidence type of tx, the txns in conflict with tx
                ;; and all their dependencies to IN_CONFLICT and schedule confidence listener notifications.
                (.. log (info "->pending (IN_CONFLICT): {}", (.. tx (getHashAsString))))
                (addWalletTransaction Pool/PENDING, tx)
                (.. doubleSpendPendingTxns (add tx))
                (addTransactionsDependingOn doubleSpendPendingTxns, (getTransactions true))
                (§ for (§ var #_"Transaction" (§ name doubleSpendTx)) :for doubleSpendPendingTxns)
                (§ block
                    (.. doubleSpendTx (getConfidence) (setConfidenceType ConfidenceType/IN_CONFLICT))
                    (.. confidenceChanged (put doubleSpendTx, TransactionConfidence/Listener/ChangeReason/TYPE))
                )
            )
            (§ else )
            (§ block
                ;; No conflict detected.
                ;; Add to the pending pool and schedule confidence listener notifications.
                (.. log (info "->pending: {}", (.. tx (getHashAsString))))
                (.. tx (getConfidence) (setConfidenceType ConfidenceType/PENDING))
                (.. confidenceChanged (put tx, TransactionConfidence/Listener/ChangeReason/TYPE))
                (addWalletTransaction Pool/PENDING, tx)
            )
            (§ if (.. log (isInfoEnabled)))
            (§ block
                (.. log (info "Estimated balance is now: {}", (§ expr (.. (getBalance BalanceType/ESTIMATED) (toFriendlyString)))))
            )

            ;; Mark any keys used in the outputs as "used", this allows wallet UI's to auto-advance the current key
            ;; they are showing to the user in qr codes etc.
            (markKeysAsUsed tx)
            (§ try )
            (§ block
                (§ var #_"Coin" (§ name valueSentFromMe) (.. tx (getValueSentFromMe this)))
                (§ var #_"Coin" (§ name newBalance) (.. balance (add valueSentToMe) (subtract valueSentFromMe)))
                (§ if (§ expr 0 < (.. valueSentToMe (signum))))
                (§ block
                    (checkBalanceFuturesLocked nil)
                    (queueOnCoinsReceived tx, balance, newBalance)
                )
                (§ if (§ expr 0 < (.. valueSentFromMe (signum))))
                (§ block
                    (queueOnCoinsSent tx, balance, newBalance)
                )

                (maybeQueueOnWalletChanged)
            )
            (§ catch #_"ScriptException" (§ name e))
            (§ block
                ;; Cannot happen as we just created this transaction ourselves.
                (§ throw (§ new #_"RuntimeException" e))
            )

            (isConsistentOrThrow)
            (informConfidenceListenersIfNotReorganizing)
            (saveNow)
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
        true
    )

    ;;;
     ; <p>Updates the wallet with the given transaction: puts it into the pending pool, sets the spent flags
     ; and runs the onCoinsSent/onCoinsReceived event listener.  Used in two situations:</p>
     ;
     ; <ol>
     ;     <li>When we have just successfully transmitted the tx we created to the network.</li>
     ;     <li>When we receive a pending transaction that didn't appear in the chain yet, and we did not create it.</li>
     ; </ol>
     ;
     ; <p>Triggers an auto save.</p>
     ;;
    #_public
    (§ method #_"void" (§ fn commitTx) [#_"Transaction" (§ name tx)])
        (§ throws #_"VerificationException")
    (§ block
        (Preconditions/checkArgument (maybeCommitTx tx), "commitTx called on the same transaction twice")
        nil
    )

    ;;;
     ; Adds an event listener object.  Methods on this object are called when something interesting happens,
     ; like receiving money.  Runs the listener methods in the user thread.
     ;;
    #_public
    (§ method #_"void" (§ fn addChangeEventListener) [#_"WalletChangeEventListener" (§ name listener)])
    (§ block
        (addChangeEventListener Threading/USER_THREAD, listener)
        nil
    )

    ;;;
     ; Adds an event listener object.  Methods on this object are called when something interesting happens,
     ; like receiving money.  The listener is executed by the given executor.
     ;;
    #_public
    (§ method #_"void" (§ fn addChangeEventListener) [#_"Executor" (§ name executor), #_"WalletChangeEventListener" (§ name listener)])
    (§ block
        ;; This is thread safe, so we don't need to take the lock.
        (.. changeListeners (add (§ new #_"ListenerRegistration<>" listener, executor)))
        nil
    )

    ;;;
     ; Adds an event listener object called when coins are received.
     ; Runs the listener methods in the user thread.
     ;;
    #_public
    (§ method #_"void" (§ fn addCoinsReceivedEventListener) [#_"WalletCoinsReceivedEventListener" (§ name listener)])
    (§ block
        (addCoinsReceivedEventListener Threading/USER_THREAD, listener)
        nil
    )

    ;;;
     ; Adds an event listener object called when coins are received.
     ; The listener is executed by the given executor.
     ;;
    #_public
    (§ method #_"void" (§ fn addCoinsReceivedEventListener) [#_"Executor" (§ name executor), #_"WalletCoinsReceivedEventListener" (§ name listener)])
    (§ block
        ;; This is thread safe, so we don't need to take the lock.
        (.. coinsReceivedListeners (add (§ new #_"ListenerRegistration<>" listener, executor)))
        nil
    )

    ;;;
     ; Adds an event listener object called when coins are sent.
     ; Runs the listener methods in the user thread.
     ;;
    #_public
    (§ method #_"void" (§ fn addCoinsSentEventListener) [#_"WalletCoinsSentEventListener" (§ name listener)])
    (§ block
        (addCoinsSentEventListener Threading/USER_THREAD, listener)
        nil
    )

    ;;;
     ; Adds an event listener object called when coins are sent.
     ; The listener is executed by the given executor.
     ;;
    #_public
    (§ method #_"void" (§ fn addCoinsSentEventListener) [#_"Executor" (§ name executor), #_"WalletCoinsSentEventListener" (§ name listener)])
    (§ block
        ;; This is thread safe, so we don't need to take the lock.
        (.. coinsSentListeners (add (§ new #_"ListenerRegistration<>" listener, executor)))
        nil
    )

    ;;;
     ; Adds an event listener object.  Methods on this object are called when keys are
     ; added.  The listener is executed in the user thread.
     ;;
    #_public
    (§ method #_"void" (§ fn addKeyChainEventListener) [#_"KeyChainEventListener" (§ name listener)])
    (§ block
        (.. keyChainGroup (addEventListener listener, Threading/USER_THREAD))
        nil
    )

    ;;;
     ; Adds an event listener object.  Methods on this object are called when keys are
     ; added.  The listener is executed by the given executor.
     ;;
    #_public
    (§ method #_"void" (§ fn addKeyChainEventListener) [#_"Executor" (§ name executor), #_"KeyChainEventListener" (§ name listener)])
    (§ block
        (.. keyChainGroup (addEventListener listener, executor))
        nil
    )

    ;;;
     ; Adds an event listener object.  Methods on this object are called when something interesting happens,
     ; like receiving money.  Runs the listener methods in the user thread.
     ;;
    #_public
    (§ method #_"void" (§ fn addReorganizeEventListener) [#_"WalletReorganizeEventListener" (§ name listener)])
    (§ block
        (addReorganizeEventListener Threading/USER_THREAD, listener)
        nil
    )

    ;;;
     ; Adds an event listener object.  Methods on this object are called when something interesting happens,
     ; like receiving money.  The listener is executed by the given executor.
     ;;
    #_public
    (§ method #_"void" (§ fn addReorganizeEventListener) [#_"Executor" (§ name executor), #_"WalletReorganizeEventListener" (§ name listener)])
    (§ block
        ;; This is thread safe, so we don't need to take the lock.
        (.. reorganizeListeners (add (§ new #_"ListenerRegistration<>" listener, executor)))
        nil
    )

    ;;;
     ; Adds an event listener object.  Methods on this object are called when confidence
     ; of a transaction changes.  Runs the listener methods in the user thread.
     ;;
    #_public
    (§ method #_"void" (§ fn addTransactionConfidenceEventListener) [#_"TransactionConfidenceEventListener" (§ name listener)])
    (§ block
        (addTransactionConfidenceEventListener Threading/USER_THREAD, listener)
        nil
    )

    ;;;
     ; Adds an event listener object.  Methods on this object are called when confidence
     ; of a transaction changes.  The listener is executed by the given executor.
     ;;
    #_public
    (§ method #_"void" (§ fn addTransactionConfidenceEventListener) [#_"Executor" (§ name executor), #_"TransactionConfidenceEventListener" (§ name listener)])
    (§ block
        ;; This is thread safe, so we don't need to take the lock.
        (.. transactionConfidenceListeners (add (§ new #_"ListenerRegistration<>" listener, executor)))
        nil
    )

    ;;;
     ; Removes the given event listener object.  Returns true if the listener was removed,
     ; false if that listener was never added.
     ;;
    #_public
    (§ method #_"boolean" (§ fn removeChangeEventListener) [#_"WalletChangeEventListener" (§ name listener)])
    (§ block
        (ListenerRegistration/removeFromList listener, changeListeners)
    )

    ;;;
     ; Removes the given event listener object.  Returns true if the listener was removed,
     ; false if that listener was never added.
     ;;
    #_public
    (§ method #_"boolean" (§ fn removeCoinsReceivedEventListener) [#_"WalletCoinsReceivedEventListener" (§ name listener)])
    (§ block
        (ListenerRegistration/removeFromList listener, coinsReceivedListeners)
    )

    ;;;
     ; Removes the given event listener object.  Returns true if the listener was removed,
     ; false if that listener was never added.
     ;;
    #_public
    (§ method #_"boolean" (§ fn removeCoinsSentEventListener) [#_"WalletCoinsSentEventListener" (§ name listener)])
    (§ block
        (ListenerRegistration/removeFromList listener, coinsSentListeners)
    )

    ;;;
     ; Removes the given event listener object.  Returns true if the listener was removed,
     ; false if that listener was never added.
     ;;
    #_public
    (§ method #_"boolean" (§ fn removeKeyChainEventListener) [#_"KeyChainEventListener" (§ name listener)])
    (§ block
        (.. keyChainGroup (removeEventListener listener))
    )

    ;;;
     ; Removes the given event listener object.  Returns true if the listener was removed,
     ; false if that listener was never added.
     ;;
    #_public
    (§ method #_"boolean" (§ fn removeReorganizeEventListener) [#_"WalletReorganizeEventListener" (§ name listener)])
    (§ block
        (ListenerRegistration/removeFromList listener, reorganizeListeners)
    )

    ;;;
     ; Removes the given event listener object.  Returns true if the listener was removed,
     ; false if that listener was never added.
     ;;
    #_public
    (§ method #_"boolean" (§ fn removeTransactionConfidenceEventListener) [#_"TransactionConfidenceEventListener" (§ name listener)])
    (§ block
        (ListenerRegistration/removeFromList listener, transactionConfidenceListeners)
    )

    #_private
    (§ method- #_"void" (§ fn queueOnTransactionConfidenceChanged) [#_"Transaction" (§ name tx)])
    (§ block
        (Preconditions/checkState (.. lock (isHeldByCurrentThread)))

        (§ for (§ var ListenerRegistration<TransactionConfidenceEventListener> registration) :for transactionConfidenceListeners)
        (§ block
            (§ if (== (.. registration executor) Threading/SAME_THREAD))
            (§ block
                (.. registration listener (onTransactionConfidenceChanged this, tx))
            )
            (§ else )
            (§ block
                (.. registration executor (execute (§ new #_"Runnable")
                (§ anon
                    #_override
                    #_public
                    (§ method #_"void" (§ fn run) [])
                    (§ block
                        (.. registration listener (onTransactionConfidenceChanged (§ dhis Wallet), tx))
                        nil
                    )
                )))
            )
        )
        nil
    )

    #_protected
    (§ method #_"void" (§ fn maybeQueueOnWalletChanged) [])
    (§ block
        ;; Don't invoke the callback in some circumstances, e.g. whilst we are re-organizing or fiddling
        ;; with transactions due to a new block arriving.  It will be called later instead.
        (Preconditions/checkState (.. lock (isHeldByCurrentThread)))
        (Preconditions/checkState (<= 0 onWalletChangedSuppressions))

        (§ if (< 0 onWalletChangedSuppressions))
        (§ block
            (§ return nil)
        )

        (§ for (§ var ListenerRegistration<WalletChangeEventListener> registration) :for changeListeners)
        (§ block
            (.. registration executor (execute (§ new #_"Runnable")
            (§ anon
                #_override
                #_public
                (§ method #_"void" (§ fn run) [])
                (§ block
                    (.. registration listener (onWalletChanged (§ dhis Wallet)))
                    nil
                )
            )))
        )
        nil
    )

    #_protected
    (§ method #_"void" (§ fn queueOnCoinsReceived) [#_"Transaction" (§ name tx), #_"Coin" (§ name balance), #_"Coin" (§ name newBalance)])
    (§ block
        (Preconditions/checkState (.. lock (isHeldByCurrentThread)))

        (§ for (§ var ListenerRegistration<WalletCoinsReceivedEventListener> registration) :for coinsReceivedListeners)
        (§ block
            (.. registration executor (execute (§ new #_"Runnable")
            (§ anon
                #_override
                #_public
                (§ method #_"void" (§ fn run) [])
                (§ block
                    (.. registration listener (onCoinsReceived (§ dhis Wallet), tx, balance, newBalance))
                    nil
                )
            )))
        )
        nil
    )

    #_protected
    (§ method #_"void" (§ fn queueOnCoinsSent) [#_"Transaction" (§ name tx), #_"Coin" (§ name prevBalance), #_"Coin" (§ name newBalance)])
    (§ block
        (Preconditions/checkState (.. lock (isHeldByCurrentThread)))

        (§ for (§ var ListenerRegistration<WalletCoinsSentEventListener> registration) :for coinsSentListeners)
        (§ block
            (.. registration executor (execute (§ new #_"Runnable")
            (§ anon
                #_override
                #_public
                (§ method #_"void" (§ fn run) [])
                (§ block
                    (.. registration listener (onCoinsSent (§ dhis Wallet), tx, prevBalance, newBalance))
                    nil
                )
            )))
        )
        nil
    )

    #_protected
    (§ method #_"void" (§ fn queueOnReorganize) [])
    (§ block
        (Preconditions/checkState (.. lock (isHeldByCurrentThread)))
        (Preconditions/checkState insideReorg)

        (§ for (§ var ListenerRegistration<WalletReorganizeEventListener> registration) :for reorganizeListeners)
        (§ block
            (.. registration executor (execute (§ new #_"Runnable")
            (§ anon
                #_override
                #_public
                (§ method #_"void" (§ fn run) [])
                (§ block
                    (.. registration listener (onReorganize (§ dhis Wallet)))
                    nil
                )
            )))
        )
        nil
    )

    ;;;
     ; Returns a set of all transactions in the wallet.
     ; @param includeDead If true, transactions that were overridden by a double spend are included.
     ;;
    #_public
    (§ method #_"Set<Transaction>" (§ fn getTransactions) [#_"boolean" (§ name includeDead)])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ var #_"Set<Transaction>" (§ name all) (§ new #_"HashSet<>"))
            (.. all (addAll (.. unspent (values))))
            (.. all (addAll (.. spent (values))))
            (.. all (addAll (.. pending (values))))
            (§ if includeDead)
            (§ block
                (.. all (addAll (.. dead (values))))
            )
            (§ return all)
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    ;;;
     ; Returns a set of all WalletTransactions in the wallet.
     ;;
    #_public
    (§ method #_"Iterable<WalletTransaction>" (§ fn getWalletTransactions) [])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ var #_"Set<WalletTransaction>" (§ name all) (§ new #_"HashSet<>"))
            (addWalletTransactionsToSet all, Pool/UNSPENT, (.. unspent (values)))
            (addWalletTransactionsToSet all, Pool/SPENT, (.. spent (values)))
            (addWalletTransactionsToSet all, Pool/DEAD, (.. dead (values)))
            (addWalletTransactionsToSet all, Pool/PENDING, (.. pending (values)))
            (§ return all)
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    #_private
    #_static
    (§ defn- #_"void" (§ fn addWalletTransactionsToSet) [#_"Set<WalletTransaction>" (§ name txns), #_"Pool" (§ name poolType), #_"Collection<Transaction>" (§ name pool)])
    (§ block
        (§ for (§ var #_"Transaction" (§ name tx)) :for pool)
        (§ block
            (.. txns (add (§ new #_"WalletTransaction" poolType, tx)))
        )
        nil
    )

    ;;;
     ; Adds a transaction that has been associated with a particular wallet pool.  This is intended for usage by
     ; deserialization code, such as the {@link WalletProtobufSerializer} class.  It isn't normally useful for
     ; applications.  It does not trigger auto saving.
     ;;
    #_public
    (§ method #_"void" (§ fn addWalletTransaction) [#_"WalletTransaction" (§ name wtx)])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (addWalletTransaction (.. wtx (getPool)), (.. wtx (getTransaction)))
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
        nil
    )

    ;;;
     ; Adds the given transaction to the given pools and registers a confidence change listener on it.
     ;;
    #_private
    (§ method- #_"void" (§ fn addWalletTransaction) [#_"Pool" (§ name pool), #_"Transaction" (§ name tx)])
    (§ block
        (Preconditions/checkState (.. lock (isHeldByCurrentThread)))

        (.. transactions (put (.. tx (getHash)), tx))
        (§ switch pool)
        (§ block
            (§ case UNSPENT)
            (§ block
                (Preconditions/checkState (== (.. unspent (put (.. tx (getHash)), tx)) nil))
                (§ break )
            )
            (§ case SPENT)
            (§ block
                (Preconditions/checkState (== (.. spent (put (.. tx (getHash)), tx)) nil))
                (§ break )
            )
            (§ case PENDING)
            (§ block
                (Preconditions/checkState (== (.. pending (put (.. tx (getHash)), tx)) nil))
                (§ break )
            )
            (§ case DEAD)
            (§ block
                (Preconditions/checkState (== (.. dead (put (.. tx (getHash)), tx)) nil))
                (§ break )
            )
            (§ default )
            (§ block
                (§ throw (§ new #_"RuntimeException" (§ expr "Unknown wallet transaction type " + pool)))
            )
        )

        (§ if (§ expr pool == Pool/UNSPENT || pool == Pool/PENDING))
        (§ block
            (§ for (§ var #_"TransactionOutput" (§ name output)) :for (.. tx (getOutputs)))
            (§ block
                (§ if (§ expr (.. output (isAvailableForSpending)) && (.. output (isMine this))))
                (§ block
                    (.. myUnspents (add output))
                )
            )
        )
        ;; This is safe even if the listener has been added before, as TransactionConfidence ignores duplicate
        ;; registration requests.  That makes the code in the wallet simpler.
        (.. tx (getConfidence) (addEventListener Threading/SAME_THREAD, txConfidenceListener))
        nil
    )

    ;;;
     ; Returns all non-dead, active transactions ordered by recency.
     ;;
    #_public
    (§ method #_"List<Transaction>" (§ fn getTransactionsByTime) [])
    (§ block
        (getRecentTransactions 0, false)
    )

    ;;;
     ; Returns an list of N transactions, ordered by increasing age.  Transactions on side chains are not included.
     ; Dead transactions (overridden by double spends) are optionally included.
     ;
     ; Note: the current implementation is O(num transactions in wallet).  Regardless of how many transactions are
     ; requested, the cost is always the same.  In future, requesting smaller numbers of transactions may be faster
     ; depending on how the wallet is implemented (e.g. if backed by a database).
     ;;
    #_public
    (§ method #_"List<Transaction>" (§ fn getRecentTransactions) [#_"int" (§ name numTransactions), #_"boolean" (§ name includeDead)])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (Preconditions/checkArgument (<= 0 numTransactions))

            ;; Firstly, put all transactions into an array.
            (§ var #_"int" (§ name size) (§ expr (.. unspent (size)) + (.. spent (size)) + (.. pending (size))))
            (§ if (§ expr size < numTransactions || numTransactions == 0))
            (§ block
                (§ ass (§ name numTransactions) size)
            )

            (§ var #_"ArrayList<Transaction>" (§ name all) (§ new #_"ArrayList<>" (getTransactions includeDead)))
            ;; Order by update time.
            (Collections/sort all, Transaction/SORT_TX_BY_UPDATE_TIME)
            (§ if (§ expr numTransactions == (.. all (size))))
            (§ block
                (§ return all)
            )

            (.. all (subList numTransactions, (.. all (size))) (clear))
            (§ return all)
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    ;;;
     ; Returns a transaction object given its hash, if it exists in this wallet, or null otherwise.
     ;;
    #_nilable
    #_public
    (§ method #_"Transaction" (§ fn getTransaction) [#_"Sha256Hash" (§ name hash)])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ return (.. transactions (get hash)))
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    ;;; {@inheritDoc} ;;
    #_override
    #_public
    (§ method #_"Map<Sha256Hash, Transaction>" (§ fn getTransactionPool) [#_"Pool" (§ name pool)])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ switch pool)
            (§ block
                (§ case UNSPENT)
                (§ block
                    (§ return unspent)
                )
                (§ case SPENT)
                (§ block
                    (§ return spent)
                )
                (§ case PENDING)
                (§ block
                    (§ return pending)
                )
                (§ case DEAD)
                (§ block
                    (§ return dead)
                )
                (§ default )
                (§ block
                    (§ throw (§ new #_"RuntimeException" (§ expr "Unknown wallet transaction type " + pool)))
                )
            )
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    ;;;
     ; Prepares the wallet for a blockchain replay.  Removes all transactions (as they would
     ; get in the way of the replay) and makes the wallet think it has never seen a block.
     ;;
    #_public
    (§ method #_"void" (§ fn reset) [])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (clearTransactions)
            (§ ass (§ name lastBlockSeenHash) nil)
            (§ ass (§ name lastBlockSeenHeight) -1) ;; Magic value for 'never'.
            (§ ass (§ name lastBlockSeenTimeSecs) 0)
            (saveLater)
            (maybeQueueOnWalletChanged)
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
        nil
    )

    ;;;
     ; Deletes transactions which appeared above the given block height from the wallet, but does not touch the keys.
     ; This is useful if you have some keys and wish to replay the block chain into the wallet in order to pick them up.
     ; Triggers auto saving.
     ;;
    #_public
    (§ method #_"void" (§ fn clearTransactions) [#_"int" (§ name fromHeight)])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ if (§ expr fromHeight == 0))
            (§ block
                (clearTransactions)
                (saveLater)
            )
            (§ else )
            (§ block
                (§ throw (§ new #_"UnsupportedOperationException"))
            )
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
        nil
    )

    #_private
    (§ method- #_"void" (§ fn clearTransactions) [])
    (§ block
        (.. unspent (clear))
        (.. spent (clear))
        (.. pending (clear))
        (.. dead (clear))
        (.. transactions (clear))
        (.. myUnspents (clear))
        nil
    )

    ;;;
     ; Clean up the wallet.  Currently, it only removes risky pending transaction from the wallet and only
     ; if their outputs have not been spent.
     ;;
    #_public
    (§ method #_"void" (§ fn cleanup) [])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ var #_"boolean" (§ name dirty) false)
            (§ for (§ var #_"Iterator<Transaction>" (§ name i) (.. pending (values) (iterator))) :for (.. i (hasNext)) :for (§ expr ))
            (§ block
                (§ var #_"Transaction" (§ name tx) (.. i (next)))
                (§ if (§ expr (isTransactionRisky tx, nil) && (§ not acceptRiskyTransactions)))
                (§ block
                    (.. log (debug "Found risky transaction {} in wallet during cleanup.", (.. tx (getHashAsString))))
                    (§ if (§ not (.. tx (isAnyOutputSpent))))
                    (§ block
                        ;; Sync myUnspents with the change.
                        (§ for (§ var #_"TransactionInput" (§ name input)) :for (.. tx (getInputs)))
                        (§ block
                            (§ var #_"TransactionOutput" (§ name output) (.. input (getConnectedOutput)))
                            (§ if (nil? output))
                            (§ block
                                (§ continue )
                            )
                            (§ if (.. output (isMine this)))
                            (§ block
                                (Preconditions/checkState (.. myUnspents (add output)))
                            )
                            (.. input (disconnect))
                        )
                        (§ for (§ var #_"TransactionOutput" (§ name output)) :for (.. tx (getOutputs)))
                        (§ block
                            (.. myUnspents (remove output))
                        )

                        (.. i (remove))
                        (.. transactions (remove (.. tx (getHash))))
                        (§ ass (§ name dirty) true)
                        (.. log (info "Removed transaction {} from pending pool during cleanup.", (.. tx (getHashAsString))))
                    )
                    (§ else )
                    (§ block
                        (.. log (info "Cannot remove transaction {} from pending pool during cleanup, as it's already spent partially.", (.. tx (getHashAsString))))
                    )
                )
            )
            (§ if dirty)
            (§ block
                (isConsistentOrThrow)
                (saveLater)
                (§ if (.. log (isInfoEnabled)))
                (§ block
                    (.. log (info "Estimated balance is now: {}", (§ expr (.. (getBalance BalanceType/ESTIMATED) (toFriendlyString)))))
                )
            )
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
        nil
    )

    (§ method #_"EnumSet<Pool>" (§ fn getContainingPools) [#_"Transaction" (§ name tx)])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ var #_"EnumSet<Pool>" (§ name result) (EnumSet/noneOf (§ klass #_"Pool")))
            (§ var #_"Sha256Hash" (§ name txHash) (.. tx (getHash)))
            (§ if (.. unspent (containsKey txHash)))
            (§ block
                (.. result (add Pool/UNSPENT))
            )
            (§ if (.. spent (containsKey txHash)))
            (§ block
                (.. result (add Pool/SPENT))
            )
            (§ if (.. pending (containsKey txHash)))
            (§ block
                (.. result (add Pool/PENDING))
            )
            (§ if (.. dead (containsKey txHash)))
            (§ block
                (.. result (add Pool/DEAD))
            )
            (§ return result)
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    #_testing
    #_public
    (§ method #_"int" (§ fn getPoolSize) [#_"WalletTransaction.Pool" (§ name pool)])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ switch pool)
            (§ block
                (§ case UNSPENT)
                (§ block
                    (§ return (.. unspent (size)))
                )
                (§ case SPENT)
                (§ block
                    (§ return (.. spent (size)))
                )
                (§ case PENDING)
                (§ block
                    (§ return (.. pending (size)))
                )
                (§ case DEAD)
                (§ block
                    (§ return (.. dead (size)))
                )
            )
            (§ throw (§ new #_"RuntimeException" "Unreachable"))
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    #_testing
    #_public
    (§ method #_"boolean" (§ fn poolContainsTxHash) [#_"WalletTransaction.Pool" (§ name pool), #_"Sha256Hash" (§ name txHash)])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ switch pool)
            (§ block
                (§ case UNSPENT)
                (§ block
                    (§ return (.. unspent (containsKey txHash)))
                )
                (§ case SPENT)
                (§ block
                    (§ return (.. spent (containsKey txHash)))
                )
                (§ case PENDING)
                (§ block
                    (§ return (.. pending (containsKey txHash)))
                )
                (§ case DEAD)
                (§ block
                    (§ return (.. dead (containsKey txHash)))
                )
            )
            (§ throw (§ new #_"RuntimeException" "Unreachable"))
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    ;;; Returns a copy of the internal unspent outputs list. ;;
    #_public
    (§ method #_"List<TransactionOutput>" (§ fn getUnspents) [])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ return (§ new #_"ArrayList<>" myUnspents))
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    #_override
    #_public
    (§ method #_"String" (§ fn toString) [])
    (§ block
        (toString false, true, nil)
    )

    ;;;
     ; Formats the wallet as a human readable piece of text.  Intended for debugging, the format is
     ; not meant to be stable or human readable.
     ; @param includePrivateKeys Whether raw private key data should be included.
     ; @param includeTransactions Whether to print transaction data.
     ; @param chain If set, will be used to estimate lock times for block timelocked transactions.
     ;;
    #_public
    (§ method #_"String" (§ fn toString) [#_"boolean" (§ name includePrivateKeys), #_"boolean" (§ name includeTransactions), #_nilable #_"AbstractBlockChain" (§ name chain)])
    (§ block
        (.. lock (lock))
        (.. keyChainGroupLock (lock))
        (§ try )
        (§ block
            (§ var #_"StringBuilder" (§ name sb) (§ new #_"StringBuilder"))
            (§ var #_"Coin" (§ name estimatedBalance) (getBalance BalanceType/ESTIMATED))
            (§ var #_"Coin" (§ name availableBalance) (getBalance BalanceType/AVAILABLE_SPENDABLE))
            (.. sb (append "Wallet containing ") (append (.. estimatedBalance (toFriendlyString))) (append " (spendable: ") (append (.. availableBalance (toFriendlyString))) (append ") in:\n"))
            (.. sb (append "  ") (append (.. pending (size))) (append " pending transactions\n"))
            (.. sb (append "  ") (append (.. unspent (size))) (append " unspent transactions\n"))
            (.. sb (append "  ") (append (.. spent (size))) (append " spent transactions\n"))
            (.. sb (append "  ") (append (.. dead (size))) (append " dead transactions\n"))
            (§ var #_"Date" (§ name lastBlockSeenTime) (getLastBlockSeenTime))
            (.. sb (append "Last seen best block: ") (append (getLastBlockSeenHeight)) (append " (") (append (if (some? lastBlockSeenTime) (Utils/dateTimeFormat lastBlockSeenTime) "time unknown")) (append "): ") (append (getLastBlockSeenHash)) (append "\n"))
            (§ var #_"KeyCrypter" (§ name crypter) (.. keyChainGroup (getKeyCrypter)))
            (§ if (some? crypter))
            (§ block
                (.. sb (append "Encryption: ") (append crypter) (append "\n"))
            )
            (§ if (isWatching))
            (§ block
                (.. sb (append "Wallet is watching.\n"))
            )

            ;; Do the keys.
            (.. sb (append "\nKeys:\n"))
            (.. sb (append "Earliest creation time: ") (append (Utils/dateTimeFormat (* (getEarliestKeyCreationTime) 1000))) (append "\n"))
            (§ var #_"Date" (§ name keyRotationTime) (getKeyRotationTime))
            (§ if (some? keyRotationTime))
            (§ block
                (.. sb (append "Key rotation time:      ") (append (Utils/dateTimeFormat keyRotationTime)) (append "\n"))
            )
            (.. sb (append (.. keyChainGroup (toString includePrivateKeys))))

            (§ if includeTransactions)
            (§ block
                ;; Print the transactions themselves.
                (§ if (§ expr 0 < (.. pending (size))))
                (§ block
                    (.. sb (append "\n>>> PENDING:\n"))
                    (toStringHelper sb, pending, chain, Transaction/SORT_TX_BY_UPDATE_TIME)
                )
                (§ if (§ expr 0 < (.. unspent (size))))
                (§ block
                    (.. sb (append "\n>>> UNSPENT:\n"))
                    (toStringHelper sb, unspent, chain, Transaction/SORT_TX_BY_HEIGHT)
                )
                (§ if (§ expr 0 < (.. spent (size))))
                (§ block
                    (.. sb (append "\n>>> SPENT:\n"))
                    (toStringHelper sb, spent, chain, Transaction/SORT_TX_BY_HEIGHT)
                )
                (§ if (§ expr 0 < (.. dead (size))))
                (§ block
                    (.. sb (append "\n>>> DEAD:\n"))
                    (toStringHelper sb, dead, chain, Transaction/SORT_TX_BY_UPDATE_TIME)
                )
            )
            (§ return (.. sb (toString)))
        )
        (§ finally )
        (§ block
            (.. keyChainGroupLock (unlock))
            (.. lock (unlock))
        )
    )

    #_private
    (§ method- #_"void" (§ fn toStringHelper) [#_"StringBuilder" (§ name sb), #_"Map<Sha256Hash, Transaction>" (§ name transactionMap), #_nilable #_"AbstractBlockChain" (§ name chain), #_nilable #_"Comparator<Transaction>" (§ name sortOrder)])
    (§ block
        (Preconditions/checkState (.. lock (isHeldByCurrentThread)))

        (§ var #_"Collection<Transaction>" (§ name txns))
        (§ if (some? sortOrder))
        (§ block
            (§ ass (§ name txns) (§ new #_"TreeSet<>" sortOrder))
            (.. txns (addAll (.. transactionMap (values))))
        )
        (§ else )
        (§ block
            (§ ass (§ name txns) (.. transactionMap (values)))
        )

        (§ for (§ var #_"Transaction" (§ name tx)) :for txns)
        (§ block
            (§ try )
            (§ block
                (.. sb (append (.. tx (getValue this) (toFriendlyString))))
                (.. sb (append " total value (sends "))
                (.. sb (append (.. tx (getValueSentFromMe this) (toFriendlyString))))
                (.. sb (append " and receives "))
                (.. sb (append (.. tx (getValueSentToMe this) (toFriendlyString))))
                (.. sb (append ")\n"))
            )
            (§ catch #_"ScriptException" (§ name _))
            (§ block
                ;; Ignore and don't print this line.
            )
            (§ if (.. tx (hasConfidence)))
            (§ block
                (.. sb (append "  confidence: ") (append (.. tx (getConfidence))) (append "\n"))
            )
            (.. sb (append (.. tx (toString chain))))
        )
        nil
    )

    ;;;
     ; Returns an immutable view of the transactions currently waiting for network confirmations.
     ;;
    #_public
    (§ method #_"Collection<Transaction>" (§ fn getPendingTransactions) [])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ return (Collections/unmodifiableCollection (.. pending (values))))
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    ;;;
     ; Returns the earliest creation time of keys or watched scripts in this wallet, in seconds since the epoch,
     ; i.e. the min of {@link org.bitcoinj.core.ECKey#getCreationTimeSeconds()}.  This can return zero if at least
     ; one key does not have that data (was created before key timestamping was implemented).
     ;
     ; This method is most often used in conjunction with {@link PeerGroup#setFastCatchupTimeSecs(long)} in order to
     ; optimize chain download for new users of wallet apps.  Backwards compatibility notice: if you get zero from this
     ; method, you can instead use the time of the first release of your software, as it's guaranteed no users will
     ; have wallets pre-dating this time.
     ;
     ; If there are no keys in the wallet, the current time is returned.
     ;;
    #_override
    #_public
    (§ method #_"long" (§ fn getEarliestKeyCreationTime) [])
    (§ block
        (.. keyChainGroupLock (lock))
        (§ try )
        (§ block
            (§ var #_"long" (§ name earliestTime) (.. keyChainGroup (getEarliestKeyCreationTime)))
            (§ return (if (== earliestTime Long/MAX_VALUE) (Utils/currentTimeSeconds) earliestTime))
        )
        (§ finally )
        (§ block
            (.. keyChainGroupLock (unlock))
        )
    )

    ;;; Returns the hash of the last seen best-chain block, or null if the wallet is too old to store this data. ;;
    #_nilable
    #_public
    (§ method #_"Sha256Hash" (§ fn getLastBlockSeenHash) [])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ return lastBlockSeenHash)
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    #_public
    (§ method #_"void" (§ fn setLastBlockSeenHash) [#_nilable #_"Sha256Hash" (§ name lastBlockSeenHash)])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ ass (§ name (.. this lastBlockSeenHash)) lastBlockSeenHash)
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
        nil
    )

    #_public
    (§ method #_"void" (§ fn setLastBlockSeenHeight) [#_"int" (§ name lastBlockSeenHeight)])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ ass (§ name (.. this lastBlockSeenHeight)) lastBlockSeenHeight)
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
        nil
    )

    #_public
    (§ method #_"void" (§ fn setLastBlockSeenTimeSecs) [#_"long" (§ name timeSecs)])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ ass (§ name lastBlockSeenTimeSecs) timeSecs)
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
        nil
    )

    ;;;
     ; Returns the UNIX time in seconds since the epoch extracted from the last best seen block header.  This timestamp
     ; is <b>not</b> the local time at which the block was first observed by this application but rather what the block
     ; (i.e. miner) self declares.  It is allowed to have some significant drift from the real time at which the block
     ; was found, although most miners do use accurate times.  If this wallet is old and does not have a recorded
     ; time then this method returns zero.
     ;;
    #_public
    (§ method #_"long" (§ fn getLastBlockSeenTimeSecs) [])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ return lastBlockSeenTimeSecs)
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    ;;;
     ; Returns a {@link Date} representing the time extracted from the last best seen block header.  This timestamp
     ; is <b>not</b> the local time at which the block was first observed by this application but rather what the block
     ; (i.e. miner) self declares.  It is allowed to have some significant drift from the real time at which the block
     ; was found, although most miners do use accurate times.  If this wallet is old and does not have a recorded
     ; time then this method returns null.
     ;;
    #_nilable
    #_public
    (§ method #_"Date" (§ fn getLastBlockSeenTime) [])
    (§ block
        (§ var #_"long" (§ name secs) (getLastBlockSeenTimeSecs))
        (if (== secs 0) nil (§ new #_"Date" (* secs 1000)))
    )

    ;;;
     ; Returns the height of the last seen best-chain block.  Can be 0 if a wallet is brand new or -1 if the wallet
     ; is old and doesn't have that data.
     ;;
    #_public
    (§ method #_"int" (§ fn getLastBlockSeenHeight) [])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ return lastBlockSeenHeight)
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    ;;;
     ; Get the version of the Wallet.
     ; This is an int you can use to indicate which versions of wallets your code understands,
     ; and which come from the future (and hence cannot be safely loaded).
     ;;
    #_public
    (§ method #_"int" (§ fn getVersion) [])
    (§ block
        version
    )

    ;;;
     ; Set the version number of the wallet.  See {@link Wallet#getVersion()}.
     ;;
    #_public
    (§ method #_"void" (§ fn setVersion) [#_"int" (§ name version)])
    (§ block
        (§ ass (§ name (.. this version)) version)
        nil
    )

    ;;;
     ; Set the description of the wallet.
     ; This is a Unicode encoding string typically entered by the user as descriptive text for the wallet.
     ;;
    #_public
    (§ method #_"void" (§ fn setDescription) [#_"String" (§ name description)])
    (§ block
        (§ ass (§ name (.. this description)) description)
        nil
    )

    ;;;
     ; Get the description of the wallet.  See {@link Wallet#setDescription(String)}.
     ;;
    #_public
    (§ method #_"String" (§ fn getDescription) [])
    (§ block
        description
    )

    ;;;
     ; <p>It's possible to calculate a wallets balance from multiple points of view.  This enum selects which
     ; {@link #getBalance(BalanceType)} should use.</p>
     ;
     ; <p>Consider a real-world example: you buy a snack costing $5 but you only have a $10 bill.  At the start
     ; you have $10 viewed from every possible angle.  After you order the snack you hand over your $10 bill.
     ; From the perspective of your wallet you have zero dollars (AVAILABLE).  But you know in a few seconds the
     ; shopkeeper will give you back $5 change so most people in practice would say they have $5 (ESTIMATED).</p>
     ;
     ; <p>The fact that the wallet can track transactions which are not spendable by itself ("watching wallets")
     ; adds another type of balance to the mix.  Although the wallet won't do this by default, advanced use cases
     ; that override the relevancy checks can end up with a mix of spendable and unspendable transactions.</p>
     ;;
    #_public
    (§ enum #_"BalanceType"
        ;;;
         ; Balance calculated assuming all pending transactions are in fact included into the best chain by miners.
         ; This includes the value of immature coinbase transactions.
         ;;
        (§ item ESTIMATED)

        ;;;
         ; Balance that could be safely used to create new spends, if we had all the needed private keys.  This is
         ; whatever the default coin selector would make available, which by default means transaction outputs with at
         ; least 1 confirmation and pending transactions created by our own wallet which have been propagated across
         ; the network.  Whether we <i>actually</i> have the private keys or not is irrelevant for this balance type.
         ;;
        (§ item AVAILABLE)

        ;;; Same as ESTIMATED but only for outputs we have the private keys for and can sign ourselves. ;;
        (§ item ESTIMATED_SPENDABLE)
        ;;; Same as AVAILABLE but only for outputs we have the private keys for and can sign ourselves. ;;
        (§ item AVAILABLE_SPENDABLE)
    )

    ;;;
     ; Returns the AVAILABLE balance of this wallet.
     ; See {@link BalanceType#AVAILABLE} for details on what this means.
     ;;
    #_public
    (§ method #_"Coin" (§ fn getBalance) [])
    (§ block
        (getBalance BalanceType/AVAILABLE)
    )

    ;;;
     ; Returns the balance of this wallet as calculated by the provided balanceType.
     ;;
    #_public
    (§ method #_"Coin" (§ fn getBalance) [#_"BalanceType" (§ name balanceType)])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ if (§ expr balanceType == BalanceType/AVAILABLE || balanceType == BalanceType/AVAILABLE_SPENDABLE))
            (§ block
                (§ var #_"List<TransactionOutput>" (§ name candidates) (calculateAllSpendCandidates true, (§ expr balanceType == BalanceType/AVAILABLE_SPENDABLE)))
                (§ var #_"CoinSelection" (§ name selection) (.. coinSelector (select NetworkParameters/MAX_MONEY, candidates)))
                (§ return (.. selection valueGathered))
            )
            (§ elseif (§ expr balanceType == BalanceType/ESTIMATED || balanceType == BalanceType/ESTIMATED_SPENDABLE))
            (§ block
                (§ var #_"List<TransactionOutput>" (§ name all) (calculateAllSpendCandidates false, (§ expr balanceType == BalanceType/ESTIMATED_SPENDABLE)))
                (§ var #_"Coin" (§ name value) Coin/ZERO)
                (§ for (§ var #_"TransactionOutput" (§ name out)) :for all)
                (§ block
                    (§ ass (§ name value) (.. value (add (.. out (getValue)))))
                )
                (§ return value)
            )
            (§ else )
            (§ block
                (§ throw (§ new #_"AssertionError" "Unknown balance type")) ;; Unreachable.
            )
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    ;;;
     ; Returns the balance that would be considered spendable by the given coin selector, including watched outputs
     ; (i.e. balance includes outputs we don't have the private keys for).  Just asks it to select as many coins as
     ; possible and returns the total.
     ;;
    #_public
    (§ method #_"Coin" (§ fn getBalance) [#_"CoinSelector" (§ name selector)])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (Preconditions/checkNotNull selector)

            (§ var #_"List<TransactionOutput>" (§ name candidates) (calculateAllSpendCandidates true, false))
            (§ var #_"CoinSelection" (§ name selection) (.. selector (select (.. params (getMaxMoney)), candidates)))
            (§ return (.. selection valueGathered))
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    #_private
    #_static
    (§ class #_"BalanceFutureRequest"
        #_public
        (§ field #_"SettableFuture<Coin>" (§ name future))
        #_public
        (§ field #_"Coin" (§ name value))
        #_public
        (§ field #_"BalanceType" (§ name type))
    )
    #_guarded-by(§ opt "lock")
    #_private
    (§ field- #_"List<BalanceFutureRequest>" (§ name balanceFutureRequests) (Lists/newLinkedList))

    ;;;
     ; <p>Returns a future that will complete when the balance of the given type has become equal or larger to the
     ; given value.  If the wallet already has a large enough balance the future is returned in a pre-completed state.
     ; Note that this method is not blocking, if you want to actually wait immediately, you have to call .get() on
     ; the result.</p>
     ;
     ; <p>Also note that by the time the future completes, the wallet may have changed yet again if something else
     ; is going on in parallel, so you should treat the returned balance as advisory and be prepared for sending
     ; money to fail!  Finally please be aware that any listeners on the future will run either on the calling thread
     ; if it completes immediately, or eventually on a background thread if the balance is not yet at the right
     ; level.  If you do something that means you know the balance should be sufficient to trigger the future,
     ; you can use {@link org.bitcoinj.utils.Threading#waitForUserCode()} to block until the future had a
     ; chance to be updated.</p>
     ;;
    #_public
    (§ method #_"ListenableFuture<Coin>" (§ fn getBalanceFuture) [#_"Coin" (§ name value), #_"BalanceType" (§ name type)])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ var #_"SettableFuture<Coin>" (§ name future) (SettableFuture/create))
            (§ var #_"Coin" (§ name current) (getBalance type))
            (§ if (§ expr 0 <= (.. current (compareTo value))))
            (§ block
                ;; Already have enough.
                (.. future (set current))
            )
            (§ else )
            (§ block
                ;; Will be checked later in checkBalanceFutures.  We don't just add an event listener for ourselves
                ;; here so that running getBalanceFuture().get() in the user code thread works - generally we must
                ;; avoid giving the user back futures that require the user code thread to be free.
                (§ var #_"BalanceFutureRequest" (§ name req) (§ new #_"BalanceFutureRequest"))
                (§ ass (§ name (.. req future)) future)
                (§ ass (§ name (.. req value)) value)
                (§ ass (§ name (.. req type)) type)
                (.. balanceFutureRequests (add req))
            )
            (§ return future)
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    ;; Runs any balance futures in the user code thread.
    #_suppress(§ opt "FieldAccessNotGuarded")
    #_private
    (§ method- #_"void" (§ fn checkBalanceFuturesLocked) [#_nilable #_"Coin" (§ name avail)])
    (§ block
        (Preconditions/checkState (.. lock (isHeldByCurrentThread)))

        (§ var #_"ListIterator<BalanceFutureRequest>" (§ name it) (.. balanceFutureRequests (listIterator)))
        (§ while (.. it (hasNext)))
        (§ block
            (§ var #_"BalanceFutureRequest" (§ name req) (.. it (next)))
            (§ var #_"Coin" (§ name val) (getBalance (.. req type))) ;; This could be slow for lots of futures.
            (§ if (< (.. val (compareTo (.. req value))) 0))
            (§ block
                (§ continue )
            )
            ;; Found one that's finished.
            (.. it (remove))
            (§ var #_"Coin" (§ name v) val)
            ;; Don't run any user-provided future listeners with our lock held.
            (.. Threading/USER_THREAD (execute (§ new #_"Runnable")
            (§ anon
                #_override
                #_public
                (§ method #_"void" (§ fn run) [])
                (§ block
                    (.. req future (set v))
                    nil
                )
            )))
        )
        nil
    )

    ;;;
     ; Returns the amount of bitcoin ever received via output.  <b>This is not the balance!</b>  If an output
     ; spends from a transaction whose inputs are also to our wallet, the input amounts are deducted from the
     ; outputs contribution, with a minimum of zero contribution.  The idea behind this is we avoid double
     ; counting money sent to us.
     ; @return the total amount of satoshis received, regardless of whether it was spent or not.
     ;;
    #_public
    (§ method #_"Coin" (§ fn getTotalReceived) [])
    (§ block
        (§ var #_"Coin" (§ name total) Coin/ZERO)

        ;; Include outputs to us if they were not just change outputs, i.e. the inputs to us summed to less
        ;; than the outputs to us.
        (§ for (§ var #_"Transaction" (§ name tx)) :for (.. transactions (values)))
        (§ block
            (§ var #_"Coin" (§ name txTotal) Coin/ZERO)
            (§ for (§ var #_"TransactionOutput" (§ name output)) :for (.. tx (getOutputs)))
            (§ block
                (§ if (.. output (isMine this)))
                (§ block
                    (§ ass (§ name txTotal) (.. txTotal (add (.. output (getValue)))))
                )
            )
            (§ for (§ var #_"TransactionInput" (§ name in)) :for (.. tx (getInputs)))
            (§ block
                (§ var #_"TransactionOutput" (§ name prevOut) (.. in (getConnectedOutput)))
                (§ if (§ expr prevOut != nil && (.. prevOut (isMine this))))
                (§ block
                    (§ ass (§ name txTotal) (.. txTotal (subtract (.. prevOut (getValue)))))
                )
            )
            (§ if (.. txTotal (isPositive)))
            (§ block
                (§ ass (§ name total) (.. total (add txTotal)))
            )
        )
        total
    )

    ;;;
     ; Returns the amount of bitcoin ever sent via output.  If an output is sent to our own wallet, because of
     ; change or rotating keys or whatever, we do not count it.  If the wallet was involved in a shared transaction,
     ; i.e. there is some input to the transaction that we don't have the key for, then we multiply the sum of
     ; the output values by the proportion of satoshi coming in to our inputs.  Essentially we treat inputs as
     ; pooling into the transaction, becoming fungible and being equally distributed to all outputs.
     ; @return the total amount of satoshis sent by us.
     ;;
    #_public
    (§ method #_"Coin" (§ fn getTotalSent) [])
    (§ block
        (§ var #_"Coin" (§ name total) Coin/ZERO)

        (§ for (§ var #_"Transaction" (§ name tx)) :for (.. transactions (values)))
        (§ block
            ;; Count spent outputs to only if they were not to us.  This means we don't count change outputs.
            (§ var #_"Coin" (§ name txOutputTotal) Coin/ZERO)
            (§ for (§ var #_"TransactionOutput" (§ name out)) :for (.. tx (getOutputs)))
            (§ block
                (§ if (§ not (.. out (isMine this))))
                (§ block
                    (§ ass (§ name txOutputTotal) (.. txOutputTotal (add (.. out (getValue)))))
                )
            )

            ;; Count the input values to us
            (§ var #_"Coin" (§ name txOwnedInputsTotal) Coin/ZERO)
            (§ for (§ var #_"TransactionInput" (§ name in)) :for (.. tx (getInputs)))
            (§ block
                (§ var #_"TransactionOutput" (§ name prevOut) (.. in (getConnectedOutput)))
                (§ if (§ expr prevOut != nil && (.. prevOut (isMine this))))
                (§ block
                    (§ ass (§ name txOwnedInputsTotal) (.. txOwnedInputsTotal (add (.. prevOut (getValue)))))
                )
            )

            ;; If there is an input that isn't from us, i.e. this is a shared transaction.
            (§ var #_"Coin" (§ name txInputsTotal) (.. tx (getInputSum)))
            (§ if (§ expr txOwnedInputsTotal != txInputsTotal))
            (§ block
                ;; Multiply our output total by the appropriate proportion to account for the inputs that we don't own.
                (§ var #_"BigInteger" (§ name txOutputTotalNum) (§ new #_"BigInteger" (.. txOutputTotal (toString))))
                (§ ass (§ name txOutputTotalNum) (.. txOutputTotalNum (multiply (§ new #_"BigInteger" (.. txOwnedInputsTotal (toString))))))
                (§ ass (§ name txOutputTotalNum) (.. txOutputTotalNum (divide (§ new #_"BigInteger" (.. txInputsTotal (toString))))))
                (§ ass (§ name txOutputTotal) (Coin/valueOf (.. txOutputTotalNum (longValue))))
            )
            (§ ass (§ name total) (.. total (add txOutputTotal)))
        )
        total
    )

    ;;; A SendResult is returned to you as part of sending coins to a recipient. ;;
    #_public
    #_static
    (§ class #_"SendResult"
        ;;; The Bitcoin transaction message that moves the money. ;;
        #_public
        (§ field #_"Transaction" (§ name tx))
        ;;;
         ; A future that will complete once the tx message has been successfully broadcast to the network.
         ; This is just the result of calling broadcast.future().
         ;;
        #_public
        (§ field #_"ListenableFuture<Transaction>" (§ name broadcastComplete))
        ;;; The broadcast object returned by the linked TransactionBroadcaster. ;;
        #_public
        (§ field #_"TransactionBroadcast" (§ name broadcast))
    )

    ;;;
     ; Enumerates possible resolutions for missing signatures.
     ;;
    #_public
    (§ enum #_"MissingSigsMode"
        ;;; Input script will have OP_0 instead of missing signatures. ;;
        (§ item USE_OP_ZERO)
        ;;;
         ; Missing signatures will be replaced by dummy sigs.  This is useful when you'd like to know the
         ; fee for a transaction without knowing the user's password, as fee depends on size.
         ;;
        (§ item USE_DUMMY_SIG)
        ;;;
         ; If signature is missing, {@link org.bitcoinj.signers.TransactionSigner.MissingSignatureException}
         ; will be thrown for P2SH and {@link ECKey.MissingPrivateKeyException} for other tx types.
         ;;
        (§ item THROW)
    )

    ;;;
     ; <p>Statelessly creates a transaction that sends the given value to address.  The change is sent to
     ; {@link Wallet#currentChangeAddress()}, so you must have added at least one key.</p>
     ;
     ; <p>If you just want to send money quickly, you probably want
     ; {@link Wallet#sendCoins(TransactionBroadcaster, Address, Coin)} instead.  That will create the sending
     ; transaction, commit to the wallet and broadcast it to the network all in one go.  This method is lower
     ; level and lets you see the proposed transaction before anything is done with it.</p>
     ;
     ; <p>This is a helper method that is equivalent to using {@link SendRequest#to(Address, Coin)}
     ; followed by {@link Wallet#completeTx(Wallet.SendRequest)} and returning the requests transaction object.
     ; Note that this means a fee may be automatically added if required, if you want more control over the process,
     ; just do those two steps yourself.</p>
     ;
     ; <p>IMPORTANT: This method does NOT update the wallet.  If you call createSend again you may get two transactions
     ; that spend the same coins.  You have to call {@link Wallet#commitTx(Transaction)} on the created transaction to
     ; prevent this, but that should only occur once the transaction has been accepted by the network.  This implies
     ; you cannot have more than one outstanding sending tx at once.</p>
     ;
     ; <p>You MUST ensure that the value is not smaller than {@link Transaction#MIN_NONDUST_OUTPUT} or the transaction
     ; will almost certainly be rejected by the network as dust.</p>
     ;
     ; @param address The Bitcoin address to send the money to.
     ; @param value How much currency to send.
     ; @return either the created Transaction or null if there are insufficient coins.
     ; @throws InsufficientMoneyException if the request could not be completed due to not enough balance.
     ; @throws DustySendRequested if the resultant transaction would violate the dust rules.
     ; @throws CouldNotAdjustDownwards if emptying the wallet was requested and the output can't be shrunk for fees without violating a protocol rule.
     ; @throws ExceededMaxTransactionSize if the resultant transaction is too big for Bitcoin to process.
     ; @throws MultipleOpReturnRequested if there is more than one OP_RETURN output for the resultant transaction.
     ;;
    #_public
    (§ method #_"Transaction" (§ fn createSend) [#_"Address" (§ name address), #_"Coin" (§ name value)])
        (§ throws #_"InsufficientMoneyException")
    (§ block
        (§ var #_"SendRequest" (§ name req) (SendRequest/to address, value))
        (§ if (.. params (getId) (equals NetworkParameters/ID_UNITTESTNET)))
        (§ block
            (§ ass (§ name (.. req shuffleOutputs)) false)
        )
        (completeTx req)
        (.. req tx)
    )

    ;;;
     ; Sends coins to the given address but does not broadcast the resulting pending transaction.  It is still
     ; stored in the wallet, so when the wallet is added to a {@link PeerGroup} or {@link Peer} the transaction
     ; will be announced to the network.  The given {@link SendRequest} is completed first using
     ; {@link Wallet#completeTx(Wallet.SendRequest)} to make it valid.
     ;
     ; @return the Transaction that was created.
     ; @throws InsufficientMoneyException if the request could not be completed due to not enough balance.
     ; @throws IllegalArgumentException if you try and complete the same SendRequest twice.
     ; @throws DustySendRequested if the resultant transaction would violate the dust rules.
     ; @throws CouldNotAdjustDownwards if emptying the wallet was requested and the output can't be shrunk for fees without violating a protocol rule.
     ; @throws ExceededMaxTransactionSize if the resultant transaction is too big for Bitcoin to process.
     ; @throws MultipleOpReturnRequested if there is more than one OP_RETURN output for the resultant transaction.
     ;;
    #_public
    (§ method #_"Transaction" (§ fn sendCoinsOffline) [#_"SendRequest" (§ name request)])
        (§ throws #_"InsufficientMoneyException")
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (completeTx request)
            (commitTx (.. request tx))
            (§ return (.. request tx))
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    ;;;
     ; <p>Sends coins to the given address, via the given {@link PeerGroup}.  Change is returned to
     ; {@link Wallet#currentChangeAddress()}.  Note that a fee may be automatically added if one may be required
     ; for the transaction to be confirmed.</p>
     ;
     ; <p>The returned object provides both the transaction, and a future that can be used to learn when the broadcast
     ; is complete.  Complete means, if the PeerGroup is limited to only one connection, when it was written out to
     ; the socket.  Otherwise when the transaction is written out and we heard it back from a different peer.</p>
     ;
     ; <p>Note that the sending transaction is committed to the wallet immediately, not when the transaction is
     ; successfully broadcast.  This means that even if the network hasn't heard about your transaction you won't be
     ; able to spend those same coins again.</p>
     ;
     ; <p>You MUST ensure that value is not smaller than {@link Transaction#MIN_NONDUST_OUTPUT} or the transaction will
     ; almost certainly be rejected by the network as dust.</p>
     ;
     ; @param broadcaster A {@link TransactionBroadcaster} to use to send the transactions out.
     ; @param to Which address to send coins to.
     ; @param value How much value to send.
     ; @return an object containing the transaction that was created, and a future for the broadcast of it.
     ; @throws InsufficientMoneyException if the request could not be completed due to not enough balance.
     ; @throws DustySendRequested if the resultant transaction would violate the dust rules.
     ; @throws CouldNotAdjustDownwards if emptying the wallet was requested and the output can't be shrunk for fees without violating a protocol rule.
     ; @throws ExceededMaxTransactionSize if the resultant transaction is too big for Bitcoin to process.
     ; @throws MultipleOpReturnRequested if there is more than one OP_RETURN output for the resultant transaction.
     ;;
    #_public
    (§ method #_"SendResult" (§ fn sendCoins) [#_"TransactionBroadcaster" (§ name broadcaster), #_"Address" (§ name to), #_"Coin" (§ name value)])
        (§ throws #_"InsufficientMoneyException")
    (§ block
        (§ var #_"SendRequest" (§ name request) (SendRequest/to to, value))
        (sendCoins broadcaster, request)
    )

    ;;;
     ; <p>Sends coins according to the given request, via the given {@link TransactionBroadcaster}.</p>
     ;
     ; <p>The returned object provides both the transaction, and a future that can be used to learn when the broadcast
     ; is complete.  Complete means, if the PeerGroup is limited to only one connection, when it was written out to
     ; the socket.  Otherwise when the transaction is written out and we heard it back from a different peer.</p>
     ;
     ; <p>Note that the sending transaction is committed to the wallet immediately, not when the transaction is
     ; successfully broadcast.  This means that even if the network hasn't heard about your transaction you won't be
     ; able to spend those same coins again.</p>
     ;
     ; @param broadcaster The target to use for broadcast.
     ; @param request The SendRequest that describes what to do, get one using static methods on SendRequest itself.
     ; @return an object containing the transaction that was created, and a future for the broadcast of it.
     ; @throws InsufficientMoneyException if the request could not be completed due to not enough balance.
     ; @throws IllegalArgumentException if you try and complete the same SendRequest twice.
     ; @throws DustySendRequested if the resultant transaction would violate the dust rules.
     ; @throws CouldNotAdjustDownwards if emptying the wallet was requested and the output can't be shrunk for fees without violating a protocol rule.
     ; @throws ExceededMaxTransactionSize if the resultant transaction is too big for Bitcoin to process.
     ; @throws MultipleOpReturnRequested if there is more than one OP_RETURN output for the resultant transaction.
     ;;
    #_public
    (§ method #_"SendResult" (§ fn sendCoins) [#_"TransactionBroadcaster" (§ name broadcaster), #_"SendRequest" (§ name request)])
        (§ throws #_"InsufficientMoneyException")
    (§ block
        ;; Should not be locked here, as we're going to call into the broadcaster and that might want to hold its
        ;; own lock.  sendCoinsOffline handles everything that needs to be locked.
        (Preconditions/checkState (§ not (.. lock (isHeldByCurrentThread))))

        ;; Commit the TX to the wallet immediately so the spent coins won't be reused.
        ;; TODO: We should probably allow the request to specify tx commit only after the network has accepted it.
        (§ var #_"Transaction" (§ name tx) (sendCoinsOffline request))
        (§ var #_"SendResult" (§ name result) (§ new #_"SendResult"))
        (§ ass (§ name (.. result tx)) tx)
        ;; The tx has been committed to the pending pool by this point (via sendCoinsOffline -> commitTx), so it has
        ;; a txConfidenceListener registered.  Once the tx is broadcast the peers will update the memory pool with the
        ;; count of seen peers, the memory pool will update the transaction confidence object, that will invoke the
        ;; txConfidenceListener which will in turn invoke the wallets event listener onTransactionConfidenceChanged
        ;; method.
        (§ ass (§ name (.. result broadcast)) (.. broadcaster (broadcastTransaction tx)))
        (§ ass (§ name (.. result broadcastComplete)) (.. result broadcast (future)))
        result
    )

    ;;;
     ; Satisfies the given {@link SendRequest} using the default transaction broadcaster configured either via
     ; {@link PeerGroup#addWallet(Wallet)} or directly with {@link #setTransactionBroadcaster(TransactionBroadcaster)}.
     ;
     ; @param request The SendRequest that describes what to do, get one using static methods on SendRequest itself.
     ; @return an object containing the transaction that was created, and a future for the broadcast of it.
     ; @throws IllegalStateException if no transaction broadcaster has been configured.
     ; @throws InsufficientMoneyException if the request could not be completed due to not enough balance.
     ; @throws IllegalArgumentException if you try and complete the same SendRequest twice.
     ; @throws DustySendRequested if the resultant transaction would violate the dust rules.
     ; @throws CouldNotAdjustDownwards if emptying the wallet was requested and the output can't be shrunk for fees without violating a protocol rule.
     ; @throws ExceededMaxTransactionSize if the resultant transaction is too big for Bitcoin to process.
     ; @throws MultipleOpReturnRequested if there is more than one OP_RETURN output for the resultant transaction.
     ;;
    #_public
    (§ method #_"SendResult" (§ fn sendCoins) [#_"SendRequest" (§ name request)])
        (§ throws #_"InsufficientMoneyException")
    (§ block
        (§ var #_"TransactionBroadcaster" (§ name broadcaster) vTransactionBroadcaster)
        (Preconditions/checkState (some? broadcaster), "No transaction broadcaster is configured")
        (sendCoins broadcaster, request)
    )

    ;;;
     ; Sends coins to the given address, via the given {@link Peer}.  Change is returned to {@link Wallet#currentChangeAddress()}.
     ; If an exception is thrown by {@link Peer#sendMessage(Message)} the transaction is still committed, so the pending
     ; transaction must be broadcast <b>by you</b> at some other time.  Note that a fee may be automatically added
     ; if one may be required for the transaction to be confirmed.
     ;
     ; @return the {@link Transaction} that was created or null if there was insufficient balance to send the coins.
     ; @throws InsufficientMoneyException if the request could not be completed due to not enough balance.
     ; @throws IllegalArgumentException if you try and complete the same SendRequest twice.
     ; @throws DustySendRequested if the resultant transaction would violate the dust rules.
     ; @throws CouldNotAdjustDownwards if emptying the wallet was requested and the output can't be shrunk for fees without violating a protocol rule.
     ; @throws ExceededMaxTransactionSize if the resultant transaction is too big for Bitcoin to process.
     ; @throws MultipleOpReturnRequested if there is more than one OP_RETURN output for the resultant transaction.
     ;;
    #_public
    (§ method #_"Transaction" (§ fn sendCoins) [#_"Peer" (§ name peer), #_"SendRequest" (§ name request)])
        (§ throws #_"InsufficientMoneyException")
    (§ block
        (§ var #_"Transaction" (§ name tx) (sendCoinsOffline request))
        (.. peer (sendMessage tx))
        tx
    )

    ;;;
     ; Class of exceptions thrown in {@link Wallet#completeTx(SendRequest)}.
     ;;
    #_public
    #_static
    (§ class #_"CompletionException" (§ extends #_"RuntimeException"))

    ;;;
     ; Thrown if the resultant transaction would violate the dust rules (an output that's too small to be worthwhile).
     ;;
    #_public
    #_static
    (§ class #_"DustySendRequested" (§ extends #_"CompletionException"))

    ;;;
     ; Thrown if there is more than one OP_RETURN output for the resultant transaction.
     ;;
    #_public
    #_static
    (§ class #_"MultipleOpReturnRequested" (§ extends #_"CompletionException"))

    ;;;
     ; Thrown when we were trying to empty the wallet, and the total amount of money we were trying to empty after
     ; being reduced for the fee was smaller than the min payment.
     ; Note that the missing field will be null in this case.
     ;;
    #_public
    #_static
    (§ class #_"CouldNotAdjustDownwards" (§ extends #_"CompletionException"))

    ;;;
     ; Thrown if the resultant transaction is too big for Bitcoin to process.  Try breaking up the amounts of value.
     ;;
    #_public
    #_static
    (§ class #_"ExceededMaxTransactionSize" (§ extends #_"CompletionException"))

    ;;;
     ; Given a spend request containing an incomplete transaction, makes it valid by adding outputs and signed inputs
     ; according to the instructions in the request.  The transaction in the request is modified by this method.
     ;
     ; @param req A SendRequest that contains the incomplete transaction and details for how to make it valid.
     ; @throws InsufficientMoneyException if the request could not be completed due to not enough balance.
     ; @throws IllegalArgumentException if you try and complete the same SendRequest twice.
     ; @throws DustySendRequested if the resultant transaction would violate the dust rules.
     ; @throws CouldNotAdjustDownwards if emptying the wallet was requested and the output can't be shrunk for fees without violating a protocol rule.
     ; @throws ExceededMaxTransactionSize if the resultant transaction is too big for Bitcoin to process.
     ; @throws MultipleOpReturnRequested if there is more than one OP_RETURN output for the resultant transaction.
     ;;
    #_public
    (§ method #_"void" (§ fn completeTx) [#_"SendRequest" (§ name req)])
        (§ throws #_"InsufficientMoneyException")
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (Preconditions/checkArgument (§ not (.. req completed)), "Given SendRequest has already been completed.")

            ;; Calculate the amount of value we need to import.
            (§ var #_"Coin" (§ name value) Coin/ZERO)
            (§ for (§ var #_"TransactionOutput" (§ name output)) :for (.. req tx (getOutputs)))
            (§ block
                (§ ass (§ name value) (.. value (add (.. output (getValue)))))
            )

            (.. log (info "Completing send tx with {} outputs totalling {} and a fee of {}/kB", (.. req tx (getOutputs) (size)), (.. value (toFriendlyString)), (.. req feePerKb (toFriendlyString))))

            ;; If any inputs have already been added, we don't need to get their value from wallet.
            (§ var #_"Coin" (§ name totalInput) Coin/ZERO)
            (§ for (§ var #_"TransactionInput" (§ name input)) :for (.. req tx (getInputs)))
            (§ block
                (§ if (!= (.. input (getConnectedOutput)) nil))
                (§ block
                    (§ ass (§ name totalInput) (.. totalInput (add (.. input (getConnectedOutput) (getValue)))))
                )
                (§ else )
                (§ block
                    (.. log (warn "SendRequest transaction already has inputs but we don't know how much they are worth - they will be added to fee."))
                )
            )
            (§ ass (§ name value) (.. value (subtract totalInput)))

            (§ var #_"List<TransactionInput>" (§ name originalInputs) (§ new #_"ArrayList<>" (.. req tx (getInputs))))

            ;; Check for dusty sends and the OP_RETURN limit.
            (§ if (§ expr (.. req ensureMinRequiredFee) && (§ not (.. req emptyWallet)))) ;; Min fee checking is handled later for emptyWallet.
            (§ block
                (§ var #_"int" (§ name opReturnCount) 0)
                (§ for (§ var #_"TransactionOutput" (§ name output)) :for (.. req tx (getOutputs)))
                (§ block
                    (§ if (.. output (isDust)))
                    (§ block
                        (§ throw (§ new #_"DustySendRequested"))
                    )
                    (§ if (.. output (getScriptPubKey) (isOpReturn)))
                    (§ block
                        (§ ass (§ name opReturnCount) (+ opReturnCount 1))
                    )
                )
                (§ if (< 1 opReturnCount)) ;; Only 1 OP_RETURN per transaction allowed.
                (§ block
                    (§ throw (§ new #_"MultipleOpReturnRequested"))
                )
            )

            ;; Calculate a list of ALL potential candidates for spending and then ask a coin selector to provide us
            ;; with the actual outputs that'll be used to gather the required amount of value.  In this way, users
            ;; can customize coin selection policies.  The call below will ignore immature coinbases and outputs
            ;; we don't have the keys for.
            (§ var #_"List<TransactionOutput>" (§ name candidates) (calculateAllSpendCandidates true, (§ expr (.. req missingSigsMode) == MissingSigsMode/THROW)))

            (§ var #_"CoinSelection" (§ name bestCoinSelection))
            (§ var #_"TransactionOutput" (§ name bestChangeOutput) nil)
            (§ var #_"List<Coin>" (§ name updatedOutputValues) nil)
            (§ if (§ not (.. req emptyWallet)))
            (§ block
                ;; This can throw InsufficientMoneyException.
                (§ var #_"FeeCalculation" (§ name feeCalculation) (calculateFee req, value, originalInputs, (.. req ensureMinRequiredFee), candidates))
                (§ ass (§ name bestCoinSelection) (.. feeCalculation bestCoinSelection))
                (§ ass (§ name bestChangeOutput) (.. feeCalculation bestChangeOutput))
                (§ ass (§ name updatedOutputValues) (.. feeCalculation updatedOutputValues))
            )
            (§ else )
            (§ block
                ;; We're being asked to empty the wallet.  What this means is ensuring "tx" has only a single output
                ;; of the total value we can currently spend as determined by the selector, and then subtracting the fee.
                (Preconditions/checkState (§ expr (.. req tx (getOutputs) (size)) == 1), "Empty wallet TX must have a single output only.")

                (§ var #_"CoinSelector" (§ name selector) (or (.. req coinSelector) coinSelector))
                (§ ass (§ name bestCoinSelection) (.. selector (select (.. params (getMaxMoney)), candidates)))
                (§ ass (§ name candidates) nil) ;; Selector took ownership and might have changed candidates.  Don't access again.
                (.. req tx (getOutput 0) (setValue (.. bestCoinSelection valueGathered)))
                (.. log (info "  emptying {}", (.. bestCoinSelection valueGathered (toFriendlyString))))
            )

            (§ for (§ var #_"TransactionOutput" (§ name output)) :for (.. bestCoinSelection gathered))
            (§ block
                (.. req tx (addInput output))
            )

            (§ if (.. req emptyWallet))
            (§ block
                (§ var #_"Coin" (§ name feePerKb) (or (.. req feePerKb) Coin/ZERO))
                (§ if (§ not (adjustOutputDownwardsForFee (.. req tx), bestCoinSelection, feePerKb, (.. req ensureMinRequiredFee))))
                (§ block
                    (§ throw (§ new #_"CouldNotAdjustDownwards"))
                )
            )

            (§ if (some? updatedOutputValues))
            (§ block
                (§ for (§ var #_"int" (§ name i) 0) :for (§ expr i < (.. updatedOutputValues (size))) :for (§ ass (§ name i) (+ i 1)))
                (§ block
                    (.. req tx (getOutput i) (setValue (.. updatedOutputValues (get i))))
                )
            )

            (§ if (some? bestChangeOutput))
            (§ block
                (.. req tx (addOutput bestChangeOutput))
                (.. log (info "  with {} change", (.. bestChangeOutput (getValue) (toFriendlyString))))
            )

            ;; Now shuffle the outputs to obfuscate which is the change.
            (§ if (.. req shuffleOutputs))
            (§ block
                (.. req tx (shuffleOutputs))
            )

            ;; Now sign the inputs, thus proving that we are entitled to redeem the connected outputs.
            (§ if (.. req signInputs))
            (§ block
                (signTransaction req)
            )

            ;; Check size.
            (§ var #_"int" (§ name size) (.. req tx (unsafeBitcoinSerialize) length))
            (§ if (< Transaction/MAX_STANDARD_TX_SIZE size))
            (§ block
                (§ throw (§ new #_"ExceededMaxTransactionSize"))
            )

            ;; Label the transaction as being self created.  We can use this later to spend its change output even before
            ;; the transaction is confirmed.  We deliberately won't bother notifying listeners here as there's not much
            ;; point - the user isn't interested in a confidence transition they made themselves.
            (.. req tx (getConfidence) (setSource TransactionConfidence/Source/SELF))
            ;; Label the transaction as being a user requested payment.  This can be used to render GUI wallet
            ;; transaction lists more appropriately, especially when the wallet starts to generate transactions itself
            ;; for internal purposes.
            (.. req tx (setPurpose Transaction/Purpose/USER_PAYMENT))
            ;; Record the exchange rate that was valid when the transaction was completed.
            (.. req tx (setExchangeRate (.. req exchangeRate)))
            (.. req tx (setMemo (.. req memo)))
            (§ ass (§ name (.. req completed)) true)
            (.. log (info "  completed: {}", (.. req tx)))
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
        nil
    )

    ;;;
     ; <p>Given a send request containing transaction, attempts to sign it's inputs.  This method expects
     ; the transaction to have all necessary inputs connected or they will be ignored.</p>
     ; <p>Actual signing is done by pluggable {@link #signers} and it's not guaranteed that
     ; the transaction will be complete in the end.</p>
     ;;
    #_public
    (§ method #_"void" (§ fn signTransaction) [#_"SendRequest" (§ name req)])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ var #_"Transaction" (§ name tx) (.. req tx))
            (§ var #_"List<TransactionInput>" (§ name inputs) (.. tx (getInputs)))
            (§ var #_"List<TransactionOutput>" (§ name outputs) (.. tx (getOutputs)))
            (Preconditions/checkState (§ expr 0 < (.. inputs (size))))
            (Preconditions/checkState (§ expr 0 < (.. outputs (size))))

            (§ var #_"KeyBag" (§ name maybeDecryptingKeyBag) (§ new #_"DecryptingKeyBag" this, (.. req aesKey)))

            (§ var #_"int" (§ name numInputs) (.. tx (getInputs) (size)))
            (§ for (§ var #_"int" (§ name i) 0) :for (< i numInputs) :for (§ ass (§ name i) (+ i 1)))
            (§ block
                (§ var #_"TransactionInput" (§ name txIn) (.. tx (getInput i)))
                ;; Missing connected output, assuming already signed.
                (§ if (== (.. txIn (getConnectedOutput)) nil))
                (§ block
                    (§ continue )
                )

                (§ try )
                (§ block
                    ;; We assume if its already signed, its hopefully got a SIGHASH type that will not invalidate when
                    ;; we sign missing pieces (to check this would require either assuming any signatures are signing
                    ;; standard output types or a way to get processed signatures out of script execution).
                    (.. txIn (getScriptSig) (correctlySpends tx, i, (.. txIn (getConnectedOutput) (getScriptPubKey))))
                    (.. log (warn "Input {} already correctly spends output, assuming SIGHASH type used will be safe and skipping signing.", i))
                    (§ continue )
                )
                (§ catch #_"ScriptException" (§ name e))
                (§ block
                    (.. log (debug "Input contained an incorrect signature", e))
                    ;; Expected.
                )

                (§ var #_"Script" (§ name scriptPubKey) (.. txIn (getConnectedOutput) (getScriptPubKey)))
                (§ var #_"RedeemData" (§ name redeemData) (.. txIn (getConnectedRedeemData maybeDecryptingKeyBag)))
                (Preconditions/checkNotNull redeemData, "Transaction exists in wallet that we cannot redeem: %s", (.. txIn (getOutpoint) (getHash)))
                (.. txIn (setScriptSig (.. scriptPubKey (createEmptyInputScript (.. redeemData keys (get 0)), (.. redeemData redeemScript)))))
            )

            (§ var #_"TransactionSigner.ProposedTransaction" (§ name proposal) (§ new #_"TransactionSigner.ProposedTransaction" tx))
            (§ for (§ var #_"TransactionSigner" (§ name signer)) :for signers)
            (§ block
                (§ if (§ not (.. signer (signInputs proposal, maybeDecryptingKeyBag))))
                (§ block
                    (.. log (info "{} returned false for the tx", (.. signer (getClass) (getName))))
                )
            )

            ;; Resolve missing sigs if any.
            (.. (§ new #_"MissingSigResolutionSigner" (.. req missingSigsMode)) (signInputs proposal, maybeDecryptingKeyBag))
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
        nil
    )

    ;;; Reduce the value of the first output of a transaction to pay the given feePerKb as appropriate for its size. ;;
    #_private
    (§ method- #_"boolean" (§ fn adjustOutputDownwardsForFee) [#_"Transaction" (§ name tx), #_"CoinSelection" (§ name coinSelection), #_"Coin" (§ name feePerKb), #_"boolean" (§ name ensureMinRequiredFee)])
    (§ block
        (§ var #_"int" (§ name size) (+ (.. tx (unsafeBitcoinSerialize) length) (estimateBytesForSigning coinSelection)))
        (§ var #_"Coin" (§ name fee) (.. feePerKb (multiply size) (divide 1000)))
        (§ if (§ expr ensureMinRequiredFee && (.. fee (compareTo Transaction/REFERENCE_DEFAULT_MIN_TX_FEE)) < 0))
        (§ block
            (§ ass (§ name fee) Transaction/REFERENCE_DEFAULT_MIN_TX_FEE)
        )
        (§ var #_"TransactionOutput" (§ name output) (.. tx (getOutput 0)))
        (.. output (setValue (.. output (getValue) (subtract fee))))
        (§ not (.. output (isDust)))
    )

    ;;;
     ; Returns a list of the outputs that can potentially be spent, i.e. that we have the keys for and are unspent
     ; according to our knowledge of the block chain.
     ;;
    #_public
    (§ method #_"List<TransactionOutput>" (§ fn calculateAllSpendCandidates) [])
    (§ block
        (calculateAllSpendCandidates true, true)
    )

    ;;;
     ; Returns a list of all outputs that are being tracked by this wallet taking into account the flags.
     ;
     ; @param excludeImmatureCoinbases Whether to ignore coinbase outputs that we will be able to spend in future once they mature.
     ; @param excludeUnsignable Whether to ignore outputs that we are tracking but don't have the keys to sign for.
     ;;
    #_public
    (§ method #_"List<TransactionOutput>" (§ fn calculateAllSpendCandidates) [#_"boolean" (§ name excludeImmatureCoinbases), #_"boolean" (§ name excludeUnsignable)])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ var #_"List<TransactionOutput>" (§ name candidates) (§ new #_"ArrayList<>" (.. myUnspents (size))))
            (§ for (§ var #_"TransactionOutput" (§ name output)) :for myUnspents)
            (§ block
                (§ if (§ expr excludeUnsignable && (§ not (canSignFor (.. output (getScriptPubKey))))))
                (§ block
                    (§ continue )
                )
                (§ var #_"Transaction" (§ name transaction) (Preconditions/checkNotNull (.. output (getParentTransaction))))
                (§ if (§ expr excludeImmatureCoinbases && (§ not (.. transaction (isMature)))))
                (§ block
                    (§ continue )
                )
                (.. candidates (add output))
            )
            (§ return candidates)
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    ;;;
     ; Returns true if this wallet has at least one of the private keys needed to sign for this scriptPubKey.
     ; Returns false if the form of the script is not known or if the script is OP_RETURN.
     ;;
    #_public
    (§ method #_"boolean" (§ fn canSignFor) [#_"Script" (§ name script)])
    (§ block
        (§ if (.. script (isSentToRawPubKey)))
        (§ block
            (§ var #_"byte[]" (§ name pubkey) (.. script (getPubKey)))
            (§ var #_"ECKey" (§ name key) (findKeyFromPubKey pubkey))
            (§ return (§ expr key != nil && (§ expr (.. key (isEncrypted)) || (.. key (hasPrivKey)))))
        )

        (§ if (.. script (isPayToScriptHash)))
        (§ block
            (§ var #_"RedeemData" (§ name data) (findRedeemDataFromScriptHash (.. script (getPubKeyHash))))
            (§ return (§ expr data != nil && (canSignFor (.. data redeemScript))))
        )

        (§ if (.. script (isSentToAddress)))
        (§ block
            (§ var #_"ECKey" (§ name key) (findKeyFromPubHash (.. script (getPubKeyHash))))
            (§ return (§ expr key != nil && (§ expr (.. key (isEncrypted)) || (.. key (hasPrivKey)))))
        )

        (§ if (.. script (isSentToMultiSig)))
        (§ block
            (§ for (§ var #_"ECKey" (§ name pubkey)) :for (.. script (getPubKeys)))
            (§ block
                (§ var #_"ECKey" (§ name key) (findKeyFromPubKey (.. pubkey (getPubKey))))
                (§ if (§ expr key != nil && (§ expr (.. key (isEncrypted)) || (.. key (hasPrivKey)))))
                (§ block
                    (§ return true)
                )
            )
        )
        (§ elseif (.. script (isSentToCLTVPaymentChannel)))
        (§ block
            ;; Any script for which we are the recipient or sender counts.
            (§ var #_"byte[]" (§ name sender) (.. script (getCLTVPaymentChannelSenderPubKey)))
            (§ var #_"ECKey" (§ name senderKey) (findKeyFromPubKey sender))
            (§ if (§ expr senderKey != nil && (§ expr (.. senderKey (isEncrypted)) || (.. senderKey (hasPrivKey)))))
            (§ block
                (§ return true)
            )

            (§ var #_"byte[]" (§ name recipient) (.. script (getCLTVPaymentChannelRecipientPubKey)))
            (§ var #_"ECKey" (§ name recipientKey) (findKeyFromPubKey sender))
            (§ if (§ expr recipientKey != nil && (§ expr (.. recipientKey (isEncrypted)) || (.. recipientKey (hasPrivKey)))))
            (§ block
                (§ return true)
            )
        )
        false
    )

    ;;; Returns the {@link CoinSelector} object which controls which outputs can be spent by this wallet. ;;
    #_public
    (§ method #_"CoinSelector" (§ fn getCoinSelector) [])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ return coinSelector)
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )

    ;;;
     ; A coin selector is responsible for choosing which outputs to spend when creating transactions.  The default
     ; selector implements a policy of spending transactions that appeared in the best chain and pending transactions
     ; that were created by this wallet, but not others.  You can override the coin selector for any given send
     ; operation by changing {@link SendRequest#coinSelector}.
     ;;
    #_public
    (§ method #_"void" (§ fn setCoinSelector) [#_"CoinSelector" (§ name coinSelector)])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            (§ ass (§ name (.. this coinSelector)) (Preconditions/checkNotNull coinSelector))
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
        nil
    )

    ;;;
     ; Convenience wrapper for <tt>setCoinSelector(Wallet.AllowUnconfirmedCoinSelector.get())</tt>.  If this method
     ; is called on the wallet then transactions will be used for spending regardless of their confidence.  This can
     ; be dangerous - only use this if you absolutely know what you're doing!
     ;;
    #_public
    (§ method #_"void" (§ fn allowSpendingUnconfirmedTransactions) [])
    (§ block
        (setCoinSelector (AllowUnconfirmedCoinSelector/get))
        nil
    )

    ;;;
     ; A custom {@link TransactionOutput} that is free standing.  This contains all the information
     ; required for spending without actually having all the linked data (i.e parent tx).
     ;
     ;;
    #_private
    (§ class #_"FreeStandingTransactionOutput" (§ extends #_"TransactionOutput")
        #_private
        (§ field- #_"UTXO" (§ name output))
        #_private
        (§ field- #_"int" (§ name chainHeight))

        ;;;
         ; Construct a free standing Transaction Output.
         ; @param params The network parameters.
         ; @param output The stored output (free standing).
         ;;
        #_public
        (§ constructor #_"FreeStandingTransactionOutput" [#_"NetworkParameters" (§ name params), #_"UTXO" (§ name output), #_"int" (§ name chainHeight)])
        (§ block
            (§ super params, nil, (.. output (getValue)), (.. output (getScript) (getProgram)))

            (§ ass (§ name (.. this output)) output)
            (§ ass (§ name (.. this chainHeight)) chainHeight)
            this
        )

        ;;;
         ; Get the {@link UTXO}.
         ; @return the stored output.
         ;;
        #_public
        (§ method #_"UTXO" (§ fn getUTXO) [])
        (§ block
            output
        )

        ;;;
         ; Get the depth within the chain of the parent tx, depth is 1 if the output height is the height
         ; of the latest block.
         ; @return the depth.
         ;;
        #_override
        #_public
        (§ method #_"int" (§ fn getParentTransactionDepthInBlocks) [])
        (§ block
            (§ expr chainHeight - (.. output (getHeight)) + 1)
        )

        #_override
        #_public
        (§ method #_"int" (§ fn getIndex) [])
        (§ block
            (§ cast #_"int" (.. output (getIndex)))
        )

        #_override
        #_public
        (§ method #_"Sha256Hash" (§ fn getParentTransactionHash) [])
        (§ block
            (.. output (getHash))
        )
    )

    #_private
    #_static
    (§ class #_"TxOffsetPair" (§ implements #_"Comparable<TxOffsetPair>")
        #_public
        (§ field #_"Transaction" (§ name tx))
        #_public
        (§ field #_"int" (§ name offset))

        #_public
        (§ constructor #_"TxOffsetPair" [#_"Transaction" (§ name tx), #_"int" (§ name offset)])
        (§ block
            (§ ass (§ name (.. this tx)) tx)
            (§ ass (§ name (.. this offset)) offset)
            this
        )

        #_override
        #_public
        (§ method #_"int" (§ fn compareTo) [#_"TxOffsetPair" (§ name o)])
        (§ block
            ;; Note that in this implementation compareTo() is not consistent with equals().
            (Ints/compare offset, (.. o offset))
        )
    )

    ;;;
     ; <p>Don't call this directly.  It's not intended for API users.</p>
     ;
     ; <p>Called by the {@link BlockChain} when the best chain (representing total work done) has changed.
     ; This can cause the number of confirmations of a transaction to go higher, lower, drop to zero and
     ; can even result in a transaction going dead (will never confirm) due to a double spend.</p>
     ;
     ; <p>The oldBlocks/newBlocks lists are ordered height-wise from top first to bottom last.</p>
     ;;
    #_override
    #_public
    (§ method #_"void" (§ fn reorganize) [#_"StoredBlock" (§ name splitPoint), #_"List<StoredBlock>" (§ name oldBlocks), #_"List<StoredBlock>" (§ name newBlocks)])
        (§ throws #_"VerificationException")
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            ;; This runs on any peer thread with the block chain locked.
            ;;
            ;; The reorganize functionality of the wallet is tested in ChainSplitTest.java
            ;;
            ;; receive() has been called on the block that is triggering the re-org before this is called,
            ;; with type of SIDE_CHAIN.
            ;;
            ;; Note that this code assumes blocks are not invalid - if blocks contain duplicated transactions,
            ;; transactions that double spend etc then we can calculate the incorrect result.  This could open up
            ;; obscure DoS attacks if someone successfully mines a throwaway invalid block and feeds it to us, just
            ;; to try and corrupt the internal data structures.  We should try harder to avoid this but it's tricky
            ;; because there are so many ways the block can be invalid.

            ;; Avoid spuriously informing the user of wallet/tx confidence changes whilst we're re-organizing.
            (Preconditions/checkState (== (.. confidenceChanged (size)) 0))
            (Preconditions/checkState (§ not insideReorg))
            (§ ass (§ name insideReorg) true)
            (Preconditions/checkState (§ expr onWalletChangedSuppressions == 0))
            (§ ass (§ name onWalletChangedSuppressions) (+ onWalletChangedSuppressions 1))

            ;; Map block hash to transactions that appear in it.  We ensure that the map values are sorted according
            ;; to their relative position within those blocks.
            (§ var #_"ArrayListMultimap<Sha256Hash, TxOffsetPair>" (§ name mapBlockTx) (ArrayListMultimap/create))
            (§ for (§ var #_"Transaction" (§ name tx)) :for (getTransactions true))
            (§ block
                (§ var #_"Map<Sha256Hash, Integer>" (§ name appearsIn) (.. tx (getAppearsInHashes)))
                (§ if (nil? appearsIn))
                (§ block
                    (§ continue ) ;; Pending.
                )
                (§ for (§ var #_"Map.Entry<Sha256Hash, Integer>" (§ name block)) :for (.. appearsIn (entrySet)))
                (§ block
                    (.. mapBlockTx (put (.. block (getKey)), (§ new #_"TxOffsetPair" tx, (.. block (getValue)))))
                )
            )
            (§ for (§ var #_"Sha256Hash" (§ name blockHash)) :for (.. mapBlockTx (keySet)))
            (§ block
                (Collections/sort (.. mapBlockTx (get blockHash)))
            )

            (§ var #_"List<Sha256Hash>" (§ name oldBlockHashes) (§ new #_"ArrayList<>" (.. oldBlocks (size))))
            (.. log (info "Old part of chain (top to bottom):"))
            (§ for (§ var #_"StoredBlock" (§ name b)) :for oldBlocks)
            (§ block
                (.. log (info "  {}", (.. b (getHeader) (getHashAsString))))
                (.. oldBlockHashes (add (.. b (getHeader) (getHash))))
            )
            (.. log (info "New part of chain (top to bottom):"))
            (§ for (§ var #_"StoredBlock" (§ name b)) :for newBlocks)
            (§ block
                (.. log (info "  {}", (.. b (getHeader) (getHashAsString))))
            )

            (Collections/reverse newBlocks) ;; Need bottom-to-top but we get top-to-bottom.

            ;; For each block in the old chain, disconnect the transactions in reverse order.
            (§ var #_"LinkedList<Transaction>" (§ name oldChainTxns) (Lists/newLinkedList))
            (§ for (§ var #_"Sha256Hash" (§ name blockHash)) :for oldBlockHashes)
            (§ block
                (§ for (§ var #_"TxOffsetPair" (§ name pair)) :for (.. mapBlockTx (get blockHash)))
                (§ block
                    (§ var #_"Transaction" (§ name tx) (.. pair tx))
                    (§ var #_"Sha256Hash" (§ name txHash) (.. tx (getHash)))
                    (§ if (.. tx (isCoinBase)))
                    (§ block
                        ;; All the transactions that we have in our wallet which spent this coinbase are now invalid
                        ;; and will never confirm.  Hopefully this should never happen - that's the point of the maturity
                        ;; rule that forbids spending of coinbase transactions for 100 blocks.
                        ;;
                        ;; This could be recursive, although of course because we don't have the full transaction
                        ;; graph we can never reliably kill all transactions we might have that were rooted in
                        ;; this coinbase tx.  Some can just go pending forever, like the Bitcoin Core.  However we
                        ;; can do our best.
                        (.. log (warn "Coinbase killed by re-org: {}", (.. tx (getHashAsString))))
                        (killTxns (ImmutableSet/of tx), nil)
                    )
                    (§ else )
                    (§ block
                        (§ for (§ var #_"TransactionOutput" (§ name output)) :for (.. tx (getOutputs)))
                        (§ block
                            (§ var #_"TransactionInput" (§ name input) (.. output (getSpentBy)))
                            (§ if (some? input))
                            (§ block
                                (§ if (.. output (isMine this)))
                                (§ block
                                    (Preconditions/checkState (.. myUnspents (add output)))
                                )
                                (.. input (disconnect))
                            )
                        )
                        (.. oldChainTxns (add tx))
                        (.. unspent (remove txHash))
                        (.. spent (remove txHash))
                        (Preconditions/checkState (§ not (.. pending (containsKey txHash))))
                        (Preconditions/checkState (§ not (.. dead (containsKey txHash))))
                    )
                )
            )

            ;; Put all the disconnected transactions back into the pending pool and re-connect them.
            (§ for (§ var #_"Transaction" (§ name tx)) :for oldChainTxns)
            (§ block
                ;; Coinbase transactions on the old part of the chain are dead for good and won't come back unless
                ;; there's another re-org.
                (§ if (.. tx (isCoinBase)))
                (§ block
                    (§ continue )
                )
                (.. log (info "  ->pending {}", (.. tx (getHash))))

                (.. tx (getConfidence) (setConfidenceType ConfidenceType/PENDING)) ;; Wipe height/depth/work data.
                (.. confidenceChanged (put tx, TransactionConfidence/Listener/ChangeReason/TYPE))
                (addWalletTransaction Pool/PENDING, tx)
                (updateForSpends tx, false)
            )

            ;; Note that dead transactions stay dead.  Consider a chain that Finney attacks T1 and replaces it with
            ;; T2, so we move T1 into the dead pool.  If there's now a re-org to a chain that doesn't include T2, it
            ;; doesn't matter - the miners deleted T1 from their mempool, will resurrect T2 and put that into the
            ;; mempool and so T1 is still seen as a losing double spend.

            ;; The old blocks have contributed to the depth for all the transactions in the
            ;; wallet that are in blocks up to and including the chain split block.
            ;; The total depth is calculated here and then subtracted from the appropriate transactions.
            (§ var #_"int" (§ name depthToSubtract) (.. oldBlocks (size)))
            (.. log (info (§ expr "depthToSubtract = " + depthToSubtract)))
            ;; Remove depthToSubtract from all transactions in the wallet except for pending.
            (subtractDepth depthToSubtract, (.. spent (values)))
            (subtractDepth depthToSubtract, (.. unspent (values)))
            (subtractDepth depthToSubtract, (.. dead (values)))

            ;; The effective last seen block is now the split point so set the lastSeenBlockHash.
            (setLastBlockSeenHash (.. splitPoint (getHeader) (getHash)))

            ;; For each block in the new chain, work forwards calling receive() and notifyNewBestBlock().
            ;; This will pull them back out of the pending pool, or if the tx didn't appear in the old chain
            ;; and does appear in the new chain, will treat it as such and possibly kill pending transactions
            ;; that conflict.
            (§ for (§ var #_"StoredBlock" (§ name block)) :for newBlocks)
            (§ block
                (.. log (info "Replaying block {}", (.. block (getHeader) (getHashAsString))))
                (§ for (§ var #_"TxOffsetPair" (§ name pair)) :for (.. mapBlockTx (get (.. block (getHeader) (getHash)))))
                (§ block
                    (.. log (info "  tx {}", (.. pair tx (getHash))))
                    (§ try )
                    (§ block
                        (receive (.. pair tx), block, BlockChain/NewBlockType/BEST_CHAIN, (.. pair offset))
                    )
                    (§ catch #_"ScriptException" (§ name e))
                    (§ block
                        (§ throw (§ new #_"RuntimeException" e)) ;; Cannot happen as these blocks were already verified.
                    )
                )
                (notifyNewBestBlock block)
            )
            (isConsistentOrThrow)
            (§ var #_"Coin" (§ name balance) (getBalance))
            (.. log (info "post-reorg balance is {}", (.. balance (toFriendlyString))))
            ;; Inform event listeners that a re-org took place.
            (queueOnReorganize)
            (§ ass (§ name insideReorg) false)
            (§ ass (§ name onWalletChangedSuppressions) (- onWalletChangedSuppressions 1))
            (maybeQueueOnWalletChanged)
            (checkBalanceFuturesLocked balance)
            (informConfidenceListenersIfNotReorganizing)
            (saveLater)
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
        nil
    )

    ;;;
     ; Subtract the supplied depth from the given transactions.
     ;;
    #_private
    (§ method- #_"void" (§ fn subtractDepth) [#_"int" (§ name depthToSubtract), #_"Collection<Transaction>" (§ name transactions)])
    (§ block
        (§ for (§ var #_"Transaction" (§ name tx)) :for transactions)
        (§ block
            (§ if (== (.. tx (getConfidence) (getConfidenceType)) ConfidenceType/BUILDING))
            (§ block
                (.. tx (getConfidence) (setDepthInBlocks (- (.. tx (getConfidence) (getDepthInBlocks)) depthToSubtract)))
                (.. confidenceChanged (put tx, TransactionConfidence/Listener/ChangeReason/DEPTH))
            )
        )
        nil
    )

    #_private
    (§ field- #_"ArrayList<TransactionOutPoint>" (§ name bloomOutPoints) (Lists/newArrayList))
    ;; Used to track whether we must automatically begin/end a filter calculation and calc outpoints/take the locks.
    #_private
    (§ field- #_"AtomicInteger" (§ name bloomFilterGuard) (§ new #_"AtomicInteger" 0))

    #_override
    #_public
    (§ method #_"void" (§ fn beginBloomFilterCalculation) [])
    (§ block
        (§ if (§ expr 1 < (.. bloomFilterGuard (incrementAndGet))))
        (§ block
            (§ return nil)
        )

        (.. lock (lock))
        (.. keyChainGroupLock (lock))
        ;; noinspection FieldAccessNotGuarded
        (calcBloomOutPointsLocked)
        nil
    )

    #_private
    (§ method- #_"void" (§ fn calcBloomOutPointsLocked) [])
    (§ block
        ;; TODO: This could be done once and then kept up to date.
        (.. bloomOutPoints (clear))
        (§ var #_"Set<Transaction>" (§ name all) (§ new #_"HashSet<>"))
        (.. all (addAll (.. unspent (values))))
        (.. all (addAll (.. spent (values))))
        (.. all (addAll (.. pending (values))))

        (§ for (§ var #_"Transaction" (§ name tx)) :for all)
        (§ block
            (§ for (§ var #_"TransactionOutput" (§ name out)) :for (.. tx (getOutputs)))
            (§ block
                (§ try )
                (§ block
                    (§ if (isTxOutputBloomFilterable out))
                    (§ block
                        (.. bloomOutPoints (add (.. out (getOutPointFor))))
                    )
                )
                (§ catch #_"ScriptException" (§ name e))
                (§ block
                    ;; If it is ours, we parsed the script correctly, so this shouldn't happen.
                    (§ throw (§ new #_"RuntimeException" e))
                )
            )
        )
        nil
    )

    #_override
    #_guarded-by(§ opt "keyChainGroupLock")
    #_public
    (§ method #_"void" (§ fn endBloomFilterCalculation) [])
    (§ block
        (§ if (§ expr 0 < (.. bloomFilterGuard (decrementAndGet))))
        (§ block
            (§ return nil)
        )

        (.. bloomOutPoints (clear))
        (.. keyChainGroupLock (unlock))
        (.. lock (unlock))
        nil
    )

    ;;;
     ; Returns the number of distinct data items (note: NOT keys) that will be inserted into a bloom filter,
     ; when it is constructed.
     ;;
    #_override
    #_public
    (§ method #_"int" (§ fn getBloomFilterElementCount) [])
    (§ block
        (beginBloomFilterCalculation)
        (§ try )
        (§ block
            (§ return (+ (.. bloomOutPoints (size)) (.. keyChainGroup (getBloomFilterElementCount))))
        )
        (§ finally )
        (§ block
            (endBloomFilterCalculation)
        )
    )

    ;;;
     ; Gets a bloom filter that contains all of the public keys from this wallet, and which will provide the given
     ; false-positive rate.  See the docs for {@link BloomFilter} for a brief explanation of anonymity when using filters.
     ;;
    #_public
    (§ method #_"BloomFilter" (§ fn getBloomFilter) [#_"double" (§ name falsePositiveRate)])
    (§ block
        (beginBloomFilterCalculation)
        (§ try )
        (§ block
            (§ return (getBloomFilter (getBloomFilterElementCount), falsePositiveRate, (§ cast #_"long" (* (Math/random) Long/MAX_VALUE))))
        )
        (§ finally )
        (§ block
            (endBloomFilterCalculation)
        )
    )

    ;;;
     ; <p>Gets a bloom filter that contains all of the public keys from this wallet, and which will provide the given
     ; false-positive rate if it has size elements.  Keep in mind that you will get 2 elements in the bloom filter for
     ; each key in the wallet, for the public key and the hash of the public key (address form).</p>
     ;
     ; <p>This is used to generate a BloomFilter which can be {@link BloomFilter#merge(BloomFilter)}d with another.
     ; It could also be used if you have a specific target for the filter's size.</p>
     ;
     ; <p>See the docs for {@link BloomFilter(int, double)} for a brief explanation of anonymity when using bloom
     ; filters.</p>
     ;;
    #_override
    #_guarded-by(§ opt "keyChainGroupLock")
    #_public
    (§ method #_"BloomFilter" (§ fn getBloomFilter) [#_"int" (§ name size), #_"double" (§ name falsePositiveRate), #_"long" (§ name nTweak)])
    (§ block
        (beginBloomFilterCalculation)
        (§ try )
        (§ block
            (§ var #_"BloomFilter" (§ name filter) (.. keyChainGroup (getBloomFilter size, falsePositiveRate, nTweak)))
            (§ for (§ var #_"TransactionOutPoint" (§ name point)) :for bloomOutPoints)
            (§ block
                (.. filter (insert (.. point (unsafeBitcoinSerialize))))
            )
            (§ return filter)
        )
        (§ finally )
        (§ block
            (endBloomFilterCalculation)
        )
    )

    ;; Returns true if the output is one that won't be selected by a data element matching in the scriptSig.
    #_private
    (§ method- #_"boolean" (§ fn isTxOutputBloomFilterable) [#_"TransactionOutput" (§ name out)])
    (§ block
        (§ var #_"Script" (§ name script) (.. out (getScriptPubKey)))
        (§ var #_"boolean" (§ name isScriptTypeSupported) (§ expr (.. script (isSentToRawPubKey)) || (.. script (isPayToScriptHash))))
        (§ expr isScriptTypeSupported && (.. myUnspents (contains out)))
    )

    ;;;
     ; Used by {@link Peer} to decide whether or not to discard this block and any blocks building upon it, in case
     ; the Bloom filter used to request them may be exhausted, that is, not have sufficient keys in the deterministic
     ; sequence within it to reliably find relevant transactions.
     ;;
    #_public
    (§ method #_"boolean" (§ fn checkForFilterExhaustion) [#_"FilteredBlock" (§ name block)])
    (§ block
        (.. keyChainGroupLock (lock))
        (§ try )
        (§ block
            (§ var #_"int" (§ name epoch) (.. keyChainGroup (getCombinedKeyLookaheadEpochs)))
            (§ for (§ var #_"Transaction" (§ name tx)) :for (.. block (getAssociatedTransactions) (values)))
            (§ block
                (markKeysAsUsed tx)
            )
            (§ var #_"int" (§ name newEpoch) (.. keyChainGroup (getCombinedKeyLookaheadEpochs)))
            (Preconditions/checkState (<= epoch newEpoch))
            ;; If the key lookahead epoch has advanced, there was a call to importKeys and the PeerGroup already has a
            ;; pending request to recalculate the filter queued up on another thread.  The calling Peer should abandon
            ;; block at this point and await a new filter before restarting the download.
            (§ return (< epoch newEpoch))
        )
        (§ finally )
        (§ block
            (.. keyChainGroupLock (unlock))
        )
    )

    #_private
    #_static
    (§ class #_"FeeCalculation"
        ;; Selected UTXOs to spend.
        #_public
        (§ field #_"CoinSelection" (§ name bestCoinSelection))
        ;; Change output (may be null if no change).
        #_public
        (§ field #_"TransactionOutput" (§ name bestChangeOutput))
        ;; List of output values adjusted downwards when recipients pay fees (may be null if no adjustment needed).
        #_public
        (§ field #_"List<Coin>" (§ name updatedOutputValues))
    )

    #_private
    (§ method- #_"FeeCalculation" (§ fn calculateFee) [#_"SendRequest" (§ name req), #_"Coin" (§ name value), #_"List<TransactionInput>" (§ name originalInputs), #_"boolean" (§ name needAtLeastReferenceFee), #_"List<TransactionOutput>" (§ name candidates)])
        (§ throws #_"InsufficientMoneyException")
    (§ block
        (Preconditions/checkState (.. lock (isHeldByCurrentThread)))
        (§ var #_"FeeCalculation" (§ name result))
        (§ var #_"Coin" (§ name fee) Coin/ZERO)
        (§ while true)
        (§ block
            (§ ass (§ name result) (§ new #_"FeeCalculation"))
            (§ var #_"Transaction" (§ name tx) (§ new #_"Transaction" params))
            (addSuppliedInputs tx, (.. req tx (getInputs)))

            (§ var #_"Coin" (§ name valueNeeded) value)
            (§ if (§ not (.. req recipientsPayFees)))
            (§ block
                (§ ass (§ name valueNeeded) (.. valueNeeded (add fee)))
            )
            (§ if (.. req recipientsPayFees))
            (§ block
                (§ ass (§ name (.. result updatedOutputValues)) (§ new #_"ArrayList<Coin>"))
            )

            (§ for (§ var #_"int" (§ name i) 0) :for (§ expr i < (.. req tx (getOutputs) (size))) :for (§ ass (§ name i) (+ i 1)))
            (§ block
                (§ var #_"TransactionOutput" (§ name output) (§ new #_"TransactionOutput" params, tx, (.. req tx (getOutputs) (get i) (bitcoinSerialize)), 0))
                (§ if (.. req recipientsPayFees))
                (§ block
                    ;; Subtract fee equally from each selected recipient.
                    (.. output (setValue (.. output (getValue) (subtract (.. fee (divide (.. req tx (getOutputs) (size))))))))
                    ;; First receiver pays the remainder not divisible by output count.
                    (§ if (§ expr i == 0))
                    (§ block
                        ;; Subtract fee equally from each selected recipient.
                        (.. output (setValue (.. output (getValue) (subtract (§ expr (.. fee (divideAndRemainder (.. req tx (getOutputs) (size))))[1])))))
                    )
                    (.. result updatedOutputValues (add (.. output (getValue))))
                    (§ if (.. output (getMinNonDustValue) (isGreaterThan (.. output (getValue)))))
                    (§ block
                        (§ throw (§ new #_"CouldNotAdjustDownwards"))
                    )
                )
                (.. tx (addOutput output))
            )

            (§ var #_"CoinSelector" (§ name selector) (or (.. req coinSelector) coinSelector))
            ;; selector is allowed to modify candidates list.
            (§ var #_"CoinSelection" (§ name selection) (.. selector (select valueNeeded, (§ new #_"LinkedList<>" candidates))))
            (§ ass (§ name (.. result bestCoinSelection)) selection)
            ;; Can we afford this?
            (§ if (< (.. selection valueGathered (compareTo valueNeeded)) 0))
            (§ block
                (§ var #_"Coin" (§ name valueMissing) (.. valueNeeded (subtract (.. selection valueGathered))))
                (§ throw (§ new #_"InsufficientMoneyException" valueMissing))
            )

            (§ var #_"Coin" (§ name change) (.. selection valueGathered (subtract valueNeeded)))
            (§ if (.. change (isGreaterThan Coin/ZERO)))
            (§ block
                ;; The value of the inputs is greater than what we want to send.  Just like in real life then,
                ;; we need to take back some coins ... this is called "change".  Add another output that sends the change
                ;; back to us.  The address comes either from the request or currentChangeAddress() as a default.
                (§ var #_"Address" (§ name changeAddress) (.. req changeAddress))
                (§ if (nil? changeAddress))
                (§ block
                    (§ ass (§ name changeAddress) (currentChangeAddress))
                )

                (§ var #_"TransactionOutput" (§ name changeOutput) (§ new #_"TransactionOutput" params, tx, change, changeAddress))
                (§ if (§ expr (.. req recipientsPayFees) && (.. changeOutput (isDust))))
                (§ block
                    ;; We do not move dust-change to fees, because the sender would end up paying more than requested.
                    ;; This would be against the purpose of the all-inclusive feature.
                    ;; So instead we raise the change and deduct from the first recipient.
                    (§ var #_"Coin" (§ name missingToNotBeDust) (.. changeOutput (getMinNonDustValue) (subtract (.. changeOutput (getValue)))))
                    (.. changeOutput (setValue (.. changeOutput (getValue) (add missingToNotBeDust))))
                    (§ var #_"TransactionOutput" (§ name firstOutput) (.. tx (getOutputs) (get 0)))
                    (.. firstOutput (setValue (.. firstOutput (getValue) (subtract missingToNotBeDust))))
                    (.. result updatedOutputValues (set 0, (.. firstOutput (getValue))))
                    (§ if (.. firstOutput (isDust)))
                    (§ block
                        (§ throw (§ new #_"CouldNotAdjustDownwards"))
                    )
                )

                (§ if (.. changeOutput (isDust)))
                (§ block
                    ;; Never create dust outputs; if we would, just add the dust to the fee.
                    ;; Oscar comment: This seems like a way to make the condition below "if (!fee.isLessThan(feeNeeded))" to become true.
                    ;; This is a non-easy to understand way to do that.
                    ;; Maybe there are other effects I am missing.
                    (§ ass (§ name fee) (.. fee (add (.. changeOutput (getValue)))))
                )
                (§ else )
                (§ block
                    (.. tx (addOutput changeOutput))
                    (§ ass (§ name (.. result bestChangeOutput)) changeOutput)
                )
            )

            (§ for (§ var #_"TransactionOutput" (§ name selectedOutput)) :for (.. selection gathered))
            (§ block
                (§ var #_"TransactionInput" (§ name input) (.. tx (addInput selectedOutput)))
                ;; If the scriptBytes don't default to none, our size calculations will be thrown off.
                (Preconditions/checkState (== (.. input (getScriptBytes) length) 0))
            )

            (§ var #_"int" (§ name size) (.. tx (unsafeBitcoinSerialize) length))
            (§ ass (§ name size) (§ expr size + (estimateBytesForSigning selection)))

            (§ var #_"Coin" (§ name feePerKb) (.. req feePerKb))
            (§ if (§ expr needAtLeastReferenceFee && (.. feePerKb (compareTo Transaction/REFERENCE_DEFAULT_MIN_TX_FEE)) < 0))
            (§ block
                (§ ass (§ name feePerKb) Transaction/REFERENCE_DEFAULT_MIN_TX_FEE)
            )

            (§ var #_"Coin" (§ name feeNeeded) (.. feePerKb (multiply size) (divide 1000)))

            (§ if (§ not (.. fee (isLessThan feeNeeded))))
            (§ block
                ;; Done, enough fee included.
                (§ break )
            )

            ;; Include more fee and try again.
            (§ ass (§ name fee) feeNeeded)
        )
        result
    )

    #_private
    (§ method- #_"void" (§ fn addSuppliedInputs) [#_"Transaction" (§ name tx), #_"List<TransactionInput>" (§ name originalInputs)])
    (§ block
        (§ for (§ var #_"TransactionInput" (§ name input)) :for originalInputs)
        (§ block
            (.. tx (addInput (§ new #_"TransactionInput" params, tx, (.. input (bitcoinSerialize)))))
        )
        nil
    )

    #_private
    (§ method- #_"int" (§ fn estimateBytesForSigning) [#_"CoinSelection" (§ name selection)])
    (§ block
        (§ var #_"int" (§ name size) 0)
        (§ for (§ var #_"TransactionOutput" (§ name output)) :for (.. selection gathered))
        (§ block
            (§ try )
            (§ block
                (§ var #_"Script" (§ name script) (.. output (getScriptPubKey)))
                (§ var #_"ECKey" (§ name key) nil)
                (§ var #_"Script" (§ name redeemScript) nil)
                (§ if (.. script (isSentToAddress)))
                (§ block
                    (§ ass (§ name key) (findKeyFromPubHash (.. script (getPubKeyHash))))
                    (Preconditions/checkNotNull key, "Coin selection includes unspendable outputs")
                )
                (§ elseif (.. script (isPayToScriptHash)))
                (§ block
                    (§ ass (§ name redeemScript) (.. (findRedeemDataFromScriptHash (.. script (getPubKeyHash))) redeemScript))
                    (Preconditions/checkNotNull redeemScript, "Coin selection includes unspendable outputs")
                )
                (§ ass (§ name size) (§ expr size + (.. script (getNumberOfBytesRequiredToSpend key, redeemScript))))
            )
            (§ catch #_"ScriptException" (§ name e))
            (§ block
                ;; If this happens it means an output script in a wallet tx could not be understood.  That
                ;; should never happen, if it does it means the wallet has got into an inconsistent state.
                (§ throw (§ new #_"IllegalStateException" e))
            )
        )
        size
    )

    ;; Wallet maintenance transactions.  These transactions may not be directly connected to a payment the user is
    ;; making.  They may be instead key rotation transactions for when old keys are suspected to be compromised,
    ;; de/re-fragmentation transactions for when our output sizes are inappropriate or suboptimal, privacy transactions
    ;; and so on.  Because these transactions may require user intervention in some way (e.g. entering their password)
    ;; the wallet application is expected to poll the Wallet class to get SendRequests.  Ideally security systems like
    ;; hardware wallets or risk analysis providers are programmed to auto-approve transactions that send from our own
    ;; keys back to our own keys.

    ;;;
     ; <p>Specifies that the given {@link TransactionBroadcaster}, typically a {@link PeerGroup}, should be used for
     ; sending transactions to the Bitcoin network by default.  Some sendCoins methods let you specify a broadcaster
     ; explicitly, in that case, they don't use this broadcaster.  If null is specified then the wallet won't attempt
     ; to broadcast transactions itself.</p>
     ;
     ; <p>You don't normally need to call this.  A {@link PeerGroup} will automatically set itself as the wallets
     ; broadcaster when you use {@link PeerGroup#addWallet(Wallet)}.  A wallet can use the broadcaster when you ask
     ; it to send money, but in future also at other times to implement various features that may require asynchronous
     ; re-organisation of the wallet contents on the block chain.  For instance, in future the wallet may choose to
     ; optimise itself to reduce fees or improve privacy.</p>
     ;;
    #_public
    (§ method #_"void" (§ fn setTransactionBroadcaster) [#_nilable #_"org.bitcoinj.core.TransactionBroadcaster" (§ name broadcaster)])
    (§ block
        (§ var #_"Transaction[]" (§ name toBroadcast) (§ new #_"Transaction[]"))
        (.. lock (lock))
        (§ try )
        (§ block
            (§ if (§ expr vTransactionBroadcaster == broadcaster))
            (§ block
                (§ return nil)
            )
            (§ ass (§ name vTransactionBroadcaster) broadcaster)
            (§ if (nil? broadcaster))
            (§ block
                (§ return nil)
            )
            (§ ass (§ name toBroadcast) (.. pending (values) (toArray toBroadcast)))
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
        ;; Now use it to upload any pending transactions we have that are marked as not being seen by any peers yet.
        ;; Don't hold the wallet lock whilst doing this, so if the broadcaster accesses the wallet at some point there
        ;; is no inversion.
        (§ for (§ var #_"Transaction" (§ name tx)) :for toBroadcast)
        (§ block
            (§ var #_"ConfidenceType" (§ name confidenceType) (.. tx (getConfidence) (getConfidenceType)))
            (Preconditions/checkState (§ or (== confidenceType ConfidenceType/PENDING) || (== confidenceType ConfidenceType/IN_CONFLICT)), "Expected PENDING or IN_CONFLICT, was %s.", confidenceType)
            ;; Re-broadcast even if it's marked as already seen for two reasons:
            ;; 1. Old wallets may have transactions marked as broadcast by 1 peer when
            ;;    in reality the network never saw it, due to bugs.
            ;; 2. It can't really hurt.
            (.. log (info "New broadcaster so uploading waiting tx {}", (.. tx (getHash))))
            (.. broadcaster (broadcastTransaction tx))
        )
        nil
    )

    ;;;
     ; When a key rotation time is set, and money controlled by keys created before the given timestamp T will be
     ; automatically respent to any key that was created after T.  This can be used to recover from a situation where
     ; a set of keys is believed to be compromised.  Once the time is set transactions will be created and broadcast
     ; immediately.  New coins that come in after calling this method will be automatically respent immediately.
     ; The rotation time is persisted to the wallet. You can stop key rotation by calling this method again with zero
     ; as the argument.
     ;;
    #_public
    (§ method #_"void" (§ fn setKeyRotationTime) [#_"Date" (§ name time)])
    (§ block
        (setKeyRotationTime (/ (.. time (getTime)) 1000))
        nil
    )

    ;;;
     ; Returns the key rotation time, or null if unconfigured.
     ; See {@link #setKeyRotationTime(Date)} for a description of the field.
     ;;
    #_public
    #_nilable
    (§ method #_"Date" (§ fn getKeyRotationTime) [])
    (§ block
        (§ var #_"long" (§ name keyRotationTimestamp) vKeyRotationTimestamp)
        (when (§ expr keyRotationTimestamp != 0) (§ new #_"Date" (* keyRotationTimestamp 1000)))
    )

    ;;;
     ; <p>When a key rotation time is set, any money controlled by keys created before the given timestamp T will be
     ; automatically respent to any key that was created after T.  This can be used to recover from a situation where
     ; a set of keys is believed to be compromised.  You can stop key rotation by calling this method again with zero
     ; as the argument.  Once set up, calling {@link #doMaintenance(org.spongycastle.crypto.params.KeyParameter, boolean)}
     ; will create and possibly send rotation transactions: but it won't be done automatically (because you might have
     ; to ask for the users password).</p>
     ;
     ; <p>The given time cannot be in the future.</p>
     ;;
    #_public
    (§ method #_"void" (§ fn setKeyRotationTime) [#_"long" (§ name unixTimeSeconds)])
    (§ block
        (Preconditions/checkArgument (<= unixTimeSeconds (Utils/currentTimeSeconds)), "Given time (%s) cannot be in the future.", (Utils/dateTimeFormat (* unixTimeSeconds 1000)))
        (§ ass (§ name vKeyRotationTimestamp) unixTimeSeconds)
        (saveNow)
        nil
    )

    ;;; Returns whether the keys creation time is before the key rotation time, if one was set. ;;
    #_public
    (§ method #_"boolean" (§ fn isKeyRotating) [#_"ECKey" (§ name key)])
    (§ block
        (§ var #_"long" (§ name time) vKeyRotationTimestamp)
        (§ expr time != 0 && (.. key (getCreationTimeSeconds)) < time)
    )

    ;;;
     ; A wallet app should call this from time to time in order to let the wallet craft and send transactions needed
     ; to re-organise coins internally.  A good time to call this would be after receiving coins for an unencrypted
     ; wallet, or after sending money for an encrypted wallet.  If you have an encrypted wallet and just want to know
     ; if some maintenance needs doing, call this method with andSend set to false and look at the returned list of
     ; transactions.  Maintenance might also include internal changes that involve some processing or work but
     ; which don't require making transactions - these will happen automatically unless the password is required
     ; in which case an exception will be thrown.
     ;
     ; @param aesKey The users password, if any.
     ; @param signAndSend If true, send the transactions via the tx broadcaster and return them, if false just return them.
     ; @return a list of transactions that the wallet just made/will make for internal maintenance.  Might be empty.
     ; @throws org.bitcoinj.wallet.DeterministicUpgradeRequiresPassword if key rotation requires the users password.
     ;;
    #_public
    (§ method #_"ListenableFuture<List<Transaction>>" (§ fn doMaintenance) [#_nilable #_"KeyParameter" (§ name aesKey), #_"boolean" (§ name signAndSend)])
        (§ throws #_"DeterministicUpgradeRequiresPassword")
    (§ block
        (§ var #_"List<Transaction>" (§ name txns))
        (.. lock (lock))
        (.. keyChainGroupLock (lock))
        (§ try )
        (§ block
            (§ ass (§ name txns) (maybeRotateKeys aesKey, signAndSend))
            (§ if (§ not signAndSend))
            (§ block
                (§ return (Futures/immediateFuture txns))
            )
        )
        (§ finally )
        (§ block
            (.. keyChainGroupLock (unlock))
            (.. lock (unlock))
        )
        (Preconditions/checkState (§ not (.. lock (isHeldByCurrentThread))))
        (§ var #_"ArrayList<ListenableFuture<Transaction>>" (§ name futures) (§ new #_"ArrayList<>" (.. txns (size))))
        (§ var #_"TransactionBroadcaster" (§ name broadcaster) vTransactionBroadcaster)
        (§ for (§ var #_"Transaction" (§ name tx)) :for txns)
        (§ block
            (§ try )
            (§ block
                (§ var #_"ListenableFuture<Transaction>" (§ name future) (.. broadcaster (broadcastTransaction tx) (future)))
                (.. futures (add future))
                (Futures/addCallback future, (§ new #_"FutureCallback<Transaction>")
                (§ anon
                    #_override
                    #_public
                    (§ method #_"void" (§ fn onSuccess) [#_"Transaction" (§ name transaction)])
                    (§ block
                        (.. log (info "Successfully broadcast key rotation tx: {}", transaction))
                        nil
                    )

                    #_override
                    #_public
                    (§ method #_"void" (§ fn onFailure) [#_"Throwable" (§ name throwable)])
                    (§ block
                        (.. log (error "Failed to broadcast key rotation tx", throwable))
                        nil
                    )
                ))
            )
            (§ catch #_"Exception" (§ name e))
            (§ block
                (.. log (error "Failed to broadcast rekey tx", e))
            )
        )
        (Futures/allAsList futures)
    )

    ;; Checks to see if any coins are controlled by rotating keys and if so, spends them.
    #_guarded-by(§ opt "keyChainGroupLock")
    #_private
    (§ method- #_"List<Transaction>" (§ fn maybeRotateKeys) [#_nilable #_"KeyParameter" (§ name aesKey), #_"boolean" (§ name sign)])
        (§ throws #_"DeterministicUpgradeRequiresPassword")
    (§ block
        (Preconditions/checkState (.. lock (isHeldByCurrentThread)))
        (Preconditions/checkState (.. keyChainGroupLock (isHeldByCurrentThread)))

        (§ var #_"List<Transaction>" (§ name results) (Lists/newLinkedList))
        ;; TODO: Handle chain replays here.
        (§ var #_"long" (§ name keyRotationTimestamp) vKeyRotationTimestamp)
        (§ if (§ expr keyRotationTimestamp == 0))
        (§ block
            (§ return results) ;; Nothing to do.
        )

        ;; We might have to create a new HD hierarchy if the previous ones are now rotating.
        (§ var #_"boolean" (§ name allChainsRotating) true)
        (§ for (§ var #_"DeterministicKeyChain" (§ name chain)) :for (.. keyChainGroup (getDeterministicKeyChains)))
        (§ block
            (§ if (§ expr keyRotationTimestamp <= (.. chain (getEarliestKeyCreationTime))))
            (§ block
                (§ ass (§ name allChainsRotating) false)
                (§ break )
            )
        )
        (§ if allChainsRotating)
        (§ block
            (§ try )
            (§ block
                (§ if (.. keyChainGroup (getImportedKeys) (isEmpty)))
                (§ block
                    (.. log (info "All HD chains are currently rotating and we have no random keys, creating fresh HD chain ..."))
                    (.. keyChainGroup (createAndActivateNewHDChain))
                )
                (§ else )
                (§ block
                    (.. log (info "All HD chains are currently rotating, attempting to create a new one from the next oldest non-rotating key material ..."))
                    (.. keyChainGroup (upgradeToDeterministic keyRotationTimestamp, aesKey))
                    (.. log (info " ... upgraded to HD again, based on next best oldest key."))
                )
            )
            (§ catch #_"AllRandomKeysRotating" (§ name _))
            (§ block
                (.. log (info " ... no non-rotating random keys available, generating entirely new HD tree: backup required after this."))
                (.. keyChainGroup (createAndActivateNewHDChain))
            )
            (saveNow)
        )

        ;; Because transactions are size limited, we might not be able to re-key the entire wallet in one go.  So loop
        ;; around here until we no longer produce transactions with the max number of inputs.  That means we're fully
        ;; done, at least for now (we may still get more transactions later and this method will be reinvoked).
        (§ var #_"Transaction" (§ name tx))
        (§ do )
        (§ block
            (§ ass (§ name tx) (rekeyOneBatch keyRotationTimestamp, aesKey, results, sign))
            (§ if (some? tx))
            (§ block
                (.. results (add tx))
            )
        )
        (§ again (§ expr tx != nil && (.. tx (getInputs) (size)) == KeyTimeCoinSelector/MAX_SIMULTANEOUS_INPUTS))

        results
    )

    #_nilable
    #_private
    (§ method- #_"Transaction" (§ fn rekeyOneBatch) [#_"long" (§ name timeSecs), #_nilable #_"KeyParameter" (§ name aesKey), #_"List<Transaction>" (§ name others), #_"boolean" (§ name sign)])
    (§ block
        (.. lock (lock))
        (§ try )
        (§ block
            ;; Build the transaction using some custom logic for our special needs.  Last parameter to
            ;; KeyTimeCoinSelector is whether to ignore pending transactions or not.
            ;;
            ;; We ignore pending outputs because trying to rotate these is basically racing an attacker, and
            ;; we're quite likely to lose and create stuck double spends.  Also, some users who have 0.9 wallets
            ;; have already got stuck double spends in their wallet due to the Bloom-filtering block reordering
            ;; bug that was fixed in 0.10, thus, making a re-key transaction depend on those would cause it to
            ;; never confirm at all.
            (§ var #_"CoinSelector" (§ name keyTimeSelector) (§ new #_"KeyTimeCoinSelector" this, timeSecs, true))
            (§ var #_"FilteringCoinSelector" (§ name selector) (§ new #_"FilteringCoinSelector" keyTimeSelector))
            (§ for (§ var #_"Transaction" (§ name other)) :for others)
            (§ block
                (.. selector (excludeOutputsSpentBy other))
            )
            ;; TODO: Make this use the standard SendRequest.
            (§ var #_"CoinSelection" (§ name toMove) (.. selector (select Coin/ZERO, (calculateAllSpendCandidates))))
            (§ if (.. toMove valueGathered (equals Coin/ZERO)))
            (§ block
                (§ return nil) ;; Nothing to do.
            )

            (maybeUpgradeToHD aesKey)
            (§ var #_"Transaction" (§ name rekeyTx) (§ new #_"Transaction" params))
            (§ for (§ var #_"TransactionOutput" (§ name output)) :for (.. toMove gathered))
            (§ block
                (.. rekeyTx (addInput output))
            )
            ;; When not signing, don't waste addresses.
            (.. rekeyTx (addOutput (.. toMove valueGathered), (if sign (freshReceiveAddress) (currentReceiveAddress))))
            (§ if (§ not (adjustOutputDownwardsForFee rekeyTx, toMove, Transaction/DEFAULT_TX_FEE, true)))
            (§ block
                (.. log (error "Failed to adjust rekey tx for fees."))
                (§ return nil)
            )

            (.. rekeyTx (getConfidence) (setSource TransactionConfidence/Source/SELF))
            (.. rekeyTx (setPurpose Transaction/Purpose/KEY_ROTATION))
            (§ var #_"SendRequest" (§ name req) (SendRequest/forTx rekeyTx))
            (§ ass (§ name (.. req aesKey)) aesKey)
            (§ if sign)
            (§ block
                (signTransaction req)
            )
            ;; KeyTimeCoinSelector should never select enough inputs to push us oversize.
            (Preconditions/checkState (< (.. rekeyTx (unsafeBitcoinSerialize) length) Transaction/MAX_STANDARD_TX_SIZE))
            (§ return rekeyTx)
        )
        (§ catch #_"VerificationException" (§ name e))
        (§ block
            (§ throw (§ new #_"RuntimeException" e)) ;; Cannot happen.
        )
        (§ finally )
        (§ block
            (.. lock (unlock))
        )
    )
)

#_(ns org.bitcoinj.wallet #_"WalletFiles"
    (:import [java.io *]
             [java.util Date]
             [java.util.concurrent *]
             [java.util.concurrent.atomic *])
    (:import [com.google.common.base Preconditions Stopwatch]
             [org.slf4j *])
   (:require [org.bitcoinj.core *]
             [org.bitcoinj.utils *]))

;;;
 ; A class that handles atomic and optionally delayed writing of the wallet file to disk.  In future: backups too.
 ; It can be useful to delay writing of a wallet file to disk on slow devices where disk and serialization overhead
 ; can come to dominate the chain processing speed, i.e. on Android phones.  By coalescing writes and doing
 ; serialization and disk IO on a background thread performance can be improved.
 ;;
#_public
(§ class #_"WalletFiles"
    #_private
    #_static
    (§ def- #_"Logger" (§ name log) (LoggerFactory/getLogger (§ klass #_"WalletFiles")))

    #_private
    (§ field- #_"Wallet" (§ name wallet))
    #_private
    (§ field- #_"ScheduledThreadPoolExecutor" (§ name executor))
    #_private
    (§ field- #_"File" (§ name file))
    #_private
    (§ field- #_"AtomicBoolean" (§ name savePending))
    #_private
    (§ field- #_"long" (§ name delay))
    #_private
    (§ field- #_"TimeUnit" (§ name delayTimeUnit))
    #_private
    (§ field- #_"Callable<Void>" (§ name saver))

    #_private
    #_volatile
    (§ field- #_"Listener" (§ name vListener))

    ;;;
     ; Implementors can do pre/post treatment of the wallet file.  Useful for adjusting permissions and other things.
     ;;
    #_public
    (§ interface #_"Listener"
        ;;;
         ; Called on the auto-save thread when a new temporary file is created but before the wallet data is saved
         ; to it.  If you want to do something here like adjust permissions, go ahead and do so.
         ;;
        (§ method #_"void" (§ fn onBeforeAutoSave) [#_"File" (§ name tempFile)])

        ;;;
         ; Called on the auto-save thread after the newly created temporary file has been filled with data and renamed.
         ;;
        (§ method #_"void" (§ fn onAfterAutoSave) [#_"File" (§ name newlySavedFile)])
    )

    ;;;
     ; Initialize atomic and optionally delayed writing of the wallet file to disk.  Note the initial wallet state isn't
     ; saved automatically.  The {@link Wallet} calls {@link #saveNow()} or {@link #saveLater()} as wallet state changes,
     ; depending on the urgency of the changes.
     ;;
    #_public
    (§ constructor #_"WalletFiles" [#_"Wallet" (§ name wallet), #_"File" (§ name file), #_"long" (§ name delay), #_"TimeUnit" (§ name delayTimeUnit)])
    (§ block
        ;; An executor that starts up threads when needed and shuts them down later.
        (§ ass (§ name (.. this executor)) (§ new #_"ScheduledThreadPoolExecutor" 1, (§ new #_"ContextPropagatingThreadFactory" "Wallet autosave thread", Thread/MIN_PRIORITY)))
        (.. this executor (setKeepAliveTime 5, TimeUnit/SECONDS))
        (.. this executor (allowCoreThreadTimeOut true))
        (.. this executor (setExecuteExistingDelayedTasksAfterShutdownPolicy false))
        (§ ass (§ name (.. this wallet)) (Preconditions/checkNotNull wallet))
        ;; File must only be accessed from the auto-save executor from now on, to avoid simultaneous access.
        (§ ass (§ name (.. this file)) (Preconditions/checkNotNull file))
        (§ ass (§ name (.. this savePending)) (§ new #_"AtomicBoolean"))
        (§ ass (§ name (.. this delay)) delay)
        (§ ass (§ name (.. this delayTimeUnit)) (Preconditions/checkNotNull delayTimeUnit))

        (§ ass (§ name (.. this saver)) (§ new #_"Callable<Void>"
        (§ anon
            #_override
            #_public
            (§ method #_"Void" (§ fn call) [])
                (§ throws #_"Exception")
            (§ block
                ;; Runs in an auto save thread.
                (§ if (§ not (.. savePending (getAndSet false))))
                (§ block
                    ;; Some other scheduled request already beat us to it.
                    (§ return nil)
                )
                (§ var #_"Date" (§ name lastBlockSeenTime) (.. wallet (getLastBlockSeenTime)))
                (.. log (info "Background saving wallet; last seen block is height {}, date {}, hash {}", (.. wallet (getLastBlockSeenHeight)), (if (some? lastBlockSeenTime) (Utils/dateTimeFormat lastBlockSeenTime) "unknown"), (.. wallet (getLastBlockSeenHash))))
                (saveNowInternal)
                nil
            )
        )))
        this
    )

    ;;;
     ; The given listener will be called on the autosave thread before and after the wallet is saved to disk.
     ;;
    #_public
    (§ method #_"void" (§ fn setListener) [#_non-nil #_"Listener" (§ name listener)])
    (§ block
        (§ ass (§ name (.. this vListener)) (Preconditions/checkNotNull listener))
        nil
    )

    ;;; Actually write the wallet file to disk, using an atomic rename when possible.  Runs on the current thread. ;;
    #_public
    (§ method #_"void" (§ fn saveNow) [])
        (§ throws #_"IOException")
    (§ block
        ;; Can be called by any thread. However the wallet is locked whilst saving, so we can have two saves
        ;; in flight, but they will serialize (using different temp files).
        (§ var #_"Date" (§ name lastBlockSeenTime) (.. wallet (getLastBlockSeenTime)))
        (.. log (info "Saving wallet; last seen block is height {}, date {}, hash {}", (.. wallet (getLastBlockSeenHeight)), (if (some? lastBlockSeenTime) (Utils/dateTimeFormat lastBlockSeenTime) "unknown"), (.. wallet (getLastBlockSeenHash))))
        (saveNowInternal)
        nil
    )

    #_private
    (§ method- #_"void" (§ fn saveNowInternal) [])
        (§ throws #_"IOException")
    (§ block
        (§ var #_"Stopwatch" (§ name watch) (Stopwatch/createStarted))
        (§ var #_"File" (§ name directory) (.. file (getAbsoluteFile) (getParentFile)))
        (§ var #_"File" (§ name temp) (File/createTempFile "wallet", nil, directory))
        (§ var #_"Listener" (§ name listener) vListener)
        (§ if (some? listener))
        (§ block
            (.. listener (onBeforeAutoSave temp))
        )
        (.. wallet (saveToFile temp, file))
        (§ if (some? listener))
        (§ block
            (.. listener (onAfterAutoSave file))
        )
        (.. watch (stop))
        (.. log (info "Save completed in {}", watch))
        nil
    )

    ;;; Queues up a save in the background.  Useful for not very important wallet changes. ;;
    #_public
    (§ method #_"void" (§ fn saveLater) [])
    (§ block
        (§ if (.. savePending (getAndSet true)))
        (§ block
            (§ return nil) ;; Already pending.
        )

        (.. executor (schedule saver, delay, delayTimeUnit))
        nil
    )

    ;;; Shut down auto-saving. ;;
    #_public
    (§ method #_"void" (§ fn shutdownAndWait) [])
    (§ block
        (.. executor (shutdown))
        (§ try )
        (§ block
            (.. executor (awaitTermination Long/MAX_VALUE, TimeUnit/DAYS)) ;; forever
        )
        (§ catch #_"InterruptedException" (§ name e))
        (§ block
            (§ throw (§ new #_"RuntimeException" e))
        )
        nil
    )
)

#_(ns org.bitcoinj.wallet #_"WalletProtobufSerializer"
    (:import [java.io IOException InputStream OutputStream]
             [java.math BigInteger]
             [java.net InetAddress UnknownHostException]
             [java.util *])
    (:import [com.google.common.base Preconditions]
             [com.google.common.collect Lists]
             [com.google.protobuf ByteString CodedInputStream CodedOutputStream TextFormat WireFormat]
             [org.slf4j Logger LoggerFactory])
   (:require [org.bitcoinj.core *]
             [org.bitcoinj.core.TransactionConfidence ConfidenceType]
             [org.bitcoinj.crypto KeyCrypter KeyCrypterScrypt]
             [org.bitcoinj.script Script]
             [org.bitcoinj.signers LocalTransactionSigner TransactionSigner]
             [org.bitcoinj.utils ExchangeRate Fiat]
             [org.bitcoinj.wallet.Protos.Wallet EncryptionType]))

;;;
 ; Serialize and de-serialize a wallet to a byte stream containing a
 ; <a href="https://developers.google.com/protocol-buffers/docs/overview">protocol buffer</a>.  Protocol buffers are
 ; a data interchange format developed by Google with an efficient binary representation, a type safe specification
 ; language and compilers that generate code to work with those data structures for many languages.  Protocol buffers
 ; can have their format evolved over time: conceptually they represent data using (tag, length, value) tuples.  The
 ; format is defined by the <tt>wallet.proto</tt> file in the bitcoinj source distribution.
 ;
 ; This class is used through its static methods.  The most common operations are writeWallet and readWallet, which do
 ; the obvious operations on Output/InputStreams.  You can use a {@link java.io.ByteArrayInputStream} and equivalent
 ; {@link java.io.ByteArrayOutputStream} if you'd like byte arrays instead.  The protocol buffer can also be manipulated
 ; in its object form if you'd like to modify the flattened data structure before serialization to binary.
 ;
 ; You can extend the wallet format with additional fields specific to your application if you want, but make sure
 ; to either put the extra data in the provided extension areas, or select tag numbers that are unlikely to be used
 ; by anyone else.
 ;
 ; @author Miron Cuperman
 ; @author Andreas Schildbach
 ;;
#_public
(§ class #_"WalletProtobufSerializer"
    #_private
    #_static
    (§ def- #_"Logger" (§ name log) (LoggerFactory/getLogger (§ klass #_"WalletProtobufSerializer")))

    ;;; Current version used for serializing wallets.  A version higher than this is considered from the future. ;;
    #_public
    #_static
    (§ def #_"int" (§ name CURRENT_WALLET_VERSION) (.. (Protos/Wallet/getDefaultInstance) (getVersion)))
    ;; 512 MB
    #_private
    #_static
    (§ def- #_"int" (§ name WALLET_SIZE_LIMIT) (§ expr 512 * 1024 * 1024))
    ;; Used for de-serialization.
    #_protected
    (§ field #_"Map<ByteString, Transaction>" (§ name txMap))

    #_private
    (§ field- #_"int" (§ name walletWriteBufferSize) CodedOutputStream/DEFAULT_BUFFER_SIZE)

    #_public
    (§ interface #_"WalletFactory"
        (§ method #_"Wallet" (§ fn create) [#_"NetworkParameters" (§ name params), #_"KeyChainGroup" (§ name keyChainGroup)])
    )

    #_private
    (§ field- #_"WalletFactory" (§ name factory))
    #_private
    (§ field- #_"KeyChainFactory" (§ name keyChainFactory))

    #_public
    (§ constructor #_"WalletProtobufSerializer" [])
    (§ block
        (§ this (§ new #_"WalletFactory"
        (§ anon
            #_override
            #_public
            (§ method #_"Wallet" (§ fn create) [#_"NetworkParameters" (§ name params), #_"KeyChainGroup" (§ name keyChainGroup)])
            (§ block
                (§ new #_"Wallet" params, keyChainGroup)
            )
        )))
        this
    )

    #_public
    (§ constructor #_"WalletProtobufSerializer" [#_"WalletFactory" (§ name factory)])
    (§ block
        (§ ass (§ name txMap) (§ new #_"HashMap<>"))
        (§ ass (§ name (.. this factory)) factory)
        (§ ass (§ name (.. this keyChainFactory)) (§ new #_"DefaultKeyChainFactory"))
        this
    )

    #_public
    (§ method #_"void" (§ fn setKeyChainFactory) [#_"KeyChainFactory" (§ name keyChainFactory)])
    (§ block
        (§ ass (§ name (.. this keyChainFactory)) keyChainFactory)
        nil
    )

    ;;;
     ; Change buffer size for writing wallet to output stream.
     ; Default is {@link com.google.protobuf.CodedOutputStream.DEFAULT_BUFFER_SIZE}.
     ; @param walletWriteBufferSize Buffer size in bytes.
     ;;
    #_public
    (§ method #_"void" (§ fn setWalletWriteBufferSize) [#_"int" (§ name walletWriteBufferSize)])
    (§ block
        (§ ass (§ name (.. this walletWriteBufferSize)) walletWriteBufferSize)
        nil
    )

    ;;;
     ; Formats the given wallet (transactions and keys) to the given output stream in protocol buffer format.
     ;
     ; Equivalent to <tt>walletToProto(wallet).writeTo(output)</tt>.
     ;;
    #_public
    (§ method #_"void" (§ fn writeWallet) [#_"Wallet" (§ name wallet), #_"OutputStream" (§ name output)])
        (§ throws #_"IOException")
    (§ block
        (§ var #_"Protos.Wallet" (§ name walletProto) (walletToProto wallet))
        (§ var #_"CodedOutputStream" (§ name codedOutput) (CodedOutputStream/newInstance output, (.. this walletWriteBufferSize)))
        (.. walletProto (writeTo codedOutput))
        (.. codedOutput (flush))
        nil
    )

    ;;;
     ; Returns the given wallet formatted as text.  The text format is that used by protocol buffers and although
     ; it can also be parsed using {@link TextFormat#merge(CharSequence, com.google.protobuf.Message.Builder)},
     ; it is designed more for debugging than storage.  It is not well specified and wallets are largely binary data
     ; structures anyway, consisting as they do of keys (large random numbers) and {@link Transaction}s which also
     ; mostly contain keys and hashes.
     ;;
    #_public
    (§ method #_"String" (§ fn walletToText) [#_"Wallet" (§ name wallet)])
    (§ block
        (§ var #_"Protos.Wallet" (§ name walletProto) (walletToProto wallet))
        (TextFormat/printToString walletProto)
    )

    ;;;
     ; Converts the given wallet to the object representation of the protocol buffers.  This can be modified, or
     ; additional data fields set, before serialization takes place.
     ;;
    #_public
    (§ method #_"Protos.Wallet" (§ fn walletToProto) [#_"Wallet" (§ name wallet)])
    (§ block
        (§ var #_"Protos.Wallet.Builder" (§ name walletBuilder) (.. Protos/Wallet (newBuilder)))
        (.. walletBuilder (setNetworkIdentifier (.. wallet (getNetworkParameters) (getId))))
        (§ if (!= (.. wallet (getDescription)) nil))
        (§ block
            (.. walletBuilder (setDescription (.. wallet (getDescription))))
        )

        (§ for (§ var #_"WalletTransaction" (§ name wtx)) :for (.. wallet (getWalletTransactions)))
        (§ block
            (§ var #_"Protos.Transaction" (§ name txProto) (makeTxProto wtx))
            (.. walletBuilder (addTransaction txProto))
        )

        (.. walletBuilder (addAllKey (.. wallet (serializeKeyChainGroupToProtobuf))))

        ;; Populate the lastSeenBlockHash field.
        (§ var #_"Sha256Hash" (§ name lastSeenBlockHash) (.. wallet (getLastBlockSeenHash)))
        (§ if (some? lastSeenBlockHash))
        (§ block
            (.. walletBuilder (setLastSeenBlockHash (hashToByteString lastSeenBlockHash)))
            (.. walletBuilder (setLastSeenBlockHeight (.. wallet (getLastBlockSeenHeight))))
        )
        (§ if (§ expr 0 < (.. wallet (getLastBlockSeenTimeSecs))))
        (§ block
            (.. walletBuilder (setLastSeenBlockTimeSecs (.. wallet (getLastBlockSeenTimeSecs))))
        )

        ;; Populate the scrypt parameters.
        (§ var #_"KeyCrypter" (§ name keyCrypter) (.. wallet (getKeyCrypter)))
        (§ if (nil? keyCrypter))
        (§ block
            ;; The wallet is unencrypted.
            (.. walletBuilder (setEncryptionType EncryptionType/UNENCRYPTED))
        )
        (§ else )
        (§ block
            ;; The wallet is encrypted.
            (.. walletBuilder (setEncryptionType (.. keyCrypter (getUnderstoodEncryptionType))))
            (§ if (§ insta keyCrypter #_"KeyCrypterScrypt"))
            (§ block
                (§ var #_"KeyCrypterScrypt" (§ name keyCrypterScrypt) (§ cast #_"KeyCrypterScrypt" keyCrypter))
                (.. walletBuilder (setEncryptionParameters (.. keyCrypterScrypt (getScryptParameters))))
            )
            (§ else )
            (§ block
                ;; Some other form of encryption has been specified that we do not know how to persist.
                (§ throw (§ new #_"RuntimeException" (§ expr "The wallet has encryption of type '" + (.. keyCrypter (getUnderstoodEncryptionType)) + "' but this WalletProtobufSerializer does not know how to persist this.")))
            )
        )

        (§ if (!= (.. wallet (getKeyRotationTime)) nil))
        (§ block
            (§ var #_"long" (§ name timeSecs) (/ (.. wallet (getKeyRotationTime) (getTime)) 1000))
            (.. walletBuilder (setKeyRotationTime timeSecs))
        )

        (§ for (§ var #_"TransactionSigner" (§ name signer)) :for (.. wallet (getTransactionSigners)))
        (§ block
            ;; Do not serialize LocalTransactionSigner as it's being added implicitly.
            (§ if (§ insta signer #_"LocalTransactionSigner"))
            (§ block
                (§ continue )
            )

            (§ var #_"Protos.TransactionSigner.Builder" (§ name protoSigner) (.. Protos/TransactionSigner (newBuilder)))
            (.. protoSigner (setClassName (.. signer (getClass) (getName))))
            (.. protoSigner (setData (ByteString/copyFrom (.. signer (serialize)))))
            (.. walletBuilder (addTransactionSigners protoSigner))
        )

        ;; Populate the wallet version.
        (.. walletBuilder (setVersion (.. wallet (getVersion))))

        (.. walletBuilder (build))
    )

    #_private
    #_static
    (§ defn- #_"Protos.Transaction" (§ fn makeTxProto) [#_"WalletTransaction" (§ name wtx)])
    (§ block
        (§ var #_"Transaction" (§ name tx) (.. wtx (getTransaction)))
        (§ var #_"Protos.Transaction.Builder" (§ name txBuilder) (.. Protos/Transaction (newBuilder)))

        (.. txBuilder (setPool (getProtoPool wtx)) (setHash (hashToByteString (.. tx (getHash)))) (setVersion (§ cast #_"int" (.. tx (getVersion)))))

        (§ if (!= (.. tx (getUpdateTime)) nil))
        (§ block
            (.. txBuilder (setUpdatedAt (.. tx (getUpdateTime) (getTime))))
        )

        (§ if (§ expr 0 < (.. tx (getLockTime))))
        (§ block
            (.. txBuilder (setLockTime (§ cast #_"int" (.. tx (getLockTime)))))
        )

        ;; Handle inputs.
        (§ for (§ var #_"TransactionInput" (§ name input)) :for (.. tx (getInputs)))
        (§ block
            (§ var #_"Protos.TransactionInput.Builder" (§ name inputBuilder) (.. (Protos/TransactionInput/newBuilder) (setScriptBytes (ByteString/copyFrom (.. input (getScriptBytes)))) (setTransactionOutPointHash (hashToByteString (.. input (getOutpoint) (getHash)))) (setTransactionOutPointIndex (§ cast #_"int" (.. input (getOutpoint) (getIndex))))))
            (§ if (.. input (hasSequence)))
            (§ block
                (.. inputBuilder (setSequence (§ cast #_"int" (.. input (getSequenceNumber)))))
            )
            (§ if (!= (.. input (getValue)) nil))
            (§ block
                (.. inputBuilder (setValue (.. input (getValue) value)))
            )
            (.. txBuilder (addTransactionInput inputBuilder))
        )

        ;; Handle outputs.
        (§ for (§ var #_"TransactionOutput" (§ name output)) :for (.. tx (getOutputs)))
        (§ block
            (§ var #_"Protos.TransactionOutput.Builder" (§ name outputBuilder) (.. (Protos/TransactionOutput/newBuilder) (setScriptBytes (ByteString/copyFrom (.. output (getScriptBytes)))) (setValue (.. output (getValue) value))))
            (§ var #_"TransactionInput" (§ name spentBy) (.. output (getSpentBy)))
            (§ if (some? spentBy))
            (§ block
                (§ var #_"Sha256Hash" (§ name spendingHash) (.. spentBy (getParentTransaction) (getHash)))
                (§ var #_"int" (§ name spentByTransactionIndex) (.. spentBy (getParentTransaction) (getInputs) (indexOf spentBy)))
                (.. outputBuilder (setSpentByTransactionHash (hashToByteString spendingHash)) (setSpentByTransactionIndex spentByTransactionIndex))
            )
            (.. txBuilder (addTransactionOutput outputBuilder))
        )

        ;; Handle which blocks tx was seen in.
        (§ var #_"Map<Sha256Hash, Integer>" (§ name appearsInHashes) (.. tx (getAppearsInHashes)))
        (§ if (some? appearsInHashes))
        (§ block
            (§ for (§ var #_"Map.Entry<Sha256Hash, Integer>" (§ name entry)) :for (.. appearsInHashes (entrySet)))
            (§ block
                (.. txBuilder (addBlockHash (hashToByteString (.. entry (getKey)))))
                (.. txBuilder (addBlockRelativityOffsets (.. entry (getValue))))
            )
        )

        (§ if (.. tx (hasConfidence)))
        (§ block
            (§ var #_"TransactionConfidence" (§ name confidence) (.. tx (getConfidence)))
            (§ var #_"Protos.TransactionConfidence.Builder" (§ name confidenceBuilder) (.. Protos/TransactionConfidence (newBuilder)))
            (writeConfidence txBuilder, confidence, confidenceBuilder)
        )

        (§ var #_"Protos.Transaction.Purpose" (§ name purpose))
        (§ switch (.. tx (getPurpose)))
        (§ block
            (§ case UNKNOWN)
            (§ block
                (§ ass (§ name purpose) Protos/Transaction/Purpose/UNKNOWN)
                (§ break )
            )
            (§ case USER_PAYMENT)
            (§ block
                (§ ass (§ name purpose) Protos/Transaction/Purpose/USER_PAYMENT)
                (§ break )
            )
            (§ case KEY_ROTATION)
            (§ block
                (§ ass (§ name purpose) Protos/Transaction/Purpose/KEY_ROTATION)
                (§ break )
            )
            (§ case ASSURANCE_CONTRACT_CLAIM)
            (§ block
                (§ ass (§ name purpose) Protos/Transaction/Purpose/ASSURANCE_CONTRACT_CLAIM)
                (§ break )
            )
            (§ case ASSURANCE_CONTRACT_PLEDGE)
            (§ block
                (§ ass (§ name purpose) Protos/Transaction/Purpose/ASSURANCE_CONTRACT_PLEDGE)
                (§ break )
            )
            (§ case ASSURANCE_CONTRACT_STUB)
            (§ block
                (§ ass (§ name purpose) Protos/Transaction/Purpose/ASSURANCE_CONTRACT_STUB)
                (§ break )
            )
            (§ case RAISE_FEE)
            (§ block
                (§ ass (§ name purpose) Protos/Transaction/Purpose/RAISE_FEE)
                (§ break )
            )
            (§ default )
            (§ block
                (§ throw (§ new #_"RuntimeException" "New tx purpose serialization not implemented."))
            )
        )
        (.. txBuilder (setPurpose purpose))

        (§ var #_"ExchangeRate" (§ name exchangeRate) (.. tx (getExchangeRate)))
        (§ if (some? exchangeRate))
        (§ block
            (§ var #_"Protos.ExchangeRate.Builder" (§ name exchangeRateBuilder) (.. (Protos/ExchangeRate/newBuilder) (setCoinValue (.. exchangeRate coin value)) (setFiatValue (.. exchangeRate fiat value)) (setFiatCurrencyCode (.. exchangeRate fiat currencyCode))))
            (.. txBuilder (setExchangeRate exchangeRateBuilder))
        )

        (§ if (!= (.. tx (getMemo)) nil))
        (§ block
            (.. txBuilder (setMemo (.. tx (getMemo))))
        )

        (.. txBuilder (build))
    )

    #_private
    #_static
    (§ defn- #_"Protos.Transaction.Pool" (§ fn getProtoPool) [#_"WalletTransaction" (§ name wtx)])
    (§ block
        (§ switch (.. wtx (getPool)))
        (§ block
            (§ case UNSPENT)
            (§ block
                (§ return Protos/Transaction/Pool/UNSPENT)
            )
            (§ case SPENT)
            (§ block
                (§ return Protos/Transaction/Pool/SPENT)
            )
            (§ case DEAD)
            (§ block
                (§ return Protos/Transaction/Pool/DEAD)
            )
            (§ case PENDING)
            (§ block
                (§ return Protos/Transaction/Pool/PENDING)
            )
            (§ default )
            (§ block
                (§ throw (§ new #_"RuntimeException" "Unreachable"))
            )
        )
    )

    #_private
    #_static
    (§ defn- #_"void" (§ fn writeConfidence) [#_"Protos.Transaction.Builder" (§ name txBuilder), #_"TransactionConfidence" (§ name confidence), #_"Protos.TransactionConfidence.Builder" (§ name confidenceBuilder)])
    (§ block
        (§ sync confidence)
        (§ block
            (.. confidenceBuilder (setType (Protos/TransactionConfidence/Type/valueOf (.. confidence (getConfidenceType) (getValue)))))
            (§ if (== (.. confidence (getConfidenceType)) ConfidenceType/BUILDING))
            (§ block
                (.. confidenceBuilder (setAppearedAtHeight (.. confidence (getAppearedAtChainHeight))))
                (.. confidenceBuilder (setDepth (.. confidence (getDepthInBlocks))))
            )
            (§ if (== (.. confidence (getConfidenceType)) ConfidenceType/DEAD))
            (§ block
                ;; Copy in the overriding transaction, if available.
                ;; (A dead coinbase transaction has no overriding transaction).
                (§ if (!= (.. confidence (getOverridingTransaction)) nil))
                (§ block
                    (§ var #_"Sha256Hash" (§ name overridingHash) (.. confidence (getOverridingTransaction) (getHash)))
                    (.. confidenceBuilder (setOverridingTransaction (hashToByteString overridingHash)))
                )
            )
            (§ var #_"TransactionConfidence.Source" (§ name source) (.. confidence (getSource)))
            (§ switch source)
            (§ block
                (§ case SELF)
                (§ block
                    (.. confidenceBuilder (setSource Protos/TransactionConfidence/Source/SOURCE_SELF))
                    (§ break )
                )
                (§ case NETWORK)
                (§ block
                    (.. confidenceBuilder (setSource Protos/TransactionConfidence/Source/SOURCE_NETWORK))
                    (§ break )
                )
                (§ case UNKNOWN)
                (§ block
                    ;; Fall through.
                )
                (§ default )
                (§ block
                    (.. confidenceBuilder (setSource Protos/TransactionConfidence/Source/SOURCE_UNKNOWN))
                    (§ break )
                )
            )
        )

        (§ for (§ var #_"PeerAddress" (§ name address)) :for (.. confidence (getBroadcastBy)))
        (§ block
            (§ var #_"Protos.PeerAddress" (§ name proto) (.. (Protos/PeerAddress/newBuilder) (setIpAddress (ByteString/copyFrom (.. address (getAddr) (getAddress)))) (setPort (.. address (getPort))) (setServices (.. address (getServices) (longValue))) (build)))
            (.. confidenceBuilder (addBroadcastBy proto))
        )
        (§ var #_"Date" (§ name lastBroadcastedAt) (.. confidence (getLastBroadcastedAt)))
        (§ if (some? lastBroadcastedAt))
        (§ block
            (.. confidenceBuilder (setLastBroadcastedAt (.. lastBroadcastedAt (getTime))))
        )
        (.. txBuilder (setConfidence confidenceBuilder))
        nil
    )

    #_public
    #_static
    (§ defn #_"ByteString" (§ fn hashToByteString) [#_"Sha256Hash" (§ name hash)])
    (§ block
        (ByteString/copyFrom (.. hash (getBytes)))
    )

    #_public
    #_static
    (§ defn #_"Sha256Hash" (§ fn byteStringToHash) [#_"ByteString" (§ name bs)])
    (§ block
        (Sha256Hash/wrap (.. bs (toByteArray)))
    )

    ;;;
     ; <p>Loads wallet data from the given protocol buffer and inserts it into the given Wallet object.
     ; This is primarily useful when you wish to pre-register extension objects.  Note that if loading
     ; fails the provided Wallet object may be in an indeterminate state and should be thrown away.</p>
     ;
     ; <p>A wallet can be unreadable for various reasons, such as inability to open the file, corrupt data,
     ; internally inconsistent data and so on.  You should always handle
     ; {@link UnreadableWalletException} and communicate failure to the user in an appropriate manner.</p>
     ;
     ; @throws UnreadableWalletException in various error conditions (see description).
     ;;
    #_public
    (§ method #_"Wallet" (§ fn readWallet) [#_"InputStream" (§ name input)])
        (§ throws #_"UnreadableWalletException")
    (§ block
        (readWallet input, false)
    )

    ;;;
     ; <p>Loads wallet data from the given protocol buffer and inserts it into the given Wallet object.
     ; This is primarily useful when you wish to pre-register extension objects.  Note that if loading
     ; fails the provided Wallet object may be in an indeterminate state and should be thrown away.  Do not
     ; simply call this method again on the same Wallet object with {@code forceReset} set {@code true}.
     ; It won't work.</p>
     ;
     ; <p>If {@code forceReset} is {@code true}, then no transactions are loaded from the wallet, and
     ; it is configured to replay transactions from the blockchain (as if the wallet had been loaded and
     ; {@link Wallet.reset} had been called immediately thereafter).
     ;
     ; <p>A wallet can be unreadable for various reasons, such as inability to open the file, corrupt data,
     ; internally inconsistent data and so on. You should always handle
     ; {@link UnreadableWalletException} and communicate failure to the user in an appropriate manner.</p>
     ;
     ; @throws UnreadableWalletException in various error conditions (see description).
     ;;
    #_public
    (§ method #_"Wallet" (§ fn readWallet) [#_"InputStream" (§ name input), #_"boolean" (§ name forceReset)])
        (§ throws #_"UnreadableWalletException")
    (§ block
        (§ try )
        (§ block
            (§ var #_"Protos.Wallet" (§ name walletProto) (parseToProto input))
            (§ var #_"String" (§ name paramsID) (.. walletProto (getNetworkIdentifier)))
            (§ var #_"NetworkParameters" (§ name params) (NetworkParameters/fromID paramsID))
            (§ if (nil? params))
            (§ block
                (§ throw (§ new #_"UnreadableWalletException" (§ expr "Unknown network parameters ID " + paramsID)))
            )

            (§ return (readWallet params, walletProto, forceReset))
        )
        (§ catch #_"IOException" (§ name e))
        (§ block
            (§ throw (§ new #_"UnreadableWalletException" "Could not parse input stream to protobuf", e))
        )
        (§ catch #_"IllegalStateException" (§ name e))
        (§ block
            (§ throw (§ new #_"UnreadableWalletException" "Could not parse input stream to protobuf", e))
        )
        (§ catch #_"IllegalArgumentException" (§ name e))
        (§ block
            (§ throw (§ new #_"UnreadableWalletException" "Could not parse input stream to protobuf", e))
        )
    )

    ;;;
     ; <p>Loads wallet data from the given protocol buffer and inserts it into the given Wallet object.
     ; This is primarily useful when you wish to pre-register extension objects.  Note that if loading
     ; fails, the provided Wallet object may be in an indeterminate state and should be thrown away.</p>
     ;
     ; <p>A wallet can be unreadable for various reasons, such as inability to open the file, corrupt
     ; data, internally inconsistent data and so on.  You should always handle
     ; {@link UnreadableWalletException} and communicate failure to the user in an appropriate manner.</p>
     ;
     ; @throws UnreadableWalletException in various error conditions (see description).
     ;;
    #_public
    (§ method #_"Wallet" (§ fn readWallet) [#_"NetworkParameters" (§ name params), #_"Protos.Wallet" (§ name walletProto)])
        (§ throws #_"UnreadableWalletException")
    (§ block
        (readWallet params, walletProto, false)
    )

    ;;;
     ; <p>Loads wallet data from the given protocol buffer and inserts it into the given Wallet object.
     ; This is primarily useful when you wish to pre-register extension objects.  Note that if loading
     ; fails, the provided Wallet object may be in an indeterminate state and should be thrown away.  Do not
     ; simply call this method again on the same Wallet object with {@code forceReset} set {@code true}.
     ; It won't work.</p>
     ;
     ; <p>If {@code forceReset} is {@code true}, then no transactions are loaded from the wallet, and it is
     ; configured to replay transactions from the blockchain (as if the wallet had been loaded and
     ; {@link Wallet.reset} had been called immediately thereafter).
     ;
     ; <p>A wallet can be unreadable for various reasons, such as inability to open the file, corrupt data,
     ; internally inconsistent data and so on.  You should always handle
     ; {@link UnreadableWalletException} and communicate failure to the user in an appropriate manner.</p>
     ;
     ; @throws UnreadableWalletException in various error conditions (see description).
     ;;
    #_public
    (§ method #_"Wallet" (§ fn readWallet) [#_"NetworkParameters" (§ name params), #_"Protos.Wallet" (§ name walletProto), #_"boolean" (§ name forceReset)])
        (§ throws #_"UnreadableWalletException")
    (§ block
        (§ if (§ expr CURRENT_WALLET_VERSION < (.. walletProto (getVersion))))
        (§ block
            (§ throw (§ new #_"UnreadableWalletException.FutureVersion"))
        )
        (§ if (§ not (.. walletProto (getNetworkIdentifier) (equals (.. params (getId))))))
        (§ block
            (§ throw (§ new #_"UnreadableWalletException.WrongNetwork"))
        )

        ;; Read the scrypt parameters that specify how encryption and decryption is performed.
        (§ var #_"KeyChainGroup" (§ name keyChainGroup))
        (§ if (.. walletProto (hasEncryptionParameters)))
        (§ block
            (§ var #_"Protos.ScryptParameters" (§ name encryptionParameters) (.. walletProto (getEncryptionParameters)))
            (§ var #_"KeyCrypterScrypt" (§ name keyCrypter) (§ new #_"KeyCrypterScrypt" encryptionParameters))
            (§ ass (§ name keyChainGroup) (KeyChainGroup/fromProtobufEncrypted params, (.. walletProto (getKeyList)), keyCrypter, keyChainFactory))
        )
        (§ else )
        (§ block
            (§ ass (§ name keyChainGroup) (KeyChainGroup/fromProtobufUnencrypted params, (.. walletProto (getKeyList)), keyChainFactory))
        )

        (§ var #_"Wallet" (§ name wallet) (.. factory (create params, keyChainGroup)))
        (§ if (.. walletProto (hasDescription)))
        (§ block
            (.. wallet (setDescription (.. walletProto (getDescription))))
        )

        (§ if forceReset)
        (§ block
            ;; Should mirror Wallet.reset().
            (.. wallet (setLastBlockSeenHash nil))
            (.. wallet (setLastBlockSeenHeight -1))
            (.. wallet (setLastBlockSeenTimeSecs 0))
        )
        (§ else )
        (§ block
            ;; Read all transactions and insert into the txMap.
            (§ for (§ var #_"Protos.Transaction" (§ name txProto)) :for (.. walletProto (getTransactionList)))
            (§ block
                (readTransaction txProto, (.. wallet (getParams)))
            )

            ;; Update transaction outputs to point to inputs that spend them.
            (§ for (§ var #_"Protos.Transaction" (§ name txProto)) :for (.. walletProto (getTransactionList)))
            (§ block
                (§ var #_"WalletTransaction" (§ name wtx) (connectTransactionOutputs params, txProto))
                (.. wallet (addWalletTransaction wtx))
            )

            ;; Update the lastBlockSeenHash.
            (§ if (§ not (.. walletProto (hasLastSeenBlockHash))))
            (§ block
                (.. wallet (setLastBlockSeenHash nil))
            )
            (§ else )
            (§ block
                (.. wallet (setLastBlockSeenHash (byteStringToHash (.. walletProto (getLastSeenBlockHash)))))
            )

            (§ if (§ not (.. walletProto (hasLastSeenBlockHeight))))
            (§ block
                (.. wallet (setLastBlockSeenHeight -1))
            )
            (§ else )
            (§ block
                (.. wallet (setLastBlockSeenHeight (.. walletProto (getLastSeenBlockHeight))))
            )

            ;; Will default to zero if not present.
            (.. wallet (setLastBlockSeenTimeSecs (.. walletProto (getLastSeenBlockTimeSecs))))

            (§ if (.. walletProto (hasKeyRotationTime)))
            (§ block
                (.. wallet (setKeyRotationTime (§ new #_"Date" (* (.. walletProto (getKeyRotationTime)) 1000))))
            )
        )

        (§ for (§ var #_"Protos.TransactionSigner" (§ name signerProto)) :for (.. walletProto (getTransactionSignersList)))
        (§ block
            (§ try )
            (§ block
                (§ var #_"Class" (§ name signerClass) (Class/forName (.. signerProto (getClassName))))
                (§ var #_"TransactionSigner" (§ name signer) (§ cast #_"TransactionSigner" (.. signerClass (newInstance))))
                (.. signer (deserialize (.. signerProto (getData) (toByteArray))))
                (.. wallet (addTransactionSigner signer))
            )
            (§ catch #_"Exception" (§ name e))
            (§ block
                (§ throw (§ new #_"UnreadableWalletException" (§ expr "Unable to deserialize TransactionSigner instance: " + (.. signerProto (getClassName))), e))
            )
        )

        (§ if (.. walletProto (hasVersion)))
        (§ block
            (.. wallet (setVersion (.. walletProto (getVersion))))
        )

        ;; Make sure the object can be re-used to read another wallet without corruption.
        (.. txMap (clear))

        wallet
    )

    ;;;
     ; Returns the loaded protocol buffer from the given byte stream.  You normally want
     ; {@link Wallet#loadFromFile(java.io.File)} instead - this method is designed for
     ; low level work involving the wallet file format itself.
     ;;
    #_public
    #_static
    (§ defn #_"Protos.Wallet" (§ fn parseToProto) [#_"InputStream" (§ name input)])
        (§ throws #_"IOException")
    (§ block
        (§ var #_"CodedInputStream" (§ name codedInput) (CodedInputStream/newInstance input))
        (.. codedInput (setSizeLimit WALLET_SIZE_LIMIT))
        (.. Protos/Wallet (parseFrom codedInput))
    )

    #_private
    (§ method- #_"void" (§ fn readTransaction) [#_"Protos.Transaction" (§ name txProto), #_"NetworkParameters" (§ name params)])
        (§ throws #_"UnreadableWalletException")
    (§ block
        (§ var #_"Transaction" (§ name tx) (§ new #_"Transaction" params))

        (.. tx (setVersion (.. txProto (getVersion))))

        (§ if (.. txProto (hasUpdatedAt)))
        (§ block
            (.. tx (setUpdateTime (§ new #_"Date" (.. txProto (getUpdatedAt)))))
        )

        (§ for (§ var #_"Protos.TransactionOutput" (§ name outputProto)) :for (.. txProto (getTransactionOutputList)))
        (§ block
            (§ var #_"Coin" (§ name value) (Coin/valueOf (.. outputProto (getValue))))
            (§ var #_"byte[]" (§ name scriptBytes) (.. outputProto (getScriptBytes) (toByteArray)))
            (§ var #_"TransactionOutput" (§ name output) (§ new #_"TransactionOutput" params, tx, value, scriptBytes))
            (.. tx (addOutput output))
        )

        (§ for (§ var #_"Protos.TransactionInput" (§ name inputProto)) :for (.. txProto (getTransactionInputList)))
        (§ block
            (§ var #_"byte[]" (§ name scriptBytes) (.. inputProto (getScriptBytes) (toByteArray)))
            (§ var #_"TransactionOutPoint" (§ name outpoint) (§ new #_"TransactionOutPoint" params, (§ expr (.. inputProto (getTransactionOutPointIndex)) & 0xffffffff), (byteStringToHash (.. inputProto (getTransactionOutPointHash)))))
            (§ var #_"Coin" (§ name value) (when (.. inputProto (hasValue)) (Coin/valueOf (.. inputProto (getValue)))))
            (§ var #_"TransactionInput" (§ name input) (§ new #_"TransactionInput" params, tx, scriptBytes, outpoint, value))
            (§ if (.. inputProto (hasSequence)))
            (§ block
                (.. input (setSequenceNumber (§ expr 0xffffffff & (.. inputProto (getSequence)))))
            )
            (.. tx (addInput input))
        )

        (§ for (§ var #_"int" (§ name i) 0) :for (§ expr i < (.. txProto (getBlockHashCount))) :for (§ ass (§ name i) (+ i 1)))
        (§ block
            (§ var #_"ByteString" (§ name blockHash) (.. txProto (getBlockHash i)))
            (§ var #_"int" (§ name relativityOffset) 0)
            (§ if (§ expr 0 < (.. txProto (getBlockRelativityOffsetsCount))))
            (§ block
                (§ ass (§ name relativityOffset) (.. txProto (getBlockRelativityOffsets i)))
            )
            (.. tx (addBlockAppearance (byteStringToHash blockHash), relativityOffset))
        )

        (§ if (.. txProto (hasLockTime)))
        (§ block
            (.. tx (setLockTime (§ expr 0xffffffff & (.. txProto (getLockTime)))))
        )

        (§ if (.. txProto (hasPurpose)))
        (§ block
            (§ switch (.. txProto (getPurpose)))
            (§ block
                (§ case UNKNOWN)
                (§ block
                    (.. tx (setPurpose Transaction/Purpose/UNKNOWN))
                    (§ break )
                )
                (§ case USER_PAYMENT)
                (§ block
                    (.. tx (setPurpose Transaction/Purpose/USER_PAYMENT))
                    (§ break )
                )
                (§ case KEY_ROTATION)
                (§ block
                    (.. tx (setPurpose Transaction/Purpose/KEY_ROTATION))
                    (§ break )
                )
                (§ case ASSURANCE_CONTRACT_CLAIM)
                (§ block
                    (.. tx (setPurpose Transaction/Purpose/ASSURANCE_CONTRACT_CLAIM))
                    (§ break )
                )
                (§ case ASSURANCE_CONTRACT_PLEDGE)
                (§ block
                    (.. tx (setPurpose Transaction/Purpose/ASSURANCE_CONTRACT_PLEDGE))
                    (§ break )
                )
                (§ case ASSURANCE_CONTRACT_STUB)
                (§ block
                    (.. tx (setPurpose Transaction/Purpose/ASSURANCE_CONTRACT_STUB))
                    (§ break )
                )
                (§ case RAISE_FEE)
                (§ block
                    (.. tx (setPurpose Transaction/Purpose/RAISE_FEE))
                    (§ break )
                )
                (§ default )
                (§ block
                    (§ throw (§ new #_"RuntimeException" "New purpose serialization not implemented"))
                )
            )
        )
        (§ else )
        (§ block
            ;; Old wallet: assume a user payment as that's the only reason a new tx would have been created back then.
            (.. tx (setPurpose Transaction/Purpose/USER_PAYMENT))
        )

        (§ if (.. txProto (hasExchangeRate)))
        (§ block
            (§ var #_"Protos.ExchangeRate" (§ name exchangeRateProto) (.. txProto (getExchangeRate)))
            (.. tx (setExchangeRate (§ new #_"ExchangeRate" (Coin/valueOf (.. exchangeRateProto (getCoinValue))), (Fiat/valueOf (.. exchangeRateProto (getFiatCurrencyCode)), (.. exchangeRateProto (getFiatValue))))))
        )

        (§ if (.. txProto (hasMemo)))
        (§ block
            (.. tx (setMemo (.. txProto (getMemo))))
        )

        ;; Transaction should now be complete.
        (§ var #_"Sha256Hash" (§ name protoHash) (byteStringToHash (.. txProto (getHash))))
        (§ if (§ not (.. tx (getHash) (equals protoHash))))
        (§ block
            (§ throw (§ new #_"UnreadableWalletException" (String/format Locale/US, "Transaction did not deserialize completely: %s vs %s", (.. tx (getHash)), protoHash)))
        )
        (§ if (.. txMap (containsKey (.. txProto (getHash)))))
        (§ block
            (§ throw (§ new #_"UnreadableWalletException" (§ expr "Wallet contained duplicate transaction " + (byteStringToHash (.. txProto (getHash))))))
        )
        (.. txMap (put (.. txProto (getHash)), tx))
        nil
    )

    #_private
    (§ method- #_"WalletTransaction" (§ fn connectTransactionOutputs) [#_"NetworkParameters" (§ name params), #_"org.bitcoinj.wallet.Protos.Transaction" (§ name txProto)])
        (§ throws #_"UnreadableWalletException")
    (§ block
        (§ var #_"Transaction" (§ name tx) (.. txMap (get (.. txProto (getHash)))))
        (§ var #_"WalletTransaction.Pool" (§ name pool))
        (§ switch (.. txProto (getPool)))
        (§ block
            (§ case DEAD)
            (§ block
                (§ ass (§ name pool) WalletTransaction/Pool/DEAD)
                (§ break )
            )
            (§ case PENDING)
            (§ block
                (§ ass (§ name pool) WalletTransaction/Pool/PENDING)
                (§ break )
            )
            (§ case SPENT)
            (§ block
                (§ ass (§ name pool) WalletTransaction/Pool/SPENT)
                (§ break )
            )
            (§ case UNSPENT)
            (§ block
                (§ ass (§ name pool) WalletTransaction/Pool/UNSPENT)
                (§ break )
            )
            ;; Upgrade old wallets: inactive pool has been merged with the pending pool.
            ;; Remove this some time after 0.9 is old and everyone has upgraded.
            ;; There should not be any spent outputs in this tx as old wallets would not allow them to be spent in this state.
            (§ case INACTIVE)
            (§ case PENDING_INACTIVE)
            (§ block
                (§ ass (§ name pool) WalletTransaction/Pool/PENDING)
                (§ break )
            )
            (§ default )
            (§ block
                (§ throw (§ new #_"UnreadableWalletException" (§ expr "Unknown transaction pool: " + (.. txProto (getPool)))))
            )
        )

        (§ for (§ var #_"int" (§ name i) 0) :for (§ expr i < (.. tx (getOutputs) (size))) :for (§ ass (§ name i) (+ i 1)))
        (§ block
            (§ var #_"TransactionOutput" (§ name output) (.. tx (getOutputs) (get i)))
            (§ var #_"Protos.TransactionOutput" (§ name transactionOutput) (.. txProto (getTransactionOutput i)))
            (§ if (.. transactionOutput (hasSpentByTransactionHash)))
            (§ block
                (§ var #_"ByteString" (§ name spentByTransactionHash) (.. transactionOutput (getSpentByTransactionHash)))
                (§ var #_"Transaction" (§ name spendingTx) (.. txMap (get spentByTransactionHash)))
                (§ if (nil? spendingTx))
                (§ block
                    (§ throw (§ new #_"UnreadableWalletException" (String/format Locale/US, "Could not connect %s to %s", (.. tx (getHashAsString)), (byteStringToHash spentByTransactionHash))))
                )

                (§ var #_"int" (§ name spendingIndex) (.. transactionOutput (getSpentByTransactionIndex)))
                (§ var #_"TransactionInput" (§ name input) (Preconditions/checkNotNull (.. spendingTx (getInput spendingIndex))))
                (.. input (connect output))
            )
        )

        (§ if (.. txProto (hasConfidence)))
        (§ block
            (§ var #_"Protos.TransactionConfidence" (§ name confidenceProto) (.. txProto (getConfidence)))
            (§ var #_"TransactionConfidence" (§ name confidence) (.. tx (getConfidence)))
            (readConfidence params, tx, confidenceProto, confidence)
        )

        (§ new #_"WalletTransaction" pool, tx)
    )

    #_private
    (§ method- #_"void" (§ fn readConfidence) [#_"NetworkParameters" (§ name params), #_"Transaction" (§ name tx), #_"Protos.TransactionConfidence" (§ name confidenceProto), #_"TransactionConfidence" (§ name confidence)])
        (§ throws #_"UnreadableWalletException")
    (§ block
        ;; We are lenient here because tx confidence is not an essential part of the wallet.
        ;; If the tx has an unknown type of confidence, ignore.
        (§ if (§ not (.. confidenceProto (hasType))))
        (§ block
            (.. log (warn "Unknown confidence type for tx {}", (.. tx (getHashAsString))))
            (§ return nil)
        )

        (§ var #_"ConfidenceType" (§ name confidenceType))
        (§ switch (.. confidenceProto (getType)))
        (§ block
            (§ case BUILDING)
            (§ block
                (§ ass (§ name confidenceType) ConfidenceType/BUILDING)
                (§ break )
            )
            (§ case DEAD)
            (§ block
                (§ ass (§ name confidenceType) ConfidenceType/DEAD)
                (§ break )
            )
            ;; These two are equivalent (must be able to read old wallets).
            (§ case NOT_IN_BEST_CHAIN)
            (§ block
                (§ ass (§ name confidenceType) ConfidenceType/PENDING)
                (§ break )
            )
            (§ case PENDING)
            (§ block
                (§ ass (§ name confidenceType) ConfidenceType/PENDING)
                (§ break )
            )
            (§ case IN_CONFLICT)
            (§ block
                (§ ass (§ name confidenceType) ConfidenceType/IN_CONFLICT)
                (§ break )
            )
            (§ case UNKNOWN)
            (§ block
                ;; Fall through.
            )
            (§ default )
            (§ block
                (§ ass (§ name confidenceType) ConfidenceType/UNKNOWN)
                (§ break )
            )
        )
        (.. confidence (setConfidenceType confidenceType))
        (§ if (.. confidenceProto (hasAppearedAtHeight)))
        (§ block
            (§ if (!= (.. confidence (getConfidenceType)) ConfidenceType/BUILDING))
            (§ block
                (.. log (warn "Have appearedAtHeight but not BUILDING for tx {}", (.. tx (getHashAsString))))
                (§ return nil)
            )
            (.. confidence (setAppearedAtChainHeight (.. confidenceProto (getAppearedAtHeight))))
        )

        (§ if (.. confidenceProto (hasDepth)))
        (§ block
            (§ if (!= (.. confidence (getConfidenceType)) ConfidenceType/BUILDING))
            (§ block
                (.. log (warn "Have depth but not BUILDING for tx {}", (.. tx (getHashAsString))))
                (§ return nil)
            )
            (.. confidence (setDepthInBlocks (.. confidenceProto (getDepth))))
        )

        (§ if (.. confidenceProto (hasOverridingTransaction)))
        (§ block
            (§ if (!= (.. confidence (getConfidenceType)) ConfidenceType/DEAD))
            (§ block
                (.. log (warn "Have overridingTransaction but not OVERRIDDEN for tx {}", (.. tx (getHashAsString))))
                (§ return nil)
            )
            (§ var #_"Transaction" (§ name overridingTransaction) (.. txMap (get (.. confidenceProto (getOverridingTransaction)))))
            (§ if (nil? overridingTransaction))
            (§ block
                (.. log (warn "Have overridingTransaction that is not in wallet for tx {}", (.. tx (getHashAsString))))
                (§ return nil)
            )
            (.. confidence (setOverridingTransaction overridingTransaction))
        )

        (§ for (§ var #_"Protos.PeerAddress" (§ name proto)) :for (.. confidenceProto (getBroadcastByList)))
        (§ block
            (§ var #_"InetAddress" (§ name ip))
            (§ try )
            (§ block
                (§ ass (§ name ip) (InetAddress/getByAddress (.. proto (getIpAddress) (toByteArray))))
            )
            (§ catch #_"UnknownHostException" (§ name e))
            (§ block
                (§ throw (§ new #_"UnreadableWalletException" "Peer IP address does not have the right length", e))
            )

            (§ var #_"int" (§ name port) (.. proto (getPort)))
            (§ var #_"int" (§ name protocolVersion) (.. params (getProtocolVersionNum NetworkParameters/ProtocolVersion/CURRENT)))
            (§ var #_"BigInteger" (§ name services) (BigInteger/valueOf (.. proto (getServices))))
            (§ var #_"PeerAddress" (§ name address) (§ new #_"PeerAddress" params, ip, port, protocolVersion, services))
            (.. confidence (markBroadcastBy address))
        )

        (§ if (.. confidenceProto (hasLastBroadcastedAt)))
        (§ block
            (.. confidence (setLastBroadcastedAt (§ new #_"Date" (.. confidenceProto (getLastBroadcastedAt)))))
        )

        (§ switch (.. confidenceProto (getSource)))
        (§ block
            (§ case SOURCE_SELF)
            (§ block
                (.. confidence (setSource TransactionConfidence/Source/SELF))
                (§ break )
            )
            (§ case SOURCE_NETWORK)
            (§ block
                (.. confidence (setSource TransactionConfidence/Source/NETWORK))
                (§ break )
            )
            (§ case SOURCE_UNKNOWN)
            (§ block
                ;; Fall through.
            )
            (§ default )
            (§ block
                (.. confidence (setSource TransactionConfidence/Source/UNKNOWN))
                (§ break )
            )
        )
        nil
    )

    ;;;
     ; Cheap test to see if input stream is a wallet.  This checks for a magic value at the beginning of the stream.
     ;
     ; @param is Input stream to test.
     ; @return true if input stream is a wallet.
     ;;
    #_public
    #_static
    (§ defn #_"boolean" (§ fn isWallet) [#_"InputStream" (§ name is)])
    (§ block
        (§ try )
        (§ block
            (§ var #_"CodedInputStream" (§ name cis) (CodedInputStream/newInstance is))
            (§ var #_"int" (§ name tag) (.. cis (readTag)))
            (§ var #_"int" (§ name field) (WireFormat/getTagFieldNumber tag))
            (§ if (§ expr field != 1)) ;; network_identifier
            (§ block
                (§ return false)
            )

            (§ var #_"String" (§ name network) (.. cis (readString)))
            (§ return (!= (NetworkParameters/fromID network) nil))
        )
        (§ catch #_"IOException" (§ name _))
        (§ block
            (§ return false)
        )
    )
)

#_(ns org.bitcoinj.wallet #_"WalletTransaction"
    (:import [com.google.common.base Preconditions])
   (:require [org.bitcoinj.core Transaction]))

;;;
 ; Stores data about a transaction that is only relevant to the {@link org.bitcoinj.wallet.Wallet} class.
 ;;
#_public
(§ class #_"WalletTransaction"
    #_public
    (§ enum #_"Pool"
        (§ item UNSPENT) ;; unspent in best chain
        (§ item SPENT) ;; spent in best chain
        (§ item DEAD) ;; double-spend in alt chain
        (§ item PENDING) ;; a pending tx we would like to go into the best chain
    )
    #_private
    (§ field- #_"Transaction" (§ name transaction))
    #_private
    (§ field- #_"Pool" (§ name pool))

    #_public
    (§ constructor #_"WalletTransaction" [#_"Pool" (§ name pool), #_"Transaction" (§ name transaction)])
    (§ block
        (§ ass (§ name (.. this pool)) (Preconditions/checkNotNull pool))
        (§ ass (§ name (.. this transaction)) transaction)
        this
    )

    #_public
    (§ method #_"Transaction" (§ fn getTransaction) [])
    (§ block
        transaction
    )

    #_public
    (§ method #_"Pool" (§ fn getPool) [])
    (§ block
        pool
    )
)

#_(ns org.bitcoinj.wallet.listeners #_"KeyChainEventListener"
    (:import [java.util List])
   (:require [org.bitcoinj.core ECKey]
             [org.bitcoinj.wallet KeyChain]))

#_public
(§ interface #_"KeyChainEventListener"
    ;;;
     ; Called whenever a new key is added to the key chain, whether that be via an explicit addition or due to some
     ; other automatic derivation.  See the documentation for your {@link KeyChain} implementation for details on
     ; what can trigger this event.
     ;;
    (§ method #_"void" (§ fn onKeysAdded) [#_"List<ECKey>" (§ name keys)])
)

#_(ns org.bitcoinj.wallet.listeners #_"WalletChangeEventListener"
   (:require [org.bitcoinj.wallet Wallet]))

;;;
 ; <p>Implementors are called when the contents of the wallet changes, for instance due to receiving/sending money
 ; or a block chain re-organize.</p>
 ;;
#_public
(§ interface #_"WalletChangeEventListener"
    ;;;
     ; <p>Designed for GUI applications to refresh their transaction lists.  This callback is invoked in the following
     ; situations:</p>
     ;
     ; <ol>
     ;     <li>A new block is received (and thus building transactions got more confidence).</li>
     ;     <li>A pending transaction is received.</li>
     ;     <li>A pending transaction changes confidence due to some non-new-block related event,
     ;     such as being announced by more peers or by  a double-spend conflict being observed.</li>
     ;     <li>A re-organize occurs. Call occurs only if the re-org modified any of our transactions.</li>
     ;     <li>A new spend is committed to the wallet.</li>
     ;     <li>The wallet is reset and all transactions removed.<li>
     ; </ol>
     ;
     ; <p>When this is called you can refresh the UI contents from the wallet contents.  It's more efficient to use
     ; this rather than onTransactionConfidenceChanged() + onReorganize() because you only get one callback per block
     ; rather than one per transaction per block.  Note that this is <b>not</b> called when a key is added.</p>
     ;;
    (§ method #_"void" (§ fn onWalletChanged) [#_"Wallet" (§ name wallet)])
)

#_(ns org.bitcoinj.wallet.listeners #_"WalletCoinsReceivedEventListener"
   (:require [org.bitcoinj.core Coin Transaction]
             [org.bitcoinj.wallet Wallet]))

;;;
 ; <p>Implementors are called when the contents of the wallet changes, for instance due to receiving/sending money
 ; or a block chain re-organize.</p>
 ;;
#_public
(§ interface #_"WalletCoinsReceivedEventListener"
    ;;;
     ; This is called when a transaction is seen that sends coins <b>to</b> this wallet, either because it was
     ; broadcast across the network or because a block was received.  If a transaction is seen when it was broadcast,
     ; onCoinsReceived won't be called again when a block containing it is received.  If you want to know when such
     ; a transaction receives its first confirmation, register a {@link TransactionConfidence} event listener using
     ; the object retrieved via {@link org.bitcoinj.core.Transaction#getConfidence()}.  It's safe to modify the
     ; wallet in this callback, for example, by spending the transaction just received.
     ;
     ; @param wallet The wallet object that received the coins.
     ; @param tx The transaction which sent us the coins.
     ; @param prevBalance Balance before the coins were received.
     ; @param newBalance This is the 'estimated' balance.
     ;;
    (§ method #_"void" (§ fn onCoinsReceived) [#_"Wallet" (§ name wallet), #_"Transaction" (§ name tx), #_"Coin" (§ name prevBalance), #_"Coin" (§ name newBalance)])
)

#_(ns org.bitcoinj.wallet.listeners #_"WalletCoinsSentEventListener"
   (:require [org.bitcoinj.core Coin Transaction]
             [org.bitcoinj.wallet Wallet]))

;;;
 ; <p>Implementors are called when the contents of the wallet changes, for instance due to receiving/sending money
 ; or a block chain re-organize.</p>
 ;;
#_public
(§ interface #_"WalletCoinsSentEventListener"
    ;;;
     ; This is called when a transaction is seen that sends coins <b>from</b> this wallet, either because it
     ; was broadcast across the network or because a block was received.  This may at first glance seem useless,
     ; because in the common case you already know about such transactions because you created them with the
     ; Wallets createSend/sendCoins methods.  However when you have a wallet containing only keys, and you wish
     ; to replay the block chain to fill it with transactions, it's useful to find out when a transaction is
     ; discovered that sends coins from the wallet.
     ;
     ; It's safe to modify the wallet from inside this callback, but if you're replaying the block chain you should
     ; be careful to avoid such modifications.  Otherwise your changes may be overridden by new data from the chain.
     ;
     ; @param wallet The wallet object that this callback relates to (that sent the coins).
     ; @param tx The transaction that sent the coins to someone else.
     ; @param prevBalance The wallets balance before this transaction was seen.
     ; @param newBalance The wallets balance after this transaction was seen.  This is the 'estimated' balance.
     ;;
    (§ method #_"void" (§ fn onCoinsSent) [#_"Wallet" (§ name wallet), #_"Transaction" (§ name tx), #_"Coin" (§ name prevBalance), #_"Coin" (§ name newBalance)])
)

#_(ns org.bitcoinj.wallet.listeners #_"WalletReorganizeEventListener"
   (:require [org.bitcoinj.wallet Wallet]))

;;;
 ; <p>Implementors are called when the wallet is reorganized.</p>
 ;;
#_public
(§ interface #_"WalletReorganizeEventListener"
    ;; TODO: Finish onReorganize to be more useful.
    ;;;
     ; <p>This is called when a block is received that triggers a block chain re-organization.</p>
     ;
     ; <p>A re-organize means that the consensus (chain) of the network has diverged and now changed from
     ; what we believed it was previously.  Usually this won't matter because the new consensus will include
     ; all our old transactions assuming we are playing by the rules.  However it's theoretically possible
     ; for our balance to change in arbitrary ways, most likely, we could lose some money we thought we had.</p>
     ;
     ; <p>It is safe to use methods of wallet whilst inside this callback.</p>
     ;;
    (§ method #_"void" (§ fn onReorganize) [#_"Wallet" (§ name wallet)])
)
